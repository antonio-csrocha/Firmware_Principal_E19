
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014798  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08014968  08014968  00024968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b2c  08014b2c  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014b2c  08014b2c  00024b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b34  08014b34  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b34  08014b34  00024b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b38  08014b38  00024b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08014b3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000620c  200001d8  08014d14  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200063e4  08014d14  000363e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ee21  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007337  00000000  00000000  0006f029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002228  00000000  00000000  00076360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f30  00000000  00000000  00078588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e641  00000000  00000000  0007a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033b53  00000000  00000000  000a8af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f314f  00000000  00000000  000dc64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cf79b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000911c  00000000  00000000  001cf7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014950 	.word	0x08014950

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08014950 	.word	0x08014950

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <FT_CAN_ProcessData>:
}

#ifndef FT_CAN_SIMPLE

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80005b6:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80005be:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 80005c0:	89fb      	ldrh	r3, [r7, #14]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	f040 823a 	bne.w	8000a40 <FT_CAN_ProcessData+0x498>
	{
		return;
	}

	switch(id >> 1)
 80005cc:	89fb      	ldrh	r3, [r7, #14]
 80005ce:	085b      	lsrs	r3, r3, #1
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	2b8d      	cmp	r3, #141	; 0x8d
 80005d4:	f300 8166 	bgt.w	80008a4 <FT_CAN_ProcessData+0x2fc>
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dc41      	bgt.n	8000660 <FT_CAN_ProcessData+0xb8>
 80005dc:	e229      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
 80005de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80005e2:	2b1b      	cmp	r3, #27
 80005e4:	f200 8225 	bhi.w	8000a32 <FT_CAN_ProcessData+0x48a>
 80005e8:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <FT_CAN_ProcessData+0x48>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	080009f7 	.word	0x080009f7
 80005f4:	08000a33 	.word	0x08000a33
 80005f8:	08000a33 	.word	0x08000a33
 80005fc:	08000a33 	.word	0x08000a33
 8000600:	08000a33 	.word	0x08000a33
 8000604:	08000a33 	.word	0x08000a33
 8000608:	08000a33 	.word	0x08000a33
 800060c:	08000a33 	.word	0x08000a33
 8000610:	08000a33 	.word	0x08000a33
 8000614:	08000a33 	.word	0x08000a33
 8000618:	08000a33 	.word	0x08000a33
 800061c:	08000a33 	.word	0x08000a33
 8000620:	08000a33 	.word	0x08000a33
 8000624:	08000a33 	.word	0x08000a33
 8000628:	08000a33 	.word	0x08000a33
 800062c:	08000a33 	.word	0x08000a33
 8000630:	08000a33 	.word	0x08000a33
 8000634:	08000a33 	.word	0x08000a33
 8000638:	08000a01 	.word	0x08000a01
 800063c:	08000a33 	.word	0x08000a33
 8000640:	08000a33 	.word	0x08000a33
 8000644:	08000a33 	.word	0x08000a33
 8000648:	08000a33 	.word	0x08000a33
 800064c:	08000a33 	.word	0x08000a33
 8000650:	08000a0b 	.word	0x08000a0b
 8000654:	08000a15 	.word	0x08000a15
 8000658:	08000a1f 	.word	0x08000a1f
 800065c:	08000a29 	.word	0x08000a29
 8000660:	3b01      	subs	r3, #1
 8000662:	2b8c      	cmp	r3, #140	; 0x8c
 8000664:	f200 81e5 	bhi.w	8000a32 <FT_CAN_ProcessData+0x48a>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <FT_CAN_ProcessData+0xc8>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080008b7 	.word	0x080008b7
 8000674:	080008c3 	.word	0x080008c3
 8000678:	080008cd 	.word	0x080008cd
 800067c:	080008d7 	.word	0x080008d7
 8000680:	080008e1 	.word	0x080008e1
 8000684:	080008ed 	.word	0x080008ed
 8000688:	080008f7 	.word	0x080008f7
 800068c:	08000939 	.word	0x08000939
 8000690:	08000943 	.word	0x08000943
 8000694:	0800094d 	.word	0x0800094d
 8000698:	08000957 	.word	0x08000957
 800069c:	08000961 	.word	0x08000961
 80006a0:	0800096b 	.word	0x0800096b
 80006a4:	08000975 	.word	0x08000975
 80006a8:	0800097f 	.word	0x0800097f
 80006ac:	08000989 	.word	0x08000989
 80006b0:	08000901 	.word	0x08000901
 80006b4:	08000a33 	.word	0x08000a33
 80006b8:	08000a33 	.word	0x08000a33
 80006bc:	08000a33 	.word	0x08000a33
 80006c0:	08000a33 	.word	0x08000a33
 80006c4:	08000a33 	.word	0x08000a33
 80006c8:	08000a33 	.word	0x08000a33
 80006cc:	08000a33 	.word	0x08000a33
 80006d0:	08000a33 	.word	0x08000a33
 80006d4:	08000a33 	.word	0x08000a33
 80006d8:	08000a33 	.word	0x08000a33
 80006dc:	08000a33 	.word	0x08000a33
 80006e0:	08000a33 	.word	0x08000a33
 80006e4:	08000a33 	.word	0x08000a33
 80006e8:	08000a33 	.word	0x08000a33
 80006ec:	08000a33 	.word	0x08000a33
 80006f0:	08000a33 	.word	0x08000a33
 80006f4:	08000a33 	.word	0x08000a33
 80006f8:	08000a33 	.word	0x08000a33
 80006fc:	08000a33 	.word	0x08000a33
 8000700:	08000a33 	.word	0x08000a33
 8000704:	08000a33 	.word	0x08000a33
 8000708:	0800090b 	.word	0x0800090b
 800070c:	08000a33 	.word	0x08000a33
 8000710:	08000a33 	.word	0x08000a33
 8000714:	08000a33 	.word	0x08000a33
 8000718:	08000a33 	.word	0x08000a33
 800071c:	08000a33 	.word	0x08000a33
 8000720:	08000a33 	.word	0x08000a33
 8000724:	08000a33 	.word	0x08000a33
 8000728:	08000a33 	.word	0x08000a33
 800072c:	08000a33 	.word	0x08000a33
 8000730:	08000a33 	.word	0x08000a33
 8000734:	08000a33 	.word	0x08000a33
 8000738:	08000a33 	.word	0x08000a33
 800073c:	08000a33 	.word	0x08000a33
 8000740:	08000a33 	.word	0x08000a33
 8000744:	08000a33 	.word	0x08000a33
 8000748:	08000a33 	.word	0x08000a33
 800074c:	08000a33 	.word	0x08000a33
 8000750:	08000a33 	.word	0x08000a33
 8000754:	08000a33 	.word	0x08000a33
 8000758:	08000a33 	.word	0x08000a33
 800075c:	08000a33 	.word	0x08000a33
 8000760:	08000a33 	.word	0x08000a33
 8000764:	08000a33 	.word	0x08000a33
 8000768:	08000a33 	.word	0x08000a33
 800076c:	08000a33 	.word	0x08000a33
 8000770:	08000a33 	.word	0x08000a33
 8000774:	08000915 	.word	0x08000915
 8000778:	08000a33 	.word	0x08000a33
 800077c:	08000a33 	.word	0x08000a33
 8000780:	08000a33 	.word	0x08000a33
 8000784:	08000a33 	.word	0x08000a33
 8000788:	08000a33 	.word	0x08000a33
 800078c:	08000993 	.word	0x08000993
 8000790:	0800099d 	.word	0x0800099d
 8000794:	080009a7 	.word	0x080009a7
 8000798:	080009b1 	.word	0x080009b1
 800079c:	080009bb 	.word	0x080009bb
 80007a0:	080009c5 	.word	0x080009c5
 80007a4:	080009cf 	.word	0x080009cf
 80007a8:	080009d9 	.word	0x080009d9
 80007ac:	080009e3 	.word	0x080009e3
 80007b0:	080009ed 	.word	0x080009ed
 80007b4:	08000a33 	.word	0x08000a33
 80007b8:	08000a33 	.word	0x08000a33
 80007bc:	08000a33 	.word	0x08000a33
 80007c0:	08000a33 	.word	0x08000a33
 80007c4:	08000a33 	.word	0x08000a33
 80007c8:	08000a33 	.word	0x08000a33
 80007cc:	08000a33 	.word	0x08000a33
 80007d0:	08000a33 	.word	0x08000a33
 80007d4:	08000a33 	.word	0x08000a33
 80007d8:	08000a33 	.word	0x08000a33
 80007dc:	08000a33 	.word	0x08000a33
 80007e0:	08000a33 	.word	0x08000a33
 80007e4:	08000a33 	.word	0x08000a33
 80007e8:	08000a33 	.word	0x08000a33
 80007ec:	08000a33 	.word	0x08000a33
 80007f0:	08000a33 	.word	0x08000a33
 80007f4:	08000a33 	.word	0x08000a33
 80007f8:	08000a33 	.word	0x08000a33
 80007fc:	08000a33 	.word	0x08000a33
 8000800:	08000a33 	.word	0x08000a33
 8000804:	08000a33 	.word	0x08000a33
 8000808:	08000a33 	.word	0x08000a33
 800080c:	08000a33 	.word	0x08000a33
 8000810:	08000a33 	.word	0x08000a33
 8000814:	08000a33 	.word	0x08000a33
 8000818:	08000a33 	.word	0x08000a33
 800081c:	08000a33 	.word	0x08000a33
 8000820:	08000a33 	.word	0x08000a33
 8000824:	08000a33 	.word	0x08000a33
 8000828:	08000a33 	.word	0x08000a33
 800082c:	08000a33 	.word	0x08000a33
 8000830:	08000a33 	.word	0x08000a33
 8000834:	08000a33 	.word	0x08000a33
 8000838:	08000a33 	.word	0x08000a33
 800083c:	08000a33 	.word	0x08000a33
 8000840:	08000a33 	.word	0x08000a33
 8000844:	08000a33 	.word	0x08000a33
 8000848:	08000a33 	.word	0x08000a33
 800084c:	08000a33 	.word	0x08000a33
 8000850:	08000a33 	.word	0x08000a33
 8000854:	08000a33 	.word	0x08000a33
 8000858:	08000a33 	.word	0x08000a33
 800085c:	08000a33 	.word	0x08000a33
 8000860:	08000a33 	.word	0x08000a33
 8000864:	08000a33 	.word	0x08000a33
 8000868:	08000a33 	.word	0x08000a33
 800086c:	08000a33 	.word	0x08000a33
 8000870:	08000a33 	.word	0x08000a33
 8000874:	08000a33 	.word	0x08000a33
 8000878:	08000a33 	.word	0x08000a33
 800087c:	08000a33 	.word	0x08000a33
 8000880:	08000a33 	.word	0x08000a33
 8000884:	08000a33 	.word	0x08000a33
 8000888:	08000a33 	.word	0x08000a33
 800088c:	08000a33 	.word	0x08000a33
 8000890:	08000a33 	.word	0x08000a33
 8000894:	08000a33 	.word	0x08000a33
 8000898:	08000a33 	.word	0x08000a33
 800089c:	08000921 	.word	0x08000921
 80008a0:	0800092d 	.word	0x0800092d
 80008a4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80008a8:	f280 80c3 	bge.w	8000a32 <FT_CAN_ProcessData+0x48a>
 80008ac:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80008b0:	f6bf ae95 	bge.w	80005de <FT_CAN_ProcessData+0x36>
 80008b4:	e0bd      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 80008b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 80008c0:	e0b7      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 80008c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 80008ca:	e0b2      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 80008cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 80008d4:	e0ad      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 80008d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 80008de:	e0a8      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 80008e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 80008ea:	e0a2      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 80008ec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 80008f4:	e09d      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 80008f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 80008fe:	e098      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 8000900:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8000908:	e093      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 800090a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8000912:	e08e      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 8000914:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 800091e:	e088      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 8000920:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 800092a:	e082      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 800092c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			break;
 8000936:	e07c      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 8000938:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	831a      	strh	r2, [r3, #24]
			break;
 8000940:	e077      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 8000942:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	805a      	strh	r2, [r3, #2]
			break;
 800094a:	e072      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 800094c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 8000954:	e06d      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 8000956:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	841a      	strh	r2, [r3, #32]
			break;
 800095e:	e068      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 8000960:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8000968:	e063      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 800096a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8000972:	e05e      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 8000974:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 800097c:	e059      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 800097e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 8000986:	e054      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 8000988:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	821a      	strh	r2, [r3, #16]
			break;
 8000990:	e04f      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 8000992:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	839a      	strh	r2, [r3, #28]
			break;
 800099a:	e04a      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 800099c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	83da      	strh	r2, [r3, #30]
			break;
 80009a4:	e045      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 80009a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	835a      	strh	r2, [r3, #26]
			break;
 80009ae:	e040      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 80009b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	819a      	strh	r2, [r3, #12]
			break;
 80009b8:	e03b      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 80009ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	801a      	strh	r2, [r3, #0]
			break;
 80009c2:	e036      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 80009c4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	811a      	strh	r2, [r3, #8]
			break;
 80009cc:	e031      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 80009ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	825a      	strh	r2, [r3, #18]
			break;
 80009d6:	e02c      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 80009d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	829a      	strh	r2, [r3, #20]
			break;
 80009e0:	e027      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 80009e2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	82da      	strh	r2, [r3, #22]
			break;
 80009ea:	e022      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 80009ec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	815a      	strh	r2, [r3, #10]
			break;
 80009f4:	e01d      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 80009f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	809a      	strh	r2, [r3, #4]
			break;
 80009fe:	e018      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 8000a00:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8000a08:	e013      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->total_fuel_flow = data;
 8000a0a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	81da      	strh	r2, [r3, #14]
			break;
 8000a12:	e00e      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 8000a14:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	80da      	strh	r2, [r3, #6]
			break;
 8000a1c:	e009      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 8000a1e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8000a26:	e004      	b.n	8000a32 <FT_CAN_ProcessData+0x48a>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 8000a28:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8000a30:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 8000a32:	89ba      	ldrh	r2, [r7, #12]
 8000a34:	89fb      	ldrh	r3, [r7, #14]
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f805 	bl	8000a48 <FT_CAN_ProcessCustomData>
 8000a3e:	e000      	b.n	8000a42 <FT_CAN_ProcessData+0x49a>
		return;
 8000a40:	bf00      	nop
}
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	460a      	mov	r2, r1
 8000a52:	80fb      	strh	r3, [r7, #6]
 8000a54:	4613      	mov	r3, r2
 8000a56:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <FT_CAN_ReceiveData>:

#endif

void FT_CAN_ReceiveData(uint32_t RxID, uint32_t RxLength, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000a64:	b5b0      	push	{r4, r5, r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	466b      	mov	r3, sp
 8000a74:	461d      	mov	r5, r3
	uint32_t extid = (RxID & 0x1FF80000) >> 13;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	0b5a      	lsrs	r2, r3, #13
 8000a7a:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]

	if(		   (extid != FT_Gear_Controller)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000a88:	d02d      	beq.n	8000ae6 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Knock_Meter)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	f240 1241 	movw	r2, #321	; 0x141
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d028      	beq.n	8000ae6 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Boost_Controller2)
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000a9a:	d024      	beq.n	8000ae6 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Injector_Driver)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000aa2:	d020      	beq.n	8000ae6 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Nano)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000aaa:	d01c      	beq.n	8000ae6 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Slim)
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	f240 2241 	movw	r2, #577	; 0x241
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d017      	beq.n	8000ae6 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Alcohol_O2)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	f240 2242 	movw	r2, #578	; 0x242
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d012      	beq.n	8000ae6 <FT_CAN_ReceiveData+0x82>
			&& (extid != FTSpark)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	f240 2243 	movw	r2, #579	; 0x243
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d00d      	beq.n	8000ae6 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Switchpad)
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000ad0:	d009      	beq.n	8000ae6 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT500)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000ad8:	d005      	beq.n	8000ae6 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT600))
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	f240 2281 	movw	r2, #641	; 0x281
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	f040 8381 	bne.w	80011e8 <FT_CAN_ReceiveData+0x784>
		return;

	uint8_t buffer[RxLength];
 8000ae6:	68bc      	ldr	r4, [r7, #8]
 8000ae8:	4623      	mov	r3, r4
 8000aea:	3b01      	subs	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	4620      	mov	r0, r4
 8000af0:	f04f 0100 	mov.w	r1, #0
 8000af4:	f04f 0200 	mov.w	r2, #0
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	00cb      	lsls	r3, r1, #3
 8000afe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b02:	00c2      	lsls	r2, r0, #3
 8000b04:	4620      	mov	r0, r4
 8000b06:	f04f 0100 	mov.w	r1, #0
 8000b0a:	f04f 0200 	mov.w	r2, #0
 8000b0e:	f04f 0300 	mov.w	r3, #0
 8000b12:	00cb      	lsls	r3, r1, #3
 8000b14:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b18:	00c2      	lsls	r2, r0, #3
 8000b1a:	1de3      	adds	r3, r4, #7
 8000b1c:	08db      	lsrs	r3, r3, #3
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	ebad 0d03 	sub.w	sp, sp, r3
 8000b24:	466b      	mov	r3, sp
 8000b26:	3300      	adds	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < RxLength; i++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	77fb      	strb	r3, [r7, #31]
 8000b2e:	e009      	b.n	8000b44 <FT_CAN_ReceiveData+0xe0>
		buffer[i] = pData[i];
 8000b30:	7ffb      	ldrb	r3, [r7, #31]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	441a      	add	r2, r3
 8000b36:	7ffb      	ldrb	r3, [r7, #31]
 8000b38:	7811      	ldrb	r1, [r2, #0]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < RxLength; i++)
 8000b3e:	7ffb      	ldrb	r3, [r7, #31]
 8000b40:	3301      	adds	r3, #1
 8000b42:	77fb      	strb	r3, [r7, #31]
 8000b44:	7ffb      	ldrb	r3, [r7, #31]
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f1      	bhi.n	8000b30 <FT_CAN_ReceiveData+0xcc>

	if((((RxID / 0x800) & 0x7) == 0x00) || (((RxID / 0x800) & 0x7) == 0x01))
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	0adb      	lsrs	r3, r3, #11
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d006      	beq.n	8000b66 <FT_CAN_ReceiveData+0x102>
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	0adb      	lsrs	r3, r3, #11
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	f040 8139 	bne.w	8000dd8 <FT_CAN_ReceiveData+0x374>
	{
		if((RxID & 0xFFF) == 0x600)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000b70:	d142      	bne.n	8000bf8 <FT_CAN_ReceiveData+0x194>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->tps |= buffer[1];
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	785b      	ldrb	r3, [r3, #1]
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->map  = buffer[2] << 8;
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->map |= buffer[3];
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	78db      	ldrb	r3, [r3, #3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->iat  = buffer[4] << 8;
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	791b      	ldrb	r3, [r3, #4]
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->iat |= buffer[5];
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	795b      	ldrb	r3, [r3, #5]
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b21a      	sxth	r2, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	799b      	ldrb	r3, [r3, #6]
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->ect |= buffer[7];
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	79db      	ldrb	r3, [r3, #7]
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	865a      	strh	r2, [r3, #50]	; 0x32

			return;
 8000bf6:	e2f8      	b.n	80011ea <FT_CAN_ReceiveData+0x786>
		}
		else if((RxID & 0xFFF) == 0x601)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bfe:	f240 6201 	movw	r2, #1537	; 0x601
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d142      	bne.n	8000c8c <FT_CAN_ReceiveData+0x228>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	785b      	ldrb	r3, [r3, #1]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	789b      	ldrb	r3, [r3, #2]
 8000c2e:	021b      	lsls	r3, r3, #8
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	78db      	ldrb	r3, [r3, #3]
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b21a      	sxth	r2, r3
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	791b      	ldrb	r3, [r3, #4]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->coolant_pressure |= buffer[5];
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	795b      	ldrb	r3, [r3, #5]
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	4313      	orrs	r3, r2
 8000c64:	b21a      	sxth	r2, r3
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	799b      	ldrb	r3, [r3, #6]
 8000c6e:	021b      	lsls	r3, r3, #8
 8000c70:	b21a      	sxth	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->gear 			 |= buffer[7];
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	79db      	ldrb	r3, [r3, #7]
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	875a      	strh	r2, [r3, #58]	; 0x3a

			return;
 8000c8a:	e2ae      	b.n	80011ea <FT_CAN_ReceiveData+0x786>
		}
		else if((RxID & 0xFFF) == 0x602)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c92:	f240 6202 	movw	r2, #1538	; 0x602
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d146      	bne.n	8000d28 <FT_CAN_ReceiveData+0x2c4>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	021b      	lsls	r3, r3, #8
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->lambda 			|= buffer[1];
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	785b      	ldrb	r3, [r3, #1]
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b21a      	sxth	r2, r3
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	789b      	ldrb	r3, [r3, #2]
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->rpm 			|= buffer[3];
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	78db      	ldrb	r3, [r3, #3]
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b21a      	sxth	r2, r3
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	791b      	ldrb	r3, [r3, #4]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	795b      	ldrb	r3, [r3, #5]
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	799b      	ldrb	r3, [r3, #6]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	79db      	ldrb	r3, [r3, #7]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			return;
 8000d26:	e260      	b.n	80011ea <FT_CAN_ReceiveData+0x786>
		}

#ifndef FT_CAN_SIMPLE
		else if((RxID & 0xFF) == 0xFF)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2bff      	cmp	r3, #255	; 0xff
 8000d2e:	f040 8258 	bne.w	80011e2 <FT_CAN_ReceiveData+0x77e>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[1];
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	785b      	ldrb	r3, [r3, #1]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	789b      	ldrb	r3, [r3, #2]
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[3];
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	78db      	ldrb	r3, [r3, #3]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000d7e:	6838      	ldr	r0, [r7, #0]
 8000d80:	f7ff fc12 	bl	80005a8 <FT_CAN_ProcessData>

			FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	791b      	ldrb	r3, [r3, #4]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[5];
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	795b      	ldrb	r3, [r3, #5]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[6] << 8;
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	799b      	ldrb	r3, [r3, #6]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[7];
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	79db      	ldrb	r3, [r3, #7]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000dd0:	6838      	ldr	r0, [r7, #0]
 8000dd2:	f7ff fbe9 	bl	80005a8 <FT_CAN_ProcessData>

			return;
 8000dd6:	e208      	b.n	80011ea <FT_CAN_ReceiveData+0x786>
		}
	}

	else if(buffer[0] == 0xFF)
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2bff      	cmp	r3, #255	; 0xff
 8000dde:	d129      	bne.n	8000e34 <FT_CAN_ReceiveData+0x3d0>
	{
		FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	785b      	ldrb	r3, [r3, #1]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_id 	 |= buffer[2];
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	789b      	ldrb	r3, [r3, #2]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_content  = buffer[3] << 8;
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	78db      	ldrb	r3, [r3, #3]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		FT_Data_Struct->data_content |= buffer[4];
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	791b      	ldrb	r3, [r3, #4]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

		FT_CAN_ProcessData(FT_Data_Struct);
 8000e2c:	6838      	ldr	r0, [r7, #0]
 8000e2e:	f7ff fbbb 	bl	80005a8 <FT_CAN_ProcessData>

		return;
 8000e32:	e1da      	b.n	80011ea <FT_CAN_ReceiveData+0x786>

	//Segmented Messages
	else
	{
		//First Message
		if(buffer[0] == 0)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d14b      	bne.n	8000ed4 <FT_CAN_ReceiveData+0x470>
		{
			FT_Data_Struct->data_length   = buffer[1] << 8;
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	785b      	ldrb	r3, [r3, #1]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->data_length  |= buffer[2];
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	789b      	ldrb	r3, [r3, #2]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

			FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	78db      	ldrb	r3, [r3, #3]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[4];
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	791b      	ldrb	r3, [r3, #4]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[5] << 8;
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	795b      	ldrb	r3, [r3, #5]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	021b      	lsls	r3, r3, #8
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[6];
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	799b      	ldrb	r3, [r3, #6]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000eae:	6838      	ldr	r0, [r7, #0]
 8000eb0:	f7ff fb7a 	bl	80005a8 <FT_CAN_ProcessData>

			if(RxLength == 8)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d107      	bne.n	8000eca <FT_CAN_ReceiveData+0x466>
				FT_Data_Struct->data_id   = buffer[7] << 8;
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	79db      	ldrb	r3, [r3, #7]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg = 0;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000ed2:	e18a      	b.n	80011ea <FT_CAN_ReceiveData+0x786>
		}
		//Messages 1, 5, etc
		else if((buffer[0]-1)%4 == 0)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d15c      	bne.n	8000f9c <FT_CAN_ReceiveData+0x538>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000eee:	3301      	adds	r3, #1
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d120      	bne.n	8000f36 <FT_CAN_ReceiveData+0x4d2>
			{
				FT_Data_Struct->data_id 	 |= buffer[1];
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	785b      	ldrb	r3, [r3, #1]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[2] << 8;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	789b      	ldrb	r3, [r3, #2]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[3];
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	78db      	ldrb	r3, [r3, #3]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000f30:	6838      	ldr	r0, [r7, #0]
 8000f32:	f7ff fb39 	bl	80005a8 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d128      	bne.n	8000f8e <FT_CAN_ReceiveData+0x52a>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	791b      	ldrb	r3, [r3, #4]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[5];
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	795b      	ldrb	r3, [r3, #5]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	799b      	ldrb	r3, [r3, #6]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[7];
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	79db      	ldrb	r3, [r3, #7]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000f88:	6838      	ldr	r0, [r7, #0]
 8000f8a:	f7ff fb0d 	bl	80005a8 <FT_CAN_ProcessData>
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000f9a:	e126      	b.n	80011ea <FT_CAN_ReceiveData+0x786>
		}
		//messages 2, 6, etc
		else if((buffer[0]-2)%4 == 0)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	3b02      	subs	r3, #2
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d150      	bne.n	800104c <FT_CAN_ReceiveData+0x5e8>
		{
			if(RxLength >= 5)
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d928      	bls.n	8001002 <FT_CAN_ReceiveData+0x59e>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	785b      	ldrb	r3, [r3, #1]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[2];
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	78db      	ldrb	r3, [r3, #3]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[4];
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	791b      	ldrb	r3, [r3, #4]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000ffc:	6838      	ldr	r0, [r7, #0]
 8000ffe:	f7ff fad3 	bl	80005a8 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2b08      	cmp	r3, #8
 8001006:	d11a      	bne.n	800103e <FT_CAN_ReceiveData+0x5da>
			{
				FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	795b      	ldrb	r3, [r3, #5]
 800100c:	b29b      	uxth	r3, r3
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b29a      	uxth	r2, r3
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	|= buffer[6];
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	799b      	ldrb	r3, [r3, #6]
 8001022:	b29b      	uxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b29a      	uxth	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content = buffer[7] << 8;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	79db      	ldrb	r3, [r3, #7]
 8001032:	b29b      	uxth	r3, r3
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b29a      	uxth	r2, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			}

			FT_Data_Struct->data_last_seg 	 = buffer[0];
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b29a      	uxth	r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 800104a:	e0ce      	b.n	80011ea <FT_CAN_ReceiveData+0x786>
		}
		//Messages 3, 7, etc
		else if((buffer[0]-3)%4 == 0)
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	3b03      	subs	r3, #3
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d15f      	bne.n	800111a <FT_CAN_ReceiveData+0x6b6>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001066:	3301      	adds	r3, #1
 8001068:	429a      	cmp	r2, r3
 800106a:	d10d      	bne.n	8001088 <FT_CAN_ReceiveData+0x624>
			{
				FT_Data_Struct->data_content |= buffer[1];
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	b29b      	uxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b29a      	uxth	r2, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f7ff fa90 	bl	80005a8 <FT_CAN_ProcessData>
			}

			if(RxLength >= 6)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b05      	cmp	r3, #5
 800108c:	d928      	bls.n	80010e0 <FT_CAN_ReceiveData+0x67c>
			{
				FT_Data_Struct->data_id  	  = buffer[2] << 8;
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	b29b      	uxth	r3, r3
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b29a      	uxth	r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[3];
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	78db      	ldrb	r3, [r3, #3]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[4] << 8;
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	791b      	ldrb	r3, [r3, #4]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b29a      	uxth	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[5];
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	795b      	ldrb	r3, [r3, #5]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80010da:	6838      	ldr	r0, [r7, #0]
 80010dc:	f7ff fa64 	bl	80005a8 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d112      	bne.n	800110c <FT_CAN_ReceiveData+0x6a8>
			{
				FT_Data_Struct->data_id 	  = buffer[6] << 8;
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	799b      	ldrb	r3, [r3, #6]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[7];
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	79db      	ldrb	r3, [r3, #7]
 8001100:	b29b      	uxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b29a      	uxth	r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b29a      	uxth	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8001118:	e067      	b.n	80011ea <FT_CAN_ReceiveData+0x786>
		}
		//Messages 4, 8, etc
		else if(buffer[0]%4 == 0)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d15d      	bne.n	80011e4 <FT_CAN_ReceiveData+0x780>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001134:	3301      	adds	r3, #1
 8001136:	429a      	cmp	r2, r3
 8001138:	d115      	bne.n	8001166 <FT_CAN_ReceiveData+0x702>
			{
				FT_Data_Struct->data_content  = buffer[1] << 8;
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	785b      	ldrb	r3, [r3, #1]
 800113e:	b29b      	uxth	r3, r3
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b29a      	uxth	r2, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[2];
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	789b      	ldrb	r3, [r3, #2]
 8001154:	b29b      	uxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b29a      	uxth	r2, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f7ff fa21 	bl	80005a8 <FT_CAN_ProcessData>
			}

			if(RxLength >= 7)
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	2b06      	cmp	r3, #6
 800116a:	d928      	bls.n	80011be <FT_CAN_ReceiveData+0x75a>
			{
				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	78db      	ldrb	r3, [r3, #3]
 8001170:	b29b      	uxth	r3, r3
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b29a      	uxth	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[4];
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	791b      	ldrb	r3, [r3, #4]
 8001186:	b29b      	uxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b29a      	uxth	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[5] << 8;
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	795b      	ldrb	r3, [r3, #5]
 8001196:	b29b      	uxth	r3, r3
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b29a      	uxth	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[6];
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	799b      	ldrb	r3, [r3, #6]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80011b8:	6838      	ldr	r0, [r7, #0]
 80011ba:	f7ff f9f5 	bl	80005a8 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d107      	bne.n	80011d4 <FT_CAN_ReceiveData+0x770>
			FT_Data_Struct->data_id 	  	  = buffer[7] << 8;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	79db      	ldrb	r3, [r3, #7]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 80011e0:	e003      	b.n	80011ea <FT_CAN_ReceiveData+0x786>
		if((RxID & 0xFFF) == 0x600)
 80011e2:	bf00      	nop
 80011e4:	46ad      	mov	sp, r5
 80011e6:	e001      	b.n	80011ec <FT_CAN_ReceiveData+0x788>
		return;
 80011e8:	bf00      	nop
 80011ea:	46ad      	mov	sp, r5
		}
#endif
	}
}
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080011f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fa:	f003 fcb3 	bl	8004b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fe:	f000 f8d7 	bl	80013b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001202:	f000 f94d 	bl	80014a0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001206:	f000 fc09 	bl	8001a1c <MX_GPIO_Init>
  MX_DMA_Init();
 800120a:	f000 fbcf 	bl	80019ac <MX_DMA_Init>
  MX_IWDG_Init();
 800120e:	f000 fb03 	bl	8001818 <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 8001212:	f000 fb75 	bl	8001900 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 8001216:	f000 f96b 	bl	80014f0 <MX_ADC1_Init>
  MX_RTC_Init();
 800121a:	f000 fb17 	bl	800184c <MX_RTC_Init>
  MX_TIM6_Init();
 800121e:	f000 fb8f 	bl	8001940 <MX_TIM6_Init>
  MX_FATFS_Init();
 8001222:	f00c fcbd 	bl	800dba0 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001226:	f012 f9ed 	bl	8013604 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 800122a:	f000 f9f9 	bl	8001620 <MX_ADC2_Init>
  MX_CAN1_Init();
 800122e:	f000 fa8f 	bl	8001750 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001232:	f000 fac3 	bl	80017bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Principal_RTC_Calibrate(&Date, &Time);
 8001236:	4954      	ldr	r1, [pc, #336]	; (8001388 <main+0x194>)
 8001238:	4854      	ldr	r0, [pc, #336]	; (800138c <main+0x198>)
 800123a:	f003 f839 	bl	80042b0 <Principal_RTC_Calibrate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks if data is being saved and starts saving if conditions are met
	  if(Flag_Datalogger == 0)
 800123e:	4b54      	ldr	r3, [pc, #336]	; (8001390 <main+0x19c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d109      	bne.n	800125a <main+0x66>
		  Principal_Datalogger_Start(&Date, &Time, Dir_String, Log_String, &Dir_Struct, &File_Struct);
 8001246:	4b53      	ldr	r3, [pc, #332]	; (8001394 <main+0x1a0>)
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	4b53      	ldr	r3, [pc, #332]	; (8001398 <main+0x1a4>)
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	4b53      	ldr	r3, [pc, #332]	; (800139c <main+0x1a8>)
 8001250:	4a53      	ldr	r2, [pc, #332]	; (80013a0 <main+0x1ac>)
 8001252:	494d      	ldr	r1, [pc, #308]	; (8001388 <main+0x194>)
 8001254:	484d      	ldr	r0, [pc, #308]	; (800138c <main+0x198>)
 8001256:	f002 fdb9 	bl	8003dcc <Principal_Datalogger_Start>

	  //Analog inputs 1-4 CAN message
	  if((Acc_Msg[Analog_1_4] >= Per_Msg[Analog_1_4]) && (Per_Msg[Analog_1_4] != 0))
 800125a:	4b52      	ldr	r3, [pc, #328]	; (80013a4 <main+0x1b0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a52      	ldr	r2, [pc, #328]	; (80013a8 <main+0x1b4>)
 8001260:	8812      	ldrh	r2, [r2, #0]
 8001262:	4293      	cmp	r3, r2
 8001264:	d30e      	bcc.n	8001284 <main+0x90>
 8001266:	4b50      	ldr	r3, [pc, #320]	; (80013a8 <main+0x1b4>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00a      	beq.n	8001284 <main+0x90>
	  {
		  Acc_Msg[Analog_1_4] -= Per_Msg[Analog_1_4];
 800126e:	4b4d      	ldr	r3, [pc, #308]	; (80013a4 <main+0x1b0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a4d      	ldr	r2, [pc, #308]	; (80013a8 <main+0x1b4>)
 8001274:	8812      	ldrh	r2, [r2, #0]
 8001276:	1a9b      	subs	r3, r3, r2
 8001278:	4a4a      	ldr	r2, [pc, #296]	; (80013a4 <main+0x1b0>)
 800127a:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, Analog_1_4);
 800127c:	2100      	movs	r1, #0
 800127e:	484b      	ldr	r0, [pc, #300]	; (80013ac <main+0x1b8>)
 8001280:	f001 fc6c 	bl	8002b5c <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((Acc_Msg[Analog_5_8] >= Per_Msg[Analog_5_8]) && (Per_Msg[Analog_5_8] != 0))
 8001284:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <main+0x1b0>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4a47      	ldr	r2, [pc, #284]	; (80013a8 <main+0x1b4>)
 800128a:	8852      	ldrh	r2, [r2, #2]
 800128c:	4293      	cmp	r3, r2
 800128e:	d30e      	bcc.n	80012ae <main+0xba>
 8001290:	4b45      	ldr	r3, [pc, #276]	; (80013a8 <main+0x1b4>)
 8001292:	885b      	ldrh	r3, [r3, #2]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00a      	beq.n	80012ae <main+0xba>
	  {
		  Acc_Msg[Analog_5_8] -= Per_Msg[Analog_5_8];
 8001298:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <main+0x1b0>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <main+0x1b4>)
 800129e:	8852      	ldrh	r2, [r2, #2]
 80012a0:	1a9b      	subs	r3, r3, r2
 80012a2:	4a40      	ldr	r2, [pc, #256]	; (80013a4 <main+0x1b0>)
 80012a4:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, Analog_5_8);
 80012a6:	2101      	movs	r1, #1
 80012a8:	4840      	ldr	r0, [pc, #256]	; (80013ac <main+0x1b8>)
 80012aa:	f001 fc57 	bl	8002b5c <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((Acc_Msg[Analog_9_12] >= Per_Msg[Analog_9_12]) && (Per_Msg[Analog_9_12] != 0))
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <main+0x1b0>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	4a3d      	ldr	r2, [pc, #244]	; (80013a8 <main+0x1b4>)
 80012b4:	8892      	ldrh	r2, [r2, #4]
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d30e      	bcc.n	80012d8 <main+0xe4>
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <main+0x1b4>)
 80012bc:	889b      	ldrh	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00a      	beq.n	80012d8 <main+0xe4>
	  {
		  Acc_Msg[Analog_9_12] -= Per_Msg[Analog_9_12];
 80012c2:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <main+0x1b0>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	4a38      	ldr	r2, [pc, #224]	; (80013a8 <main+0x1b4>)
 80012c8:	8892      	ldrh	r2, [r2, #4]
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	4a35      	ldr	r2, [pc, #212]	; (80013a4 <main+0x1b0>)
 80012ce:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, Analog_9_12);
 80012d0:	2102      	movs	r1, #2
 80012d2:	4836      	ldr	r0, [pc, #216]	; (80013ac <main+0x1b8>)
 80012d4:	f001 fc42 	bl	8002b5c <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((Acc_Msg[RTC_Msg] >= Per_Msg[RTC_Msg]) && (Per_Msg[RTC_Msg] != 0))
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <main+0x1b0>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <main+0x1b4>)
 80012de:	88d2      	ldrh	r2, [r2, #6]
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d30e      	bcc.n	8001302 <main+0x10e>
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <main+0x1b4>)
 80012e6:	88db      	ldrh	r3, [r3, #6]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00a      	beq.n	8001302 <main+0x10e>
	  {
		  Acc_Msg[RTC_Msg] -= Per_Msg[RTC_Msg];
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <main+0x1b0>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	4a2d      	ldr	r2, [pc, #180]	; (80013a8 <main+0x1b4>)
 80012f2:	88d2      	ldrh	r2, [r2, #6]
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	4a2b      	ldr	r2, [pc, #172]	; (80013a4 <main+0x1b0>)
 80012f8:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_Msg);
 80012fa:	2103      	movs	r1, #3
 80012fc:	482b      	ldr	r0, [pc, #172]	; (80013ac <main+0x1b8>)
 80012fe:	f001 fc2d 	bl	8002b5c <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((Acc_Msg[Verify_Msg] >= Per_Msg[Verify_Msg]) && (Per_Msg[Verify_Msg] != 0))
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <main+0x1b0>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	4a28      	ldr	r2, [pc, #160]	; (80013a8 <main+0x1b4>)
 8001308:	8912      	ldrh	r2, [r2, #8]
 800130a:	4293      	cmp	r3, r2
 800130c:	d30e      	bcc.n	800132c <main+0x138>
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <main+0x1b4>)
 8001310:	891b      	ldrh	r3, [r3, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00a      	beq.n	800132c <main+0x138>
	  {
		  Acc_Msg[Verify_Msg] -= Per_Msg[Verify_Msg];
 8001316:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <main+0x1b0>)
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	4a23      	ldr	r2, [pc, #140]	; (80013a8 <main+0x1b4>)
 800131c:	8912      	ldrh	r2, [r2, #8]
 800131e:	1a9b      	subs	r3, r3, r2
 8001320:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <main+0x1b0>)
 8001322:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, Verify_Msg);
 8001324:	2104      	movs	r1, #4
 8001326:	4821      	ldr	r0, [pc, #132]	; (80013ac <main+0x1b8>)
 8001328:	f001 fc18 	bl	8002b5c <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((Acc_Msg[ECU_Save] >= Per_Msg[ECU_Save]) && (Per_Msg[ECU_Save] != 0))
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <main+0x1b0>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <main+0x1b4>)
 8001332:	8952      	ldrh	r2, [r2, #10]
 8001334:	4293      	cmp	r3, r2
 8001336:	d30e      	bcc.n	8001356 <main+0x162>
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <main+0x1b4>)
 800133a:	895b      	ldrh	r3, [r3, #10]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00a      	beq.n	8001356 <main+0x162>
	  {
		  Acc_Msg[ECU_Save] -= Per_Msg[ECU_Save];
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <main+0x1b0>)
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <main+0x1b4>)
 8001346:	8952      	ldrh	r2, [r2, #10]
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <main+0x1b0>)
 800134c:	6153      	str	r3, [r2, #20]
		  Principal_Transmit_Msg(&hcan1, ECU_Save);
 800134e:	2105      	movs	r1, #5
 8001350:	4816      	ldr	r0, [pc, #88]	; (80013ac <main+0x1b8>)
 8001352:	f001 fc03 	bl	8002b5c <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((Acc_Msg[PDM_Save] >= Per_Msg[PDM_Save]) && (Per_Msg[PDM_Save] != 0))
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <main+0x1b0>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <main+0x1b4>)
 800135c:	8992      	ldrh	r2, [r2, #12]
 800135e:	4293      	cmp	r3, r2
 8001360:	f4ff af6d 	bcc.w	800123e <main+0x4a>
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <main+0x1b4>)
 8001366:	899b      	ldrh	r3, [r3, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	f43f af68 	beq.w	800123e <main+0x4a>
	  {
		  Acc_Msg[PDM_Save] -= Per_Msg[PDM_Save];
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <main+0x1b0>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <main+0x1b4>)
 8001374:	8992      	ldrh	r2, [r2, #12]
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <main+0x1b0>)
 800137a:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, PDM_Save);
 800137c:	2106      	movs	r1, #6
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <main+0x1b8>)
 8001380:	f001 fbec 	bl	8002b5c <Principal_Transmit_Msg>
	  if(Flag_Datalogger == 0)
 8001384:	e75b      	b.n	800123e <main+0x4a>
 8001386:	bf00      	nop
 8001388:	2000391c 	.word	0x2000391c
 800138c:	20002674 	.word	0x20002674
 8001390:	2000282c 	.word	0x2000282c
 8001394:	200028ec 	.word	0x200028ec
 8001398:	2000267c 	.word	0x2000267c
 800139c:	200039d0 	.word	0x200039d0
 80013a0:	200015e8 	.word	0x200015e8
 80013a4:	200028bc 	.word	0x200028bc
 80013a8:	20003a7c 	.word	0x20003a7c
 80013ac:	20003998 	.word	0x20003998

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b094      	sub	sp, #80	; 0x50
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	2234      	movs	r2, #52	; 0x34
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f012 fe9e 	bl	8014100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <SystemClock_Config+0xe8>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <SystemClock_Config+0xe8>)
 80013de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e2:	6413      	str	r3, [r2, #64]	; 0x40
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <SystemClock_Config+0xe8>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	4b29      	ldr	r3, [pc, #164]	; (800149c <SystemClock_Config+0xec>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a28      	ldr	r2, [pc, #160]	; (800149c <SystemClock_Config+0xec>)
 80013fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <SystemClock_Config+0xec>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800140c:	2309      	movs	r3, #9
 800140e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001414:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001416:	2301      	movs	r3, #1
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800141a:	2301      	movs	r3, #1
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141e:	2302      	movs	r3, #2
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001422:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001428:	2308      	movs	r3, #8
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800142c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001430:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001432:	2302      	movs	r3, #2
 8001434:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001436:	2306      	movs	r3, #6
 8001438:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800143a:	2302      	movs	r3, #2
 800143c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4618      	mov	r0, r3
 8001444:	f007 ff2c 	bl	80092a0 <HAL_RCC_OscConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800144e:	f000 fb8b 	bl	8001b68 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001452:	f007 f8f3 	bl	800863c <HAL_PWREx_EnableOverDrive>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800145c:	f000 fb84 	bl	8001b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	230f      	movs	r3, #15
 8001462:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001464:	2302      	movs	r3, #2
 8001466:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800146c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001470:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	2105      	movs	r1, #5
 800147e:	4618      	mov	r0, r3
 8001480:	f007 f92c 	bl	80086dc <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800148a:	f000 fb6d 	bl	8001b68 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3750      	adds	r7, #80	; 0x50
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b098      	sub	sp, #96	; 0x60
 80014a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	225c      	movs	r2, #92	; 0x5c
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f012 fe27 	bl	8014100 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80014b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014b6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 80014b8:	2308      	movs	r3, #8
 80014ba:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80014bc:	23c0      	movs	r3, #192	; 0xc0
 80014be:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80014c4:	2304      	movs	r3, #4
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80014cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014d0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80014d2:	2300      	movs	r3, #0
 80014d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4618      	mov	r0, r3
 80014da:	f007 fa05 	bl	80088e8 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80014e4:	f000 fb40 	bl	8001b68 <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3760      	adds	r7, #96	; 0x60
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001502:	4b44      	ldr	r3, [pc, #272]	; (8001614 <MX_ADC1_Init+0x124>)
 8001504:	4a44      	ldr	r2, [pc, #272]	; (8001618 <MX_ADC1_Init+0x128>)
 8001506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001508:	4b42      	ldr	r3, [pc, #264]	; (8001614 <MX_ADC1_Init+0x124>)
 800150a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800150e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001510:	4b40      	ldr	r3, [pc, #256]	; (8001614 <MX_ADC1_Init+0x124>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001516:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <MX_ADC1_Init+0x124>)
 8001518:	2201      	movs	r2, #1
 800151a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800151c:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <MX_ADC1_Init+0x124>)
 800151e:	2201      	movs	r2, #1
 8001520:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001522:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <MX_ADC1_Init+0x124>)
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152a:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <MX_ADC1_Init+0x124>)
 800152c:	2200      	movs	r2, #0
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001530:	4b38      	ldr	r3, [pc, #224]	; (8001614 <MX_ADC1_Init+0x124>)
 8001532:	4a3a      	ldr	r2, [pc, #232]	; (800161c <MX_ADC1_Init+0x12c>)
 8001534:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001536:	4b37      	ldr	r3, [pc, #220]	; (8001614 <MX_ADC1_Init+0x124>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800153c:	4b35      	ldr	r3, [pc, #212]	; (8001614 <MX_ADC1_Init+0x124>)
 800153e:	2206      	movs	r2, #6
 8001540:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001542:	4b34      	ldr	r3, [pc, #208]	; (8001614 <MX_ADC1_Init+0x124>)
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154a:	4b32      	ldr	r3, [pc, #200]	; (8001614 <MX_ADC1_Init+0x124>)
 800154c:	2201      	movs	r2, #1
 800154e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001550:	4830      	ldr	r0, [pc, #192]	; (8001614 <MX_ADC1_Init+0x124>)
 8001552:	f003 fb9d 	bl	8004c90 <HAL_ADC_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800155c:	f000 fb04 	bl	8001b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001560:	2300      	movs	r3, #0
 8001562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001564:	2301      	movs	r3, #1
 8001566:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001568:	2307      	movs	r3, #7
 800156a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	4828      	ldr	r0, [pc, #160]	; (8001614 <MX_ADC1_Init+0x124>)
 8001572:	f003 fbd1 	bl	8004d18 <HAL_ADC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800157c:	f000 faf4 	bl	8001b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001580:	2301      	movs	r3, #1
 8001582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001584:	2302      	movs	r3, #2
 8001586:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	4821      	ldr	r0, [pc, #132]	; (8001614 <MX_ADC1_Init+0x124>)
 800158e:	f003 fbc3 	bl	8004d18 <HAL_ADC_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001598:	f000 fae6 	bl	8001b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800159c:	2302      	movs	r3, #2
 800159e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80015a0:	2303      	movs	r3, #3
 80015a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	481a      	ldr	r0, [pc, #104]	; (8001614 <MX_ADC1_Init+0x124>)
 80015aa:	f003 fbb5 	bl	8004d18 <HAL_ADC_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80015b4:	f000 fad8 	bl	8001b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015b8:	2303      	movs	r3, #3
 80015ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80015bc:	2304      	movs	r3, #4
 80015be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4813      	ldr	r0, [pc, #76]	; (8001614 <MX_ADC1_Init+0x124>)
 80015c6:	f003 fba7 	bl	8004d18 <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80015d0:	f000 faca 	bl	8001b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015d4:	2304      	movs	r3, #4
 80015d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80015d8:	2305      	movs	r3, #5
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <MX_ADC1_Init+0x124>)
 80015e2:	f003 fb99 	bl	8004d18 <HAL_ADC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80015ec:	f000 fabc 	bl	8001b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015f0:	2305      	movs	r3, #5
 80015f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80015f4:	2306      	movs	r3, #6
 80015f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_ADC1_Init+0x124>)
 80015fe:	f003 fb8b 	bl	8004d18 <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001608:	f000 faae 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200026ac 	.word	0x200026ac
 8001618:	40012000 	.word	0x40012000
 800161c:	0f000001 	.word	0x0f000001

08001620 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001626:	463b      	mov	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001632:	4b44      	ldr	r3, [pc, #272]	; (8001744 <MX_ADC2_Init+0x124>)
 8001634:	4a44      	ldr	r2, [pc, #272]	; (8001748 <MX_ADC2_Init+0x128>)
 8001636:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001638:	4b42      	ldr	r3, [pc, #264]	; (8001744 <MX_ADC2_Init+0x124>)
 800163a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800163e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001640:	4b40      	ldr	r3, [pc, #256]	; (8001744 <MX_ADC2_Init+0x124>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001646:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <MX_ADC2_Init+0x124>)
 8001648:	2201      	movs	r2, #1
 800164a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800164c:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <MX_ADC2_Init+0x124>)
 800164e:	2201      	movs	r2, #1
 8001650:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001652:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <MX_ADC2_Init+0x124>)
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800165a:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <MX_ADC2_Init+0x124>)
 800165c:	2200      	movs	r2, #0
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001660:	4b38      	ldr	r3, [pc, #224]	; (8001744 <MX_ADC2_Init+0x124>)
 8001662:	4a3a      	ldr	r2, [pc, #232]	; (800174c <MX_ADC2_Init+0x12c>)
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001666:	4b37      	ldr	r3, [pc, #220]	; (8001744 <MX_ADC2_Init+0x124>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 800166c:	4b35      	ldr	r3, [pc, #212]	; (8001744 <MX_ADC2_Init+0x124>)
 800166e:	2206      	movs	r2, #6
 8001670:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001672:	4b34      	ldr	r3, [pc, #208]	; (8001744 <MX_ADC2_Init+0x124>)
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800167a:	4b32      	ldr	r3, [pc, #200]	; (8001744 <MX_ADC2_Init+0x124>)
 800167c:	2201      	movs	r2, #1
 800167e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001680:	4830      	ldr	r0, [pc, #192]	; (8001744 <MX_ADC2_Init+0x124>)
 8001682:	f003 fb05 	bl	8004c90 <HAL_ADC_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800168c:	f000 fa6c 	bl	8001b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001690:	2306      	movs	r3, #6
 8001692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001694:	2301      	movs	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001698:	2307      	movs	r3, #7
 800169a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800169c:	463b      	mov	r3, r7
 800169e:	4619      	mov	r1, r3
 80016a0:	4828      	ldr	r0, [pc, #160]	; (8001744 <MX_ADC2_Init+0x124>)
 80016a2:	f003 fb39 	bl	8004d18 <HAL_ADC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80016ac:	f000 fa5c 	bl	8001b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016b0:	2307      	movs	r3, #7
 80016b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	4821      	ldr	r0, [pc, #132]	; (8001744 <MX_ADC2_Init+0x124>)
 80016be:	f003 fb2b 	bl	8004d18 <HAL_ADC_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80016c8:	f000 fa4e 	bl	8001b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80016cc:	230e      	movs	r3, #14
 80016ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80016d0:	2303      	movs	r3, #3
 80016d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	481a      	ldr	r0, [pc, #104]	; (8001744 <MX_ADC2_Init+0x124>)
 80016da:	f003 fb1d 	bl	8004d18 <HAL_ADC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80016e4:	f000 fa40 	bl	8001b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80016e8:	230f      	movs	r3, #15
 80016ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80016ec:	2304      	movs	r3, #4
 80016ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016f0:	463b      	mov	r3, r7
 80016f2:	4619      	mov	r1, r3
 80016f4:	4813      	ldr	r0, [pc, #76]	; (8001744 <MX_ADC2_Init+0x124>)
 80016f6:	f003 fb0f 	bl	8004d18 <HAL_ADC_ConfigChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001700:	f000 fa32 	bl	8001b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001704:	2308      	movs	r3, #8
 8001706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001708:	2305      	movs	r3, #5
 800170a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <MX_ADC2_Init+0x124>)
 8001712:	f003 fb01 	bl	8004d18 <HAL_ADC_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800171c:	f000 fa24 	bl	8001b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001720:	2309      	movs	r3, #9
 8001722:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001724:	2306      	movs	r3, #6
 8001726:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_ADC2_Init+0x124>)
 800172e:	f003 faf3 	bl	8004d18 <HAL_ADC_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8001738:	f000 fa16 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000053c 	.word	0x2000053c
 8001748:	40012100 	.word	0x40012100
 800174c:	0f000001 	.word	0x0f000001

08001750 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_CAN1_Init+0x64>)
 8001756:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <MX_CAN1_Init+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_CAN1_Init+0x64>)
 800175c:	2205      	movs	r2, #5
 800175e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_CAN1_Init+0x64>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_CAN1_Init+0x64>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_CAN1_Init+0x64>)
 800176e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001772:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_CAN1_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_CAN1_Init+0x64>)
 800177c:	2200      	movs	r2, #0
 800177e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_CAN1_Init+0x64>)
 8001782:	2200      	movs	r2, #0
 8001784:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_CAN1_Init+0x64>)
 8001788:	2200      	movs	r2, #0
 800178a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_CAN1_Init+0x64>)
 800178e:	2200      	movs	r2, #0
 8001790:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_CAN1_Init+0x64>)
 8001794:	2200      	movs	r2, #0
 8001796:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_CAN1_Init+0x64>)
 800179a:	2200      	movs	r2, #0
 800179c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_CAN1_Init+0x64>)
 80017a0:	f003 fce8 	bl	8005174 <HAL_CAN_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80017aa:	f000 f9dd 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20003998 	.word	0x20003998
 80017b8:	40006400 	.word	0x40006400

080017bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_I2C1_Init+0x50>)
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <MX_I2C1_Init+0x54>)
 80017c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_I2C1_Init+0x50>)
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <MX_I2C1_Init+0x58>)
 80017ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_I2C1_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_I2C1_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_I2C1_Init+0x50>)
 80017da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_I2C1_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_I2C1_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_I2C1_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_I2C1_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_I2C1_Init+0x50>)
 80017fa:	f005 f895 	bl	8006928 <HAL_I2C_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001804:	f000 f9b0 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000584 	.word	0x20000584
 8001810:	40005400 	.word	0x40005400
 8001814:	00061a80 	.word	0x00061a80

08001818 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_IWDG_Init+0x2c>)
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <MX_IWDG_Init+0x30>)
 8001820:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <MX_IWDG_Init+0x2c>)
 8001824:	2204      	movs	r2, #4
 8001826:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 249;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_IWDG_Init+0x2c>)
 800182a:	22f9      	movs	r2, #249	; 0xf9
 800182c:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_IWDG_Init+0x2c>)
 8001830:	f005 fcc5 	bl	80071be <HAL_IWDG_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 800183a:	f000 f995 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200005dc 	.word	0x200005dc
 8001848:	40003000 	.word	0x40003000

0800184c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001860:	2300      	movs	r3, #0
 8001862:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <MX_RTC_Init+0xac>)
 8001866:	4a25      	ldr	r2, [pc, #148]	; (80018fc <MX_RTC_Init+0xb0>)
 8001868:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <MX_RTC_Init+0xac>)
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <MX_RTC_Init+0xac>)
 8001872:	227f      	movs	r2, #127	; 0x7f
 8001874:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <MX_RTC_Init+0xac>)
 8001878:	22ff      	movs	r2, #255	; 0xff
 800187a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800187c:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <MX_RTC_Init+0xac>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <MX_RTC_Init+0xac>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <MX_RTC_Init+0xac>)
 800188a:	2200      	movs	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800188e:	481a      	ldr	r0, [pc, #104]	; (80018f8 <MX_RTC_Init+0xac>)
 8001890:	f007 ffa4 	bl	80097dc <HAL_RTC_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800189a:	f000 f965 	bl	8001b68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800189e:	2300      	movs	r3, #0
 80018a0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2201      	movs	r2, #1
 80018b6:	4619      	mov	r1, r3
 80018b8:	480f      	ldr	r0, [pc, #60]	; (80018f8 <MX_RTC_Init+0xac>)
 80018ba:	f008 f820 	bl	80098fe <HAL_RTC_SetTime>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80018c4:	f000 f950 	bl	8001b68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018c8:	2301      	movs	r3, #1
 80018ca:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80018cc:	2301      	movs	r3, #1
 80018ce:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018d8:	463b      	mov	r3, r7
 80018da:	2201      	movs	r2, #1
 80018dc:	4619      	mov	r1, r3
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <MX_RTC_Init+0xac>)
 80018e0:	f008 f928 	bl	8009b34 <HAL_RTC_SetDate>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80018ea:	f000 f93d 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000275c 	.word	0x2000275c
 80018fc:	40002800 	.word	0x40002800

08001900 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_SDIO_SD_Init+0x38>)
 8001906:	4a0d      	ldr	r2, [pc, #52]	; (800193c <MX_SDIO_SD_Init+0x3c>)
 8001908:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_SDIO_SD_Init+0x38>)
 800190c:	2200      	movs	r2, #0
 800190e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_SDIO_SD_Init+0x38>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_SDIO_SD_Init+0x38>)
 8001918:	2200      	movs	r2, #0
 800191a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_SDIO_SD_Init+0x38>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <MX_SDIO_SD_Init+0x38>)
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <MX_SDIO_SD_Init+0x38>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	20002830 	.word	0x20002830
 800193c:	40012c00 	.word	0x40012c00

08001940 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001946:	463b      	mov	r3, r7
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <MX_TIM6_Init+0x64>)
 8001950:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <MX_TIM6_Init+0x68>)
 8001952:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <MX_TIM6_Init+0x64>)
 8001956:	2259      	movs	r2, #89	; 0x59
 8001958:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_TIM6_Init+0x64>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_TIM6_Init+0x64>)
 8001962:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001966:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_TIM6_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <MX_TIM6_Init+0x64>)
 8001970:	f009 fd7f 	bl	800b472 <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800197a:	f000 f8f5 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001986:	463b      	mov	r3, r7
 8001988:	4619      	mov	r1, r3
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <MX_TIM6_Init+0x64>)
 800198c:	f009 ff90 	bl	800b8b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001996:	f000 f8e7 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200027e4 	.word	0x200027e4
 80019a8:	40001000 	.word	0x40001000

080019ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <MX_DMA_Init+0x6c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <MX_DMA_Init+0x6c>)
 80019bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <MX_DMA_Init+0x6c>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2102      	movs	r1, #2
 80019d2:	2038      	movs	r0, #56	; 0x38
 80019d4:	f004 f9f5 	bl	8005dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019d8:	2038      	movs	r0, #56	; 0x38
 80019da:	f004 fa0e 	bl	8005dfa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2102      	movs	r1, #2
 80019e2:	203a      	movs	r0, #58	; 0x3a
 80019e4:	f004 f9ed 	bl	8005dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80019e8:	203a      	movs	r0, #58	; 0x3a
 80019ea:	f004 fa06 	bl	8005dfa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	203b      	movs	r0, #59	; 0x3b
 80019f4:	f004 f9e5 	bl	8005dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80019f8:	203b      	movs	r0, #59	; 0x3b
 80019fa:	f004 f9fe 	bl	8005dfa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2045      	movs	r0, #69	; 0x45
 8001a04:	f004 f9dd 	bl	8005dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a08:	2045      	movs	r0, #69	; 0x45
 8001a0a:	f004 f9f6 	bl	8005dfa <HAL_NVIC_EnableIRQ>

}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a48      	ldr	r2, [pc, #288]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b46      	ldr	r3, [pc, #280]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a41      	ldr	r2, [pc, #260]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a3a      	ldr	r2, [pc, #232]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b34      	ldr	r3, [pc, #208]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a33      	ldr	r2, [pc, #204]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b31      	ldr	r3, [pc, #196]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a2c      	ldr	r2, [pc, #176]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <MX_GPIO_Init+0x140>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	210f      	movs	r1, #15
 8001ac2:	4827      	ldr	r0, [pc, #156]	; (8001b60 <MX_GPIO_Init+0x144>)
 8001ac4:	f004 fefe 	bl	80068c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001ace:	4825      	ldr	r0, [pc, #148]	; (8001b64 <MX_GPIO_Init+0x148>)
 8001ad0:	f004 fef8 	bl	80068c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	481d      	ldr	r0, [pc, #116]	; (8001b60 <MX_GPIO_Init+0x144>)
 8001aec:	f004 fd3e 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001af0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4816      	ldr	r0, [pc, #88]	; (8001b64 <MX_GPIO_Init+0x148>)
 8001b0a:	f004 fd2f 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001b0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	480f      	ldr	r0, [pc, #60]	; (8001b64 <MX_GPIO_Init+0x148>)
 8001b26:	f004 fd21 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4808      	ldr	r0, [pc, #32]	; (8001b60 <MX_GPIO_Init+0x144>)
 8001b3e:	f004 fd15 	bl	800656c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2102      	movs	r1, #2
 8001b46:	2028      	movs	r0, #40	; 0x28
 8001b48:	f004 f93b 	bl	8005dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b4c:	2028      	movs	r0, #40	; 0x28
 8001b4e:	f004 f954 	bl	8005dfa <HAL_NVIC_EnableIRQ>

}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020400 	.word	0x40020400

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <Error_Handler+0x8>
	...

08001b74 <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	603a      	str	r2, [r7, #0]
 8001b7e:	80fb      	strh	r3, [r7, #6]
 8001b80:	460b      	mov	r3, r1
 8001b82:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	2b1d      	cmp	r3, #29
 8001b8e:	f200 81f9 	bhi.w	8001f84 <Process_Data+0x410>
 8001b92:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <Process_Data+0x24>)
 8001b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b98:	08001c11 	.word	0x08001c11
 8001b9c:	08001c41 	.word	0x08001c41
 8001ba0:	08001c71 	.word	0x08001c71
 8001ba4:	08001ca1 	.word	0x08001ca1
 8001ba8:	08001cd1 	.word	0x08001cd1
 8001bac:	08001d01 	.word	0x08001d01
 8001bb0:	08001d31 	.word	0x08001d31
 8001bb4:	08001d61 	.word	0x08001d61
 8001bb8:	08001d91 	.word	0x08001d91
 8001bbc:	08001dc1 	.word	0x08001dc1
 8001bc0:	08001df1 	.word	0x08001df1
 8001bc4:	08001e21 	.word	0x08001e21
 8001bc8:	08001e51 	.word	0x08001e51
 8001bcc:	08001e81 	.word	0x08001e81
 8001bd0:	08001eb1 	.word	0x08001eb1
 8001bd4:	08001ee1 	.word	0x08001ee1
 8001bd8:	08001f15 	.word	0x08001f15
 8001bdc:	08001f1d 	.word	0x08001f1d
 8001be0:	08001f25 	.word	0x08001f25
 8001be4:	08001f2d 	.word	0x08001f2d
 8001be8:	08001f35 	.word	0x08001f35
 8001bec:	08001f3d 	.word	0x08001f3d
 8001bf0:	08001f45 	.word	0x08001f45
 8001bf4:	08001f4d 	.word	0x08001f4d
 8001bf8:	08001f55 	.word	0x08001f55
 8001bfc:	08001f5d 	.word	0x08001f5d
 8001c00:	08001f65 	.word	0x08001f65
 8001c04:	08001f6d 	.word	0x08001f6d
 8001c08:	08001f75 	.word	0x08001f75
 8001c0c:	08001f7d 	.word	0x08001f7d
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	88ba      	ldrh	r2, [r7, #4]
 8001c14:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	885b      	ldrh	r3, [r3, #2]
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001c2e:	e1aa      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	885b      	ldrh	r3, [r3, #2]
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	805a      	strh	r2, [r3, #2]
			break;
 8001c3e:	e1a2      	b.n	8001f86 <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	88ba      	ldrh	r2, [r7, #4]
 8001c44:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	885b      	ldrh	r3, [r3, #2]
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001c5e:	e192      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	885b      	ldrh	r3, [r3, #2]
 8001c64:	f023 0302 	bic.w	r3, r3, #2
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	805a      	strh	r2, [r3, #2]
			break;
 8001c6e:	e18a      	b.n	8001f86 <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	88ba      	ldrh	r2, [r7, #4]
 8001c74:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	885b      	ldrh	r3, [r3, #2]
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001c8e:	e17a      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	885b      	ldrh	r3, [r3, #2]
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	805a      	strh	r2, [r3, #2]
			break;
 8001c9e:	e172      	b.n	8001f86 <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	88ba      	ldrh	r2, [r7, #4]
 8001ca4:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	885b      	ldrh	r3, [r3, #2]
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001cbe:	e162      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	885b      	ldrh	r3, [r3, #2]
 8001cc4:	f023 0308 	bic.w	r3, r3, #8
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	805a      	strh	r2, [r3, #2]
			break;
 8001cce:	e15a      	b.n	8001f86 <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	88ba      	ldrh	r2, [r7, #4]
 8001cd4:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	885b      	ldrh	r3, [r3, #2]
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001cee:	e14a      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	885b      	ldrh	r3, [r3, #2]
 8001cf4:	f023 0310 	bic.w	r3, r3, #16
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	805a      	strh	r2, [r3, #2]
			break;
 8001cfe:	e142      	b.n	8001f86 <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	88ba      	ldrh	r2, [r7, #4]
 8001d04:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	885b      	ldrh	r3, [r3, #2]
 8001d14:	f043 0320 	orr.w	r3, r3, #32
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001d1e:	e132      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	885b      	ldrh	r3, [r3, #2]
 8001d24:	f023 0320 	bic.w	r3, r3, #32
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	805a      	strh	r2, [r3, #2]
			break;
 8001d2e:	e12a      	b.n	8001f86 <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	88ba      	ldrh	r2, [r7, #4]
 8001d34:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	885b      	ldrh	r3, [r3, #2]
 8001d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001d4e:	e11a      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	885b      	ldrh	r3, [r3, #2]
 8001d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	805a      	strh	r2, [r3, #2]
			break;
 8001d5e:	e112      	b.n	8001f86 <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	88ba      	ldrh	r2, [r7, #4]
 8001d64:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	885b      	ldrh	r3, [r3, #2]
 8001d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001d7e:	e102      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	885b      	ldrh	r3, [r3, #2]
 8001d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	805a      	strh	r2, [r3, #2]
			break;
 8001d8e:	e0fa      	b.n	8001f86 <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	88ba      	ldrh	r2, [r7, #4]
 8001d94:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	885b      	ldrh	r3, [r3, #2]
 8001da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001dae:	e0ea      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	885b      	ldrh	r3, [r3, #2]
 8001db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	805a      	strh	r2, [r3, #2]
			break;
 8001dbe:	e0e2      	b.n	8001f86 <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	88ba      	ldrh	r2, [r7, #4]
 8001dc4:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	885b      	ldrh	r3, [r3, #2]
 8001dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001dde:	e0d2      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	885b      	ldrh	r3, [r3, #2]
 8001de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	805a      	strh	r2, [r3, #2]
			break;
 8001dee:	e0ca      	b.n	8001f86 <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	88ba      	ldrh	r2, [r7, #4]
 8001df4:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	885b      	ldrh	r3, [r3, #2]
 8001e04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001e0e:	e0ba      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	885b      	ldrh	r3, [r3, #2]
 8001e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	805a      	strh	r2, [r3, #2]
			break;
 8001e1e:	e0b2      	b.n	8001f86 <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	88ba      	ldrh	r2, [r7, #4]
 8001e24:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	885b      	ldrh	r3, [r3, #2]
 8001e34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001e3e:	e0a2      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	885b      	ldrh	r3, [r3, #2]
 8001e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	805a      	strh	r2, [r3, #2]
			break;
 8001e4e:	e09a      	b.n	8001f86 <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	88ba      	ldrh	r2, [r7, #4]
 8001e54:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	885b      	ldrh	r3, [r3, #2]
 8001e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001e6e:	e08a      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	885b      	ldrh	r3, [r3, #2]
 8001e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	805a      	strh	r2, [r3, #2]
			break;
 8001e7e:	e082      	b.n	8001f86 <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	88ba      	ldrh	r2, [r7, #4]
 8001e84:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	885b      	ldrh	r3, [r3, #2]
 8001e94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001e9e:	e072      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	885b      	ldrh	r3, [r3, #2]
 8001ea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	805a      	strh	r2, [r3, #2]
			break;
 8001eae:	e06a      	b.n	8001f86 <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	88ba      	ldrh	r2, [r7, #4]
 8001eb4:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d007      	beq.n	8001ed0 <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	885b      	ldrh	r3, [r3, #2]
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001ece:	e05a      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	885b      	ldrh	r3, [r3, #2]
 8001ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	805a      	strh	r2, [r3, #2]
			break;
 8001ede:	e052      	b.n	8001f86 <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	88ba      	ldrh	r2, [r7, #4]
 8001ee4:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d009      	beq.n	8001f04 <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	885b      	ldrh	r3, [r3, #2]
 8001ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001f02:	e040      	b.n	8001f86 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	885b      	ldrh	r3, [r3, #2]
 8001f08:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	805a      	strh	r2, [r3, #2]
			break;
 8001f12:	e038      	b.n	8001f86 <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	88ba      	ldrh	r2, [r7, #4]
 8001f18:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001f1a:	e034      	b.n	8001f86 <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	88ba      	ldrh	r2, [r7, #4]
 8001f20:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8001f22:	e030      	b.n	8001f86 <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	88ba      	ldrh	r2, [r7, #4]
 8001f28:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8001f2a:	e02c      	b.n	8001f86 <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	88ba      	ldrh	r2, [r7, #4]
 8001f30:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8001f32:	e028      	b.n	8001f86 <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	88ba      	ldrh	r2, [r7, #4]
 8001f38:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8001f3a:	e024      	b.n	8001f86 <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	88ba      	ldrh	r2, [r7, #4]
 8001f40:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8001f42:	e020      	b.n	8001f86 <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	88ba      	ldrh	r2, [r7, #4]
 8001f48:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8001f4a:	e01c      	b.n	8001f86 <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	88ba      	ldrh	r2, [r7, #4]
 8001f50:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8001f52:	e018      	b.n	8001f86 <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	88ba      	ldrh	r2, [r7, #4]
 8001f58:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8001f5a:	e014      	b.n	8001f86 <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	88ba      	ldrh	r2, [r7, #4]
 8001f60:	801a      	strh	r2, [r3, #0]
			break;
 8001f62:	e010      	b.n	8001f86 <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	88ba      	ldrh	r2, [r7, #4]
 8001f68:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8001f6a:	e00c      	b.n	8001f86 <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	88ba      	ldrh	r2, [r7, #4]
 8001f70:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8001f72:	e008      	b.n	8001f86 <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	88ba      	ldrh	r2, [r7, #4]
 8001f78:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8001f7a:	e004      	b.n	8001f86 <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	88ba      	ldrh	r2, [r7, #4]
 8001f80:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 8001f82:	e000      	b.n	8001f86 <Process_Data+0x412>

		default:
			break;
 8001f84:	bf00      	nop
	}

	return;
 8001f86:	bf00      	nop
}
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop

08001f94 <PDM_CAN_Process_Data>:

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
}

void PDM_CAN_Process_Data(uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, PDM_Data* data_struct)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	72fb      	strb	r3, [r7, #11]
	uint16_t id = 0, data = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	82fb      	strh	r3, [r7, #22]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	82bb      	strh	r3, [r7, #20]

	if((data_id & 0x1FFFF000) != 0x1E35C000)
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4b26      	ldr	r3, [pc, #152]	; (8002048 <PDM_CAN_Process_Data+0xb4>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	4a26      	ldr	r2, [pc, #152]	; (800204c <PDM_CAN_Process_Data+0xb8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d142      	bne.n	800203e <PDM_CAN_Process_Data+0xaa>
		return;

	id  = data_buffer[0] << 8;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	82fb      	strh	r3, [r7, #22]
	id |= data_buffer[1] & 0xff;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	8afb      	ldrh	r3, [r7, #22]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	82fb      	strh	r3, [r7, #22]
	data  = data_buffer[2] << 8;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	82bb      	strh	r3, [r7, #20]
	data |= data_buffer[3] & 0xff;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3303      	adds	r3, #3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	8abb      	ldrh	r3, [r7, #20]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	82bb      	strh	r3, [r7, #20]

	Process_Data(id, data, data_struct);
 8001fea:	8ab9      	ldrh	r1, [r7, #20]
 8001fec:	8afb      	ldrh	r3, [r7, #22]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fdbf 	bl	8001b74 <Process_Data>

	if(data_length == 8)
 8001ff6:	7afb      	ldrb	r3, [r7, #11]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d121      	bne.n	8002040 <PDM_CAN_Process_Data+0xac>
	{
		id  = data_buffer[4] << 8;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3304      	adds	r3, #4
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	82fb      	strh	r3, [r7, #22]
		id |= data_buffer[5] & 0xff;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3305      	adds	r3, #5
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b29a      	uxth	r2, r3
 8002010:	8afb      	ldrh	r3, [r7, #22]
 8002012:	4313      	orrs	r3, r2
 8002014:	82fb      	strh	r3, [r7, #22]
		data  = data_buffer[6] << 8;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3306      	adds	r3, #6
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	82bb      	strh	r3, [r7, #20]
		data |= data_buffer[7] & 0xff;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3307      	adds	r3, #7
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b29a      	uxth	r2, r3
 800202a:	8abb      	ldrh	r3, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	82bb      	strh	r3, [r7, #20]

		Process_Data(id, data, data_struct);
 8002030:	8ab9      	ldrh	r1, [r7, #20]
 8002032:	8afb      	ldrh	r3, [r7, #22]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fd9c 	bl	8001b74 <Process_Data>
 800203c:	e000      	b.n	8002040 <PDM_CAN_Process_Data+0xac>
		return;
 800203e:	bf00      	nop
	}
}
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	1ffff000 	.word	0x1ffff000
 800204c:	1e35c000 	.word	0x1e35c000

08002050 <Tx_Analog_1_4>:
 */

#include "principal.h"

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002058:	4b43      	ldr	r3, [pc, #268]	; (8002168 <Tx_Analog_1_4+0x118>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800205e:	4b42      	ldr	r3, [pc, #264]	; (8002168 <Tx_Analog_1_4+0x118>)
 8002060:	2200      	movs	r2, #0
 8002062:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002064:	4b40      	ldr	r3, [pc, #256]	; (8002168 <Tx_Analog_1_4+0x118>)
 8002066:	2200      	movs	r2, #0
 8002068:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID;
 800206a:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <Tx_Analog_1_4+0x118>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8002070:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <Tx_Analog_1_4+0x118>)
 8002072:	2208      	movs	r2, #8
 8002074:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[0] >> 8;
 8002076:	4b3d      	ldr	r3, [pc, #244]	; (800216c <Tx_Analog_1_4+0x11c>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	b29b      	uxth	r3, r3
 800207e:	b2da      	uxtb	r2, r3
 8002080:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <Tx_Analog_1_4+0x120>)
 8002082:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[0] & 0xff;
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <Tx_Analog_1_4+0x11c>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b39      	ldr	r3, [pc, #228]	; (8002170 <Tx_Analog_1_4+0x120>)
 800208c:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[1] >> 8;
 800208e:	4b37      	ldr	r3, [pc, #220]	; (800216c <Tx_Analog_1_4+0x11c>)
 8002090:	885b      	ldrh	r3, [r3, #2]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	b29b      	uxth	r3, r3
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <Tx_Analog_1_4+0x120>)
 800209a:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[1] & 0xff;
 800209c:	4b33      	ldr	r3, [pc, #204]	; (800216c <Tx_Analog_1_4+0x11c>)
 800209e:	885b      	ldrh	r3, [r3, #2]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b33      	ldr	r3, [pc, #204]	; (8002170 <Tx_Analog_1_4+0x120>)
 80020a4:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[2] >> 8;
 80020a6:	4b31      	ldr	r3, [pc, #196]	; (800216c <Tx_Analog_1_4+0x11c>)
 80020a8:	889b      	ldrh	r3, [r3, #4]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <Tx_Analog_1_4+0x120>)
 80020b2:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[2] & 0xff;
 80020b4:	4b2d      	ldr	r3, [pc, #180]	; (800216c <Tx_Analog_1_4+0x11c>)
 80020b6:	889b      	ldrh	r3, [r3, #4]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <Tx_Analog_1_4+0x120>)
 80020bc:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[3] >> 8;
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <Tx_Analog_1_4+0x11c>)
 80020c0:	88db      	ldrh	r3, [r3, #6]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b29      	ldr	r3, [pc, #164]	; (8002170 <Tx_Analog_1_4+0x120>)
 80020ca:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[3] & 0xff;
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <Tx_Analog_1_4+0x11c>)
 80020ce:	88db      	ldrh	r3, [r3, #6]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <Tx_Analog_1_4+0x120>)
 80020d4:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == 1)
 80020d6:	4b27      	ldr	r3, [pc, #156]	; (8002174 <Tx_Analog_1_4+0x124>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d108      	bne.n	80020f0 <Tx_Analog_1_4+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 80020de:	4b22      	ldr	r3, [pc, #136]	; (8002168 <Tx_Analog_1_4+0x118>)
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	4b21      	ldr	r3, [pc, #132]	; (8002168 <Tx_Analog_1_4+0x118>)
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	b2d9      	uxtb	r1, r3
 80020e8:	4b23      	ldr	r3, [pc, #140]	; (8002178 <Tx_Analog_1_4+0x128>)
 80020ea:	4a21      	ldr	r2, [pc, #132]	; (8002170 <Tx_Analog_1_4+0x120>)
 80020ec:	f001 ff0c 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_1_4] >= Per_CAN[Analog_1_4]) && (Per_CAN[Analog_1_4] != 0))
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <Tx_Analog_1_4+0x12c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a22      	ldr	r2, [pc, #136]	; (8002180 <Tx_Analog_1_4+0x130>)
 80020f6:	8812      	ldrh	r2, [r2, #0]
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d331      	bcc.n	8002160 <Tx_Analog_1_4+0x110>
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <Tx_Analog_1_4+0x130>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d02d      	beq.n	8002160 <Tx_Analog_1_4+0x110>
	{
		Acc_CAN[Analog_1_4] -= Per_CAN[Analog_1_4];
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <Tx_Analog_1_4+0x12c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <Tx_Analog_1_4+0x130>)
 800210a:	8812      	ldrh	r2, [r2, #0]
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	4a1b      	ldr	r2, [pc, #108]	; (800217c <Tx_Analog_1_4+0x12c>)
 8002110:	6013      	str	r3, [r2, #0]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <Tx_Analog_1_4+0x134>)
 8002114:	4a16      	ldr	r2, [pc, #88]	; (8002170 <Tx_Analog_1_4+0x120>)
 8002116:	4914      	ldr	r1, [pc, #80]	; (8002168 <Tx_Analog_1_4+0x118>)
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f003 f926 	bl	800536a <HAL_CAN_AddTxMessage>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <Tx_Analog_1_4+0xe4>
			Verify_CAN |= 1;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <Tx_Analog_1_4+0x138>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <Tx_Analog_1_4+0x138>)
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e006      	b.n	8002142 <Tx_Analog_1_4+0xf2>
		else
			Verify_CAN &= 0x02;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <Tx_Analog_1_4+0x138>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <Tx_Analog_1_4+0x138>)
 8002140:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	e002      	b.n	800214e <Tx_Analog_1_4+0xfe>
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	3301      	adds	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f003 f9e6 	bl	8005520 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002154:	4603      	mov	r3, r0
 8002156:	2b03      	cmp	r3, #3
 8002158:	d002      	beq.n	8002160 <Tx_Analog_1_4+0x110>
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d9f3      	bls.n	8002148 <Tx_Analog_1_4+0xf8>
	}
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200039e4 	.word	0x200039e4
 800216c:	20000524 	.word	0x20000524
 8002170:	200027dc 	.word	0x200027dc
 8002174:	2000282c 	.word	0x2000282c
 8002178:	200028ec 	.word	0x200028ec
 800217c:	200039c0 	.word	0x200039c0
 8002180:	2000051c 	.word	0x2000051c
 8002184:	200028b4 	.word	0x200028b4
 8002188:	20002670 	.word	0x20002670

0800218c <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002194:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <Tx_Analog_5_8+0x118>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800219a:	4b42      	ldr	r3, [pc, #264]	; (80022a4 <Tx_Analog_5_8+0x118>)
 800219c:	2200      	movs	r2, #0
 800219e:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80021a0:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <Tx_Analog_5_8+0x118>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + 1;
 80021a6:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <Tx_Analog_5_8+0x118>)
 80021a8:	2202      	movs	r2, #2
 80021aa:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 80021ac:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <Tx_Analog_5_8+0x118>)
 80021ae:	2208      	movs	r2, #8
 80021b0:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[4] >> 8;
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <Tx_Analog_5_8+0x11c>)
 80021b4:	891b      	ldrh	r3, [r3, #8]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <Tx_Analog_5_8+0x120>)
 80021be:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[4] & 0xff;
 80021c0:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <Tx_Analog_5_8+0x11c>)
 80021c2:	891b      	ldrh	r3, [r3, #8]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b39      	ldr	r3, [pc, #228]	; (80022ac <Tx_Analog_5_8+0x120>)
 80021c8:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[5] >> 8;
 80021ca:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <Tx_Analog_5_8+0x11c>)
 80021cc:	895b      	ldrh	r3, [r3, #10]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b35      	ldr	r3, [pc, #212]	; (80022ac <Tx_Analog_5_8+0x120>)
 80021d6:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[5] & 0xff;
 80021d8:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <Tx_Analog_5_8+0x11c>)
 80021da:	895b      	ldrh	r3, [r3, #10]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b33      	ldr	r3, [pc, #204]	; (80022ac <Tx_Analog_5_8+0x120>)
 80021e0:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[6] >> 8;
 80021e2:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <Tx_Analog_5_8+0x11c>)
 80021e4:	899b      	ldrh	r3, [r3, #12]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <Tx_Analog_5_8+0x120>)
 80021ee:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[6] & 0xff;
 80021f0:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <Tx_Analog_5_8+0x11c>)
 80021f2:	899b      	ldrh	r3, [r3, #12]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <Tx_Analog_5_8+0x120>)
 80021f8:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[7] >> 8;
 80021fa:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <Tx_Analog_5_8+0x11c>)
 80021fc:	89db      	ldrh	r3, [r3, #14]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	b29b      	uxth	r3, r3
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b29      	ldr	r3, [pc, #164]	; (80022ac <Tx_Analog_5_8+0x120>)
 8002206:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[7] & 0xff;
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <Tx_Analog_5_8+0x11c>)
 800220a:	89db      	ldrh	r3, [r3, #14]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b27      	ldr	r3, [pc, #156]	; (80022ac <Tx_Analog_5_8+0x120>)
 8002210:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == 1)
 8002212:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <Tx_Analog_5_8+0x124>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d108      	bne.n	800222c <Tx_Analog_5_8+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <Tx_Analog_5_8+0x118>)
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <Tx_Analog_5_8+0x118>)
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	b2d9      	uxtb	r1, r3
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <Tx_Analog_5_8+0x128>)
 8002226:	4a21      	ldr	r2, [pc, #132]	; (80022ac <Tx_Analog_5_8+0x120>)
 8002228:	f001 fe6e 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_5_8] >= Per_CAN[Analog_5_8]) && (Per_CAN[Analog_5_8] != 0))
 800222c:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <Tx_Analog_5_8+0x12c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a22      	ldr	r2, [pc, #136]	; (80022bc <Tx_Analog_5_8+0x130>)
 8002232:	8852      	ldrh	r2, [r2, #2]
 8002234:	4293      	cmp	r3, r2
 8002236:	d331      	bcc.n	800229c <Tx_Analog_5_8+0x110>
 8002238:	4b20      	ldr	r3, [pc, #128]	; (80022bc <Tx_Analog_5_8+0x130>)
 800223a:	885b      	ldrh	r3, [r3, #2]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d02d      	beq.n	800229c <Tx_Analog_5_8+0x110>
	{
		Acc_CAN[Analog_5_8] -= Per_CAN[Analog_5_8];
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <Tx_Analog_5_8+0x12c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a1d      	ldr	r2, [pc, #116]	; (80022bc <Tx_Analog_5_8+0x130>)
 8002246:	8852      	ldrh	r2, [r2, #2]
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <Tx_Analog_5_8+0x12c>)
 800224c:	6053      	str	r3, [r2, #4]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <Tx_Analog_5_8+0x134>)
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <Tx_Analog_5_8+0x120>)
 8002252:	4914      	ldr	r1, [pc, #80]	; (80022a4 <Tx_Analog_5_8+0x118>)
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f003 f888 	bl	800536a <HAL_CAN_AddTxMessage>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d107      	bne.n	8002270 <Tx_Analog_5_8+0xe4>
			Verify_CAN |= 1;
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <Tx_Analog_5_8+0x138>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <Tx_Analog_5_8+0x138>)
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e006      	b.n	800227e <Tx_Analog_5_8+0xf2>
		else
			Verify_CAN &= 0x02;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <Tx_Analog_5_8+0x138>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <Tx_Analog_5_8+0x138>)
 800227c:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
 8002282:	e002      	b.n	800228a <Tx_Analog_5_8+0xfe>
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	3301      	adds	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f003 f948 	bl	8005520 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002290:	4603      	mov	r3, r0
 8002292:	2b03      	cmp	r3, #3
 8002294:	d002      	beq.n	800229c <Tx_Analog_5_8+0x110>
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d9f3      	bls.n	8002284 <Tx_Analog_5_8+0xf8>
	}
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	200039e4 	.word	0x200039e4
 80022a8:	20000524 	.word	0x20000524
 80022ac:	200027dc 	.word	0x200027dc
 80022b0:	2000282c 	.word	0x2000282c
 80022b4:	200028ec 	.word	0x200028ec
 80022b8:	200039c0 	.word	0x200039c0
 80022bc:	2000051c 	.word	0x2000051c
 80022c0:	200028b4 	.word	0x200028b4
 80022c4:	20002670 	.word	0x20002670

080022c8 <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80022d0:	4b43      	ldr	r3, [pc, #268]	; (80023e0 <Tx_Analog_9_12+0x118>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80022d6:	4b42      	ldr	r3, [pc, #264]	; (80023e0 <Tx_Analog_9_12+0x118>)
 80022d8:	2200      	movs	r2, #0
 80022da:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80022dc:	4b40      	ldr	r3, [pc, #256]	; (80023e0 <Tx_Analog_9_12+0x118>)
 80022de:	2200      	movs	r2, #0
 80022e0:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + 2;
 80022e2:	4b3f      	ldr	r3, [pc, #252]	; (80023e0 <Tx_Analog_9_12+0x118>)
 80022e4:	2203      	movs	r2, #3
 80022e6:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 80022e8:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <Tx_Analog_9_12+0x118>)
 80022ea:	2208      	movs	r2, #8
 80022ec:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[8] >> 8;
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <Tx_Analog_9_12+0x11c>)
 80022f0:	8a1b      	ldrh	r3, [r3, #16]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <Tx_Analog_9_12+0x120>)
 80022fa:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[8] & 0xff;
 80022fc:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <Tx_Analog_9_12+0x11c>)
 80022fe:	8a1b      	ldrh	r3, [r3, #16]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <Tx_Analog_9_12+0x120>)
 8002304:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[9] >> 8;
 8002306:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <Tx_Analog_9_12+0x11c>)
 8002308:	8a5b      	ldrh	r3, [r3, #18]
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	b29b      	uxth	r3, r3
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <Tx_Analog_9_12+0x120>)
 8002312:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[9] & 0xff;
 8002314:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <Tx_Analog_9_12+0x11c>)
 8002316:	8a5b      	ldrh	r3, [r3, #18]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b33      	ldr	r3, [pc, #204]	; (80023e8 <Tx_Analog_9_12+0x120>)
 800231c:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[10] >> 8;
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <Tx_Analog_9_12+0x11c>)
 8002320:	8a9b      	ldrh	r3, [r3, #20]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	b29b      	uxth	r3, r3
 8002326:	b2da      	uxtb	r2, r3
 8002328:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <Tx_Analog_9_12+0x120>)
 800232a:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[10] & 0xff;
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <Tx_Analog_9_12+0x11c>)
 800232e:	8a9b      	ldrh	r3, [r3, #20]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <Tx_Analog_9_12+0x120>)
 8002334:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[11] >> 8;
 8002336:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <Tx_Analog_9_12+0x11c>)
 8002338:	8adb      	ldrh	r3, [r3, #22]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <Tx_Analog_9_12+0x120>)
 8002342:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[11] & 0xff;
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <Tx_Analog_9_12+0x11c>)
 8002346:	8adb      	ldrh	r3, [r3, #22]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <Tx_Analog_9_12+0x120>)
 800234c:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == 1)
 800234e:	4b27      	ldr	r3, [pc, #156]	; (80023ec <Tx_Analog_9_12+0x124>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d108      	bne.n	8002368 <Tx_Analog_9_12+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <Tx_Analog_9_12+0x118>)
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <Tx_Analog_9_12+0x118>)
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	b2d9      	uxtb	r1, r3
 8002360:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <Tx_Analog_9_12+0x128>)
 8002362:	4a21      	ldr	r2, [pc, #132]	; (80023e8 <Tx_Analog_9_12+0x120>)
 8002364:	f001 fdd0 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_9_12] >= Per_CAN[Analog_9_12]) && (Per_CAN[Analog_9_12] != 0))
 8002368:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <Tx_Analog_9_12+0x12c>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <Tx_Analog_9_12+0x130>)
 800236e:	8892      	ldrh	r2, [r2, #4]
 8002370:	4293      	cmp	r3, r2
 8002372:	d331      	bcc.n	80023d8 <Tx_Analog_9_12+0x110>
 8002374:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <Tx_Analog_9_12+0x130>)
 8002376:	889b      	ldrh	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02d      	beq.n	80023d8 <Tx_Analog_9_12+0x110>
	{
		Acc_CAN[Analog_9_12] -= Per_CAN[Analog_9_12];
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <Tx_Analog_9_12+0x12c>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <Tx_Analog_9_12+0x130>)
 8002382:	8892      	ldrh	r2, [r2, #4]
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	4a1b      	ldr	r2, [pc, #108]	; (80023f4 <Tx_Analog_9_12+0x12c>)
 8002388:	6093      	str	r3, [r2, #8]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 800238a:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <Tx_Analog_9_12+0x134>)
 800238c:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <Tx_Analog_9_12+0x120>)
 800238e:	4914      	ldr	r1, [pc, #80]	; (80023e0 <Tx_Analog_9_12+0x118>)
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f002 ffea 	bl	800536a <HAL_CAN_AddTxMessage>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <Tx_Analog_9_12+0xe4>
			Verify_CAN |= 1;
 800239c:	4b18      	ldr	r3, [pc, #96]	; (8002400 <Tx_Analog_9_12+0x138>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <Tx_Analog_9_12+0x138>)
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e006      	b.n	80023ba <Tx_Analog_9_12+0xf2>
		else
			Verify_CAN &= 0x02;
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <Tx_Analog_9_12+0x138>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <Tx_Analog_9_12+0x138>)
 80023b8:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e002      	b.n	80023c6 <Tx_Analog_9_12+0xfe>
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	3301      	adds	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f003 f8aa 	bl	8005520 <HAL_CAN_GetTxMailboxesFreeLevel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d002      	beq.n	80023d8 <Tx_Analog_9_12+0x110>
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d9f3      	bls.n	80023c0 <Tx_Analog_9_12+0xf8>
	}
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200039e4 	.word	0x200039e4
 80023e4:	20000524 	.word	0x20000524
 80023e8:	200027dc 	.word	0x200027dc
 80023ec:	2000282c 	.word	0x2000282c
 80023f0:	200028ec 	.word	0x200028ec
 80023f4:	200039c0 	.word	0x200039c0
 80023f8:	2000051c 	.word	0x2000051c
 80023fc:	200028b4 	.word	0x200028b4
 8002400:	20002670 	.word	0x20002670

08002404 <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 800240c:	4b37      	ldr	r3, [pc, #220]	; (80024ec <Tx_RTC+0xe8>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002412:	4b36      	ldr	r3, [pc, #216]	; (80024ec <Tx_RTC+0xe8>)
 8002414:	2200      	movs	r2, #0
 8002416:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002418:	4b34      	ldr	r3, [pc, #208]	; (80024ec <Tx_RTC+0xe8>)
 800241a:	2200      	movs	r2, #0
 800241c:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + 5;
 800241e:	4b33      	ldr	r3, [pc, #204]	; (80024ec <Tx_RTC+0xe8>)
 8002420:	2206      	movs	r2, #6
 8002422:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 6;
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <Tx_RTC+0xe8>)
 8002426:	2206      	movs	r2, #6
 8002428:	611a      	str	r2, [r3, #16]

	TxData[0] = Time.Hours;
 800242a:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <Tx_RTC+0xec>)
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <Tx_RTC+0xf0>)
 8002430:	701a      	strb	r2, [r3, #0]
	TxData[1] = Time.Minutes;
 8002432:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <Tx_RTC+0xec>)
 8002434:	785a      	ldrb	r2, [r3, #1]
 8002436:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <Tx_RTC+0xf0>)
 8002438:	705a      	strb	r2, [r3, #1]
	TxData[2] = Time.Seconds;
 800243a:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <Tx_RTC+0xec>)
 800243c:	789a      	ldrb	r2, [r3, #2]
 800243e:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <Tx_RTC+0xf0>)
 8002440:	709a      	strb	r2, [r3, #2]
	TxData[3] = Date.Date;
 8002442:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <Tx_RTC+0xf4>)
 8002444:	789a      	ldrb	r2, [r3, #2]
 8002446:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <Tx_RTC+0xf0>)
 8002448:	70da      	strb	r2, [r3, #3]
	TxData[4] = Date.Month;
 800244a:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <Tx_RTC+0xf4>)
 800244c:	785a      	ldrb	r2, [r3, #1]
 800244e:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <Tx_RTC+0xf0>)
 8002450:	711a      	strb	r2, [r3, #4]
	TxData[5] = Date.Year;
 8002452:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <Tx_RTC+0xf4>)
 8002454:	78da      	ldrb	r2, [r3, #3]
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <Tx_RTC+0xf0>)
 8002458:	715a      	strb	r2, [r3, #5]

	if(Flag_Datalogger == 1)
 800245a:	4b28      	ldr	r3, [pc, #160]	; (80024fc <Tx_RTC+0xf8>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <Tx_RTC+0x70>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 8002462:	4b22      	ldr	r3, [pc, #136]	; (80024ec <Tx_RTC+0xe8>)
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <Tx_RTC+0xe8>)
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	b2d9      	uxtb	r1, r3
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <Tx_RTC+0xfc>)
 800246e:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <Tx_RTC+0xf0>)
 8002470:	f001 fd4a 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[RTC_Msg] >= Per_CAN[RTC_Msg]) && (Per_CAN[RTC_Msg] != 0))
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <Tx_RTC+0x100>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a23      	ldr	r2, [pc, #140]	; (8002508 <Tx_RTC+0x104>)
 800247a:	88d2      	ldrh	r2, [r2, #6]
 800247c:	4293      	cmp	r3, r2
 800247e:	d331      	bcc.n	80024e4 <Tx_RTC+0xe0>
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <Tx_RTC+0x104>)
 8002482:	88db      	ldrh	r3, [r3, #6]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d02d      	beq.n	80024e4 <Tx_RTC+0xe0>
	{
		Acc_CAN[RTC_Msg] -= Per_CAN[RTC_Msg];
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <Tx_RTC+0x100>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <Tx_RTC+0x104>)
 800248e:	88d2      	ldrh	r2, [r2, #6]
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <Tx_RTC+0x100>)
 8002494:	60d3      	str	r3, [r2, #12]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <Tx_RTC+0x108>)
 8002498:	4a16      	ldr	r2, [pc, #88]	; (80024f4 <Tx_RTC+0xf0>)
 800249a:	4914      	ldr	r1, [pc, #80]	; (80024ec <Tx_RTC+0xe8>)
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f002 ff64 	bl	800536a <HAL_CAN_AddTxMessage>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d107      	bne.n	80024b8 <Tx_RTC+0xb4>
			Verify_CAN |= 1;
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <Tx_RTC+0x10c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <Tx_RTC+0x10c>)
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e006      	b.n	80024c6 <Tx_RTC+0xc2>
		else
			Verify_CAN &= 0x02;
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <Tx_RTC+0x10c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <Tx_RTC+0x10c>)
 80024c4:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e002      	b.n	80024d2 <Tx_RTC+0xce>
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	3301      	adds	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f003 f824 	bl	8005520 <HAL_CAN_GetTxMailboxesFreeLevel>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d002      	beq.n	80024e4 <Tx_RTC+0xe0>
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d9f3      	bls.n	80024cc <Tx_RTC+0xc8>
	}
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200039e4 	.word	0x200039e4
 80024f0:	2000391c 	.word	0x2000391c
 80024f4:	200027dc 	.word	0x200027dc
 80024f8:	20002674 	.word	0x20002674
 80024fc:	2000282c 	.word	0x2000282c
 8002500:	200028ec 	.word	0x200028ec
 8002504:	200039c0 	.word	0x200039c0
 8002508:	2000051c 	.word	0x2000051c
 800250c:	200028b4 	.word	0x200028b4
 8002510:	20002670 	.word	0x20002670

08002514 <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 800251c:	4b69      	ldr	r3, [pc, #420]	; (80026c4 <Tx_Verify+0x1b0>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002522:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <Tx_Verify+0x1b0>)
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002528:	4b66      	ldr	r3, [pc, #408]	; (80026c4 <Tx_Verify+0x1b0>)
 800252a:	2200      	movs	r2, #0
 800252c:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + 4;
 800252e:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <Tx_Verify+0x1b0>)
 8002530:	2205      	movs	r2, #5
 8002532:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8002534:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <Tx_Verify+0x1b0>)
 8002536:	2208      	movs	r2, #8
 8002538:	611a      	str	r2, [r3, #16]

	TxData[0]  = Verify_Data[0];
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <Tx_Verify+0x1b4>)
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	4b63      	ldr	r3, [pc, #396]	; (80026cc <Tx_Verify+0x1b8>)
 8002540:	701a      	strb	r2, [r3, #0]
	TxData[0] |= Verify_Data[1] << 1;
 8002542:	4b62      	ldr	r3, [pc, #392]	; (80026cc <Tx_Verify+0x1b8>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b25a      	sxtb	r2, r3
 8002548:	4b5f      	ldr	r3, [pc, #380]	; (80026c8 <Tx_Verify+0x1b4>)
 800254a:	785b      	ldrb	r3, [r3, #1]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	b25b      	sxtb	r3, r3
 8002550:	4313      	orrs	r3, r2
 8002552:	b25b      	sxtb	r3, r3
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b5d      	ldr	r3, [pc, #372]	; (80026cc <Tx_Verify+0x1b8>)
 8002558:	701a      	strb	r2, [r3, #0]
	TxData[0] |= Verify_Data[2] << 2;
 800255a:	4b5c      	ldr	r3, [pc, #368]	; (80026cc <Tx_Verify+0x1b8>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b25a      	sxtb	r2, r3
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <Tx_Verify+0x1b4>)
 8002562:	789b      	ldrb	r3, [r3, #2]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	b25b      	sxtb	r3, r3
 8002568:	4313      	orrs	r3, r2
 800256a:	b25b      	sxtb	r3, r3
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b57      	ldr	r3, [pc, #348]	; (80026cc <Tx_Verify+0x1b8>)
 8002570:	701a      	strb	r2, [r3, #0]
	TxData[0] |= Verify_Data[3] << 3;
 8002572:	4b56      	ldr	r3, [pc, #344]	; (80026cc <Tx_Verify+0x1b8>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b25a      	sxtb	r2, r3
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <Tx_Verify+0x1b4>)
 800257a:	78db      	ldrb	r3, [r3, #3]
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	b25b      	sxtb	r3, r3
 8002580:	4313      	orrs	r3, r2
 8002582:	b25b      	sxtb	r3, r3
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b51      	ldr	r3, [pc, #324]	; (80026cc <Tx_Verify+0x1b8>)
 8002588:	701a      	strb	r2, [r3, #0]
	TxData[0] |= Verify_Data[4] << 4;
 800258a:	4b50      	ldr	r3, [pc, #320]	; (80026cc <Tx_Verify+0x1b8>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b25a      	sxtb	r2, r3
 8002590:	4b4d      	ldr	r3, [pc, #308]	; (80026c8 <Tx_Verify+0x1b4>)
 8002592:	791b      	ldrb	r3, [r3, #4]
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	b25b      	sxtb	r3, r3
 8002598:	4313      	orrs	r3, r2
 800259a:	b25b      	sxtb	r3, r3
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <Tx_Verify+0x1b8>)
 80025a0:	701a      	strb	r2, [r3, #0]
	TxData[0] |= Verify_Data[5] << 5;
 80025a2:	4b4a      	ldr	r3, [pc, #296]	; (80026cc <Tx_Verify+0x1b8>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	b25a      	sxtb	r2, r3
 80025a8:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <Tx_Verify+0x1b4>)
 80025aa:	795b      	ldrb	r3, [r3, #5]
 80025ac:	015b      	lsls	r3, r3, #5
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	4313      	orrs	r3, r2
 80025b2:	b25b      	sxtb	r3, r3
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b45      	ldr	r3, [pc, #276]	; (80026cc <Tx_Verify+0x1b8>)
 80025b8:	701a      	strb	r2, [r3, #0]
	TxData[0] |= Verify_Data[6] << 6;
 80025ba:	4b44      	ldr	r3, [pc, #272]	; (80026cc <Tx_Verify+0x1b8>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	b25a      	sxtb	r2, r3
 80025c0:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <Tx_Verify+0x1b4>)
 80025c2:	799b      	ldrb	r3, [r3, #6]
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	b25b      	sxtb	r3, r3
 80025c8:	4313      	orrs	r3, r2
 80025ca:	b25b      	sxtb	r3, r3
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b3f      	ldr	r3, [pc, #252]	; (80026cc <Tx_Verify+0x1b8>)
 80025d0:	701a      	strb	r2, [r3, #0]
	TxData[0] |= Verify_Data[7] << 7;
 80025d2:	4b3e      	ldr	r3, [pc, #248]	; (80026cc <Tx_Verify+0x1b8>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	b25a      	sxtb	r2, r3
 80025d8:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <Tx_Verify+0x1b4>)
 80025da:	79db      	ldrb	r3, [r3, #7]
 80025dc:	01db      	lsls	r3, r3, #7
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	4313      	orrs	r3, r2
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4b39      	ldr	r3, [pc, #228]	; (80026cc <Tx_Verify+0x1b8>)
 80025e8:	701a      	strb	r2, [r3, #0]

	TxData[1]  = Verify_Data[8];
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <Tx_Verify+0x1b4>)
 80025ec:	7a1a      	ldrb	r2, [r3, #8]
 80025ee:	4b37      	ldr	r3, [pc, #220]	; (80026cc <Tx_Verify+0x1b8>)
 80025f0:	705a      	strb	r2, [r3, #1]
	TxData[1] |= Verify_Data[9] << 1;
 80025f2:	4b36      	ldr	r3, [pc, #216]	; (80026cc <Tx_Verify+0x1b8>)
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	b25a      	sxtb	r2, r3
 80025f8:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <Tx_Verify+0x1b4>)
 80025fa:	7a5b      	ldrb	r3, [r3, #9]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	4313      	orrs	r3, r2
 8002602:	b25b      	sxtb	r3, r3
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b31      	ldr	r3, [pc, #196]	; (80026cc <Tx_Verify+0x1b8>)
 8002608:	705a      	strb	r2, [r3, #1]
	TxData[1] |= Verify_Data[10] << 2;
 800260a:	4b30      	ldr	r3, [pc, #192]	; (80026cc <Tx_Verify+0x1b8>)
 800260c:	785b      	ldrb	r3, [r3, #1]
 800260e:	b25a      	sxtb	r2, r3
 8002610:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <Tx_Verify+0x1b4>)
 8002612:	7a9b      	ldrb	r3, [r3, #10]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	b25b      	sxtb	r3, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	b25b      	sxtb	r3, r3
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <Tx_Verify+0x1b8>)
 8002620:	705a      	strb	r2, [r3, #1]
	TxData[1] |= Verify_Data[11] << 3;
 8002622:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <Tx_Verify+0x1b8>)
 8002624:	785b      	ldrb	r3, [r3, #1]
 8002626:	b25a      	sxtb	r2, r3
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <Tx_Verify+0x1b4>)
 800262a:	7adb      	ldrb	r3, [r3, #11]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	b25b      	sxtb	r3, r3
 8002630:	4313      	orrs	r3, r2
 8002632:	b25b      	sxtb	r3, r3
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b25      	ldr	r3, [pc, #148]	; (80026cc <Tx_Verify+0x1b8>)
 8002638:	705a      	strb	r2, [r3, #1]
	TxData[1] |= Verify_Datalogger << 4;
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <Tx_Verify+0x1b8>)
 800263c:	785b      	ldrb	r3, [r3, #1]
 800263e:	b25a      	sxtb	r2, r3
 8002640:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <Tx_Verify+0x1bc>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	b25b      	sxtb	r3, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	b25b      	sxtb	r3, r3
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <Tx_Verify+0x1b8>)
 8002650:	705a      	strb	r2, [r3, #1]

	if(Flag_Datalogger == 1)
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <Tx_Verify+0x1c0>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d108      	bne.n	800266c <Tx_Verify+0x158>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <Tx_Verify+0x1b0>)
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <Tx_Verify+0x1b0>)
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	b2d9      	uxtb	r1, r3
 8002664:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <Tx_Verify+0x1c4>)
 8002666:	4a19      	ldr	r2, [pc, #100]	; (80026cc <Tx_Verify+0x1b8>)
 8002668:	f001 fc4e 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <Tx_Verify+0x1c8>)
 800266e:	4a17      	ldr	r2, [pc, #92]	; (80026cc <Tx_Verify+0x1b8>)
 8002670:	4914      	ldr	r1, [pc, #80]	; (80026c4 <Tx_Verify+0x1b0>)
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f002 fe79 	bl	800536a <HAL_CAN_AddTxMessage>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d107      	bne.n	800268e <Tx_Verify+0x17a>
		Verify_CAN |= 1;
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <Tx_Verify+0x1cc>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <Tx_Verify+0x1cc>)
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e006      	b.n	800269c <Tx_Verify+0x188>
	else
		Verify_CAN &= 0x02;
 800268e:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <Tx_Verify+0x1cc>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	b2da      	uxtb	r2, r3
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <Tx_Verify+0x1cc>)
 800269a:	701a      	strb	r2, [r3, #0]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	e002      	b.n	80026a8 <Tx_Verify+0x194>
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	3301      	adds	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f002 ff39 	bl	8005520 <HAL_CAN_GetTxMailboxesFreeLevel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d002      	beq.n	80026ba <Tx_Verify+0x1a6>
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d9f3      	bls.n	80026a2 <Tx_Verify+0x18e>
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200039e4 	.word	0x200039e4
 80026c8:	200028e0 	.word	0x200028e0
 80026cc:	200027dc 	.word	0x200027dc
 80026d0:	20002628 	.word	0x20002628
 80026d4:	2000282c 	.word	0x2000282c
 80026d8:	200028ec 	.word	0x200028ec
 80026dc:	200028b4 	.word	0x200028b4
 80026e0:	20002670 	.word	0x20002670

080026e4 <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <Tx_Beacon+0x50>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <Tx_Beacon+0x50>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <Tx_Beacon+0x50>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = BEACON_ID;
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <Tx_Beacon+0x50>)
 8002700:	2264      	movs	r2, #100	; 0x64
 8002702:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 1;
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <Tx_Beacon+0x50>)
 8002706:	2201      	movs	r2, #1
 8002708:	611a      	str	r2, [r3, #16]

	TxData[0] = Lap_Number;
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <Tx_Beacon+0x54>)
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <Tx_Beacon+0x58>)
 8002710:	701a      	strb	r2, [r3, #0]

	if(Flag_Datalogger == 1)
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <Tx_Beacon+0x5c>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d108      	bne.n	800272c <Tx_Beacon+0x48>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <Tx_Beacon+0x50>)
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <Tx_Beacon+0x50>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	b2d9      	uxtb	r1, r3
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <Tx_Beacon+0x60>)
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <Tx_Beacon+0x58>)
 8002728:	f001 fbee 	bl	8003f08 <Principal_Datalogger_Save_Buffer>
//	else
//		Verify_CAN &= 0x02;
//
//	//Wait Transmission finish
//	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200039e4 	.word	0x200039e4
 8002738:	20003930 	.word	0x20003930
 800273c:	200027dc 	.word	0x200027dc
 8002740:	2000282c 	.word	0x2000282c
 8002744:	200028ec 	.word	0x200028ec

08002748 <Save_PDM>:

static void Save_PDM()
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
	uint8_t id = 0, length = 0, buffer[8];
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	2300      	movs	r3, #0
 8002754:	73bb      	strb	r3, [r7, #14]

	if(Flag_Datalogger == 0)
 8002756:	4b87      	ldr	r3, [pc, #540]	; (8002974 <Save_PDM+0x22c>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8105 	beq.w	800296a <Save_PDM+0x222>
		return;

	id = PDM_FIRST_ID;
 8002760:	2332      	movs	r3, #50	; 0x32
 8002762:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8002764:	2308      	movs	r3, #8
 8002766:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[0] << 8;
 8002768:	2300      	movs	r3, #0
 800276a:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[0] & 0xff;
 800276c:	4b82      	ldr	r3, [pc, #520]	; (8002978 <Save_PDM+0x230>)
 800276e:	889b      	ldrh	r3, [r3, #4]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[1] << 8;
 8002774:	2300      	movs	r3, #0
 8002776:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[1] & 0xff;
 8002778:	4b7f      	ldr	r3, [pc, #508]	; (8002978 <Save_PDM+0x230>)
 800277a:	88db      	ldrh	r3, [r3, #6]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[2] << 8;
 8002780:	2300      	movs	r3, #0
 8002782:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[2] & 0xff;
 8002784:	4b7c      	ldr	r3, [pc, #496]	; (8002978 <Save_PDM+0x230>)
 8002786:	891b      	ldrh	r3, [r3, #8]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[3] << 8;
 800278c:	2300      	movs	r3, #0
 800278e:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[3] & 0xff;
 8002790:	4b79      	ldr	r3, [pc, #484]	; (8002978 <Save_PDM+0x230>)
 8002792:	895b      	ldrh	r3, [r3, #10]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8002798:	7bf8      	ldrb	r0, [r7, #15]
 800279a:	1d3a      	adds	r2, r7, #4
 800279c:	7bb9      	ldrb	r1, [r7, #14]
 800279e:	4b77      	ldr	r3, [pc, #476]	; (800297c <Save_PDM+0x234>)
 80027a0:	f001 fbb2 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 1;
 80027a4:	2333      	movs	r3, #51	; 0x33
 80027a6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80027a8:	2308      	movs	r3, #8
 80027aa:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[4] << 8;
 80027ac:	2300      	movs	r3, #0
 80027ae:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[4] & 0xff;
 80027b0:	4b71      	ldr	r3, [pc, #452]	; (8002978 <Save_PDM+0x230>)
 80027b2:	899b      	ldrh	r3, [r3, #12]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[5] << 8;
 80027b8:	2300      	movs	r3, #0
 80027ba:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[5] & 0xff;
 80027bc:	4b6e      	ldr	r3, [pc, #440]	; (8002978 <Save_PDM+0x230>)
 80027be:	89db      	ldrh	r3, [r3, #14]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[6] << 8;
 80027c4:	2300      	movs	r3, #0
 80027c6:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[6] & 0xff;
 80027c8:	4b6b      	ldr	r3, [pc, #428]	; (8002978 <Save_PDM+0x230>)
 80027ca:	8a1b      	ldrh	r3, [r3, #16]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[7] << 8;
 80027d0:	2300      	movs	r3, #0
 80027d2:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[7] & 0xff;
 80027d4:	4b68      	ldr	r3, [pc, #416]	; (8002978 <Save_PDM+0x230>)
 80027d6:	8a5b      	ldrh	r3, [r3, #18]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80027dc:	7bf8      	ldrb	r0, [r7, #15]
 80027de:	1d3a      	adds	r2, r7, #4
 80027e0:	7bb9      	ldrb	r1, [r7, #14]
 80027e2:	4b66      	ldr	r3, [pc, #408]	; (800297c <Save_PDM+0x234>)
 80027e4:	f001 fb90 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 2;
 80027e8:	2334      	movs	r3, #52	; 0x34
 80027ea:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80027ec:	2308      	movs	r3, #8
 80027ee:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[8] << 8;
 80027f0:	2300      	movs	r3, #0
 80027f2:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[8] & 0xff;
 80027f4:	4b60      	ldr	r3, [pc, #384]	; (8002978 <Save_PDM+0x230>)
 80027f6:	8a9b      	ldrh	r3, [r3, #20]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[9] << 8;
 80027fc:	2300      	movs	r3, #0
 80027fe:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[9] & 0xff;
 8002800:	4b5d      	ldr	r3, [pc, #372]	; (8002978 <Save_PDM+0x230>)
 8002802:	8adb      	ldrh	r3, [r3, #22]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[10] << 8;
 8002808:	2300      	movs	r3, #0
 800280a:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[10] & 0xff;
 800280c:	4b5a      	ldr	r3, [pc, #360]	; (8002978 <Save_PDM+0x230>)
 800280e:	8b1b      	ldrh	r3, [r3, #24]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[11] << 8;
 8002814:	2300      	movs	r3, #0
 8002816:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[11] & 0xff;
 8002818:	4b57      	ldr	r3, [pc, #348]	; (8002978 <Save_PDM+0x230>)
 800281a:	8b5b      	ldrh	r3, [r3, #26]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8002820:	7bf8      	ldrb	r0, [r7, #15]
 8002822:	1d3a      	adds	r2, r7, #4
 8002824:	7bb9      	ldrb	r1, [r7, #14]
 8002826:	4b55      	ldr	r3, [pc, #340]	; (800297c <Save_PDM+0x234>)
 8002828:	f001 fb6e 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 3;
 800282c:	2335      	movs	r3, #53	; 0x35
 800282e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8002830:	2308      	movs	r3, #8
 8002832:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[12] << 8;
 8002834:	2300      	movs	r3, #0
 8002836:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[12] & 0xff;
 8002838:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <Save_PDM+0x230>)
 800283a:	8b9b      	ldrh	r3, [r3, #28]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[13] << 8;
 8002840:	2300      	movs	r3, #0
 8002842:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[13] & 0xff;
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <Save_PDM+0x230>)
 8002846:	8bdb      	ldrh	r3, [r3, #30]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[14] << 8;
 800284c:	2300      	movs	r3, #0
 800284e:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[14] & 0xff;
 8002850:	4b49      	ldr	r3, [pc, #292]	; (8002978 <Save_PDM+0x230>)
 8002852:	8c1b      	ldrh	r3, [r3, #32]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[15] << 8;
 8002858:	2300      	movs	r3, #0
 800285a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[15] & 0xff;
 800285c:	4b46      	ldr	r3, [pc, #280]	; (8002978 <Save_PDM+0x230>)
 800285e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002860:	b2db      	uxtb	r3, r3
 8002862:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8002864:	7bf8      	ldrb	r0, [r7, #15]
 8002866:	1d3a      	adds	r2, r7, #4
 8002868:	7bb9      	ldrb	r1, [r7, #14]
 800286a:	4b44      	ldr	r3, [pc, #272]	; (800297c <Save_PDM+0x234>)
 800286c:	f001 fb4c 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 4;
 8002870:	2336      	movs	r3, #54	; 0x36
 8002872:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8002874:	2308      	movs	r3, #8
 8002876:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Tempetature_Buffer[0] << 8;
 8002878:	2300      	movs	r3, #0
 800287a:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Tempetature_Buffer[0] & 0xff;
 800287c:	4b3e      	ldr	r3, [pc, #248]	; (8002978 <Save_PDM+0x230>)
 800287e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002880:	b2db      	uxtb	r3, r3
 8002882:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Tempetature_Buffer[1] << 8;
 8002884:	2300      	movs	r3, #0
 8002886:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Tempetature_Buffer[1] & 0xff;
 8002888:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <Save_PDM+0x230>)
 800288a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800288c:	b2db      	uxtb	r3, r3
 800288e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Tempetature_Buffer[2] << 8;
 8002890:	2300      	movs	r3, #0
 8002892:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Tempetature_Buffer[2] & 0xff;
 8002894:	4b38      	ldr	r3, [pc, #224]	; (8002978 <Save_PDM+0x230>)
 8002896:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002898:	b2db      	uxtb	r3, r3
 800289a:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Tempetature_Buffer[3] << 8;
 800289c:	2300      	movs	r3, #0
 800289e:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Tempetature_Buffer[3] & 0xff;
 80028a0:	4b35      	ldr	r3, [pc, #212]	; (8002978 <Save_PDM+0x230>)
 80028a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80028a8:	7bf8      	ldrb	r0, [r7, #15]
 80028aa:	1d3a      	adds	r2, r7, #4
 80028ac:	7bb9      	ldrb	r1, [r7, #14]
 80028ae:	4b33      	ldr	r3, [pc, #204]	; (800297c <Save_PDM+0x234>)
 80028b0:	f001 fb2a 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 5;
 80028b4:	2337      	movs	r3, #55	; 0x37
 80028b6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80028b8:	2308      	movs	r3, #8
 80028ba:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Tempetature_Buffer[4] << 8;
 80028bc:	2300      	movs	r3, #0
 80028be:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Tempetature_Buffer[4] & 0xff;
 80028c0:	4b2d      	ldr	r3, [pc, #180]	; (8002978 <Save_PDM+0x230>)
 80028c2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Tempetature_Buffer[5] << 8;
 80028c8:	2300      	movs	r3, #0
 80028ca:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Tempetature_Buffer[5] & 0xff;
 80028cc:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <Save_PDM+0x230>)
 80028ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Tempetature_Buffer[6] << 8;
 80028d4:	2300      	movs	r3, #0
 80028d6:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Tempetature_Buffer[6] & 0xff;
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <Save_PDM+0x230>)
 80028da:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Tempetature_Buffer[7] << 8;
 80028e0:	2300      	movs	r3, #0
 80028e2:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Tempetature_Buffer[7] & 0xff;
 80028e4:	4b24      	ldr	r3, [pc, #144]	; (8002978 <Save_PDM+0x230>)
 80028e6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80028ec:	7bf8      	ldrb	r0, [r7, #15]
 80028ee:	1d3a      	adds	r2, r7, #4
 80028f0:	7bb9      	ldrb	r1, [r7, #14]
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <Save_PDM+0x234>)
 80028f4:	f001 fb08 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 6;
 80028f8:	2338      	movs	r3, #56	; 0x38
 80028fa:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80028fc:	2308      	movs	r3, #8
 80028fe:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Duty_Cycle_Buffer[0] << 8;
 8002900:	2300      	movs	r3, #0
 8002902:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Duty_Cycle_Buffer[0] & 0xff;
 8002904:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <Save_PDM+0x230>)
 8002906:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002908:	b2db      	uxtb	r3, r3
 800290a:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Duty_Cycle_Buffer[1] << 8;
 800290c:	2300      	movs	r3, #0
 800290e:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Duty_Cycle_Buffer[1] & 0xff;
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <Save_PDM+0x230>)
 8002912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002914:	b2db      	uxtb	r3, r3
 8002916:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Duty_Cycle_Buffer[2] << 8;
 8002918:	2300      	movs	r3, #0
 800291a:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Duty_Cycle_Buffer[2] & 0xff;
 800291c:	4b16      	ldr	r3, [pc, #88]	; (8002978 <Save_PDM+0x230>)
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	b2db      	uxtb	r3, r3
 8002922:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Duty_Cycle_Buffer[3] << 8;
 8002924:	2300      	movs	r3, #0
 8002926:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Duty_Cycle_Buffer[3] & 0xff;
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <Save_PDM+0x230>)
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b2db      	uxtb	r3, r3
 800292e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8002930:	7bf8      	ldrb	r0, [r7, #15]
 8002932:	1d3a      	adds	r2, r7, #4
 8002934:	7bb9      	ldrb	r1, [r7, #14]
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <Save_PDM+0x234>)
 8002938:	f001 fae6 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 7;
 800293c:	2339      	movs	r3, #57	; 0x39
 800293e:	73fb      	strb	r3, [r7, #15]
	length = 4;
 8002940:	2304      	movs	r3, #4
 8002942:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Input_Voltage << 8;
 8002944:	2300      	movs	r3, #0
 8002946:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Input_Voltage & 0xff;
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <Save_PDM+0x230>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Output_Verify << 8;
 8002950:	2300      	movs	r3, #0
 8002952:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Output_Verify & 0xff;
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <Save_PDM+0x230>)
 8002956:	885b      	ldrh	r3, [r3, #2]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	71fb      	strb	r3, [r7, #7]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 800295c:	7bf8      	ldrb	r0, [r7, #15]
 800295e:	1d3a      	adds	r2, r7, #4
 8002960:	7bb9      	ldrb	r1, [r7, #14]
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <Save_PDM+0x234>)
 8002964:	f001 fad0 	bl	8003f08 <Principal_Datalogger_Save_Buffer>
 8002968:	e000      	b.n	800296c <Save_PDM+0x224>
		return;
 800296a:	bf00      	nop
}
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000282c 	.word	0x2000282c
 8002978:	2000262c 	.word	0x2000262c
 800297c:	200028ec 	.word	0x200028ec

08002980 <Save_ECU>:

static void Save_ECU()
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
	uint8_t id = 0, length = 0, buffer[8];
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
 800298a:	2300      	movs	r3, #0
 800298c:	73bb      	strb	r3, [r7, #14]

	if(Flag_Datalogger == 0)
 800298e:	4b70      	ldr	r3, [pc, #448]	; (8002b50 <Save_ECU+0x1d0>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80d7 	beq.w	8002b46 <Save_ECU+0x1c6>
		return;

	id = ECU_FIRST_ID;
 8002998:	231a      	movs	r3, #26
 800299a:	73fb      	strb	r3, [r7, #15]
	length = 8;
 800299c:	2308      	movs	r3, #8
 800299e:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.rpm >> 8;
 80029a0:	4b6c      	ldr	r3, [pc, #432]	; (8002b54 <Save_ECU+0x1d4>)
 80029a2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80029a6:	121b      	asrs	r3, r3, #8
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.rpm & 0xff;
 80029ae:	4b69      	ldr	r3, [pc, #420]	; (8002b54 <Save_ECU+0x1d4>)
 80029b0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.tps >> 8;
 80029b8:	4b66      	ldr	r3, [pc, #408]	; (8002b54 <Save_ECU+0x1d4>)
 80029ba:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80029be:	121b      	asrs	r3, r3, #8
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.tps & 0xff;
 80029c6:	4b63      	ldr	r3, [pc, #396]	; (8002b54 <Save_ECU+0x1d4>)
 80029c8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.iat >> 8;
 80029d0:	4b60      	ldr	r3, [pc, #384]	; (8002b54 <Save_ECU+0x1d4>)
 80029d2:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80029d6:	121b      	asrs	r3, r3, #8
 80029d8:	b21b      	sxth	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.iat & 0xff;
 80029de:	4b5d      	ldr	r3, [pc, #372]	; (8002b54 <Save_ECU+0x1d4>)
 80029e0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.ect >> 8;
 80029e8:	4b5a      	ldr	r3, [pc, #360]	; (8002b54 <Save_ECU+0x1d4>)
 80029ea:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80029ee:	121b      	asrs	r3, r3, #8
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.ect & 0xff;
 80029f6:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <Save_ECU+0x1d4>)
 80029f8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8002a00:	7bf8      	ldrb	r0, [r7, #15]
 8002a02:	1d3a      	adds	r2, r7, #4
 8002a04:	7bb9      	ldrb	r1, [r7, #14]
 8002a06:	4b54      	ldr	r3, [pc, #336]	; (8002b58 <Save_ECU+0x1d8>)
 8002a08:	f001 fa7e 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 1;
 8002a0c:	231b      	movs	r3, #27
 8002a0e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8002a10:	2308      	movs	r3, #8
 8002a12:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.map >> 8;
 8002a14:	4b4f      	ldr	r3, [pc, #316]	; (8002b54 <Save_ECU+0x1d4>)
 8002a16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8002a1a:	121b      	asrs	r3, r3, #8
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.map & 0xff;
 8002a22:	4b4c      	ldr	r3, [pc, #304]	; (8002b54 <Save_ECU+0x1d4>)
 8002a24:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.fuel_pressure >> 8;
 8002a2c:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <Save_ECU+0x1d4>)
 8002a2e:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8002a32:	121b      	asrs	r3, r3, #8
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.fuel_pressure & 0xff;
 8002a3a:	4b46      	ldr	r3, [pc, #280]	; (8002b54 <Save_ECU+0x1d4>)
 8002a3c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.oil_pressure >> 8;
 8002a44:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <Save_ECU+0x1d4>)
 8002a46:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8002a4a:	121b      	asrs	r3, r3, #8
 8002a4c:	b21b      	sxth	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.oil_pressure & 0xff;
 8002a52:	4b40      	ldr	r3, [pc, #256]	; (8002b54 <Save_ECU+0x1d4>)
 8002a54:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.coolant_pressure >> 8;
 8002a5c:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <Save_ECU+0x1d4>)
 8002a5e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8002a62:	121b      	asrs	r3, r3, #8
 8002a64:	b21b      	sxth	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.coolant_pressure & 0xff;
 8002a6a:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <Save_ECU+0x1d4>)
 8002a6c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8002a74:	7bf8      	ldrb	r0, [r7, #15]
 8002a76:	1d3a      	adds	r2, r7, #4
 8002a78:	7bb9      	ldrb	r1, [r7, #14]
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <Save_ECU+0x1d8>)
 8002a7c:	f001 fa44 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 2;
 8002a80:	231c      	movs	r3, #28
 8002a82:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8002a84:	2308      	movs	r3, #8
 8002a86:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.lambda >> 8;
 8002a88:	4b32      	ldr	r3, [pc, #200]	; (8002b54 <Save_ECU+0x1d4>)
 8002a8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8002a8e:	121b      	asrs	r3, r3, #8
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.lambda & 0xff;
 8002a96:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <Save_ECU+0x1d4>)
 8002a98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.oil_temperature >> 8;
 8002aa0:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <Save_ECU+0x1d4>)
 8002aa2:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8002aa6:	121b      	asrs	r3, r3, #8
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.oil_temperature & 0xff;
 8002aae:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <Save_ECU+0x1d4>)
 8002ab0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.wheel_speed_fl;
 8002ab8:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <Save_ECU+0x1d4>)
 8002aba:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.wheel_speed_fr;
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <Save_ECU+0x1d4>)
 8002ac4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.wheel_speed_rl;
 8002acc:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <Save_ECU+0x1d4>)
 8002ace:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.wheel_speed_rr;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <Save_ECU+0x1d4>)
 8002ad8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8002ae0:	7bf8      	ldrb	r0, [r7, #15]
 8002ae2:	1d3a      	adds	r2, r7, #4
 8002ae4:	7bb9      	ldrb	r1, [r7, #14]
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <Save_ECU+0x1d8>)
 8002ae8:	f001 fa0e 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 3;
 8002aec:	231d      	movs	r3, #29
 8002aee:	73fb      	strb	r3, [r7, #15]
	length = 6;
 8002af0:	2306      	movs	r3, #6
 8002af2:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.battery_voltage >> 8;
 8002af4:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <Save_ECU+0x1d4>)
 8002af6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002afa:	121b      	asrs	r3, r3, #8
 8002afc:	b21b      	sxth	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.battery_voltage & 0xff;
 8002b02:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <Save_ECU+0x1d4>)
 8002b04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.total_fuel_flow >> 8;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <Save_ECU+0x1d4>)
 8002b0e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002b12:	121b      	asrs	r3, r3, #8
 8002b14:	b21b      	sxth	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.total_fuel_flow & 0xff;
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <Save_ECU+0x1d4>)
 8002b1c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.gear & 0xff;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <Save_ECU+0x1d4>)
 8002b26:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.electro_fan & 0xff;
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <Save_ECU+0x1d4>)
 8002b30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	727b      	strb	r3, [r7, #9]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8002b38:	7bf8      	ldrb	r0, [r7, #15]
 8002b3a:	1d3a      	adds	r2, r7, #4
 8002b3c:	7bb9      	ldrb	r1, [r7, #14]
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <Save_ECU+0x1d8>)
 8002b40:	f001 f9e2 	bl	8003f08 <Principal_Datalogger_Save_Buffer>

	return;
 8002b44:	e000      	b.n	8002b48 <Save_ECU+0x1c8>
		return;
 8002b46:	bf00      	nop
}
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	2000282c 	.word	0x2000282c
 8002b54:	20003a28 	.word	0x20003a28
 8002b58:	200028ec 	.word	0x200028ec

08002b5c <Principal_Transmit_Msg>:

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
}

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	2b07      	cmp	r3, #7
 8002b6c:	d830      	bhi.n	8002bd0 <Principal_Transmit_Msg+0x74>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <Principal_Transmit_Msg+0x18>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002b95 	.word	0x08002b95
 8002b78:	08002b9d 	.word	0x08002b9d
 8002b7c:	08002ba5 	.word	0x08002ba5
 8002b80:	08002bb5 	.word	0x08002bb5
 8002b84:	08002bad 	.word	0x08002bad
 8002b88:	08002bc5 	.word	0x08002bc5
 8002b8c:	08002bcb 	.word	0x08002bcb
 8002b90:	08002bbd 	.word	0x08002bbd
	{
		case Analog_1_4:
			Tx_Analog_1_4(hcan);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff fa5b 	bl	8002050 <Tx_Analog_1_4>
			break;
 8002b9a:	e01a      	b.n	8002bd2 <Principal_Transmit_Msg+0x76>

		case Analog_5_8:
			Tx_Analog_5_8(hcan);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff faf5 	bl	800218c <Tx_Analog_5_8>
			break;
 8002ba2:	e016      	b.n	8002bd2 <Principal_Transmit_Msg+0x76>

		case Analog_9_12:
			Tx_Analog_9_12(hcan);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fb8f 	bl	80022c8 <Tx_Analog_9_12>
			break;
 8002baa:	e012      	b.n	8002bd2 <Principal_Transmit_Msg+0x76>

		case Verify_Msg:
			Tx_Verify(hcan);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fcb1 	bl	8002514 <Tx_Verify>
			break;
 8002bb2:	e00e      	b.n	8002bd2 <Principal_Transmit_Msg+0x76>

		case RTC_Msg:
			Tx_RTC(hcan);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff fc25 	bl	8002404 <Tx_RTC>
			break;
 8002bba:	e00a      	b.n	8002bd2 <Principal_Transmit_Msg+0x76>

		case Beacon_Msg:
			Tx_Beacon(hcan);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff fd91 	bl	80026e4 <Tx_Beacon>
			break;
 8002bc2:	e006      	b.n	8002bd2 <Principal_Transmit_Msg+0x76>

		case ECU_Save:
			Save_ECU();
 8002bc4:	f7ff fedc 	bl	8002980 <Save_ECU>
			break;
 8002bc8:	e003      	b.n	8002bd2 <Principal_Transmit_Msg+0x76>

		case PDM_Save:
			Save_PDM();
 8002bca:	f7ff fdbd 	bl	8002748 <Save_PDM>
			break;
 8002bce:	e000      	b.n	8002bd2 <Principal_Transmit_Msg+0x76>

		default:
			return;
 8002bd0:	bf00      	nop
	}
}
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <Save_EEPROM>:

	return retVal;
}

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b09e      	sub	sp, #120	; 0x78
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];

	__SAVE_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 8002be0:	4bd1      	ldr	r3, [pc, #836]	; (8002f28 <Save_EEPROM+0x350>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	2b32      	cmp	r3, #50	; 0x32
 8002be6:	dc6b      	bgt.n	8002cc0 <Save_EEPROM+0xe8>
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	f2c0 8083 	blt.w	8002cf4 <Save_EEPROM+0x11c>
 8002bee:	3b02      	subs	r3, #2
 8002bf0:	2b30      	cmp	r3, #48	; 0x30
 8002bf2:	d87f      	bhi.n	8002cf4 <Save_EEPROM+0x11c>
 8002bf4:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <Save_EEPROM+0x24>)
 8002bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfa:	bf00      	nop
 8002bfc:	08002cef 	.word	0x08002cef
 8002c00:	08002cf5 	.word	0x08002cf5
 8002c04:	08002ce9 	.word	0x08002ce9
 8002c08:	08002ce3 	.word	0x08002ce3
 8002c0c:	08002cf5 	.word	0x08002cf5
 8002c10:	08002cf5 	.word	0x08002cf5
 8002c14:	08002cf5 	.word	0x08002cf5
 8002c18:	08002cf5 	.word	0x08002cf5
 8002c1c:	08002cdd 	.word	0x08002cdd
 8002c20:	08002cf5 	.word	0x08002cf5
 8002c24:	08002cf5 	.word	0x08002cf5
 8002c28:	08002cf5 	.word	0x08002cf5
 8002c2c:	08002cf5 	.word	0x08002cf5
 8002c30:	08002cf5 	.word	0x08002cf5
 8002c34:	08002cf5 	.word	0x08002cf5
 8002c38:	08002cf5 	.word	0x08002cf5
 8002c3c:	08002cf5 	.word	0x08002cf5
 8002c40:	08002cf5 	.word	0x08002cf5
 8002c44:	08002cf5 	.word	0x08002cf5
 8002c48:	08002cf5 	.word	0x08002cf5
 8002c4c:	08002cf5 	.word	0x08002cf5
 8002c50:	08002cf5 	.word	0x08002cf5
 8002c54:	08002cf5 	.word	0x08002cf5
 8002c58:	08002cd7 	.word	0x08002cd7
 8002c5c:	08002cf5 	.word	0x08002cf5
 8002c60:	08002cf5 	.word	0x08002cf5
 8002c64:	08002cf5 	.word	0x08002cf5
 8002c68:	08002cf5 	.word	0x08002cf5
 8002c6c:	08002cf5 	.word	0x08002cf5
 8002c70:	08002cf5 	.word	0x08002cf5
 8002c74:	08002cf5 	.word	0x08002cf5
 8002c78:	08002cf5 	.word	0x08002cf5
 8002c7c:	08002cf5 	.word	0x08002cf5
 8002c80:	08002cf5 	.word	0x08002cf5
 8002c84:	08002cf5 	.word	0x08002cf5
 8002c88:	08002cf5 	.word	0x08002cf5
 8002c8c:	08002cf5 	.word	0x08002cf5
 8002c90:	08002cf5 	.word	0x08002cf5
 8002c94:	08002cd1 	.word	0x08002cd1
 8002c98:	08002cf5 	.word	0x08002cf5
 8002c9c:	08002cf5 	.word	0x08002cf5
 8002ca0:	08002cf5 	.word	0x08002cf5
 8002ca4:	08002cf5 	.word	0x08002cf5
 8002ca8:	08002cf5 	.word	0x08002cf5
 8002cac:	08002cf5 	.word	0x08002cf5
 8002cb0:	08002cf5 	.word	0x08002cf5
 8002cb4:	08002cf5 	.word	0x08002cf5
 8002cb8:	08002cf5 	.word	0x08002cf5
 8002cbc:	08002ccb 	.word	0x08002ccb
 8002cc0:	2b64      	cmp	r3, #100	; 0x64
 8002cc2:	d117      	bne.n	8002cf4 <Save_EEPROM+0x11c>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	733b      	strb	r3, [r7, #12]
 8002cc8:	e016      	b.n	8002cf8 <Save_EEPROM+0x120>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	733b      	strb	r3, [r7, #12]
 8002cce:	e013      	b.n	8002cf8 <Save_EEPROM+0x120>
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	733b      	strb	r3, [r7, #12]
 8002cd4:	e010      	b.n	8002cf8 <Save_EEPROM+0x120>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	733b      	strb	r3, [r7, #12]
 8002cda:	e00d      	b.n	8002cf8 <Save_EEPROM+0x120>
 8002cdc:	2305      	movs	r3, #5
 8002cde:	733b      	strb	r3, [r7, #12]
 8002ce0:	e00a      	b.n	8002cf8 <Save_EEPROM+0x120>
 8002ce2:	2306      	movs	r3, #6
 8002ce4:	733b      	strb	r3, [r7, #12]
 8002ce6:	e007      	b.n	8002cf8 <Save_EEPROM+0x120>
 8002ce8:	2307      	movs	r3, #7
 8002cea:	733b      	strb	r3, [r7, #12]
 8002cec:	e004      	b.n	8002cf8 <Save_EEPROM+0x120>
 8002cee:	2308      	movs	r3, #8
 8002cf0:	733b      	strb	r3, [r7, #12]
 8002cf2:	e001      	b.n	8002cf8 <Save_EEPROM+0x120>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	733b      	strb	r3, [r7, #12]
 8002cf8:	bf00      	nop
	__SAVE_FREQ(buffer[1], Per_Msg[Analog_5_8]);
 8002cfa:	4b8b      	ldr	r3, [pc, #556]	; (8002f28 <Save_EEPROM+0x350>)
 8002cfc:	885b      	ldrh	r3, [r3, #2]
 8002cfe:	2b32      	cmp	r3, #50	; 0x32
 8002d00:	dc6a      	bgt.n	8002dd8 <Save_EEPROM+0x200>
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	f2c0 8082 	blt.w	8002e0c <Save_EEPROM+0x234>
 8002d08:	3b02      	subs	r3, #2
 8002d0a:	2b30      	cmp	r3, #48	; 0x30
 8002d0c:	d87e      	bhi.n	8002e0c <Save_EEPROM+0x234>
 8002d0e:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <Save_EEPROM+0x13c>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002e07 	.word	0x08002e07
 8002d18:	08002e0d 	.word	0x08002e0d
 8002d1c:	08002e01 	.word	0x08002e01
 8002d20:	08002dfb 	.word	0x08002dfb
 8002d24:	08002e0d 	.word	0x08002e0d
 8002d28:	08002e0d 	.word	0x08002e0d
 8002d2c:	08002e0d 	.word	0x08002e0d
 8002d30:	08002e0d 	.word	0x08002e0d
 8002d34:	08002df5 	.word	0x08002df5
 8002d38:	08002e0d 	.word	0x08002e0d
 8002d3c:	08002e0d 	.word	0x08002e0d
 8002d40:	08002e0d 	.word	0x08002e0d
 8002d44:	08002e0d 	.word	0x08002e0d
 8002d48:	08002e0d 	.word	0x08002e0d
 8002d4c:	08002e0d 	.word	0x08002e0d
 8002d50:	08002e0d 	.word	0x08002e0d
 8002d54:	08002e0d 	.word	0x08002e0d
 8002d58:	08002e0d 	.word	0x08002e0d
 8002d5c:	08002e0d 	.word	0x08002e0d
 8002d60:	08002e0d 	.word	0x08002e0d
 8002d64:	08002e0d 	.word	0x08002e0d
 8002d68:	08002e0d 	.word	0x08002e0d
 8002d6c:	08002e0d 	.word	0x08002e0d
 8002d70:	08002def 	.word	0x08002def
 8002d74:	08002e0d 	.word	0x08002e0d
 8002d78:	08002e0d 	.word	0x08002e0d
 8002d7c:	08002e0d 	.word	0x08002e0d
 8002d80:	08002e0d 	.word	0x08002e0d
 8002d84:	08002e0d 	.word	0x08002e0d
 8002d88:	08002e0d 	.word	0x08002e0d
 8002d8c:	08002e0d 	.word	0x08002e0d
 8002d90:	08002e0d 	.word	0x08002e0d
 8002d94:	08002e0d 	.word	0x08002e0d
 8002d98:	08002e0d 	.word	0x08002e0d
 8002d9c:	08002e0d 	.word	0x08002e0d
 8002da0:	08002e0d 	.word	0x08002e0d
 8002da4:	08002e0d 	.word	0x08002e0d
 8002da8:	08002e0d 	.word	0x08002e0d
 8002dac:	08002de9 	.word	0x08002de9
 8002db0:	08002e0d 	.word	0x08002e0d
 8002db4:	08002e0d 	.word	0x08002e0d
 8002db8:	08002e0d 	.word	0x08002e0d
 8002dbc:	08002e0d 	.word	0x08002e0d
 8002dc0:	08002e0d 	.word	0x08002e0d
 8002dc4:	08002e0d 	.word	0x08002e0d
 8002dc8:	08002e0d 	.word	0x08002e0d
 8002dcc:	08002e0d 	.word	0x08002e0d
 8002dd0:	08002e0d 	.word	0x08002e0d
 8002dd4:	08002de3 	.word	0x08002de3
 8002dd8:	2b64      	cmp	r3, #100	; 0x64
 8002dda:	d117      	bne.n	8002e0c <Save_EEPROM+0x234>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	737b      	strb	r3, [r7, #13]
 8002de0:	e016      	b.n	8002e10 <Save_EEPROM+0x238>
 8002de2:	2302      	movs	r3, #2
 8002de4:	737b      	strb	r3, [r7, #13]
 8002de6:	e013      	b.n	8002e10 <Save_EEPROM+0x238>
 8002de8:	2303      	movs	r3, #3
 8002dea:	737b      	strb	r3, [r7, #13]
 8002dec:	e010      	b.n	8002e10 <Save_EEPROM+0x238>
 8002dee:	2304      	movs	r3, #4
 8002df0:	737b      	strb	r3, [r7, #13]
 8002df2:	e00d      	b.n	8002e10 <Save_EEPROM+0x238>
 8002df4:	2305      	movs	r3, #5
 8002df6:	737b      	strb	r3, [r7, #13]
 8002df8:	e00a      	b.n	8002e10 <Save_EEPROM+0x238>
 8002dfa:	2306      	movs	r3, #6
 8002dfc:	737b      	strb	r3, [r7, #13]
 8002dfe:	e007      	b.n	8002e10 <Save_EEPROM+0x238>
 8002e00:	2307      	movs	r3, #7
 8002e02:	737b      	strb	r3, [r7, #13]
 8002e04:	e004      	b.n	8002e10 <Save_EEPROM+0x238>
 8002e06:	2308      	movs	r3, #8
 8002e08:	737b      	strb	r3, [r7, #13]
 8002e0a:	e001      	b.n	8002e10 <Save_EEPROM+0x238>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	737b      	strb	r3, [r7, #13]
 8002e10:	bf00      	nop
	__SAVE_FREQ(buffer[2], Per_Msg[Analog_9_12]);
 8002e12:	4b45      	ldr	r3, [pc, #276]	; (8002f28 <Save_EEPROM+0x350>)
 8002e14:	889b      	ldrh	r3, [r3, #4]
 8002e16:	2b32      	cmp	r3, #50	; 0x32
 8002e18:	dc6c      	bgt.n	8002ef4 <Save_EEPROM+0x31c>
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	f2c0 8086 	blt.w	8002f2c <Save_EEPROM+0x354>
 8002e20:	3b02      	subs	r3, #2
 8002e22:	2b30      	cmp	r3, #48	; 0x30
 8002e24:	f200 8082 	bhi.w	8002f2c <Save_EEPROM+0x354>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <Save_EEPROM+0x258>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002f23 	.word	0x08002f23
 8002e34:	08002f2d 	.word	0x08002f2d
 8002e38:	08002f1d 	.word	0x08002f1d
 8002e3c:	08002f17 	.word	0x08002f17
 8002e40:	08002f2d 	.word	0x08002f2d
 8002e44:	08002f2d 	.word	0x08002f2d
 8002e48:	08002f2d 	.word	0x08002f2d
 8002e4c:	08002f2d 	.word	0x08002f2d
 8002e50:	08002f11 	.word	0x08002f11
 8002e54:	08002f2d 	.word	0x08002f2d
 8002e58:	08002f2d 	.word	0x08002f2d
 8002e5c:	08002f2d 	.word	0x08002f2d
 8002e60:	08002f2d 	.word	0x08002f2d
 8002e64:	08002f2d 	.word	0x08002f2d
 8002e68:	08002f2d 	.word	0x08002f2d
 8002e6c:	08002f2d 	.word	0x08002f2d
 8002e70:	08002f2d 	.word	0x08002f2d
 8002e74:	08002f2d 	.word	0x08002f2d
 8002e78:	08002f2d 	.word	0x08002f2d
 8002e7c:	08002f2d 	.word	0x08002f2d
 8002e80:	08002f2d 	.word	0x08002f2d
 8002e84:	08002f2d 	.word	0x08002f2d
 8002e88:	08002f2d 	.word	0x08002f2d
 8002e8c:	08002f0b 	.word	0x08002f0b
 8002e90:	08002f2d 	.word	0x08002f2d
 8002e94:	08002f2d 	.word	0x08002f2d
 8002e98:	08002f2d 	.word	0x08002f2d
 8002e9c:	08002f2d 	.word	0x08002f2d
 8002ea0:	08002f2d 	.word	0x08002f2d
 8002ea4:	08002f2d 	.word	0x08002f2d
 8002ea8:	08002f2d 	.word	0x08002f2d
 8002eac:	08002f2d 	.word	0x08002f2d
 8002eb0:	08002f2d 	.word	0x08002f2d
 8002eb4:	08002f2d 	.word	0x08002f2d
 8002eb8:	08002f2d 	.word	0x08002f2d
 8002ebc:	08002f2d 	.word	0x08002f2d
 8002ec0:	08002f2d 	.word	0x08002f2d
 8002ec4:	08002f2d 	.word	0x08002f2d
 8002ec8:	08002f05 	.word	0x08002f05
 8002ecc:	08002f2d 	.word	0x08002f2d
 8002ed0:	08002f2d 	.word	0x08002f2d
 8002ed4:	08002f2d 	.word	0x08002f2d
 8002ed8:	08002f2d 	.word	0x08002f2d
 8002edc:	08002f2d 	.word	0x08002f2d
 8002ee0:	08002f2d 	.word	0x08002f2d
 8002ee4:	08002f2d 	.word	0x08002f2d
 8002ee8:	08002f2d 	.word	0x08002f2d
 8002eec:	08002f2d 	.word	0x08002f2d
 8002ef0:	08002eff 	.word	0x08002eff
 8002ef4:	2b64      	cmp	r3, #100	; 0x64
 8002ef6:	d119      	bne.n	8002f2c <Save_EEPROM+0x354>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73bb      	strb	r3, [r7, #14]
 8002efc:	e018      	b.n	8002f30 <Save_EEPROM+0x358>
 8002efe:	2302      	movs	r3, #2
 8002f00:	73bb      	strb	r3, [r7, #14]
 8002f02:	e015      	b.n	8002f30 <Save_EEPROM+0x358>
 8002f04:	2303      	movs	r3, #3
 8002f06:	73bb      	strb	r3, [r7, #14]
 8002f08:	e012      	b.n	8002f30 <Save_EEPROM+0x358>
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	73bb      	strb	r3, [r7, #14]
 8002f0e:	e00f      	b.n	8002f30 <Save_EEPROM+0x358>
 8002f10:	2305      	movs	r3, #5
 8002f12:	73bb      	strb	r3, [r7, #14]
 8002f14:	e00c      	b.n	8002f30 <Save_EEPROM+0x358>
 8002f16:	2306      	movs	r3, #6
 8002f18:	73bb      	strb	r3, [r7, #14]
 8002f1a:	e009      	b.n	8002f30 <Save_EEPROM+0x358>
 8002f1c:	2307      	movs	r3, #7
 8002f1e:	73bb      	strb	r3, [r7, #14]
 8002f20:	e006      	b.n	8002f30 <Save_EEPROM+0x358>
 8002f22:	2308      	movs	r3, #8
 8002f24:	73bb      	strb	r3, [r7, #14]
 8002f26:	e003      	b.n	8002f30 <Save_EEPROM+0x358>
 8002f28:	20003a7c 	.word	0x20003a7c
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73bb      	strb	r3, [r7, #14]
 8002f30:	bf00      	nop
	__SAVE_FREQ(buffer[3], Per_Msg[RTC_Msg]);
 8002f32:	4bd1      	ldr	r3, [pc, #836]	; (8003278 <Save_EEPROM+0x6a0>)
 8002f34:	88db      	ldrh	r3, [r3, #6]
 8002f36:	2b32      	cmp	r3, #50	; 0x32
 8002f38:	dc6a      	bgt.n	8003010 <Save_EEPROM+0x438>
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	f2c0 8082 	blt.w	8003044 <Save_EEPROM+0x46c>
 8002f40:	3b02      	subs	r3, #2
 8002f42:	2b30      	cmp	r3, #48	; 0x30
 8002f44:	d87e      	bhi.n	8003044 <Save_EEPROM+0x46c>
 8002f46:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <Save_EEPROM+0x374>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	0800303f 	.word	0x0800303f
 8002f50:	08003045 	.word	0x08003045
 8002f54:	08003039 	.word	0x08003039
 8002f58:	08003033 	.word	0x08003033
 8002f5c:	08003045 	.word	0x08003045
 8002f60:	08003045 	.word	0x08003045
 8002f64:	08003045 	.word	0x08003045
 8002f68:	08003045 	.word	0x08003045
 8002f6c:	0800302d 	.word	0x0800302d
 8002f70:	08003045 	.word	0x08003045
 8002f74:	08003045 	.word	0x08003045
 8002f78:	08003045 	.word	0x08003045
 8002f7c:	08003045 	.word	0x08003045
 8002f80:	08003045 	.word	0x08003045
 8002f84:	08003045 	.word	0x08003045
 8002f88:	08003045 	.word	0x08003045
 8002f8c:	08003045 	.word	0x08003045
 8002f90:	08003045 	.word	0x08003045
 8002f94:	08003045 	.word	0x08003045
 8002f98:	08003045 	.word	0x08003045
 8002f9c:	08003045 	.word	0x08003045
 8002fa0:	08003045 	.word	0x08003045
 8002fa4:	08003045 	.word	0x08003045
 8002fa8:	08003027 	.word	0x08003027
 8002fac:	08003045 	.word	0x08003045
 8002fb0:	08003045 	.word	0x08003045
 8002fb4:	08003045 	.word	0x08003045
 8002fb8:	08003045 	.word	0x08003045
 8002fbc:	08003045 	.word	0x08003045
 8002fc0:	08003045 	.word	0x08003045
 8002fc4:	08003045 	.word	0x08003045
 8002fc8:	08003045 	.word	0x08003045
 8002fcc:	08003045 	.word	0x08003045
 8002fd0:	08003045 	.word	0x08003045
 8002fd4:	08003045 	.word	0x08003045
 8002fd8:	08003045 	.word	0x08003045
 8002fdc:	08003045 	.word	0x08003045
 8002fe0:	08003045 	.word	0x08003045
 8002fe4:	08003021 	.word	0x08003021
 8002fe8:	08003045 	.word	0x08003045
 8002fec:	08003045 	.word	0x08003045
 8002ff0:	08003045 	.word	0x08003045
 8002ff4:	08003045 	.word	0x08003045
 8002ff8:	08003045 	.word	0x08003045
 8002ffc:	08003045 	.word	0x08003045
 8003000:	08003045 	.word	0x08003045
 8003004:	08003045 	.word	0x08003045
 8003008:	08003045 	.word	0x08003045
 800300c:	0800301b 	.word	0x0800301b
 8003010:	2b64      	cmp	r3, #100	; 0x64
 8003012:	d117      	bne.n	8003044 <Save_EEPROM+0x46c>
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
 8003018:	e016      	b.n	8003048 <Save_EEPROM+0x470>
 800301a:	2302      	movs	r3, #2
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	e013      	b.n	8003048 <Save_EEPROM+0x470>
 8003020:	2303      	movs	r3, #3
 8003022:	73fb      	strb	r3, [r7, #15]
 8003024:	e010      	b.n	8003048 <Save_EEPROM+0x470>
 8003026:	2304      	movs	r3, #4
 8003028:	73fb      	strb	r3, [r7, #15]
 800302a:	e00d      	b.n	8003048 <Save_EEPROM+0x470>
 800302c:	2305      	movs	r3, #5
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	e00a      	b.n	8003048 <Save_EEPROM+0x470>
 8003032:	2306      	movs	r3, #6
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	e007      	b.n	8003048 <Save_EEPROM+0x470>
 8003038:	2307      	movs	r3, #7
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e004      	b.n	8003048 <Save_EEPROM+0x470>
 800303e:	2308      	movs	r3, #8
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	e001      	b.n	8003048 <Save_EEPROM+0x470>
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	bf00      	nop
	__SAVE_FREQ(buffer[4], Per_Msg[Verify_Msg]);
 800304a:	4b8b      	ldr	r3, [pc, #556]	; (8003278 <Save_EEPROM+0x6a0>)
 800304c:	891b      	ldrh	r3, [r3, #8]
 800304e:	2b32      	cmp	r3, #50	; 0x32
 8003050:	dc6a      	bgt.n	8003128 <Save_EEPROM+0x550>
 8003052:	2b02      	cmp	r3, #2
 8003054:	f2c0 8082 	blt.w	800315c <Save_EEPROM+0x584>
 8003058:	3b02      	subs	r3, #2
 800305a:	2b30      	cmp	r3, #48	; 0x30
 800305c:	d87e      	bhi.n	800315c <Save_EEPROM+0x584>
 800305e:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <Save_EEPROM+0x48c>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	08003157 	.word	0x08003157
 8003068:	0800315d 	.word	0x0800315d
 800306c:	08003151 	.word	0x08003151
 8003070:	0800314b 	.word	0x0800314b
 8003074:	0800315d 	.word	0x0800315d
 8003078:	0800315d 	.word	0x0800315d
 800307c:	0800315d 	.word	0x0800315d
 8003080:	0800315d 	.word	0x0800315d
 8003084:	08003145 	.word	0x08003145
 8003088:	0800315d 	.word	0x0800315d
 800308c:	0800315d 	.word	0x0800315d
 8003090:	0800315d 	.word	0x0800315d
 8003094:	0800315d 	.word	0x0800315d
 8003098:	0800315d 	.word	0x0800315d
 800309c:	0800315d 	.word	0x0800315d
 80030a0:	0800315d 	.word	0x0800315d
 80030a4:	0800315d 	.word	0x0800315d
 80030a8:	0800315d 	.word	0x0800315d
 80030ac:	0800315d 	.word	0x0800315d
 80030b0:	0800315d 	.word	0x0800315d
 80030b4:	0800315d 	.word	0x0800315d
 80030b8:	0800315d 	.word	0x0800315d
 80030bc:	0800315d 	.word	0x0800315d
 80030c0:	0800313f 	.word	0x0800313f
 80030c4:	0800315d 	.word	0x0800315d
 80030c8:	0800315d 	.word	0x0800315d
 80030cc:	0800315d 	.word	0x0800315d
 80030d0:	0800315d 	.word	0x0800315d
 80030d4:	0800315d 	.word	0x0800315d
 80030d8:	0800315d 	.word	0x0800315d
 80030dc:	0800315d 	.word	0x0800315d
 80030e0:	0800315d 	.word	0x0800315d
 80030e4:	0800315d 	.word	0x0800315d
 80030e8:	0800315d 	.word	0x0800315d
 80030ec:	0800315d 	.word	0x0800315d
 80030f0:	0800315d 	.word	0x0800315d
 80030f4:	0800315d 	.word	0x0800315d
 80030f8:	0800315d 	.word	0x0800315d
 80030fc:	08003139 	.word	0x08003139
 8003100:	0800315d 	.word	0x0800315d
 8003104:	0800315d 	.word	0x0800315d
 8003108:	0800315d 	.word	0x0800315d
 800310c:	0800315d 	.word	0x0800315d
 8003110:	0800315d 	.word	0x0800315d
 8003114:	0800315d 	.word	0x0800315d
 8003118:	0800315d 	.word	0x0800315d
 800311c:	0800315d 	.word	0x0800315d
 8003120:	0800315d 	.word	0x0800315d
 8003124:	08003133 	.word	0x08003133
 8003128:	2b64      	cmp	r3, #100	; 0x64
 800312a:	d117      	bne.n	800315c <Save_EEPROM+0x584>
 800312c:	2301      	movs	r3, #1
 800312e:	743b      	strb	r3, [r7, #16]
 8003130:	e016      	b.n	8003160 <Save_EEPROM+0x588>
 8003132:	2302      	movs	r3, #2
 8003134:	743b      	strb	r3, [r7, #16]
 8003136:	e013      	b.n	8003160 <Save_EEPROM+0x588>
 8003138:	2303      	movs	r3, #3
 800313a:	743b      	strb	r3, [r7, #16]
 800313c:	e010      	b.n	8003160 <Save_EEPROM+0x588>
 800313e:	2304      	movs	r3, #4
 8003140:	743b      	strb	r3, [r7, #16]
 8003142:	e00d      	b.n	8003160 <Save_EEPROM+0x588>
 8003144:	2305      	movs	r3, #5
 8003146:	743b      	strb	r3, [r7, #16]
 8003148:	e00a      	b.n	8003160 <Save_EEPROM+0x588>
 800314a:	2306      	movs	r3, #6
 800314c:	743b      	strb	r3, [r7, #16]
 800314e:	e007      	b.n	8003160 <Save_EEPROM+0x588>
 8003150:	2307      	movs	r3, #7
 8003152:	743b      	strb	r3, [r7, #16]
 8003154:	e004      	b.n	8003160 <Save_EEPROM+0x588>
 8003156:	2308      	movs	r3, #8
 8003158:	743b      	strb	r3, [r7, #16]
 800315a:	e001      	b.n	8003160 <Save_EEPROM+0x588>
 800315c:	2300      	movs	r3, #0
 800315e:	743b      	strb	r3, [r7, #16]
 8003160:	bf00      	nop
	__SAVE_FREQ(buffer[5], Per_Msg[ECU_Save]);
 8003162:	4b45      	ldr	r3, [pc, #276]	; (8003278 <Save_EEPROM+0x6a0>)
 8003164:	895b      	ldrh	r3, [r3, #10]
 8003166:	2b32      	cmp	r3, #50	; 0x32
 8003168:	dc6c      	bgt.n	8003244 <Save_EEPROM+0x66c>
 800316a:	2b02      	cmp	r3, #2
 800316c:	f2c0 8086 	blt.w	800327c <Save_EEPROM+0x6a4>
 8003170:	3b02      	subs	r3, #2
 8003172:	2b30      	cmp	r3, #48	; 0x30
 8003174:	f200 8082 	bhi.w	800327c <Save_EEPROM+0x6a4>
 8003178:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <Save_EEPROM+0x5a8>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	08003273 	.word	0x08003273
 8003184:	0800327d 	.word	0x0800327d
 8003188:	0800326d 	.word	0x0800326d
 800318c:	08003267 	.word	0x08003267
 8003190:	0800327d 	.word	0x0800327d
 8003194:	0800327d 	.word	0x0800327d
 8003198:	0800327d 	.word	0x0800327d
 800319c:	0800327d 	.word	0x0800327d
 80031a0:	08003261 	.word	0x08003261
 80031a4:	0800327d 	.word	0x0800327d
 80031a8:	0800327d 	.word	0x0800327d
 80031ac:	0800327d 	.word	0x0800327d
 80031b0:	0800327d 	.word	0x0800327d
 80031b4:	0800327d 	.word	0x0800327d
 80031b8:	0800327d 	.word	0x0800327d
 80031bc:	0800327d 	.word	0x0800327d
 80031c0:	0800327d 	.word	0x0800327d
 80031c4:	0800327d 	.word	0x0800327d
 80031c8:	0800327d 	.word	0x0800327d
 80031cc:	0800327d 	.word	0x0800327d
 80031d0:	0800327d 	.word	0x0800327d
 80031d4:	0800327d 	.word	0x0800327d
 80031d8:	0800327d 	.word	0x0800327d
 80031dc:	0800325b 	.word	0x0800325b
 80031e0:	0800327d 	.word	0x0800327d
 80031e4:	0800327d 	.word	0x0800327d
 80031e8:	0800327d 	.word	0x0800327d
 80031ec:	0800327d 	.word	0x0800327d
 80031f0:	0800327d 	.word	0x0800327d
 80031f4:	0800327d 	.word	0x0800327d
 80031f8:	0800327d 	.word	0x0800327d
 80031fc:	0800327d 	.word	0x0800327d
 8003200:	0800327d 	.word	0x0800327d
 8003204:	0800327d 	.word	0x0800327d
 8003208:	0800327d 	.word	0x0800327d
 800320c:	0800327d 	.word	0x0800327d
 8003210:	0800327d 	.word	0x0800327d
 8003214:	0800327d 	.word	0x0800327d
 8003218:	08003255 	.word	0x08003255
 800321c:	0800327d 	.word	0x0800327d
 8003220:	0800327d 	.word	0x0800327d
 8003224:	0800327d 	.word	0x0800327d
 8003228:	0800327d 	.word	0x0800327d
 800322c:	0800327d 	.word	0x0800327d
 8003230:	0800327d 	.word	0x0800327d
 8003234:	0800327d 	.word	0x0800327d
 8003238:	0800327d 	.word	0x0800327d
 800323c:	0800327d 	.word	0x0800327d
 8003240:	0800324f 	.word	0x0800324f
 8003244:	2b64      	cmp	r3, #100	; 0x64
 8003246:	d119      	bne.n	800327c <Save_EEPROM+0x6a4>
 8003248:	2301      	movs	r3, #1
 800324a:	747b      	strb	r3, [r7, #17]
 800324c:	e018      	b.n	8003280 <Save_EEPROM+0x6a8>
 800324e:	2302      	movs	r3, #2
 8003250:	747b      	strb	r3, [r7, #17]
 8003252:	e015      	b.n	8003280 <Save_EEPROM+0x6a8>
 8003254:	2303      	movs	r3, #3
 8003256:	747b      	strb	r3, [r7, #17]
 8003258:	e012      	b.n	8003280 <Save_EEPROM+0x6a8>
 800325a:	2304      	movs	r3, #4
 800325c:	747b      	strb	r3, [r7, #17]
 800325e:	e00f      	b.n	8003280 <Save_EEPROM+0x6a8>
 8003260:	2305      	movs	r3, #5
 8003262:	747b      	strb	r3, [r7, #17]
 8003264:	e00c      	b.n	8003280 <Save_EEPROM+0x6a8>
 8003266:	2306      	movs	r3, #6
 8003268:	747b      	strb	r3, [r7, #17]
 800326a:	e009      	b.n	8003280 <Save_EEPROM+0x6a8>
 800326c:	2307      	movs	r3, #7
 800326e:	747b      	strb	r3, [r7, #17]
 8003270:	e006      	b.n	8003280 <Save_EEPROM+0x6a8>
 8003272:	2308      	movs	r3, #8
 8003274:	747b      	strb	r3, [r7, #17]
 8003276:	e003      	b.n	8003280 <Save_EEPROM+0x6a8>
 8003278:	20003a7c 	.word	0x20003a7c
 800327c:	2300      	movs	r3, #0
 800327e:	747b      	strb	r3, [r7, #17]
 8003280:	bf00      	nop
	__SAVE_FREQ(buffer[6], Per_Msg[PDM_Save]);
 8003282:	4bd1      	ldr	r3, [pc, #836]	; (80035c8 <Save_EEPROM+0x9f0>)
 8003284:	899b      	ldrh	r3, [r3, #12]
 8003286:	2b32      	cmp	r3, #50	; 0x32
 8003288:	dc6a      	bgt.n	8003360 <Save_EEPROM+0x788>
 800328a:	2b02      	cmp	r3, #2
 800328c:	f2c0 8082 	blt.w	8003394 <Save_EEPROM+0x7bc>
 8003290:	3b02      	subs	r3, #2
 8003292:	2b30      	cmp	r3, #48	; 0x30
 8003294:	d87e      	bhi.n	8003394 <Save_EEPROM+0x7bc>
 8003296:	a201      	add	r2, pc, #4	; (adr r2, 800329c <Save_EEPROM+0x6c4>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	0800338f 	.word	0x0800338f
 80032a0:	08003395 	.word	0x08003395
 80032a4:	08003389 	.word	0x08003389
 80032a8:	08003383 	.word	0x08003383
 80032ac:	08003395 	.word	0x08003395
 80032b0:	08003395 	.word	0x08003395
 80032b4:	08003395 	.word	0x08003395
 80032b8:	08003395 	.word	0x08003395
 80032bc:	0800337d 	.word	0x0800337d
 80032c0:	08003395 	.word	0x08003395
 80032c4:	08003395 	.word	0x08003395
 80032c8:	08003395 	.word	0x08003395
 80032cc:	08003395 	.word	0x08003395
 80032d0:	08003395 	.word	0x08003395
 80032d4:	08003395 	.word	0x08003395
 80032d8:	08003395 	.word	0x08003395
 80032dc:	08003395 	.word	0x08003395
 80032e0:	08003395 	.word	0x08003395
 80032e4:	08003395 	.word	0x08003395
 80032e8:	08003395 	.word	0x08003395
 80032ec:	08003395 	.word	0x08003395
 80032f0:	08003395 	.word	0x08003395
 80032f4:	08003395 	.word	0x08003395
 80032f8:	08003377 	.word	0x08003377
 80032fc:	08003395 	.word	0x08003395
 8003300:	08003395 	.word	0x08003395
 8003304:	08003395 	.word	0x08003395
 8003308:	08003395 	.word	0x08003395
 800330c:	08003395 	.word	0x08003395
 8003310:	08003395 	.word	0x08003395
 8003314:	08003395 	.word	0x08003395
 8003318:	08003395 	.word	0x08003395
 800331c:	08003395 	.word	0x08003395
 8003320:	08003395 	.word	0x08003395
 8003324:	08003395 	.word	0x08003395
 8003328:	08003395 	.word	0x08003395
 800332c:	08003395 	.word	0x08003395
 8003330:	08003395 	.word	0x08003395
 8003334:	08003371 	.word	0x08003371
 8003338:	08003395 	.word	0x08003395
 800333c:	08003395 	.word	0x08003395
 8003340:	08003395 	.word	0x08003395
 8003344:	08003395 	.word	0x08003395
 8003348:	08003395 	.word	0x08003395
 800334c:	08003395 	.word	0x08003395
 8003350:	08003395 	.word	0x08003395
 8003354:	08003395 	.word	0x08003395
 8003358:	08003395 	.word	0x08003395
 800335c:	0800336b 	.word	0x0800336b
 8003360:	2b64      	cmp	r3, #100	; 0x64
 8003362:	d117      	bne.n	8003394 <Save_EEPROM+0x7bc>
 8003364:	2301      	movs	r3, #1
 8003366:	74bb      	strb	r3, [r7, #18]
 8003368:	e016      	b.n	8003398 <Save_EEPROM+0x7c0>
 800336a:	2302      	movs	r3, #2
 800336c:	74bb      	strb	r3, [r7, #18]
 800336e:	e013      	b.n	8003398 <Save_EEPROM+0x7c0>
 8003370:	2303      	movs	r3, #3
 8003372:	74bb      	strb	r3, [r7, #18]
 8003374:	e010      	b.n	8003398 <Save_EEPROM+0x7c0>
 8003376:	2304      	movs	r3, #4
 8003378:	74bb      	strb	r3, [r7, #18]
 800337a:	e00d      	b.n	8003398 <Save_EEPROM+0x7c0>
 800337c:	2305      	movs	r3, #5
 800337e:	74bb      	strb	r3, [r7, #18]
 8003380:	e00a      	b.n	8003398 <Save_EEPROM+0x7c0>
 8003382:	2306      	movs	r3, #6
 8003384:	74bb      	strb	r3, [r7, #18]
 8003386:	e007      	b.n	8003398 <Save_EEPROM+0x7c0>
 8003388:	2307      	movs	r3, #7
 800338a:	74bb      	strb	r3, [r7, #18]
 800338c:	e004      	b.n	8003398 <Save_EEPROM+0x7c0>
 800338e:	2308      	movs	r3, #8
 8003390:	74bb      	strb	r3, [r7, #18]
 8003392:	e001      	b.n	8003398 <Save_EEPROM+0x7c0>
 8003394:	2300      	movs	r3, #0
 8003396:	74bb      	strb	r3, [r7, #18]
 8003398:	bf00      	nop

	__SAVE_FREQ(buffer[7], Per_CAN[Analog_1_4]);
 800339a:	4b8c      	ldr	r3, [pc, #560]	; (80035cc <Save_EEPROM+0x9f4>)
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	2b32      	cmp	r3, #50	; 0x32
 80033a0:	dc6a      	bgt.n	8003478 <Save_EEPROM+0x8a0>
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	f2c0 8082 	blt.w	80034ac <Save_EEPROM+0x8d4>
 80033a8:	3b02      	subs	r3, #2
 80033aa:	2b30      	cmp	r3, #48	; 0x30
 80033ac:	d87e      	bhi.n	80034ac <Save_EEPROM+0x8d4>
 80033ae:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <Save_EEPROM+0x7dc>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080034a7 	.word	0x080034a7
 80033b8:	080034ad 	.word	0x080034ad
 80033bc:	080034a1 	.word	0x080034a1
 80033c0:	0800349b 	.word	0x0800349b
 80033c4:	080034ad 	.word	0x080034ad
 80033c8:	080034ad 	.word	0x080034ad
 80033cc:	080034ad 	.word	0x080034ad
 80033d0:	080034ad 	.word	0x080034ad
 80033d4:	08003495 	.word	0x08003495
 80033d8:	080034ad 	.word	0x080034ad
 80033dc:	080034ad 	.word	0x080034ad
 80033e0:	080034ad 	.word	0x080034ad
 80033e4:	080034ad 	.word	0x080034ad
 80033e8:	080034ad 	.word	0x080034ad
 80033ec:	080034ad 	.word	0x080034ad
 80033f0:	080034ad 	.word	0x080034ad
 80033f4:	080034ad 	.word	0x080034ad
 80033f8:	080034ad 	.word	0x080034ad
 80033fc:	080034ad 	.word	0x080034ad
 8003400:	080034ad 	.word	0x080034ad
 8003404:	080034ad 	.word	0x080034ad
 8003408:	080034ad 	.word	0x080034ad
 800340c:	080034ad 	.word	0x080034ad
 8003410:	0800348f 	.word	0x0800348f
 8003414:	080034ad 	.word	0x080034ad
 8003418:	080034ad 	.word	0x080034ad
 800341c:	080034ad 	.word	0x080034ad
 8003420:	080034ad 	.word	0x080034ad
 8003424:	080034ad 	.word	0x080034ad
 8003428:	080034ad 	.word	0x080034ad
 800342c:	080034ad 	.word	0x080034ad
 8003430:	080034ad 	.word	0x080034ad
 8003434:	080034ad 	.word	0x080034ad
 8003438:	080034ad 	.word	0x080034ad
 800343c:	080034ad 	.word	0x080034ad
 8003440:	080034ad 	.word	0x080034ad
 8003444:	080034ad 	.word	0x080034ad
 8003448:	080034ad 	.word	0x080034ad
 800344c:	08003489 	.word	0x08003489
 8003450:	080034ad 	.word	0x080034ad
 8003454:	080034ad 	.word	0x080034ad
 8003458:	080034ad 	.word	0x080034ad
 800345c:	080034ad 	.word	0x080034ad
 8003460:	080034ad 	.word	0x080034ad
 8003464:	080034ad 	.word	0x080034ad
 8003468:	080034ad 	.word	0x080034ad
 800346c:	080034ad 	.word	0x080034ad
 8003470:	080034ad 	.word	0x080034ad
 8003474:	08003483 	.word	0x08003483
 8003478:	2b64      	cmp	r3, #100	; 0x64
 800347a:	d117      	bne.n	80034ac <Save_EEPROM+0x8d4>
 800347c:	2301      	movs	r3, #1
 800347e:	74fb      	strb	r3, [r7, #19]
 8003480:	e016      	b.n	80034b0 <Save_EEPROM+0x8d8>
 8003482:	2302      	movs	r3, #2
 8003484:	74fb      	strb	r3, [r7, #19]
 8003486:	e013      	b.n	80034b0 <Save_EEPROM+0x8d8>
 8003488:	2303      	movs	r3, #3
 800348a:	74fb      	strb	r3, [r7, #19]
 800348c:	e010      	b.n	80034b0 <Save_EEPROM+0x8d8>
 800348e:	2304      	movs	r3, #4
 8003490:	74fb      	strb	r3, [r7, #19]
 8003492:	e00d      	b.n	80034b0 <Save_EEPROM+0x8d8>
 8003494:	2305      	movs	r3, #5
 8003496:	74fb      	strb	r3, [r7, #19]
 8003498:	e00a      	b.n	80034b0 <Save_EEPROM+0x8d8>
 800349a:	2306      	movs	r3, #6
 800349c:	74fb      	strb	r3, [r7, #19]
 800349e:	e007      	b.n	80034b0 <Save_EEPROM+0x8d8>
 80034a0:	2307      	movs	r3, #7
 80034a2:	74fb      	strb	r3, [r7, #19]
 80034a4:	e004      	b.n	80034b0 <Save_EEPROM+0x8d8>
 80034a6:	2308      	movs	r3, #8
 80034a8:	74fb      	strb	r3, [r7, #19]
 80034aa:	e001      	b.n	80034b0 <Save_EEPROM+0x8d8>
 80034ac:	2300      	movs	r3, #0
 80034ae:	74fb      	strb	r3, [r7, #19]
 80034b0:	bf00      	nop
	__SAVE_FREQ(buffer[8], Per_CAN[Analog_5_8]);
 80034b2:	4b46      	ldr	r3, [pc, #280]	; (80035cc <Save_EEPROM+0x9f4>)
 80034b4:	885b      	ldrh	r3, [r3, #2]
 80034b6:	2b32      	cmp	r3, #50	; 0x32
 80034b8:	dc6c      	bgt.n	8003594 <Save_EEPROM+0x9bc>
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	f2c0 8088 	blt.w	80035d0 <Save_EEPROM+0x9f8>
 80034c0:	3b02      	subs	r3, #2
 80034c2:	2b30      	cmp	r3, #48	; 0x30
 80034c4:	f200 8084 	bhi.w	80035d0 <Save_EEPROM+0x9f8>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <Save_EEPROM+0x8f8>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080035c3 	.word	0x080035c3
 80034d4:	080035d1 	.word	0x080035d1
 80034d8:	080035bd 	.word	0x080035bd
 80034dc:	080035b7 	.word	0x080035b7
 80034e0:	080035d1 	.word	0x080035d1
 80034e4:	080035d1 	.word	0x080035d1
 80034e8:	080035d1 	.word	0x080035d1
 80034ec:	080035d1 	.word	0x080035d1
 80034f0:	080035b1 	.word	0x080035b1
 80034f4:	080035d1 	.word	0x080035d1
 80034f8:	080035d1 	.word	0x080035d1
 80034fc:	080035d1 	.word	0x080035d1
 8003500:	080035d1 	.word	0x080035d1
 8003504:	080035d1 	.word	0x080035d1
 8003508:	080035d1 	.word	0x080035d1
 800350c:	080035d1 	.word	0x080035d1
 8003510:	080035d1 	.word	0x080035d1
 8003514:	080035d1 	.word	0x080035d1
 8003518:	080035d1 	.word	0x080035d1
 800351c:	080035d1 	.word	0x080035d1
 8003520:	080035d1 	.word	0x080035d1
 8003524:	080035d1 	.word	0x080035d1
 8003528:	080035d1 	.word	0x080035d1
 800352c:	080035ab 	.word	0x080035ab
 8003530:	080035d1 	.word	0x080035d1
 8003534:	080035d1 	.word	0x080035d1
 8003538:	080035d1 	.word	0x080035d1
 800353c:	080035d1 	.word	0x080035d1
 8003540:	080035d1 	.word	0x080035d1
 8003544:	080035d1 	.word	0x080035d1
 8003548:	080035d1 	.word	0x080035d1
 800354c:	080035d1 	.word	0x080035d1
 8003550:	080035d1 	.word	0x080035d1
 8003554:	080035d1 	.word	0x080035d1
 8003558:	080035d1 	.word	0x080035d1
 800355c:	080035d1 	.word	0x080035d1
 8003560:	080035d1 	.word	0x080035d1
 8003564:	080035d1 	.word	0x080035d1
 8003568:	080035a5 	.word	0x080035a5
 800356c:	080035d1 	.word	0x080035d1
 8003570:	080035d1 	.word	0x080035d1
 8003574:	080035d1 	.word	0x080035d1
 8003578:	080035d1 	.word	0x080035d1
 800357c:	080035d1 	.word	0x080035d1
 8003580:	080035d1 	.word	0x080035d1
 8003584:	080035d1 	.word	0x080035d1
 8003588:	080035d1 	.word	0x080035d1
 800358c:	080035d1 	.word	0x080035d1
 8003590:	0800359f 	.word	0x0800359f
 8003594:	2b64      	cmp	r3, #100	; 0x64
 8003596:	d11b      	bne.n	80035d0 <Save_EEPROM+0x9f8>
 8003598:	2301      	movs	r3, #1
 800359a:	753b      	strb	r3, [r7, #20]
 800359c:	e01a      	b.n	80035d4 <Save_EEPROM+0x9fc>
 800359e:	2302      	movs	r3, #2
 80035a0:	753b      	strb	r3, [r7, #20]
 80035a2:	e017      	b.n	80035d4 <Save_EEPROM+0x9fc>
 80035a4:	2303      	movs	r3, #3
 80035a6:	753b      	strb	r3, [r7, #20]
 80035a8:	e014      	b.n	80035d4 <Save_EEPROM+0x9fc>
 80035aa:	2304      	movs	r3, #4
 80035ac:	753b      	strb	r3, [r7, #20]
 80035ae:	e011      	b.n	80035d4 <Save_EEPROM+0x9fc>
 80035b0:	2305      	movs	r3, #5
 80035b2:	753b      	strb	r3, [r7, #20]
 80035b4:	e00e      	b.n	80035d4 <Save_EEPROM+0x9fc>
 80035b6:	2306      	movs	r3, #6
 80035b8:	753b      	strb	r3, [r7, #20]
 80035ba:	e00b      	b.n	80035d4 <Save_EEPROM+0x9fc>
 80035bc:	2307      	movs	r3, #7
 80035be:	753b      	strb	r3, [r7, #20]
 80035c0:	e008      	b.n	80035d4 <Save_EEPROM+0x9fc>
 80035c2:	2308      	movs	r3, #8
 80035c4:	753b      	strb	r3, [r7, #20]
 80035c6:	e005      	b.n	80035d4 <Save_EEPROM+0x9fc>
 80035c8:	20003a7c 	.word	0x20003a7c
 80035cc:	2000051c 	.word	0x2000051c
 80035d0:	2300      	movs	r3, #0
 80035d2:	753b      	strb	r3, [r7, #20]
 80035d4:	bf00      	nop
	__SAVE_FREQ(buffer[9], Per_CAN[Analog_9_12]);
 80035d6:	4b94      	ldr	r3, [pc, #592]	; (8003828 <Save_EEPROM+0xc50>)
 80035d8:	889b      	ldrh	r3, [r3, #4]
 80035da:	2b32      	cmp	r3, #50	; 0x32
 80035dc:	dc6a      	bgt.n	80036b4 <Save_EEPROM+0xadc>
 80035de:	2b02      	cmp	r3, #2
 80035e0:	f2c0 8082 	blt.w	80036e8 <Save_EEPROM+0xb10>
 80035e4:	3b02      	subs	r3, #2
 80035e6:	2b30      	cmp	r3, #48	; 0x30
 80035e8:	d87e      	bhi.n	80036e8 <Save_EEPROM+0xb10>
 80035ea:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <Save_EEPROM+0xa18>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	080036e3 	.word	0x080036e3
 80035f4:	080036e9 	.word	0x080036e9
 80035f8:	080036dd 	.word	0x080036dd
 80035fc:	080036d7 	.word	0x080036d7
 8003600:	080036e9 	.word	0x080036e9
 8003604:	080036e9 	.word	0x080036e9
 8003608:	080036e9 	.word	0x080036e9
 800360c:	080036e9 	.word	0x080036e9
 8003610:	080036d1 	.word	0x080036d1
 8003614:	080036e9 	.word	0x080036e9
 8003618:	080036e9 	.word	0x080036e9
 800361c:	080036e9 	.word	0x080036e9
 8003620:	080036e9 	.word	0x080036e9
 8003624:	080036e9 	.word	0x080036e9
 8003628:	080036e9 	.word	0x080036e9
 800362c:	080036e9 	.word	0x080036e9
 8003630:	080036e9 	.word	0x080036e9
 8003634:	080036e9 	.word	0x080036e9
 8003638:	080036e9 	.word	0x080036e9
 800363c:	080036e9 	.word	0x080036e9
 8003640:	080036e9 	.word	0x080036e9
 8003644:	080036e9 	.word	0x080036e9
 8003648:	080036e9 	.word	0x080036e9
 800364c:	080036cb 	.word	0x080036cb
 8003650:	080036e9 	.word	0x080036e9
 8003654:	080036e9 	.word	0x080036e9
 8003658:	080036e9 	.word	0x080036e9
 800365c:	080036e9 	.word	0x080036e9
 8003660:	080036e9 	.word	0x080036e9
 8003664:	080036e9 	.word	0x080036e9
 8003668:	080036e9 	.word	0x080036e9
 800366c:	080036e9 	.word	0x080036e9
 8003670:	080036e9 	.word	0x080036e9
 8003674:	080036e9 	.word	0x080036e9
 8003678:	080036e9 	.word	0x080036e9
 800367c:	080036e9 	.word	0x080036e9
 8003680:	080036e9 	.word	0x080036e9
 8003684:	080036e9 	.word	0x080036e9
 8003688:	080036c5 	.word	0x080036c5
 800368c:	080036e9 	.word	0x080036e9
 8003690:	080036e9 	.word	0x080036e9
 8003694:	080036e9 	.word	0x080036e9
 8003698:	080036e9 	.word	0x080036e9
 800369c:	080036e9 	.word	0x080036e9
 80036a0:	080036e9 	.word	0x080036e9
 80036a4:	080036e9 	.word	0x080036e9
 80036a8:	080036e9 	.word	0x080036e9
 80036ac:	080036e9 	.word	0x080036e9
 80036b0:	080036bf 	.word	0x080036bf
 80036b4:	2b64      	cmp	r3, #100	; 0x64
 80036b6:	d117      	bne.n	80036e8 <Save_EEPROM+0xb10>
 80036b8:	2301      	movs	r3, #1
 80036ba:	757b      	strb	r3, [r7, #21]
 80036bc:	e016      	b.n	80036ec <Save_EEPROM+0xb14>
 80036be:	2302      	movs	r3, #2
 80036c0:	757b      	strb	r3, [r7, #21]
 80036c2:	e013      	b.n	80036ec <Save_EEPROM+0xb14>
 80036c4:	2303      	movs	r3, #3
 80036c6:	757b      	strb	r3, [r7, #21]
 80036c8:	e010      	b.n	80036ec <Save_EEPROM+0xb14>
 80036ca:	2304      	movs	r3, #4
 80036cc:	757b      	strb	r3, [r7, #21]
 80036ce:	e00d      	b.n	80036ec <Save_EEPROM+0xb14>
 80036d0:	2305      	movs	r3, #5
 80036d2:	757b      	strb	r3, [r7, #21]
 80036d4:	e00a      	b.n	80036ec <Save_EEPROM+0xb14>
 80036d6:	2306      	movs	r3, #6
 80036d8:	757b      	strb	r3, [r7, #21]
 80036da:	e007      	b.n	80036ec <Save_EEPROM+0xb14>
 80036dc:	2307      	movs	r3, #7
 80036de:	757b      	strb	r3, [r7, #21]
 80036e0:	e004      	b.n	80036ec <Save_EEPROM+0xb14>
 80036e2:	2308      	movs	r3, #8
 80036e4:	757b      	strb	r3, [r7, #21]
 80036e6:	e001      	b.n	80036ec <Save_EEPROM+0xb14>
 80036e8:	2300      	movs	r3, #0
 80036ea:	757b      	strb	r3, [r7, #21]
 80036ec:	bf00      	nop
	__SAVE_FREQ(buffer[10], Per_CAN[RTC_Msg]);
 80036ee:	4b4e      	ldr	r3, [pc, #312]	; (8003828 <Save_EEPROM+0xc50>)
 80036f0:	88db      	ldrh	r3, [r3, #6]
 80036f2:	2b32      	cmp	r3, #50	; 0x32
 80036f4:	dc6a      	bgt.n	80037cc <Save_EEPROM+0xbf4>
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	f2c0 8082 	blt.w	8003800 <Save_EEPROM+0xc28>
 80036fc:	3b02      	subs	r3, #2
 80036fe:	2b30      	cmp	r3, #48	; 0x30
 8003700:	d87e      	bhi.n	8003800 <Save_EEPROM+0xc28>
 8003702:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <Save_EEPROM+0xb30>)
 8003704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003708:	080037fb 	.word	0x080037fb
 800370c:	08003801 	.word	0x08003801
 8003710:	080037f5 	.word	0x080037f5
 8003714:	080037ef 	.word	0x080037ef
 8003718:	08003801 	.word	0x08003801
 800371c:	08003801 	.word	0x08003801
 8003720:	08003801 	.word	0x08003801
 8003724:	08003801 	.word	0x08003801
 8003728:	080037e9 	.word	0x080037e9
 800372c:	08003801 	.word	0x08003801
 8003730:	08003801 	.word	0x08003801
 8003734:	08003801 	.word	0x08003801
 8003738:	08003801 	.word	0x08003801
 800373c:	08003801 	.word	0x08003801
 8003740:	08003801 	.word	0x08003801
 8003744:	08003801 	.word	0x08003801
 8003748:	08003801 	.word	0x08003801
 800374c:	08003801 	.word	0x08003801
 8003750:	08003801 	.word	0x08003801
 8003754:	08003801 	.word	0x08003801
 8003758:	08003801 	.word	0x08003801
 800375c:	08003801 	.word	0x08003801
 8003760:	08003801 	.word	0x08003801
 8003764:	080037e3 	.word	0x080037e3
 8003768:	08003801 	.word	0x08003801
 800376c:	08003801 	.word	0x08003801
 8003770:	08003801 	.word	0x08003801
 8003774:	08003801 	.word	0x08003801
 8003778:	08003801 	.word	0x08003801
 800377c:	08003801 	.word	0x08003801
 8003780:	08003801 	.word	0x08003801
 8003784:	08003801 	.word	0x08003801
 8003788:	08003801 	.word	0x08003801
 800378c:	08003801 	.word	0x08003801
 8003790:	08003801 	.word	0x08003801
 8003794:	08003801 	.word	0x08003801
 8003798:	08003801 	.word	0x08003801
 800379c:	08003801 	.word	0x08003801
 80037a0:	080037dd 	.word	0x080037dd
 80037a4:	08003801 	.word	0x08003801
 80037a8:	08003801 	.word	0x08003801
 80037ac:	08003801 	.word	0x08003801
 80037b0:	08003801 	.word	0x08003801
 80037b4:	08003801 	.word	0x08003801
 80037b8:	08003801 	.word	0x08003801
 80037bc:	08003801 	.word	0x08003801
 80037c0:	08003801 	.word	0x08003801
 80037c4:	08003801 	.word	0x08003801
 80037c8:	080037d7 	.word	0x080037d7
 80037cc:	2b64      	cmp	r3, #100	; 0x64
 80037ce:	d117      	bne.n	8003800 <Save_EEPROM+0xc28>
 80037d0:	2301      	movs	r3, #1
 80037d2:	75bb      	strb	r3, [r7, #22]
 80037d4:	e016      	b.n	8003804 <Save_EEPROM+0xc2c>
 80037d6:	2302      	movs	r3, #2
 80037d8:	75bb      	strb	r3, [r7, #22]
 80037da:	e013      	b.n	8003804 <Save_EEPROM+0xc2c>
 80037dc:	2303      	movs	r3, #3
 80037de:	75bb      	strb	r3, [r7, #22]
 80037e0:	e010      	b.n	8003804 <Save_EEPROM+0xc2c>
 80037e2:	2304      	movs	r3, #4
 80037e4:	75bb      	strb	r3, [r7, #22]
 80037e6:	e00d      	b.n	8003804 <Save_EEPROM+0xc2c>
 80037e8:	2305      	movs	r3, #5
 80037ea:	75bb      	strb	r3, [r7, #22]
 80037ec:	e00a      	b.n	8003804 <Save_EEPROM+0xc2c>
 80037ee:	2306      	movs	r3, #6
 80037f0:	75bb      	strb	r3, [r7, #22]
 80037f2:	e007      	b.n	8003804 <Save_EEPROM+0xc2c>
 80037f4:	2307      	movs	r3, #7
 80037f6:	75bb      	strb	r3, [r7, #22]
 80037f8:	e004      	b.n	8003804 <Save_EEPROM+0xc2c>
 80037fa:	2308      	movs	r3, #8
 80037fc:	75bb      	strb	r3, [r7, #22]
 80037fe:	e001      	b.n	8003804 <Save_EEPROM+0xc2c>
 8003800:	2300      	movs	r3, #0
 8003802:	75bb      	strb	r3, [r7, #22]
 8003804:	bf00      	nop

	buffer[11] = Input_Config;
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <Save_EEPROM+0xc54>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	75fb      	strb	r3, [r7, #23]

	return HAL_I2C_Master_Transmit(hi2c, 0xA0, buffer, EEPROM_BUFFER_SIZE, 5);
 800380c:	f107 020c 	add.w	r2, r7, #12
 8003810:	2305      	movs	r3, #5
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	2364      	movs	r3, #100	; 0x64
 8003816:	21a0      	movs	r1, #160	; 0xa0
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f003 f9c9 	bl	8006bb0 <HAL_I2C_Master_Transmit>
 800381e:	4603      	mov	r3, r0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3770      	adds	r7, #112	; 0x70
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	2000051c 	.word	0x2000051c
 800382c:	20000518 	.word	0x20000518

08003830 <Principal_Receive_Config>:

	Principal_CAN_Start(hcan);
}

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
	switch(data[0])
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <Principal_Receive_Config+0x1a>
 8003842:	2b01      	cmp	r3, #1
 8003844:	f000 81b5 	beq.w	8003bb2 <Principal_Receive_Config+0x382>
 8003848:	e2af      	b.n	8003daa <Principal_Receive_Config+0x57a>
	{
		case 0:
			__LOAD_FREQ(data[1], Per_Msg[Analog_1_4]);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	3b01      	subs	r3, #1
 8003852:	2b07      	cmp	r3, #7
 8003854:	d832      	bhi.n	80038bc <Principal_Receive_Config+0x8c>
 8003856:	a201      	add	r2, pc, #4	; (adr r2, 800385c <Principal_Receive_Config+0x2c>)
 8003858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385c:	0800387d 	.word	0x0800387d
 8003860:	08003885 	.word	0x08003885
 8003864:	0800388d 	.word	0x0800388d
 8003868:	08003895 	.word	0x08003895
 800386c:	0800389d 	.word	0x0800389d
 8003870:	080038a5 	.word	0x080038a5
 8003874:	080038ad 	.word	0x080038ad
 8003878:	080038b5 	.word	0x080038b5
 800387c:	4ba6      	ldr	r3, [pc, #664]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 800387e:	2264      	movs	r2, #100	; 0x64
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	e01e      	b.n	80038c2 <Principal_Receive_Config+0x92>
 8003884:	4ba4      	ldr	r3, [pc, #656]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003886:	2232      	movs	r2, #50	; 0x32
 8003888:	801a      	strh	r2, [r3, #0]
 800388a:	e01a      	b.n	80038c2 <Principal_Receive_Config+0x92>
 800388c:	4ba2      	ldr	r3, [pc, #648]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 800388e:	2228      	movs	r2, #40	; 0x28
 8003890:	801a      	strh	r2, [r3, #0]
 8003892:	e016      	b.n	80038c2 <Principal_Receive_Config+0x92>
 8003894:	4ba0      	ldr	r3, [pc, #640]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003896:	2219      	movs	r2, #25
 8003898:	801a      	strh	r2, [r3, #0]
 800389a:	e012      	b.n	80038c2 <Principal_Receive_Config+0x92>
 800389c:	4b9e      	ldr	r3, [pc, #632]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 800389e:	220a      	movs	r2, #10
 80038a0:	801a      	strh	r2, [r3, #0]
 80038a2:	e00e      	b.n	80038c2 <Principal_Receive_Config+0x92>
 80038a4:	4b9c      	ldr	r3, [pc, #624]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 80038a6:	2205      	movs	r2, #5
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	e00a      	b.n	80038c2 <Principal_Receive_Config+0x92>
 80038ac:	4b9a      	ldr	r3, [pc, #616]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 80038ae:	2204      	movs	r2, #4
 80038b0:	801a      	strh	r2, [r3, #0]
 80038b2:	e006      	b.n	80038c2 <Principal_Receive_Config+0x92>
 80038b4:	4b98      	ldr	r3, [pc, #608]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 80038b6:	2202      	movs	r2, #2
 80038b8:	801a      	strh	r2, [r3, #0]
 80038ba:	e002      	b.n	80038c2 <Principal_Receive_Config+0x92>
 80038bc:	4b96      	ldr	r3, [pc, #600]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 80038be:	2200      	movs	r2, #0
 80038c0:	801a      	strh	r2, [r3, #0]
 80038c2:	bf00      	nop
			__LOAD_FREQ(data[2], Per_Msg[Analog_5_8]);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	3302      	adds	r3, #2
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	2b07      	cmp	r3, #7
 80038ce:	d833      	bhi.n	8003938 <Principal_Receive_Config+0x108>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <Principal_Receive_Config+0xa8>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	080038f9 	.word	0x080038f9
 80038dc:	08003901 	.word	0x08003901
 80038e0:	08003909 	.word	0x08003909
 80038e4:	08003911 	.word	0x08003911
 80038e8:	08003919 	.word	0x08003919
 80038ec:	08003921 	.word	0x08003921
 80038f0:	08003929 	.word	0x08003929
 80038f4:	08003931 	.word	0x08003931
 80038f8:	4b87      	ldr	r3, [pc, #540]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 80038fa:	2264      	movs	r2, #100	; 0x64
 80038fc:	805a      	strh	r2, [r3, #2]
 80038fe:	e01e      	b.n	800393e <Principal_Receive_Config+0x10e>
 8003900:	4b85      	ldr	r3, [pc, #532]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003902:	2232      	movs	r2, #50	; 0x32
 8003904:	805a      	strh	r2, [r3, #2]
 8003906:	e01a      	b.n	800393e <Principal_Receive_Config+0x10e>
 8003908:	4b83      	ldr	r3, [pc, #524]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 800390a:	2228      	movs	r2, #40	; 0x28
 800390c:	805a      	strh	r2, [r3, #2]
 800390e:	e016      	b.n	800393e <Principal_Receive_Config+0x10e>
 8003910:	4b81      	ldr	r3, [pc, #516]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003912:	2219      	movs	r2, #25
 8003914:	805a      	strh	r2, [r3, #2]
 8003916:	e012      	b.n	800393e <Principal_Receive_Config+0x10e>
 8003918:	4b7f      	ldr	r3, [pc, #508]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 800391a:	220a      	movs	r2, #10
 800391c:	805a      	strh	r2, [r3, #2]
 800391e:	e00e      	b.n	800393e <Principal_Receive_Config+0x10e>
 8003920:	4b7d      	ldr	r3, [pc, #500]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003922:	2205      	movs	r2, #5
 8003924:	805a      	strh	r2, [r3, #2]
 8003926:	e00a      	b.n	800393e <Principal_Receive_Config+0x10e>
 8003928:	4b7b      	ldr	r3, [pc, #492]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 800392a:	2204      	movs	r2, #4
 800392c:	805a      	strh	r2, [r3, #2]
 800392e:	e006      	b.n	800393e <Principal_Receive_Config+0x10e>
 8003930:	4b79      	ldr	r3, [pc, #484]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003932:	2202      	movs	r2, #2
 8003934:	805a      	strh	r2, [r3, #2]
 8003936:	e002      	b.n	800393e <Principal_Receive_Config+0x10e>
 8003938:	4b77      	ldr	r3, [pc, #476]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 800393a:	2200      	movs	r2, #0
 800393c:	805a      	strh	r2, [r3, #2]
 800393e:	bf00      	nop
			__LOAD_FREQ(data[3], Per_Msg[Analog_9_12]);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	3303      	adds	r3, #3
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	3b01      	subs	r3, #1
 8003948:	2b07      	cmp	r3, #7
 800394a:	d833      	bhi.n	80039b4 <Principal_Receive_Config+0x184>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <Principal_Receive_Config+0x124>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003975 	.word	0x08003975
 8003958:	0800397d 	.word	0x0800397d
 800395c:	08003985 	.word	0x08003985
 8003960:	0800398d 	.word	0x0800398d
 8003964:	08003995 	.word	0x08003995
 8003968:	0800399d 	.word	0x0800399d
 800396c:	080039a5 	.word	0x080039a5
 8003970:	080039ad 	.word	0x080039ad
 8003974:	4b68      	ldr	r3, [pc, #416]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003976:	2264      	movs	r2, #100	; 0x64
 8003978:	809a      	strh	r2, [r3, #4]
 800397a:	e01e      	b.n	80039ba <Principal_Receive_Config+0x18a>
 800397c:	4b66      	ldr	r3, [pc, #408]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 800397e:	2232      	movs	r2, #50	; 0x32
 8003980:	809a      	strh	r2, [r3, #4]
 8003982:	e01a      	b.n	80039ba <Principal_Receive_Config+0x18a>
 8003984:	4b64      	ldr	r3, [pc, #400]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003986:	2228      	movs	r2, #40	; 0x28
 8003988:	809a      	strh	r2, [r3, #4]
 800398a:	e016      	b.n	80039ba <Principal_Receive_Config+0x18a>
 800398c:	4b62      	ldr	r3, [pc, #392]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 800398e:	2219      	movs	r2, #25
 8003990:	809a      	strh	r2, [r3, #4]
 8003992:	e012      	b.n	80039ba <Principal_Receive_Config+0x18a>
 8003994:	4b60      	ldr	r3, [pc, #384]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003996:	220a      	movs	r2, #10
 8003998:	809a      	strh	r2, [r3, #4]
 800399a:	e00e      	b.n	80039ba <Principal_Receive_Config+0x18a>
 800399c:	4b5e      	ldr	r3, [pc, #376]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 800399e:	2205      	movs	r2, #5
 80039a0:	809a      	strh	r2, [r3, #4]
 80039a2:	e00a      	b.n	80039ba <Principal_Receive_Config+0x18a>
 80039a4:	4b5c      	ldr	r3, [pc, #368]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 80039a6:	2204      	movs	r2, #4
 80039a8:	809a      	strh	r2, [r3, #4]
 80039aa:	e006      	b.n	80039ba <Principal_Receive_Config+0x18a>
 80039ac:	4b5a      	ldr	r3, [pc, #360]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 80039ae:	2202      	movs	r2, #2
 80039b0:	809a      	strh	r2, [r3, #4]
 80039b2:	e002      	b.n	80039ba <Principal_Receive_Config+0x18a>
 80039b4:	4b58      	ldr	r3, [pc, #352]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	809a      	strh	r2, [r3, #4]
 80039ba:	bf00      	nop
			__LOAD_FREQ(data[4], Per_Msg[RTC_Msg]);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	3304      	adds	r3, #4
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	2b07      	cmp	r3, #7
 80039c6:	d833      	bhi.n	8003a30 <Principal_Receive_Config+0x200>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <Principal_Receive_Config+0x1a0>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039f1 	.word	0x080039f1
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	08003a01 	.word	0x08003a01
 80039dc:	08003a09 	.word	0x08003a09
 80039e0:	08003a11 	.word	0x08003a11
 80039e4:	08003a19 	.word	0x08003a19
 80039e8:	08003a21 	.word	0x08003a21
 80039ec:	08003a29 	.word	0x08003a29
 80039f0:	4b49      	ldr	r3, [pc, #292]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 80039f2:	2264      	movs	r2, #100	; 0x64
 80039f4:	80da      	strh	r2, [r3, #6]
 80039f6:	e01e      	b.n	8003a36 <Principal_Receive_Config+0x206>
 80039f8:	4b47      	ldr	r3, [pc, #284]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 80039fa:	2232      	movs	r2, #50	; 0x32
 80039fc:	80da      	strh	r2, [r3, #6]
 80039fe:	e01a      	b.n	8003a36 <Principal_Receive_Config+0x206>
 8003a00:	4b45      	ldr	r3, [pc, #276]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a02:	2228      	movs	r2, #40	; 0x28
 8003a04:	80da      	strh	r2, [r3, #6]
 8003a06:	e016      	b.n	8003a36 <Principal_Receive_Config+0x206>
 8003a08:	4b43      	ldr	r3, [pc, #268]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a0a:	2219      	movs	r2, #25
 8003a0c:	80da      	strh	r2, [r3, #6]
 8003a0e:	e012      	b.n	8003a36 <Principal_Receive_Config+0x206>
 8003a10:	4b41      	ldr	r3, [pc, #260]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a12:	220a      	movs	r2, #10
 8003a14:	80da      	strh	r2, [r3, #6]
 8003a16:	e00e      	b.n	8003a36 <Principal_Receive_Config+0x206>
 8003a18:	4b3f      	ldr	r3, [pc, #252]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a1a:	2205      	movs	r2, #5
 8003a1c:	80da      	strh	r2, [r3, #6]
 8003a1e:	e00a      	b.n	8003a36 <Principal_Receive_Config+0x206>
 8003a20:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a22:	2204      	movs	r2, #4
 8003a24:	80da      	strh	r2, [r3, #6]
 8003a26:	e006      	b.n	8003a36 <Principal_Receive_Config+0x206>
 8003a28:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	80da      	strh	r2, [r3, #6]
 8003a2e:	e002      	b.n	8003a36 <Principal_Receive_Config+0x206>
 8003a30:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	80da      	strh	r2, [r3, #6]
 8003a36:	bf00      	nop
			__LOAD_FREQ(data[5], Per_Msg[Verify_Msg]);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	3305      	adds	r3, #5
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	2b07      	cmp	r3, #7
 8003a42:	d833      	bhi.n	8003aac <Principal_Receive_Config+0x27c>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <Principal_Receive_Config+0x21c>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a6d 	.word	0x08003a6d
 8003a50:	08003a75 	.word	0x08003a75
 8003a54:	08003a7d 	.word	0x08003a7d
 8003a58:	08003a85 	.word	0x08003a85
 8003a5c:	08003a8d 	.word	0x08003a8d
 8003a60:	08003a95 	.word	0x08003a95
 8003a64:	08003a9d 	.word	0x08003a9d
 8003a68:	08003aa5 	.word	0x08003aa5
 8003a6c:	4b2a      	ldr	r3, [pc, #168]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a6e:	2264      	movs	r2, #100	; 0x64
 8003a70:	811a      	strh	r2, [r3, #8]
 8003a72:	e01e      	b.n	8003ab2 <Principal_Receive_Config+0x282>
 8003a74:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a76:	2232      	movs	r2, #50	; 0x32
 8003a78:	811a      	strh	r2, [r3, #8]
 8003a7a:	e01a      	b.n	8003ab2 <Principal_Receive_Config+0x282>
 8003a7c:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a7e:	2228      	movs	r2, #40	; 0x28
 8003a80:	811a      	strh	r2, [r3, #8]
 8003a82:	e016      	b.n	8003ab2 <Principal_Receive_Config+0x282>
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a86:	2219      	movs	r2, #25
 8003a88:	811a      	strh	r2, [r3, #8]
 8003a8a:	e012      	b.n	8003ab2 <Principal_Receive_Config+0x282>
 8003a8c:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a8e:	220a      	movs	r2, #10
 8003a90:	811a      	strh	r2, [r3, #8]
 8003a92:	e00e      	b.n	8003ab2 <Principal_Receive_Config+0x282>
 8003a94:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a96:	2205      	movs	r2, #5
 8003a98:	811a      	strh	r2, [r3, #8]
 8003a9a:	e00a      	b.n	8003ab2 <Principal_Receive_Config+0x282>
 8003a9c:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	811a      	strh	r2, [r3, #8]
 8003aa2:	e006      	b.n	8003ab2 <Principal_Receive_Config+0x282>
 8003aa4:	4b1c      	ldr	r3, [pc, #112]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	811a      	strh	r2, [r3, #8]
 8003aaa:	e002      	b.n	8003ab2 <Principal_Receive_Config+0x282>
 8003aac:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	811a      	strh	r2, [r3, #8]
 8003ab2:	bf00      	nop
			__LOAD_FREQ(data[6], Per_Msg[ECU_Save]);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	3306      	adds	r3, #6
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	2b07      	cmp	r3, #7
 8003abe:	d835      	bhi.n	8003b2c <Principal_Receive_Config+0x2fc>
 8003ac0:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <Principal_Receive_Config+0x298>)
 8003ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac6:	bf00      	nop
 8003ac8:	08003ae9 	.word	0x08003ae9
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003af9 	.word	0x08003af9
 8003ad4:	08003b01 	.word	0x08003b01
 8003ad8:	08003b09 	.word	0x08003b09
 8003adc:	08003b11 	.word	0x08003b11
 8003ae0:	08003b1d 	.word	0x08003b1d
 8003ae4:	08003b25 	.word	0x08003b25
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003aea:	2264      	movs	r2, #100	; 0x64
 8003aec:	815a      	strh	r2, [r3, #10]
 8003aee:	e020      	b.n	8003b32 <Principal_Receive_Config+0x302>
 8003af0:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003af2:	2232      	movs	r2, #50	; 0x32
 8003af4:	815a      	strh	r2, [r3, #10]
 8003af6:	e01c      	b.n	8003b32 <Principal_Receive_Config+0x302>
 8003af8:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003afa:	2228      	movs	r2, #40	; 0x28
 8003afc:	815a      	strh	r2, [r3, #10]
 8003afe:	e018      	b.n	8003b32 <Principal_Receive_Config+0x302>
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003b02:	2219      	movs	r2, #25
 8003b04:	815a      	strh	r2, [r3, #10]
 8003b06:	e014      	b.n	8003b32 <Principal_Receive_Config+0x302>
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003b0a:	220a      	movs	r2, #10
 8003b0c:	815a      	strh	r2, [r3, #10]
 8003b0e:	e010      	b.n	8003b32 <Principal_Receive_Config+0x302>
 8003b10:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <Principal_Receive_Config+0x2e8>)
 8003b12:	2205      	movs	r2, #5
 8003b14:	815a      	strh	r2, [r3, #10]
 8003b16:	e00c      	b.n	8003b32 <Principal_Receive_Config+0x302>
 8003b18:	20003a7c 	.word	0x20003a7c
 8003b1c:	4ba8      	ldr	r3, [pc, #672]	; (8003dc0 <Principal_Receive_Config+0x590>)
 8003b1e:	2204      	movs	r2, #4
 8003b20:	815a      	strh	r2, [r3, #10]
 8003b22:	e006      	b.n	8003b32 <Principal_Receive_Config+0x302>
 8003b24:	4ba6      	ldr	r3, [pc, #664]	; (8003dc0 <Principal_Receive_Config+0x590>)
 8003b26:	2202      	movs	r2, #2
 8003b28:	815a      	strh	r2, [r3, #10]
 8003b2a:	e002      	b.n	8003b32 <Principal_Receive_Config+0x302>
 8003b2c:	4ba4      	ldr	r3, [pc, #656]	; (8003dc0 <Principal_Receive_Config+0x590>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	815a      	strh	r2, [r3, #10]
 8003b32:	bf00      	nop
			__LOAD_FREQ(data[7], Per_Msg[PDM_Save]);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	3307      	adds	r3, #7
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	2b07      	cmp	r3, #7
 8003b3e:	d833      	bhi.n	8003ba8 <Principal_Receive_Config+0x378>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <Principal_Receive_Config+0x318>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b69 	.word	0x08003b69
 8003b4c:	08003b71 	.word	0x08003b71
 8003b50:	08003b79 	.word	0x08003b79
 8003b54:	08003b81 	.word	0x08003b81
 8003b58:	08003b89 	.word	0x08003b89
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003b99 	.word	0x08003b99
 8003b64:	08003ba1 	.word	0x08003ba1
 8003b68:	4b95      	ldr	r3, [pc, #596]	; (8003dc0 <Principal_Receive_Config+0x590>)
 8003b6a:	2264      	movs	r2, #100	; 0x64
 8003b6c:	819a      	strh	r2, [r3, #12]
 8003b6e:	e01e      	b.n	8003bae <Principal_Receive_Config+0x37e>
 8003b70:	4b93      	ldr	r3, [pc, #588]	; (8003dc0 <Principal_Receive_Config+0x590>)
 8003b72:	2232      	movs	r2, #50	; 0x32
 8003b74:	819a      	strh	r2, [r3, #12]
 8003b76:	e01a      	b.n	8003bae <Principal_Receive_Config+0x37e>
 8003b78:	4b91      	ldr	r3, [pc, #580]	; (8003dc0 <Principal_Receive_Config+0x590>)
 8003b7a:	2228      	movs	r2, #40	; 0x28
 8003b7c:	819a      	strh	r2, [r3, #12]
 8003b7e:	e016      	b.n	8003bae <Principal_Receive_Config+0x37e>
 8003b80:	4b8f      	ldr	r3, [pc, #572]	; (8003dc0 <Principal_Receive_Config+0x590>)
 8003b82:	2219      	movs	r2, #25
 8003b84:	819a      	strh	r2, [r3, #12]
 8003b86:	e012      	b.n	8003bae <Principal_Receive_Config+0x37e>
 8003b88:	4b8d      	ldr	r3, [pc, #564]	; (8003dc0 <Principal_Receive_Config+0x590>)
 8003b8a:	220a      	movs	r2, #10
 8003b8c:	819a      	strh	r2, [r3, #12]
 8003b8e:	e00e      	b.n	8003bae <Principal_Receive_Config+0x37e>
 8003b90:	4b8b      	ldr	r3, [pc, #556]	; (8003dc0 <Principal_Receive_Config+0x590>)
 8003b92:	2205      	movs	r2, #5
 8003b94:	819a      	strh	r2, [r3, #12]
 8003b96:	e00a      	b.n	8003bae <Principal_Receive_Config+0x37e>
 8003b98:	4b89      	ldr	r3, [pc, #548]	; (8003dc0 <Principal_Receive_Config+0x590>)
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	819a      	strh	r2, [r3, #12]
 8003b9e:	e006      	b.n	8003bae <Principal_Receive_Config+0x37e>
 8003ba0:	4b87      	ldr	r3, [pc, #540]	; (8003dc0 <Principal_Receive_Config+0x590>)
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	819a      	strh	r2, [r3, #12]
 8003ba6:	e002      	b.n	8003bae <Principal_Receive_Config+0x37e>
 8003ba8:	4b85      	ldr	r3, [pc, #532]	; (8003dc0 <Principal_Receive_Config+0x590>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	819a      	strh	r2, [r3, #12]
 8003bae:	bf00      	nop
			break;
 8003bb0:	e0fd      	b.n	8003dae <Principal_Receive_Config+0x57e>

		case 1:
			__LOAD_FREQ(data[1], Per_CAN[Analog_1_4]);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	2b07      	cmp	r3, #7
 8003bbc:	d832      	bhi.n	8003c24 <Principal_Receive_Config+0x3f4>
 8003bbe:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <Principal_Receive_Config+0x394>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003be5 	.word	0x08003be5
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003bf5 	.word	0x08003bf5
 8003bd0:	08003bfd 	.word	0x08003bfd
 8003bd4:	08003c05 	.word	0x08003c05
 8003bd8:	08003c0d 	.word	0x08003c0d
 8003bdc:	08003c15 	.word	0x08003c15
 8003be0:	08003c1d 	.word	0x08003c1d
 8003be4:	4b77      	ldr	r3, [pc, #476]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003be6:	2264      	movs	r2, #100	; 0x64
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	e01e      	b.n	8003c2a <Principal_Receive_Config+0x3fa>
 8003bec:	4b75      	ldr	r3, [pc, #468]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003bee:	2232      	movs	r2, #50	; 0x32
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	e01a      	b.n	8003c2a <Principal_Receive_Config+0x3fa>
 8003bf4:	4b73      	ldr	r3, [pc, #460]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003bf6:	2228      	movs	r2, #40	; 0x28
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	e016      	b.n	8003c2a <Principal_Receive_Config+0x3fa>
 8003bfc:	4b71      	ldr	r3, [pc, #452]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003bfe:	2219      	movs	r2, #25
 8003c00:	801a      	strh	r2, [r3, #0]
 8003c02:	e012      	b.n	8003c2a <Principal_Receive_Config+0x3fa>
 8003c04:	4b6f      	ldr	r3, [pc, #444]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c06:	220a      	movs	r2, #10
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	e00e      	b.n	8003c2a <Principal_Receive_Config+0x3fa>
 8003c0c:	4b6d      	ldr	r3, [pc, #436]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c0e:	2205      	movs	r2, #5
 8003c10:	801a      	strh	r2, [r3, #0]
 8003c12:	e00a      	b.n	8003c2a <Principal_Receive_Config+0x3fa>
 8003c14:	4b6b      	ldr	r3, [pc, #428]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c16:	2204      	movs	r2, #4
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	e006      	b.n	8003c2a <Principal_Receive_Config+0x3fa>
 8003c1c:	4b69      	ldr	r3, [pc, #420]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c1e:	2202      	movs	r2, #2
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e002      	b.n	8003c2a <Principal_Receive_Config+0x3fa>
 8003c24:	4b67      	ldr	r3, [pc, #412]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	801a      	strh	r2, [r3, #0]
 8003c2a:	bf00      	nop
			__LOAD_FREQ(data[2], Per_CAN[Analog_5_8]);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	3302      	adds	r3, #2
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	2b07      	cmp	r3, #7
 8003c36:	d833      	bhi.n	8003ca0 <Principal_Receive_Config+0x470>
 8003c38:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <Principal_Receive_Config+0x410>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c61 	.word	0x08003c61
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	08003c79 	.word	0x08003c79
 8003c50:	08003c81 	.word	0x08003c81
 8003c54:	08003c89 	.word	0x08003c89
 8003c58:	08003c91 	.word	0x08003c91
 8003c5c:	08003c99 	.word	0x08003c99
 8003c60:	4b58      	ldr	r3, [pc, #352]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c62:	2264      	movs	r2, #100	; 0x64
 8003c64:	805a      	strh	r2, [r3, #2]
 8003c66:	e01e      	b.n	8003ca6 <Principal_Receive_Config+0x476>
 8003c68:	4b56      	ldr	r3, [pc, #344]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c6a:	2232      	movs	r2, #50	; 0x32
 8003c6c:	805a      	strh	r2, [r3, #2]
 8003c6e:	e01a      	b.n	8003ca6 <Principal_Receive_Config+0x476>
 8003c70:	4b54      	ldr	r3, [pc, #336]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c72:	2228      	movs	r2, #40	; 0x28
 8003c74:	805a      	strh	r2, [r3, #2]
 8003c76:	e016      	b.n	8003ca6 <Principal_Receive_Config+0x476>
 8003c78:	4b52      	ldr	r3, [pc, #328]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c7a:	2219      	movs	r2, #25
 8003c7c:	805a      	strh	r2, [r3, #2]
 8003c7e:	e012      	b.n	8003ca6 <Principal_Receive_Config+0x476>
 8003c80:	4b50      	ldr	r3, [pc, #320]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c82:	220a      	movs	r2, #10
 8003c84:	805a      	strh	r2, [r3, #2]
 8003c86:	e00e      	b.n	8003ca6 <Principal_Receive_Config+0x476>
 8003c88:	4b4e      	ldr	r3, [pc, #312]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c8a:	2205      	movs	r2, #5
 8003c8c:	805a      	strh	r2, [r3, #2]
 8003c8e:	e00a      	b.n	8003ca6 <Principal_Receive_Config+0x476>
 8003c90:	4b4c      	ldr	r3, [pc, #304]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c92:	2204      	movs	r2, #4
 8003c94:	805a      	strh	r2, [r3, #2]
 8003c96:	e006      	b.n	8003ca6 <Principal_Receive_Config+0x476>
 8003c98:	4b4a      	ldr	r3, [pc, #296]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	805a      	strh	r2, [r3, #2]
 8003c9e:	e002      	b.n	8003ca6 <Principal_Receive_Config+0x476>
 8003ca0:	4b48      	ldr	r3, [pc, #288]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	805a      	strh	r2, [r3, #2]
 8003ca6:	bf00      	nop
			__LOAD_FREQ(data[3], Per_CAN[Analog_9_12]);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	3303      	adds	r3, #3
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	2b07      	cmp	r3, #7
 8003cb2:	d833      	bhi.n	8003d1c <Principal_Receive_Config+0x4ec>
 8003cb4:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <Principal_Receive_Config+0x48c>)
 8003cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cba:	bf00      	nop
 8003cbc:	08003cdd 	.word	0x08003cdd
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003ced 	.word	0x08003ced
 8003cc8:	08003cf5 	.word	0x08003cf5
 8003ccc:	08003cfd 	.word	0x08003cfd
 8003cd0:	08003d05 	.word	0x08003d05
 8003cd4:	08003d0d 	.word	0x08003d0d
 8003cd8:	08003d15 	.word	0x08003d15
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003cde:	2264      	movs	r2, #100	; 0x64
 8003ce0:	809a      	strh	r2, [r3, #4]
 8003ce2:	e01e      	b.n	8003d22 <Principal_Receive_Config+0x4f2>
 8003ce4:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003ce6:	2232      	movs	r2, #50	; 0x32
 8003ce8:	809a      	strh	r2, [r3, #4]
 8003cea:	e01a      	b.n	8003d22 <Principal_Receive_Config+0x4f2>
 8003cec:	4b35      	ldr	r3, [pc, #212]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003cee:	2228      	movs	r2, #40	; 0x28
 8003cf0:	809a      	strh	r2, [r3, #4]
 8003cf2:	e016      	b.n	8003d22 <Principal_Receive_Config+0x4f2>
 8003cf4:	4b33      	ldr	r3, [pc, #204]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003cf6:	2219      	movs	r2, #25
 8003cf8:	809a      	strh	r2, [r3, #4]
 8003cfa:	e012      	b.n	8003d22 <Principal_Receive_Config+0x4f2>
 8003cfc:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003cfe:	220a      	movs	r2, #10
 8003d00:	809a      	strh	r2, [r3, #4]
 8003d02:	e00e      	b.n	8003d22 <Principal_Receive_Config+0x4f2>
 8003d04:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d06:	2205      	movs	r2, #5
 8003d08:	809a      	strh	r2, [r3, #4]
 8003d0a:	e00a      	b.n	8003d22 <Principal_Receive_Config+0x4f2>
 8003d0c:	4b2d      	ldr	r3, [pc, #180]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d0e:	2204      	movs	r2, #4
 8003d10:	809a      	strh	r2, [r3, #4]
 8003d12:	e006      	b.n	8003d22 <Principal_Receive_Config+0x4f2>
 8003d14:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d16:	2202      	movs	r2, #2
 8003d18:	809a      	strh	r2, [r3, #4]
 8003d1a:	e002      	b.n	8003d22 <Principal_Receive_Config+0x4f2>
 8003d1c:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	809a      	strh	r2, [r3, #4]
 8003d22:	bf00      	nop
			__LOAD_FREQ(data[4], Per_CAN[RTC_Msg]);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	3304      	adds	r3, #4
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	2b07      	cmp	r3, #7
 8003d2e:	d833      	bhi.n	8003d98 <Principal_Receive_Config+0x568>
 8003d30:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <Principal_Receive_Config+0x508>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d59 	.word	0x08003d59
 8003d3c:	08003d61 	.word	0x08003d61
 8003d40:	08003d69 	.word	0x08003d69
 8003d44:	08003d71 	.word	0x08003d71
 8003d48:	08003d79 	.word	0x08003d79
 8003d4c:	08003d81 	.word	0x08003d81
 8003d50:	08003d89 	.word	0x08003d89
 8003d54:	08003d91 	.word	0x08003d91
 8003d58:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d5a:	2264      	movs	r2, #100	; 0x64
 8003d5c:	80da      	strh	r2, [r3, #6]
 8003d5e:	e01e      	b.n	8003d9e <Principal_Receive_Config+0x56e>
 8003d60:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d62:	2232      	movs	r2, #50	; 0x32
 8003d64:	80da      	strh	r2, [r3, #6]
 8003d66:	e01a      	b.n	8003d9e <Principal_Receive_Config+0x56e>
 8003d68:	4b16      	ldr	r3, [pc, #88]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d6a:	2228      	movs	r2, #40	; 0x28
 8003d6c:	80da      	strh	r2, [r3, #6]
 8003d6e:	e016      	b.n	8003d9e <Principal_Receive_Config+0x56e>
 8003d70:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d72:	2219      	movs	r2, #25
 8003d74:	80da      	strh	r2, [r3, #6]
 8003d76:	e012      	b.n	8003d9e <Principal_Receive_Config+0x56e>
 8003d78:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d7a:	220a      	movs	r2, #10
 8003d7c:	80da      	strh	r2, [r3, #6]
 8003d7e:	e00e      	b.n	8003d9e <Principal_Receive_Config+0x56e>
 8003d80:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d82:	2205      	movs	r2, #5
 8003d84:	80da      	strh	r2, [r3, #6]
 8003d86:	e00a      	b.n	8003d9e <Principal_Receive_Config+0x56e>
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	80da      	strh	r2, [r3, #6]
 8003d8e:	e006      	b.n	8003d9e <Principal_Receive_Config+0x56e>
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d92:	2202      	movs	r2, #2
 8003d94:	80da      	strh	r2, [r3, #6]
 8003d96:	e002      	b.n	8003d9e <Principal_Receive_Config+0x56e>
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <Principal_Receive_Config+0x594>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	80da      	strh	r2, [r3, #6]
 8003d9e:	bf00      	nop
			Input_Config = data[5];
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	795a      	ldrb	r2, [r3, #5]
 8003da4:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <Principal_Receive_Config+0x598>)
 8003da6:	701a      	strb	r2, [r3, #0]
			break;
 8003da8:	e001      	b.n	8003dae <Principal_Receive_Config+0x57e>

		default:
			return HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e003      	b.n	8003db6 <Principal_Receive_Config+0x586>
	}

	return Save_EEPROM(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fe ff12 	bl	8002bd8 <Save_EEPROM>
 8003db4:	4603      	mov	r3, r0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20003a7c 	.word	0x20003a7c
 8003dc4:	2000051c 	.word	0x2000051c
 8003dc8:	20000518 	.word	0x20000518

08003dcc <Principal_Datalogger_Start>:

	return retVal;
}

FRESULT Principal_Datalogger_Start(RTC_DateTypeDef* sDate, RTC_TimeTypeDef* sTime, char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 8003dcc:	b5b0      	push	{r4, r5, r7, lr}
 8003dce:	b08a      	sub	sp, #40	; 0x28
 8003dd0:	af04      	add	r7, sp, #16
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
	FRESULT retVal = FR_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]

	if(((ECU_Data.rpm < Threshold_RPM)
 8003dde:	4b44      	ldr	r3, [pc, #272]	; (8003ef0 <Principal_Datalogger_Start+0x124>)
 8003de0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8003de4:	4b43      	ldr	r3, [pc, #268]	; (8003ef4 <Principal_Datalogger_Start+0x128>)
 8003de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	da1f      	bge.n	8003e2e <Principal_Datalogger_Start+0x62>
			&& (ECU_Data.wheel_speed_fl < Threshold_Speed)
 8003dee:	4b40      	ldr	r3, [pc, #256]	; (8003ef0 <Principal_Datalogger_Start+0x124>)
 8003df0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8003df4:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <Principal_Datalogger_Start+0x12c>)
 8003df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	da17      	bge.n	8003e2e <Principal_Datalogger_Start+0x62>
			&& (ECU_Data.wheel_speed_fr < Threshold_Speed)
 8003dfe:	4b3c      	ldr	r3, [pc, #240]	; (8003ef0 <Principal_Datalogger_Start+0x124>)
 8003e00:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003e04:	4b3c      	ldr	r3, [pc, #240]	; (8003ef8 <Principal_Datalogger_Start+0x12c>)
 8003e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	da0f      	bge.n	8003e2e <Principal_Datalogger_Start+0x62>
			&& (ECU_Data.wheel_speed_rl < Threshold_Speed)
 8003e0e:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <Principal_Datalogger_Start+0x124>)
 8003e10:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8003e14:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <Principal_Datalogger_Start+0x12c>)
 8003e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	da07      	bge.n	8003e2e <Principal_Datalogger_Start+0x62>
			&& (ECU_Data.wheel_speed_rr < Threshold_Speed))
 8003e1e:	4b34      	ldr	r3, [pc, #208]	; (8003ef0 <Principal_Datalogger_Start+0x124>)
 8003e20:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 8003e24:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <Principal_Datalogger_Start+0x12c>)
 8003e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	db03      	blt.n	8003e36 <Principal_Datalogger_Start+0x6a>
			|| (Flag_Datalogger == 2))
 8003e2e:	4b33      	ldr	r3, [pc, #204]	; (8003efc <Principal_Datalogger_Start+0x130>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d101      	bne.n	8003e3a <Principal_Datalogger_Start+0x6e>
		return FR_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e056      	b.n	8003ee8 <Principal_Datalogger_Start+0x11c>

	Principal_RTC_Get_Date(sDate, sTime);
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fa6b 	bl	8004318 <Principal_RTC_Get_Date>
	sprintf(dir, "%02d-%02d-%02d\n", sDate->Year, sDate->Month, sDate->Date);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	78db      	ldrb	r3, [r3, #3]
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	785b      	ldrb	r3, [r3, #1]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	789b      	ldrb	r3, [r3, #2]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	460b      	mov	r3, r1
 8003e56:	492a      	ldr	r1, [pc, #168]	; (8003f00 <Principal_Datalogger_Start+0x134>)
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f010 f959 	bl	8014110 <siprintf>

	retVal = f_mkdir(dir);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f00f fa66 	bl	8013330 <f_mkdir>
 8003e64:	4603      	mov	r3, r0
 8003e66:	75fb      	strb	r3, [r7, #23]

	if((retVal != FR_OK) && (retVal != FR_EXIST))
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <Principal_Datalogger_Start+0xac>
 8003e6e:	7dfb      	ldrb	r3, [r7, #23]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d001      	beq.n	8003e78 <Principal_Datalogger_Start+0xac>
		return retVal;
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	e037      	b.n	8003ee8 <Principal_Datalogger_Start+0x11c>

	retVal = f_opendir(dir_struct, dir);
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e7c:	f00f f9e5 	bl	801324a <f_opendir>
 8003e80:	4603      	mov	r3, r0
 8003e82:	75fb      	strb	r3, [r7, #23]

	if(retVal != FR_OK)
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <Principal_Datalogger_Start+0xc2>
		return retVal;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	e02c      	b.n	8003ee8 <Principal_Datalogger_Start+0x11c>

	sprintf(file, "%02d-%02d-%02d-%02d-%02d-%02d\n", sDate->Year, sDate->Month, sDate->Date, sTime->Hours, sTime->Minutes, sTime->Seconds);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	78db      	ldrb	r3, [r3, #3]
 8003e92:	461c      	mov	r4, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	785b      	ldrb	r3, [r3, #1]
 8003e98:	461d      	mov	r5, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	789b      	ldrb	r3, [r3, #2]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	789b      	ldrb	r3, [r3, #2]
 8003eb0:	9303      	str	r3, [sp, #12]
 8003eb2:	9002      	str	r0, [sp, #8]
 8003eb4:	9101      	str	r1, [sp, #4]
 8003eb6:	9200      	str	r2, [sp, #0]
 8003eb8:	462b      	mov	r3, r5
 8003eba:	4622      	mov	r2, r4
 8003ebc:	4911      	ldr	r1, [pc, #68]	; (8003f04 <Principal_Datalogger_Start+0x138>)
 8003ebe:	6838      	ldr	r0, [r7, #0]
 8003ec0:	f010 f926 	bl	8014110 <siprintf>

	retVal = f_open(file_struct, file, FA_WRITE | FA_CREATE_ALWAYS);
 8003ec4:	220a      	movs	r2, #10
 8003ec6:	6839      	ldr	r1, [r7, #0]
 8003ec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eca:	f00e fde0 	bl	8012a8e <f_open>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

	if(retVal == FR_OK)
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d103      	bne.n	8003ee0 <Principal_Datalogger_Start+0x114>
		Flag_Datalogger = 1;
 8003ed8:	4b08      	ldr	r3, [pc, #32]	; (8003efc <Principal_Datalogger_Start+0x130>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	e002      	b.n	8003ee6 <Principal_Datalogger_Start+0x11a>
	else
		Flag_Datalogger = 0;
 8003ee0:	4b06      	ldr	r3, [pc, #24]	; (8003efc <Principal_Datalogger_Start+0x130>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]

	return retVal;
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bdb0      	pop	{r4, r5, r7, pc}
 8003ef0:	20003a28 	.word	0x20003a28
 8003ef4:	200028b8 	.word	0x200028b8
 8003ef8:	20002678 	.word	0x20002678
 8003efc:	2000282c 	.word	0x2000282c
 8003f00:	08014968 	.word	0x08014968
 8003f04:	08014978 	.word	0x08014978

08003f08 <Principal_Datalogger_Save_Buffer>:

	return retVal;
}

void Principal_Datalogger_Save_Buffer(uint32_t Data_ID, uint8_t Data_Length, uint8_t* Data_Buffer, FIL* file_struct)
{
 8003f08:	b5b0      	push	{r4, r5, r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	460b      	mov	r3, r1
 8003f16:	72fb      	strb	r3, [r7, #11]
 8003f18:	466b      	mov	r3, sp
 8003f1a:	461d      	mov	r5, r3
	uint8_t buffer[5 + Data_Length];
 8003f1c:	7afb      	ldrb	r3, [r7, #11]
 8003f1e:	1d5c      	adds	r4, r3, #5
 8003f20:	1e63      	subs	r3, r4, #1
 8003f22:	623b      	str	r3, [r7, #32]
 8003f24:	4623      	mov	r3, r4
 8003f26:	4618      	mov	r0, r3
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	00cb      	lsls	r3, r1, #3
 8003f36:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003f3a:	00c2      	lsls	r2, r0, #3
 8003f3c:	4623      	mov	r3, r4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f04f 0100 	mov.w	r1, #0
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	00cb      	lsls	r3, r1, #3
 8003f4e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003f52:	00c2      	lsls	r2, r0, #3
 8003f54:	4623      	mov	r3, r4
 8003f56:	3307      	adds	r3, #7
 8003f58:	08db      	lsrs	r3, r3, #3
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	ebad 0d03 	sub.w	sp, sp, r3
 8003f60:	466b      	mov	r3, sp
 8003f62:	3300      	adds	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
	UINT byte;
	FRESULT verify[2];

	buffer[0] = 'D';
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	2244      	movs	r2, #68	; 0x44
 8003f6a:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'L';
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	224c      	movs	r2, #76	; 0x4c
 8003f70:	705a      	strb	r2, [r3, #1]
	buffer[2] = Data_ID & 0xff;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	709a      	strb	r2, [r3, #2]
	buffer[3] = Data_Length;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	7afa      	ldrb	r2, [r7, #11]
 8003f7e:	70da      	strb	r2, [r3, #3]
	buffer[4] = Acc_Datalogger[0];
 8003f80:	4b32      	ldr	r3, [pc, #200]	; (800404c <Principal_Datalogger_Save_Buffer+0x144>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	711a      	strb	r2, [r3, #4]

	Acc_Datalogger[0] = 0;
 8003f8a:	4b30      	ldr	r3, [pc, #192]	; (800404c <Principal_Datalogger_Save_Buffer+0x144>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

	for(uint8_t i = 0; i < Data_Length; i++)
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f96:	e00e      	b.n	8003fb6 <Principal_Datalogger_Save_Buffer+0xae>
		buffer[5 + i] = Data_Buffer[i];
 8003f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	441a      	add	r2, r3
 8003fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa4:	3305      	adds	r3, #5
 8003fa6:	7811      	ldrb	r1, [r2, #0]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < Data_Length; i++)
 8003fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003fba:	7afb      	ldrb	r3, [r7, #11]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d3eb      	bcc.n	8003f98 <Principal_Datalogger_Save_Buffer+0x90>

	memcpy(&Datalogger_Buffer + Datalogger_Buffer_Position, buffer, 5 + Data_Length);
 8003fc0:	4b23      	ldr	r3, [pc, #140]	; (8004050 <Principal_Datalogger_Save_Buffer+0x148>)
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	031b      	lsls	r3, r3, #12
 8003fc6:	4a23      	ldr	r2, [pc, #140]	; (8004054 <Principal_Datalogger_Save_Buffer+0x14c>)
 8003fc8:	1898      	adds	r0, r3, r2
 8003fca:	69f9      	ldr	r1, [r7, #28]
 8003fcc:	7afb      	ldrb	r3, [r7, #11]
 8003fce:	3305      	adds	r3, #5
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f010 f887 	bl	80140e4 <memcpy>

	Datalogger_Buffer_Position += (5 + Data_Length);
 8003fd6:	7afb      	ldrb	r3, [r7, #11]
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	4b1d      	ldr	r3, [pc, #116]	; (8004050 <Principal_Datalogger_Save_Buffer+0x148>)
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	4413      	add	r3, r2
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3305      	adds	r3, #5
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <Principal_Datalogger_Save_Buffer+0x148>)
 8003fe8:	801a      	strh	r2, [r3, #0]

	if(Datalogger_Buffer_Position > (DATALOGGER_BUFFER_SIZE - DATALOGGER_MSG_MAX_SIZE))
 8003fea:	4b19      	ldr	r3, [pc, #100]	; (8004050 <Principal_Datalogger_Save_Buffer+0x148>)
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	f640 72f2 	movw	r2, #4082	; 0xff2
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d925      	bls.n	8004042 <Principal_Datalogger_Save_Buffer+0x13a>
	{
		verify[0] = f_write(file_struct, &Datalogger_Buffer, Datalogger_Buffer_Position, &byte);
 8003ff6:	4b16      	ldr	r3, [pc, #88]	; (8004050 <Principal_Datalogger_Save_Buffer+0x148>)
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f107 0318 	add.w	r3, r7, #24
 8004000:	4914      	ldr	r1, [pc, #80]	; (8004054 <Principal_Datalogger_Save_Buffer+0x14c>)
 8004002:	6838      	ldr	r0, [r7, #0]
 8004004:	f00e ff0f 	bl	8012e26 <f_write>
 8004008:	4603      	mov	r3, r0
 800400a:	753b      	strb	r3, [r7, #20]

		verify[1] = f_sync(file_struct);
 800400c:	6838      	ldr	r0, [r7, #0]
 800400e:	f00f f89e 	bl	801314e <f_sync>
 8004012:	4603      	mov	r3, r0
 8004014:	757b      	strb	r3, [r7, #21]

		if((verify[0] == FR_OK) && (verify[1] == FR_OK) && (Datalogger_Buffer_Position == byte))
 8004016:	7d3b      	ldrb	r3, [r7, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10c      	bne.n	8004036 <Principal_Datalogger_Save_Buffer+0x12e>
 800401c:	7d7b      	ldrb	r3, [r7, #21]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <Principal_Datalogger_Save_Buffer+0x12e>
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <Principal_Datalogger_Save_Buffer+0x148>)
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	429a      	cmp	r2, r3
 800402c:	d103      	bne.n	8004036 <Principal_Datalogger_Save_Buffer+0x12e>
			Verify_Datalogger = 1;
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <Principal_Datalogger_Save_Buffer+0x150>)
 8004030:	2201      	movs	r2, #1
 8004032:	701a      	strb	r2, [r3, #0]
 8004034:	e002      	b.n	800403c <Principal_Datalogger_Save_Buffer+0x134>
		else
			Verify_Datalogger = 0;
 8004036:	4b08      	ldr	r3, [pc, #32]	; (8004058 <Principal_Datalogger_Save_Buffer+0x150>)
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]

		Datalogger_Buffer_Position = 0;
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <Principal_Datalogger_Save_Buffer+0x148>)
 800403e:	2200      	movs	r2, #0
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	46ad      	mov	sp, r5
	}
}
 8004044:	bf00      	nop
 8004046:	3728      	adds	r7, #40	; 0x28
 8004048:	46bd      	mov	sp, r7
 800404a:	bdb0      	pop	{r4, r5, r7, pc}
 800404c:	20003a20 	.word	0x20003a20
 8004050:	200005d8 	.word	0x200005d8
 8004054:	200005e8 	.word	0x200005e8
 8004058:	20002628 	.word	0x20002628

0800405c <Principal_Beacon_Detect>:
			Principal_Datalogger_Finish(dir_struct, file_struct);
	}
}

void Principal_Beacon_Detect()
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
	Lap_Number++;
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <Principal_Beacon_Detect+0x1c>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	b2da      	uxtb	r2, r3
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <Principal_Beacon_Detect+0x1c>)
 800406a:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, Beacon_Msg);
 800406c:	2107      	movs	r1, #7
 800406e:	4803      	ldr	r0, [pc, #12]	; (800407c <Principal_Beacon_Detect+0x20>)
 8004070:	f7fe fd74 	bl	8002b5c <Principal_Transmit_Msg>
}
 8004074:	bf00      	nop
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20003930 	.word	0x20003930
 800407c:	20003998 	.word	0x20003998

08004080 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8004088:	4b2a      	ldr	r3, [pc, #168]	; (8004134 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800408a:	4a2b      	ldr	r2, [pc, #172]	; (8004138 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800408c:	2100      	movs	r1, #0
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f001 fa7b 	bl	800558a <HAL_CAN_GetRxMessage>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d13f      	bne.n	800411a <HAL_CAN_RxFifo0MsgPendingCallback+0x9a>
	{
		Verify_CAN |= 2;
 800409a:	4b28      	ldr	r3, [pc, #160]	; (800413c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	f043 0302 	orr.w	r3, r3, #2
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80040a6:	701a      	strb	r2, [r3, #0]

		if(RxHeader.IDE == CAN_ID_STD)
 80040a8:	4b23      	ldr	r3, [pc, #140]	; (8004138 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
			Principal_Datalogger_Save_Buffer(RxHeader.StdId, RxHeader.DLC, RxData, &File_Struct);
 80040b0:	4b21      	ldr	r3, [pc, #132]	; (8004138 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	b2d9      	uxtb	r1, r3
 80040ba:	4b21      	ldr	r3, [pc, #132]	; (8004140 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80040bc:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80040be:	f7ff ff23 	bl	8003f08 <Principal_Datalogger_Save_Buffer>
			FT_CAN_ReceiveData(RxHeader.ExtId, RxHeader.DLC, RxData, &ECU_Data);
	}

	else
		Verify_CAN &= 1;
}
 80040c2:	e032      	b.n	800412a <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
		else if(((RxHeader.ExtId & 0x1FFFF000) == 0x1E35C000) && (RxHeader.IDE == CAN_ID_EXT))
 80040c4:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10d      	bne.n	80040ee <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
 80040d2:	4b19      	ldr	r3, [pc, #100]	; (8004138 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d109      	bne.n	80040ee <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
			PDM_CAN_Process_Data(RxHeader.ExtId, RxHeader.DLC, RxData, &PDM_Readings);
 80040da:	4b17      	ldr	r3, [pc, #92]	; (8004138 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80040dc:	6858      	ldr	r0, [r3, #4]
 80040de:	4b16      	ldr	r3, [pc, #88]	; (8004138 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	b2d9      	uxtb	r1, r3
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80040e6:	4a13      	ldr	r2, [pc, #76]	; (8004134 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80040e8:	f7fd ff54 	bl	8001f94 <PDM_CAN_Process_Data>
 80040ec:	e01d      	b.n	800412a <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
		else if((RxHeader.ExtId == CONFIG_ID) && (RxHeader.IDE == CAN_ID_EXT))
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d108      	bne.n	8004108 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d104      	bne.n	8004108 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			Principal_Receive_Config(&hi2c1, RxData);
 80040fe:	490d      	ldr	r1, [pc, #52]	; (8004134 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8004100:	4813      	ldr	r0, [pc, #76]	; (8004150 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8004102:	f7ff fb95 	bl	8003830 <Principal_Receive_Config>
 8004106:	e010      	b.n	800412a <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
			FT_CAN_ReceiveData(RxHeader.ExtId, RxHeader.DLC, RxData, &ECU_Data);
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800410a:	6858      	ldr	r0, [r3, #4]
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800410e:	6919      	ldr	r1, [r3, #16]
 8004110:	4b10      	ldr	r3, [pc, #64]	; (8004154 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8004112:	4a08      	ldr	r2, [pc, #32]	; (8004134 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8004114:	f7fc fca6 	bl	8000a64 <FT_CAN_ReceiveData>
}
 8004118:	e007      	b.n	800412a <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
		Verify_CAN &= 1;
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	b2da      	uxtb	r2, r3
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8004126:	701a      	strb	r2, [r3, #0]
}
 8004128:	e7ff      	b.n	800412a <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	200028d8 	.word	0x200028d8
 8004138:	200039fc 	.word	0x200039fc
 800413c:	20002670 	.word	0x20002670
 8004140:	200028ec 	.word	0x200028ec
 8004144:	1ffff000 	.word	0x1ffff000
 8004148:	1e35c000 	.word	0x1e35c000
 800414c:	2000262c 	.word	0x2000262c
 8004150:	20000584 	.word	0x20000584
 8004154:	20003a28 	.word	0x20003a28

08004158 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af02      	add	r7, sp, #8
 800415e:	4603      	mov	r3, r0
 8004160:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXTI0_Pin)
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004168:	d117      	bne.n	800419a <HAL_GPIO_EXTI_Callback+0x42>
	{
		if((Input_Config & 0x01) == 0)
 800416a:	4b1c      	ldr	r3, [pc, #112]	; (80041dc <HAL_GPIO_EXTI_Callback+0x84>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_GPIO_EXTI_Callback+0x22>
			Principal_Beacon_Detect();
 8004176:	f7ff ff71 	bl	800405c <Principal_Beacon_Detect>

		if((Input_Config & 0x02) == 0)
 800417a:	4b18      	ldr	r3, [pc, #96]	; (80041dc <HAL_GPIO_EXTI_Callback+0x84>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_GPIO_EXTI_Callback+0x42>
			Principal_Datalogger_Start(&Date, &Time, Dir_String, Log_String, &Dir_Struct, &File_Struct);
 8004186:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <HAL_GPIO_EXTI_Callback+0x88>)
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	4b16      	ldr	r3, [pc, #88]	; (80041e4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <HAL_GPIO_EXTI_Callback+0x90>)
 8004190:	4a16      	ldr	r2, [pc, #88]	; (80041ec <HAL_GPIO_EXTI_Callback+0x94>)
 8004192:	4917      	ldr	r1, [pc, #92]	; (80041f0 <HAL_GPIO_EXTI_Callback+0x98>)
 8004194:	4817      	ldr	r0, [pc, #92]	; (80041f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8004196:	f7ff fe19 	bl	8003dcc <Principal_Datalogger_Start>
	}

	if(GPIO_Pin == EXTI1_Pin)
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a0:	d117      	bne.n	80041d2 <HAL_GPIO_EXTI_Callback+0x7a>
	{
		if((Input_Config & 0x01) == 1)
 80041a2:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <HAL_GPIO_EXTI_Callback+0x84>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_GPIO_EXTI_Callback+0x5a>
			Principal_Beacon_Detect();
 80041ae:	f7ff ff55 	bl	800405c <Principal_Beacon_Detect>

		if((Input_Config & 0x02) == 2)
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <HAL_GPIO_EXTI_Callback+0x84>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_GPIO_EXTI_Callback+0x7a>
			Principal_Datalogger_Start(&Date, &Time, Dir_String, Log_String, &Dir_Struct, &File_Struct);
 80041be:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <HAL_GPIO_EXTI_Callback+0x88>)
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <HAL_GPIO_EXTI_Callback+0x90>)
 80041c8:	4a08      	ldr	r2, [pc, #32]	; (80041ec <HAL_GPIO_EXTI_Callback+0x94>)
 80041ca:	4909      	ldr	r1, [pc, #36]	; (80041f0 <HAL_GPIO_EXTI_Callback+0x98>)
 80041cc:	4809      	ldr	r0, [pc, #36]	; (80041f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80041ce:	f7ff fdfd 	bl	8003dcc <Principal_Datalogger_Start>
	}
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000518 	.word	0x20000518
 80041e0:	200028ec 	.word	0x200028ec
 80041e4:	2000267c 	.word	0x2000267c
 80041e8:	200039d0 	.word	0x200039d0
 80041ec:	200015e8 	.word	0x200015e8
 80041f0:	2000391c 	.word	0x2000391c
 80041f4:	20002674 	.word	0x20002674

080041f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d144      	bne.n	8004294 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		Acc_Datalogger[0]++;
 800420a:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3301      	adds	r3, #1
 8004210:	4a24      	ldr	r2, [pc, #144]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004212:	6013      	str	r3, [r2, #0]
		if(Acc_Datalogger[1] > 0) Acc_Datalogger[1]--;
 8004214:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <HAL_TIM_PeriodElapsedCallback+0x2e>
 800421c:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	3b01      	subs	r3, #1
 8004222:	4a20      	ldr	r2, [pc, #128]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004224:	6053      	str	r3, [r2, #4]

		Acc_CAN[Analog_1_4]++;
 8004226:	4b20      	ldr	r3, [pc, #128]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3301      	adds	r3, #1
 800422c:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800422e:	6013      	str	r3, [r2, #0]
		Acc_CAN[Analog_5_8]++;
 8004230:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	3301      	adds	r3, #1
 8004236:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004238:	6053      	str	r3, [r2, #4]
		Acc_CAN[Analog_9_12]++;
 800423a:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	3301      	adds	r3, #1
 8004240:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004242:	6093      	str	r3, [r2, #8]
		Acc_CAN[RTC_Msg]++;
 8004244:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	3301      	adds	r3, #1
 800424a:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800424c:	60d3      	str	r3, [r2, #12]

		Acc_Msg[Analog_1_4]++;
 800424e:	4b17      	ldr	r3, [pc, #92]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3301      	adds	r3, #1
 8004254:	4a15      	ldr	r2, [pc, #84]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004256:	6013      	str	r3, [r2, #0]
		Acc_Msg[Analog_5_8]++;
 8004258:	4b14      	ldr	r3, [pc, #80]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	3301      	adds	r3, #1
 800425e:	4a13      	ldr	r2, [pc, #76]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004260:	6053      	str	r3, [r2, #4]
		Acc_Msg[Analog_9_12]++;
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	3301      	adds	r3, #1
 8004268:	4a10      	ldr	r2, [pc, #64]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800426a:	6093      	str	r3, [r2, #8]
		Acc_Msg[RTC_Msg]++;
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	3301      	adds	r3, #1
 8004272:	4a0e      	ldr	r2, [pc, #56]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004274:	60d3      	str	r3, [r2, #12]
		Acc_Msg[Verify_Msg]++;
 8004276:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	3301      	adds	r3, #1
 800427c:	4a0b      	ldr	r2, [pc, #44]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800427e:	6113      	str	r3, [r2, #16]
		Acc_Msg[ECU_Save]++;
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	3301      	adds	r3, #1
 8004286:	4a09      	ldr	r2, [pc, #36]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004288:	6153      	str	r3, [r2, #20]
		Acc_Msg[PDM_Save]++;
 800428a:	4b08      	ldr	r3, [pc, #32]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	3301      	adds	r3, #1
 8004290:	4a06      	ldr	r2, [pc, #24]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004292:	6193      	str	r3, [r2, #24]
	}
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40001000 	.word	0x40001000
 80042a4:	20003a20 	.word	0x20003a20
 80042a8:	200039c0 	.word	0x200039c0
 80042ac:	200028bc 	.word	0x200028bc

080042b0 <Principal_RTC_Calibrate>:
 */

#include "principal.h"

void Principal_RTC_Calibrate(RTC_DateTypeDef *sDate, RTC_TimeTypeDef *sTime)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
	sDate->Year = 22;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2216      	movs	r2, #22
 80042be:	70da      	strb	r2, [r3, #3]
	sDate->Month = 01;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	705a      	strb	r2, [r3, #1]
	sDate->Date = 11;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	220b      	movs	r2, #11
 80042ca:	709a      	strb	r2, [r3, #2]
	sTime->Hours = 00;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
	sTime->Minutes = 00;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2200      	movs	r2, #0
 80042d6:	705a      	strb	r2, [r3, #1]
	sTime->Seconds = 00;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	709a      	strb	r2, [r3, #2]
	sDate->WeekDay = RTC_WEEKDAY_MONDAY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]

	//Standard Configuration
	sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2200      	movs	r2, #0
 80042e8:	60da      	str	r2, [r3, #12]
	sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2200      	movs	r2, #0
 80042ee:	611a      	str	r2, [r3, #16]
	sTime->TimeFormat = RTC_HOURFORMAT_24;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(&hrtc, sDate, RTC_FORMAT_BIN);
 80042f6:	2200      	movs	r2, #0
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4806      	ldr	r0, [pc, #24]	; (8004314 <Principal_RTC_Calibrate+0x64>)
 80042fc:	f005 fc1a 	bl	8009b34 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, sTime, RTC_FORMAT_BIN);
 8004300:	2200      	movs	r2, #0
 8004302:	6839      	ldr	r1, [r7, #0]
 8004304:	4803      	ldr	r0, [pc, #12]	; (8004314 <Principal_RTC_Calibrate+0x64>)
 8004306:	f005 fafa 	bl	80098fe <HAL_RTC_SetTime>

	return;
 800430a:	bf00      	nop
}
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	2000275c 	.word	0x2000275c

08004318 <Principal_RTC_Get_Date>:

void Principal_RTC_Get_Date(RTC_DateTypeDef *sDate, RTC_TimeTypeDef *sTime)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate(&hrtc, sDate, RTC_FORMAT_BIN);
 8004322:	2200      	movs	r2, #0
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4806      	ldr	r0, [pc, #24]	; (8004340 <Principal_RTC_Get_Date+0x28>)
 8004328:	f005 fcab 	bl	8009c82 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, sTime, RTC_FORMAT_BIN);
 800432c:	2200      	movs	r2, #0
 800432e:	6839      	ldr	r1, [r7, #0]
 8004330:	4803      	ldr	r0, [pc, #12]	; (8004340 <Principal_RTC_Get_Date+0x28>)
 8004332:	f005 fba1 	bl	8009a78 <HAL_RTC_GetTime>
}
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	2000275c 	.word	0x2000275c

08004344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <HAL_MspInit+0x4c>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	4a0f      	ldr	r2, [pc, #60]	; (8004390 <HAL_MspInit+0x4c>)
 8004354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004358:	6453      	str	r3, [r2, #68]	; 0x44
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <HAL_MspInit+0x4c>)
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004362:	607b      	str	r3, [r7, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_MspInit+0x4c>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	4a08      	ldr	r2, [pc, #32]	; (8004390 <HAL_MspInit+0x4c>)
 8004370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004374:	6413      	str	r3, [r2, #64]	; 0x40
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_MspInit+0x4c>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800

08004394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08e      	sub	sp, #56	; 0x38
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800439c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a79      	ldr	r2, [pc, #484]	; (8004598 <HAL_ADC_MspInit+0x204>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d158      	bne.n	8004468 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	4b78      	ldr	r3, [pc, #480]	; (800459c <HAL_ADC_MspInit+0x208>)
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	4a77      	ldr	r2, [pc, #476]	; (800459c <HAL_ADC_MspInit+0x208>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c4:	6453      	str	r3, [r2, #68]	; 0x44
 80043c6:	4b75      	ldr	r3, [pc, #468]	; (800459c <HAL_ADC_MspInit+0x208>)
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	4b71      	ldr	r3, [pc, #452]	; (800459c <HAL_ADC_MspInit+0x208>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	4a70      	ldr	r2, [pc, #448]	; (800459c <HAL_ADC_MspInit+0x208>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6313      	str	r3, [r2, #48]	; 0x30
 80043e2:	4b6e      	ldr	r3, [pc, #440]	; (800459c <HAL_ADC_MspInit+0x208>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	69fb      	ldr	r3, [r7, #28]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80043ee:	233f      	movs	r3, #63	; 0x3f
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043f2:	2303      	movs	r3, #3
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043fe:	4619      	mov	r1, r3
 8004400:	4867      	ldr	r0, [pc, #412]	; (80045a0 <HAL_ADC_MspInit+0x20c>)
 8004402:	f002 f8b3 	bl	800656c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004406:	4b67      	ldr	r3, [pc, #412]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 8004408:	4a67      	ldr	r2, [pc, #412]	; (80045a8 <HAL_ADC_MspInit+0x214>)
 800440a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800440c:	4b65      	ldr	r3, [pc, #404]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 800440e:	2200      	movs	r2, #0
 8004410:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004412:	4b64      	ldr	r3, [pc, #400]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 8004414:	2200      	movs	r2, #0
 8004416:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004418:	4b62      	ldr	r3, [pc, #392]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 800441a:	2200      	movs	r2, #0
 800441c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800441e:	4b61      	ldr	r3, [pc, #388]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 8004420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004424:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004426:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 8004428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800442c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800442e:	4b5d      	ldr	r3, [pc, #372]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 8004430:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004434:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004436:	4b5b      	ldr	r3, [pc, #364]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 8004438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800443c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800443e:	4b59      	ldr	r3, [pc, #356]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 8004440:	2200      	movs	r2, #0
 8004442:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004444:	4b57      	ldr	r3, [pc, #348]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 8004446:	2200      	movs	r2, #0
 8004448:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800444a:	4856      	ldr	r0, [pc, #344]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 800444c:	f001 fcf0 	bl	8005e30 <HAL_DMA_Init>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004456:	f7fd fb87 	bl	8001b68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a51      	ldr	r2, [pc, #324]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
 8004460:	4a50      	ldr	r2, [pc, #320]	; (80045a4 <HAL_ADC_MspInit+0x210>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004466:	e092      	b.n	800458e <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a4f      	ldr	r2, [pc, #316]	; (80045ac <HAL_ADC_MspInit+0x218>)
 800446e:	4293      	cmp	r3, r2
 8004470:	f040 808d 	bne.w	800458e <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004474:	2300      	movs	r3, #0
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	4b48      	ldr	r3, [pc, #288]	; (800459c <HAL_ADC_MspInit+0x208>)
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	4a47      	ldr	r2, [pc, #284]	; (800459c <HAL_ADC_MspInit+0x208>)
 800447e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004482:	6453      	str	r3, [r2, #68]	; 0x44
 8004484:	4b45      	ldr	r3, [pc, #276]	; (800459c <HAL_ADC_MspInit+0x208>)
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	4b41      	ldr	r3, [pc, #260]	; (800459c <HAL_ADC_MspInit+0x208>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	4a40      	ldr	r2, [pc, #256]	; (800459c <HAL_ADC_MspInit+0x208>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6313      	str	r3, [r2, #48]	; 0x30
 80044a0:	4b3e      	ldr	r3, [pc, #248]	; (800459c <HAL_ADC_MspInit+0x208>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	4b3a      	ldr	r3, [pc, #232]	; (800459c <HAL_ADC_MspInit+0x208>)
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	4a39      	ldr	r2, [pc, #228]	; (800459c <HAL_ADC_MspInit+0x208>)
 80044b6:	f043 0304 	orr.w	r3, r3, #4
 80044ba:	6313      	str	r3, [r2, #48]	; 0x30
 80044bc:	4b37      	ldr	r3, [pc, #220]	; (800459c <HAL_ADC_MspInit+0x208>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	4b33      	ldr	r3, [pc, #204]	; (800459c <HAL_ADC_MspInit+0x208>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	4a32      	ldr	r2, [pc, #200]	; (800459c <HAL_ADC_MspInit+0x208>)
 80044d2:	f043 0302 	orr.w	r3, r3, #2
 80044d6:	6313      	str	r3, [r2, #48]	; 0x30
 80044d8:	4b30      	ldr	r3, [pc, #192]	; (800459c <HAL_ADC_MspInit+0x208>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044e4:	23c0      	movs	r3, #192	; 0xc0
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044e8:	2303      	movs	r3, #3
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f4:	4619      	mov	r1, r3
 80044f6:	482a      	ldr	r0, [pc, #168]	; (80045a0 <HAL_ADC_MspInit+0x20c>)
 80044f8:	f002 f838 	bl	800656c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80044fc:	2330      	movs	r3, #48	; 0x30
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004500:	2303      	movs	r3, #3
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800450c:	4619      	mov	r1, r3
 800450e:	4828      	ldr	r0, [pc, #160]	; (80045b0 <HAL_ADC_MspInit+0x21c>)
 8004510:	f002 f82c 	bl	800656c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004514:	2303      	movs	r3, #3
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004518:	2303      	movs	r3, #3
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004524:	4619      	mov	r1, r3
 8004526:	4823      	ldr	r0, [pc, #140]	; (80045b4 <HAL_ADC_MspInit+0x220>)
 8004528:	f002 f820 	bl	800656c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800452c:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 800452e:	4a23      	ldr	r2, [pc, #140]	; (80045bc <HAL_ADC_MspInit+0x228>)
 8004530:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004532:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 8004534:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004538:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800453a:	4b1f      	ldr	r3, [pc, #124]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 800453c:	2200      	movs	r2, #0
 800453e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004540:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 8004542:	2200      	movs	r2, #0
 8004544:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 8004548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800454c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800454e:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 8004550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004554:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 8004558:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800455c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800455e:	4b16      	ldr	r3, [pc, #88]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 8004560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004564:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004566:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 8004568:	2200      	movs	r2, #0
 800456a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800456c:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 800456e:	2200      	movs	r2, #0
 8004570:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004572:	4811      	ldr	r0, [pc, #68]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 8004574:	f001 fc5c 	bl	8005e30 <HAL_DMA_Init>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 800457e:	f7fd faf3 	bl	8001b68 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 8004586:	639a      	str	r2, [r3, #56]	; 0x38
 8004588:	4a0b      	ldr	r2, [pc, #44]	; (80045b8 <HAL_ADC_MspInit+0x224>)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800458e:	bf00      	nop
 8004590:	3738      	adds	r7, #56	; 0x38
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40012000 	.word	0x40012000
 800459c:	40023800 	.word	0x40023800
 80045a0:	40020000 	.word	0x40020000
 80045a4:	200026fc 	.word	0x200026fc
 80045a8:	40026410 	.word	0x40026410
 80045ac:	40012100 	.word	0x40012100
 80045b0:	40020800 	.word	0x40020800
 80045b4:	40020400 	.word	0x40020400
 80045b8:	20003938 	.word	0x20003938
 80045bc:	40026440 	.word	0x40026440

080045c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c8:	f107 0314 	add.w	r3, r7, #20
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <HAL_CAN_MspInit+0x94>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d134      	bne.n	800464c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	4b1c      	ldr	r3, [pc, #112]	; (8004658 <HAL_CAN_MspInit+0x98>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <HAL_CAN_MspInit+0x98>)
 80045ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045f0:	6413      	str	r3, [r2, #64]	; 0x40
 80045f2:	4b19      	ldr	r3, [pc, #100]	; (8004658 <HAL_CAN_MspInit+0x98>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	4b15      	ldr	r3, [pc, #84]	; (8004658 <HAL_CAN_MspInit+0x98>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	4a14      	ldr	r2, [pc, #80]	; (8004658 <HAL_CAN_MspInit+0x98>)
 8004608:	f043 0302 	orr.w	r3, r3, #2
 800460c:	6313      	str	r3, [r2, #48]	; 0x30
 800460e:	4b12      	ldr	r3, [pc, #72]	; (8004658 <HAL_CAN_MspInit+0x98>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800461a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800461e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004620:	2302      	movs	r3, #2
 8004622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004624:	2300      	movs	r3, #0
 8004626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004628:	2303      	movs	r3, #3
 800462a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800462c:	2309      	movs	r3, #9
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004630:	f107 0314 	add.w	r3, r7, #20
 8004634:	4619      	mov	r1, r3
 8004636:	4809      	ldr	r0, [pc, #36]	; (800465c <HAL_CAN_MspInit+0x9c>)
 8004638:	f001 ff98 	bl	800656c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 800463c:	2200      	movs	r2, #0
 800463e:	2102      	movs	r1, #2
 8004640:	2014      	movs	r0, #20
 8004642:	f001 fbbe 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004646:	2014      	movs	r0, #20
 8004648:	f001 fbd7 	bl	8005dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800464c:	bf00      	nop
 800464e:	3728      	adds	r7, #40	; 0x28
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40006400 	.word	0x40006400
 8004658:	40023800 	.word	0x40023800
 800465c:	40020400 	.word	0x40020400

08004660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004668:	f107 0314 	add.w	r3, r7, #20
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <HAL_I2C_MspInit+0x84>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d12b      	bne.n	80046da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <HAL_I2C_MspInit+0x88>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <HAL_I2C_MspInit+0x88>)
 800468c:	f043 0302 	orr.w	r3, r3, #2
 8004690:	6313      	str	r3, [r2, #48]	; 0x30
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <HAL_I2C_MspInit+0x88>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800469e:	23c0      	movs	r3, #192	; 0xc0
 80046a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046a2:	2312      	movs	r3, #18
 80046a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046aa:	2303      	movs	r3, #3
 80046ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046ae:	2304      	movs	r3, #4
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b2:	f107 0314 	add.w	r3, r7, #20
 80046b6:	4619      	mov	r1, r3
 80046b8:	480c      	ldr	r0, [pc, #48]	; (80046ec <HAL_I2C_MspInit+0x8c>)
 80046ba:	f001 ff57 	bl	800656c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_I2C_MspInit+0x88>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <HAL_I2C_MspInit+0x88>)
 80046c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046cc:	6413      	str	r3, [r2, #64]	; 0x40
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_I2C_MspInit+0x88>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80046da:	bf00      	nop
 80046dc:	3728      	adds	r7, #40	; 0x28
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40005400 	.word	0x40005400
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40020400 	.word	0x40020400

080046f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b09a      	sub	sp, #104	; 0x68
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046f8:	f107 030c 	add.w	r3, r7, #12
 80046fc:	225c      	movs	r2, #92	; 0x5c
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f00f fcfd 	bl	8014100 <memset>
  if(hrtc->Instance==RTC)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a0c      	ldr	r2, [pc, #48]	; (800473c <HAL_RTC_MspInit+0x4c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d111      	bne.n	8004734 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004710:	2320      	movs	r3, #32
 8004712:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004718:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800471a:	f107 030c 	add.w	r3, r7, #12
 800471e:	4618      	mov	r0, r3
 8004720:	f004 f8e2 	bl	80088e8 <HAL_RCCEx_PeriphCLKConfig>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800472a:	f7fd fa1d 	bl	8001b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800472e:	4b04      	ldr	r3, [pc, #16]	; (8004740 <HAL_RTC_MspInit+0x50>)
 8004730:	2201      	movs	r2, #1
 8004732:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004734:	bf00      	nop
 8004736:	3768      	adds	r7, #104	; 0x68
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40002800 	.word	0x40002800
 8004740:	42470e3c 	.word	0x42470e3c

08004744 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	60da      	str	r2, [r3, #12]
 800475a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a68      	ldr	r2, [pc, #416]	; (8004904 <HAL_SD_MspInit+0x1c0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	f040 80c9 	bne.w	80048fa <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	4b66      	ldr	r3, [pc, #408]	; (8004908 <HAL_SD_MspInit+0x1c4>)
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	4a65      	ldr	r2, [pc, #404]	; (8004908 <HAL_SD_MspInit+0x1c4>)
 8004772:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004776:	6453      	str	r3, [r2, #68]	; 0x44
 8004778:	4b63      	ldr	r3, [pc, #396]	; (8004908 <HAL_SD_MspInit+0x1c4>)
 800477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	4b5f      	ldr	r3, [pc, #380]	; (8004908 <HAL_SD_MspInit+0x1c4>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	4a5e      	ldr	r2, [pc, #376]	; (8004908 <HAL_SD_MspInit+0x1c4>)
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	6313      	str	r3, [r2, #48]	; 0x30
 8004794:	4b5c      	ldr	r3, [pc, #368]	; (8004908 <HAL_SD_MspInit+0x1c4>)
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047a0:	2300      	movs	r3, #0
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	4b58      	ldr	r3, [pc, #352]	; (8004908 <HAL_SD_MspInit+0x1c4>)
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	4a57      	ldr	r2, [pc, #348]	; (8004908 <HAL_SD_MspInit+0x1c4>)
 80047aa:	f043 0308 	orr.w	r3, r3, #8
 80047ae:	6313      	str	r3, [r2, #48]	; 0x30
 80047b0:	4b55      	ldr	r3, [pc, #340]	; (8004908 <HAL_SD_MspInit+0x1c4>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80047bc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80047c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c2:	2302      	movs	r3, #2
 80047c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ca:	2303      	movs	r3, #3
 80047cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80047ce:	230c      	movs	r3, #12
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047d2:	f107 0314 	add.w	r3, r7, #20
 80047d6:	4619      	mov	r1, r3
 80047d8:	484c      	ldr	r0, [pc, #304]	; (800490c <HAL_SD_MspInit+0x1c8>)
 80047da:	f001 fec7 	bl	800656c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047de:	2304      	movs	r3, #4
 80047e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e2:	2302      	movs	r3, #2
 80047e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ea:	2303      	movs	r3, #3
 80047ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80047ee:	230c      	movs	r3, #12
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047f2:	f107 0314 	add.w	r3, r7, #20
 80047f6:	4619      	mov	r1, r3
 80047f8:	4845      	ldr	r0, [pc, #276]	; (8004910 <HAL_SD_MspInit+0x1cc>)
 80047fa:	f001 feb7 	bl	800656c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80047fe:	4b45      	ldr	r3, [pc, #276]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 8004800:	4a45      	ldr	r2, [pc, #276]	; (8004918 <HAL_SD_MspInit+0x1d4>)
 8004802:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004804:	4b43      	ldr	r3, [pc, #268]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 8004806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800480a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800480c:	4b41      	ldr	r3, [pc, #260]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004812:	4b40      	ldr	r3, [pc, #256]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 8004814:	2200      	movs	r2, #0
 8004816:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004818:	4b3e      	ldr	r3, [pc, #248]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 800481a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800481e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004820:	4b3c      	ldr	r3, [pc, #240]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 8004822:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004826:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004828:	4b3a      	ldr	r3, [pc, #232]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 800482a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800482e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004830:	4b38      	ldr	r3, [pc, #224]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 8004832:	2220      	movs	r2, #32
 8004834:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004836:	4b37      	ldr	r3, [pc, #220]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 8004838:	2200      	movs	r2, #0
 800483a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800483c:	4b35      	ldr	r3, [pc, #212]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 800483e:	2204      	movs	r2, #4
 8004840:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004842:	4b34      	ldr	r3, [pc, #208]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 8004844:	2203      	movs	r2, #3
 8004846:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004848:	4b32      	ldr	r3, [pc, #200]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 800484a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004850:	4b30      	ldr	r3, [pc, #192]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 8004852:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004858:	482e      	ldr	r0, [pc, #184]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 800485a:	f001 fae9 	bl	8005e30 <HAL_DMA_Init>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8004864:	f7fd f980 	bl	8001b68 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a2a      	ldr	r2, [pc, #168]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
 800486e:	4a29      	ldr	r2, [pc, #164]	; (8004914 <HAL_SD_MspInit+0x1d0>)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8004874:	4b29      	ldr	r3, [pc, #164]	; (800491c <HAL_SD_MspInit+0x1d8>)
 8004876:	4a2a      	ldr	r2, [pc, #168]	; (8004920 <HAL_SD_MspInit+0x1dc>)
 8004878:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800487a:	4b28      	ldr	r3, [pc, #160]	; (800491c <HAL_SD_MspInit+0x1d8>)
 800487c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004880:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004882:	4b26      	ldr	r3, [pc, #152]	; (800491c <HAL_SD_MspInit+0x1d8>)
 8004884:	2240      	movs	r2, #64	; 0x40
 8004886:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004888:	4b24      	ldr	r3, [pc, #144]	; (800491c <HAL_SD_MspInit+0x1d8>)
 800488a:	2200      	movs	r2, #0
 800488c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800488e:	4b23      	ldr	r3, [pc, #140]	; (800491c <HAL_SD_MspInit+0x1d8>)
 8004890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004894:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004896:	4b21      	ldr	r3, [pc, #132]	; (800491c <HAL_SD_MspInit+0x1d8>)
 8004898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800489c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800489e:	4b1f      	ldr	r3, [pc, #124]	; (800491c <HAL_SD_MspInit+0x1d8>)
 80048a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048a4:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80048a6:	4b1d      	ldr	r3, [pc, #116]	; (800491c <HAL_SD_MspInit+0x1d8>)
 80048a8:	2220      	movs	r2, #32
 80048aa:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80048ac:	4b1b      	ldr	r3, [pc, #108]	; (800491c <HAL_SD_MspInit+0x1d8>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80048b2:	4b1a      	ldr	r3, [pc, #104]	; (800491c <HAL_SD_MspInit+0x1d8>)
 80048b4:	2204      	movs	r2, #4
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80048b8:	4b18      	ldr	r3, [pc, #96]	; (800491c <HAL_SD_MspInit+0x1d8>)
 80048ba:	2203      	movs	r2, #3
 80048bc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80048be:	4b17      	ldr	r3, [pc, #92]	; (800491c <HAL_SD_MspInit+0x1d8>)
 80048c0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80048c6:	4b15      	ldr	r3, [pc, #84]	; (800491c <HAL_SD_MspInit+0x1d8>)
 80048c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80048ce:	4813      	ldr	r0, [pc, #76]	; (800491c <HAL_SD_MspInit+0x1d8>)
 80048d0:	f001 faae 	bl	8005e30 <HAL_DMA_Init>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80048da:	f7fd f945 	bl	8001b68 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a0e      	ldr	r2, [pc, #56]	; (800491c <HAL_SD_MspInit+0x1d8>)
 80048e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80048e4:	4a0d      	ldr	r2, [pc, #52]	; (800491c <HAL_SD_MspInit+0x1d8>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 1, 0);
 80048ea:	2200      	movs	r2, #0
 80048ec:	2101      	movs	r1, #1
 80048ee:	2031      	movs	r0, #49	; 0x31
 80048f0:	f001 fa67 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80048f4:	2031      	movs	r0, #49	; 0x31
 80048f6:	f001 fa80 	bl	8005dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80048fa:	bf00      	nop
 80048fc:	3728      	adds	r7, #40	; 0x28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40023800 	.word	0x40023800
 800490c:	40020800 	.word	0x40020800
 8004910:	40020c00 	.word	0x40020c00
 8004914:	200004b8 	.word	0x200004b8
 8004918:	40026458 	.word	0x40026458
 800491c:	2000277c 	.word	0x2000277c
 8004920:	400264a0 	.word	0x400264a0

08004924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0e      	ldr	r2, [pc, #56]	; (800496c <HAL_TIM_Base_MspInit+0x48>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d115      	bne.n	8004962 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <HAL_TIM_Base_MspInit+0x4c>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <HAL_TIM_Base_MspInit+0x4c>)
 8004940:	f043 0310 	orr.w	r3, r3, #16
 8004944:	6413      	str	r3, [r2, #64]	; 0x40
 8004946:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <HAL_TIM_Base_MspInit+0x4c>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004952:	2200      	movs	r2, #0
 8004954:	2100      	movs	r1, #0
 8004956:	2036      	movs	r0, #54	; 0x36
 8004958:	f001 fa33 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800495c:	2036      	movs	r0, #54	; 0x36
 800495e:	f001 fa4c 	bl	8005dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40001000 	.word	0x40001000
 8004970:	40023800 	.word	0x40023800

08004974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004978:	e7fe      	b.n	8004978 <NMI_Handler+0x4>

0800497a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800497a:	b480      	push	{r7}
 800497c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800497e:	e7fe      	b.n	800497e <HardFault_Handler+0x4>

08004980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004984:	e7fe      	b.n	8004984 <MemManage_Handler+0x4>

08004986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004986:	b480      	push	{r7}
 8004988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800498a:	e7fe      	b.n	800498a <BusFault_Handler+0x4>

0800498c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004990:	e7fe      	b.n	8004990 <UsageFault_Handler+0x4>

08004992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004992:	b480      	push	{r7}
 8004994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004996:	bf00      	nop
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049ae:	b480      	push	{r7}
 80049b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049c0:	f000 f922 	bl	8004c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049c4:	bf00      	nop
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80049cc:	4802      	ldr	r0, [pc, #8]	; (80049d8 <CAN1_RX0_IRQHandler+0x10>)
 80049ce:	f000 feee 	bl	80057ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20003998 	.word	0x20003998

080049dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 80049e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80049e4:	f001 ff88 	bl	80068f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 80049e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80049ec:	f001 ff84 	bl	80068f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80049f0:	bf00      	nop
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80049f8:	4802      	ldr	r0, [pc, #8]	; (8004a04 <SDIO_IRQHandler+0x10>)
 80049fa:	f005 fc91 	bl	800a320 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80049fe:	bf00      	nop
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20002830 	.word	0x20002830

08004a08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a0c:	4802      	ldr	r0, [pc, #8]	; (8004a18 <TIM6_DAC_IRQHandler+0x10>)
 8004a0e:	f006 fd7f 	bl	800b510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	200027e4 	.word	0x200027e4

08004a1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004a20:	4802      	ldr	r0, [pc, #8]	; (8004a2c <DMA2_Stream0_IRQHandler+0x10>)
 8004a22:	f001 fb2d 	bl	8006080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	200026fc 	.word	0x200026fc

08004a30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004a34:	4802      	ldr	r0, [pc, #8]	; (8004a40 <DMA2_Stream2_IRQHandler+0x10>)
 8004a36:	f001 fb23 	bl	8006080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20003938 	.word	0x20003938

08004a44 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004a48:	4802      	ldr	r0, [pc, #8]	; (8004a54 <DMA2_Stream3_IRQHandler+0x10>)
 8004a4a:	f001 fb19 	bl	8006080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	200004b8 	.word	0x200004b8

08004a58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a5c:	4802      	ldr	r0, [pc, #8]	; (8004a68 <OTG_FS_IRQHandler+0x10>)
 8004a5e:	f002 fd47 	bl	80074f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20005fcc 	.word	0x20005fcc

08004a6c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8004a70:	4802      	ldr	r0, [pc, #8]	; (8004a7c <DMA2_Stream6_IRQHandler+0x10>)
 8004a72:	f001 fb05 	bl	8006080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	2000277c 	.word	0x2000277c

08004a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a88:	4a14      	ldr	r2, [pc, #80]	; (8004adc <_sbrk+0x5c>)
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <_sbrk+0x60>)
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a94:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <_sbrk+0x64>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d102      	bne.n	8004aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a9c:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <_sbrk+0x64>)
 8004a9e:	4a12      	ldr	r2, [pc, #72]	; (8004ae8 <_sbrk+0x68>)
 8004aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <_sbrk+0x64>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d207      	bcs.n	8004ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ab0:	f00f faee 	bl	8014090 <__errno>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	220c      	movs	r2, #12
 8004ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004aba:	f04f 33ff 	mov.w	r3, #4294967295
 8004abe:	e009      	b.n	8004ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <_sbrk+0x64>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <_sbrk+0x64>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4413      	add	r3, r2
 8004ace:	4a05      	ldr	r2, [pc, #20]	; (8004ae4 <_sbrk+0x64>)
 8004ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20020000 	.word	0x20020000
 8004ae0:	00004000 	.word	0x00004000
 8004ae4:	200001f4 	.word	0x200001f4
 8004ae8:	200063e8 	.word	0x200063e8

08004aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004af0:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <SystemInit+0x20>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	4a05      	ldr	r2, [pc, #20]	; (8004b0c <SystemInit+0x20>)
 8004af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b00:	bf00      	nop
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b14:	480d      	ldr	r0, [pc, #52]	; (8004b4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b16:	490e      	ldr	r1, [pc, #56]	; (8004b50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b18:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b1c:	e002      	b.n	8004b24 <LoopCopyDataInit>

08004b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b22:	3304      	adds	r3, #4

08004b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b28:	d3f9      	bcc.n	8004b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b2a:	4a0b      	ldr	r2, [pc, #44]	; (8004b58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b2c:	4c0b      	ldr	r4, [pc, #44]	; (8004b5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b30:	e001      	b.n	8004b36 <LoopFillZerobss>

08004b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b34:	3204      	adds	r2, #4

08004b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b38:	d3fb      	bcc.n	8004b32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004b3a:	f7ff ffd7 	bl	8004aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b3e:	f00f faad 	bl	801409c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b42:	f7fc fb57 	bl	80011f4 <main>
  bx  lr    
 8004b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b50:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004b54:	08014b3c 	.word	0x08014b3c
  ldr r2, =_sbss
 8004b58:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004b5c:	200063e4 	.word	0x200063e4

08004b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b60:	e7fe      	b.n	8004b60 <ADC_IRQHandler>
	...

08004b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b68:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <HAL_Init+0x40>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ba4 <HAL_Init+0x40>)
 8004b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <HAL_Init+0x40>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a0a      	ldr	r2, [pc, #40]	; (8004ba4 <HAL_Init+0x40>)
 8004b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b80:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <HAL_Init+0x40>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a07      	ldr	r2, [pc, #28]	; (8004ba4 <HAL_Init+0x40>)
 8004b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b8c:	2003      	movs	r0, #3
 8004b8e:	f001 f90d 	bl	8005dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b92:	200f      	movs	r0, #15
 8004b94:	f000 f808 	bl	8004ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b98:	f7ff fbd4 	bl	8004344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023c00 	.word	0x40023c00

08004ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <HAL_InitTick+0x54>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <HAL_InitTick+0x58>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 f925 	bl	8005e16 <HAL_SYSTICK_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e00e      	b.n	8004bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b0f      	cmp	r3, #15
 8004bda:	d80a      	bhi.n	8004bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bdc:	2200      	movs	r2, #0
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	f001 f8ed 	bl	8005dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004be8:	4a06      	ldr	r2, [pc, #24]	; (8004c04 <HAL_InitTick+0x5c>)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000000 	.word	0x20000000
 8004c00:	20000008 	.word	0x20000008
 8004c04:	20000004 	.word	0x20000004

08004c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_IncTick+0x20>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <HAL_IncTick+0x24>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4413      	add	r3, r2
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <HAL_IncTick+0x24>)
 8004c1a:	6013      	str	r3, [r2, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20000008 	.word	0x20000008
 8004c2c:	20003a8c 	.word	0x20003a8c

08004c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return uwTick;
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_GetTick+0x14>)
 8004c36:	681b      	ldr	r3, [r3, #0]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20003a8c 	.word	0x20003a8c

08004c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c50:	f7ff ffee 	bl	8004c30 <HAL_GetTick>
 8004c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d005      	beq.n	8004c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c62:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <HAL_Delay+0x44>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c6e:	bf00      	nop
 8004c70:	f7ff ffde 	bl	8004c30 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d8f7      	bhi.n	8004c70 <HAL_Delay+0x28>
  {
  }
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000008 	.word	0x20000008

08004c90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e033      	b.n	8004d0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fb70 	bl	8004394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f003 0310 	and.w	r3, r3, #16
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d118      	bne.n	8004d00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cd6:	f023 0302 	bic.w	r3, r3, #2
 8004cda:	f043 0202 	orr.w	r2, r3, #2
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f94a 	bl	8004f7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	f043 0201 	orr.w	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8004cfe:	e001      	b.n	8004d04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x1c>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e113      	b.n	8004f5c <HAL_ADC_ConfigChannel+0x244>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b09      	cmp	r3, #9
 8004d42:	d925      	bls.n	8004d90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68d9      	ldr	r1, [r3, #12]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	4613      	mov	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	4413      	add	r3, r2
 8004d58:	3b1e      	subs	r3, #30
 8004d5a:	2207      	movs	r2, #7
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43da      	mvns	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	400a      	ands	r2, r1
 8004d68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68d9      	ldr	r1, [r3, #12]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4403      	add	r3, r0
 8004d82:	3b1e      	subs	r3, #30
 8004d84:	409a      	lsls	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	e022      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6919      	ldr	r1, [r3, #16]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4613      	mov	r3, r2
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	4413      	add	r3, r2
 8004da4:	2207      	movs	r2, #7
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43da      	mvns	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	400a      	ands	r2, r1
 8004db2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6919      	ldr	r1, [r3, #16]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	4403      	add	r3, r0
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b06      	cmp	r3, #6
 8004ddc:	d824      	bhi.n	8004e28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	3b05      	subs	r3, #5
 8004df0:	221f      	movs	r2, #31
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43da      	mvns	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	400a      	ands	r2, r1
 8004dfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	3b05      	subs	r3, #5
 8004e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	635a      	str	r2, [r3, #52]	; 0x34
 8004e26:	e04c      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b0c      	cmp	r3, #12
 8004e2e:	d824      	bhi.n	8004e7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	3b23      	subs	r3, #35	; 0x23
 8004e42:	221f      	movs	r2, #31
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43da      	mvns	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	400a      	ands	r2, r1
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	4618      	mov	r0, r3
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	3b23      	subs	r3, #35	; 0x23
 8004e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
 8004e78:	e023      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	3b41      	subs	r3, #65	; 0x41
 8004e8c:	221f      	movs	r2, #31
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43da      	mvns	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	400a      	ands	r2, r1
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3b41      	subs	r3, #65	; 0x41
 8004eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ec2:	4b29      	ldr	r3, [pc, #164]	; (8004f68 <HAL_ADC_ConfigChannel+0x250>)
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a28      	ldr	r2, [pc, #160]	; (8004f6c <HAL_ADC_ConfigChannel+0x254>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d10f      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x1d8>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b12      	cmp	r3, #18
 8004ed6:	d10b      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1d      	ldr	r2, [pc, #116]	; (8004f6c <HAL_ADC_ConfigChannel+0x254>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d12b      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x23a>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <HAL_ADC_ConfigChannel+0x258>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <HAL_ADC_ConfigChannel+0x1f4>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b11      	cmp	r3, #17
 8004f0a:	d122      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a11      	ldr	r2, [pc, #68]	; (8004f70 <HAL_ADC_ConfigChannel+0x258>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d111      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f2e:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <HAL_ADC_ConfigChannel+0x25c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a11      	ldr	r2, [pc, #68]	; (8004f78 <HAL_ADC_ConfigChannel+0x260>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	0c9a      	lsrs	r2, r3, #18
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f44:	e002      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f9      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	40012300 	.word	0x40012300
 8004f6c:	40012000 	.word	0x40012000
 8004f70:	10000012 	.word	0x10000012
 8004f74:	20000000 	.word	0x20000000
 8004f78:	431bde83 	.word	0x431bde83

08004f7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f84:	4b79      	ldr	r3, [pc, #484]	; (800516c <ADC_Init+0x1f0>)
 8004f86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6859      	ldr	r1, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	021a      	lsls	r2, r3, #8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004fd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6859      	ldr	r1, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6899      	ldr	r1, [r3, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	4a58      	ldr	r2, [pc, #352]	; (8005170 <ADC_Init+0x1f4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d022      	beq.n	800505a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005022:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6899      	ldr	r1, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6899      	ldr	r1, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	e00f      	b.n	800507a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005078:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0202 	bic.w	r2, r2, #2
 8005088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6899      	ldr	r1, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	7e1b      	ldrb	r3, [r3, #24]
 8005094:	005a      	lsls	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80050c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6859      	ldr	r1, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	3b01      	subs	r3, #1
 80050d4:	035a      	lsls	r2, r3, #13
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
 80050de:	e007      	b.n	80050f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80050fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	3b01      	subs	r3, #1
 800510c:	051a      	lsls	r2, r3, #20
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6899      	ldr	r1, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005132:	025a      	lsls	r2, r3, #9
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6899      	ldr	r1, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	029a      	lsls	r2, r3, #10
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	609a      	str	r2, [r3, #8]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	40012300 	.word	0x40012300
 8005170:	0f000001 	.word	0x0f000001

08005174 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e0ed      	b.n	8005362 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff fa14 	bl	80045c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051a8:	f7ff fd42 	bl	8004c30 <HAL_GetTick>
 80051ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051ae:	e012      	b.n	80051d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051b0:	f7ff fd3e 	bl	8004c30 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b0a      	cmp	r3, #10
 80051bc:	d90b      	bls.n	80051d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2205      	movs	r2, #5
 80051ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e0c5      	b.n	8005362 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0e5      	beq.n	80051b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0202 	bic.w	r2, r2, #2
 80051f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051f4:	f7ff fd1c 	bl	8004c30 <HAL_GetTick>
 80051f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80051fa:	e012      	b.n	8005222 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051fc:	f7ff fd18 	bl	8004c30 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b0a      	cmp	r3, #10
 8005208:	d90b      	bls.n	8005222 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2205      	movs	r2, #5
 800521a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e09f      	b.n	8005362 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e5      	bne.n	80051fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	7e1b      	ldrb	r3, [r3, #24]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d108      	bne.n	800524a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	e007      	b.n	800525a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005258:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7e5b      	ldrb	r3, [r3, #25]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d108      	bne.n	8005274 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e007      	b.n	8005284 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005282:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	7e9b      	ldrb	r3, [r3, #26]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d108      	bne.n	800529e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0220 	orr.w	r2, r2, #32
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e007      	b.n	80052ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0220 	bic.w	r2, r2, #32
 80052ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	7edb      	ldrb	r3, [r3, #27]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d108      	bne.n	80052c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0210 	bic.w	r2, r2, #16
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e007      	b.n	80052d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0210 	orr.w	r2, r2, #16
 80052d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	7f1b      	ldrb	r3, [r3, #28]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d108      	bne.n	80052f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0208 	orr.w	r2, r2, #8
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	e007      	b.n	8005302 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0208 	bic.w	r2, r2, #8
 8005300:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	7f5b      	ldrb	r3, [r3, #29]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d108      	bne.n	800531c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0204 	orr.w	r2, r2, #4
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	e007      	b.n	800532c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0204 	bic.w	r2, r2, #4
 800532a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	ea42 0103 	orr.w	r1, r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	1e5a      	subs	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800536a:	b480      	push	{r7}
 800536c:	b089      	sub	sp, #36	; 0x24
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]
 8005376:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800537e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005388:	7ffb      	ldrb	r3, [r7, #31]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d003      	beq.n	8005396 <HAL_CAN_AddTxMessage+0x2c>
 800538e:	7ffb      	ldrb	r3, [r7, #31]
 8005390:	2b02      	cmp	r3, #2
 8005392:	f040 80b8 	bne.w	8005506 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d105      	bne.n	80053b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80a0 	beq.w	80054f6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	0e1b      	lsrs	r3, r3, #24
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d907      	bls.n	80053d6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e09e      	b.n	8005514 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80053d6:	2201      	movs	r2, #1
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	409a      	lsls	r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10d      	bne.n	8005404 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	6809      	ldr	r1, [r1, #0]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	3318      	adds	r3, #24
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	440b      	add	r3, r1
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e00f      	b.n	8005424 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800540e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005414:	68f9      	ldr	r1, [r7, #12]
 8005416:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005418:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	3318      	adds	r3, #24
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	440b      	add	r3, r1
 8005422:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6819      	ldr	r1, [r3, #0]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	3318      	adds	r3, #24
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	440b      	add	r3, r1
 8005434:	3304      	adds	r3, #4
 8005436:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	7d1b      	ldrb	r3, [r3, #20]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d111      	bne.n	8005464 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	3318      	adds	r3, #24
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	4413      	add	r3, r2
 800544c:	3304      	adds	r3, #4
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	6811      	ldr	r1, [r2, #0]
 8005454:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	3318      	adds	r3, #24
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	440b      	add	r3, r1
 8005460:	3304      	adds	r3, #4
 8005462:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3307      	adds	r3, #7
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	061a      	lsls	r2, r3, #24
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3306      	adds	r3, #6
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	041b      	lsls	r3, r3, #16
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3305      	adds	r3, #5
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	4313      	orrs	r3, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	3204      	adds	r2, #4
 8005484:	7812      	ldrb	r2, [r2, #0]
 8005486:	4610      	mov	r0, r2
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	6811      	ldr	r1, [r2, #0]
 800548c:	ea43 0200 	orr.w	r2, r3, r0
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	440b      	add	r3, r1
 8005496:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800549a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3303      	adds	r3, #3
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	061a      	lsls	r2, r3, #24
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3302      	adds	r3, #2
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3301      	adds	r3, #1
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	4313      	orrs	r3, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	7812      	ldrb	r2, [r2, #0]
 80054bc:	4610      	mov	r0, r2
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	6811      	ldr	r1, [r2, #0]
 80054c2:	ea43 0200 	orr.w	r2, r3, r0
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	440b      	add	r3, r1
 80054cc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80054d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	3318      	adds	r3, #24
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	4413      	add	r3, r2
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	6811      	ldr	r1, [r2, #0]
 80054e4:	f043 0201 	orr.w	r2, r3, #1
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	3318      	adds	r3, #24
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	440b      	add	r3, r1
 80054f0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	e00e      	b.n	8005514 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e006      	b.n	8005514 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
  }
}
 8005514:	4618      	mov	r0, r3
 8005516:	3724      	adds	r7, #36	; 0x24
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005532:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005534:	7afb      	ldrb	r3, [r7, #11]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d002      	beq.n	8005540 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800553a:	7afb      	ldrb	r3, [r7, #11]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d11d      	bne.n	800557c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3301      	adds	r3, #1
 8005552:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3301      	adds	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3301      	adds	r3, #1
 800557a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800557c:	68fb      	ldr	r3, [r7, #12]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800558a:	b480      	push	{r7}
 800558c:	b087      	sub	sp, #28
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
 8005596:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800559e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d003      	beq.n	80055ae <HAL_CAN_GetRxMessage+0x24>
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	f040 80f3 	bne.w	8005794 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10e      	bne.n	80055d2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d116      	bne.n	80055f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0e7      	b.n	80057a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d107      	bne.n	80055f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0d8      	b.n	80057a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	331b      	adds	r3, #27
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	4413      	add	r3, r2
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0204 	and.w	r2, r3, #4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10c      	bne.n	8005628 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	331b      	adds	r3, #27
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	4413      	add	r3, r2
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	0d5b      	lsrs	r3, r3, #21
 800561e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e00b      	b.n	8005640 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	331b      	adds	r3, #27
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	4413      	add	r3, r2
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	08db      	lsrs	r3, r3, #3
 8005638:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	331b      	adds	r3, #27
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	4413      	add	r3, r2
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0202 	and.w	r2, r3, #2
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	331b      	adds	r3, #27
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	4413      	add	r3, r2
 8005662:	3304      	adds	r3, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 020f 	and.w	r2, r3, #15
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	331b      	adds	r3, #27
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	4413      	add	r3, r2
 800567a:	3304      	adds	r3, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	0a1b      	lsrs	r3, r3, #8
 8005680:	b2da      	uxtb	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	331b      	adds	r3, #27
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	4413      	add	r3, r2
 8005692:	3304      	adds	r3, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	0c1b      	lsrs	r3, r3, #16
 8005698:	b29a      	uxth	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	4413      	add	r3, r2
 80056be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	0a1a      	lsrs	r2, r3, #8
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	0c1a      	lsrs	r2, r3, #16
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	3302      	adds	r3, #2
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	0e1a      	lsrs	r2, r3, #24
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	3303      	adds	r3, #3
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	4413      	add	r3, r2
 800570c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	3304      	adds	r3, #4
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	4413      	add	r3, r2
 8005724:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	0a1a      	lsrs	r2, r3, #8
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	3305      	adds	r3, #5
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	4413      	add	r3, r2
 800573e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	0c1a      	lsrs	r2, r3, #16
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	3306      	adds	r3, #6
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	4413      	add	r3, r2
 8005758:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	0e1a      	lsrs	r2, r3, #24
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	3307      	adds	r3, #7
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d108      	bne.n	8005780 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0220 	orr.w	r2, r2, #32
 800577c:	60da      	str	r2, [r3, #12]
 800577e:	e007      	b.n	8005790 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0220 	orr.w	r2, r2, #32
 800578e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	e006      	b.n	80057a2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
  }
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b08a      	sub	sp, #40	; 0x28
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d07c      	beq.n	80058ee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d023      	beq.n	8005846 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2201      	movs	r2, #1
 8005804:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f983 	bl	8005b1c <HAL_CAN_TxMailbox0CompleteCallback>
 8005816:	e016      	b.n	8005846 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	d004      	beq.n	800582c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
 800582a:	e00c      	b.n	8005846 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
 800583e:	e002      	b.n	8005846 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f989 	bl	8005b58 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584c:	2b00      	cmp	r3, #0
 800584e:	d024      	beq.n	800589a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005858:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f963 	bl	8005b30 <HAL_CAN_TxMailbox1CompleteCallback>
 800586a:	e016      	b.n	800589a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005872:	2b00      	cmp	r3, #0
 8005874:	d004      	beq.n	8005880 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
 800587e:	e00c      	b.n	800589a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005886:	2b00      	cmp	r3, #0
 8005888:	d004      	beq.n	8005894 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
 8005892:	e002      	b.n	800589a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f969 	bl	8005b6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d024      	beq.n	80058ee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f943 	bl	8005b44 <HAL_CAN_TxMailbox2CompleteCallback>
 80058be:	e016      	b.n	80058ee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
 80058d2:	e00c      	b.n	80058ee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
 80058e6:	e002      	b.n	80058ee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f949 	bl	8005b80 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00c      	beq.n	8005912 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005908:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2210      	movs	r2, #16
 8005910:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00b      	beq.n	8005934 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d006      	beq.n	8005934 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2208      	movs	r2, #8
 800592c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f930 	bl	8005b94 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7fe fb97 	bl	8004080 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00c      	beq.n	8005976 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800596c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2210      	movs	r2, #16
 8005974:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00b      	beq.n	8005998 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2208      	movs	r2, #8
 8005990:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f912 	bl	8005bbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f8f9 	bl	8005ba8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00b      	beq.n	80059d8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d006      	beq.n	80059d8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2210      	movs	r2, #16
 80059d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8fc 	bl	8005bd0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d006      	beq.n	80059fa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2208      	movs	r2, #8
 80059f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f8f5 	bl	8005be4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d07b      	beq.n	8005afc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f003 0304 	and.w	r3, r3, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d072      	beq.n	8005af4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	f043 0302 	orr.w	r3, r3, #2
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	f043 0304 	orr.w	r3, r3, #4
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d043      	beq.n	8005af4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d03e      	beq.n	8005af4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a7c:	2b60      	cmp	r3, #96	; 0x60
 8005a7e:	d02b      	beq.n	8005ad8 <HAL_CAN_IRQHandler+0x32a>
 8005a80:	2b60      	cmp	r3, #96	; 0x60
 8005a82:	d82e      	bhi.n	8005ae2 <HAL_CAN_IRQHandler+0x334>
 8005a84:	2b50      	cmp	r3, #80	; 0x50
 8005a86:	d022      	beq.n	8005ace <HAL_CAN_IRQHandler+0x320>
 8005a88:	2b50      	cmp	r3, #80	; 0x50
 8005a8a:	d82a      	bhi.n	8005ae2 <HAL_CAN_IRQHandler+0x334>
 8005a8c:	2b40      	cmp	r3, #64	; 0x40
 8005a8e:	d019      	beq.n	8005ac4 <HAL_CAN_IRQHandler+0x316>
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d826      	bhi.n	8005ae2 <HAL_CAN_IRQHandler+0x334>
 8005a94:	2b30      	cmp	r3, #48	; 0x30
 8005a96:	d010      	beq.n	8005aba <HAL_CAN_IRQHandler+0x30c>
 8005a98:	2b30      	cmp	r3, #48	; 0x30
 8005a9a:	d822      	bhi.n	8005ae2 <HAL_CAN_IRQHandler+0x334>
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d002      	beq.n	8005aa6 <HAL_CAN_IRQHandler+0x2f8>
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d005      	beq.n	8005ab0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005aa4:	e01d      	b.n	8005ae2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	f043 0308 	orr.w	r3, r3, #8
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005aae:	e019      	b.n	8005ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	f043 0310 	orr.w	r3, r3, #16
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ab8:	e014      	b.n	8005ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	f043 0320 	orr.w	r3, r3, #32
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ac2:	e00f      	b.n	8005ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005acc:	e00a      	b.n	8005ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ad6:	e005      	b.n	8005ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ae0:	e000      	b.n	8005ae4 <HAL_CAN_IRQHandler+0x336>
            break;
 8005ae2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005af2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2204      	movs	r2, #4
 8005afa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f872 	bl	8005bf8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005b14:	bf00      	nop
 8005b16:	3728      	adds	r7, #40	; 0x28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <__NVIC_SetPriorityGrouping+0x44>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c28:	4013      	ands	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c3e:	4a04      	ldr	r2, [pc, #16]	; (8005c50 <__NVIC_SetPriorityGrouping+0x44>)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	60d3      	str	r3, [r2, #12]
}
 8005c44:	bf00      	nop
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	e000ed00 	.word	0xe000ed00

08005c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c58:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <__NVIC_GetPriorityGrouping+0x18>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	f003 0307 	and.w	r3, r3, #7
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	e000ed00 	.word	0xe000ed00

08005c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	4603      	mov	r3, r0
 8005c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	db0b      	blt.n	8005c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c82:	79fb      	ldrb	r3, [r7, #7]
 8005c84:	f003 021f 	and.w	r2, r3, #31
 8005c88:	4907      	ldr	r1, [pc, #28]	; (8005ca8 <__NVIC_EnableIRQ+0x38>)
 8005c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	2001      	movs	r0, #1
 8005c92:	fa00 f202 	lsl.w	r2, r0, r2
 8005c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	e000e100 	.word	0xe000e100

08005cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	6039      	str	r1, [r7, #0]
 8005cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	db0a      	blt.n	8005cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	490c      	ldr	r1, [pc, #48]	; (8005cf8 <__NVIC_SetPriority+0x4c>)
 8005cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cca:	0112      	lsls	r2, r2, #4
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	440b      	add	r3, r1
 8005cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cd4:	e00a      	b.n	8005cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	4908      	ldr	r1, [pc, #32]	; (8005cfc <__NVIC_SetPriority+0x50>)
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	3b04      	subs	r3, #4
 8005ce4:	0112      	lsls	r2, r2, #4
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	440b      	add	r3, r1
 8005cea:	761a      	strb	r2, [r3, #24]
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	e000e100 	.word	0xe000e100
 8005cfc:	e000ed00 	.word	0xe000ed00

08005d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b089      	sub	sp, #36	; 0x24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f1c3 0307 	rsb	r3, r3, #7
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	bf28      	it	cs
 8005d1e:	2304      	movcs	r3, #4
 8005d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	3304      	adds	r3, #4
 8005d26:	2b06      	cmp	r3, #6
 8005d28:	d902      	bls.n	8005d30 <NVIC_EncodePriority+0x30>
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	3b03      	subs	r3, #3
 8005d2e:	e000      	b.n	8005d32 <NVIC_EncodePriority+0x32>
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d34:	f04f 32ff 	mov.w	r2, #4294967295
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43da      	mvns	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	401a      	ands	r2, r3
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d48:	f04f 31ff 	mov.w	r1, #4294967295
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d52:	43d9      	mvns	r1, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d58:	4313      	orrs	r3, r2
         );
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3724      	adds	r7, #36	; 0x24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d78:	d301      	bcc.n	8005d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e00f      	b.n	8005d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d7e:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <SysTick_Config+0x40>)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d86:	210f      	movs	r1, #15
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8c:	f7ff ff8e 	bl	8005cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <SysTick_Config+0x40>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d96:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <SysTick_Config+0x40>)
 8005d98:	2207      	movs	r2, #7
 8005d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	e000e010 	.word	0xe000e010

08005dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ff29 	bl	8005c0c <__NVIC_SetPriorityGrouping>
}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b086      	sub	sp, #24
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	4603      	mov	r3, r0
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
 8005dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005dd4:	f7ff ff3e 	bl	8005c54 <__NVIC_GetPriorityGrouping>
 8005dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	6978      	ldr	r0, [r7, #20]
 8005de0:	f7ff ff8e 	bl	8005d00 <NVIC_EncodePriority>
 8005de4:	4602      	mov	r2, r0
 8005de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dea:	4611      	mov	r1, r2
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff ff5d 	bl	8005cac <__NVIC_SetPriority>
}
 8005df2:	bf00      	nop
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	4603      	mov	r3, r0
 8005e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff ff31 	bl	8005c70 <__NVIC_EnableIRQ>
}
 8005e0e:	bf00      	nop
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b082      	sub	sp, #8
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff ffa2 	bl	8005d68 <SysTick_Config>
 8005e24:	4603      	mov	r3, r0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e3c:	f7fe fef8 	bl	8004c30 <HAL_GetTick>
 8005e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e099      	b.n	8005f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e6c:	e00f      	b.n	8005e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e6e:	f7fe fedf 	bl	8004c30 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b05      	cmp	r3, #5
 8005e7a:	d908      	bls.n	8005e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2203      	movs	r2, #3
 8005e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e078      	b.n	8005f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e8      	bne.n	8005e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4b38      	ldr	r3, [pc, #224]	; (8005f88 <HAL_DMA_Init+0x158>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d107      	bne.n	8005ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f023 0307 	bic.w	r3, r3, #7
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d117      	bne.n	8005f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00e      	beq.n	8005f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fa9d 	bl	8006474 <DMA_CheckFifoParam>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2240      	movs	r2, #64	; 0x40
 8005f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e016      	b.n	8005f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa54 	bl	8006408 <DMA_CalcBaseAndBitshift>
 8005f60:	4603      	mov	r3, r0
 8005f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f68:	223f      	movs	r2, #63	; 0x3f
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	f010803f 	.word	0xf010803f

08005f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_DMA_Start_IT+0x26>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e040      	b.n	8006034 <HAL_DMA_Start_IT+0xa8>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d12f      	bne.n	8006026 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f9e6 	bl	80063ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe4:	223f      	movs	r2, #63	; 0x3f
 8005fe6:	409a      	lsls	r2, r3
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0216 	orr.w	r2, r2, #22
 8005ffa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0208 	orr.w	r2, r2, #8
 8006012:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e005      	b.n	8006032 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800602e:	2302      	movs	r3, #2
 8006030:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006032:	7dfb      	ldrb	r3, [r7, #23]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d004      	beq.n	800605a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2280      	movs	r2, #128	; 0x80
 8006054:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e00c      	b.n	8006074 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2205      	movs	r2, #5
 800605e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0201 	bic.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800608c:	4b92      	ldr	r3, [pc, #584]	; (80062d8 <HAL_DMA_IRQHandler+0x258>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a92      	ldr	r2, [pc, #584]	; (80062dc <HAL_DMA_IRQHandler+0x25c>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	0a9b      	lsrs	r3, r3, #10
 8006098:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060aa:	2208      	movs	r2, #8
 80060ac:	409a      	lsls	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01a      	beq.n	80060ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d013      	beq.n	80060ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0204 	bic.w	r2, r2, #4
 80060d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	2208      	movs	r2, #8
 80060da:	409a      	lsls	r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e4:	f043 0201 	orr.w	r2, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f0:	2201      	movs	r2, #1
 80060f2:	409a      	lsls	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d012      	beq.n	8006122 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610e:	2201      	movs	r2, #1
 8006110:	409a      	lsls	r2, r3
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611a:	f043 0202 	orr.w	r2, r3, #2
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006126:	2204      	movs	r2, #4
 8006128:	409a      	lsls	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4013      	ands	r3, r2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d012      	beq.n	8006158 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006144:	2204      	movs	r2, #4
 8006146:	409a      	lsls	r2, r3
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006150:	f043 0204 	orr.w	r2, r3, #4
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615c:	2210      	movs	r2, #16
 800615e:	409a      	lsls	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4013      	ands	r3, r2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d043      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d03c      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617a:	2210      	movs	r2, #16
 800617c:	409a      	lsls	r2, r3
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d018      	beq.n	80061c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d108      	bne.n	80061b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d024      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	4798      	blx	r3
 80061ae:	e01f      	b.n	80061f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01b      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	4798      	blx	r3
 80061c0:	e016      	b.n	80061f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d107      	bne.n	80061e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0208 	bic.w	r2, r2, #8
 80061de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f4:	2220      	movs	r2, #32
 80061f6:	409a      	lsls	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 808e 	beq.w	800631e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8086 	beq.w	800631e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006216:	2220      	movs	r2, #32
 8006218:	409a      	lsls	r2, r3
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b05      	cmp	r3, #5
 8006228:	d136      	bne.n	8006298 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0216 	bic.w	r2, r2, #22
 8006238:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695a      	ldr	r2, [r3, #20]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006248:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d103      	bne.n	800625a <HAL_DMA_IRQHandler+0x1da>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0208 	bic.w	r2, r2, #8
 8006268:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626e:	223f      	movs	r2, #63	; 0x3f
 8006270:	409a      	lsls	r2, r3
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628a:	2b00      	cmp	r3, #0
 800628c:	d07d      	beq.n	800638a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	4798      	blx	r3
        }
        return;
 8006296:	e078      	b.n	800638a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d01c      	beq.n	80062e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d108      	bne.n	80062c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d030      	beq.n	800631e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
 80062c4:	e02b      	b.n	800631e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d027      	beq.n	800631e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
 80062d6:	e022      	b.n	800631e <HAL_DMA_IRQHandler+0x29e>
 80062d8:	20000000 	.word	0x20000000
 80062dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10f      	bne.n	800630e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0210 	bic.w	r2, r2, #16
 80062fc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006322:	2b00      	cmp	r3, #0
 8006324:	d032      	beq.n	800638c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d022      	beq.n	8006378 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2205      	movs	r2, #5
 8006336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 0201 	bic.w	r2, r2, #1
 8006348:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	3301      	adds	r3, #1
 800634e:	60bb      	str	r3, [r7, #8]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	429a      	cmp	r2, r3
 8006354:	d307      	bcc.n	8006366 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1f2      	bne.n	800634a <HAL_DMA_IRQHandler+0x2ca>
 8006364:	e000      	b.n	8006368 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006366:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	4798      	blx	r3
 8006388:	e000      	b.n	800638c <HAL_DMA_IRQHandler+0x30c>
        return;
 800638a:	bf00      	nop
    }
  }
}
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop

08006394 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d108      	bne.n	80063ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80063ea:	e007      	b.n	80063fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	60da      	str	r2, [r3, #12]
}
 80063fc:	bf00      	nop
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	3b10      	subs	r3, #16
 8006418:	4a14      	ldr	r2, [pc, #80]	; (800646c <DMA_CalcBaseAndBitshift+0x64>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	091b      	lsrs	r3, r3, #4
 8006420:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006422:	4a13      	ldr	r2, [pc, #76]	; (8006470 <DMA_CalcBaseAndBitshift+0x68>)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b03      	cmp	r3, #3
 8006434:	d909      	bls.n	800644a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	1d1a      	adds	r2, r3, #4
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	659a      	str	r2, [r3, #88]	; 0x58
 8006448:	e007      	b.n	800645a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006452:	f023 0303 	bic.w	r3, r3, #3
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	aaaaaaab 	.word	0xaaaaaaab
 8006470:	08014a38 	.word	0x08014a38

08006474 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d11f      	bne.n	80064ce <DMA_CheckFifoParam+0x5a>
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b03      	cmp	r3, #3
 8006492:	d856      	bhi.n	8006542 <DMA_CheckFifoParam+0xce>
 8006494:	a201      	add	r2, pc, #4	; (adr r2, 800649c <DMA_CheckFifoParam+0x28>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064ad 	.word	0x080064ad
 80064a0:	080064bf 	.word	0x080064bf
 80064a4:	080064ad 	.word	0x080064ad
 80064a8:	08006543 	.word	0x08006543
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d046      	beq.n	8006546 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064bc:	e043      	b.n	8006546 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064c6:	d140      	bne.n	800654a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064cc:	e03d      	b.n	800654a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d6:	d121      	bne.n	800651c <DMA_CheckFifoParam+0xa8>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d837      	bhi.n	800654e <DMA_CheckFifoParam+0xda>
 80064de:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <DMA_CheckFifoParam+0x70>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	080064f5 	.word	0x080064f5
 80064e8:	080064fb 	.word	0x080064fb
 80064ec:	080064f5 	.word	0x080064f5
 80064f0:	0800650d 	.word	0x0800650d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	73fb      	strb	r3, [r7, #15]
      break;
 80064f8:	e030      	b.n	800655c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d025      	beq.n	8006552 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800650a:	e022      	b.n	8006552 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006514:	d11f      	bne.n	8006556 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800651a:	e01c      	b.n	8006556 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d903      	bls.n	800652a <DMA_CheckFifoParam+0xb6>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b03      	cmp	r3, #3
 8006526:	d003      	beq.n	8006530 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006528:	e018      	b.n	800655c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	73fb      	strb	r3, [r7, #15]
      break;
 800652e:	e015      	b.n	800655c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00e      	beq.n	800655a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	73fb      	strb	r3, [r7, #15]
      break;
 8006540:	e00b      	b.n	800655a <DMA_CheckFifoParam+0xe6>
      break;
 8006542:	bf00      	nop
 8006544:	e00a      	b.n	800655c <DMA_CheckFifoParam+0xe8>
      break;
 8006546:	bf00      	nop
 8006548:	e008      	b.n	800655c <DMA_CheckFifoParam+0xe8>
      break;
 800654a:	bf00      	nop
 800654c:	e006      	b.n	800655c <DMA_CheckFifoParam+0xe8>
      break;
 800654e:	bf00      	nop
 8006550:	e004      	b.n	800655c <DMA_CheckFifoParam+0xe8>
      break;
 8006552:	bf00      	nop
 8006554:	e002      	b.n	800655c <DMA_CheckFifoParam+0xe8>
      break;   
 8006556:	bf00      	nop
 8006558:	e000      	b.n	800655c <DMA_CheckFifoParam+0xe8>
      break;
 800655a:	bf00      	nop
    }
  } 
  
  return status; 
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop

0800656c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800656c:	b480      	push	{r7}
 800656e:	b089      	sub	sp, #36	; 0x24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800657a:	2300      	movs	r3, #0
 800657c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800657e:	2300      	movs	r3, #0
 8006580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
 8006586:	e165      	b.n	8006854 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006588:	2201      	movs	r2, #1
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4013      	ands	r3, r2
 800659a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	f040 8154 	bne.w	800684e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d005      	beq.n	80065be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d130      	bne.n	8006620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	2203      	movs	r2, #3
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43db      	mvns	r3, r3
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4013      	ands	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065f4:	2201      	movs	r2, #1
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	43db      	mvns	r3, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4013      	ands	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	091b      	lsrs	r3, r3, #4
 800660a:	f003 0201 	and.w	r2, r3, #1
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	fa02 f303 	lsl.w	r3, r2, r3
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	4313      	orrs	r3, r2
 8006618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	2b03      	cmp	r3, #3
 800662a:	d017      	beq.n	800665c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	2203      	movs	r2, #3
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	43db      	mvns	r3, r3
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	4013      	ands	r3, r2
 8006642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	4313      	orrs	r3, r2
 8006654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d123      	bne.n	80066b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	08da      	lsrs	r2, r3, #3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3208      	adds	r2, #8
 8006670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	220f      	movs	r2, #15
 8006680:	fa02 f303 	lsl.w	r3, r2, r3
 8006684:	43db      	mvns	r3, r3
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	4013      	ands	r3, r2
 800668a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	4313      	orrs	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	08da      	lsrs	r2, r3, #3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3208      	adds	r2, #8
 80066aa:	69b9      	ldr	r1, [r7, #24]
 80066ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	2203      	movs	r2, #3
 80066bc:	fa02 f303 	lsl.w	r3, r2, r3
 80066c0:	43db      	mvns	r3, r3
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	4013      	ands	r3, r2
 80066c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 0203 	and.w	r2, r3, #3
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	4313      	orrs	r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 80ae 	beq.w	800684e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	4b5d      	ldr	r3, [pc, #372]	; (800686c <HAL_GPIO_Init+0x300>)
 80066f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fa:	4a5c      	ldr	r2, [pc, #368]	; (800686c <HAL_GPIO_Init+0x300>)
 80066fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006700:	6453      	str	r3, [r2, #68]	; 0x44
 8006702:	4b5a      	ldr	r3, [pc, #360]	; (800686c <HAL_GPIO_Init+0x300>)
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800670e:	4a58      	ldr	r2, [pc, #352]	; (8006870 <HAL_GPIO_Init+0x304>)
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	089b      	lsrs	r3, r3, #2
 8006714:	3302      	adds	r3, #2
 8006716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800671a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	220f      	movs	r2, #15
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	43db      	mvns	r3, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	4013      	ands	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a4f      	ldr	r2, [pc, #316]	; (8006874 <HAL_GPIO_Init+0x308>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d025      	beq.n	8006786 <HAL_GPIO_Init+0x21a>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a4e      	ldr	r2, [pc, #312]	; (8006878 <HAL_GPIO_Init+0x30c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01f      	beq.n	8006782 <HAL_GPIO_Init+0x216>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a4d      	ldr	r2, [pc, #308]	; (800687c <HAL_GPIO_Init+0x310>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d019      	beq.n	800677e <HAL_GPIO_Init+0x212>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a4c      	ldr	r2, [pc, #304]	; (8006880 <HAL_GPIO_Init+0x314>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <HAL_GPIO_Init+0x20e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a4b      	ldr	r2, [pc, #300]	; (8006884 <HAL_GPIO_Init+0x318>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00d      	beq.n	8006776 <HAL_GPIO_Init+0x20a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a4a      	ldr	r2, [pc, #296]	; (8006888 <HAL_GPIO_Init+0x31c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d007      	beq.n	8006772 <HAL_GPIO_Init+0x206>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a49      	ldr	r2, [pc, #292]	; (800688c <HAL_GPIO_Init+0x320>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d101      	bne.n	800676e <HAL_GPIO_Init+0x202>
 800676a:	2306      	movs	r3, #6
 800676c:	e00c      	b.n	8006788 <HAL_GPIO_Init+0x21c>
 800676e:	2307      	movs	r3, #7
 8006770:	e00a      	b.n	8006788 <HAL_GPIO_Init+0x21c>
 8006772:	2305      	movs	r3, #5
 8006774:	e008      	b.n	8006788 <HAL_GPIO_Init+0x21c>
 8006776:	2304      	movs	r3, #4
 8006778:	e006      	b.n	8006788 <HAL_GPIO_Init+0x21c>
 800677a:	2303      	movs	r3, #3
 800677c:	e004      	b.n	8006788 <HAL_GPIO_Init+0x21c>
 800677e:	2302      	movs	r3, #2
 8006780:	e002      	b.n	8006788 <HAL_GPIO_Init+0x21c>
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <HAL_GPIO_Init+0x21c>
 8006786:	2300      	movs	r3, #0
 8006788:	69fa      	ldr	r2, [r7, #28]
 800678a:	f002 0203 	and.w	r2, r2, #3
 800678e:	0092      	lsls	r2, r2, #2
 8006790:	4093      	lsls	r3, r2
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	4313      	orrs	r3, r2
 8006796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006798:	4935      	ldr	r1, [pc, #212]	; (8006870 <HAL_GPIO_Init+0x304>)
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	089b      	lsrs	r3, r3, #2
 800679e:	3302      	adds	r3, #2
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067a6:	4b3a      	ldr	r3, [pc, #232]	; (8006890 <HAL_GPIO_Init+0x324>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	43db      	mvns	r3, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067ca:	4a31      	ldr	r2, [pc, #196]	; (8006890 <HAL_GPIO_Init+0x324>)
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80067d0:	4b2f      	ldr	r3, [pc, #188]	; (8006890 <HAL_GPIO_Init+0x324>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	43db      	mvns	r3, r3
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	4013      	ands	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067f4:	4a26      	ldr	r2, [pc, #152]	; (8006890 <HAL_GPIO_Init+0x324>)
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067fa:	4b25      	ldr	r3, [pc, #148]	; (8006890 <HAL_GPIO_Init+0x324>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	43db      	mvns	r3, r3
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	4013      	ands	r3, r2
 8006808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800681e:	4a1c      	ldr	r2, [pc, #112]	; (8006890 <HAL_GPIO_Init+0x324>)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006824:	4b1a      	ldr	r3, [pc, #104]	; (8006890 <HAL_GPIO_Init+0x324>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	43db      	mvns	r3, r3
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	4013      	ands	r3, r2
 8006832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006848:	4a11      	ldr	r2, [pc, #68]	; (8006890 <HAL_GPIO_Init+0x324>)
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	3301      	adds	r3, #1
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	2b0f      	cmp	r3, #15
 8006858:	f67f ae96 	bls.w	8006588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	3724      	adds	r7, #36	; 0x24
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	40023800 	.word	0x40023800
 8006870:	40013800 	.word	0x40013800
 8006874:	40020000 	.word	0x40020000
 8006878:	40020400 	.word	0x40020400
 800687c:	40020800 	.word	0x40020800
 8006880:	40020c00 	.word	0x40020c00
 8006884:	40021000 	.word	0x40021000
 8006888:	40021400 	.word	0x40021400
 800688c:	40021800 	.word	0x40021800
 8006890:	40013c00 	.word	0x40013c00

08006894 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	887b      	ldrh	r3, [r7, #2]
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068ac:	2301      	movs	r3, #1
 80068ae:	73fb      	strb	r3, [r7, #15]
 80068b0:	e001      	b.n	80068b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	807b      	strh	r3, [r7, #2]
 80068d0:	4613      	mov	r3, r2
 80068d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068d4:	787b      	ldrb	r3, [r7, #1]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068da:	887a      	ldrh	r2, [r7, #2]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068e0:	e003      	b.n	80068ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068e2:	887b      	ldrh	r3, [r7, #2]
 80068e4:	041a      	lsls	r2, r3, #16
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	619a      	str	r2, [r3, #24]
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006902:	4b08      	ldr	r3, [pc, #32]	; (8006924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006904:	695a      	ldr	r2, [r3, #20]
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	4013      	ands	r3, r2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d006      	beq.n	800691c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800690e:	4a05      	ldr	r2, [pc, #20]	; (8006924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006910:	88fb      	ldrh	r3, [r7, #6]
 8006912:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006914:	88fb      	ldrh	r3, [r7, #6]
 8006916:	4618      	mov	r0, r3
 8006918:	f7fd fc1e 	bl	8004158 <HAL_GPIO_EXTI_Callback>
  }
}
 800691c:	bf00      	nop
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40013c00 	.word	0x40013c00

08006928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e12b      	b.n	8006b92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fd fe86 	bl	8004660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2224      	movs	r2, #36	; 0x24
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0201 	bic.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800697a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800698a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800698c:	f001 ff98 	bl	80088c0 <HAL_RCC_GetPCLK1Freq>
 8006990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	4a81      	ldr	r2, [pc, #516]	; (8006b9c <HAL_I2C_Init+0x274>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d807      	bhi.n	80069ac <HAL_I2C_Init+0x84>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4a80      	ldr	r2, [pc, #512]	; (8006ba0 <HAL_I2C_Init+0x278>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	bf94      	ite	ls
 80069a4:	2301      	movls	r3, #1
 80069a6:	2300      	movhi	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	e006      	b.n	80069ba <HAL_I2C_Init+0x92>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4a7d      	ldr	r2, [pc, #500]	; (8006ba4 <HAL_I2C_Init+0x27c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	bf94      	ite	ls
 80069b4:	2301      	movls	r3, #1
 80069b6:	2300      	movhi	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e0e7      	b.n	8006b92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4a78      	ldr	r2, [pc, #480]	; (8006ba8 <HAL_I2C_Init+0x280>)
 80069c6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ca:	0c9b      	lsrs	r3, r3, #18
 80069cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4a6a      	ldr	r2, [pc, #424]	; (8006b9c <HAL_I2C_Init+0x274>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d802      	bhi.n	80069fc <HAL_I2C_Init+0xd4>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	3301      	adds	r3, #1
 80069fa:	e009      	b.n	8006a10 <HAL_I2C_Init+0xe8>
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a02:	fb02 f303 	mul.w	r3, r2, r3
 8006a06:	4a69      	ldr	r2, [pc, #420]	; (8006bac <HAL_I2C_Init+0x284>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	099b      	lsrs	r3, r3, #6
 8006a0e:	3301      	adds	r3, #1
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	430b      	orrs	r3, r1
 8006a16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	495c      	ldr	r1, [pc, #368]	; (8006b9c <HAL_I2C_Init+0x274>)
 8006a2c:	428b      	cmp	r3, r1
 8006a2e:	d819      	bhi.n	8006a64 <HAL_I2C_Init+0x13c>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	1e59      	subs	r1, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a3e:	1c59      	adds	r1, r3, #1
 8006a40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a44:	400b      	ands	r3, r1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <HAL_I2C_Init+0x138>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	1e59      	subs	r1, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a58:	3301      	adds	r3, #1
 8006a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a5e:	e051      	b.n	8006b04 <HAL_I2C_Init+0x1dc>
 8006a60:	2304      	movs	r3, #4
 8006a62:	e04f      	b.n	8006b04 <HAL_I2C_Init+0x1dc>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d111      	bne.n	8006a90 <HAL_I2C_Init+0x168>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	1e58      	subs	r0, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6859      	ldr	r1, [r3, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	440b      	add	r3, r1
 8006a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a7e:	3301      	adds	r3, #1
 8006a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	e012      	b.n	8006ab6 <HAL_I2C_Init+0x18e>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	1e58      	subs	r0, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6859      	ldr	r1, [r3, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	0099      	lsls	r1, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bf0c      	ite	eq
 8006ab0:	2301      	moveq	r3, #1
 8006ab2:	2300      	movne	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_I2C_Init+0x196>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e022      	b.n	8006b04 <HAL_I2C_Init+0x1dc>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10e      	bne.n	8006ae4 <HAL_I2C_Init+0x1bc>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1e58      	subs	r0, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6859      	ldr	r1, [r3, #4]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	440b      	add	r3, r1
 8006ad4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ad8:	3301      	adds	r3, #1
 8006ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae2:	e00f      	b.n	8006b04 <HAL_I2C_Init+0x1dc>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	1e58      	subs	r0, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6859      	ldr	r1, [r3, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	0099      	lsls	r1, r3, #2
 8006af4:	440b      	add	r3, r1
 8006af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006afa:	3301      	adds	r3, #1
 8006afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	6809      	ldr	r1, [r1, #0]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69da      	ldr	r2, [r3, #28]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	430a      	orrs	r2, r1
 8006b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6911      	ldr	r1, [r2, #16]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68d2      	ldr	r2, [r2, #12]
 8006b3e:	4311      	orrs	r1, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6812      	ldr	r2, [r2, #0]
 8006b44:	430b      	orrs	r3, r1
 8006b46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	695a      	ldr	r2, [r3, #20]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0201 	orr.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	000186a0 	.word	0x000186a0
 8006ba0:	001e847f 	.word	0x001e847f
 8006ba4:	003d08ff 	.word	0x003d08ff
 8006ba8:	431bde83 	.word	0x431bde83
 8006bac:	10624dd3 	.word	0x10624dd3

08006bb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	607a      	str	r2, [r7, #4]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	817b      	strh	r3, [r7, #10]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bc4:	f7fe f834 	bl	8004c30 <HAL_GetTick>
 8006bc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	f040 80e0 	bne.w	8006d98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	2319      	movs	r3, #25
 8006bde:	2201      	movs	r2, #1
 8006be0:	4970      	ldr	r1, [pc, #448]	; (8006da4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 f964 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e0d3      	b.n	8006d9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <HAL_I2C_Master_Transmit+0x50>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e0cc      	b.n	8006d9a <HAL_I2C_Master_Transmit+0x1ea>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d007      	beq.n	8006c26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0201 	orr.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2221      	movs	r2, #33	; 0x21
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2210      	movs	r2, #16
 8006c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	893a      	ldrh	r2, [r7, #8]
 8006c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4a50      	ldr	r2, [pc, #320]	; (8006da8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006c66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c68:	8979      	ldrh	r1, [r7, #10]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	6a3a      	ldr	r2, [r7, #32]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 f89c 	bl	8006dac <I2C_MasterRequestWrite>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e08d      	b.n	8006d9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c7e:	2300      	movs	r3, #0
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006c94:	e066      	b.n	8006d64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	6a39      	ldr	r1, [r7, #32]
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f9de 	bl	800705c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00d      	beq.n	8006cc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d107      	bne.n	8006cbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e06b      	b.n	8006d9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	781a      	ldrb	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d11b      	bne.n	8006d38 <HAL_I2C_Master_Transmit+0x188>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d017      	beq.n	8006d38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	781a      	ldrb	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	6a39      	ldr	r1, [r7, #32]
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f9ce 	bl	80070de <I2C_WaitOnBTFFlagUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00d      	beq.n	8006d64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d107      	bne.n	8006d60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e01a      	b.n	8006d9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d194      	bne.n	8006c96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	e000      	b.n	8006d9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006d98:	2302      	movs	r3, #2
  }
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	00100002 	.word	0x00100002
 8006da8:	ffff0000 	.word	0xffff0000

08006dac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	607a      	str	r2, [r7, #4]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	460b      	mov	r3, r1
 8006dba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d006      	beq.n	8006dd6 <I2C_MasterRequestWrite+0x2a>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d003      	beq.n	8006dd6 <I2C_MasterRequestWrite+0x2a>
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006dd4:	d108      	bne.n	8006de8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	e00b      	b.n	8006e00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	2b12      	cmp	r3, #18
 8006dee:	d107      	bne.n	8006e00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f84f 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00d      	beq.n	8006e34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e26:	d103      	bne.n	8006e30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e035      	b.n	8006ea0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e3c:	d108      	bne.n	8006e50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e3e:	897b      	ldrh	r3, [r7, #10]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e4c:	611a      	str	r2, [r3, #16]
 8006e4e:	e01b      	b.n	8006e88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006e50:	897b      	ldrh	r3, [r7, #10]
 8006e52:	11db      	asrs	r3, r3, #7
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	f003 0306 	and.w	r3, r3, #6
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f063 030f 	orn	r3, r3, #15
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	490e      	ldr	r1, [pc, #56]	; (8006ea8 <I2C_MasterRequestWrite+0xfc>)
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 f875 	bl	8006f5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e010      	b.n	8006ea0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006e7e:	897b      	ldrh	r3, [r7, #10]
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	4907      	ldr	r1, [pc, #28]	; (8006eac <I2C_MasterRequestWrite+0x100>)
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 f865 	bl	8006f5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e000      	b.n	8006ea0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	00010008 	.word	0x00010008
 8006eac:	00010002 	.word	0x00010002

08006eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ec0:	e025      	b.n	8006f0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec8:	d021      	beq.n	8006f0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eca:	f7fd feb1 	bl	8004c30 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d302      	bcc.n	8006ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d116      	bne.n	8006f0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	f043 0220 	orr.w	r2, r3, #32
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e023      	b.n	8006f56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	0c1b      	lsrs	r3, r3, #16
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d10d      	bne.n	8006f34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	43da      	mvns	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4013      	ands	r3, r2
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bf0c      	ite	eq
 8006f2a:	2301      	moveq	r3, #1
 8006f2c:	2300      	movne	r3, #0
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	e00c      	b.n	8006f4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	43da      	mvns	r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	bf0c      	ite	eq
 8006f46:	2301      	moveq	r3, #1
 8006f48:	2300      	movne	r3, #0
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	79fb      	ldrb	r3, [r7, #7]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d0b6      	beq.n	8006ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f6c:	e051      	b.n	8007012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f7c:	d123      	bne.n	8006fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f043 0204 	orr.w	r2, r3, #4
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e046      	b.n	8007054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d021      	beq.n	8007012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fce:	f7fd fe2f 	bl	8004c30 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d302      	bcc.n	8006fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d116      	bne.n	8007012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f043 0220 	orr.w	r2, r3, #32
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e020      	b.n	8007054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	0c1b      	lsrs	r3, r3, #16
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b01      	cmp	r3, #1
 800701a:	d10c      	bne.n	8007036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	43da      	mvns	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4013      	ands	r3, r2
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	bf14      	ite	ne
 800702e:	2301      	movne	r3, #1
 8007030:	2300      	moveq	r3, #0
 8007032:	b2db      	uxtb	r3, r3
 8007034:	e00b      	b.n	800704e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	43da      	mvns	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4013      	ands	r3, r2
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	bf14      	ite	ne
 8007048:	2301      	movne	r3, #1
 800704a:	2300      	moveq	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d18d      	bne.n	8006f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007068:	e02d      	b.n	80070c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 f878 	bl	8007160 <I2C_IsAcknowledgeFailed>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e02d      	b.n	80070d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d021      	beq.n	80070c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007082:	f7fd fdd5 	bl	8004c30 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	429a      	cmp	r2, r3
 8007090:	d302      	bcc.n	8007098 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d116      	bne.n	80070c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	f043 0220 	orr.w	r2, r3, #32
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e007      	b.n	80070d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d0:	2b80      	cmp	r3, #128	; 0x80
 80070d2:	d1ca      	bne.n	800706a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070ea:	e02d      	b.n	8007148 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f837 	bl	8007160 <I2C_IsAcknowledgeFailed>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e02d      	b.n	8007158 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007102:	d021      	beq.n	8007148 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007104:	f7fd fd94 	bl	8004c30 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	429a      	cmp	r2, r3
 8007112:	d302      	bcc.n	800711a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d116      	bne.n	8007148 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007134:	f043 0220 	orr.w	r2, r3, #32
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e007      	b.n	8007158 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	f003 0304 	and.w	r3, r3, #4
 8007152:	2b04      	cmp	r3, #4
 8007154:	d1ca      	bne.n	80070ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007176:	d11b      	bne.n	80071b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007180:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	f043 0204 	orr.w	r2, r3, #4
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e034      	b.n	800723a <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80071d8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f245 5255 	movw	r2, #21845	; 0x5555
 80071e2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	6852      	ldr	r2, [r2, #4]
 80071ec:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6892      	ldr	r2, [r2, #8]
 80071f6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80071f8:	f7fd fd1a 	bl	8004c30 <HAL_GetTick>
 80071fc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80071fe:	e00f      	b.n	8007220 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007200:	f7fd fd16 	bl	8004c30 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b31      	cmp	r3, #49	; 0x31
 800720c:	d908      	bls.n	8007220 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f003 0303 	and.w	r3, r3, #3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e00c      	b.n	800723a <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e8      	bne.n	8007200 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007236:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007244:	b08f      	sub	sp, #60	; 0x3c
 8007246:	af0a      	add	r7, sp, #40	; 0x28
 8007248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e116      	b.n	8007482 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d106      	bne.n	8007274 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f00c fb7e 	bl	8013970 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2203      	movs	r2, #3
 8007278:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007284:	2b00      	cmp	r3, #0
 8007286:	d102      	bne.n	800728e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4618      	mov	r0, r3
 8007294:	f005 fa25 	bl	800c6e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	603b      	str	r3, [r7, #0]
 800729e:	687e      	ldr	r6, [r7, #4]
 80072a0:	466d      	mov	r5, sp
 80072a2:	f106 0410 	add.w	r4, r6, #16
 80072a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80072b6:	1d33      	adds	r3, r6, #4
 80072b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072ba:	6838      	ldr	r0, [r7, #0]
 80072bc:	f005 f8fc 	bl	800c4b8 <USB_CoreInit>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e0d7      	b.n	8007482 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2100      	movs	r1, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	f005 fa13 	bl	800c704 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072de:	2300      	movs	r3, #0
 80072e0:	73fb      	strb	r3, [r7, #15]
 80072e2:	e04a      	b.n	800737a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072e4:	7bfa      	ldrb	r2, [r7, #15]
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	4613      	mov	r3, r2
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	1a9b      	subs	r3, r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	333d      	adds	r3, #61	; 0x3d
 80072f4:	2201      	movs	r2, #1
 80072f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072f8:	7bfa      	ldrb	r2, [r7, #15]
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	1a9b      	subs	r3, r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	333c      	adds	r3, #60	; 0x3c
 8007308:	7bfa      	ldrb	r2, [r7, #15]
 800730a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800730c:	7bfa      	ldrb	r2, [r7, #15]
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	b298      	uxth	r0, r3
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	4613      	mov	r3, r2
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	440b      	add	r3, r1
 800731e:	3342      	adds	r3, #66	; 0x42
 8007320:	4602      	mov	r2, r0
 8007322:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007324:	7bfa      	ldrb	r2, [r7, #15]
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	1a9b      	subs	r3, r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	333f      	adds	r3, #63	; 0x3f
 8007334:	2200      	movs	r2, #0
 8007336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007338:	7bfa      	ldrb	r2, [r7, #15]
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	4613      	mov	r3, r2
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	440b      	add	r3, r1
 8007346:	3344      	adds	r3, #68	; 0x44
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800734c:	7bfa      	ldrb	r2, [r7, #15]
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	4613      	mov	r3, r2
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	440b      	add	r3, r1
 800735a:	3348      	adds	r3, #72	; 0x48
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007360:	7bfa      	ldrb	r2, [r7, #15]
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4613      	mov	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	1a9b      	subs	r3, r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	3350      	adds	r3, #80	; 0x50
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	3301      	adds	r3, #1
 8007378:	73fb      	strb	r3, [r7, #15]
 800737a:	7bfa      	ldrb	r2, [r7, #15]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d3af      	bcc.n	80072e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]
 8007388:	e044      	b.n	8007414 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800738a:	7bfa      	ldrb	r2, [r7, #15]
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	1a9b      	subs	r3, r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	440b      	add	r3, r1
 8007398:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800739c:	2200      	movs	r2, #0
 800739e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80073a0:	7bfa      	ldrb	r2, [r7, #15]
 80073a2:	6879      	ldr	r1, [r7, #4]
 80073a4:	4613      	mov	r3, r2
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	440b      	add	r3, r1
 80073ae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80073b2:	7bfa      	ldrb	r2, [r7, #15]
 80073b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80073b6:	7bfa      	ldrb	r2, [r7, #15]
 80073b8:	6879      	ldr	r1, [r7, #4]
 80073ba:	4613      	mov	r3, r2
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80073c8:	2200      	movs	r2, #0
 80073ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073cc:	7bfa      	ldrb	r2, [r7, #15]
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	4613      	mov	r3, r2
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073e2:	7bfa      	ldrb	r2, [r7, #15]
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	4613      	mov	r3, r2
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	1a9b      	subs	r3, r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	440b      	add	r3, r1
 80073f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073f8:	7bfa      	ldrb	r2, [r7, #15]
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	4613      	mov	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	1a9b      	subs	r3, r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	440b      	add	r3, r1
 8007406:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	3301      	adds	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
 8007414:	7bfa      	ldrb	r2, [r7, #15]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	429a      	cmp	r2, r3
 800741c:	d3b5      	bcc.n	800738a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	687e      	ldr	r6, [r7, #4]
 8007426:	466d      	mov	r5, sp
 8007428:	f106 0410 	add.w	r4, r6, #16
 800742c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800742e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007434:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007438:	e885 0003 	stmia.w	r5, {r0, r1}
 800743c:	1d33      	adds	r3, r6, #4
 800743e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007440:	6838      	ldr	r0, [r7, #0]
 8007442:	f005 f9ab 	bl	800c79c <USB_DevInit>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e014      	b.n	8007482 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	2b01      	cmp	r3, #1
 800746e:	d102      	bne.n	8007476 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 f8bf 	bl	80085f4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f006 fa1a 	bl	800d8b4 <USB_DevDisconnect>

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800748a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d101      	bne.n	80074a6 <HAL_PCD_Start+0x1c>
 80074a2:	2302      	movs	r3, #2
 80074a4:	e020      	b.n	80074e8 <HAL_PCD_Start+0x5e>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d109      	bne.n	80074ca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d005      	beq.n	80074ca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f005 f8f6 	bl	800c6c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4618      	mov	r0, r3
 80074da:	f006 f9ca 	bl	800d872 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80074f0:	b590      	push	{r4, r7, lr}
 80074f2:	b08d      	sub	sp, #52	; 0x34
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f006 fa88 	bl	800da1c <USB_GetMode>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	f040 83ca 	bne.w	8007ca8 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4618      	mov	r0, r3
 800751a:	f006 f9ec 	bl	800d8f6 <USB_ReadInterrupts>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 83c0 	beq.w	8007ca6 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f006 f9e3 	bl	800d8f6 <USB_ReadInterrupts>
 8007530:	4603      	mov	r3, r0
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b02      	cmp	r3, #2
 8007538:	d107      	bne.n	800754a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	695a      	ldr	r2, [r3, #20]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f002 0202 	and.w	r2, r2, #2
 8007548:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4618      	mov	r0, r3
 8007550:	f006 f9d1 	bl	800d8f6 <USB_ReadInterrupts>
 8007554:	4603      	mov	r3, r0
 8007556:	f003 0310 	and.w	r3, r3, #16
 800755a:	2b10      	cmp	r3, #16
 800755c:	d161      	bne.n	8007622 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	699a      	ldr	r2, [r3, #24]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0210 	bic.w	r2, r2, #16
 800756c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f003 020f 	and.w	r2, r3, #15
 800757a:	4613      	mov	r3, r2
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	1a9b      	subs	r3, r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	4413      	add	r3, r2
 800758a:	3304      	adds	r3, #4
 800758c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	0c5b      	lsrs	r3, r3, #17
 8007592:	f003 030f 	and.w	r3, r3, #15
 8007596:	2b02      	cmp	r3, #2
 8007598:	d124      	bne.n	80075e4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80075a0:	4013      	ands	r3, r2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d035      	beq.n	8007612 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	091b      	lsrs	r3, r3, #4
 80075ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80075b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	461a      	mov	r2, r3
 80075b8:	6a38      	ldr	r0, [r7, #32]
 80075ba:	f006 f808 	bl	800d5ce <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	091b      	lsrs	r3, r3, #4
 80075c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075ca:	441a      	add	r2, r3
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	699a      	ldr	r2, [r3, #24]
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	091b      	lsrs	r3, r3, #4
 80075d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075dc:	441a      	add	r2, r3
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	619a      	str	r2, [r3, #24]
 80075e2:	e016      	b.n	8007612 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	0c5b      	lsrs	r3, r3, #17
 80075e8:	f003 030f 	and.w	r3, r3, #15
 80075ec:	2b06      	cmp	r3, #6
 80075ee:	d110      	bne.n	8007612 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075f6:	2208      	movs	r2, #8
 80075f8:	4619      	mov	r1, r3
 80075fa:	6a38      	ldr	r0, [r7, #32]
 80075fc:	f005 ffe7 	bl	800d5ce <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	699a      	ldr	r2, [r3, #24]
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	091b      	lsrs	r3, r3, #4
 8007608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800760c:	441a      	add	r2, r3
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0210 	orr.w	r2, r2, #16
 8007620:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4618      	mov	r0, r3
 8007628:	f006 f965 	bl	800d8f6 <USB_ReadInterrupts>
 800762c:	4603      	mov	r3, r0
 800762e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007632:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007636:	d16e      	bne.n	8007716 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4618      	mov	r0, r3
 8007642:	f006 f96b 	bl	800d91c <USB_ReadDevAllOutEpInterrupt>
 8007646:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007648:	e062      	b.n	8007710 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800764a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d057      	beq.n	8007704 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	4611      	mov	r1, r2
 800765e:	4618      	mov	r0, r3
 8007660:	f006 f990 	bl	800d984 <USB_ReadDevOutEPInterrupt>
 8007664:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00c      	beq.n	800768a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767c:	461a      	mov	r2, r3
 800767e:	2301      	movs	r3, #1
 8007680:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fe0b 	bl	80082a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00c      	beq.n	80076ae <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a0:	461a      	mov	r2, r3
 80076a2:	2308      	movs	r3, #8
 80076a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80076a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 ff05 	bl	80084b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f003 0310 	and.w	r3, r3, #16
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d008      	beq.n	80076ca <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c4:	461a      	mov	r2, r3
 80076c6:	2310      	movs	r3, #16
 80076c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f003 0320 	and.w	r3, r3, #32
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d008      	beq.n	80076e6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e0:	461a      	mov	r2, r3
 80076e2:	2320      	movs	r3, #32
 80076e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d009      	beq.n	8007704 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fc:	461a      	mov	r2, r3
 80076fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007702:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	3301      	adds	r3, #1
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770c:	085b      	lsrs	r3, r3, #1
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007712:	2b00      	cmp	r3, #0
 8007714:	d199      	bne.n	800764a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f006 f8eb 	bl	800d8f6 <USB_ReadInterrupts>
 8007720:	4603      	mov	r3, r0
 8007722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007726:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800772a:	f040 80c0 	bne.w	80078ae <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4618      	mov	r0, r3
 8007734:	f006 f90c 	bl	800d950 <USB_ReadDevAllInEpInterrupt>
 8007738:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800773e:	e0b2      	b.n	80078a6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 80a7 	beq.w	800789a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f006 f932 	bl	800d9c0 <USB_ReadDevInEPInterrupt>
 800775c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d057      	beq.n	8007818 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	2201      	movs	r2, #1
 8007770:	fa02 f303 	lsl.w	r3, r2, r3
 8007774:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	43db      	mvns	r3, r3
 8007782:	69f9      	ldr	r1, [r7, #28]
 8007784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007788:	4013      	ands	r3, r2
 800778a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	461a      	mov	r2, r3
 800779a:	2301      	movs	r3, #1
 800779c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d132      	bne.n	800780c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077aa:	4613      	mov	r3, r2
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	1a9b      	subs	r3, r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	440b      	add	r3, r1
 80077b4:	3348      	adds	r3, #72	; 0x48
 80077b6:	6819      	ldr	r1, [r3, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077bc:	4613      	mov	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4403      	add	r3, r0
 80077c6:	3344      	adds	r3, #68	; 0x44
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4419      	add	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d0:	4613      	mov	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	1a9b      	subs	r3, r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4403      	add	r3, r0
 80077da:	3348      	adds	r3, #72	; 0x48
 80077dc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d113      	bne.n	800780c <HAL_PCD_IRQHandler+0x31c>
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e8:	4613      	mov	r3, r2
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	1a9b      	subs	r3, r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	440b      	add	r3, r1
 80077f2:	3350      	adds	r3, #80	; 0x50
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d108      	bne.n	800780c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007804:	461a      	mov	r2, r3
 8007806:	2101      	movs	r1, #1
 8007808:	f006 f93a 	bl	800da80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	b2db      	uxtb	r3, r3
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f00c f93b 	bl	8013a8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d008      	beq.n	8007834 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782e:	461a      	mov	r2, r3
 8007830:	2308      	movs	r3, #8
 8007832:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f003 0310 	and.w	r3, r3, #16
 800783a:	2b00      	cmp	r3, #0
 800783c:	d008      	beq.n	8007850 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784a:	461a      	mov	r2, r3
 800784c:	2310      	movs	r3, #16
 800784e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007856:	2b00      	cmp	r3, #0
 8007858:	d008      	beq.n	800786c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	4413      	add	r3, r2
 8007862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007866:	461a      	mov	r2, r3
 8007868:	2340      	movs	r3, #64	; 0x40
 800786a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d008      	beq.n	8007888 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007882:	461a      	mov	r2, r3
 8007884:	2302      	movs	r3, #2
 8007886:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fc75 	bl	8008184 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	3301      	adds	r3, #1
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f47f af49 	bne.w	8007740 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f006 f81f 	bl	800d8f6 <USB_ReadInterrupts>
 80078b8:	4603      	mov	r3, r0
 80078ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078c2:	d122      	bne.n	800790a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078d2:	f023 0301 	bic.w	r3, r3, #1
 80078d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d108      	bne.n	80078f4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80078ea:	2100      	movs	r1, #0
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f00c fb3d 	bl	8013f6c <HAL_PCDEx_LPM_Callback>
 80078f2:	e002      	b.n	80078fa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f00c f941 	bl	8013b7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	695a      	ldr	r2, [r3, #20]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f005 fff1 	bl	800d8f6 <USB_ReadInterrupts>
 8007914:	4603      	mov	r3, r0
 8007916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800791a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800791e:	d112      	bne.n	8007946 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b01      	cmp	r3, #1
 800792e:	d102      	bne.n	8007936 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f00c f8fd 	bl	8013b30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	695a      	ldr	r2, [r3, #20]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007944:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4618      	mov	r0, r3
 800794c:	f005 ffd3 	bl	800d8f6 <USB_ReadInterrupts>
 8007950:	4603      	mov	r3, r0
 8007952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800795a:	d121      	bne.n	80079a0 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695a      	ldr	r2, [r3, #20]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800796a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007972:	2b00      	cmp	r3, #0
 8007974:	d111      	bne.n	800799a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007984:	089b      	lsrs	r3, r3, #2
 8007986:	f003 020f 	and.w	r2, r3, #15
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007990:	2101      	movs	r1, #1
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f00c faea 	bl	8013f6c <HAL_PCDEx_LPM_Callback>
 8007998:	e002      	b.n	80079a0 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f00c f8c8 	bl	8013b30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f005 ffa6 	bl	800d8f6 <USB_ReadInterrupts>
 80079aa:	4603      	mov	r3, r0
 80079ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b4:	f040 80c7 	bne.w	8007b46 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	69fa      	ldr	r2, [r7, #28]
 80079c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2110      	movs	r1, #16
 80079d2:	4618      	mov	r0, r3
 80079d4:	f005 f840 	bl	800ca58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079d8:	2300      	movs	r3, #0
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079dc:	e056      	b.n	8007a8c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ea:	461a      	mov	r2, r3
 80079ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a02:	0151      	lsls	r1, r2, #5
 8007a04:	69fa      	ldr	r2, [r7, #28]
 8007a06:	440a      	add	r2, r1
 8007a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a10:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a22:	0151      	lsls	r1, r2, #5
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	440a      	add	r2, r1
 8007a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a56:	0151      	lsls	r1, r2, #5
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	440a      	add	r2, r1
 8007a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a76:	0151      	lsls	r1, r2, #5
 8007a78:	69fa      	ldr	r2, [r7, #28]
 8007a7a:	440a      	add	r2, r1
 8007a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a88:	3301      	adds	r3, #1
 8007a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d3a3      	bcc.n	80079de <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	69fa      	ldr	r2, [r7, #28]
 8007aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aa4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007aa8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d016      	beq.n	8007ae0 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ac2:	f043 030b 	orr.w	r3, r3, #11
 8007ac6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ad8:	f043 030b 	orr.w	r3, r3, #11
 8007adc:	6453      	str	r3, [r2, #68]	; 0x44
 8007ade:	e015      	b.n	8007b0c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007af2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007af6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b06:	f043 030b 	orr.w	r3, r3, #11
 8007b0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b30:	461a      	mov	r2, r3
 8007b32:	f005 ffa5 	bl	800da80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	695a      	ldr	r2, [r3, #20]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f005 fed3 	bl	800d8f6 <USB_ReadInterrupts>
 8007b50:	4603      	mov	r3, r0
 8007b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b5a:	d124      	bne.n	8007ba6 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f005 ff69 	bl	800da38 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f004 ffd1 	bl	800cb12 <USB_GetDevSpeed>
 8007b70:	4603      	mov	r3, r0
 8007b72:	461a      	mov	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681c      	ldr	r4, [r3, #0]
 8007b7c:	f000 fe94 	bl	80088a8 <HAL_RCC_GetHCLKFreq>
 8007b80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f004 fcf6 	bl	800c57c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f00b ffa4 	bl	8013ade <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	695a      	ldr	r2, [r3, #20]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f005 fea3 	bl	800d8f6 <USB_ReadInterrupts>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b08      	cmp	r3, #8
 8007bb8:	d10a      	bne.n	8007bd0 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f00b ff81 	bl	8013ac2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695a      	ldr	r2, [r3, #20]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f002 0208 	and.w	r2, r2, #8
 8007bce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f005 fe8e 	bl	800d8f6 <USB_ReadInterrupts>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007be4:	d10f      	bne.n	8007c06 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f00b ffe3 	bl	8013bbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695a      	ldr	r2, [r3, #20]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f005 fe73 	bl	800d8f6 <USB_ReadInterrupts>
 8007c10:	4603      	mov	r3, r0
 8007c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c1a:	d10f      	bne.n	8007c3c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f00b ffb6 	bl	8013b98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	695a      	ldr	r2, [r3, #20]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f005 fe58 	bl	800d8f6 <USB_ReadInterrupts>
 8007c46:	4603      	mov	r3, r0
 8007c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c50:	d10a      	bne.n	8007c68 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f00b ffc4 	bl	8013be0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695a      	ldr	r2, [r3, #20]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f005 fe42 	bl	800d8f6 <USB_ReadInterrupts>
 8007c72:	4603      	mov	r3, r0
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d115      	bne.n	8007ca8 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f00b ffb4 	bl	8013bfc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6859      	ldr	r1, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	605a      	str	r2, [r3, #4]
 8007ca4:	e000      	b.n	8007ca8 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007ca6:	bf00      	nop
    }
  }
}
 8007ca8:	3734      	adds	r7, #52	; 0x34
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd90      	pop	{r4, r7, pc}

08007cae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_PCD_SetAddress+0x1a>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e013      	b.n	8007cf0 <HAL_PCD_SetAddress+0x42>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	78fa      	ldrb	r2, [r7, #3]
 8007cde:	4611      	mov	r1, r2
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f005 fda0 	bl	800d826 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	4608      	mov	r0, r1
 8007d02:	4611      	mov	r1, r2
 8007d04:	461a      	mov	r2, r3
 8007d06:	4603      	mov	r3, r0
 8007d08:	70fb      	strb	r3, [r7, #3]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	803b      	strh	r3, [r7, #0]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	da0f      	bge.n	8007d3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	f003 020f 	and.w	r2, r3, #15
 8007d24:	4613      	mov	r3, r2
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	1a9b      	subs	r3, r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	3338      	adds	r3, #56	; 0x38
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	4413      	add	r3, r2
 8007d32:	3304      	adds	r3, #4
 8007d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	705a      	strb	r2, [r3, #1]
 8007d3c:	e00f      	b.n	8007d5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	f003 020f 	and.w	r2, r3, #15
 8007d44:	4613      	mov	r3, r2
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	1a9b      	subs	r3, r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	4413      	add	r3, r2
 8007d54:	3304      	adds	r3, #4
 8007d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	f003 030f 	and.w	r3, r3, #15
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d6a:	883a      	ldrh	r2, [r7, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	78ba      	ldrb	r2, [r7, #2]
 8007d74:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d88:	78bb      	ldrb	r3, [r7, #2]
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d102      	bne.n	8007d94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <HAL_PCD_EP_Open+0xaa>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e00e      	b.n	8007dc0 <HAL_PCD_EP_Open+0xc8>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68f9      	ldr	r1, [r7, #12]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f004 fed3 	bl	800cb5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	da0f      	bge.n	8007dfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	f003 020f 	and.w	r2, r3, #15
 8007de2:	4613      	mov	r3, r2
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	1a9b      	subs	r3, r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	3338      	adds	r3, #56	; 0x38
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	4413      	add	r3, r2
 8007df0:	3304      	adds	r3, #4
 8007df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2201      	movs	r2, #1
 8007df8:	705a      	strb	r2, [r3, #1]
 8007dfa:	e00f      	b.n	8007e1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	f003 020f 	and.w	r2, r3, #15
 8007e02:	4613      	mov	r3, r2
 8007e04:	00db      	lsls	r3, r3, #3
 8007e06:	1a9b      	subs	r3, r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	4413      	add	r3, r2
 8007e12:	3304      	adds	r3, #4
 8007e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	f003 030f 	and.w	r3, r3, #15
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <HAL_PCD_EP_Close+0x6e>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e00e      	b.n	8007e54 <HAL_PCD_EP_Close+0x8c>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68f9      	ldr	r1, [r7, #12]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f004 ff11 	bl	800cc6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	607a      	str	r2, [r7, #4]
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e6c:	7afb      	ldrb	r3, [r7, #11]
 8007e6e:	f003 020f 	and.w	r2, r3, #15
 8007e72:	4613      	mov	r3, r2
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	1a9b      	subs	r3, r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	4413      	add	r3, r2
 8007e82:	3304      	adds	r3, #4
 8007e84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2200      	movs	r2, #0
 8007e96:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e9e:	7afb      	ldrb	r3, [r7, #11]
 8007ea0:	f003 030f 	and.w	r3, r3, #15
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d102      	bne.n	8007eb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	461a      	mov	r2, r3
 8007ece:	6979      	ldr	r1, [r7, #20]
 8007ed0:	f005 f9ec 	bl	800d2ac <USB_EP0StartXfer>
 8007ed4:	e008      	b.n	8007ee8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6818      	ldr	r0, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	6979      	ldr	r1, [r7, #20]
 8007ee4:	f004 ff9e 	bl	800ce24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	f003 020f 	and.w	r2, r3, #15
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	4613      	mov	r3, r2
 8007f08:	00db      	lsls	r3, r3, #3
 8007f0a:	1a9b      	subs	r3, r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	440b      	add	r3, r1
 8007f10:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007f14:	681b      	ldr	r3, [r3, #0]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b086      	sub	sp, #24
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	603b      	str	r3, [r7, #0]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f32:	7afb      	ldrb	r3, [r7, #11]
 8007f34:	f003 020f 	and.w	r2, r3, #15
 8007f38:	4613      	mov	r3, r2
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	1a9b      	subs	r3, r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	3338      	adds	r3, #56	; 0x38
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4413      	add	r3, r2
 8007f46:	3304      	adds	r3, #4
 8007f48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f62:	7afb      	ldrb	r3, [r7, #11]
 8007f64:	f003 030f 	and.w	r3, r3, #15
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d102      	bne.n	8007f7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f7c:	7afb      	ldrb	r3, [r7, #11]
 8007f7e:	f003 030f 	and.w	r3, r3, #15
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d109      	bne.n	8007f9a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	6979      	ldr	r1, [r7, #20]
 8007f94:	f005 f98a 	bl	800d2ac <USB_EP0StartXfer>
 8007f98:	e008      	b.n	8007fac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6979      	ldr	r1, [r7, #20]
 8007fa8:	f004 ff3c 	bl	800ce24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	f003 020f 	and.w	r2, r3, #15
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d901      	bls.n	8007fd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e050      	b.n	8008076 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da0f      	bge.n	8007ffc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	f003 020f 	and.w	r2, r3, #15
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	00db      	lsls	r3, r3, #3
 8007fe6:	1a9b      	subs	r3, r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	3338      	adds	r3, #56	; 0x38
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	4413      	add	r3, r2
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	705a      	strb	r2, [r3, #1]
 8007ffa:	e00d      	b.n	8008018 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007ffc:	78fa      	ldrb	r2, [r7, #3]
 8007ffe:	4613      	mov	r3, r2
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	1a9b      	subs	r3, r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4413      	add	r3, r2
 800800e:	3304      	adds	r3, #4
 8008010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	f003 030f 	and.w	r3, r3, #15
 8008024:	b2da      	uxtb	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_PCD_EP_SetStall+0x82>
 8008034:	2302      	movs	r3, #2
 8008036:	e01e      	b.n	8008076 <HAL_PCD_EP_SetStall+0xc0>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68f9      	ldr	r1, [r7, #12]
 8008046:	4618      	mov	r0, r3
 8008048:	f005 fb19 	bl	800d67e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	f003 030f 	and.w	r3, r3, #15
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	b2d9      	uxtb	r1, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008066:	461a      	mov	r2, r3
 8008068:	f005 fd0a 	bl	800da80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	460b      	mov	r3, r1
 8008088:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	f003 020f 	and.w	r2, r3, #15
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	429a      	cmp	r2, r3
 8008096:	d901      	bls.n	800809c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e042      	b.n	8008122 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800809c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	da0f      	bge.n	80080c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080a4:	78fb      	ldrb	r3, [r7, #3]
 80080a6:	f003 020f 	and.w	r2, r3, #15
 80080aa:	4613      	mov	r3, r2
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	3338      	adds	r3, #56	; 0x38
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	4413      	add	r3, r2
 80080b8:	3304      	adds	r3, #4
 80080ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2201      	movs	r2, #1
 80080c0:	705a      	strb	r2, [r3, #1]
 80080c2:	e00f      	b.n	80080e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	f003 020f 	and.w	r2, r3, #15
 80080ca:	4613      	mov	r3, r2
 80080cc:	00db      	lsls	r3, r3, #3
 80080ce:	1a9b      	subs	r3, r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	4413      	add	r3, r2
 80080da:	3304      	adds	r3, #4
 80080dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080ea:	78fb      	ldrb	r3, [r7, #3]
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d101      	bne.n	8008104 <HAL_PCD_EP_ClrStall+0x86>
 8008100:	2302      	movs	r3, #2
 8008102:	e00e      	b.n	8008122 <HAL_PCD_EP_ClrStall+0xa4>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68f9      	ldr	r1, [r7, #12]
 8008112:	4618      	mov	r0, r3
 8008114:	f005 fb21 	bl	800d75a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_PCD_EP_Flush+0x1a>
 8008140:	2302      	movs	r3, #2
 8008142:	e01b      	b.n	800817c <HAL_PCD_EP_Flush+0x52>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800814c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008150:	2b00      	cmp	r3, #0
 8008152:	da09      	bge.n	8008168 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	78fb      	ldrb	r3, [r7, #3]
 800815a:	f003 030f 	and.w	r3, r3, #15
 800815e:	4619      	mov	r1, r3
 8008160:	4610      	mov	r0, r2
 8008162:	f004 fc79 	bl	800ca58 <USB_FlushTxFifo>
 8008166:	e004      	b.n	8008172 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4618      	mov	r0, r3
 800816e:	f004 fc97 	bl	800caa0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08a      	sub	sp, #40	; 0x28
 8008188:	af02      	add	r7, sp, #8
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	4613      	mov	r3, r2
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	1a9b      	subs	r3, r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	3338      	adds	r3, #56	; 0x38
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	4413      	add	r3, r2
 80081a8:	3304      	adds	r3, #4
 80081aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	699a      	ldr	r2, [r3, #24]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d901      	bls.n	80081bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e06c      	b.n	8008296 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	695a      	ldr	r2, [r3, #20]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d902      	bls.n	80081d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	3303      	adds	r3, #3
 80081dc:	089b      	lsrs	r3, r3, #2
 80081de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081e0:	e02b      	b.n	800823a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	695a      	ldr	r2, [r3, #20]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d902      	bls.n	80081fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	3303      	adds	r3, #3
 8008202:	089b      	lsrs	r3, r3, #2
 8008204:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	68d9      	ldr	r1, [r3, #12]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	b2da      	uxtb	r2, r3
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008216:	b2db      	uxtb	r3, r3
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	4603      	mov	r3, r0
 800821c:	6978      	ldr	r0, [r7, #20]
 800821e:	f005 f998 	bl	800d552 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	441a      	add	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	699a      	ldr	r2, [r3, #24]
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	441a      	add	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	b29b      	uxth	r3, r3
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	429a      	cmp	r2, r3
 800824e:	d809      	bhi.n	8008264 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	699a      	ldr	r2, [r3, #24]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008258:	429a      	cmp	r2, r3
 800825a:	d203      	bcs.n	8008264 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1be      	bne.n	80081e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	695a      	ldr	r2, [r3, #20]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	429a      	cmp	r2, r3
 800826e:	d811      	bhi.n	8008294 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	2201      	movs	r2, #1
 8008278:	fa02 f303 	lsl.w	r3, r2, r3
 800827c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	43db      	mvns	r3, r3
 800828a:	6939      	ldr	r1, [r7, #16]
 800828c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008290:	4013      	ands	r3, r2
 8008292:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3720      	adds	r7, #32
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	333c      	adds	r3, #60	; 0x3c
 80082b8:	3304      	adds	r3, #4
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	f040 80a0 	bne.w	8008418 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f003 0308 	and.w	r3, r3, #8
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d015      	beq.n	800830e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4a72      	ldr	r2, [pc, #456]	; (80084b0 <PCD_EP_OutXfrComplete_int+0x210>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	f240 80dd 	bls.w	80084a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 80d7 	beq.w	80084a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008304:	461a      	mov	r2, r3
 8008306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800830a:	6093      	str	r3, [r2, #8]
 800830c:	e0cb      	b.n	80084a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d009      	beq.n	800832c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008324:	461a      	mov	r2, r3
 8008326:	2320      	movs	r3, #32
 8008328:	6093      	str	r3, [r2, #8]
 800832a:	e0bc      	b.n	80084a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008332:	2b00      	cmp	r3, #0
 8008334:	f040 80b7 	bne.w	80084a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4a5d      	ldr	r2, [pc, #372]	; (80084b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d90f      	bls.n	8008360 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	4413      	add	r3, r2
 8008352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008356:	461a      	mov	r2, r3
 8008358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800835c:	6093      	str	r3, [r2, #8]
 800835e:	e0a2      	b.n	80084a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008360:	6879      	ldr	r1, [r7, #4]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	4613      	mov	r3, r2
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	1a9b      	subs	r3, r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008372:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	0159      	lsls	r1, r3, #5
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	440b      	add	r3, r1
 800837c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008386:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	4613      	mov	r3, r2
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	1a9b      	subs	r3, r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4403      	add	r3, r0
 8008396:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800839a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4613      	mov	r3, r2
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80083ae:	6819      	ldr	r1, [r3, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	4613      	mov	r3, r2
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4403      	add	r3, r0
 80083be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4419      	add	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	4613      	mov	r3, r2
 80083cc:	00db      	lsls	r3, r3, #3
 80083ce:	1a9b      	subs	r3, r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4403      	add	r3, r0
 80083d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80083d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d114      	bne.n	800840a <PCD_EP_OutXfrComplete_int+0x16a>
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	4613      	mov	r3, r2
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	1a9b      	subs	r3, r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d108      	bne.n	800840a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6818      	ldr	r0, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008402:	461a      	mov	r2, r3
 8008404:	2101      	movs	r1, #1
 8008406:	f005 fb3b 	bl	800da80 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	b2db      	uxtb	r3, r3
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f00b fb21 	bl	8013a58 <HAL_PCD_DataOutStageCallback>
 8008416:	e046      	b.n	80084a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4a26      	ldr	r2, [pc, #152]	; (80084b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d124      	bne.n	800846a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	4413      	add	r3, r2
 8008432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008436:	461a      	mov	r2, r3
 8008438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800843c:	6093      	str	r3, [r2, #8]
 800843e:	e032      	b.n	80084a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f003 0320 	and.w	r3, r3, #32
 8008446:	2b00      	cmp	r3, #0
 8008448:	d008      	beq.n	800845c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	4413      	add	r3, r2
 8008452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008456:	461a      	mov	r2, r3
 8008458:	2320      	movs	r3, #32
 800845a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	b2db      	uxtb	r3, r3
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f00b faf8 	bl	8013a58 <HAL_PCD_DataOutStageCallback>
 8008468:	e01d      	b.n	80084a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d114      	bne.n	800849a <PCD_EP_OutXfrComplete_int+0x1fa>
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	4613      	mov	r3, r2
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	1a9b      	subs	r3, r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d108      	bne.n	800849a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008492:	461a      	mov	r2, r3
 8008494:	2100      	movs	r1, #0
 8008496:	f005 faf3 	bl	800da80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f00b fad9 	bl	8013a58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	4f54300a 	.word	0x4f54300a
 80084b4:	4f54310a 	.word	0x4f54310a

080084b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	333c      	adds	r3, #60	; 0x3c
 80084d0:	3304      	adds	r3, #4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4a15      	ldr	r2, [pc, #84]	; (8008540 <PCD_EP_OutSetupPacket_int+0x88>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d90e      	bls.n	800850c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d009      	beq.n	800850c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008504:	461a      	mov	r2, r3
 8008506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800850a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f00b fa91 	bl	8013a34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4a0a      	ldr	r2, [pc, #40]	; (8008540 <PCD_EP_OutSetupPacket_int+0x88>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d90c      	bls.n	8008534 <PCD_EP_OutSetupPacket_int+0x7c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d108      	bne.n	8008534 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800852c:	461a      	mov	r2, r3
 800852e:	2101      	movs	r1, #1
 8008530:	f005 faa6 	bl	800da80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	4f54300a 	.word	0x4f54300a

08008544 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	70fb      	strb	r3, [r7, #3]
 8008550:	4613      	mov	r3, r2
 8008552:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800855c:	78fb      	ldrb	r3, [r7, #3]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d107      	bne.n	8008572 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008562:	883b      	ldrh	r3, [r7, #0]
 8008564:	0419      	lsls	r1, r3, #16
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	430a      	orrs	r2, r1
 800856e:	629a      	str	r2, [r3, #40]	; 0x28
 8008570:	e028      	b.n	80085c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008578:	0c1b      	lsrs	r3, r3, #16
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4413      	add	r3, r2
 800857e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008580:	2300      	movs	r3, #0
 8008582:	73fb      	strb	r3, [r7, #15]
 8008584:	e00d      	b.n	80085a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	3340      	adds	r3, #64	; 0x40
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	0c1b      	lsrs	r3, r3, #16
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	4413      	add	r3, r2
 800859a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	3301      	adds	r3, #1
 80085a0:	73fb      	strb	r3, [r7, #15]
 80085a2:	7bfa      	ldrb	r2, [r7, #15]
 80085a4:	78fb      	ldrb	r3, [r7, #3]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d3ec      	bcc.n	8008586 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80085ac:	883b      	ldrh	r3, [r7, #0]
 80085ae:	0418      	lsls	r0, r3, #16
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6819      	ldr	r1, [r3, #0]
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	4302      	orrs	r2, r0
 80085bc:	3340      	adds	r3, #64	; 0x40
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	440b      	add	r3, r1
 80085c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	887a      	ldrh	r2, [r7, #2]
 80085e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008626:	f043 0303 	orr.w	r3, r3, #3
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008646:	2300      	movs	r3, #0
 8008648:	603b      	str	r3, [r7, #0]
 800864a:	4b20      	ldr	r3, [pc, #128]	; (80086cc <HAL_PWREx_EnableOverDrive+0x90>)
 800864c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864e:	4a1f      	ldr	r2, [pc, #124]	; (80086cc <HAL_PWREx_EnableOverDrive+0x90>)
 8008650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008654:	6413      	str	r3, [r2, #64]	; 0x40
 8008656:	4b1d      	ldr	r3, [pc, #116]	; (80086cc <HAL_PWREx_EnableOverDrive+0x90>)
 8008658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800865e:	603b      	str	r3, [r7, #0]
 8008660:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008662:	4b1b      	ldr	r3, [pc, #108]	; (80086d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8008664:	2201      	movs	r2, #1
 8008666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008668:	f7fc fae2 	bl	8004c30 <HAL_GetTick>
 800866c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800866e:	e009      	b.n	8008684 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008670:	f7fc fade 	bl	8004c30 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800867e:	d901      	bls.n	8008684 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e01f      	b.n	80086c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008684:	4b13      	ldr	r3, [pc, #76]	; (80086d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800868c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008690:	d1ee      	bne.n	8008670 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008692:	4b11      	ldr	r3, [pc, #68]	; (80086d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008694:	2201      	movs	r2, #1
 8008696:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008698:	f7fc faca 	bl	8004c30 <HAL_GetTick>
 800869c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800869e:	e009      	b.n	80086b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80086a0:	f7fc fac6 	bl	8004c30 <HAL_GetTick>
 80086a4:	4602      	mov	r2, r0
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086ae:	d901      	bls.n	80086b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e007      	b.n	80086c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80086b4:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086c0:	d1ee      	bne.n	80086a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	40023800 	.word	0x40023800
 80086d0:	420e0040 	.word	0x420e0040
 80086d4:	40007000 	.word	0x40007000
 80086d8:	420e0044 	.word	0x420e0044

080086dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e0cc      	b.n	800888a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086f0:	4b68      	ldr	r3, [pc, #416]	; (8008894 <HAL_RCC_ClockConfig+0x1b8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 030f 	and.w	r3, r3, #15
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d90c      	bls.n	8008718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086fe:	4b65      	ldr	r3, [pc, #404]	; (8008894 <HAL_RCC_ClockConfig+0x1b8>)
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008706:	4b63      	ldr	r3, [pc, #396]	; (8008894 <HAL_RCC_ClockConfig+0x1b8>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 030f 	and.w	r3, r3, #15
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d001      	beq.n	8008718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e0b8      	b.n	800888a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d020      	beq.n	8008766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b00      	cmp	r3, #0
 800872e:	d005      	beq.n	800873c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008730:	4b59      	ldr	r3, [pc, #356]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	4a58      	ldr	r2, [pc, #352]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 8008736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800873a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0308 	and.w	r3, r3, #8
 8008744:	2b00      	cmp	r3, #0
 8008746:	d005      	beq.n	8008754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008748:	4b53      	ldr	r3, [pc, #332]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	4a52      	ldr	r2, [pc, #328]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 800874e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008754:	4b50      	ldr	r3, [pc, #320]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	494d      	ldr	r1, [pc, #308]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 8008762:	4313      	orrs	r3, r2
 8008764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d044      	beq.n	80087fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d107      	bne.n	800878a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800877a:	4b47      	ldr	r3, [pc, #284]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d119      	bne.n	80087ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e07f      	b.n	800888a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2b02      	cmp	r3, #2
 8008790:	d003      	beq.n	800879a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008796:	2b03      	cmp	r3, #3
 8008798:	d107      	bne.n	80087aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800879a:	4b3f      	ldr	r3, [pc, #252]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d109      	bne.n	80087ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e06f      	b.n	800888a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087aa:	4b3b      	ldr	r3, [pc, #236]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d101      	bne.n	80087ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e067      	b.n	800888a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087ba:	4b37      	ldr	r3, [pc, #220]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f023 0203 	bic.w	r2, r3, #3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	4934      	ldr	r1, [pc, #208]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087cc:	f7fc fa30 	bl	8004c30 <HAL_GetTick>
 80087d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087d2:	e00a      	b.n	80087ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087d4:	f7fc fa2c 	bl	8004c30 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	f241 3288 	movw	r2, #5000	; 0x1388
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d901      	bls.n	80087ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e04f      	b.n	800888a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ea:	4b2b      	ldr	r3, [pc, #172]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f003 020c 	and.w	r2, r3, #12
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d1eb      	bne.n	80087d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087fc:	4b25      	ldr	r3, [pc, #148]	; (8008894 <HAL_RCC_ClockConfig+0x1b8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 030f 	and.w	r3, r3, #15
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d20c      	bcs.n	8008824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800880a:	4b22      	ldr	r3, [pc, #136]	; (8008894 <HAL_RCC_ClockConfig+0x1b8>)
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008812:	4b20      	ldr	r3, [pc, #128]	; (8008894 <HAL_RCC_ClockConfig+0x1b8>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 030f 	and.w	r3, r3, #15
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	429a      	cmp	r2, r3
 800881e:	d001      	beq.n	8008824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e032      	b.n	800888a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b00      	cmp	r3, #0
 800882e:	d008      	beq.n	8008842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008830:	4b19      	ldr	r3, [pc, #100]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	4916      	ldr	r1, [pc, #88]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 800883e:	4313      	orrs	r3, r2
 8008840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d009      	beq.n	8008862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800884e:	4b12      	ldr	r3, [pc, #72]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	490e      	ldr	r1, [pc, #56]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 800885e:	4313      	orrs	r3, r2
 8008860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008862:	f000 fb6b 	bl	8008f3c <HAL_RCC_GetSysClockFreq>
 8008866:	4602      	mov	r2, r0
 8008868:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <HAL_RCC_ClockConfig+0x1bc>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	091b      	lsrs	r3, r3, #4
 800886e:	f003 030f 	and.w	r3, r3, #15
 8008872:	490a      	ldr	r1, [pc, #40]	; (800889c <HAL_RCC_ClockConfig+0x1c0>)
 8008874:	5ccb      	ldrb	r3, [r1, r3]
 8008876:	fa22 f303 	lsr.w	r3, r2, r3
 800887a:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <HAL_RCC_ClockConfig+0x1c4>)
 800887c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800887e:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f7fc f990 	bl	8004ba8 <HAL_InitTick>

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	40023c00 	.word	0x40023c00
 8008898:	40023800 	.word	0x40023800
 800889c:	08014a20 	.word	0x08014a20
 80088a0:	20000000 	.word	0x20000000
 80088a4:	20000004 	.word	0x20000004

080088a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088a8:	b480      	push	{r7}
 80088aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088ac:	4b03      	ldr	r3, [pc, #12]	; (80088bc <HAL_RCC_GetHCLKFreq+0x14>)
 80088ae:	681b      	ldr	r3, [r3, #0]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	20000000 	.word	0x20000000

080088c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80088c4:	f7ff fff0 	bl	80088a8 <HAL_RCC_GetHCLKFreq>
 80088c8:	4602      	mov	r2, r0
 80088ca:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	0a9b      	lsrs	r3, r3, #10
 80088d0:	f003 0307 	and.w	r3, r3, #7
 80088d4:	4903      	ldr	r1, [pc, #12]	; (80088e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088d6:	5ccb      	ldrb	r3, [r1, r3]
 80088d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088dc:	4618      	mov	r0, r3
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	40023800 	.word	0x40023800
 80088e4:	08014a30 	.word	0x08014a30

080088e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08c      	sub	sp, #48	; 0x30
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80088f8:	2300      	movs	r3, #0
 80088fa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d010      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008920:	4b6f      	ldr	r3, [pc, #444]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008926:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892e:	496c      	ldr	r1, [pc, #432]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008930:	4313      	orrs	r3, r2
 8008932:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800893e:	2301      	movs	r3, #1
 8008940:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d010      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800894e:	4b64      	ldr	r3, [pc, #400]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008954:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895c:	4960      	ldr	r1, [pc, #384]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800895e:	4313      	orrs	r3, r2
 8008960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800896c:	2301      	movs	r3, #1
 800896e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0304 	and.w	r3, r3, #4
 8008978:	2b00      	cmp	r3, #0
 800897a:	d017      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800897c:	4b58      	ldr	r3, [pc, #352]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800897e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008982:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	4955      	ldr	r1, [pc, #340]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800898c:	4313      	orrs	r3, r2
 800898e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800899a:	d101      	bne.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800899c:	2301      	movs	r3, #1
 800899e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80089a8:	2301      	movs	r3, #1
 80089aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d017      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80089b8:	4b49      	ldr	r3, [pc, #292]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80089ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c6:	4946      	ldr	r1, [pc, #280]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089d6:	d101      	bne.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80089d8:	2301      	movs	r3, #1
 80089da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d101      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80089e4:	2301      	movs	r3, #1
 80089e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0320 	and.w	r3, r3, #32
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 808a 	beq.w	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80089f6:	2300      	movs	r3, #0
 80089f8:	60bb      	str	r3, [r7, #8]
 80089fa:	4b39      	ldr	r3, [pc, #228]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	4a38      	ldr	r2, [pc, #224]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a04:	6413      	str	r3, [r2, #64]	; 0x40
 8008a06:	4b36      	ldr	r3, [pc, #216]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a0e:	60bb      	str	r3, [r7, #8]
 8008a10:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008a12:	4b34      	ldr	r3, [pc, #208]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a33      	ldr	r2, [pc, #204]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a1e:	f7fc f907 	bl	8004c30 <HAL_GetTick>
 8008a22:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008a24:	e008      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008a26:	f7fc f903 	bl	8004c30 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d901      	bls.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e278      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008a38:	4b2a      	ldr	r3, [pc, #168]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d0f0      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008a44:	4b26      	ldr	r3, [pc, #152]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a4c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d02f      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a5c:	6a3a      	ldr	r2, [r7, #32]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d028      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a62:	4b1f      	ldr	r3, [pc, #124]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a6a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a6c:	4b1e      	ldr	r3, [pc, #120]	; (8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008a6e:	2201      	movs	r2, #1
 8008a70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a72:	4b1d      	ldr	r3, [pc, #116]	; (8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008a78:	4a19      	ldr	r2, [pc, #100]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008a7e:	4b18      	ldr	r3, [pc, #96]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d114      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008a8a:	f7fc f8d1 	bl	8004c30 <HAL_GetTick>
 8008a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a90:	e00a      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a92:	f7fc f8cd 	bl	8004c30 <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d901      	bls.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e240      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aa8:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aac:	f003 0302 	and.w	r3, r3, #2
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d0ee      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ac0:	d114      	bne.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x204>
 8008ac2:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ad6:	4902      	ldr	r1, [pc, #8]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	608b      	str	r3, [r1, #8]
 8008adc:	e00c      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008ade:	bf00      	nop
 8008ae0:	40023800 	.word	0x40023800
 8008ae4:	40007000 	.word	0x40007000
 8008ae8:	42470e40 	.word	0x42470e40
 8008aec:	4b4a      	ldr	r3, [pc, #296]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	4a49      	ldr	r2, [pc, #292]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008af2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008af6:	6093      	str	r3, [r2, #8]
 8008af8:	4b47      	ldr	r3, [pc, #284]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008afa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b04:	4944      	ldr	r1, [pc, #272]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0310 	and.w	r3, r3, #16
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d004      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8008b1c:	4b3f      	ldr	r3, [pc, #252]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008b1e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008b2c:	4b3a      	ldr	r3, [pc, #232]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b3a:	4937      	ldr	r1, [pc, #220]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b4e:	4b32      	ldr	r3, [pc, #200]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b54:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b5c:	492e      	ldr	r1, [pc, #184]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d011      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008b70:	4b29      	ldr	r3, [pc, #164]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b76:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7e:	4926      	ldr	r1, [pc, #152]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b8e:	d101      	bne.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8008b90:	2301      	movs	r3, #1
 8008b92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00a      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008ba0:	4b1d      	ldr	r3, [pc, #116]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ba6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bae:	491a      	ldr	r1, [pc, #104]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d011      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8008bc2:	4b15      	ldr	r3, [pc, #84]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bc8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd0:	4911      	ldr	r1, [pc, #68]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008be0:	d101      	bne.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8008be2:	2301      	movs	r3, #1
 8008be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d005      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bf4:	f040 80ff 	bne.w	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008bf8:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008bfe:	f7fc f817 	bl	8004c30 <HAL_GetTick>
 8008c02:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c04:	e00e      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008c06:	f7fc f813 	bl	8004c30 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d907      	bls.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e188      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008c18:	40023800 	.word	0x40023800
 8008c1c:	424711e0 	.word	0x424711e0
 8008c20:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c24:	4b7e      	ldr	r3, [pc, #504]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1ea      	bne.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d009      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d028      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d124      	bne.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008c58:	4b71      	ldr	r3, [pc, #452]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c5e:	0c1b      	lsrs	r3, r3, #16
 8008c60:	f003 0303 	and.w	r3, r3, #3
 8008c64:	3301      	adds	r3, #1
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008c6a:	4b6d      	ldr	r3, [pc, #436]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c70:	0e1b      	lsrs	r3, r3, #24
 8008c72:	f003 030f 	and.w	r3, r3, #15
 8008c76:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	019b      	lsls	r3, r3, #6
 8008c82:	431a      	orrs	r2, r3
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	085b      	lsrs	r3, r3, #1
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	041b      	lsls	r3, r3, #16
 8008c8c:	431a      	orrs	r2, r3
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	061b      	lsls	r3, r3, #24
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	071b      	lsls	r3, r3, #28
 8008c9a:	4961      	ldr	r1, [pc, #388]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0304 	and.w	r3, r3, #4
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d004      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cb6:	d00a      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d035      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ccc:	d130      	bne.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008cce:	4b54      	ldr	r3, [pc, #336]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cd4:	0c1b      	lsrs	r3, r3, #16
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	3301      	adds	r3, #1
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008ce0:	4b4f      	ldr	r3, [pc, #316]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ce6:	0f1b      	lsrs	r3, r3, #28
 8008ce8:	f003 0307 	and.w	r3, r3, #7
 8008cec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	019b      	lsls	r3, r3, #6
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	085b      	lsrs	r3, r3, #1
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	041b      	lsls	r3, r3, #16
 8008d02:	431a      	orrs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	061b      	lsls	r3, r3, #24
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	071b      	lsls	r3, r3, #28
 8008d10:	4943      	ldr	r1, [pc, #268]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008d18:	4b41      	ldr	r3, [pc, #260]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d1e:	f023 021f 	bic.w	r2, r3, #31
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d26:	3b01      	subs	r3, #1
 8008d28:	493d      	ldr	r1, [pc, #244]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d029      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d44:	d124      	bne.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008d46:	4b36      	ldr	r3, [pc, #216]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d4c:	0c1b      	lsrs	r3, r3, #16
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	3301      	adds	r3, #1
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008d58:	4b31      	ldr	r3, [pc, #196]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d5e:	0f1b      	lsrs	r3, r3, #28
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685a      	ldr	r2, [r3, #4]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	019b      	lsls	r3, r3, #6
 8008d70:	431a      	orrs	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	085b      	lsrs	r3, r3, #1
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	041b      	lsls	r3, r3, #16
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	061b      	lsls	r3, r3, #24
 8008d82:	431a      	orrs	r2, r3
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	071b      	lsls	r3, r3, #28
 8008d88:	4925      	ldr	r1, [pc, #148]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d016      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	019b      	lsls	r3, r3, #6
 8008da6:	431a      	orrs	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	085b      	lsrs	r3, r3, #1
 8008dae:	3b01      	subs	r3, #1
 8008db0:	041b      	lsls	r3, r3, #16
 8008db2:	431a      	orrs	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	061b      	lsls	r3, r3, #24
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	071b      	lsls	r3, r3, #28
 8008dc2:	4917      	ldr	r1, [pc, #92]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008dca:	4b16      	ldr	r3, [pc, #88]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008dd0:	f7fb ff2e 	bl	8004c30 <HAL_GetTick>
 8008dd4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008dd6:	e008      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008dd8:	f7fb ff2a 	bl	8004c30 <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d901      	bls.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e09f      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008dea:	4b0d      	ldr	r3, [pc, #52]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0f0      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8008df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	f040 8095 	bne.w	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008dfe:	4b0a      	ldr	r3, [pc, #40]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e04:	f7fb ff14 	bl	8004c30 <HAL_GetTick>
 8008e08:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e0a:	e00f      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008e0c:	f7fb ff10 	bl	8004c30 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d908      	bls.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e085      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008e1e:	bf00      	nop
 8008e20:	40023800 	.word	0x40023800
 8008e24:	42470068 	.word	0x42470068
 8008e28:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e2c:	4b41      	ldr	r3, [pc, #260]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e38:	d0e8      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d009      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d02b      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d127      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008e62:	4b34      	ldr	r3, [pc, #208]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e68:	0c1b      	lsrs	r3, r3, #16
 8008e6a:	f003 0303 	and.w	r3, r3, #3
 8008e6e:	3301      	adds	r3, #1
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699a      	ldr	r2, [r3, #24]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	019b      	lsls	r3, r3, #6
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	085b      	lsrs	r3, r3, #1
 8008e84:	3b01      	subs	r3, #1
 8008e86:	041b      	lsls	r3, r3, #16
 8008e88:	431a      	orrs	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	061b      	lsls	r3, r3, #24
 8008e90:	4928      	ldr	r1, [pc, #160]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008e98:	4b26      	ldr	r3, [pc, #152]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e9e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	4922      	ldr	r1, [pc, #136]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d01d      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x612>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ec6:	d118      	bne.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ec8:	4b1a      	ldr	r3, [pc, #104]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ece:	0e1b      	lsrs	r3, r3, #24
 8008ed0:	f003 030f 	and.w	r3, r3, #15
 8008ed4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699a      	ldr	r2, [r3, #24]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	019b      	lsls	r3, r3, #6
 8008ee0:	431a      	orrs	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	085b      	lsrs	r3, r3, #1
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	041b      	lsls	r3, r3, #16
 8008eec:	431a      	orrs	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	061b      	lsls	r3, r3, #24
 8008ef2:	4910      	ldr	r1, [pc, #64]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008efa:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8008efc:	2201      	movs	r2, #1
 8008efe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f00:	f7fb fe96 	bl	8004c30 <HAL_GetTick>
 8008f04:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008f06:	e008      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008f08:	f7fb fe92 	bl	8004c30 <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d901      	bls.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e007      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008f1a:	4b06      	ldr	r3, [pc, #24]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f26:	d1ef      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3730      	adds	r7, #48	; 0x30
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	40023800 	.word	0x40023800
 8008f38:	42470070 	.word	0x42470070

08008f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f40:	b088      	sub	sp, #32
 8008f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8008f50:	2300      	movs	r3, #0
 8008f52:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f58:	4bce      	ldr	r3, [pc, #824]	; (8009294 <HAL_RCC_GetSysClockFreq+0x358>)
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	f003 030c 	and.w	r3, r3, #12
 8008f60:	2b0c      	cmp	r3, #12
 8008f62:	f200 818d 	bhi.w	8009280 <HAL_RCC_GetSysClockFreq+0x344>
 8008f66:	a201      	add	r2, pc, #4	; (adr r2, 8008f6c <HAL_RCC_GetSysClockFreq+0x30>)
 8008f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6c:	08008fa1 	.word	0x08008fa1
 8008f70:	08009281 	.word	0x08009281
 8008f74:	08009281 	.word	0x08009281
 8008f78:	08009281 	.word	0x08009281
 8008f7c:	08008fa7 	.word	0x08008fa7
 8008f80:	08009281 	.word	0x08009281
 8008f84:	08009281 	.word	0x08009281
 8008f88:	08009281 	.word	0x08009281
 8008f8c:	08008fad 	.word	0x08008fad
 8008f90:	08009281 	.word	0x08009281
 8008f94:	08009281 	.word	0x08009281
 8008f98:	08009281 	.word	0x08009281
 8008f9c:	08009121 	.word	0x08009121
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fa0:	4bbd      	ldr	r3, [pc, #756]	; (8009298 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008fa2:	61bb      	str	r3, [r7, #24]
       break;
 8008fa4:	e16f      	b.n	8009286 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008fa6:	4bbd      	ldr	r3, [pc, #756]	; (800929c <HAL_RCC_GetSysClockFreq+0x360>)
 8008fa8:	61bb      	str	r3, [r7, #24]
      break;
 8008faa:	e16c      	b.n	8009286 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008fac:	4bb9      	ldr	r3, [pc, #740]	; (8009294 <HAL_RCC_GetSysClockFreq+0x358>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fb4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008fb6:	4bb7      	ldr	r3, [pc, #732]	; (8009294 <HAL_RCC_GetSysClockFreq+0x358>)
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d053      	beq.n	800906a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fc2:	4bb4      	ldr	r3, [pc, #720]	; (8009294 <HAL_RCC_GetSysClockFreq+0x358>)
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	099b      	lsrs	r3, r3, #6
 8008fc8:	461a      	mov	r2, r3
 8008fca:	f04f 0300 	mov.w	r3, #0
 8008fce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008fd2:	f04f 0100 	mov.w	r1, #0
 8008fd6:	ea02 0400 	and.w	r4, r2, r0
 8008fda:	603c      	str	r4, [r7, #0]
 8008fdc:	400b      	ands	r3, r1
 8008fde:	607b      	str	r3, [r7, #4]
 8008fe0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	f04f 0200 	mov.w	r2, #0
 8008fec:	f04f 0300 	mov.w	r3, #0
 8008ff0:	014b      	lsls	r3, r1, #5
 8008ff2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008ff6:	0142      	lsls	r2, r0, #5
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4623      	mov	r3, r4
 8008ffe:	1ac0      	subs	r0, r0, r3
 8009000:	462b      	mov	r3, r5
 8009002:	eb61 0103 	sbc.w	r1, r1, r3
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	f04f 0300 	mov.w	r3, #0
 800900e:	018b      	lsls	r3, r1, #6
 8009010:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009014:	0182      	lsls	r2, r0, #6
 8009016:	1a12      	subs	r2, r2, r0
 8009018:	eb63 0301 	sbc.w	r3, r3, r1
 800901c:	f04f 0000 	mov.w	r0, #0
 8009020:	f04f 0100 	mov.w	r1, #0
 8009024:	00d9      	lsls	r1, r3, #3
 8009026:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800902a:	00d0      	lsls	r0, r2, #3
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4621      	mov	r1, r4
 8009032:	1852      	adds	r2, r2, r1
 8009034:	4629      	mov	r1, r5
 8009036:	eb43 0101 	adc.w	r1, r3, r1
 800903a:	460b      	mov	r3, r1
 800903c:	f04f 0000 	mov.w	r0, #0
 8009040:	f04f 0100 	mov.w	r1, #0
 8009044:	0259      	lsls	r1, r3, #9
 8009046:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800904a:	0250      	lsls	r0, r2, #9
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4610      	mov	r0, r2
 8009052:	4619      	mov	r1, r3
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	461a      	mov	r2, r3
 8009058:	f04f 0300 	mov.w	r3, #0
 800905c:	f7f7 f928 	bl	80002b0 <__aeabi_uldivmod>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4613      	mov	r3, r2
 8009066:	61fb      	str	r3, [r7, #28]
 8009068:	e04c      	b.n	8009104 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800906a:	4b8a      	ldr	r3, [pc, #552]	; (8009294 <HAL_RCC_GetSysClockFreq+0x358>)
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	099b      	lsrs	r3, r3, #6
 8009070:	461a      	mov	r2, r3
 8009072:	f04f 0300 	mov.w	r3, #0
 8009076:	f240 10ff 	movw	r0, #511	; 0x1ff
 800907a:	f04f 0100 	mov.w	r1, #0
 800907e:	ea02 0a00 	and.w	sl, r2, r0
 8009082:	ea03 0b01 	and.w	fp, r3, r1
 8009086:	4650      	mov	r0, sl
 8009088:	4659      	mov	r1, fp
 800908a:	f04f 0200 	mov.w	r2, #0
 800908e:	f04f 0300 	mov.w	r3, #0
 8009092:	014b      	lsls	r3, r1, #5
 8009094:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009098:	0142      	lsls	r2, r0, #5
 800909a:	4610      	mov	r0, r2
 800909c:	4619      	mov	r1, r3
 800909e:	ebb0 000a 	subs.w	r0, r0, sl
 80090a2:	eb61 010b 	sbc.w	r1, r1, fp
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	f04f 0300 	mov.w	r3, #0
 80090ae:	018b      	lsls	r3, r1, #6
 80090b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80090b4:	0182      	lsls	r2, r0, #6
 80090b6:	1a12      	subs	r2, r2, r0
 80090b8:	eb63 0301 	sbc.w	r3, r3, r1
 80090bc:	f04f 0000 	mov.w	r0, #0
 80090c0:	f04f 0100 	mov.w	r1, #0
 80090c4:	00d9      	lsls	r1, r3, #3
 80090c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090ca:	00d0      	lsls	r0, r2, #3
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	eb12 020a 	adds.w	r2, r2, sl
 80090d4:	eb43 030b 	adc.w	r3, r3, fp
 80090d8:	f04f 0000 	mov.w	r0, #0
 80090dc:	f04f 0100 	mov.w	r1, #0
 80090e0:	0299      	lsls	r1, r3, #10
 80090e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80090e6:	0290      	lsls	r0, r2, #10
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	4610      	mov	r0, r2
 80090ee:	4619      	mov	r1, r3
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	461a      	mov	r2, r3
 80090f4:	f04f 0300 	mov.w	r3, #0
 80090f8:	f7f7 f8da 	bl	80002b0 <__aeabi_uldivmod>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4613      	mov	r3, r2
 8009102:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009104:	4b63      	ldr	r3, [pc, #396]	; (8009294 <HAL_RCC_GetSysClockFreq+0x358>)
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	0c1b      	lsrs	r3, r3, #16
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	3301      	adds	r3, #1
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8009114:	69fa      	ldr	r2, [r7, #28]
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	fbb2 f3f3 	udiv	r3, r2, r3
 800911c:	61bb      	str	r3, [r7, #24]
      break;
 800911e:	e0b2      	b.n	8009286 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009120:	4b5c      	ldr	r3, [pc, #368]	; (8009294 <HAL_RCC_GetSysClockFreq+0x358>)
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009128:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800912a:	4b5a      	ldr	r3, [pc, #360]	; (8009294 <HAL_RCC_GetSysClockFreq+0x358>)
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d04d      	beq.n	80091d2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009136:	4b57      	ldr	r3, [pc, #348]	; (8009294 <HAL_RCC_GetSysClockFreq+0x358>)
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	099b      	lsrs	r3, r3, #6
 800913c:	461a      	mov	r2, r3
 800913e:	f04f 0300 	mov.w	r3, #0
 8009142:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009146:	f04f 0100 	mov.w	r1, #0
 800914a:	ea02 0800 	and.w	r8, r2, r0
 800914e:	ea03 0901 	and.w	r9, r3, r1
 8009152:	4640      	mov	r0, r8
 8009154:	4649      	mov	r1, r9
 8009156:	f04f 0200 	mov.w	r2, #0
 800915a:	f04f 0300 	mov.w	r3, #0
 800915e:	014b      	lsls	r3, r1, #5
 8009160:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009164:	0142      	lsls	r2, r0, #5
 8009166:	4610      	mov	r0, r2
 8009168:	4619      	mov	r1, r3
 800916a:	ebb0 0008 	subs.w	r0, r0, r8
 800916e:	eb61 0109 	sbc.w	r1, r1, r9
 8009172:	f04f 0200 	mov.w	r2, #0
 8009176:	f04f 0300 	mov.w	r3, #0
 800917a:	018b      	lsls	r3, r1, #6
 800917c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009180:	0182      	lsls	r2, r0, #6
 8009182:	1a12      	subs	r2, r2, r0
 8009184:	eb63 0301 	sbc.w	r3, r3, r1
 8009188:	f04f 0000 	mov.w	r0, #0
 800918c:	f04f 0100 	mov.w	r1, #0
 8009190:	00d9      	lsls	r1, r3, #3
 8009192:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009196:	00d0      	lsls	r0, r2, #3
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	eb12 0208 	adds.w	r2, r2, r8
 80091a0:	eb43 0309 	adc.w	r3, r3, r9
 80091a4:	f04f 0000 	mov.w	r0, #0
 80091a8:	f04f 0100 	mov.w	r1, #0
 80091ac:	0259      	lsls	r1, r3, #9
 80091ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80091b2:	0250      	lsls	r0, r2, #9
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	4610      	mov	r0, r2
 80091ba:	4619      	mov	r1, r3
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	461a      	mov	r2, r3
 80091c0:	f04f 0300 	mov.w	r3, #0
 80091c4:	f7f7 f874 	bl	80002b0 <__aeabi_uldivmod>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4613      	mov	r3, r2
 80091ce:	61fb      	str	r3, [r7, #28]
 80091d0:	e04a      	b.n	8009268 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091d2:	4b30      	ldr	r3, [pc, #192]	; (8009294 <HAL_RCC_GetSysClockFreq+0x358>)
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	099b      	lsrs	r3, r3, #6
 80091d8:	461a      	mov	r2, r3
 80091da:	f04f 0300 	mov.w	r3, #0
 80091de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80091e2:	f04f 0100 	mov.w	r1, #0
 80091e6:	ea02 0400 	and.w	r4, r2, r0
 80091ea:	ea03 0501 	and.w	r5, r3, r1
 80091ee:	4620      	mov	r0, r4
 80091f0:	4629      	mov	r1, r5
 80091f2:	f04f 0200 	mov.w	r2, #0
 80091f6:	f04f 0300 	mov.w	r3, #0
 80091fa:	014b      	lsls	r3, r1, #5
 80091fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009200:	0142      	lsls	r2, r0, #5
 8009202:	4610      	mov	r0, r2
 8009204:	4619      	mov	r1, r3
 8009206:	1b00      	subs	r0, r0, r4
 8009208:	eb61 0105 	sbc.w	r1, r1, r5
 800920c:	f04f 0200 	mov.w	r2, #0
 8009210:	f04f 0300 	mov.w	r3, #0
 8009214:	018b      	lsls	r3, r1, #6
 8009216:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800921a:	0182      	lsls	r2, r0, #6
 800921c:	1a12      	subs	r2, r2, r0
 800921e:	eb63 0301 	sbc.w	r3, r3, r1
 8009222:	f04f 0000 	mov.w	r0, #0
 8009226:	f04f 0100 	mov.w	r1, #0
 800922a:	00d9      	lsls	r1, r3, #3
 800922c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009230:	00d0      	lsls	r0, r2, #3
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	1912      	adds	r2, r2, r4
 8009238:	eb45 0303 	adc.w	r3, r5, r3
 800923c:	f04f 0000 	mov.w	r0, #0
 8009240:	f04f 0100 	mov.w	r1, #0
 8009244:	0299      	lsls	r1, r3, #10
 8009246:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800924a:	0290      	lsls	r0, r2, #10
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4610      	mov	r0, r2
 8009252:	4619      	mov	r1, r3
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	461a      	mov	r2, r3
 8009258:	f04f 0300 	mov.w	r3, #0
 800925c:	f7f7 f828 	bl	80002b0 <__aeabi_uldivmod>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4613      	mov	r3, r2
 8009266:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009268:	4b0a      	ldr	r3, [pc, #40]	; (8009294 <HAL_RCC_GetSysClockFreq+0x358>)
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	0f1b      	lsrs	r3, r3, #28
 800926e:	f003 0307 	and.w	r3, r3, #7
 8009272:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8009274:	69fa      	ldr	r2, [r7, #28]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	fbb2 f3f3 	udiv	r3, r2, r3
 800927c:	61bb      	str	r3, [r7, #24]
      break;
 800927e:	e002      	b.n	8009286 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009280:	4b05      	ldr	r3, [pc, #20]	; (8009298 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009282:	61bb      	str	r3, [r7, #24]
      break;
 8009284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009286:	69bb      	ldr	r3, [r7, #24]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3720      	adds	r7, #32
 800928c:	46bd      	mov	sp, r7
 800928e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009292:	bf00      	nop
 8009294:	40023800 	.word	0x40023800
 8009298:	00f42400 	.word	0x00f42400
 800929c:	007a1200 	.word	0x007a1200

080092a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e28d      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 8083 	beq.w	80093c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80092c0:	4b94      	ldr	r3, [pc, #592]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f003 030c 	and.w	r3, r3, #12
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d019      	beq.n	8009300 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80092cc:	4b91      	ldr	r3, [pc, #580]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d106      	bne.n	80092e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80092d8:	4b8e      	ldr	r3, [pc, #568]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092e4:	d00c      	beq.n	8009300 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092e6:	4b8b      	ldr	r3, [pc, #556]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80092ee:	2b0c      	cmp	r3, #12
 80092f0:	d112      	bne.n	8009318 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092f2:	4b88      	ldr	r3, [pc, #544]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092fe:	d10b      	bne.n	8009318 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009300:	4b84      	ldr	r3, [pc, #528]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d05b      	beq.n	80093c4 <HAL_RCC_OscConfig+0x124>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d157      	bne.n	80093c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e25a      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009320:	d106      	bne.n	8009330 <HAL_RCC_OscConfig+0x90>
 8009322:	4b7c      	ldr	r3, [pc, #496]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a7b      	ldr	r2, [pc, #492]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800932c:	6013      	str	r3, [r2, #0]
 800932e:	e01d      	b.n	800936c <HAL_RCC_OscConfig+0xcc>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009338:	d10c      	bne.n	8009354 <HAL_RCC_OscConfig+0xb4>
 800933a:	4b76      	ldr	r3, [pc, #472]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a75      	ldr	r2, [pc, #468]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009344:	6013      	str	r3, [r2, #0]
 8009346:	4b73      	ldr	r3, [pc, #460]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a72      	ldr	r2, [pc, #456]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 800934c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009350:	6013      	str	r3, [r2, #0]
 8009352:	e00b      	b.n	800936c <HAL_RCC_OscConfig+0xcc>
 8009354:	4b6f      	ldr	r3, [pc, #444]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a6e      	ldr	r2, [pc, #440]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 800935a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	4b6c      	ldr	r3, [pc, #432]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a6b      	ldr	r2, [pc, #428]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800936a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d013      	beq.n	800939c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009374:	f7fb fc5c 	bl	8004c30 <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800937c:	f7fb fc58 	bl	8004c30 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b64      	cmp	r3, #100	; 0x64
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e21f      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800938e:	4b61      	ldr	r3, [pc, #388]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0f0      	beq.n	800937c <HAL_RCC_OscConfig+0xdc>
 800939a:	e014      	b.n	80093c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800939c:	f7fb fc48 	bl	8004c30 <HAL_GetTick>
 80093a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093a2:	e008      	b.n	80093b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093a4:	f7fb fc44 	bl	8004c30 <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b64      	cmp	r3, #100	; 0x64
 80093b0:	d901      	bls.n	80093b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e20b      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093b6:	4b57      	ldr	r3, [pc, #348]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1f0      	bne.n	80093a4 <HAL_RCC_OscConfig+0x104>
 80093c2:	e000      	b.n	80093c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d06f      	beq.n	80094b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80093d2:	4b50      	ldr	r3, [pc, #320]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 030c 	and.w	r3, r3, #12
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d017      	beq.n	800940e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80093de:	4b4d      	ldr	r3, [pc, #308]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80093e6:	2b08      	cmp	r3, #8
 80093e8:	d105      	bne.n	80093f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80093ea:	4b4a      	ldr	r3, [pc, #296]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00b      	beq.n	800940e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80093f6:	4b47      	ldr	r3, [pc, #284]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80093fe:	2b0c      	cmp	r3, #12
 8009400:	d11c      	bne.n	800943c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009402:	4b44      	ldr	r3, [pc, #272]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d116      	bne.n	800943c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800940e:	4b41      	ldr	r3, [pc, #260]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	2b00      	cmp	r3, #0
 8009418:	d005      	beq.n	8009426 <HAL_RCC_OscConfig+0x186>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d001      	beq.n	8009426 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e1d3      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009426:	4b3b      	ldr	r3, [pc, #236]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	4937      	ldr	r1, [pc, #220]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009436:	4313      	orrs	r3, r2
 8009438:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800943a:	e03a      	b.n	80094b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d020      	beq.n	8009486 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009444:	4b34      	ldr	r3, [pc, #208]	; (8009518 <HAL_RCC_OscConfig+0x278>)
 8009446:	2201      	movs	r2, #1
 8009448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800944a:	f7fb fbf1 	bl	8004c30 <HAL_GetTick>
 800944e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009450:	e008      	b.n	8009464 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009452:	f7fb fbed 	bl	8004c30 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b02      	cmp	r3, #2
 800945e:	d901      	bls.n	8009464 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e1b4      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009464:	4b2b      	ldr	r3, [pc, #172]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0f0      	beq.n	8009452 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009470:	4b28      	ldr	r3, [pc, #160]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	00db      	lsls	r3, r3, #3
 800947e:	4925      	ldr	r1, [pc, #148]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009480:	4313      	orrs	r3, r2
 8009482:	600b      	str	r3, [r1, #0]
 8009484:	e015      	b.n	80094b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009486:	4b24      	ldr	r3, [pc, #144]	; (8009518 <HAL_RCC_OscConfig+0x278>)
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800948c:	f7fb fbd0 	bl	8004c30 <HAL_GetTick>
 8009490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009492:	e008      	b.n	80094a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009494:	f7fb fbcc 	bl	8004c30 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d901      	bls.n	80094a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e193      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094a6:	4b1b      	ldr	r3, [pc, #108]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 0302 	and.w	r3, r3, #2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1f0      	bne.n	8009494 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0308 	and.w	r3, r3, #8
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d036      	beq.n	800952c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d016      	beq.n	80094f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80094c6:	4b15      	ldr	r3, [pc, #84]	; (800951c <HAL_RCC_OscConfig+0x27c>)
 80094c8:	2201      	movs	r2, #1
 80094ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094cc:	f7fb fbb0 	bl	8004c30 <HAL_GetTick>
 80094d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094d2:	e008      	b.n	80094e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094d4:	f7fb fbac 	bl	8004c30 <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d901      	bls.n	80094e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e173      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094e6:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80094e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0f0      	beq.n	80094d4 <HAL_RCC_OscConfig+0x234>
 80094f2:	e01b      	b.n	800952c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094f4:	4b09      	ldr	r3, [pc, #36]	; (800951c <HAL_RCC_OscConfig+0x27c>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094fa:	f7fb fb99 	bl	8004c30 <HAL_GetTick>
 80094fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009500:	e00e      	b.n	8009520 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009502:	f7fb fb95 	bl	8004c30 <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	2b02      	cmp	r3, #2
 800950e:	d907      	bls.n	8009520 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e15c      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
 8009514:	40023800 	.word	0x40023800
 8009518:	42470000 	.word	0x42470000
 800951c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009520:	4b8a      	ldr	r3, [pc, #552]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009524:	f003 0302 	and.w	r3, r3, #2
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1ea      	bne.n	8009502 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 8097 	beq.w	8009668 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800953a:	2300      	movs	r3, #0
 800953c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800953e:	4b83      	ldr	r3, [pc, #524]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10f      	bne.n	800956a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800954a:	2300      	movs	r3, #0
 800954c:	60bb      	str	r3, [r7, #8]
 800954e:	4b7f      	ldr	r3, [pc, #508]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	4a7e      	ldr	r2, [pc, #504]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009558:	6413      	str	r3, [r2, #64]	; 0x40
 800955a:	4b7c      	ldr	r3, [pc, #496]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 800955c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009562:	60bb      	str	r3, [r7, #8]
 8009564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800956a:	4b79      	ldr	r3, [pc, #484]	; (8009750 <HAL_RCC_OscConfig+0x4b0>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009572:	2b00      	cmp	r3, #0
 8009574:	d118      	bne.n	80095a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009576:	4b76      	ldr	r3, [pc, #472]	; (8009750 <HAL_RCC_OscConfig+0x4b0>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a75      	ldr	r2, [pc, #468]	; (8009750 <HAL_RCC_OscConfig+0x4b0>)
 800957c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009582:	f7fb fb55 	bl	8004c30 <HAL_GetTick>
 8009586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009588:	e008      	b.n	800959c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800958a:	f7fb fb51 	bl	8004c30 <HAL_GetTick>
 800958e:	4602      	mov	r2, r0
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	2b02      	cmp	r3, #2
 8009596:	d901      	bls.n	800959c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e118      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800959c:	4b6c      	ldr	r3, [pc, #432]	; (8009750 <HAL_RCC_OscConfig+0x4b0>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d0f0      	beq.n	800958a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d106      	bne.n	80095be <HAL_RCC_OscConfig+0x31e>
 80095b0:	4b66      	ldr	r3, [pc, #408]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b4:	4a65      	ldr	r2, [pc, #404]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095b6:	f043 0301 	orr.w	r3, r3, #1
 80095ba:	6713      	str	r3, [r2, #112]	; 0x70
 80095bc:	e01c      	b.n	80095f8 <HAL_RCC_OscConfig+0x358>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	2b05      	cmp	r3, #5
 80095c4:	d10c      	bne.n	80095e0 <HAL_RCC_OscConfig+0x340>
 80095c6:	4b61      	ldr	r3, [pc, #388]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ca:	4a60      	ldr	r2, [pc, #384]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095cc:	f043 0304 	orr.w	r3, r3, #4
 80095d0:	6713      	str	r3, [r2, #112]	; 0x70
 80095d2:	4b5e      	ldr	r3, [pc, #376]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d6:	4a5d      	ldr	r2, [pc, #372]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095d8:	f043 0301 	orr.w	r3, r3, #1
 80095dc:	6713      	str	r3, [r2, #112]	; 0x70
 80095de:	e00b      	b.n	80095f8 <HAL_RCC_OscConfig+0x358>
 80095e0:	4b5a      	ldr	r3, [pc, #360]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e4:	4a59      	ldr	r2, [pc, #356]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095e6:	f023 0301 	bic.w	r3, r3, #1
 80095ea:	6713      	str	r3, [r2, #112]	; 0x70
 80095ec:	4b57      	ldr	r3, [pc, #348]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f0:	4a56      	ldr	r2, [pc, #344]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095f2:	f023 0304 	bic.w	r3, r3, #4
 80095f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d015      	beq.n	800962c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009600:	f7fb fb16 	bl	8004c30 <HAL_GetTick>
 8009604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009606:	e00a      	b.n	800961e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009608:	f7fb fb12 	bl	8004c30 <HAL_GetTick>
 800960c:	4602      	mov	r2, r0
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	f241 3288 	movw	r2, #5000	; 0x1388
 8009616:	4293      	cmp	r3, r2
 8009618:	d901      	bls.n	800961e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800961a:	2303      	movs	r3, #3
 800961c:	e0d7      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800961e:	4b4b      	ldr	r3, [pc, #300]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0ee      	beq.n	8009608 <HAL_RCC_OscConfig+0x368>
 800962a:	e014      	b.n	8009656 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800962c:	f7fb fb00 	bl	8004c30 <HAL_GetTick>
 8009630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009632:	e00a      	b.n	800964a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009634:	f7fb fafc 	bl	8004c30 <HAL_GetTick>
 8009638:	4602      	mov	r2, r0
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009642:	4293      	cmp	r3, r2
 8009644:	d901      	bls.n	800964a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e0c1      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800964a:	4b40      	ldr	r3, [pc, #256]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 800964c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964e:	f003 0302 	and.w	r3, r3, #2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1ee      	bne.n	8009634 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d105      	bne.n	8009668 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800965c:	4b3b      	ldr	r3, [pc, #236]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 800965e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009660:	4a3a      	ldr	r2, [pc, #232]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009666:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	2b00      	cmp	r3, #0
 800966e:	f000 80ad 	beq.w	80097cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009672:	4b36      	ldr	r3, [pc, #216]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f003 030c 	and.w	r3, r3, #12
 800967a:	2b08      	cmp	r3, #8
 800967c:	d060      	beq.n	8009740 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	2b02      	cmp	r3, #2
 8009684:	d145      	bne.n	8009712 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009686:	4b33      	ldr	r3, [pc, #204]	; (8009754 <HAL_RCC_OscConfig+0x4b4>)
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800968c:	f7fb fad0 	bl	8004c30 <HAL_GetTick>
 8009690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009692:	e008      	b.n	80096a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009694:	f7fb facc 	bl	8004c30 <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d901      	bls.n	80096a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e093      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096a6:	4b29      	ldr	r3, [pc, #164]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1f0      	bne.n	8009694 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69da      	ldr	r2, [r3, #28]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	431a      	orrs	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	019b      	lsls	r3, r3, #6
 80096c2:	431a      	orrs	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	085b      	lsrs	r3, r3, #1
 80096ca:	3b01      	subs	r3, #1
 80096cc:	041b      	lsls	r3, r3, #16
 80096ce:	431a      	orrs	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	061b      	lsls	r3, r3, #24
 80096d6:	431a      	orrs	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096dc:	071b      	lsls	r3, r3, #28
 80096de:	491b      	ldr	r1, [pc, #108]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80096e0:	4313      	orrs	r3, r2
 80096e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096e4:	4b1b      	ldr	r3, [pc, #108]	; (8009754 <HAL_RCC_OscConfig+0x4b4>)
 80096e6:	2201      	movs	r2, #1
 80096e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ea:	f7fb faa1 	bl	8004c30 <HAL_GetTick>
 80096ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096f0:	e008      	b.n	8009704 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096f2:	f7fb fa9d 	bl	8004c30 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d901      	bls.n	8009704 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e064      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009704:	4b11      	ldr	r3, [pc, #68]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800970c:	2b00      	cmp	r3, #0
 800970e:	d0f0      	beq.n	80096f2 <HAL_RCC_OscConfig+0x452>
 8009710:	e05c      	b.n	80097cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009712:	4b10      	ldr	r3, [pc, #64]	; (8009754 <HAL_RCC_OscConfig+0x4b4>)
 8009714:	2200      	movs	r2, #0
 8009716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009718:	f7fb fa8a 	bl	8004c30 <HAL_GetTick>
 800971c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800971e:	e008      	b.n	8009732 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009720:	f7fb fa86 	bl	8004c30 <HAL_GetTick>
 8009724:	4602      	mov	r2, r0
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	2b02      	cmp	r3, #2
 800972c:	d901      	bls.n	8009732 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800972e:	2303      	movs	r3, #3
 8009730:	e04d      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009732:	4b06      	ldr	r3, [pc, #24]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1f0      	bne.n	8009720 <HAL_RCC_OscConfig+0x480>
 800973e:	e045      	b.n	80097cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d107      	bne.n	8009758 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e040      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
 800974c:	40023800 	.word	0x40023800
 8009750:	40007000 	.word	0x40007000
 8009754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009758:	4b1f      	ldr	r3, [pc, #124]	; (80097d8 <HAL_RCC_OscConfig+0x538>)
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d030      	beq.n	80097c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009770:	429a      	cmp	r2, r3
 8009772:	d129      	bne.n	80097c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800977e:	429a      	cmp	r2, r3
 8009780:	d122      	bne.n	80097c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009788:	4013      	ands	r3, r2
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800978e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009790:	4293      	cmp	r3, r2
 8009792:	d119      	bne.n	80097c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979e:	085b      	lsrs	r3, r3, #1
 80097a0:	3b01      	subs	r3, #1
 80097a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d10f      	bne.n	80097c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d107      	bne.n	80097c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d001      	beq.n	80097cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e000      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	40023800 	.word	0x40023800

080097dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e083      	b.n	80098f6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	7f5b      	ldrb	r3, [r3, #29]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d105      	bne.n	8009804 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7fa ff76 	bl	80046f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2202      	movs	r2, #2
 8009808:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	22ca      	movs	r2, #202	; 0xca
 8009810:	625a      	str	r2, [r3, #36]	; 0x24
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2253      	movs	r2, #83	; 0x53
 8009818:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 faa8 	bl	8009d70 <RTC_EnterInitMode>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d008      	beq.n	8009838 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	22ff      	movs	r2, #255	; 0xff
 800982c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2204      	movs	r2, #4
 8009832:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e05e      	b.n	80098f6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	6812      	ldr	r2, [r2, #0]
 8009842:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800984a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6899      	ldr	r1, [r3, #8]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685a      	ldr	r2, [r3, #4]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	431a      	orrs	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	431a      	orrs	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	68d2      	ldr	r2, [r2, #12]
 8009872:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6919      	ldr	r1, [r3, #16]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	041a      	lsls	r2, r3, #16
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68da      	ldr	r2, [r3, #12]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009896:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f003 0320 	and.w	r3, r3, #32
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10e      	bne.n	80098c4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa3a 	bl	8009d20 <HAL_RTC_WaitForSynchro>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d008      	beq.n	80098c4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	22ff      	movs	r2, #255	; 0xff
 80098b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2204      	movs	r2, #4
 80098be:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e018      	b.n	80098f6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80098d2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	699a      	ldr	r2, [r3, #24]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	22ff      	movs	r2, #255	; 0xff
 80098ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80098f4:	2300      	movs	r3, #0
  }
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80098fe:	b590      	push	{r4, r7, lr}
 8009900:	b087      	sub	sp, #28
 8009902:	af00      	add	r7, sp, #0
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	7f1b      	ldrb	r3, [r3, #28]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d101      	bne.n	800991a <HAL_RTC_SetTime+0x1c>
 8009916:	2302      	movs	r3, #2
 8009918:	e0aa      	b.n	8009a70 <HAL_RTC_SetTime+0x172>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2201      	movs	r2, #1
 800991e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2202      	movs	r2, #2
 8009924:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d126      	bne.n	800997a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009936:	2b00      	cmp	r3, #0
 8009938:	d102      	bne.n	8009940 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	2200      	movs	r2, #0
 800993e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	4618      	mov	r0, r3
 8009946:	f000 fa3f 	bl	8009dc8 <RTC_ByteToBcd2>
 800994a:	4603      	mov	r3, r0
 800994c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	785b      	ldrb	r3, [r3, #1]
 8009952:	4618      	mov	r0, r3
 8009954:	f000 fa38 	bl	8009dc8 <RTC_ByteToBcd2>
 8009958:	4603      	mov	r3, r0
 800995a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800995c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	789b      	ldrb	r3, [r3, #2]
 8009962:	4618      	mov	r0, r3
 8009964:	f000 fa30 	bl	8009dc8 <RTC_ByteToBcd2>
 8009968:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800996a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	78db      	ldrb	r3, [r3, #3]
 8009972:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009974:	4313      	orrs	r3, r2
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	e018      	b.n	80099ac <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009984:	2b00      	cmp	r3, #0
 8009986:	d102      	bne.n	800998e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	2200      	movs	r2, #0
 800998c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	785b      	ldrb	r3, [r3, #1]
 8009998:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800999a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80099a0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	78db      	ldrb	r3, [r3, #3]
 80099a6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80099a8:	4313      	orrs	r3, r2
 80099aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	22ca      	movs	r2, #202	; 0xca
 80099b2:	625a      	str	r2, [r3, #36]	; 0x24
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2253      	movs	r2, #83	; 0x53
 80099ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 f9d7 	bl	8009d70 <RTC_EnterInitMode>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00b      	beq.n	80099e0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	22ff      	movs	r2, #255	; 0xff
 80099ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2204      	movs	r2, #4
 80099d4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e047      	b.n	8009a70 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80099ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80099ee:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	689a      	ldr	r2, [r3, #8]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80099fe:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6899      	ldr	r1, [r3, #8]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	68da      	ldr	r2, [r3, #12]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68da      	ldr	r2, [r3, #12]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f003 0320 	and.w	r3, r3, #32
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d111      	bne.n	8009a5a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 f972 	bl	8009d20 <HAL_RTC_WaitForSynchro>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00b      	beq.n	8009a5a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	22ff      	movs	r2, #255	; 0xff
 8009a48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2204      	movs	r2, #4
 8009a4e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e00a      	b.n	8009a70 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	22ff      	movs	r2, #255	; 0xff
 8009a60:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2201      	movs	r2, #1
 8009a66:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
  }
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	371c      	adds	r7, #28
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd90      	pop	{r4, r7, pc}

08009a78 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009aaa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009aae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	0c1b      	lsrs	r3, r3, #16
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	0a1b      	lsrs	r3, r3, #8
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	0c1b      	lsrs	r3, r3, #16
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d11a      	bne.n	8009b2a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 f983 	bl	8009e04 <RTC_Bcd2ToByte>
 8009afe:	4603      	mov	r3, r0
 8009b00:	461a      	mov	r2, r3
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	785b      	ldrb	r3, [r3, #1]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 f97a 	bl	8009e04 <RTC_Bcd2ToByte>
 8009b10:	4603      	mov	r3, r0
 8009b12:	461a      	mov	r2, r3
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	789b      	ldrb	r3, [r3, #2]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 f971 	bl	8009e04 <RTC_Bcd2ToByte>
 8009b22:	4603      	mov	r3, r0
 8009b24:	461a      	mov	r2, r3
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b34:	b590      	push	{r4, r7, lr}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009b40:	2300      	movs	r3, #0
 8009b42:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	7f1b      	ldrb	r3, [r3, #28]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_RTC_SetDate+0x1c>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e094      	b.n	8009c7a <HAL_RTC_SetDate+0x146>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2201      	movs	r2, #1
 8009b54:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2202      	movs	r2, #2
 8009b5a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10e      	bne.n	8009b80 <HAL_RTC_SetDate+0x4c>
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	785b      	ldrb	r3, [r3, #1]
 8009b66:	f003 0310 	and.w	r3, r3, #16
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d008      	beq.n	8009b80 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	785b      	ldrb	r3, [r3, #1]
 8009b72:	f023 0310 	bic.w	r3, r3, #16
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	330a      	adds	r3, #10
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d11c      	bne.n	8009bc0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	78db      	ldrb	r3, [r3, #3]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 f91c 	bl	8009dc8 <RTC_ByteToBcd2>
 8009b90:	4603      	mov	r3, r0
 8009b92:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	785b      	ldrb	r3, [r3, #1]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 f915 	bl	8009dc8 <RTC_ByteToBcd2>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009ba2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	789b      	ldrb	r3, [r3, #2]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 f90d 	bl	8009dc8 <RTC_ByteToBcd2>
 8009bae:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009bb0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	617b      	str	r3, [r7, #20]
 8009bbe:	e00e      	b.n	8009bde <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	78db      	ldrb	r3, [r3, #3]
 8009bc4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	785b      	ldrb	r3, [r3, #1]
 8009bca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009bcc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009bd2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	22ca      	movs	r2, #202	; 0xca
 8009be4:	625a      	str	r2, [r3, #36]	; 0x24
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2253      	movs	r2, #83	; 0x53
 8009bec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 f8be 	bl	8009d70 <RTC_EnterInitMode>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00b      	beq.n	8009c12 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	22ff      	movs	r2, #255	; 0xff
 8009c00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2204      	movs	r2, #4
 8009c06:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e033      	b.n	8009c7a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009c1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009c20:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c30:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	f003 0320 	and.w	r3, r3, #32
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d111      	bne.n	8009c64 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 f86d 	bl	8009d20 <HAL_RTC_WaitForSynchro>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00b      	beq.n	8009c64 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	22ff      	movs	r2, #255	; 0xff
 8009c52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2204      	movs	r2, #4
 8009c58:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e00a      	b.n	8009c7a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	22ff      	movs	r2, #255	; 0xff
 8009c6a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009c78:	2300      	movs	r3, #0
  }
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	371c      	adds	r7, #28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd90      	pop	{r4, r7, pc}

08009c82 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b086      	sub	sp, #24
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009c9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ca0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	0c1b      	lsrs	r3, r3, #16
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	0a1b      	lsrs	r3, r3, #8
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	f003 031f 	and.w	r3, r3, #31
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	0b5b      	lsrs	r3, r3, #13
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	f003 0307 	and.w	r3, r3, #7
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d11a      	bne.n	8009d16 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	78db      	ldrb	r3, [r3, #3]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 f88d 	bl	8009e04 <RTC_Bcd2ToByte>
 8009cea:	4603      	mov	r3, r0
 8009cec:	461a      	mov	r2, r3
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	785b      	ldrb	r3, [r3, #1]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 f884 	bl	8009e04 <RTC_Bcd2ToByte>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	461a      	mov	r2, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	789b      	ldrb	r3, [r3, #2]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 f87b 	bl	8009e04 <RTC_Bcd2ToByte>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	461a      	mov	r2, r3
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68da      	ldr	r2, [r3, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009d3a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d3c:	f7fa ff78 	bl	8004c30 <HAL_GetTick>
 8009d40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009d42:	e009      	b.n	8009d58 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009d44:	f7fa ff74 	bl	8004c30 <HAL_GetTick>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d52:	d901      	bls.n	8009d58 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009d54:	2303      	movs	r3, #3
 8009d56:	e007      	b.n	8009d68 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	f003 0320 	and.w	r3, r3, #32
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d0ee      	beq.n	8009d44 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d119      	bne.n	8009dbe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d92:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d94:	f7fa ff4c 	bl	8004c30 <HAL_GetTick>
 8009d98:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009d9a:	e009      	b.n	8009db0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009d9c:	f7fa ff48 	bl	8004c30 <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009daa:	d901      	bls.n	8009db0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e007      	b.n	8009dc0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0ee      	beq.n	8009d9c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8009dd6:	e005      	b.n	8009de4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009dde:	79fb      	ldrb	r3, [r7, #7]
 8009de0:	3b0a      	subs	r3, #10
 8009de2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8009de4:	79fb      	ldrb	r3, [r7, #7]
 8009de6:	2b09      	cmp	r3, #9
 8009de8:	d8f6      	bhi.n	8009dd8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	011b      	lsls	r3, r3, #4
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	b2db      	uxtb	r3, r3
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	091b      	lsrs	r3, r3, #4
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	461a      	mov	r2, r3
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	005b      	lsls	r3, r3, #1
 8009e22:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009e24:	79fb      	ldrb	r3, [r7, #7]
 8009e26:	f003 030f 	and.w	r3, r3, #15
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	4413      	add	r3, r2
 8009e32:	b2db      	uxtb	r3, r3
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e022      	b.n	8009e98 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d105      	bne.n	8009e6a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7fa fc6d 	bl	8004744 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2203      	movs	r2, #3
 8009e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f814 	bl	8009ea0 <HAL_SD_InitCard>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e00a      	b.n	8009e98 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ea0:	b5b0      	push	{r4, r5, r7, lr}
 8009ea2:	b08e      	sub	sp, #56	; 0x38
 8009ea4:	af04      	add	r7, sp, #16
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009eac:	2300      	movs	r3, #0
 8009eae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009ebc:	2376      	movs	r3, #118	; 0x76
 8009ebe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681d      	ldr	r5, [r3, #0]
 8009ec4:	466c      	mov	r4, sp
 8009ec6:	f107 0314 	add.w	r3, r7, #20
 8009eca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ed2:	f107 0308 	add.w	r3, r7, #8
 8009ed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f001 fd79 	bl	800b9d0 <SDIO_Init>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e04c      	b.n	8009f8a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009ef0:	4b28      	ldr	r3, [pc, #160]	; (8009f94 <HAL_SD_InitCard+0xf4>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f001 fdb1 	bl	800ba62 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009f00:	4b24      	ldr	r3, [pc, #144]	; (8009f94 <HAL_SD_InitCard+0xf4>)
 8009f02:	2201      	movs	r2, #1
 8009f04:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 ffee 	bl	800aee8 <SD_PowerON>
 8009f0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00b      	beq.n	8009f2c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f20:	6a3b      	ldr	r3, [r7, #32]
 8009f22:	431a      	orrs	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e02e      	b.n	8009f8a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 ff0f 	bl	800ad50 <SD_InitCard>
 8009f32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00b      	beq.n	8009f52 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e01b      	b.n	8009f8a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 fe14 	bl	800bb88 <SDMMC_CmdBlockLength>
 8009f60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00f      	beq.n	8009f88 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a0a      	ldr	r2, [pc, #40]	; (8009f98 <HAL_SD_InitCard+0xf8>)
 8009f6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e000      	b.n	8009f8a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3728      	adds	r7, #40	; 0x28
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bdb0      	pop	{r4, r5, r7, pc}
 8009f92:	bf00      	nop
 8009f94:	422580a0 	.word	0x422580a0
 8009f98:	004005ff 	.word	0x004005ff

08009f9c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08c      	sub	sp, #48	; 0x30
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d107      	bne.n	8009fc4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e0be      	b.n	800a142 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	f040 80b7 	bne.w	800a140 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	441a      	add	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d907      	bls.n	8009ff6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e0a5      	b.n	800a142 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2203      	movs	r2, #3
 8009ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2200      	movs	r2, #0
 800a004:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a014:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01a:	4a4c      	ldr	r2, [pc, #304]	; (800a14c <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800a01c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	4a4b      	ldr	r2, [pc, #300]	; (800a150 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800a024:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02a:	2200      	movs	r2, #0
 800a02c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a032:	2200      	movs	r2, #0
 800a034:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3380      	adds	r3, #128	; 0x80
 800a05c:	4619      	mov	r1, r3
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	025b      	lsls	r3, r3, #9
 800a064:	089b      	lsrs	r3, r3, #2
 800a066:	f7fb ff91 	bl	8005f8c <HAL_DMA_Start_IT>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d017      	beq.n	800a0a0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a07e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a33      	ldr	r2, [pc, #204]	; (800a154 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a086:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e050      	b.n	800a142 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a0a0:	4b2d      	ldr	r3, [pc, #180]	; (800a158 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d002      	beq.n	800a0b4 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	025b      	lsls	r3, r3, #9
 800a0b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	025b      	lsls	r3, r3, #9
 800a0be:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a0c0:	2390      	movs	r3, #144	; 0x90
 800a0c2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f107 0210 	add.w	r2, r7, #16
 800a0d8:	4611      	mov	r1, r2
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f001 fd28 	bl	800bb30 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d90a      	bls.n	800a0fc <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2282      	movs	r2, #130	; 0x82
 800a0ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f001 fd8c 	bl	800bc10 <SDMMC_CmdReadMultiBlock>
 800a0f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a0fa:	e009      	b.n	800a110 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2281      	movs	r2, #129	; 0x81
 800a100:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a108:	4618      	mov	r0, r3
 800a10a:	f001 fd5f 	bl	800bbcc <SDMMC_CmdReadSingleBlock>
 800a10e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a112:	2b00      	cmp	r3, #0
 800a114:	d012      	beq.n	800a13c <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a0e      	ldr	r2, [pc, #56]	; (800a154 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a11c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a124:	431a      	orrs	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e002      	b.n	800a142 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	e000      	b.n	800a142 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a140:	2302      	movs	r3, #2
  }
}
 800a142:	4618      	mov	r0, r3
 800a144:	3730      	adds	r7, #48	; 0x30
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	0800ab5f 	.word	0x0800ab5f
 800a150:	0800abd1 	.word	0x0800abd1
 800a154:	004005ff 	.word	0x004005ff
 800a158:	4225858c 	.word	0x4225858c

0800a15c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08c      	sub	sp, #48	; 0x30
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d107      	bne.n	800a184 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a178:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e0c1      	b.n	800a308 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	f040 80ba 	bne.w	800a306 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	441a      	add	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d907      	bls.n	800a1b6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e0a8      	b.n	800a308 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2203      	movs	r2, #3
 800a1ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f042 021a 	orr.w	r2, r2, #26
 800a1d4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1da:	4a4d      	ldr	r2, [pc, #308]	; (800a310 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800a1dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e2:	4a4c      	ldr	r2, [pc, #304]	; (800a314 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800a1e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d002      	beq.n	800a1fc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f8:	025b      	lsls	r3, r3, #9
 800a1fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d90a      	bls.n	800a218 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	22a0      	movs	r2, #160	; 0xa0
 800a206:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a20e:	4618      	mov	r0, r3
 800a210:	f001 fd42 	bl	800bc98 <SDMMC_CmdWriteMultiBlock>
 800a214:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a216:	e009      	b.n	800a22c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2290      	movs	r2, #144	; 0x90
 800a21c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a224:	4618      	mov	r0, r3
 800a226:	f001 fd15 	bl	800bc54 <SDMMC_CmdWriteSingleBlock>
 800a22a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d012      	beq.n	800a258 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a38      	ldr	r2, [pc, #224]	; (800a318 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800a238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a240:	431a      	orrs	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e057      	b.n	800a308 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a258:	4b30      	ldr	r3, [pc, #192]	; (800a31c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a25a:	2201      	movs	r2, #1
 800a25c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a262:	2240      	movs	r2, #64	; 0x40
 800a264:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a276:	689a      	ldr	r2, [r3, #8]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a286:	68b9      	ldr	r1, [r7, #8]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	3380      	adds	r3, #128	; 0x80
 800a28e:	461a      	mov	r2, r3
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	025b      	lsls	r3, r3, #9
 800a294:	089b      	lsrs	r3, r3, #2
 800a296:	f7fb fe79 	bl	8005f8c <HAL_DMA_Start_IT>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d01a      	beq.n	800a2d6 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f022 021a 	bic.w	r2, r2, #26
 800a2ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a18      	ldr	r2, [pc, #96]	; (800a318 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800a2b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e018      	b.n	800a308 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2da:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	025b      	lsls	r3, r3, #9
 800a2e0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a2e2:	2390      	movs	r3, #144	; 0x90
 800a2e4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f107 0210 	add.w	r2, r7, #16
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f001 fc17 	bl	800bb30 <SDIO_ConfigData>

      return HAL_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	e000      	b.n	800a308 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800a306:	2302      	movs	r3, #2
  }
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3730      	adds	r7, #48	; 0x30
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	0800ab35 	.word	0x0800ab35
 800a314:	0800abd1 	.word	0x0800abd1
 800a318:	004005ff 	.word	0x004005ff
 800a31c:	4225858c 	.word	0x4225858c

0800a320 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d008      	beq.n	800a34e <HAL_SD_IRQHandler+0x2e>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f003 0308 	and.w	r3, r3, #8
 800a342:	2b00      	cmp	r3, #0
 800a344:	d003      	beq.n	800a34e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 ffed 	bl	800b326 <SD_Read_IT>
 800a34c:	e155      	b.n	800a5fa <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 808f 	beq.w	800a47c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a366:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	6812      	ldr	r2, [r2, #0]
 800a372:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a376:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a37a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f022 0201 	bic.w	r2, r2, #1
 800a38a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f003 0308 	and.w	r3, r3, #8
 800a392:	2b00      	cmp	r3, #0
 800a394:	d039      	beq.n	800a40a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f003 0302 	and.w	r3, r3, #2
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d104      	bne.n	800a3aa <HAL_SD_IRQHandler+0x8a>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f003 0320 	and.w	r3, r3, #32
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d011      	beq.n	800a3ce <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f001 fc94 	bl	800bcdc <SDMMC_CmdStopTransfer>
 800a3b4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d008      	beq.n	800a3ce <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	431a      	orrs	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f91f 	bl	800a60c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f240 523a 	movw	r2, #1338	; 0x53a
 800a3d6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d104      	bne.n	800a3fa <HAL_SD_IRQHandler+0xda>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d003      	beq.n	800a402 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f003 fc76 	bl	800dcec <HAL_SD_RxCpltCallback>
 800a400:	e0fb      	b.n	800a5fa <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f003 fc68 	bl	800dcd8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a408:	e0f7      	b.n	800a5fa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 80f2 	beq.w	800a5fa <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f003 0320 	and.w	r3, r3, #32
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d011      	beq.n	800a444 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4618      	mov	r0, r3
 800a426:	f001 fc59 	bl	800bcdc <SDMMC_CmdStopTransfer>
 800a42a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d008      	beq.n	800a444 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	431a      	orrs	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f8e4 	bl	800a60c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f040 80d5 	bne.w	800a5fa <HAL_SD_IRQHandler+0x2da>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f003 0302 	and.w	r3, r3, #2
 800a456:	2b00      	cmp	r3, #0
 800a458:	f040 80cf 	bne.w	800a5fa <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f022 0208 	bic.w	r2, r2, #8
 800a46a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f003 fc2f 	bl	800dcd8 <HAL_SD_TxCpltCallback>
}
 800a47a:	e0be      	b.n	800a5fa <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a486:	2b00      	cmp	r3, #0
 800a488:	d008      	beq.n	800a49c <HAL_SD_IRQHandler+0x17c>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f003 0308 	and.w	r3, r3, #8
 800a490:	2b00      	cmp	r3, #0
 800a492:	d003      	beq.n	800a49c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 ff97 	bl	800b3c8 <SD_Write_IT>
 800a49a:	e0ae      	b.n	800a5fa <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f000 80a7 	beq.w	800a5fa <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b2:	f003 0302 	and.w	r3, r3, #2
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d005      	beq.n	800a4c6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4be:	f043 0202 	orr.w	r2, r3, #2
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4cc:	f003 0308 	and.w	r3, r3, #8
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d005      	beq.n	800a4e0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d8:	f043 0208 	orr.w	r2, r3, #8
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e6:	f003 0320 	and.w	r3, r3, #32
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d005      	beq.n	800a4fa <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f2:	f043 0220 	orr.w	r2, r3, #32
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a500:	f003 0310 	and.w	r3, r3, #16
 800a504:	2b00      	cmp	r3, #0
 800a506:	d005      	beq.n	800a514 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50c:	f043 0210 	orr.w	r2, r3, #16
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f240 523a 	movw	r2, #1338	; 0x53a
 800a51c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a52c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4618      	mov	r0, r3
 800a534:	f001 fbd2 	bl	800bcdc <SDMMC_CmdStopTransfer>
 800a538:	4602      	mov	r2, r0
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53e:	431a      	orrs	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f003 0308 	and.w	r3, r3, #8
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f855 	bl	800a60c <HAL_SD_ErrorCallback>
}
 800a562:	e04a      	b.n	800a5fa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d045      	beq.n	800a5fa <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f003 0310 	and.w	r3, r3, #16
 800a574:	2b00      	cmp	r3, #0
 800a576:	d104      	bne.n	800a582 <HAL_SD_IRQHandler+0x262>
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f003 0320 	and.w	r3, r3, #32
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d011      	beq.n	800a5a6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a586:	4a1f      	ldr	r2, [pc, #124]	; (800a604 <HAL_SD_IRQHandler+0x2e4>)
 800a588:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fb fd54 	bl	800603c <HAL_DMA_Abort_IT>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d02f      	beq.n	800a5fa <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 fb68 	bl	800ac74 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a5a4:	e029      	b.n	800a5fa <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f003 0301 	and.w	r3, r3, #1
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d104      	bne.n	800a5ba <HAL_SD_IRQHandler+0x29a>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f003 0302 	and.w	r3, r3, #2
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d011      	beq.n	800a5de <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5be:	4a12      	ldr	r2, [pc, #72]	; (800a608 <HAL_SD_IRQHandler+0x2e8>)
 800a5c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fb fd38 	bl	800603c <HAL_DMA_Abort_IT>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d013      	beq.n	800a5fa <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fb83 	bl	800ace2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a5dc:	e00d      	b.n	800a5fa <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f003 fb66 	bl	800dcc4 <HAL_SD_AbortCallback>
}
 800a5f8:	e7ff      	b.n	800a5fa <HAL_SD_IRQHandler+0x2da>
 800a5fa:	bf00      	nop
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	0800ac75 	.word	0x0800ac75
 800a608:	0800ace3 	.word	0x0800ace3

0800a60c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a62e:	0f9b      	lsrs	r3, r3, #30
 800a630:	b2da      	uxtb	r2, r3
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a63a:	0e9b      	lsrs	r3, r3, #26
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	f003 030f 	and.w	r3, r3, #15
 800a642:	b2da      	uxtb	r2, r3
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a64c:	0e1b      	lsrs	r3, r3, #24
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	f003 0303 	and.w	r3, r3, #3
 800a654:	b2da      	uxtb	r2, r3
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a65e:	0c1b      	lsrs	r3, r3, #16
 800a660:	b2da      	uxtb	r2, r3
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a66a:	0a1b      	lsrs	r3, r3, #8
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a676:	b2da      	uxtb	r2, r3
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a680:	0d1b      	lsrs	r3, r3, #20
 800a682:	b29a      	uxth	r2, r3
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a68c:	0c1b      	lsrs	r3, r3, #16
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	f003 030f 	and.w	r3, r3, #15
 800a694:	b2da      	uxtb	r2, r3
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a69e:	0bdb      	lsrs	r3, r3, #15
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6b0:	0b9b      	lsrs	r3, r3, #14
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6c2:	0b5b      	lsrs	r3, r3, #13
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6d4:	0b1b      	lsrs	r3, r3, #12
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	f003 0301 	and.w	r3, r3, #1
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d163      	bne.n	800a7b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6f4:	009a      	lsls	r2, r3, #2
 800a6f6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a700:	0f92      	lsrs	r2, r2, #30
 800a702:	431a      	orrs	r2, r3
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a70c:	0edb      	lsrs	r3, r3, #27
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	f003 0307 	and.w	r3, r3, #7
 800a714:	b2da      	uxtb	r2, r3
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a71e:	0e1b      	lsrs	r3, r3, #24
 800a720:	b2db      	uxtb	r3, r3
 800a722:	f003 0307 	and.w	r3, r3, #7
 800a726:	b2da      	uxtb	r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a730:	0d5b      	lsrs	r3, r3, #21
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 0307 	and.w	r3, r3, #7
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a742:	0c9b      	lsrs	r3, r3, #18
 800a744:	b2db      	uxtb	r3, r3
 800a746:	f003 0307 	and.w	r3, r3, #7
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a754:	0bdb      	lsrs	r3, r3, #15
 800a756:	b2db      	uxtb	r3, r3
 800a758:	f003 0307 	and.w	r3, r3, #7
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	7e1b      	ldrb	r3, [r3, #24]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	f003 0307 	and.w	r3, r3, #7
 800a776:	3302      	adds	r3, #2
 800a778:	2201      	movs	r2, #1
 800a77a:	fa02 f303 	lsl.w	r3, r2, r3
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a782:	fb02 f203 	mul.w	r2, r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	7a1b      	ldrb	r3, [r3, #8]
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	f003 030f 	and.w	r3, r3, #15
 800a794:	2201      	movs	r2, #1
 800a796:	409a      	lsls	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a7a4:	0a52      	lsrs	r2, r2, #9
 800a7a6:	fb02 f203 	mul.w	r2, r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7b4:	661a      	str	r2, [r3, #96]	; 0x60
 800a7b6:	e031      	b.n	800a81c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d11d      	bne.n	800a7fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7c4:	041b      	lsls	r3, r3, #16
 800a7c6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7ce:	0c1b      	lsrs	r3, r3, #16
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	029a      	lsls	r2, r3, #10
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7f0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	661a      	str	r2, [r3, #96]	; 0x60
 800a7fa:	e00f      	b.n	800a81c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a58      	ldr	r2, [pc, #352]	; (800a964 <HAL_SD_GetCardCSD+0x344>)
 800a802:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a808:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e09d      	b.n	800a958 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a820:	0b9b      	lsrs	r3, r3, #14
 800a822:	b2db      	uxtb	r3, r3
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a832:	09db      	lsrs	r3, r3, #7
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a844:	b2db      	uxtb	r3, r3
 800a846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a84a:	b2da      	uxtb	r2, r3
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a854:	0fdb      	lsrs	r3, r3, #31
 800a856:	b2da      	uxtb	r2, r3
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a860:	0f5b      	lsrs	r3, r3, #29
 800a862:	b2db      	uxtb	r3, r3
 800a864:	f003 0303 	and.w	r3, r3, #3
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a872:	0e9b      	lsrs	r3, r3, #26
 800a874:	b2db      	uxtb	r3, r3
 800a876:	f003 0307 	and.w	r3, r3, #7
 800a87a:	b2da      	uxtb	r2, r3
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a884:	0d9b      	lsrs	r3, r3, #22
 800a886:	b2db      	uxtb	r3, r3
 800a888:	f003 030f 	and.w	r3, r3, #15
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a896:	0d5b      	lsrs	r3, r3, #21
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b2:	0c1b      	lsrs	r3, r3, #16
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c6:	0bdb      	lsrs	r3, r3, #15
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	f003 0301 	and.w	r3, r3, #1
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8da:	0b9b      	lsrs	r3, r3, #14
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	b2da      	uxtb	r2, r3
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ee:	0b5b      	lsrs	r3, r3, #13
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a902:	0b1b      	lsrs	r3, r3, #12
 800a904:	b2db      	uxtb	r3, r3
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a916:	0a9b      	lsrs	r3, r3, #10
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	f003 0303 	and.w	r3, r3, #3
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92a:	0a1b      	lsrs	r3, r3, #8
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	f003 0303 	and.w	r3, r3, #3
 800a932:	b2da      	uxtb	r2, r3
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a93e:	085b      	lsrs	r3, r3, #1
 800a940:	b2db      	uxtb	r3, r3
 800a942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a946:	b2da      	uxtb	r2, r3
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	004005ff 	.word	0x004005ff

0800a968 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a9c0:	b5b0      	push	{r4, r5, r7, lr}
 800a9c2:	b08e      	sub	sp, #56	; 0x38
 800a9c4:	af04      	add	r7, sp, #16
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2203      	movs	r2, #3
 800a9d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	d02e      	beq.n	800aa3e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e6:	d106      	bne.n	800a9f6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	639a      	str	r2, [r3, #56]	; 0x38
 800a9f4:	e029      	b.n	800aa4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9fc:	d10a      	bne.n	800aa14 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fb28 	bl	800b054 <SD_WideBus_Enable>
 800aa04:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	431a      	orrs	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	639a      	str	r2, [r3, #56]	; 0x38
 800aa12:	e01a      	b.n	800aa4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10a      	bne.n	800aa30 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fb65 	bl	800b0ea <SD_WideBus_Disable>
 800aa20:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	431a      	orrs	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	639a      	str	r2, [r3, #56]	; 0x38
 800aa2e:	e00c      	b.n	800aa4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	639a      	str	r2, [r3, #56]	; 0x38
 800aa3c:	e005      	b.n	800aa4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa42:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00b      	beq.n	800aa6a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a26      	ldr	r2, [pc, #152]	; (800aaf0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800aa58:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa68:	e01f      	b.n	800aaaa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	699b      	ldr	r3, [r3, #24]
 800aa8a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681d      	ldr	r5, [r3, #0]
 800aa90:	466c      	mov	r4, sp
 800aa92:	f107 0314 	add.w	r3, r7, #20
 800aa96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aa9e:	f107 0308 	add.w	r3, r7, #8
 800aaa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	f000 ff93 	bl	800b9d0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 f868 	bl	800bb88 <SDMMC_CmdBlockLength>
 800aab8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00c      	beq.n	800aada <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a0a      	ldr	r2, [pc, #40]	; (800aaf0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800aac6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	431a      	orrs	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800aae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3728      	adds	r7, #40	; 0x28
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bdb0      	pop	{r4, r5, r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	004005ff 	.word	0x004005ff

0800aaf4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aafc:	2300      	movs	r3, #0
 800aafe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ab00:	f107 030c 	add.w	r3, r7, #12
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fa7c 	bl	800b004 <SD_SendStatus>
 800ab0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d005      	beq.n	800ab20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	431a      	orrs	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	0a5b      	lsrs	r3, r3, #9
 800ab24:	f003 030f 	and.w	r3, r3, #15
 800ab28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ab2a:	693b      	ldr	r3, [r7, #16]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3718      	adds	r7, #24
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab40:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab50:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ab52:	bf00      	nop
 800ab54:	3714      	adds	r7, #20
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab70:	2b82      	cmp	r3, #130	; 0x82
 800ab72:	d111      	bne.n	800ab98 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f001 f8af 	bl	800bcdc <SDMMC_CmdStopTransfer>
 800ab7e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d008      	beq.n	800ab98 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	431a      	orrs	r2, r3
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f7ff fd3a 	bl	800a60c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f022 0208 	bic.w	r2, r2, #8
 800aba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f240 523a 	movw	r2, #1338	; 0x53a
 800abb0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2200      	movs	r2, #0
 800abbe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f003 f893 	bl	800dcec <HAL_SD_RxCpltCallback>
#endif
}
 800abc6:	bf00      	nop
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
	...

0800abd0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abdc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7fb fbd8 	bl	8006394 <HAL_DMA_GetError>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d03e      	beq.n	800ac68 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abf0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abf8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d002      	beq.n	800ac06 <SD_DMAError+0x36>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d12d      	bne.n	800ac62 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a19      	ldr	r2, [pc, #100]	; (800ac70 <SD_DMAError+0xa0>)
 800ac0c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ac1c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ac2a:	6978      	ldr	r0, [r7, #20]
 800ac2c:	f7ff ff62 	bl	800aaf4 <HAL_SD_GetCardState>
 800ac30:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b06      	cmp	r3, #6
 800ac36:	d002      	beq.n	800ac3e <SD_DMAError+0x6e>
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2b05      	cmp	r3, #5
 800ac3c:	d10a      	bne.n	800ac54 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4618      	mov	r0, r3
 800ac44:	f001 f84a 	bl	800bcdc <SDMMC_CmdStopTransfer>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4e:	431a      	orrs	r2, r3
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ac62:	6978      	ldr	r0, [r7, #20]
 800ac64:	f7ff fcd2 	bl	800a60c <HAL_SD_ErrorCallback>
#endif
  }
}
 800ac68:	bf00      	nop
 800ac6a:	3718      	adds	r7, #24
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	004005ff 	.word	0x004005ff

0800ac74 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac80:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac8a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f7ff ff31 	bl	800aaf4 <HAL_SD_GetCardState>
 800ac92:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2b06      	cmp	r3, #6
 800aca6:	d002      	beq.n	800acae <SD_DMATxAbort+0x3a>
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2b05      	cmp	r3, #5
 800acac:	d10a      	bne.n	800acc4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f001 f812 	bl	800bcdc <SDMMC_CmdStopTransfer>
 800acb8:	4602      	mov	r2, r0
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbe:	431a      	orrs	r2, r3
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d103      	bne.n	800acd4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f002 fff9 	bl	800dcc4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800acd2:	e002      	b.n	800acda <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f7ff fc99 	bl	800a60c <HAL_SD_ErrorCallback>
}
 800acda:	bf00      	nop
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f240 523a 	movw	r2, #1338	; 0x53a
 800acf8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f7ff fefa 	bl	800aaf4 <HAL_SD_GetCardState>
 800ad00:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	2b06      	cmp	r3, #6
 800ad14:	d002      	beq.n	800ad1c <SD_DMARxAbort+0x3a>
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	2b05      	cmp	r3, #5
 800ad1a:	d10a      	bne.n	800ad32 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f000 ffdb 	bl	800bcdc <SDMMC_CmdStopTransfer>
 800ad26:	4602      	mov	r2, r0
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2c:	431a      	orrs	r2, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d103      	bne.n	800ad42 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f002 ffc2 	bl	800dcc4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ad40:	e002      	b.n	800ad48 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f7ff fc62 	bl	800a60c <HAL_SD_ErrorCallback>
}
 800ad48:	bf00      	nop
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad50:	b5b0      	push	{r4, r5, r7, lr}
 800ad52:	b094      	sub	sp, #80	; 0x50
 800ad54:	af04      	add	r7, sp, #16
 800ad56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 fe8d 	bl	800ba80 <SDIO_GetPowerState>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d102      	bne.n	800ad72 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ad70:	e0b6      	b.n	800aee0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	d02f      	beq.n	800adda <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f001 f8b6 	bl	800bef0 <SDMMC_CmdSendCID>
 800ad84:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d001      	beq.n	800ad90 <SD_InitCard+0x40>
    {
      return errorstate;
 800ad8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad8e:	e0a7      	b.n	800aee0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2100      	movs	r1, #0
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 feb7 	bl	800bb0a <SDIO_GetResponse>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2104      	movs	r1, #4
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 feae 	bl	800bb0a <SDIO_GetResponse>
 800adae:	4602      	mov	r2, r0
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2108      	movs	r1, #8
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 fea5 	bl	800bb0a <SDIO_GetResponse>
 800adc0:	4602      	mov	r2, r0
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	210c      	movs	r1, #12
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 fe9c 	bl	800bb0a <SDIO_GetResponse>
 800add2:	4602      	mov	r2, r0
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d00d      	beq.n	800adfe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f107 020e 	add.w	r2, r7, #14
 800adea:	4611      	mov	r1, r2
 800adec:	4618      	mov	r0, r3
 800adee:	f001 f8bc 	bl	800bf6a <SDMMC_CmdSetRelAdd>
 800adf2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800adf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <SD_InitCard+0xae>
    {
      return errorstate;
 800adfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adfc:	e070      	b.n	800aee0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d036      	beq.n	800ae74 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ae06:	89fb      	ldrh	r3, [r7, #14]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae16:	041b      	lsls	r3, r3, #16
 800ae18:	4619      	mov	r1, r3
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	f001 f886 	bl	800bf2c <SDMMC_CmdSendCSD>
 800ae20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <SD_InitCard+0xdc>
    {
      return errorstate;
 800ae28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae2a:	e059      	b.n	800aee0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2100      	movs	r1, #0
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 fe69 	bl	800bb0a <SDIO_GetResponse>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2104      	movs	r1, #4
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fe60 	bl	800bb0a <SDIO_GetResponse>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2108      	movs	r1, #8
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 fe57 	bl	800bb0a <SDIO_GetResponse>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	210c      	movs	r1, #12
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 fe4e 	bl	800bb0a <SDIO_GetResponse>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2104      	movs	r1, #4
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f000 fe45 	bl	800bb0a <SDIO_GetResponse>
 800ae80:	4603      	mov	r3, r0
 800ae82:	0d1a      	lsrs	r2, r3, #20
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae88:	f107 0310 	add.w	r3, r7, #16
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7ff fbc6 	bl	800a620 <HAL_SD_GetCardCSD>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d002      	beq.n	800aea0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae9e:	e01f      	b.n	800aee0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6819      	ldr	r1, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aea8:	041b      	lsls	r3, r3, #16
 800aeaa:	461a      	mov	r2, r3
 800aeac:	f04f 0300 	mov.w	r3, #0
 800aeb0:	4608      	mov	r0, r1
 800aeb2:	f000 ff35 	bl	800bd20 <SDMMC_CmdSelDesel>
 800aeb6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <SD_InitCard+0x172>
  {
    return errorstate;
 800aebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec0:	e00e      	b.n	800aee0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681d      	ldr	r5, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	466c      	mov	r4, sp
 800aeca:	f103 0210 	add.w	r2, r3, #16
 800aece:	ca07      	ldmia	r2, {r0, r1, r2}
 800aed0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aed4:	3304      	adds	r3, #4
 800aed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aed8:	4628      	mov	r0, r5
 800aeda:	f000 fd79 	bl	800b9d0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3740      	adds	r7, #64	; 0x40
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bdb0      	pop	{r4, r5, r7, pc}

0800aee8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aef4:	2300      	movs	r3, #0
 800aef6:	617b      	str	r3, [r7, #20]
 800aef8:	2300      	movs	r3, #0
 800aefa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4618      	mov	r0, r3
 800af02:	f000 ff30 	bl	800bd66 <SDMMC_CmdGoIdleState>
 800af06:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <SD_PowerON+0x2a>
  {
    return errorstate;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	e072      	b.n	800aff8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4618      	mov	r0, r3
 800af18:	f000 ff43 	bl	800bda2 <SDMMC_CmdOperCond>
 800af1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00d      	beq.n	800af40 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 ff19 	bl	800bd66 <SDMMC_CmdGoIdleState>
 800af34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d004      	beq.n	800af46 <SD_PowerON+0x5e>
    {
      return errorstate;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	e05b      	b.n	800aff8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d137      	bne.n	800afbe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2100      	movs	r1, #0
 800af54:	4618      	mov	r0, r3
 800af56:	f000 ff43 	bl	800bde0 <SDMMC_CmdAppCommand>
 800af5a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d02d      	beq.n	800afbe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af66:	e047      	b.n	800aff8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2100      	movs	r1, #0
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 ff36 	bl	800bde0 <SDMMC_CmdAppCommand>
 800af74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <SD_PowerON+0x98>
    {
      return errorstate;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	e03b      	b.n	800aff8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	491e      	ldr	r1, [pc, #120]	; (800b000 <SD_PowerON+0x118>)
 800af86:	4618      	mov	r0, r3
 800af88:	f000 ff4c 	bl	800be24 <SDMMC_CmdAppOperCommand>
 800af8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af98:	e02e      	b.n	800aff8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2100      	movs	r1, #0
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 fdb2 	bl	800bb0a <SDIO_GetResponse>
 800afa6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	0fdb      	lsrs	r3, r3, #31
 800afac:	2b01      	cmp	r3, #1
 800afae:	d101      	bne.n	800afb4 <SD_PowerON+0xcc>
 800afb0:	2301      	movs	r3, #1
 800afb2:	e000      	b.n	800afb6 <SD_PowerON+0xce>
 800afb4:	2300      	movs	r3, #0
 800afb6:	613b      	str	r3, [r7, #16]

    count++;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	3301      	adds	r3, #1
 800afbc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d802      	bhi.n	800afce <SD_PowerON+0xe6>
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0cc      	beq.n	800af68 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d902      	bls.n	800afde <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800afd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afdc:	e00c      	b.n	800aff8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d003      	beq.n	800aff0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	645a      	str	r2, [r3, #68]	; 0x44
 800afee:	e002      	b.n	800aff6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3718      	adds	r7, #24
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	c1100000 	.word	0xc1100000

0800b004 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d102      	bne.n	800b01a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b014:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b018:	e018      	b.n	800b04c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b022:	041b      	lsls	r3, r3, #16
 800b024:	4619      	mov	r1, r3
 800b026:	4610      	mov	r0, r2
 800b028:	f000 ffc0 	bl	800bfac <SDMMC_CmdSendStatus>
 800b02c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	e009      	b.n	800b04c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2100      	movs	r1, #0
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 fd63 	bl	800bb0a <SDIO_GetResponse>
 800b044:	4602      	mov	r2, r0
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b05c:	2300      	movs	r3, #0
 800b05e:	60fb      	str	r3, [r7, #12]
 800b060:	2300      	movs	r3, #0
 800b062:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2100      	movs	r1, #0
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 fd4d 	bl	800bb0a <SDIO_GetResponse>
 800b070:	4603      	mov	r3, r0
 800b072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b07a:	d102      	bne.n	800b082 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b07c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b080:	e02f      	b.n	800b0e2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b082:	f107 030c 	add.w	r3, r7, #12
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f879 	bl	800b180 <SD_FindSCR>
 800b08e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d001      	beq.n	800b09a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	e023      	b.n	800b0e2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d01c      	beq.n	800b0de <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ac:	041b      	lsls	r3, r3, #16
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	f000 fe95 	bl	800bde0 <SDMMC_CmdAppCommand>
 800b0b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	e00f      	b.n	800b0e2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2102      	movs	r1, #2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 fece 	bl	800be6a <SDMMC_CmdBusWidth>
 800b0ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	e003      	b.n	800b0e2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e001      	b.n	800b0e2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b0de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b086      	sub	sp, #24
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	60fb      	str	r3, [r7, #12]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2100      	movs	r1, #0
 800b100:	4618      	mov	r0, r3
 800b102:	f000 fd02 	bl	800bb0a <SDIO_GetResponse>
 800b106:	4603      	mov	r3, r0
 800b108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b10c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b110:	d102      	bne.n	800b118 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b116:	e02f      	b.n	800b178 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b118:	f107 030c 	add.w	r3, r7, #12
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f82e 	bl	800b180 <SD_FindSCR>
 800b124:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	e023      	b.n	800b178 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b136:	2b00      	cmp	r3, #0
 800b138:	d01c      	beq.n	800b174 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b142:	041b      	lsls	r3, r3, #16
 800b144:	4619      	mov	r1, r3
 800b146:	4610      	mov	r0, r2
 800b148:	f000 fe4a 	bl	800bde0 <SDMMC_CmdAppCommand>
 800b14c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d001      	beq.n	800b158 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	e00f      	b.n	800b178 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2100      	movs	r1, #0
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 fe83 	bl	800be6a <SDMMC_CmdBusWidth>
 800b164:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d001      	beq.n	800b170 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	e003      	b.n	800b178 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b170:	2300      	movs	r3, #0
 800b172:	e001      	b.n	800b178 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b174:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b180:	b590      	push	{r4, r7, lr}
 800b182:	b08f      	sub	sp, #60	; 0x3c
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b18a:	f7f9 fd51 	bl	8004c30 <HAL_GetTick>
 800b18e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b190:	2300      	movs	r3, #0
 800b192:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b194:	2300      	movs	r3, #0
 800b196:	60bb      	str	r3, [r7, #8]
 800b198:	2300      	movs	r3, #0
 800b19a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2108      	movs	r1, #8
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f000 fcee 	bl	800bb88 <SDMMC_CmdBlockLength>
 800b1ac:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	e0b2      	b.n	800b31e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c0:	041b      	lsls	r3, r3, #16
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	f000 fe0b 	bl	800bde0 <SDMMC_CmdAppCommand>
 800b1ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d4:	e0a3      	b.n	800b31e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1da:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b1dc:	2308      	movs	r3, #8
 800b1de:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b1e0:	2330      	movs	r3, #48	; 0x30
 800b1e2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b1e4:	2302      	movs	r3, #2
 800b1e6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f107 0210 	add.w	r2, r7, #16
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 fc98 	bl	800bb30 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4618      	mov	r0, r3
 800b206:	f000 fe52 	bl	800beae <SDMMC_CmdSendSCR>
 800b20a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d02a      	beq.n	800b268 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	e083      	b.n	800b31e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00f      	beq.n	800b244 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6819      	ldr	r1, [r3, #0]
 800b228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	f107 0208 	add.w	r2, r7, #8
 800b230:	18d4      	adds	r4, r2, r3
 800b232:	4608      	mov	r0, r1
 800b234:	f000 fbf7 	bl	800ba26 <SDIO_ReadFIFO>
 800b238:	4603      	mov	r3, r0
 800b23a:	6023      	str	r3, [r4, #0]
      index++;
 800b23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b23e:	3301      	adds	r3, #1
 800b240:	637b      	str	r3, [r7, #52]	; 0x34
 800b242:	e006      	b.n	800b252 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b24a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d012      	beq.n	800b278 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b252:	f7f9 fced 	bl	8004c30 <HAL_GetTick>
 800b256:	4602      	mov	r2, r0
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b260:	d102      	bne.n	800b268 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b262:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b266:	e05a      	b.n	800b31e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b26e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0cf      	beq.n	800b216 <SD_FindSCR+0x96>
 800b276:	e000      	b.n	800b27a <SD_FindSCR+0xfa>
      break;
 800b278:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b280:	f003 0308 	and.w	r3, r3, #8
 800b284:	2b00      	cmp	r3, #0
 800b286:	d005      	beq.n	800b294 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2208      	movs	r2, #8
 800b28e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b290:	2308      	movs	r3, #8
 800b292:	e044      	b.n	800b31e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29a:	f003 0302 	and.w	r3, r3, #2
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b2aa:	2302      	movs	r3, #2
 800b2ac:	e037      	b.n	800b31e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b4:	f003 0320 	and.w	r3, r3, #32
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d005      	beq.n	800b2c8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b2c4:	2320      	movs	r3, #32
 800b2c6:	e02a      	b.n	800b31e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f240 523a 	movw	r2, #1338	; 0x53a
 800b2d0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	061a      	lsls	r2, r3, #24
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	021b      	lsls	r3, r3, #8
 800b2da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	0a1b      	lsrs	r3, r3, #8
 800b2e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	0e1b      	lsrs	r3, r3, #24
 800b2ee:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f2:	601a      	str	r2, [r3, #0]
    scr++;
 800b2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	061a      	lsls	r2, r3, #24
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	021b      	lsls	r3, r3, #8
 800b302:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b306:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	0a1b      	lsrs	r3, r3, #8
 800b30c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b310:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	0e1b      	lsrs	r3, r3, #24
 800b316:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	373c      	adds	r7, #60	; 0x3c
 800b322:	46bd      	mov	sp, r7
 800b324:	bd90      	pop	{r4, r7, pc}

0800b326 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b086      	sub	sp, #24
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b332:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b338:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d03f      	beq.n	800b3c0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b340:	2300      	movs	r3, #0
 800b342:	617b      	str	r3, [r7, #20]
 800b344:	e033      	b.n	800b3ae <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 fb6b 	bl	800ba26 <SDIO_ReadFIFO>
 800b350:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	b2da      	uxtb	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	3301      	adds	r3, #1
 800b35e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	3b01      	subs	r3, #1
 800b364:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	0a1b      	lsrs	r3, r3, #8
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	3301      	adds	r3, #1
 800b374:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	3b01      	subs	r3, #1
 800b37a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	0c1b      	lsrs	r3, r3, #16
 800b380:	b2da      	uxtb	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3301      	adds	r3, #1
 800b38a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	3b01      	subs	r3, #1
 800b390:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	0e1b      	lsrs	r3, r3, #24
 800b396:	b2da      	uxtb	r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	617b      	str	r3, [r7, #20]
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	2b07      	cmp	r3, #7
 800b3b2:	d9c8      	bls.n	800b346 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b3c0:	bf00      	nop
 800b3c2:	3718      	adds	r7, #24
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a1b      	ldr	r3, [r3, #32]
 800b3d4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3da:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d043      	beq.n	800b46a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	617b      	str	r3, [r7, #20]
 800b3e6:	e037      	b.n	800b458 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	021a      	lsls	r2, r3, #8
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	4313      	orrs	r3, r2
 800b404:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3301      	adds	r3, #1
 800b40a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	3b01      	subs	r3, #1
 800b410:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	041a      	lsls	r2, r3, #16
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	3301      	adds	r3, #1
 800b422:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	3b01      	subs	r3, #1
 800b428:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	061a      	lsls	r2, r3, #24
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	4313      	orrs	r3, r2
 800b434:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3301      	adds	r3, #1
 800b43a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	3b01      	subs	r3, #1
 800b440:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f107 0208 	add.w	r2, r7, #8
 800b44a:	4611      	mov	r1, r2
 800b44c:	4618      	mov	r0, r3
 800b44e:	f000 faf7 	bl	800ba40 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	3301      	adds	r3, #1
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	2b07      	cmp	r3, #7
 800b45c:	d9c4      	bls.n	800b3e8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b46a:	bf00      	nop
 800b46c:	3718      	adds	r7, #24
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b082      	sub	sp, #8
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d101      	bne.n	800b484 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	e041      	b.n	800b508 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d106      	bne.n	800b49e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7f9 fa43 	bl	8004924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2202      	movs	r2, #2
 800b4a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	3304      	adds	r3, #4
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	f000 f95d 	bl	800b770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	f003 0302 	and.w	r3, r3, #2
 800b522:	2b02      	cmp	r3, #2
 800b524:	d122      	bne.n	800b56c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	f003 0302 	and.w	r3, r3, #2
 800b530:	2b02      	cmp	r3, #2
 800b532:	d11b      	bne.n	800b56c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f06f 0202 	mvn.w	r2, #2
 800b53c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	699b      	ldr	r3, [r3, #24]
 800b54a:	f003 0303 	and.w	r3, r3, #3
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d003      	beq.n	800b55a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f8ee 	bl	800b734 <HAL_TIM_IC_CaptureCallback>
 800b558:	e005      	b.n	800b566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 f8e0 	bl	800b720 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f8f1 	bl	800b748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	f003 0304 	and.w	r3, r3, #4
 800b576:	2b04      	cmp	r3, #4
 800b578:	d122      	bne.n	800b5c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	f003 0304 	and.w	r3, r3, #4
 800b584:	2b04      	cmp	r3, #4
 800b586:	d11b      	bne.n	800b5c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f06f 0204 	mvn.w	r2, #4
 800b590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2202      	movs	r2, #2
 800b596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d003      	beq.n	800b5ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f8c4 	bl	800b734 <HAL_TIM_IC_CaptureCallback>
 800b5ac:	e005      	b.n	800b5ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f8b6 	bl	800b720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f8c7 	bl	800b748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	f003 0308 	and.w	r3, r3, #8
 800b5ca:	2b08      	cmp	r3, #8
 800b5cc:	d122      	bne.n	800b614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	f003 0308 	and.w	r3, r3, #8
 800b5d8:	2b08      	cmp	r3, #8
 800b5da:	d11b      	bne.n	800b614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f06f 0208 	mvn.w	r2, #8
 800b5e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2204      	movs	r2, #4
 800b5ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	69db      	ldr	r3, [r3, #28]
 800b5f2:	f003 0303 	and.w	r3, r3, #3
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f89a 	bl	800b734 <HAL_TIM_IC_CaptureCallback>
 800b600:	e005      	b.n	800b60e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f88c 	bl	800b720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 f89d 	bl	800b748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	f003 0310 	and.w	r3, r3, #16
 800b61e:	2b10      	cmp	r3, #16
 800b620:	d122      	bne.n	800b668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	f003 0310 	and.w	r3, r3, #16
 800b62c:	2b10      	cmp	r3, #16
 800b62e:	d11b      	bne.n	800b668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f06f 0210 	mvn.w	r2, #16
 800b638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2208      	movs	r2, #8
 800b63e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d003      	beq.n	800b656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f870 	bl	800b734 <HAL_TIM_IC_CaptureCallback>
 800b654:	e005      	b.n	800b662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f862 	bl	800b720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f873 	bl	800b748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	f003 0301 	and.w	r3, r3, #1
 800b672:	2b01      	cmp	r3, #1
 800b674:	d10e      	bne.n	800b694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	f003 0301 	and.w	r3, r3, #1
 800b680:	2b01      	cmp	r3, #1
 800b682:	d107      	bne.n	800b694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f06f 0201 	mvn.w	r2, #1
 800b68c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7f8 fdb2 	bl	80041f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b69e:	2b80      	cmp	r3, #128	; 0x80
 800b6a0:	d10e      	bne.n	800b6c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6ac:	2b80      	cmp	r3, #128	; 0x80
 800b6ae:	d107      	bne.n	800b6c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f97e 	bl	800b9bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ca:	2b40      	cmp	r3, #64	; 0x40
 800b6cc:	d10e      	bne.n	800b6ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d8:	2b40      	cmp	r3, #64	; 0x40
 800b6da:	d107      	bne.n	800b6ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f838 	bl	800b75c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	f003 0320 	and.w	r3, r3, #32
 800b6f6:	2b20      	cmp	r3, #32
 800b6f8:	d10e      	bne.n	800b718 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	f003 0320 	and.w	r3, r3, #32
 800b704:	2b20      	cmp	r3, #32
 800b706:	d107      	bne.n	800b718 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f06f 0220 	mvn.w	r2, #32
 800b710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f948 	bl	800b9a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b73c:	bf00      	nop
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a40      	ldr	r2, [pc, #256]	; (800b884 <TIM_Base_SetConfig+0x114>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d013      	beq.n	800b7b0 <TIM_Base_SetConfig+0x40>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b78e:	d00f      	beq.n	800b7b0 <TIM_Base_SetConfig+0x40>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a3d      	ldr	r2, [pc, #244]	; (800b888 <TIM_Base_SetConfig+0x118>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d00b      	beq.n	800b7b0 <TIM_Base_SetConfig+0x40>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a3c      	ldr	r2, [pc, #240]	; (800b88c <TIM_Base_SetConfig+0x11c>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d007      	beq.n	800b7b0 <TIM_Base_SetConfig+0x40>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a3b      	ldr	r2, [pc, #236]	; (800b890 <TIM_Base_SetConfig+0x120>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d003      	beq.n	800b7b0 <TIM_Base_SetConfig+0x40>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a3a      	ldr	r2, [pc, #232]	; (800b894 <TIM_Base_SetConfig+0x124>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d108      	bne.n	800b7c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a2f      	ldr	r2, [pc, #188]	; (800b884 <TIM_Base_SetConfig+0x114>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d02b      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7d0:	d027      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a2c      	ldr	r2, [pc, #176]	; (800b888 <TIM_Base_SetConfig+0x118>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d023      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a2b      	ldr	r2, [pc, #172]	; (800b88c <TIM_Base_SetConfig+0x11c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d01f      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a2a      	ldr	r2, [pc, #168]	; (800b890 <TIM_Base_SetConfig+0x120>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d01b      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a29      	ldr	r2, [pc, #164]	; (800b894 <TIM_Base_SetConfig+0x124>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d017      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a28      	ldr	r2, [pc, #160]	; (800b898 <TIM_Base_SetConfig+0x128>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d013      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a27      	ldr	r2, [pc, #156]	; (800b89c <TIM_Base_SetConfig+0x12c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d00f      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a26      	ldr	r2, [pc, #152]	; (800b8a0 <TIM_Base_SetConfig+0x130>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d00b      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a25      	ldr	r2, [pc, #148]	; (800b8a4 <TIM_Base_SetConfig+0x134>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d007      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a24      	ldr	r2, [pc, #144]	; (800b8a8 <TIM_Base_SetConfig+0x138>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d003      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a23      	ldr	r2, [pc, #140]	; (800b8ac <TIM_Base_SetConfig+0x13c>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d108      	bne.n	800b834 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	4313      	orrs	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	4313      	orrs	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	689a      	ldr	r2, [r3, #8]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a0a      	ldr	r2, [pc, #40]	; (800b884 <TIM_Base_SetConfig+0x114>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d003      	beq.n	800b868 <TIM_Base_SetConfig+0xf8>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a0c      	ldr	r2, [pc, #48]	; (800b894 <TIM_Base_SetConfig+0x124>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d103      	bne.n	800b870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	691a      	ldr	r2, [r3, #16]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	615a      	str	r2, [r3, #20]
}
 800b876:	bf00      	nop
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	40010000 	.word	0x40010000
 800b888:	40000400 	.word	0x40000400
 800b88c:	40000800 	.word	0x40000800
 800b890:	40000c00 	.word	0x40000c00
 800b894:	40010400 	.word	0x40010400
 800b898:	40014000 	.word	0x40014000
 800b89c:	40014400 	.word	0x40014400
 800b8a0:	40014800 	.word	0x40014800
 800b8a4:	40001800 	.word	0x40001800
 800b8a8:	40001c00 	.word	0x40001c00
 800b8ac:	40002000 	.word	0x40002000

0800b8b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d101      	bne.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8c4:	2302      	movs	r3, #2
 800b8c6:	e05a      	b.n	800b97e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a21      	ldr	r2, [pc, #132]	; (800b98c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d022      	beq.n	800b952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b914:	d01d      	beq.n	800b952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a1d      	ldr	r2, [pc, #116]	; (800b990 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d018      	beq.n	800b952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a1b      	ldr	r2, [pc, #108]	; (800b994 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d013      	beq.n	800b952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a1a      	ldr	r2, [pc, #104]	; (800b998 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d00e      	beq.n	800b952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a18      	ldr	r2, [pc, #96]	; (800b99c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d009      	beq.n	800b952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a17      	ldr	r2, [pc, #92]	; (800b9a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d004      	beq.n	800b952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a15      	ldr	r2, [pc, #84]	; (800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d10c      	bne.n	800b96c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	4313      	orrs	r3, r2
 800b962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	40010000 	.word	0x40010000
 800b990:	40000400 	.word	0x40000400
 800b994:	40000800 	.word	0x40000800
 800b998:	40000c00 	.word	0x40000c00
 800b99c:	40010400 	.word	0x40010400
 800b9a0:	40014000 	.word	0x40014000
 800b9a4:	40001800 	.word	0x40001800

0800b9a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9b0:	bf00      	nop
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9c4:	bf00      	nop
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b9d0:	b084      	sub	sp, #16
 800b9d2:	b480      	push	{r7}
 800b9d4:	b085      	sub	sp, #20
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	f107 001c 	add.w	r0, r7, #28
 800b9de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b9e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b9e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b9ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b9ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b9f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b9f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b9fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ba0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	431a      	orrs	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3714      	adds	r7, #20
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	b004      	add	sp, #16
 800ba24:	4770      	bx	lr

0800ba26 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ba26:	b480      	push	{r7}
 800ba28:	b083      	sub	sp, #12
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b082      	sub	sp, #8
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2203      	movs	r2, #3
 800ba6e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ba70:	2002      	movs	r0, #2
 800ba72:	f7f9 f8e9 	bl	8004c48 <HAL_Delay>
  
  return HAL_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 0303 	and.w	r3, r3, #3
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800baba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bac0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bac6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	4313      	orrs	r3, r2
 800bacc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bad6:	f023 030f 	bic.w	r3, r3, #15
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	431a      	orrs	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	b2db      	uxtb	r3, r3
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	370c      	adds	r7, #12
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b085      	sub	sp, #20
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	3314      	adds	r3, #20
 800bb18:	461a      	mov	r2, r3
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
}  
 800bb24:	4618      	mov	r0, r3
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	685a      	ldr	r2, [r3, #4]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bb56:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bb5c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bb62:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	431a      	orrs	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0

}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bb96:	2310      	movs	r3, #16
 800bb98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb9a:	2340      	movs	r3, #64	; 0x40
 800bb9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bba6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bba8:	f107 0308 	add.w	r3, r7, #8
 800bbac:	4619      	mov	r1, r3
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7ff ff74 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800bbb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbb8:	2110      	movs	r1, #16
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fa44 	bl	800c048 <SDMMC_GetCmdResp1>
 800bbc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbc2:	69fb      	ldr	r3, [r7, #28]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3720      	adds	r7, #32
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b088      	sub	sp, #32
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bbda:	2311      	movs	r3, #17
 800bbdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bbde:	2340      	movs	r3, #64	; 0x40
 800bbe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bbe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bbec:	f107 0308 	add.w	r3, r7, #8
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7ff ff52 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bbf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbfc:	2111      	movs	r1, #17
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 fa22 	bl	800c048 <SDMMC_GetCmdResp1>
 800bc04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc06:	69fb      	ldr	r3, [r7, #28]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3720      	adds	r7, #32
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b088      	sub	sp, #32
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bc1e:	2312      	movs	r3, #18
 800bc20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bc22:	2340      	movs	r3, #64	; 0x40
 800bc24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc26:	2300      	movs	r3, #0
 800bc28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc30:	f107 0308 	add.w	r3, r7, #8
 800bc34:	4619      	mov	r1, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f7ff ff30 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bc3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc40:	2112      	movs	r1, #18
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fa00 	bl	800c048 <SDMMC_GetCmdResp1>
 800bc48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc4a:	69fb      	ldr	r3, [r7, #28]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3720      	adds	r7, #32
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bc62:	2318      	movs	r3, #24
 800bc64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bc66:	2340      	movs	r3, #64	; 0x40
 800bc68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc74:	f107 0308 	add.w	r3, r7, #8
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7ff ff0e 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bc80:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc84:	2118      	movs	r1, #24
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f9de 	bl	800c048 <SDMMC_GetCmdResp1>
 800bc8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc8e:	69fb      	ldr	r3, [r7, #28]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3720      	adds	r7, #32
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b088      	sub	sp, #32
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bca6:	2319      	movs	r3, #25
 800bca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bcaa:	2340      	movs	r3, #64	; 0x40
 800bcac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bcb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcb8:	f107 0308 	add.w	r3, r7, #8
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7ff feec 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bcc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcc8:	2119      	movs	r1, #25
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 f9bc 	bl	800c048 <SDMMC_GetCmdResp1>
 800bcd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcd2:	69fb      	ldr	r3, [r7, #28]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3720      	adds	r7, #32
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b088      	sub	sp, #32
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bce4:	2300      	movs	r3, #0
 800bce6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bce8:	230c      	movs	r3, #12
 800bcea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bcec:	2340      	movs	r3, #64	; 0x40
 800bcee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bcf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcf8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcfa:	f107 0308 	add.w	r3, r7, #8
 800bcfe:	4619      	mov	r1, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7ff fecb 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800bd06:	4a05      	ldr	r2, [pc, #20]	; (800bd1c <SDMMC_CmdStopTransfer+0x40>)
 800bd08:	210c      	movs	r1, #12
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 f99c 	bl	800c048 <SDMMC_GetCmdResp1>
 800bd10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd12:	69fb      	ldr	r3, [r7, #28]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3720      	adds	r7, #32
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	05f5e100 	.word	0x05f5e100

0800bd20 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08a      	sub	sp, #40	; 0x28
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bd30:	2307      	movs	r3, #7
 800bd32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd34:	2340      	movs	r3, #64	; 0x40
 800bd36:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd40:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd42:	f107 0310 	add.w	r3, r7, #16
 800bd46:	4619      	mov	r1, r3
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f7ff fea7 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800bd4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd52:	2107      	movs	r1, #7
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f000 f977 	bl	800c048 <SDMMC_GetCmdResp1>
 800bd5a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3728      	adds	r7, #40	; 0x28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b088      	sub	sp, #32
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bd72:	2300      	movs	r3, #0
 800bd74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800bd76:	2300      	movs	r3, #0
 800bd78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd84:	f107 0308 	add.w	r3, r7, #8
 800bd88:	4619      	mov	r1, r3
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff fe86 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 f92d 	bl	800bff0 <SDMMC_GetCmdError>
 800bd96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd98:	69fb      	ldr	r3, [r7, #28]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3720      	adds	r7, #32
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b088      	sub	sp, #32
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bdaa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bdae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bdb0:	2308      	movs	r3, #8
 800bdb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdb4:	2340      	movs	r3, #64	; 0x40
 800bdb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bdc2:	f107 0308 	add.w	r3, r7, #8
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7ff fe67 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fb24 	bl	800c41c <SDMMC_GetCmdResp7>
 800bdd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdd6:	69fb      	ldr	r3, [r7, #28]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3720      	adds	r7, #32
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b088      	sub	sp, #32
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bdee:	2337      	movs	r3, #55	; 0x37
 800bdf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdf2:	2340      	movs	r3, #64	; 0x40
 800bdf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be00:	f107 0308 	add.w	r3, r7, #8
 800be04:	4619      	mov	r1, r3
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f7ff fe48 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800be0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be10:	2137      	movs	r1, #55	; 0x37
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f918 	bl	800c048 <SDMMC_GetCmdResp1>
 800be18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be1a:	69fb      	ldr	r3, [r7, #28]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3720      	adds	r7, #32
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800be3a:	2329      	movs	r3, #41	; 0x29
 800be3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be3e:	2340      	movs	r3, #64	; 0x40
 800be40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be42:	2300      	movs	r3, #0
 800be44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be4c:	f107 0308 	add.w	r3, r7, #8
 800be50:	4619      	mov	r1, r3
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7ff fe22 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 fa2b 	bl	800c2b4 <SDMMC_GetCmdResp3>
 800be5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be60:	69fb      	ldr	r3, [r7, #28]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3720      	adds	r7, #32
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b088      	sub	sp, #32
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
 800be72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800be78:	2306      	movs	r3, #6
 800be7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be7c:	2340      	movs	r3, #64	; 0x40
 800be7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be80:	2300      	movs	r3, #0
 800be82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be8a:	f107 0308 	add.w	r3, r7, #8
 800be8e:	4619      	mov	r1, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7ff fe03 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800be96:	f241 3288 	movw	r2, #5000	; 0x1388
 800be9a:	2106      	movs	r1, #6
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f8d3 	bl	800c048 <SDMMC_GetCmdResp1>
 800bea2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bea4:	69fb      	ldr	r3, [r7, #28]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3720      	adds	r7, #32
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b088      	sub	sp, #32
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800beb6:	2300      	movs	r3, #0
 800beb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800beba:	2333      	movs	r3, #51	; 0x33
 800bebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bebe:	2340      	movs	r3, #64	; 0x40
 800bec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bec2:	2300      	movs	r3, #0
 800bec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800becc:	f107 0308 	add.w	r3, r7, #8
 800bed0:	4619      	mov	r1, r3
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f7ff fde2 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800bed8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bedc:	2133      	movs	r1, #51	; 0x33
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f8b2 	bl	800c048 <SDMMC_GetCmdResp1>
 800bee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bee6:	69fb      	ldr	r3, [r7, #28]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3720      	adds	r7, #32
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b088      	sub	sp, #32
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bef8:	2300      	movs	r3, #0
 800befa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800befc:	2302      	movs	r3, #2
 800befe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bf00:	23c0      	movs	r3, #192	; 0xc0
 800bf02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf04:	2300      	movs	r3, #0
 800bf06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf0e:	f107 0308 	add.w	r3, r7, #8
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff fdc1 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f982 	bl	800c224 <SDMMC_GetCmdResp2>
 800bf20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf22:	69fb      	ldr	r3, [r7, #28]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3720      	adds	r7, #32
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bf3a:	2309      	movs	r3, #9
 800bf3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bf3e:	23c0      	movs	r3, #192	; 0xc0
 800bf40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf42:	2300      	movs	r3, #0
 800bf44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf4c:	f107 0308 	add.w	r3, r7, #8
 800bf50:	4619      	mov	r1, r3
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7ff fda2 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f963 	bl	800c224 <SDMMC_GetCmdResp2>
 800bf5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf60:	69fb      	ldr	r3, [r7, #28]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3720      	adds	r7, #32
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b088      	sub	sp, #32
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
 800bf72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bf74:	2300      	movs	r3, #0
 800bf76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf7c:	2340      	movs	r3, #64	; 0x40
 800bf7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf80:	2300      	movs	r3, #0
 800bf82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf8a:	f107 0308 	add.w	r3, r7, #8
 800bf8e:	4619      	mov	r1, r3
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f7ff fd83 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	2103      	movs	r1, #3
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f9c8 	bl	800c330 <SDMMC_GetCmdResp6>
 800bfa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfa2:	69fb      	ldr	r3, [r7, #28]
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3720      	adds	r7, #32
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b088      	sub	sp, #32
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bfba:	230d      	movs	r3, #13
 800bfbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bfbe:	2340      	movs	r3, #64	; 0x40
 800bfc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bfc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bfcc:	f107 0308 	add.w	r3, r7, #8
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff fd62 	bl	800ba9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800bfd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfdc:	210d      	movs	r1, #13
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f832 	bl	800c048 <SDMMC_GetCmdResp1>
 800bfe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfe6:	69fb      	ldr	r3, [r7, #28]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3720      	adds	r7, #32
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bff8:	4b11      	ldr	r3, [pc, #68]	; (800c040 <SDMMC_GetCmdError+0x50>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a11      	ldr	r2, [pc, #68]	; (800c044 <SDMMC_GetCmdError+0x54>)
 800bffe:	fba2 2303 	umull	r2, r3, r2, r3
 800c002:	0a5b      	lsrs	r3, r3, #9
 800c004:	f241 3288 	movw	r2, #5000	; 0x1388
 800c008:	fb02 f303 	mul.w	r3, r2, r3
 800c00c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	1e5a      	subs	r2, r3, #1
 800c012:	60fa      	str	r2, [r7, #12]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d102      	bne.n	800c01e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c018:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c01c:	e009      	b.n	800c032 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0f1      	beq.n	800c00e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	22c5      	movs	r2, #197	; 0xc5
 800c02e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3714      	adds	r7, #20
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	20000000 	.word	0x20000000
 800c044:	10624dd3 	.word	0x10624dd3

0800c048 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b088      	sub	sp, #32
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	460b      	mov	r3, r1
 800c052:	607a      	str	r2, [r7, #4]
 800c054:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c056:	4b70      	ldr	r3, [pc, #448]	; (800c218 <SDMMC_GetCmdResp1+0x1d0>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a70      	ldr	r2, [pc, #448]	; (800c21c <SDMMC_GetCmdResp1+0x1d4>)
 800c05c:	fba2 2303 	umull	r2, r3, r2, r3
 800c060:	0a5a      	lsrs	r2, r3, #9
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	fb02 f303 	mul.w	r3, r2, r3
 800c068:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	1e5a      	subs	r2, r3, #1
 800c06e:	61fa      	str	r2, [r7, #28]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d102      	bne.n	800c07a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c078:	e0c9      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c07e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c086:	2b00      	cmp	r3, #0
 800c088:	d0ef      	beq.n	800c06a <SDMMC_GetCmdResp1+0x22>
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1ea      	bne.n	800c06a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c098:	f003 0304 	and.w	r3, r3, #4
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d004      	beq.n	800c0aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2204      	movs	r2, #4
 800c0a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0a6:	2304      	movs	r3, #4
 800c0a8:	e0b1      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ae:	f003 0301 	and.w	r3, r3, #1
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d004      	beq.n	800c0c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e0a6      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	22c5      	movs	r2, #197	; 0xc5
 800c0c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f7ff fd12 	bl	800baf0 <SDIO_GetCommandResponse>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	7afb      	ldrb	r3, [r7, #11]
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d001      	beq.n	800c0da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e099      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c0da:	2100      	movs	r1, #0
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f7ff fd14 	bl	800bb0a <SDIO_GetResponse>
 800c0e2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c0e4:	697a      	ldr	r2, [r7, #20]
 800c0e6:	4b4e      	ldr	r3, [pc, #312]	; (800c220 <SDMMC_GetCmdResp1+0x1d8>)
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	e08d      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	da02      	bge.n	800c0fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c0f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0fc:	e087      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c108:	2340      	movs	r3, #64	; 0x40
 800c10a:	e080      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d001      	beq.n	800c11a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c116:	2380      	movs	r3, #128	; 0x80
 800c118:	e079      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c120:	2b00      	cmp	r3, #0
 800c122:	d002      	beq.n	800c12a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c124:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c128:	e071      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c130:	2b00      	cmp	r3, #0
 800c132:	d002      	beq.n	800c13a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c134:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c138:	e069      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c140:	2b00      	cmp	r3, #0
 800c142:	d002      	beq.n	800c14a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c148:	e061      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c158:	e059      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c160:	2b00      	cmp	r3, #0
 800c162:	d002      	beq.n	800c16a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c168:	e051      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d002      	beq.n	800c17a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c178:	e049      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c180:	2b00      	cmp	r3, #0
 800c182:	d002      	beq.n	800c18a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c184:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c188:	e041      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c190:	2b00      	cmp	r3, #0
 800c192:	d002      	beq.n	800c19a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c198:	e039      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c1a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c1a8:	e031      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c1b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c1b8:	e029      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c1c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c1c8:	e021      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d002      	beq.n	800c1da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c1d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c1d8:	e019      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d002      	beq.n	800c1ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c1e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c1e8:	e011      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c1f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c1f8:	e009      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	f003 0308 	and.w	r3, r3, #8
 800c200:	2b00      	cmp	r3, #0
 800c202:	d002      	beq.n	800c20a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c204:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c208:	e001      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c20a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3720      	adds	r7, #32
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	20000000 	.word	0x20000000
 800c21c:	10624dd3 	.word	0x10624dd3
 800c220:	fdffe008 	.word	0xfdffe008

0800c224 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c22c:	4b1f      	ldr	r3, [pc, #124]	; (800c2ac <SDMMC_GetCmdResp2+0x88>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a1f      	ldr	r2, [pc, #124]	; (800c2b0 <SDMMC_GetCmdResp2+0x8c>)
 800c232:	fba2 2303 	umull	r2, r3, r2, r3
 800c236:	0a5b      	lsrs	r3, r3, #9
 800c238:	f241 3288 	movw	r2, #5000	; 0x1388
 800c23c:	fb02 f303 	mul.w	r3, r2, r3
 800c240:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	1e5a      	subs	r2, r3, #1
 800c246:	60fa      	str	r2, [r7, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d102      	bne.n	800c252 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c24c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c250:	e026      	b.n	800c2a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c256:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d0ef      	beq.n	800c242 <SDMMC_GetCmdResp2+0x1e>
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1ea      	bne.n	800c242 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c270:	f003 0304 	and.w	r3, r3, #4
 800c274:	2b00      	cmp	r3, #0
 800c276:	d004      	beq.n	800c282 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2204      	movs	r2, #4
 800c27c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c27e:	2304      	movs	r3, #4
 800c280:	e00e      	b.n	800c2a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d004      	beq.n	800c298 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c294:	2301      	movs	r3, #1
 800c296:	e003      	b.n	800c2a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	22c5      	movs	r2, #197	; 0xc5
 800c29c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3714      	adds	r7, #20
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	20000000 	.word	0x20000000
 800c2b0:	10624dd3 	.word	0x10624dd3

0800c2b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2bc:	4b1a      	ldr	r3, [pc, #104]	; (800c328 <SDMMC_GetCmdResp3+0x74>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a1a      	ldr	r2, [pc, #104]	; (800c32c <SDMMC_GetCmdResp3+0x78>)
 800c2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c6:	0a5b      	lsrs	r3, r3, #9
 800c2c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2cc:	fb02 f303 	mul.w	r3, r2, r3
 800c2d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	1e5a      	subs	r2, r3, #1
 800c2d6:	60fa      	str	r2, [r7, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d102      	bne.n	800c2e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2e0:	e01b      	b.n	800c31a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0ef      	beq.n	800c2d2 <SDMMC_GetCmdResp3+0x1e>
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1ea      	bne.n	800c2d2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c300:	f003 0304 	and.w	r3, r3, #4
 800c304:	2b00      	cmp	r3, #0
 800c306:	d004      	beq.n	800c312 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2204      	movs	r2, #4
 800c30c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c30e:	2304      	movs	r3, #4
 800c310:	e003      	b.n	800c31a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	22c5      	movs	r2, #197	; 0xc5
 800c316:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3714      	adds	r7, #20
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	20000000 	.word	0x20000000
 800c32c:	10624dd3 	.word	0x10624dd3

0800c330 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	460b      	mov	r3, r1
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c33e:	4b35      	ldr	r3, [pc, #212]	; (800c414 <SDMMC_GetCmdResp6+0xe4>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a35      	ldr	r2, [pc, #212]	; (800c418 <SDMMC_GetCmdResp6+0xe8>)
 800c344:	fba2 2303 	umull	r2, r3, r2, r3
 800c348:	0a5b      	lsrs	r3, r3, #9
 800c34a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c34e:	fb02 f303 	mul.w	r3, r2, r3
 800c352:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	1e5a      	subs	r2, r3, #1
 800c358:	61fa      	str	r2, [r7, #28]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d102      	bne.n	800c364 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c35e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c362:	e052      	b.n	800c40a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c368:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c370:	2b00      	cmp	r3, #0
 800c372:	d0ef      	beq.n	800c354 <SDMMC_GetCmdResp6+0x24>
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1ea      	bne.n	800c354 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c382:	f003 0304 	and.w	r3, r3, #4
 800c386:	2b00      	cmp	r3, #0
 800c388:	d004      	beq.n	800c394 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2204      	movs	r2, #4
 800c38e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c390:	2304      	movs	r3, #4
 800c392:	e03a      	b.n	800c40a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c398:	f003 0301 	and.w	r3, r3, #1
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d004      	beq.n	800c3aa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e02f      	b.n	800c40a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f7ff fba0 	bl	800baf0 <SDIO_GetCommandResponse>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	7afb      	ldrb	r3, [r7, #11]
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d001      	beq.n	800c3be <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e025      	b.n	800c40a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	22c5      	movs	r2, #197	; 0xc5
 800c3c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f7ff fb9f 	bl	800bb0a <SDIO_GetResponse>
 800c3cc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d106      	bne.n	800c3e6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	0c1b      	lsrs	r3, r3, #16
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e011      	b.n	800c40a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c3f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c3f4:	e009      	b.n	800c40a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c404:	e001      	b.n	800c40a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3720      	adds	r7, #32
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	20000000 	.word	0x20000000
 800c418:	10624dd3 	.word	0x10624dd3

0800c41c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c424:	4b22      	ldr	r3, [pc, #136]	; (800c4b0 <SDMMC_GetCmdResp7+0x94>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a22      	ldr	r2, [pc, #136]	; (800c4b4 <SDMMC_GetCmdResp7+0x98>)
 800c42a:	fba2 2303 	umull	r2, r3, r2, r3
 800c42e:	0a5b      	lsrs	r3, r3, #9
 800c430:	f241 3288 	movw	r2, #5000	; 0x1388
 800c434:	fb02 f303 	mul.w	r3, r2, r3
 800c438:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	1e5a      	subs	r2, r3, #1
 800c43e:	60fa      	str	r2, [r7, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d102      	bne.n	800c44a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c444:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c448:	e02c      	b.n	800c4a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c44e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c456:	2b00      	cmp	r3, #0
 800c458:	d0ef      	beq.n	800c43a <SDMMC_GetCmdResp7+0x1e>
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c460:	2b00      	cmp	r3, #0
 800c462:	d1ea      	bne.n	800c43a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c468:	f003 0304 	and.w	r3, r3, #4
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d004      	beq.n	800c47a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2204      	movs	r2, #4
 800c474:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c476:	2304      	movs	r3, #4
 800c478:	e014      	b.n	800c4a4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c47e:	f003 0301 	and.w	r3, r3, #1
 800c482:	2b00      	cmp	r3, #0
 800c484:	d004      	beq.n	800c490 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2201      	movs	r2, #1
 800c48a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c48c:	2301      	movs	r3, #1
 800c48e:	e009      	b.n	800c4a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d002      	beq.n	800c4a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2240      	movs	r2, #64	; 0x40
 800c4a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c4a2:	2300      	movs	r3, #0
  
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	20000000 	.word	0x20000000
 800c4b4:	10624dd3 	.word	0x10624dd3

0800c4b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c4b8:	b084      	sub	sp, #16
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	f107 001c 	add.w	r0, r7, #28
 800c4c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d122      	bne.n	800c516 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c4e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c4f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d105      	bne.n	800c50a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f001 fb16 	bl	800db3c <USB_CoreReset>
 800c510:	4603      	mov	r3, r0
 800c512:	73fb      	strb	r3, [r7, #15]
 800c514:	e01a      	b.n	800c54c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f001 fb0a 	bl	800db3c <USB_CoreReset>
 800c528:	4603      	mov	r3, r0
 800c52a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c52c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d106      	bne.n	800c540 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c536:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	639a      	str	r2, [r3, #56]	; 0x38
 800c53e:	e005      	b.n	800c54c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c544:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d10b      	bne.n	800c56a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	f043 0206 	orr.w	r2, r3, #6
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	f043 0220 	orr.w	r2, r3, #32
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c576:	b004      	add	sp, #16
 800c578:	4770      	bx	lr
	...

0800c57c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b087      	sub	sp, #28
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	4613      	mov	r3, r2
 800c588:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d165      	bne.n	800c65c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	4a41      	ldr	r2, [pc, #260]	; (800c698 <USB_SetTurnaroundTime+0x11c>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d906      	bls.n	800c5a6 <USB_SetTurnaroundTime+0x2a>
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	4a40      	ldr	r2, [pc, #256]	; (800c69c <USB_SetTurnaroundTime+0x120>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d202      	bcs.n	800c5a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c5a0:	230f      	movs	r3, #15
 800c5a2:	617b      	str	r3, [r7, #20]
 800c5a4:	e062      	b.n	800c66c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	4a3c      	ldr	r2, [pc, #240]	; (800c69c <USB_SetTurnaroundTime+0x120>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d306      	bcc.n	800c5bc <USB_SetTurnaroundTime+0x40>
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	4a3b      	ldr	r2, [pc, #236]	; (800c6a0 <USB_SetTurnaroundTime+0x124>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d202      	bcs.n	800c5bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c5b6:	230e      	movs	r3, #14
 800c5b8:	617b      	str	r3, [r7, #20]
 800c5ba:	e057      	b.n	800c66c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	4a38      	ldr	r2, [pc, #224]	; (800c6a0 <USB_SetTurnaroundTime+0x124>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d306      	bcc.n	800c5d2 <USB_SetTurnaroundTime+0x56>
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	4a37      	ldr	r2, [pc, #220]	; (800c6a4 <USB_SetTurnaroundTime+0x128>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d202      	bcs.n	800c5d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c5cc:	230d      	movs	r3, #13
 800c5ce:	617b      	str	r3, [r7, #20]
 800c5d0:	e04c      	b.n	800c66c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	4a33      	ldr	r2, [pc, #204]	; (800c6a4 <USB_SetTurnaroundTime+0x128>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d306      	bcc.n	800c5e8 <USB_SetTurnaroundTime+0x6c>
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	4a32      	ldr	r2, [pc, #200]	; (800c6a8 <USB_SetTurnaroundTime+0x12c>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d802      	bhi.n	800c5e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c5e2:	230c      	movs	r3, #12
 800c5e4:	617b      	str	r3, [r7, #20]
 800c5e6:	e041      	b.n	800c66c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	4a2f      	ldr	r2, [pc, #188]	; (800c6a8 <USB_SetTurnaroundTime+0x12c>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d906      	bls.n	800c5fe <USB_SetTurnaroundTime+0x82>
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	4a2e      	ldr	r2, [pc, #184]	; (800c6ac <USB_SetTurnaroundTime+0x130>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d802      	bhi.n	800c5fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c5f8:	230b      	movs	r3, #11
 800c5fa:	617b      	str	r3, [r7, #20]
 800c5fc:	e036      	b.n	800c66c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	4a2a      	ldr	r2, [pc, #168]	; (800c6ac <USB_SetTurnaroundTime+0x130>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d906      	bls.n	800c614 <USB_SetTurnaroundTime+0x98>
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	4a29      	ldr	r2, [pc, #164]	; (800c6b0 <USB_SetTurnaroundTime+0x134>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d802      	bhi.n	800c614 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c60e:	230a      	movs	r3, #10
 800c610:	617b      	str	r3, [r7, #20]
 800c612:	e02b      	b.n	800c66c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	4a26      	ldr	r2, [pc, #152]	; (800c6b0 <USB_SetTurnaroundTime+0x134>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d906      	bls.n	800c62a <USB_SetTurnaroundTime+0xae>
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	4a25      	ldr	r2, [pc, #148]	; (800c6b4 <USB_SetTurnaroundTime+0x138>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d202      	bcs.n	800c62a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c624:	2309      	movs	r3, #9
 800c626:	617b      	str	r3, [r7, #20]
 800c628:	e020      	b.n	800c66c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	4a21      	ldr	r2, [pc, #132]	; (800c6b4 <USB_SetTurnaroundTime+0x138>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d306      	bcc.n	800c640 <USB_SetTurnaroundTime+0xc4>
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	4a20      	ldr	r2, [pc, #128]	; (800c6b8 <USB_SetTurnaroundTime+0x13c>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d802      	bhi.n	800c640 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c63a:	2308      	movs	r3, #8
 800c63c:	617b      	str	r3, [r7, #20]
 800c63e:	e015      	b.n	800c66c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	4a1d      	ldr	r2, [pc, #116]	; (800c6b8 <USB_SetTurnaroundTime+0x13c>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d906      	bls.n	800c656 <USB_SetTurnaroundTime+0xda>
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	4a1c      	ldr	r2, [pc, #112]	; (800c6bc <USB_SetTurnaroundTime+0x140>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d202      	bcs.n	800c656 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c650:	2307      	movs	r3, #7
 800c652:	617b      	str	r3, [r7, #20]
 800c654:	e00a      	b.n	800c66c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c656:	2306      	movs	r3, #6
 800c658:	617b      	str	r3, [r7, #20]
 800c65a:	e007      	b.n	800c66c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d102      	bne.n	800c668 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c662:	2309      	movs	r3, #9
 800c664:	617b      	str	r3, [r7, #20]
 800c666:	e001      	b.n	800c66c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c668:	2309      	movs	r3, #9
 800c66a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	68da      	ldr	r2, [r3, #12]
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	029b      	lsls	r3, r3, #10
 800c680:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c684:	431a      	orrs	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	371c      	adds	r7, #28
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	00d8acbf 	.word	0x00d8acbf
 800c69c:	00e4e1c0 	.word	0x00e4e1c0
 800c6a0:	00f42400 	.word	0x00f42400
 800c6a4:	01067380 	.word	0x01067380
 800c6a8:	011a499f 	.word	0x011a499f
 800c6ac:	01312cff 	.word	0x01312cff
 800c6b0:	014ca43f 	.word	0x014ca43f
 800c6b4:	016e3600 	.word	0x016e3600
 800c6b8:	01a6ab1f 	.word	0x01a6ab1f
 800c6bc:	01e84800 	.word	0x01e84800

0800c6c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	f043 0201 	orr.w	r2, r3, #1
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	370c      	adds	r7, #12
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr

0800c6e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6e2:	b480      	push	{r7}
 800c6e4:	b083      	sub	sp, #12
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	f023 0201 	bic.w	r2, r3, #1
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	460b      	mov	r3, r1
 800c70e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c710:	2300      	movs	r3, #0
 800c712:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d115      	bne.n	800c752 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c732:	2001      	movs	r0, #1
 800c734:	f7f8 fa88 	bl	8004c48 <HAL_Delay>
      ms++;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	3301      	adds	r3, #1
 800c73c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f001 f96c 	bl	800da1c <USB_GetMode>
 800c744:	4603      	mov	r3, r0
 800c746:	2b01      	cmp	r3, #1
 800c748:	d01e      	beq.n	800c788 <USB_SetCurrentMode+0x84>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2b31      	cmp	r3, #49	; 0x31
 800c74e:	d9f0      	bls.n	800c732 <USB_SetCurrentMode+0x2e>
 800c750:	e01a      	b.n	800c788 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c752:	78fb      	ldrb	r3, [r7, #3]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d115      	bne.n	800c784 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c764:	2001      	movs	r0, #1
 800c766:	f7f8 fa6f 	bl	8004c48 <HAL_Delay>
      ms++;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3301      	adds	r3, #1
 800c76e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f001 f953 	bl	800da1c <USB_GetMode>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d005      	beq.n	800c788 <USB_SetCurrentMode+0x84>
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2b31      	cmp	r3, #49	; 0x31
 800c780:	d9f0      	bls.n	800c764 <USB_SetCurrentMode+0x60>
 800c782:	e001      	b.n	800c788 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c784:	2301      	movs	r3, #1
 800c786:	e005      	b.n	800c794 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2b32      	cmp	r3, #50	; 0x32
 800c78c:	d101      	bne.n	800c792 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	e000      	b.n	800c794 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c79c:	b084      	sub	sp, #16
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b086      	sub	sp, #24
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
 800c7a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c7aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	613b      	str	r3, [r7, #16]
 800c7ba:	e009      	b.n	800c7d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	3340      	adds	r3, #64	; 0x40
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4413      	add	r3, r2
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	613b      	str	r3, [r7, #16]
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	2b0e      	cmp	r3, #14
 800c7d4:	d9f2      	bls.n	800c7bc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c7d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d11c      	bne.n	800c816 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7ea:	f043 0302 	orr.w	r3, r3, #2
 800c7ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	e005      	b.n	800c822 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c81a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c828:	461a      	mov	r2, r3
 800c82a:	2300      	movs	r3, #0
 800c82c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c834:	4619      	mov	r1, r3
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c83c:	461a      	mov	r2, r3
 800c83e:	680b      	ldr	r3, [r1, #0]
 800c840:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c844:	2b01      	cmp	r3, #1
 800c846:	d10c      	bne.n	800c862 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d104      	bne.n	800c858 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c84e:	2100      	movs	r1, #0
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 f945 	bl	800cae0 <USB_SetDevSpeed>
 800c856:	e008      	b.n	800c86a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c858:	2101      	movs	r1, #1
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 f940 	bl	800cae0 <USB_SetDevSpeed>
 800c860:	e003      	b.n	800c86a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c862:	2103      	movs	r1, #3
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 f93b 	bl	800cae0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c86a:	2110      	movs	r1, #16
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 f8f3 	bl	800ca58 <USB_FlushTxFifo>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d001      	beq.n	800c87c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c878:	2301      	movs	r3, #1
 800c87a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 f90f 	bl	800caa0 <USB_FlushRxFifo>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c888:	2301      	movs	r3, #1
 800c88a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c892:	461a      	mov	r2, r3
 800c894:	2300      	movs	r3, #0
 800c896:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c89e:	461a      	mov	r2, r3
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	613b      	str	r3, [r7, #16]
 800c8b4:	e043      	b.n	800c93e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	015a      	lsls	r2, r3, #5
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	4413      	add	r3, r2
 800c8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8cc:	d118      	bne.n	800c900 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10a      	bne.n	800c8ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	015a      	lsls	r2, r3, #5
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	4413      	add	r3, r2
 800c8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c8e6:	6013      	str	r3, [r2, #0]
 800c8e8:	e013      	b.n	800c912 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	015a      	lsls	r2, r3, #5
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c8fc:	6013      	str	r3, [r2, #0]
 800c8fe:	e008      	b.n	800c912 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	015a      	lsls	r2, r3, #5
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	4413      	add	r3, r2
 800c908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c90c:	461a      	mov	r2, r3
 800c90e:	2300      	movs	r3, #0
 800c910:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	015a      	lsls	r2, r3, #5
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	4413      	add	r3, r2
 800c91a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c91e:	461a      	mov	r2, r3
 800c920:	2300      	movs	r3, #0
 800c922:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	015a      	lsls	r2, r3, #5
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	4413      	add	r3, r2
 800c92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c930:	461a      	mov	r2, r3
 800c932:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c936:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	3301      	adds	r3, #1
 800c93c:	613b      	str	r3, [r7, #16]
 800c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c940:	693a      	ldr	r2, [r7, #16]
 800c942:	429a      	cmp	r2, r3
 800c944:	d3b7      	bcc.n	800c8b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c946:	2300      	movs	r3, #0
 800c948:	613b      	str	r3, [r7, #16]
 800c94a:	e043      	b.n	800c9d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	015a      	lsls	r2, r3, #5
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	4413      	add	r3, r2
 800c954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c95e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c962:	d118      	bne.n	800c996 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10a      	bne.n	800c980 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	015a      	lsls	r2, r3, #5
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	4413      	add	r3, r2
 800c972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c976:	461a      	mov	r2, r3
 800c978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c97c:	6013      	str	r3, [r2, #0]
 800c97e:	e013      	b.n	800c9a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	015a      	lsls	r2, r3, #5
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	4413      	add	r3, r2
 800c988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c98c:	461a      	mov	r2, r3
 800c98e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c992:	6013      	str	r3, [r2, #0]
 800c994:	e008      	b.n	800c9a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	015a      	lsls	r2, r3, #5
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4413      	add	r3, r2
 800c99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	015a      	lsls	r2, r3, #5
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	015a      	lsls	r2, r3, #5
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c9cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	613b      	str	r3, [r7, #16]
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	693a      	ldr	r2, [r7, #16]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d3b7      	bcc.n	800c94c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9e2:	691b      	ldr	r3, [r3, #16]
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c9fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d105      	bne.n	800ca10 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	699b      	ldr	r3, [r3, #24]
 800ca08:	f043 0210 	orr.w	r2, r3, #16
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	699a      	ldr	r2, [r3, #24]
 800ca14:	4b0f      	ldr	r3, [pc, #60]	; (800ca54 <USB_DevInit+0x2b8>)
 800ca16:	4313      	orrs	r3, r2
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ca1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d005      	beq.n	800ca2e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	699b      	ldr	r3, [r3, #24]
 800ca26:	f043 0208 	orr.w	r2, r3, #8
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ca2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d107      	bne.n	800ca44 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	699b      	ldr	r3, [r3, #24]
 800ca38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca3c:	f043 0304 	orr.w	r3, r3, #4
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ca44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3718      	adds	r7, #24
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca50:	b004      	add	sp, #16
 800ca52:	4770      	bx	lr
 800ca54:	803c3800 	.word	0x803c3800

0800ca58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ca62:	2300      	movs	r3, #0
 800ca64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	019b      	lsls	r3, r3, #6
 800ca6a:	f043 0220 	orr.w	r2, r3, #32
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	3301      	adds	r3, #1
 800ca76:	60fb      	str	r3, [r7, #12]
 800ca78:	4a08      	ldr	r2, [pc, #32]	; (800ca9c <USB_FlushTxFifo+0x44>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d901      	bls.n	800ca82 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	e006      	b.n	800ca90 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	f003 0320 	and.w	r3, r3, #32
 800ca8a:	2b20      	cmp	r3, #32
 800ca8c:	d0f1      	beq.n	800ca72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3714      	adds	r7, #20
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	00030d40 	.word	0x00030d40

0800caa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800caa8:	2300      	movs	r3, #0
 800caaa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2210      	movs	r2, #16
 800cab0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	3301      	adds	r3, #1
 800cab6:	60fb      	str	r3, [r7, #12]
 800cab8:	4a08      	ldr	r2, [pc, #32]	; (800cadc <USB_FlushRxFifo+0x3c>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d901      	bls.n	800cac2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800cabe:	2303      	movs	r3, #3
 800cac0:	e006      	b.n	800cad0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	691b      	ldr	r3, [r3, #16]
 800cac6:	f003 0310 	and.w	r3, r3, #16
 800caca:	2b10      	cmp	r3, #16
 800cacc:	d0f1      	beq.n	800cab2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3714      	adds	r7, #20
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr
 800cadc:	00030d40 	.word	0x00030d40

0800cae0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	460b      	mov	r3, r1
 800caea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	78fb      	ldrb	r3, [r7, #3]
 800cafa:	68f9      	ldr	r1, [r7, #12]
 800cafc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb00:	4313      	orrs	r3, r2
 800cb02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3714      	adds	r7, #20
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr

0800cb12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cb12:	b480      	push	{r7}
 800cb14:	b087      	sub	sp, #28
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	f003 0306 	and.w	r3, r3, #6
 800cb2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d102      	bne.n	800cb38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cb32:	2300      	movs	r3, #0
 800cb34:	75fb      	strb	r3, [r7, #23]
 800cb36:	e00a      	b.n	800cb4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	d002      	beq.n	800cb44 <USB_GetDevSpeed+0x32>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2b06      	cmp	r3, #6
 800cb42:	d102      	bne.n	800cb4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cb44:	2302      	movs	r3, #2
 800cb46:	75fb      	strb	r3, [r7, #23]
 800cb48:	e001      	b.n	800cb4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cb4a:	230f      	movs	r3, #15
 800cb4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cb4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	371c      	adds	r7, #28
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b085      	sub	sp, #20
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	785b      	ldrb	r3, [r3, #1]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d13a      	bne.n	800cbee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb7e:	69da      	ldr	r2, [r3, #28]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	f003 030f 	and.w	r3, r3, #15
 800cb88:	2101      	movs	r1, #1
 800cb8a:	fa01 f303 	lsl.w	r3, r1, r3
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	68f9      	ldr	r1, [r7, #12]
 800cb92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb96:	4313      	orrs	r3, r2
 800cb98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	015a      	lsls	r2, r3, #5
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	4413      	add	r3, r2
 800cba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d155      	bne.n	800cc5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	015a      	lsls	r2, r3, #5
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	78db      	ldrb	r3, [r3, #3]
 800cbca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cbcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	059b      	lsls	r3, r3, #22
 800cbd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	0151      	lsls	r1, r2, #5
 800cbda:	68fa      	ldr	r2, [r7, #12]
 800cbdc:	440a      	add	r2, r1
 800cbde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbea:	6013      	str	r3, [r2, #0]
 800cbec:	e036      	b.n	800cc5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbf4:	69da      	ldr	r2, [r3, #28]
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	f003 030f 	and.w	r3, r3, #15
 800cbfe:	2101      	movs	r1, #1
 800cc00:	fa01 f303 	lsl.w	r3, r1, r3
 800cc04:	041b      	lsls	r3, r3, #16
 800cc06:	68f9      	ldr	r1, [r7, #12]
 800cc08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	015a      	lsls	r2, r3, #5
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	4413      	add	r3, r2
 800cc18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d11a      	bne.n	800cc5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	015a      	lsls	r2, r3, #5
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	78db      	ldrb	r3, [r3, #3]
 800cc40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cc42:	430b      	orrs	r3, r1
 800cc44:	4313      	orrs	r3, r2
 800cc46:	68ba      	ldr	r2, [r7, #8]
 800cc48:	0151      	lsls	r1, r2, #5
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	440a      	add	r2, r1
 800cc4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3714      	adds	r7, #20
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
	...

0800cc6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	785b      	ldrb	r3, [r3, #1]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d161      	bne.n	800cd4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	015a      	lsls	r2, r3, #5
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	4413      	add	r3, r2
 800cc90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc9e:	d11f      	bne.n	800cce0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	015a      	lsls	r2, r3, #5
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	4413      	add	r3, r2
 800cca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	0151      	lsls	r1, r2, #5
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	440a      	add	r2, r1
 800ccb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ccbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	015a      	lsls	r2, r3, #5
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	0151      	lsls	r1, r2, #5
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	440a      	add	r2, r1
 800ccd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ccde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	f003 030f 	and.w	r3, r3, #15
 800ccf0:	2101      	movs	r1, #1
 800ccf2:	fa01 f303 	lsl.w	r3, r1, r3
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	43db      	mvns	r3, r3
 800ccfa:	68f9      	ldr	r1, [r7, #12]
 800ccfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd00:	4013      	ands	r3, r2
 800cd02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd0a:	69da      	ldr	r2, [r3, #28]
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	f003 030f 	and.w	r3, r3, #15
 800cd14:	2101      	movs	r1, #1
 800cd16:	fa01 f303 	lsl.w	r3, r1, r3
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	43db      	mvns	r3, r3
 800cd1e:	68f9      	ldr	r1, [r7, #12]
 800cd20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd24:	4013      	ands	r3, r2
 800cd26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	015a      	lsls	r2, r3, #5
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	4413      	add	r3, r2
 800cd30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	0159      	lsls	r1, r3, #5
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	440b      	add	r3, r1
 800cd3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd42:	4619      	mov	r1, r3
 800cd44:	4b35      	ldr	r3, [pc, #212]	; (800ce1c <USB_DeactivateEndpoint+0x1b0>)
 800cd46:	4013      	ands	r3, r2
 800cd48:	600b      	str	r3, [r1, #0]
 800cd4a:	e060      	b.n	800ce0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	015a      	lsls	r2, r3, #5
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	4413      	add	r3, r2
 800cd54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd62:	d11f      	bne.n	800cda4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	015a      	lsls	r2, r3, #5
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	0151      	lsls	r1, r2, #5
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	440a      	add	r2, r1
 800cd7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	015a      	lsls	r2, r3, #5
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	0151      	lsls	r1, r2, #5
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	440a      	add	r2, r1
 800cd9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cda2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	f003 030f 	and.w	r3, r3, #15
 800cdb4:	2101      	movs	r1, #1
 800cdb6:	fa01 f303 	lsl.w	r3, r1, r3
 800cdba:	041b      	lsls	r3, r3, #16
 800cdbc:	43db      	mvns	r3, r3
 800cdbe:	68f9      	ldr	r1, [r7, #12]
 800cdc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdc4:	4013      	ands	r3, r2
 800cdc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdce:	69da      	ldr	r2, [r3, #28]
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	f003 030f 	and.w	r3, r3, #15
 800cdd8:	2101      	movs	r1, #1
 800cdda:	fa01 f303 	lsl.w	r3, r1, r3
 800cdde:	041b      	lsls	r3, r3, #16
 800cde0:	43db      	mvns	r3, r3
 800cde2:	68f9      	ldr	r1, [r7, #12]
 800cde4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cde8:	4013      	ands	r3, r2
 800cdea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	015a      	lsls	r2, r3, #5
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	0159      	lsls	r1, r3, #5
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	440b      	add	r3, r1
 800ce02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce06:	4619      	mov	r1, r3
 800ce08:	4b05      	ldr	r3, [pc, #20]	; (800ce20 <USB_DeactivateEndpoint+0x1b4>)
 800ce0a:	4013      	ands	r3, r2
 800ce0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ce0e:	2300      	movs	r3, #0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3714      	adds	r7, #20
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	ec337800 	.word	0xec337800
 800ce20:	eff37800 	.word	0xeff37800

0800ce24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b08a      	sub	sp, #40	; 0x28
 800ce28:	af02      	add	r7, sp, #8
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	4613      	mov	r3, r2
 800ce30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	785b      	ldrb	r3, [r3, #1]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	f040 815c 	bne.w	800d0fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	695b      	ldr	r3, [r3, #20]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d132      	bne.n	800ceb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	015a      	lsls	r2, r3, #5
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	4413      	add	r3, r2
 800ce56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	69ba      	ldr	r2, [r7, #24]
 800ce5e:	0151      	lsls	r1, r2, #5
 800ce60:	69fa      	ldr	r2, [r7, #28]
 800ce62:	440a      	add	r2, r1
 800ce64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ce6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ce70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	015a      	lsls	r2, r3, #5
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	4413      	add	r3, r2
 800ce7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce7e:	691b      	ldr	r3, [r3, #16]
 800ce80:	69ba      	ldr	r2, [r7, #24]
 800ce82:	0151      	lsls	r1, r2, #5
 800ce84:	69fa      	ldr	r2, [r7, #28]
 800ce86:	440a      	add	r2, r1
 800ce88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	015a      	lsls	r2, r3, #5
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	4413      	add	r3, r2
 800ce9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce9e:	691b      	ldr	r3, [r3, #16]
 800cea0:	69ba      	ldr	r2, [r7, #24]
 800cea2:	0151      	lsls	r1, r2, #5
 800cea4:	69fa      	ldr	r2, [r7, #28]
 800cea6:	440a      	add	r2, r1
 800cea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceac:	0cdb      	lsrs	r3, r3, #19
 800ceae:	04db      	lsls	r3, r3, #19
 800ceb0:	6113      	str	r3, [r2, #16]
 800ceb2:	e074      	b.n	800cf9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	015a      	lsls	r2, r3, #5
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	4413      	add	r3, r2
 800cebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cec0:	691b      	ldr	r3, [r3, #16]
 800cec2:	69ba      	ldr	r2, [r7, #24]
 800cec4:	0151      	lsls	r1, r2, #5
 800cec6:	69fa      	ldr	r2, [r7, #28]
 800cec8:	440a      	add	r2, r1
 800ceca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cece:	0cdb      	lsrs	r3, r3, #19
 800ced0:	04db      	lsls	r3, r3, #19
 800ced2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	015a      	lsls	r2, r3, #5
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	4413      	add	r3, r2
 800cedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cee0:	691b      	ldr	r3, [r3, #16]
 800cee2:	69ba      	ldr	r2, [r7, #24]
 800cee4:	0151      	lsls	r1, r2, #5
 800cee6:	69fa      	ldr	r2, [r7, #28]
 800cee8:	440a      	add	r2, r1
 800ceea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cef2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cef6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	015a      	lsls	r2, r3, #5
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	4413      	add	r3, r2
 800cf00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf04:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	6959      	ldr	r1, [r3, #20]
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	440b      	add	r3, r1
 800cf10:	1e59      	subs	r1, r3, #1
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	fbb1 f3f3 	udiv	r3, r1, r3
 800cf1a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800cf1c:	4b9d      	ldr	r3, [pc, #628]	; (800d194 <USB_EPStartXfer+0x370>)
 800cf1e:	400b      	ands	r3, r1
 800cf20:	69b9      	ldr	r1, [r7, #24]
 800cf22:	0148      	lsls	r0, r1, #5
 800cf24:	69f9      	ldr	r1, [r7, #28]
 800cf26:	4401      	add	r1, r0
 800cf28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	015a      	lsls	r2, r3, #5
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	4413      	add	r3, r2
 800cf38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf3c:	691a      	ldr	r2, [r3, #16]
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	695b      	ldr	r3, [r3, #20]
 800cf42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf46:	69b9      	ldr	r1, [r7, #24]
 800cf48:	0148      	lsls	r0, r1, #5
 800cf4a:	69f9      	ldr	r1, [r7, #28]
 800cf4c:	4401      	add	r1, r0
 800cf4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cf52:	4313      	orrs	r3, r2
 800cf54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	78db      	ldrb	r3, [r3, #3]
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d11f      	bne.n	800cf9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	015a      	lsls	r2, r3, #5
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	4413      	add	r3, r2
 800cf66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf6a:	691b      	ldr	r3, [r3, #16]
 800cf6c:	69ba      	ldr	r2, [r7, #24]
 800cf6e:	0151      	lsls	r1, r2, #5
 800cf70:	69fa      	ldr	r2, [r7, #28]
 800cf72:	440a      	add	r2, r1
 800cf74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cf7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	015a      	lsls	r2, r3, #5
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	4413      	add	r3, r2
 800cf86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	69ba      	ldr	r2, [r7, #24]
 800cf8e:	0151      	lsls	r1, r2, #5
 800cf90:	69fa      	ldr	r2, [r7, #28]
 800cf92:	440a      	add	r2, r1
 800cf94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cf9e:	79fb      	ldrb	r3, [r7, #7]
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d14b      	bne.n	800d03c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d009      	beq.n	800cfc0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	015a      	lsls	r2, r3, #5
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfb8:	461a      	mov	r2, r3
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	78db      	ldrb	r3, [r3, #3]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d128      	bne.n	800d01a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d110      	bne.n	800cffa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	015a      	lsls	r2, r3, #5
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	69ba      	ldr	r2, [r7, #24]
 800cfe8:	0151      	lsls	r1, r2, #5
 800cfea:	69fa      	ldr	r2, [r7, #28]
 800cfec:	440a      	add	r2, r1
 800cfee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cff6:	6013      	str	r3, [r2, #0]
 800cff8:	e00f      	b.n	800d01a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cffa:	69bb      	ldr	r3, [r7, #24]
 800cffc:	015a      	lsls	r2, r3, #5
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	4413      	add	r3, r2
 800d002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	69ba      	ldr	r2, [r7, #24]
 800d00a:	0151      	lsls	r1, r2, #5
 800d00c:	69fa      	ldr	r2, [r7, #28]
 800d00e:	440a      	add	r2, r1
 800d010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d018:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	015a      	lsls	r2, r3, #5
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	4413      	add	r3, r2
 800d022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	69ba      	ldr	r2, [r7, #24]
 800d02a:	0151      	lsls	r1, r2, #5
 800d02c:	69fa      	ldr	r2, [r7, #28]
 800d02e:	440a      	add	r2, r1
 800d030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d038:	6013      	str	r3, [r2, #0]
 800d03a:	e12f      	b.n	800d29c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	015a      	lsls	r2, r3, #5
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	4413      	add	r3, r2
 800d044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	69ba      	ldr	r2, [r7, #24]
 800d04c:	0151      	lsls	r1, r2, #5
 800d04e:	69fa      	ldr	r2, [r7, #28]
 800d050:	440a      	add	r2, r1
 800d052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d056:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d05a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	78db      	ldrb	r3, [r3, #3]
 800d060:	2b01      	cmp	r3, #1
 800d062:	d015      	beq.n	800d090 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	695b      	ldr	r3, [r3, #20]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f000 8117 	beq.w	800d29c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	f003 030f 	and.w	r3, r3, #15
 800d07e:	2101      	movs	r1, #1
 800d080:	fa01 f303 	lsl.w	r3, r1, r3
 800d084:	69f9      	ldr	r1, [r7, #28]
 800d086:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d08a:	4313      	orrs	r3, r2
 800d08c:	634b      	str	r3, [r1, #52]	; 0x34
 800d08e:	e105      	b.n	800d29c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d096:	689b      	ldr	r3, [r3, #8]
 800d098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d110      	bne.n	800d0c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	015a      	lsls	r2, r3, #5
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	69ba      	ldr	r2, [r7, #24]
 800d0b0:	0151      	lsls	r1, r2, #5
 800d0b2:	69fa      	ldr	r2, [r7, #28]
 800d0b4:	440a      	add	r2, r1
 800d0b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d0be:	6013      	str	r3, [r2, #0]
 800d0c0:	e00f      	b.n	800d0e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	015a      	lsls	r2, r3, #5
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	69ba      	ldr	r2, [r7, #24]
 800d0d2:	0151      	lsls	r1, r2, #5
 800d0d4:	69fa      	ldr	r2, [r7, #28]
 800d0d6:	440a      	add	r2, r1
 800d0d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	68d9      	ldr	r1, [r3, #12]
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	781a      	ldrb	r2, [r3, #0]
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	695b      	ldr	r3, [r3, #20]
 800d0ee:	b298      	uxth	r0, r3
 800d0f0:	79fb      	ldrb	r3, [r7, #7]
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f000 fa2b 	bl	800d552 <USB_WritePacket>
 800d0fc:	e0ce      	b.n	800d29c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	015a      	lsls	r2, r3, #5
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	4413      	add	r3, r2
 800d106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	69ba      	ldr	r2, [r7, #24]
 800d10e:	0151      	lsls	r1, r2, #5
 800d110:	69fa      	ldr	r2, [r7, #28]
 800d112:	440a      	add	r2, r1
 800d114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d118:	0cdb      	lsrs	r3, r3, #19
 800d11a:	04db      	lsls	r3, r3, #19
 800d11c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	015a      	lsls	r2, r3, #5
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	4413      	add	r3, r2
 800d126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	69ba      	ldr	r2, [r7, #24]
 800d12e:	0151      	lsls	r1, r2, #5
 800d130:	69fa      	ldr	r2, [r7, #28]
 800d132:	440a      	add	r2, r1
 800d134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d138:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d13c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d140:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	695b      	ldr	r3, [r3, #20]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d126      	bne.n	800d198 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d14a:	69bb      	ldr	r3, [r7, #24]
 800d14c:	015a      	lsls	r2, r3, #5
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	4413      	add	r3, r2
 800d152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d156:	691a      	ldr	r2, [r3, #16]
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d160:	69b9      	ldr	r1, [r7, #24]
 800d162:	0148      	lsls	r0, r1, #5
 800d164:	69f9      	ldr	r1, [r7, #28]
 800d166:	4401      	add	r1, r0
 800d168:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d16c:	4313      	orrs	r3, r2
 800d16e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	015a      	lsls	r2, r3, #5
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	4413      	add	r3, r2
 800d178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d17c:	691b      	ldr	r3, [r3, #16]
 800d17e:	69ba      	ldr	r2, [r7, #24]
 800d180:	0151      	lsls	r1, r2, #5
 800d182:	69fa      	ldr	r2, [r7, #28]
 800d184:	440a      	add	r2, r1
 800d186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d18a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d18e:	6113      	str	r3, [r2, #16]
 800d190:	e036      	b.n	800d200 <USB_EPStartXfer+0x3dc>
 800d192:	bf00      	nop
 800d194:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	695a      	ldr	r2, [r3, #20]
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	1e5a      	subs	r2, r3, #1
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	689b      	ldr	r3, [r3, #8]
 800d1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	015a      	lsls	r2, r3, #5
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ba:	691a      	ldr	r2, [r3, #16]
 800d1bc:	8afb      	ldrh	r3, [r7, #22]
 800d1be:	04d9      	lsls	r1, r3, #19
 800d1c0:	4b39      	ldr	r3, [pc, #228]	; (800d2a8 <USB_EPStartXfer+0x484>)
 800d1c2:	400b      	ands	r3, r1
 800d1c4:	69b9      	ldr	r1, [r7, #24]
 800d1c6:	0148      	lsls	r0, r1, #5
 800d1c8:	69f9      	ldr	r1, [r7, #28]
 800d1ca:	4401      	add	r1, r0
 800d1cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	015a      	lsls	r2, r3, #5
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e0:	691a      	ldr	r2, [r3, #16]
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	8af9      	ldrh	r1, [r7, #22]
 800d1e8:	fb01 f303 	mul.w	r3, r1, r3
 800d1ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1f0:	69b9      	ldr	r1, [r7, #24]
 800d1f2:	0148      	lsls	r0, r1, #5
 800d1f4:	69f9      	ldr	r1, [r7, #28]
 800d1f6:	4401      	add	r1, r0
 800d1f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d200:	79fb      	ldrb	r3, [r7, #7]
 800d202:	2b01      	cmp	r3, #1
 800d204:	d10d      	bne.n	800d222 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	68db      	ldr	r3, [r3, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d009      	beq.n	800d222 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	68d9      	ldr	r1, [r3, #12]
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	015a      	lsls	r2, r3, #5
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	4413      	add	r3, r2
 800d21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d21e:	460a      	mov	r2, r1
 800d220:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	78db      	ldrb	r3, [r3, #3]
 800d226:	2b01      	cmp	r3, #1
 800d228:	d128      	bne.n	800d27c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d236:	2b00      	cmp	r3, #0
 800d238:	d110      	bne.n	800d25c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	015a      	lsls	r2, r3, #5
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	4413      	add	r3, r2
 800d242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	69ba      	ldr	r2, [r7, #24]
 800d24a:	0151      	lsls	r1, r2, #5
 800d24c:	69fa      	ldr	r2, [r7, #28]
 800d24e:	440a      	add	r2, r1
 800d250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d254:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d258:	6013      	str	r3, [r2, #0]
 800d25a:	e00f      	b.n	800d27c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	015a      	lsls	r2, r3, #5
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	4413      	add	r3, r2
 800d264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	69ba      	ldr	r2, [r7, #24]
 800d26c:	0151      	lsls	r1, r2, #5
 800d26e:	69fa      	ldr	r2, [r7, #28]
 800d270:	440a      	add	r2, r1
 800d272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d27a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	015a      	lsls	r2, r3, #5
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	4413      	add	r3, r2
 800d284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	69ba      	ldr	r2, [r7, #24]
 800d28c:	0151      	lsls	r1, r2, #5
 800d28e:	69fa      	ldr	r2, [r7, #28]
 800d290:	440a      	add	r2, r1
 800d292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d296:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d29a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d29c:	2300      	movs	r3, #0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3720      	adds	r7, #32
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	1ff80000 	.word	0x1ff80000

0800d2ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b087      	sub	sp, #28
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	785b      	ldrb	r3, [r3, #1]
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	f040 80cd 	bne.w	800d468 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d132      	bne.n	800d33c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	015a      	lsls	r2, r3, #5
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	4413      	add	r3, r2
 800d2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	693a      	ldr	r2, [r7, #16]
 800d2e6:	0151      	lsls	r1, r2, #5
 800d2e8:	697a      	ldr	r2, [r7, #20]
 800d2ea:	440a      	add	r2, r1
 800d2ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d2f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d2f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	015a      	lsls	r2, r3, #5
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	4413      	add	r3, r2
 800d302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d306:	691b      	ldr	r3, [r3, #16]
 800d308:	693a      	ldr	r2, [r7, #16]
 800d30a:	0151      	lsls	r1, r2, #5
 800d30c:	697a      	ldr	r2, [r7, #20]
 800d30e:	440a      	add	r2, r1
 800d310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d318:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	015a      	lsls	r2, r3, #5
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	4413      	add	r3, r2
 800d322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d326:	691b      	ldr	r3, [r3, #16]
 800d328:	693a      	ldr	r2, [r7, #16]
 800d32a:	0151      	lsls	r1, r2, #5
 800d32c:	697a      	ldr	r2, [r7, #20]
 800d32e:	440a      	add	r2, r1
 800d330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d334:	0cdb      	lsrs	r3, r3, #19
 800d336:	04db      	lsls	r3, r3, #19
 800d338:	6113      	str	r3, [r2, #16]
 800d33a:	e04e      	b.n	800d3da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	015a      	lsls	r2, r3, #5
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	4413      	add	r3, r2
 800d344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	693a      	ldr	r2, [r7, #16]
 800d34c:	0151      	lsls	r1, r2, #5
 800d34e:	697a      	ldr	r2, [r7, #20]
 800d350:	440a      	add	r2, r1
 800d352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d356:	0cdb      	lsrs	r3, r3, #19
 800d358:	04db      	lsls	r3, r3, #19
 800d35a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	015a      	lsls	r2, r3, #5
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	4413      	add	r3, r2
 800d364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d368:	691b      	ldr	r3, [r3, #16]
 800d36a:	693a      	ldr	r2, [r7, #16]
 800d36c:	0151      	lsls	r1, r2, #5
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	440a      	add	r2, r1
 800d372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d376:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d37a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d37e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	695a      	ldr	r2, [r3, #20]
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d903      	bls.n	800d394 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	689a      	ldr	r2, [r3, #8]
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	015a      	lsls	r2, r3, #5
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	4413      	add	r3, r2
 800d39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	0151      	lsls	r1, r2, #5
 800d3a6:	697a      	ldr	r2, [r7, #20]
 800d3a8:	440a      	add	r2, r1
 800d3aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d3b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	015a      	lsls	r2, r3, #5
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3c0:	691a      	ldr	r2, [r3, #16]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	695b      	ldr	r3, [r3, #20]
 800d3c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d3ca:	6939      	ldr	r1, [r7, #16]
 800d3cc:	0148      	lsls	r0, r1, #5
 800d3ce:	6979      	ldr	r1, [r7, #20]
 800d3d0:	4401      	add	r1, r0
 800d3d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d3da:	79fb      	ldrb	r3, [r7, #7]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d11e      	bne.n	800d41e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	691b      	ldr	r3, [r3, #16]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d009      	beq.n	800d3fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	015a      	lsls	r2, r3, #5
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	015a      	lsls	r2, r3, #5
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	4413      	add	r3, r2
 800d404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	693a      	ldr	r2, [r7, #16]
 800d40c:	0151      	lsls	r1, r2, #5
 800d40e:	697a      	ldr	r2, [r7, #20]
 800d410:	440a      	add	r2, r1
 800d412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d416:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d41a:	6013      	str	r3, [r2, #0]
 800d41c:	e092      	b.n	800d544 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	015a      	lsls	r2, r3, #5
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	4413      	add	r3, r2
 800d426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	0151      	lsls	r1, r2, #5
 800d430:	697a      	ldr	r2, [r7, #20]
 800d432:	440a      	add	r2, r1
 800d434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d438:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d43c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	695b      	ldr	r3, [r3, #20]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d07e      	beq.n	800d544 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d44c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	f003 030f 	and.w	r3, r3, #15
 800d456:	2101      	movs	r1, #1
 800d458:	fa01 f303 	lsl.w	r3, r1, r3
 800d45c:	6979      	ldr	r1, [r7, #20]
 800d45e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d462:	4313      	orrs	r3, r2
 800d464:	634b      	str	r3, [r1, #52]	; 0x34
 800d466:	e06d      	b.n	800d544 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	015a      	lsls	r2, r3, #5
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	4413      	add	r3, r2
 800d470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	693a      	ldr	r2, [r7, #16]
 800d478:	0151      	lsls	r1, r2, #5
 800d47a:	697a      	ldr	r2, [r7, #20]
 800d47c:	440a      	add	r2, r1
 800d47e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d482:	0cdb      	lsrs	r3, r3, #19
 800d484:	04db      	lsls	r3, r3, #19
 800d486:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	015a      	lsls	r2, r3, #5
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	4413      	add	r3, r2
 800d490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	693a      	ldr	r2, [r7, #16]
 800d498:	0151      	lsls	r1, r2, #5
 800d49a:	697a      	ldr	r2, [r7, #20]
 800d49c:	440a      	add	r2, r1
 800d49e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d4a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d4aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	695b      	ldr	r3, [r3, #20]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d003      	beq.n	800d4bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	689a      	ldr	r2, [r3, #8]
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	015a      	lsls	r2, r3, #5
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	4413      	add	r3, r2
 800d4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4c8:	691b      	ldr	r3, [r3, #16]
 800d4ca:	693a      	ldr	r2, [r7, #16]
 800d4cc:	0151      	lsls	r1, r2, #5
 800d4ce:	697a      	ldr	r2, [r7, #20]
 800d4d0:	440a      	add	r2, r1
 800d4d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	015a      	lsls	r2, r3, #5
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	4413      	add	r3, r2
 800d4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e8:	691a      	ldr	r2, [r3, #16]
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4f2:	6939      	ldr	r1, [r7, #16]
 800d4f4:	0148      	lsls	r0, r1, #5
 800d4f6:	6979      	ldr	r1, [r7, #20]
 800d4f8:	4401      	add	r1, r0
 800d4fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d4fe:	4313      	orrs	r3, r2
 800d500:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d502:	79fb      	ldrb	r3, [r7, #7]
 800d504:	2b01      	cmp	r3, #1
 800d506:	d10d      	bne.n	800d524 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d009      	beq.n	800d524 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	68d9      	ldr	r1, [r3, #12]
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	015a      	lsls	r2, r3, #5
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	4413      	add	r3, r2
 800d51c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d520:	460a      	mov	r2, r1
 800d522:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	015a      	lsls	r2, r3, #5
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	4413      	add	r3, r2
 800d52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	693a      	ldr	r2, [r7, #16]
 800d534:	0151      	lsls	r1, r2, #5
 800d536:	697a      	ldr	r2, [r7, #20]
 800d538:	440a      	add	r2, r1
 800d53a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d53e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d542:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	371c      	adds	r7, #28
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d552:	b480      	push	{r7}
 800d554:	b089      	sub	sp, #36	; 0x24
 800d556:	af00      	add	r7, sp, #0
 800d558:	60f8      	str	r0, [r7, #12]
 800d55a:	60b9      	str	r1, [r7, #8]
 800d55c:	4611      	mov	r1, r2
 800d55e:	461a      	mov	r2, r3
 800d560:	460b      	mov	r3, r1
 800d562:	71fb      	strb	r3, [r7, #7]
 800d564:	4613      	mov	r3, r2
 800d566:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d570:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d574:	2b00      	cmp	r3, #0
 800d576:	d123      	bne.n	800d5c0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d578:	88bb      	ldrh	r3, [r7, #4]
 800d57a:	3303      	adds	r3, #3
 800d57c:	089b      	lsrs	r3, r3, #2
 800d57e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d580:	2300      	movs	r3, #0
 800d582:	61bb      	str	r3, [r7, #24]
 800d584:	e018      	b.n	800d5b8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d586:	79fb      	ldrb	r3, [r7, #7]
 800d588:	031a      	lsls	r2, r3, #12
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	4413      	add	r3, r2
 800d58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d592:	461a      	mov	r2, r3
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	3301      	adds	r3, #1
 800d59e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	61bb      	str	r3, [r7, #24]
 800d5b8:	69ba      	ldr	r2, [r7, #24]
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d3e2      	bcc.n	800d586 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d5c0:	2300      	movs	r3, #0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3724      	adds	r7, #36	; 0x24
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr

0800d5ce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d5ce:	b480      	push	{r7}
 800d5d0:	b08b      	sub	sp, #44	; 0x2c
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	60f8      	str	r0, [r7, #12]
 800d5d6:	60b9      	str	r1, [r7, #8]
 800d5d8:	4613      	mov	r3, r2
 800d5da:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d5e4:	88fb      	ldrh	r3, [r7, #6]
 800d5e6:	089b      	lsrs	r3, r3, #2
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d5ec:	88fb      	ldrh	r3, [r7, #6]
 800d5ee:	f003 0303 	and.w	r3, r3, #3
 800d5f2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	623b      	str	r3, [r7, #32]
 800d5f8:	e014      	b.n	800d624 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d604:	601a      	str	r2, [r3, #0]
    pDest++;
 800d606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d608:	3301      	adds	r3, #1
 800d60a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60e:	3301      	adds	r3, #1
 800d610:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d614:	3301      	adds	r3, #1
 800d616:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	3301      	adds	r3, #1
 800d61c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d61e:	6a3b      	ldr	r3, [r7, #32]
 800d620:	3301      	adds	r3, #1
 800d622:	623b      	str	r3, [r7, #32]
 800d624:	6a3a      	ldr	r2, [r7, #32]
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d3e6      	bcc.n	800d5fa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d62c:	8bfb      	ldrh	r3, [r7, #30]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d01e      	beq.n	800d670 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d632:	2300      	movs	r3, #0
 800d634:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d63c:	461a      	mov	r2, r3
 800d63e:	f107 0310 	add.w	r3, r7, #16
 800d642:	6812      	ldr	r2, [r2, #0]
 800d644:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d646:	693a      	ldr	r2, [r7, #16]
 800d648:	6a3b      	ldr	r3, [r7, #32]
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	00db      	lsls	r3, r3, #3
 800d64e:	fa22 f303 	lsr.w	r3, r2, r3
 800d652:	b2da      	uxtb	r2, r3
 800d654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d656:	701a      	strb	r2, [r3, #0]
      i++;
 800d658:	6a3b      	ldr	r3, [r7, #32]
 800d65a:	3301      	adds	r3, #1
 800d65c:	623b      	str	r3, [r7, #32]
      pDest++;
 800d65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d660:	3301      	adds	r3, #1
 800d662:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d664:	8bfb      	ldrh	r3, [r7, #30]
 800d666:	3b01      	subs	r3, #1
 800d668:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d66a:	8bfb      	ldrh	r3, [r7, #30]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d1ea      	bne.n	800d646 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d672:	4618      	mov	r0, r3
 800d674:	372c      	adds	r7, #44	; 0x2c
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr

0800d67e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d67e:	b480      	push	{r7}
 800d680:	b085      	sub	sp, #20
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	785b      	ldrb	r3, [r3, #1]
 800d696:	2b01      	cmp	r3, #1
 800d698:	d12c      	bne.n	800d6f4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	015a      	lsls	r2, r3, #5
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	db12      	blt.n	800d6d2 <USB_EPSetStall+0x54>
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00f      	beq.n	800d6d2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	015a      	lsls	r2, r3, #5
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	4413      	add	r3, r2
 800d6ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68ba      	ldr	r2, [r7, #8]
 800d6c2:	0151      	lsls	r1, r2, #5
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	440a      	add	r2, r1
 800d6c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d6d0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	015a      	lsls	r2, r3, #5
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	4413      	add	r3, r2
 800d6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	68ba      	ldr	r2, [r7, #8]
 800d6e2:	0151      	lsls	r1, r2, #5
 800d6e4:	68fa      	ldr	r2, [r7, #12]
 800d6e6:	440a      	add	r2, r1
 800d6e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d6f0:	6013      	str	r3, [r2, #0]
 800d6f2:	e02b      	b.n	800d74c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	015a      	lsls	r2, r3, #5
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	db12      	blt.n	800d72c <USB_EPSetStall+0xae>
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00f      	beq.n	800d72c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	015a      	lsls	r2, r3, #5
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	4413      	add	r3, r2
 800d714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	0151      	lsls	r1, r2, #5
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	440a      	add	r2, r1
 800d722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d726:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d72a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4413      	add	r3, r2
 800d734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	68ba      	ldr	r2, [r7, #8]
 800d73c:	0151      	lsls	r1, r2, #5
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	440a      	add	r2, r1
 800d742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d74a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d74c:	2300      	movs	r3, #0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3714      	adds	r7, #20
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr

0800d75a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d75a:	b480      	push	{r7}
 800d75c:	b085      	sub	sp, #20
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
 800d762:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	785b      	ldrb	r3, [r3, #1]
 800d772:	2b01      	cmp	r3, #1
 800d774:	d128      	bne.n	800d7c8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	015a      	lsls	r2, r3, #5
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	4413      	add	r3, r2
 800d77e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	0151      	lsls	r1, r2, #5
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	440a      	add	r2, r1
 800d78c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d790:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d794:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	78db      	ldrb	r3, [r3, #3]
 800d79a:	2b03      	cmp	r3, #3
 800d79c:	d003      	beq.n	800d7a6 <USB_EPClearStall+0x4c>
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	78db      	ldrb	r3, [r3, #3]
 800d7a2:	2b02      	cmp	r3, #2
 800d7a4:	d138      	bne.n	800d818 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	015a      	lsls	r2, r3, #5
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68ba      	ldr	r2, [r7, #8]
 800d7b6:	0151      	lsls	r1, r2, #5
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	440a      	add	r2, r1
 800d7bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	e027      	b.n	800d818 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	015a      	lsls	r2, r3, #5
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	68ba      	ldr	r2, [r7, #8]
 800d7d8:	0151      	lsls	r1, r2, #5
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	440a      	add	r2, r1
 800d7de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d7e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	78db      	ldrb	r3, [r3, #3]
 800d7ec:	2b03      	cmp	r3, #3
 800d7ee:	d003      	beq.n	800d7f8 <USB_EPClearStall+0x9e>
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	78db      	ldrb	r3, [r3, #3]
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d10f      	bne.n	800d818 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	015a      	lsls	r2, r3, #5
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	4413      	add	r3, r2
 800d800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	68ba      	ldr	r2, [r7, #8]
 800d808:	0151      	lsls	r1, r2, #5
 800d80a:	68fa      	ldr	r2, [r7, #12]
 800d80c:	440a      	add	r2, r1
 800d80e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d816:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3714      	adds	r7, #20
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d826:	b480      	push	{r7}
 800d828:	b085      	sub	sp, #20
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	460b      	mov	r3, r1
 800d830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d844:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d848:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	78fb      	ldrb	r3, [r7, #3]
 800d854:	011b      	lsls	r3, r3, #4
 800d856:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d85a:	68f9      	ldr	r1, [r7, #12]
 800d85c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d860:	4313      	orrs	r3, r2
 800d862:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3714      	adds	r7, #20
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr

0800d872 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d872:	b480      	push	{r7}
 800d874:	b085      	sub	sp, #20
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	68fa      	ldr	r2, [r7, #12]
 800d888:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d88c:	f023 0303 	bic.w	r3, r3, #3
 800d890:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8a0:	f023 0302 	bic.w	r3, r3, #2
 800d8a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3714      	adds	r7, #20
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	68fa      	ldr	r2, [r7, #12]
 800d8ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d8ce:	f023 0303 	bic.w	r3, r3, #3
 800d8d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8e2:	f043 0302 	orr.w	r3, r3, #2
 800d8e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3714      	adds	r7, #20
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr

0800d8f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d8f6:	b480      	push	{r7}
 800d8f8:	b085      	sub	sp, #20
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	695b      	ldr	r3, [r3, #20]
 800d902:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	699b      	ldr	r3, [r3, #24]
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	4013      	ands	r3, r2
 800d90c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d90e:	68fb      	ldr	r3, [r7, #12]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3714      	adds	r7, #20
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d92e:	699b      	ldr	r3, [r3, #24]
 800d930:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d938:	69db      	ldr	r3, [r3, #28]
 800d93a:	68ba      	ldr	r2, [r7, #8]
 800d93c:	4013      	ands	r3, r2
 800d93e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	0c1b      	lsrs	r3, r3, #16
}
 800d944:	4618      	mov	r0, r3
 800d946:	3714      	adds	r7, #20
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d962:	699b      	ldr	r3, [r3, #24]
 800d964:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d96c:	69db      	ldr	r3, [r3, #28]
 800d96e:	68ba      	ldr	r2, [r7, #8]
 800d970:	4013      	ands	r3, r2
 800d972:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	b29b      	uxth	r3, r3
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3714      	adds	r7, #20
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	460b      	mov	r3, r1
 800d98e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d994:	78fb      	ldrb	r3, [r7, #3]
 800d996:	015a      	lsls	r2, r3, #5
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	4413      	add	r3, r2
 800d99c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9aa:	695b      	ldr	r3, [r3, #20]
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	4013      	ands	r3, r2
 800d9b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d9b2:	68bb      	ldr	r3, [r7, #8]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3714      	adds	r7, #20
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b087      	sub	sp, #28
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9d6:	691b      	ldr	r3, [r3, #16]
 800d9d8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9e2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d9e4:	78fb      	ldrb	r3, [r7, #3]
 800d9e6:	f003 030f 	and.w	r3, r3, #15
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	fa22 f303 	lsr.w	r3, r2, r3
 800d9f0:	01db      	lsls	r3, r3, #7
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d9fa:	78fb      	ldrb	r3, [r7, #3]
 800d9fc:	015a      	lsls	r2, r3, #5
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	4413      	add	r3, r2
 800da02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da06:	689b      	ldr	r3, [r3, #8]
 800da08:	693a      	ldr	r2, [r7, #16]
 800da0a:	4013      	ands	r3, r2
 800da0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da0e:	68bb      	ldr	r3, [r7, #8]
}
 800da10:	4618      	mov	r0, r3
 800da12:	371c      	adds	r7, #28
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	695b      	ldr	r3, [r3, #20]
 800da28:	f003 0301 	and.w	r3, r3, #1
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68fa      	ldr	r2, [r7, #12]
 800da4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800da56:	f023 0307 	bic.w	r3, r3, #7
 800da5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	3714      	adds	r7, #20
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr
	...

0800da80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800da80:	b480      	push	{r7}
 800da82:	b087      	sub	sp, #28
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	460b      	mov	r3, r1
 800da8a:	607a      	str	r2, [r7, #4]
 800da8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	333c      	adds	r3, #60	; 0x3c
 800da96:	3304      	adds	r3, #4
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	4a26      	ldr	r2, [pc, #152]	; (800db38 <USB_EP0_OutStart+0xb8>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d90a      	bls.n	800daba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dab4:	d101      	bne.n	800daba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dab6:	2300      	movs	r3, #0
 800dab8:	e037      	b.n	800db2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dac0:	461a      	mov	r2, r3
 800dac2:	2300      	movs	r3, #0
 800dac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dacc:	691b      	ldr	r3, [r3, #16]
 800dace:	697a      	ldr	r2, [r7, #20]
 800dad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dae0:	691b      	ldr	r3, [r3, #16]
 800dae2:	697a      	ldr	r2, [r7, #20]
 800dae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dae8:	f043 0318 	orr.w	r3, r3, #24
 800daec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	697a      	ldr	r2, [r7, #20]
 800daf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dafc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800db00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800db02:	7afb      	ldrb	r3, [r7, #11]
 800db04:	2b01      	cmp	r3, #1
 800db06:	d10f      	bne.n	800db28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db0e:	461a      	mov	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	697a      	ldr	r2, [r7, #20]
 800db1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800db26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db28:	2300      	movs	r3, #0
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	371c      	adds	r7, #28
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	4f54300a 	.word	0x4f54300a

0800db3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db44:	2300      	movs	r3, #0
 800db46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	3301      	adds	r3, #1
 800db4c:	60fb      	str	r3, [r7, #12]
 800db4e:	4a13      	ldr	r2, [pc, #76]	; (800db9c <USB_CoreReset+0x60>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d901      	bls.n	800db58 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800db54:	2303      	movs	r3, #3
 800db56:	e01a      	b.n	800db8e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	daf3      	bge.n	800db48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800db60:	2300      	movs	r3, #0
 800db62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	691b      	ldr	r3, [r3, #16]
 800db68:	f043 0201 	orr.w	r2, r3, #1
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	3301      	adds	r3, #1
 800db74:	60fb      	str	r3, [r7, #12]
 800db76:	4a09      	ldr	r2, [pc, #36]	; (800db9c <USB_CoreReset+0x60>)
 800db78:	4293      	cmp	r3, r2
 800db7a:	d901      	bls.n	800db80 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800db7c:	2303      	movs	r3, #3
 800db7e:	e006      	b.n	800db8e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	f003 0301 	and.w	r3, r3, #1
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d0f1      	beq.n	800db70 <USB_CoreReset+0x34>

  return HAL_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3714      	adds	r7, #20
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	00030d40 	.word	0x00030d40

0800dba0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dba4:	4904      	ldr	r1, [pc, #16]	; (800dbb8 <MX_FATFS_Init+0x18>)
 800dba6:	4805      	ldr	r0, [pc, #20]	; (800dbbc <MX_FATFS_Init+0x1c>)
 800dba8:	f005 fd1c 	bl	80135e4 <FATFS_LinkDriver>
 800dbac:	4603      	mov	r3, r0
 800dbae:	461a      	mov	r2, r3
 800dbb0:	4b03      	ldr	r3, [pc, #12]	; (800dbc0 <MX_FATFS_Init+0x20>)
 800dbb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dbb4:	bf00      	nop
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	20003a94 	.word	0x20003a94
 800dbbc:	08014a40 	.word	0x08014a40
 800dbc0:	20003a90 	.word	0x20003a90

0800dbc4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dbc8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dbde:	f000 f896 	bl	800dd0e <BSP_SD_IsDetected>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d001      	beq.n	800dbec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e012      	b.n	800dc12 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800dbec:	480b      	ldr	r0, [pc, #44]	; (800dc1c <BSP_SD_Init+0x48>)
 800dbee:	f7fc f927 	bl	8009e40 <HAL_SD_Init>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800dbf6:	79fb      	ldrb	r3, [r7, #7]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d109      	bne.n	800dc10 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800dbfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dc00:	4806      	ldr	r0, [pc, #24]	; (800dc1c <BSP_SD_Init+0x48>)
 800dc02:	f7fc fedd 	bl	800a9c0 <HAL_SD_ConfigWideBusOperation>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d001      	beq.n	800dc10 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800dc10:	79fb      	ldrb	r3, [r7, #7]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	20002830 	.word	0x20002830

0800dc20 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	68ba      	ldr	r2, [r7, #8]
 800dc34:	68f9      	ldr	r1, [r7, #12]
 800dc36:	4806      	ldr	r0, [pc, #24]	; (800dc50 <BSP_SD_ReadBlocks_DMA+0x30>)
 800dc38:	f7fc f9b0 	bl	8009f9c <HAL_SD_ReadBlocks_DMA>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d001      	beq.n	800dc46 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dc42:	2301      	movs	r3, #1
 800dc44:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dc46:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3718      	adds	r7, #24
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	20002830 	.word	0x20002830

0800dc54 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dc60:	2300      	movs	r3, #0
 800dc62:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	68f9      	ldr	r1, [r7, #12]
 800dc6a:	4806      	ldr	r0, [pc, #24]	; (800dc84 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dc6c:	f7fc fa76 	bl	800a15c <HAL_SD_WriteBlocks_DMA>
 800dc70:	4603      	mov	r3, r0
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d001      	beq.n	800dc7a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3718      	adds	r7, #24
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	20002830 	.word	0x20002830

0800dc88 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dc8c:	4805      	ldr	r0, [pc, #20]	; (800dca4 <BSP_SD_GetCardState+0x1c>)
 800dc8e:	f7fc ff31 	bl	800aaf4 <HAL_SD_GetCardState>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b04      	cmp	r3, #4
 800dc96:	bf14      	ite	ne
 800dc98:	2301      	movne	r3, #1
 800dc9a:	2300      	moveq	r3, #0
 800dc9c:	b2db      	uxtb	r3, r3
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	20002830 	.word	0x20002830

0800dca8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800dcb0:	6879      	ldr	r1, [r7, #4]
 800dcb2:	4803      	ldr	r0, [pc, #12]	; (800dcc0 <BSP_SD_GetCardInfo+0x18>)
 800dcb4:	f7fc fe58 	bl	800a968 <HAL_SD_GetCardInfo>
}
 800dcb8:	bf00      	nop
 800dcba:	3708      	adds	r7, #8
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	20002830 	.word	0x20002830

0800dcc4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800dccc:	f000 f818 	bl	800dd00 <BSP_SD_AbortCallback>
}
 800dcd0:	bf00      	nop
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dce0:	f000 f9a8 	bl	800e034 <BSP_SD_WriteCpltCallback>
}
 800dce4:	bf00      	nop
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dcf4:	f000 f9aa 	bl	800e04c <BSP_SD_ReadCpltCallback>
}
 800dcf8:	bf00      	nop
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800dd00:	b480      	push	{r7}
 800dd02:	af00      	add	r7, sp, #0

}
 800dd04:	bf00      	nop
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr

0800dd0e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b082      	sub	sp, #8
 800dd12:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dd14:	2301      	movs	r3, #1
 800dd16:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dd18:	f000 f80c 	bl	800dd34 <BSP_PlatformIsDetected>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d101      	bne.n	800dd26 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dd22:	2300      	movs	r3, #0
 800dd24:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dd26:	79fb      	ldrb	r3, [r7, #7]
 800dd28:	b2db      	uxtb	r3, r3
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3708      	adds	r7, #8
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
	...

0800dd34 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dd3e:	2180      	movs	r1, #128	; 0x80
 800dd40:	4806      	ldr	r0, [pc, #24]	; (800dd5c <BSP_PlatformIsDetected+0x28>)
 800dd42:	f7f8 fda7 	bl	8006894 <HAL_GPIO_ReadPin>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d001      	beq.n	800dd50 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dd50:	79fb      	ldrb	r3, [r7, #7]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	40020800 	.word	0x40020800

0800dd60 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800dd68:	f7f6 ff62 	bl	8004c30 <HAL_GetTick>
 800dd6c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800dd6e:	e006      	b.n	800dd7e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd70:	f7ff ff8a 	bl	800dc88 <BSP_SD_GetCardState>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d101      	bne.n	800dd7e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	e009      	b.n	800dd92 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800dd7e:	f7f6 ff57 	bl	8004c30 <HAL_GetTick>
 800dd82:	4602      	mov	r2, r0
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	1ad3      	subs	r3, r2, r3
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d8f0      	bhi.n	800dd70 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dd8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3710      	adds	r7, #16
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
	...

0800dd9c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	4603      	mov	r3, r0
 800dda4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dda6:	4b0b      	ldr	r3, [pc, #44]	; (800ddd4 <SD_CheckStatus+0x38>)
 800dda8:	2201      	movs	r2, #1
 800ddaa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ddac:	f7ff ff6c 	bl	800dc88 <BSP_SD_GetCardState>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d107      	bne.n	800ddc6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ddb6:	4b07      	ldr	r3, [pc, #28]	; (800ddd4 <SD_CheckStatus+0x38>)
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	f023 0301 	bic.w	r3, r3, #1
 800ddc0:	b2da      	uxtb	r2, r3
 800ddc2:	4b04      	ldr	r3, [pc, #16]	; (800ddd4 <SD_CheckStatus+0x38>)
 800ddc4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ddc6:	4b03      	ldr	r3, [pc, #12]	; (800ddd4 <SD_CheckStatus+0x38>)
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	b2db      	uxtb	r3, r3
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3708      	adds	r7, #8
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	20000009 	.word	0x20000009

0800ddd8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	4603      	mov	r3, r0
 800dde0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dde2:	f7ff fef7 	bl	800dbd4 <BSP_SD_Init>
 800dde6:	4603      	mov	r3, r0
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d107      	bne.n	800ddfc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ddec:	79fb      	ldrb	r3, [r7, #7]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7ff ffd4 	bl	800dd9c <SD_CheckStatus>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	4b04      	ldr	r3, [pc, #16]	; (800de0c <SD_initialize+0x34>)
 800ddfa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ddfc:	4b03      	ldr	r3, [pc, #12]	; (800de0c <SD_initialize+0x34>)
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	b2db      	uxtb	r3, r3
}
 800de02:	4618      	mov	r0, r3
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	20000009 	.word	0x20000009

0800de10 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	4603      	mov	r3, r0
 800de18:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800de1a:	79fb      	ldrb	r3, [r7, #7]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7ff ffbd 	bl	800dd9c <SD_CheckStatus>
 800de22:	4603      	mov	r3, r0
}
 800de24:	4618      	mov	r0, r3
 800de26:	3708      	adds	r7, #8
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b086      	sub	sp, #24
 800de30:	af00      	add	r7, sp, #0
 800de32:	60b9      	str	r1, [r7, #8]
 800de34:	607a      	str	r2, [r7, #4]
 800de36:	603b      	str	r3, [r7, #0]
 800de38:	4603      	mov	r3, r0
 800de3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de3c:	2301      	movs	r3, #1
 800de3e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800de40:	f247 5030 	movw	r0, #30000	; 0x7530
 800de44:	f7ff ff8c 	bl	800dd60 <SD_CheckStatusWithTimeout>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	da01      	bge.n	800de52 <SD_read+0x26>
  {
    return res;
 800de4e:	7dfb      	ldrb	r3, [r7, #23]
 800de50:	e03b      	b.n	800deca <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	6879      	ldr	r1, [r7, #4]
 800de56:	68b8      	ldr	r0, [r7, #8]
 800de58:	f7ff fee2 	bl	800dc20 <BSP_SD_ReadBlocks_DMA>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d132      	bne.n	800dec8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800de62:	4b1c      	ldr	r3, [pc, #112]	; (800ded4 <SD_read+0xa8>)
 800de64:	2200      	movs	r2, #0
 800de66:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800de68:	f7f6 fee2 	bl	8004c30 <HAL_GetTick>
 800de6c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800de6e:	bf00      	nop
 800de70:	4b18      	ldr	r3, [pc, #96]	; (800ded4 <SD_read+0xa8>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d108      	bne.n	800de8a <SD_read+0x5e>
 800de78:	f7f6 feda 	bl	8004c30 <HAL_GetTick>
 800de7c:	4602      	mov	r2, r0
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	f247 522f 	movw	r2, #29999	; 0x752f
 800de86:	4293      	cmp	r3, r2
 800de88:	d9f2      	bls.n	800de70 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800de8a:	4b12      	ldr	r3, [pc, #72]	; (800ded4 <SD_read+0xa8>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d102      	bne.n	800de98 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	75fb      	strb	r3, [r7, #23]
 800de96:	e017      	b.n	800dec8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800de98:	4b0e      	ldr	r3, [pc, #56]	; (800ded4 <SD_read+0xa8>)
 800de9a:	2200      	movs	r2, #0
 800de9c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800de9e:	f7f6 fec7 	bl	8004c30 <HAL_GetTick>
 800dea2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dea4:	e007      	b.n	800deb6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dea6:	f7ff feef 	bl	800dc88 <BSP_SD_GetCardState>
 800deaa:	4603      	mov	r3, r0
 800deac:	2b00      	cmp	r3, #0
 800deae:	d102      	bne.n	800deb6 <SD_read+0x8a>
          {
            res = RES_OK;
 800deb0:	2300      	movs	r3, #0
 800deb2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800deb4:	e008      	b.n	800dec8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800deb6:	f7f6 febb 	bl	8004c30 <HAL_GetTick>
 800deba:	4602      	mov	r2, r0
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	1ad3      	subs	r3, r2, r3
 800dec0:	f247 522f 	movw	r2, #29999	; 0x752f
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d9ee      	bls.n	800dea6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800dec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800deca:	4618      	mov	r0, r3
 800decc:	3718      	adds	r7, #24
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	200001fc 	.word	0x200001fc

0800ded8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b086      	sub	sp, #24
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60b9      	str	r1, [r7, #8]
 800dee0:	607a      	str	r2, [r7, #4]
 800dee2:	603b      	str	r3, [r7, #0]
 800dee4:	4603      	mov	r3, r0
 800dee6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dee8:	2301      	movs	r3, #1
 800deea:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800deec:	4b24      	ldr	r3, [pc, #144]	; (800df80 <SD_write+0xa8>)
 800deee:	2200      	movs	r2, #0
 800def0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800def2:	f247 5030 	movw	r0, #30000	; 0x7530
 800def6:	f7ff ff33 	bl	800dd60 <SD_CheckStatusWithTimeout>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	da01      	bge.n	800df04 <SD_write+0x2c>
  {
    return res;
 800df00:	7dfb      	ldrb	r3, [r7, #23]
 800df02:	e038      	b.n	800df76 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800df04:	683a      	ldr	r2, [r7, #0]
 800df06:	6879      	ldr	r1, [r7, #4]
 800df08:	68b8      	ldr	r0, [r7, #8]
 800df0a:	f7ff fea3 	bl	800dc54 <BSP_SD_WriteBlocks_DMA>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d12f      	bne.n	800df74 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800df14:	f7f6 fe8c 	bl	8004c30 <HAL_GetTick>
 800df18:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800df1a:	bf00      	nop
 800df1c:	4b18      	ldr	r3, [pc, #96]	; (800df80 <SD_write+0xa8>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d108      	bne.n	800df36 <SD_write+0x5e>
 800df24:	f7f6 fe84 	bl	8004c30 <HAL_GetTick>
 800df28:	4602      	mov	r2, r0
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	1ad3      	subs	r3, r2, r3
 800df2e:	f247 522f 	movw	r2, #29999	; 0x752f
 800df32:	4293      	cmp	r3, r2
 800df34:	d9f2      	bls.n	800df1c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800df36:	4b12      	ldr	r3, [pc, #72]	; (800df80 <SD_write+0xa8>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d102      	bne.n	800df44 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800df3e:	2301      	movs	r3, #1
 800df40:	75fb      	strb	r3, [r7, #23]
 800df42:	e017      	b.n	800df74 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800df44:	4b0e      	ldr	r3, [pc, #56]	; (800df80 <SD_write+0xa8>)
 800df46:	2200      	movs	r2, #0
 800df48:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800df4a:	f7f6 fe71 	bl	8004c30 <HAL_GetTick>
 800df4e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800df50:	e007      	b.n	800df62 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800df52:	f7ff fe99 	bl	800dc88 <BSP_SD_GetCardState>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d102      	bne.n	800df62 <SD_write+0x8a>
          {
            res = RES_OK;
 800df5c:	2300      	movs	r3, #0
 800df5e:	75fb      	strb	r3, [r7, #23]
            break;
 800df60:	e008      	b.n	800df74 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800df62:	f7f6 fe65 	bl	8004c30 <HAL_GetTick>
 800df66:	4602      	mov	r2, r0
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	1ad3      	subs	r3, r2, r3
 800df6c:	f247 522f 	movw	r2, #29999	; 0x752f
 800df70:	4293      	cmp	r3, r2
 800df72:	d9ee      	bls.n	800df52 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800df74:	7dfb      	ldrb	r3, [r7, #23]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3718      	adds	r7, #24
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	200001f8 	.word	0x200001f8

0800df84 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b08c      	sub	sp, #48	; 0x30
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	603a      	str	r2, [r7, #0]
 800df8e:	71fb      	strb	r3, [r7, #7]
 800df90:	460b      	mov	r3, r1
 800df92:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800df94:	2301      	movs	r3, #1
 800df96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800df9a:	4b25      	ldr	r3, [pc, #148]	; (800e030 <SD_ioctl+0xac>)
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	f003 0301 	and.w	r3, r3, #1
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d001      	beq.n	800dfac <SD_ioctl+0x28>
 800dfa8:	2303      	movs	r3, #3
 800dfaa:	e03c      	b.n	800e026 <SD_ioctl+0xa2>

  switch (cmd)
 800dfac:	79bb      	ldrb	r3, [r7, #6]
 800dfae:	2b03      	cmp	r3, #3
 800dfb0:	d834      	bhi.n	800e01c <SD_ioctl+0x98>
 800dfb2:	a201      	add	r2, pc, #4	; (adr r2, 800dfb8 <SD_ioctl+0x34>)
 800dfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb8:	0800dfc9 	.word	0x0800dfc9
 800dfbc:	0800dfd1 	.word	0x0800dfd1
 800dfc0:	0800dfe9 	.word	0x0800dfe9
 800dfc4:	0800e003 	.word	0x0800e003
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dfce:	e028      	b.n	800e022 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dfd0:	f107 030c 	add.w	r3, r7, #12
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7ff fe67 	bl	800dca8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dfda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dfe6:	e01c      	b.n	800e022 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dfe8:	f107 030c 	add.w	r3, r7, #12
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7ff fe5b 	bl	800dca8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e000:	e00f      	b.n	800e022 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e002:	f107 030c 	add.w	r3, r7, #12
 800e006:	4618      	mov	r0, r3
 800e008:	f7ff fe4e 	bl	800dca8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00e:	0a5a      	lsrs	r2, r3, #9
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e014:	2300      	movs	r3, #0
 800e016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e01a:	e002      	b.n	800e022 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e01c:	2304      	movs	r3, #4
 800e01e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e026:	4618      	mov	r0, r3
 800e028:	3730      	adds	r7, #48	; 0x30
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	20000009 	.word	0x20000009

0800e034 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e034:	b480      	push	{r7}
 800e036:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e038:	4b03      	ldr	r3, [pc, #12]	; (800e048 <BSP_SD_WriteCpltCallback+0x14>)
 800e03a:	2201      	movs	r2, #1
 800e03c:	601a      	str	r2, [r3, #0]
}
 800e03e:	bf00      	nop
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr
 800e048:	200001f8 	.word	0x200001f8

0800e04c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e04c:	b480      	push	{r7}
 800e04e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e050:	4b03      	ldr	r3, [pc, #12]	; (800e060 <BSP_SD_ReadCpltCallback+0x14>)
 800e052:	2201      	movs	r2, #1
 800e054:	601a      	str	r2, [r3, #0]
}
 800e056:	bf00      	nop
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr
 800e060:	200001fc 	.word	0x200001fc

0800e064 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	460b      	mov	r3, r1
 800e06e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800e070:	f44f 701d 	mov.w	r0, #628	; 0x274
 800e074:	f005 ffc8 	bl	8014008 <USBD_static_malloc>
 800e078:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d105      	bne.n	800e08c <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e088:	2302      	movs	r3, #2
 800e08a:	e034      	b.n	800e0f6 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	68fa      	ldr	r2, [r7, #12]
 800e090:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	7c1b      	ldrb	r3, [r3, #16]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d115      	bne.n	800e0c8 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800e09c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0a0:	2202      	movs	r2, #2
 800e0a2:	2101      	movs	r1, #1
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f005 fe1e 	bl	8013ce6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800e0b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0b6:	2202      	movs	r2, #2
 800e0b8:	2181      	movs	r1, #129	; 0x81
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f005 fe13 	bl	8013ce6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	871a      	strh	r2, [r3, #56]	; 0x38
 800e0c6:	e012      	b.n	800e0ee <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800e0c8:	2340      	movs	r3, #64	; 0x40
 800e0ca:	2202      	movs	r2, #2
 800e0cc:	2101      	movs	r1, #1
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f005 fe09 	bl	8013ce6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800e0dc:	2340      	movs	r3, #64	; 0x40
 800e0de:	2202      	movs	r2, #2
 800e0e0:	2181      	movs	r1, #129	; 0x81
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f005 fdff 	bl	8013ce6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 f999 	bl	800e426 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800e0f4:	2300      	movs	r3, #0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b082      	sub	sp, #8
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	460b      	mov	r3, r1
 800e108:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800e10a:	2101      	movs	r1, #1
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f005 fe10 	bl	8013d32 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2200      	movs	r2, #0
 800e116:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800e11a:	2181      	movs	r1, #129	; 0x81
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f005 fe08 	bl	8013d32 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00c      	beq.n	800e14c <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f9d5 	bl	800e4e2 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e13e:	4618      	mov	r0, r3
 800e140:	f005 ff70 	bl	8014024 <USBD_static_free>
    pdev->pClassData = NULL;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2200      	movs	r2, #0
 800e148:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e14c:	2300      	movs	r3, #0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
	...

0800e158 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b086      	sub	sp, #24
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e168:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800e16a:	2300      	movs	r3, #0
 800e16c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800e16e:	2300      	movs	r3, #0
 800e170:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e178:	2303      	movs	r3, #3
 800e17a:	e0db      	b.n	800e334 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e184:	2b00      	cmp	r3, #0
 800e186:	d04e      	beq.n	800e226 <USBD_MSC_Setup+0xce>
 800e188:	2b20      	cmp	r3, #32
 800e18a:	f040 80cb 	bne.w	800e324 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	785b      	ldrb	r3, [r3, #1]
 800e192:	2bfe      	cmp	r3, #254	; 0xfe
 800e194:	d002      	beq.n	800e19c <USBD_MSC_Setup+0x44>
 800e196:	2bff      	cmp	r3, #255	; 0xff
 800e198:	d025      	beq.n	800e1e6 <USBD_MSC_Setup+0x8e>
 800e19a:	e03c      	b.n	800e216 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	885b      	ldrh	r3, [r3, #2]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d119      	bne.n	800e1d8 <USBD_MSC_Setup+0x80>
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	88db      	ldrh	r3, [r3, #6]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d115      	bne.n	800e1d8 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	da10      	bge.n	800e1d8 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1bc:	699b      	ldr	r3, [r3, #24]
 800e1be:	4798      	blx	r3
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f002 fe3d 	bl	8010e4e <USBD_CtlSendData>
 800e1d4:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e1d6:	e025      	b.n	800e224 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 800e1d8:	6839      	ldr	r1, [r7, #0]
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f002 fdc6 	bl	8010d6c <USBD_CtlError>
            ret = USBD_FAIL;
 800e1e0:	2303      	movs	r3, #3
 800e1e2:	75fb      	strb	r3, [r7, #23]
          break;
 800e1e4:	e01e      	b.n	800e224 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	885b      	ldrh	r3, [r3, #2]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d10c      	bne.n	800e208 <USBD_MSC_Setup+0xb0>
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	88db      	ldrh	r3, [r3, #6]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d108      	bne.n	800e208 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	db03      	blt.n	800e208 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f000 f948 	bl	800e496 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e206:	e00d      	b.n	800e224 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 800e208:	6839      	ldr	r1, [r7, #0]
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f002 fdae 	bl	8010d6c <USBD_CtlError>
            ret = USBD_FAIL;
 800e210:	2303      	movs	r3, #3
 800e212:	75fb      	strb	r3, [r7, #23]
          break;
 800e214:	e006      	b.n	800e224 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e216:	6839      	ldr	r1, [r7, #0]
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f002 fda7 	bl	8010d6c <USBD_CtlError>
          ret = USBD_FAIL;
 800e21e:	2303      	movs	r3, #3
 800e220:	75fb      	strb	r3, [r7, #23]
          break;
 800e222:	bf00      	nop
      }
      break;
 800e224:	e085      	b.n	800e332 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	785b      	ldrb	r3, [r3, #1]
 800e22a:	2b0b      	cmp	r3, #11
 800e22c:	d871      	bhi.n	800e312 <USBD_MSC_Setup+0x1ba>
 800e22e:	a201      	add	r2, pc, #4	; (adr r2, 800e234 <USBD_MSC_Setup+0xdc>)
 800e230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e234:	0800e265 	.word	0x0800e265
 800e238:	0800e2e1 	.word	0x0800e2e1
 800e23c:	0800e313 	.word	0x0800e313
 800e240:	0800e313 	.word	0x0800e313
 800e244:	0800e313 	.word	0x0800e313
 800e248:	0800e313 	.word	0x0800e313
 800e24c:	0800e313 	.word	0x0800e313
 800e250:	0800e313 	.word	0x0800e313
 800e254:	0800e313 	.word	0x0800e313
 800e258:	0800e313 	.word	0x0800e313
 800e25c:	0800e28f 	.word	0x0800e28f
 800e260:	0800e2b9 	.word	0x0800e2b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e26a:	b2db      	uxtb	r3, r3
 800e26c:	2b03      	cmp	r3, #3
 800e26e:	d107      	bne.n	800e280 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e270:	f107 030e 	add.w	r3, r7, #14
 800e274:	2202      	movs	r2, #2
 800e276:	4619      	mov	r1, r3
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f002 fde8 	bl	8010e4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e27e:	e050      	b.n	800e322 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800e280:	6839      	ldr	r1, [r7, #0]
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f002 fd72 	bl	8010d6c <USBD_CtlError>
            ret = USBD_FAIL;
 800e288:	2303      	movs	r3, #3
 800e28a:	75fb      	strb	r3, [r7, #23]
          break;
 800e28c:	e049      	b.n	800e322 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e294:	b2db      	uxtb	r3, r3
 800e296:	2b03      	cmp	r3, #3
 800e298:	d107      	bne.n	800e2aa <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	3304      	adds	r3, #4
 800e29e:	2201      	movs	r2, #1
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f002 fdd3 	bl	8010e4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2a8:	e03b      	b.n	800e322 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800e2aa:	6839      	ldr	r1, [r7, #0]
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f002 fd5d 	bl	8010d6c <USBD_CtlError>
            ret = USBD_FAIL;
 800e2b2:	2303      	movs	r3, #3
 800e2b4:	75fb      	strb	r3, [r7, #23]
          break;
 800e2b6:	e034      	b.n	800e322 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2b03      	cmp	r3, #3
 800e2c2:	d106      	bne.n	800e2d2 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	885b      	ldrh	r3, [r3, #2]
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2d0:	e027      	b.n	800e322 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800e2d2:	6839      	ldr	r1, [r7, #0]
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f002 fd49 	bl	8010d6c <USBD_CtlError>
            ret = USBD_FAIL;
 800e2da:	2303      	movs	r3, #3
 800e2dc:	75fb      	strb	r3, [r7, #23]
          break;
 800e2de:	e020      	b.n	800e322 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	2b03      	cmp	r3, #3
 800e2ea:	d119      	bne.n	800e320 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	885b      	ldrh	r3, [r3, #2]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d115      	bne.n	800e320 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	889b      	ldrh	r3, [r3, #4]
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f005 fd37 	bl	8013d70 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	889b      	ldrh	r3, [r3, #4]
 800e306:	b2db      	uxtb	r3, r3
 800e308:	4619      	mov	r1, r3
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fa82 	bl	800e814 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800e310:	e006      	b.n	800e320 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 800e312:	6839      	ldr	r1, [r7, #0]
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f002 fd29 	bl	8010d6c <USBD_CtlError>
          ret = USBD_FAIL;
 800e31a:	2303      	movs	r3, #3
 800e31c:	75fb      	strb	r3, [r7, #23]
          break;
 800e31e:	e000      	b.n	800e322 <USBD_MSC_Setup+0x1ca>
          break;
 800e320:	bf00      	nop
      }
      break;
 800e322:	e006      	b.n	800e332 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 800e324:	6839      	ldr	r1, [r7, #0]
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f002 fd20 	bl	8010d6c <USBD_CtlError>
      ret = USBD_FAIL;
 800e32c:	2303      	movs	r3, #3
 800e32e:	75fb      	strb	r3, [r7, #23]
      break;
 800e330:	bf00      	nop
  }

  return (uint8_t)ret;
 800e332:	7dfb      	ldrb	r3, [r7, #23]
}
 800e334:	4618      	mov	r0, r3
 800e336:	3718      	adds	r7, #24
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	460b      	mov	r3, r1
 800e346:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800e348:	78fb      	ldrb	r3, [r7, #3]
 800e34a:	4619      	mov	r1, r3
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 f8dc 	bl	800e50a <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800e352:	2300      	movs	r3, #0
}
 800e354:	4618      	mov	r0, r3
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	460b      	mov	r3, r1
 800e366:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800e368:	78fb      	ldrb	r3, [r7, #3]
 800e36a:	4619      	mov	r1, r3
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f000 f902 	bl	800e576 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800e372:	2300      	movs	r3, #0
}
 800e374:	4618      	mov	r0, r3
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2220      	movs	r2, #32
 800e388:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800e38a:	4b03      	ldr	r3, [pc, #12]	; (800e398 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr
 800e398:	20000044 	.word	0x20000044

0800e39c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2220      	movs	r2, #32
 800e3a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800e3aa:	4b03      	ldr	r3, [pc, #12]	; (800e3b8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	370c      	adds	r7, #12
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr
 800e3b8:	20000064 	.word	0x20000064

0800e3bc <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2220      	movs	r2, #32
 800e3c8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800e3ca:	4b03      	ldr	r3, [pc, #12]	; (800e3d8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr
 800e3d8:	20000084 	.word	0x20000084

0800e3dc <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	220a      	movs	r2, #10
 800e3e8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800e3ea:	4b03      	ldr	r3, [pc, #12]	; (800e3f8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr
 800e3f8:	200000a4 	.word	0x200000a4

0800e3fc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d101      	bne.n	800e410 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e40c:	2303      	movs	r3, #3
 800e40e:	e004      	b.n	800e41a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	683a      	ldr	r2, [r7, #0]
 800e414:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e418:	2300      	movs	r3, #0
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	370c      	adds	r7, #12
 800e41e:	46bd      	mov	sp, r7
 800e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e424:	4770      	bx	lr

0800e426 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800e426:	b580      	push	{r7, lr}
 800e428:	b084      	sub	sp, #16
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e434:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d028      	beq.n	800e48e <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2200      	movs	r2, #0
 800e446:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2200      	movs	r2, #0
 800e454:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2000      	movs	r0, #0
 800e46a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800e46c:	2101      	movs	r1, #1
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f005 fc7e 	bl	8013d70 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800e474:	2181      	movs	r1, #129	; 0x81
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f005 fc7a 	bl	8013d70 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e482:	231f      	movs	r3, #31
 800e484:	2101      	movs	r1, #1
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f005 fd3b 	bl	8013f02 <USBD_LL_PrepareReceive>
 800e48c:	e000      	b.n	800e490 <MSC_BOT_Init+0x6a>
    return;
 800e48e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800e490:	3710      	adds	r7, #16
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}

0800e496 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800e496:	b580      	push	{r7, lr}
 800e498:	b084      	sub	sp, #16
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4a4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d016      	beq.n	800e4da <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800e4b8:	2181      	movs	r1, #129	; 0x81
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f005 fc96 	bl	8013dec <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800e4c0:	2101      	movs	r1, #1
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f005 fc92 	bl	8013dec <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e4ce:	231f      	movs	r3, #31
 800e4d0:	2101      	movs	r1, #1
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f005 fd15 	bl	8013f02 <USBD_LL_PrepareReceive>
 800e4d8:	e000      	b.n	800e4dc <MSC_BOT_Reset+0x46>
    return;
 800e4da:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800e4dc:	3710      	adds	r7, #16
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}

0800e4e2 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800e4e2:	b480      	push	{r7}
 800e4e4:	b085      	sub	sp, #20
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4f0:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d002      	beq.n	800e4fe <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	721a      	strb	r2, [r3, #8]
  }
}
 800e4fe:	bf00      	nop
 800e500:	3714      	adds	r7, #20
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr

0800e50a <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b084      	sub	sp, #16
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	460b      	mov	r3, r1
 800e514:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e51c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d020      	beq.n	800e566 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	7a1b      	ldrb	r3, [r3, #8]
 800e528:	2b02      	cmp	r3, #2
 800e52a:	d005      	beq.n	800e538 <MSC_BOT_DataIn+0x2e>
 800e52c:	2b02      	cmp	r3, #2
 800e52e:	db1c      	blt.n	800e56a <MSC_BOT_DataIn+0x60>
 800e530:	3b03      	subs	r3, #3
 800e532:	2b01      	cmp	r3, #1
 800e534:	d819      	bhi.n	800e56a <MSC_BOT_DataIn+0x60>
 800e536:	e011      	b.n	800e55c <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e544:	461a      	mov	r2, r3
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 f992 	bl	800e870 <SCSI_ProcessCmd>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	da0d      	bge.n	800e56e <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e552:	2101      	movs	r1, #1
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f000 f8fb 	bl	800e750 <MSC_BOT_SendCSW>
      }
      break;
 800e55a:	e008      	b.n	800e56e <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e55c:	2100      	movs	r1, #0
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f000 f8f6 	bl	800e750 <MSC_BOT_SendCSW>
      break;
 800e564:	e004      	b.n	800e570 <MSC_BOT_DataIn+0x66>
    return;
 800e566:	bf00      	nop
 800e568:	e002      	b.n	800e570 <MSC_BOT_DataIn+0x66>

    default:
      break;
 800e56a:	bf00      	nop
 800e56c:	e000      	b.n	800e570 <MSC_BOT_DataIn+0x66>
      break;
 800e56e:	bf00      	nop
  }
}
 800e570:	3710      	adds	r7, #16
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}

0800e576 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e576:	b580      	push	{r7, lr}
 800e578:	b084      	sub	sp, #16
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
 800e57e:	460b      	mov	r3, r1
 800e580:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e588:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d01c      	beq.n	800e5ca <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	7a1b      	ldrb	r3, [r3, #8]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d002      	beq.n	800e59e <MSC_BOT_DataOut+0x28>
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d004      	beq.n	800e5a6 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800e59c:	e018      	b.n	800e5d0 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 f81a 	bl	800e5d8 <MSC_BOT_CBW_Decode>
      break;
 800e5a4:	e014      	b.n	800e5d0 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f000 f95b 	bl	800e870 <SCSI_ProcessCmd>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	da06      	bge.n	800e5ce <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e5c0:	2101      	movs	r1, #1
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 f8c4 	bl	800e750 <MSC_BOT_SendCSW>
      break;
 800e5c8:	e001      	b.n	800e5ce <MSC_BOT_DataOut+0x58>
    return;
 800e5ca:	bf00      	nop
 800e5cc:	e000      	b.n	800e5d0 <MSC_BOT_DataOut+0x5a>
      break;
 800e5ce:	bf00      	nop
  }
}
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
	...

0800e5d8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5e6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d077      	beq.n	800e6de <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e606:	2101      	movs	r1, #1
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f005 fc9b 	bl	8013f44 <USBD_LL_GetRxDataSize>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b1f      	cmp	r3, #31
 800e612:	d114      	bne.n	800e63e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e61a:	4a34      	ldr	r2, [pc, #208]	; (800e6ec <MSC_BOT_CBW_Decode+0x114>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d10e      	bne.n	800e63e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e626:	2b01      	cmp	r3, #1
 800e628:	d809      	bhi.n	800e63e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800e630:	2b00      	cmp	r3, #0
 800e632:	d004      	beq.n	800e63e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e63a:	2b10      	cmp	r3, #16
 800e63c:	d90e      	bls.n	800e65c <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e644:	2320      	movs	r3, #32
 800e646:	2205      	movs	r2, #5
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 fdbc 	bl	800f1c6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2202      	movs	r2, #2
 800e652:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f000 f8ab 	bl	800e7b0 <MSC_BOT_Abort>
 800e65a:	e043      	b.n	800e6e4 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e668:	461a      	mov	r2, r3
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 f900 	bl	800e870 <SCSI_ProcessCmd>
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	da0c      	bge.n	800e690 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	7a1b      	ldrb	r3, [r3, #8]
 800e67a:	2b05      	cmp	r3, #5
 800e67c:	d104      	bne.n	800e688 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e67e:	2101      	movs	r1, #1
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 f865 	bl	800e750 <MSC_BOT_SendCSW>
 800e686:	e02d      	b.n	800e6e4 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 f891 	bl	800e7b0 <MSC_BOT_Abort>
 800e68e:	e029      	b.n	800e6e4 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	7a1b      	ldrb	r3, [r3, #8]
 800e694:	2b02      	cmp	r3, #2
 800e696:	d024      	beq.n	800e6e2 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d020      	beq.n	800e6e2 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e6a4:	2b03      	cmp	r3, #3
 800e6a6:	d01c      	beq.n	800e6e2 <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d009      	beq.n	800e6c4 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f103 0110 	add.w	r1, r3, #16
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 f817 	bl	800e6f0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800e6c2:	e00f      	b.n	800e6e4 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d104      	bne.n	800e6d6 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e6cc:	2100      	movs	r1, #0
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 f83e 	bl	800e750 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800e6d4:	e006      	b.n	800e6e4 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 f86a 	bl	800e7b0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800e6dc:	e002      	b.n	800e6e4 <MSC_BOT_CBW_Decode+0x10c>
    return;
 800e6de:	bf00      	nop
 800e6e0:	e000      	b.n	800e6e4 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 800e6e2:	bf00      	nop
    }
  }
}
 800e6e4:	3710      	adds	r7, #16
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	43425355 	.word	0x43425355

0800e6f0 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b086      	sub	sp, #24
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e702:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e70a:	687a      	ldr	r2, [r7, #4]
 800e70c:	4293      	cmp	r3, r2
 800e70e:	bf28      	it	cs
 800e710:	4613      	movcs	r3, r2
 800e712:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d015      	beq.n	800e746 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	1ad2      	subs	r2, r2, r3
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	2200      	movs	r2, #0
 800e72e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	2204      	movs	r2, #4
 800e736:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	2181      	movs	r1, #129	; 0x81
 800e73e:	68f8      	ldr	r0, [r7, #12]
 800e740:	f005 fbbe 	bl	8013ec0 <USBD_LL_Transmit>
 800e744:	e000      	b.n	800e748 <MSC_BOT_SendData+0x58>
    return;
 800e746:	bf00      	nop
}
 800e748:	3718      	adds	r7, #24
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
	...

0800e750 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	460b      	mov	r3, r1
 800e75a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e762:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d01b      	beq.n	800e7a2 <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	4a0f      	ldr	r2, [pc, #60]	; (800e7ac <MSC_BOT_SendCSW+0x5c>)
 800e76e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	78fa      	ldrb	r2, [r7, #3]
 800e776:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2200      	movs	r2, #0
 800e77e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800e786:	230d      	movs	r3, #13
 800e788:	2181      	movs	r1, #129	; 0x81
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f005 fb98 	bl	8013ec0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e796:	231f      	movs	r3, #31
 800e798:	2101      	movs	r1, #1
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f005 fbb1 	bl	8013f02 <USBD_LL_PrepareReceive>
 800e7a0:	e000      	b.n	800e7a4 <MSC_BOT_SendCSW+0x54>
    return;
 800e7a2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	53425355 	.word	0x53425355

0800e7b0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7be:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d022      	beq.n	800e80c <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d10c      	bne.n	800e7ea <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d007      	beq.n	800e7ea <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d103      	bne.n	800e7ea <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e7e2:	2101      	movs	r1, #1
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f005 fae2 	bl	8013dae <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e7ea:	2181      	movs	r1, #129	; 0x81
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f005 fade 	bl	8013dae <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	7a5b      	ldrb	r3, [r3, #9]
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	d109      	bne.n	800e80e <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e7fa:	2181      	movs	r1, #129	; 0x81
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f005 fad6 	bl	8013dae <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e802:	2101      	movs	r1, #1
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f005 fad2 	bl	8013dae <USBD_LL_StallEP>
 800e80a:	e000      	b.n	800e80e <MSC_BOT_Abort+0x5e>
    return;
 800e80c:	bf00      	nop
  }
}
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	460b      	mov	r3, r1
 800e81e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e826:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d019      	beq.n	800e862 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	7a5b      	ldrb	r3, [r3, #9]
 800e832:	2b02      	cmp	r3, #2
 800e834:	d108      	bne.n	800e848 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e836:	2181      	movs	r1, #129	; 0x81
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f005 fab8 	bl	8013dae <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e83e:	2101      	movs	r1, #1
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f005 fab4 	bl	8013dae <USBD_LL_StallEP>
 800e846:	e00f      	b.n	800e868 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	da0a      	bge.n	800e866 <MSC_BOT_CplClrFeature+0x52>
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	7a5b      	ldrb	r3, [r3, #9]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d006      	beq.n	800e866 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e858:	2101      	movs	r1, #1
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7ff ff78 	bl	800e750 <MSC_BOT_SendCSW>
 800e860:	e002      	b.n	800e868 <MSC_BOT_CplClrFeature+0x54>
    return;
 800e862:	bf00      	nop
 800e864:	e000      	b.n	800e868 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 800e866:	bf00      	nop
  }
}
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
	...

0800e870 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b086      	sub	sp, #24
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	460b      	mov	r3, r1
 800e87a:	607a      	str	r2, [r7, #4]
 800e87c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e884:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d102      	bne.n	800e892 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 800e88c:	f04f 33ff 	mov.w	r3, #4294967295
 800e890:	e168      	b.n	800eb64 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	2baa      	cmp	r3, #170	; 0xaa
 800e898:	f000 8144 	beq.w	800eb24 <SCSI_ProcessCmd+0x2b4>
 800e89c:	2baa      	cmp	r3, #170	; 0xaa
 800e89e:	f300 8153 	bgt.w	800eb48 <SCSI_ProcessCmd+0x2d8>
 800e8a2:	2ba8      	cmp	r3, #168	; 0xa8
 800e8a4:	f000 812c 	beq.w	800eb00 <SCSI_ProcessCmd+0x290>
 800e8a8:	2ba8      	cmp	r3, #168	; 0xa8
 800e8aa:	f300 814d 	bgt.w	800eb48 <SCSI_ProcessCmd+0x2d8>
 800e8ae:	2b5a      	cmp	r3, #90	; 0x5a
 800e8b0:	f300 80c0 	bgt.w	800ea34 <SCSI_ProcessCmd+0x1c4>
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f2c0 8147 	blt.w	800eb48 <SCSI_ProcessCmd+0x2d8>
 800e8ba:	2b5a      	cmp	r3, #90	; 0x5a
 800e8bc:	f200 8144 	bhi.w	800eb48 <SCSI_ProcessCmd+0x2d8>
 800e8c0:	a201      	add	r2, pc, #4	; (adr r2, 800e8c8 <SCSI_ProcessCmd+0x58>)
 800e8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c6:	bf00      	nop
 800e8c8:	0800ea3b 	.word	0x0800ea3b
 800e8cc:	0800eb49 	.word	0x0800eb49
 800e8d0:	0800eb49 	.word	0x0800eb49
 800e8d4:	0800ea4d 	.word	0x0800ea4d
 800e8d8:	0800eb49 	.word	0x0800eb49
 800e8dc:	0800eb49 	.word	0x0800eb49
 800e8e0:	0800eb49 	.word	0x0800eb49
 800e8e4:	0800eb49 	.word	0x0800eb49
 800e8e8:	0800eb49 	.word	0x0800eb49
 800e8ec:	0800eb49 	.word	0x0800eb49
 800e8f0:	0800eb49 	.word	0x0800eb49
 800e8f4:	0800eb49 	.word	0x0800eb49
 800e8f8:	0800eb49 	.word	0x0800eb49
 800e8fc:	0800eb49 	.word	0x0800eb49
 800e900:	0800eb49 	.word	0x0800eb49
 800e904:	0800eb49 	.word	0x0800eb49
 800e908:	0800eb49 	.word	0x0800eb49
 800e90c:	0800eb49 	.word	0x0800eb49
 800e910:	0800ea5f 	.word	0x0800ea5f
 800e914:	0800eb49 	.word	0x0800eb49
 800e918:	0800eb49 	.word	0x0800eb49
 800e91c:	0800eb49 	.word	0x0800eb49
 800e920:	0800eb49 	.word	0x0800eb49
 800e924:	0800eb49 	.word	0x0800eb49
 800e928:	0800eb49 	.word	0x0800eb49
 800e92c:	0800eb49 	.word	0x0800eb49
 800e930:	0800ea95 	.word	0x0800ea95
 800e934:	0800ea71 	.word	0x0800ea71
 800e938:	0800eb49 	.word	0x0800eb49
 800e93c:	0800eb49 	.word	0x0800eb49
 800e940:	0800ea83 	.word	0x0800ea83
 800e944:	0800eb49 	.word	0x0800eb49
 800e948:	0800eb49 	.word	0x0800eb49
 800e94c:	0800eb49 	.word	0x0800eb49
 800e950:	0800eb49 	.word	0x0800eb49
 800e954:	0800eab9 	.word	0x0800eab9
 800e958:	0800eb49 	.word	0x0800eb49
 800e95c:	0800eacb 	.word	0x0800eacb
 800e960:	0800eb49 	.word	0x0800eb49
 800e964:	0800eb49 	.word	0x0800eb49
 800e968:	0800eaef 	.word	0x0800eaef
 800e96c:	0800eb49 	.word	0x0800eb49
 800e970:	0800eb13 	.word	0x0800eb13
 800e974:	0800eb49 	.word	0x0800eb49
 800e978:	0800eb49 	.word	0x0800eb49
 800e97c:	0800eb49 	.word	0x0800eb49
 800e980:	0800eb49 	.word	0x0800eb49
 800e984:	0800eb37 	.word	0x0800eb37
 800e988:	0800eb49 	.word	0x0800eb49
 800e98c:	0800eb49 	.word	0x0800eb49
 800e990:	0800eb49 	.word	0x0800eb49
 800e994:	0800eb49 	.word	0x0800eb49
 800e998:	0800eb49 	.word	0x0800eb49
 800e99c:	0800eb49 	.word	0x0800eb49
 800e9a0:	0800eb49 	.word	0x0800eb49
 800e9a4:	0800eb49 	.word	0x0800eb49
 800e9a8:	0800eb49 	.word	0x0800eb49
 800e9ac:	0800eb49 	.word	0x0800eb49
 800e9b0:	0800eb49 	.word	0x0800eb49
 800e9b4:	0800eb49 	.word	0x0800eb49
 800e9b8:	0800eb49 	.word	0x0800eb49
 800e9bc:	0800eb49 	.word	0x0800eb49
 800e9c0:	0800eb49 	.word	0x0800eb49
 800e9c4:	0800eb49 	.word	0x0800eb49
 800e9c8:	0800eb49 	.word	0x0800eb49
 800e9cc:	0800eb49 	.word	0x0800eb49
 800e9d0:	0800eb49 	.word	0x0800eb49
 800e9d4:	0800eb49 	.word	0x0800eb49
 800e9d8:	0800eb49 	.word	0x0800eb49
 800e9dc:	0800eb49 	.word	0x0800eb49
 800e9e0:	0800eb49 	.word	0x0800eb49
 800e9e4:	0800eb49 	.word	0x0800eb49
 800e9e8:	0800eb49 	.word	0x0800eb49
 800e9ec:	0800eb49 	.word	0x0800eb49
 800e9f0:	0800eb49 	.word	0x0800eb49
 800e9f4:	0800eb49 	.word	0x0800eb49
 800e9f8:	0800eb49 	.word	0x0800eb49
 800e9fc:	0800eb49 	.word	0x0800eb49
 800ea00:	0800eb49 	.word	0x0800eb49
 800ea04:	0800eb49 	.word	0x0800eb49
 800ea08:	0800eb49 	.word	0x0800eb49
 800ea0c:	0800eb49 	.word	0x0800eb49
 800ea10:	0800eb49 	.word	0x0800eb49
 800ea14:	0800eb49 	.word	0x0800eb49
 800ea18:	0800eb49 	.word	0x0800eb49
 800ea1c:	0800eb49 	.word	0x0800eb49
 800ea20:	0800eb49 	.word	0x0800eb49
 800ea24:	0800eb49 	.word	0x0800eb49
 800ea28:	0800eb49 	.word	0x0800eb49
 800ea2c:	0800eb49 	.word	0x0800eb49
 800ea30:	0800eaa7 	.word	0x0800eaa7
 800ea34:	2b9e      	cmp	r3, #158	; 0x9e
 800ea36:	d051      	beq.n	800eadc <SCSI_ProcessCmd+0x26c>
 800ea38:	e086      	b.n	800eb48 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800ea3a:	7afb      	ldrb	r3, [r7, #11]
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	4619      	mov	r1, r3
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f000 f893 	bl	800eb6c <SCSI_TestUnitReady>
 800ea46:	4603      	mov	r3, r0
 800ea48:	75fb      	strb	r3, [r7, #23]
      break;
 800ea4a:	e089      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800ea4c:	7afb      	ldrb	r3, [r7, #11]
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	4619      	mov	r1, r3
 800ea52:	68f8      	ldr	r0, [r7, #12]
 800ea54:	f000 fb38 	bl	800f0c8 <SCSI_RequestSense>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ea5c:	e080      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800ea5e:	7afb      	ldrb	r3, [r7, #11]
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	4619      	mov	r1, r3
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f000 f8d1 	bl	800ec0c <SCSI_Inquiry>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ea6e:	e077      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800ea70:	7afb      	ldrb	r3, [r7, #11]
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	4619      	mov	r1, r3
 800ea76:	68f8      	ldr	r0, [r7, #12]
 800ea78:	f000 fbec 	bl	800f254 <SCSI_StartStopUnit>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	75fb      	strb	r3, [r7, #23]
      break;
 800ea80:	e06e      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800ea82:	7afb      	ldrb	r3, [r7, #11]
 800ea84:	687a      	ldr	r2, [r7, #4]
 800ea86:	4619      	mov	r1, r3
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f000 fc34 	bl	800f2f6 <SCSI_AllowPreventRemovable>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	75fb      	strb	r3, [r7, #23]
      break;
 800ea92:	e065      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800ea94:	7afb      	ldrb	r3, [r7, #11]
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	4619      	mov	r1, r3
 800ea9a:	68f8      	ldr	r0, [r7, #12]
 800ea9c:	f000 fabc 	bl	800f018 <SCSI_ModeSense6>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	75fb      	strb	r3, [r7, #23]
      break;
 800eaa4:	e05c      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800eaa6:	7afb      	ldrb	r3, [r7, #11]
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	4619      	mov	r1, r3
 800eaac:	68f8      	ldr	r0, [r7, #12]
 800eaae:	f000 fadf 	bl	800f070 <SCSI_ModeSense10>
 800eab2:	4603      	mov	r3, r0
 800eab4:	75fb      	strb	r3, [r7, #23]
      break;
 800eab6:	e053      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800eab8:	7afb      	ldrb	r3, [r7, #11]
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	4619      	mov	r1, r3
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f000 fa37 	bl	800ef32 <SCSI_ReadFormatCapacity>
 800eac4:	4603      	mov	r3, r0
 800eac6:	75fb      	strb	r3, [r7, #23]
      break;
 800eac8:	e04a      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800eaca:	7afb      	ldrb	r3, [r7, #11]
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	4619      	mov	r1, r3
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f000 f90f 	bl	800ecf4 <SCSI_ReadCapacity10>
 800ead6:	4603      	mov	r3, r0
 800ead8:	75fb      	strb	r3, [r7, #23]
      break;
 800eada:	e041      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800eadc:	7afb      	ldrb	r3, [r7, #11]
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	4619      	mov	r1, r3
 800eae2:	68f8      	ldr	r0, [r7, #12]
 800eae4:	f000 f97b 	bl	800edde <SCSI_ReadCapacity16>
 800eae8:	4603      	mov	r3, r0
 800eaea:	75fb      	strb	r3, [r7, #23]
      break;
 800eaec:	e038      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800eaee:	7afb      	ldrb	r3, [r7, #11]
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	68f8      	ldr	r0, [r7, #12]
 800eaf6:	f000 fc27 	bl	800f348 <SCSI_Read10>
 800eafa:	4603      	mov	r3, r0
 800eafc:	75fb      	strb	r3, [r7, #23]
      break;
 800eafe:	e02f      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800eb00:	7afb      	ldrb	r3, [r7, #11]
 800eb02:	687a      	ldr	r2, [r7, #4]
 800eb04:	4619      	mov	r1, r3
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f000 fcbe 	bl	800f488 <SCSI_Read12>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	75fb      	strb	r3, [r7, #23]
      break;
 800eb10:	e026      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800eb12:	7afb      	ldrb	r3, [r7, #11]
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	4619      	mov	r1, r3
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	f000 fd60 	bl	800f5de <SCSI_Write10>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	75fb      	strb	r3, [r7, #23]
      break;
 800eb22:	e01d      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800eb24:	7afb      	ldrb	r3, [r7, #11]
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f000 fe1c 	bl	800f768 <SCSI_Write12>
 800eb30:	4603      	mov	r3, r0
 800eb32:	75fb      	strb	r3, [r7, #23]
      break;
 800eb34:	e014      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800eb36:	7afb      	ldrb	r3, [r7, #11]
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f000 fee8 	bl	800f912 <SCSI_Verify10>
 800eb42:	4603      	mov	r3, r0
 800eb44:	75fb      	strb	r3, [r7, #23]
      break;
 800eb46:	e00b      	b.n	800eb60 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800eb48:	7af9      	ldrb	r1, [r7, #11]
 800eb4a:	2320      	movs	r3, #32
 800eb4c:	2205      	movs	r2, #5
 800eb4e:	68f8      	ldr	r0, [r7, #12]
 800eb50:	f000 fb39 	bl	800f1c6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	2202      	movs	r2, #2
 800eb58:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800eb5a:	23ff      	movs	r3, #255	; 0xff
 800eb5c:	75fb      	strb	r3, [r7, #23]
      break;
 800eb5e:	bf00      	nop
  }

  return ret;
 800eb60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3718      	adds	r7, #24
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b086      	sub	sp, #24
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	460b      	mov	r3, r1
 800eb76:	607a      	str	r2, [r7, #4]
 800eb78:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb80:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d102      	bne.n	800eb8e <SCSI_TestUnitReady+0x22>
  {
    return -1;
 800eb88:	f04f 33ff 	mov.w	r3, #4294967295
 800eb8c:	e03a      	b.n	800ec04 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d00a      	beq.n	800ebae <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eb9e:	2320      	movs	r3, #32
 800eba0:	2205      	movs	r2, #5
 800eba2:	68f8      	ldr	r0, [r7, #12]
 800eba4:	f000 fb0f 	bl	800f1c6 <SCSI_SenseCode>

    return -1;
 800eba8:	f04f 33ff 	mov.w	r3, #4294967295
 800ebac:	e02a      	b.n	800ec04 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ebb4:	2b02      	cmp	r3, #2
 800ebb6:	d10b      	bne.n	800ebd0 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ebb8:	7af9      	ldrb	r1, [r7, #11]
 800ebba:	233a      	movs	r3, #58	; 0x3a
 800ebbc:	2202      	movs	r2, #2
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f000 fb01 	bl	800f1c6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	2205      	movs	r2, #5
 800ebc8:	721a      	strb	r2, [r3, #8]
    return -1;
 800ebca:	f04f 33ff 	mov.w	r3, #4294967295
 800ebce:	e019      	b.n	800ec04 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	7afa      	ldrb	r2, [r7, #11]
 800ebda:	4610      	mov	r0, r2
 800ebdc:	4798      	blx	r3
 800ebde:	4603      	mov	r3, r0
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00b      	beq.n	800ebfc <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ebe4:	7af9      	ldrb	r1, [r7, #11]
 800ebe6:	233a      	movs	r3, #58	; 0x3a
 800ebe8:	2202      	movs	r2, #2
 800ebea:	68f8      	ldr	r0, [r7, #12]
 800ebec:	f000 faeb 	bl	800f1c6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	2205      	movs	r2, #5
 800ebf4:	721a      	strb	r2, [r3, #8]

    return -1;
 800ebf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebfa:	e003      	b.n	800ec04 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	60da      	str	r2, [r3, #12]

  return 0;
 800ec02:	2300      	movs	r3, #0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3718      	adds	r7, #24
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b088      	sub	sp, #32
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	460b      	mov	r3, r1
 800ec16:	607a      	str	r2, [r7, #4]
 800ec18:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec20:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800ec22:	69bb      	ldr	r3, [r7, #24]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d102      	bne.n	800ec2e <SCSI_Inquiry+0x22>
  {
    return -1;
 800ec28:	f04f 33ff 	mov.w	r3, #4294967295
 800ec2c:	e05a      	b.n	800ece4 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800ec2e:	69bb      	ldr	r3, [r7, #24]
 800ec30:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d10a      	bne.n	800ec4e <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ec38:	69bb      	ldr	r3, [r7, #24]
 800ec3a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ec3e:	2320      	movs	r3, #32
 800ec40:	2205      	movs	r2, #5
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	f000 fabf 	bl	800f1c6 <SCSI_SenseCode>
    return -1;
 800ec48:	f04f 33ff 	mov.w	r3, #4294967295
 800ec4c:	e04a      	b.n	800ece4 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	3301      	adds	r3, #1
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	f003 0301 	and.w	r3, r3, #1
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d020      	beq.n	800ec9e <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	3302      	adds	r3, #2
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d105      	bne.n	800ec72 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800ec66:	2206      	movs	r2, #6
 800ec68:	4920      	ldr	r1, [pc, #128]	; (800ecec <SCSI_Inquiry+0xe0>)
 800ec6a:	69b8      	ldr	r0, [r7, #24]
 800ec6c:	f000 ffb4 	bl	800fbd8 <SCSI_UpdateBotData>
 800ec70:	e037      	b.n	800ece2 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	3302      	adds	r3, #2
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	2b80      	cmp	r3, #128	; 0x80
 800ec7a:	d105      	bne.n	800ec88 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800ec7c:	2208      	movs	r2, #8
 800ec7e:	491c      	ldr	r1, [pc, #112]	; (800ecf0 <SCSI_Inquiry+0xe4>)
 800ec80:	69b8      	ldr	r0, [r7, #24]
 800ec82:	f000 ffa9 	bl	800fbd8 <SCSI_UpdateBotData>
 800ec86:	e02c      	b.n	800ece2 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ec8e:	2324      	movs	r3, #36	; 0x24
 800ec90:	2205      	movs	r2, #5
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	f000 fa97 	bl	800f1c6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800ec98:	f04f 33ff 	mov.w	r3, #4294967295
 800ec9c:	e022      	b.n	800ece4 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eca4:	69d9      	ldr	r1, [r3, #28]
 800eca6:	7afa      	ldrb	r2, [r7, #11]
 800eca8:	4613      	mov	r3, r2
 800ecaa:	00db      	lsls	r3, r3, #3
 800ecac:	4413      	add	r3, r2
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	440b      	add	r3, r1
 800ecb2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	3305      	adds	r3, #5
 800ecbe:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	3304      	adds	r3, #4
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	8bfa      	ldrh	r2, [r7, #30]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d303      	bcc.n	800ecd6 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	3304      	adds	r3, #4
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800ecd6:	8bfb      	ldrh	r3, [r7, #30]
 800ecd8:	461a      	mov	r2, r3
 800ecda:	6979      	ldr	r1, [r7, #20]
 800ecdc:	69b8      	ldr	r0, [r7, #24]
 800ecde:	f000 ff7b 	bl	800fbd8 <SCSI_UpdateBotData>
  }

  return 0;
 800ece2:	2300      	movs	r3, #0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3720      	adds	r7, #32
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	200000b0 	.word	0x200000b0
 800ecf0:	200000b8 	.word	0x200000b8

0800ecf4 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b086      	sub	sp, #24
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	607a      	str	r2, [r7, #4]
 800ed00:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d102      	bne.n	800ed16 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 800ed10:	f04f 33ff 	mov.w	r3, #4294967295
 800ed14:	e05f      	b.n	800edd6 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	697a      	ldr	r2, [r7, #20]
 800ed20:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800ed24:	697a      	ldr	r2, [r7, #20]
 800ed26:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800ed2a:	7af8      	ldrb	r0, [r7, #11]
 800ed2c:	4798      	blx	r3
 800ed2e:	4603      	mov	r3, r0
 800ed30:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800ed32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d104      	bne.n	800ed44 <SCSI_ReadCapacity10+0x50>
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	d108      	bne.n	800ed56 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ed44:	7af9      	ldrb	r1, [r7, #11]
 800ed46:	233a      	movs	r3, #58	; 0x3a
 800ed48:	2202      	movs	r2, #2
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f000 fa3b 	bl	800f1c6 <SCSI_SenseCode>
    return -1;
 800ed50:	f04f 33ff 	mov.w	r3, #4294967295
 800ed54:	e03f      	b.n	800edd6 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	0e1b      	lsrs	r3, r3, #24
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	0c1b      	lsrs	r3, r3, #16
 800ed70:	b2da      	uxtb	r2, r3
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	0a1b      	lsrs	r3, r3, #8
 800ed80:	b2da      	uxtb	r2, r3
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	3b01      	subs	r3, #1
 800ed90:	b2da      	uxtb	r2, r3
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ed9c:	161b      	asrs	r3, r3, #24
 800ed9e:	b2da      	uxtb	r2, r3
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800edaa:	141b      	asrs	r3, r3, #16
 800edac:	b2da      	uxtb	r2, r3
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800edb8:	0a1b      	lsrs	r3, r3, #8
 800edba:	b29b      	uxth	r3, r3
 800edbc:	b2da      	uxtb	r2, r3
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800edc8:	b2da      	uxtb	r2, r3
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	2208      	movs	r2, #8
 800edd2:	60da      	str	r2, [r3, #12]

  return 0;
 800edd4:	2300      	movs	r3, #0

}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3718      	adds	r7, #24
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b088      	sub	sp, #32
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	60f8      	str	r0, [r7, #12]
 800ede6:	460b      	mov	r3, r1
 800ede8:	607a      	str	r2, [r7, #4]
 800edea:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edf2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d102      	bne.n	800ee00 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 800edfa:	f04f 33ff 	mov.w	r3, #4294967295
 800edfe:	e094      	b.n	800ef2a <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	69ba      	ldr	r2, [r7, #24]
 800ee0a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800ee0e:	69ba      	ldr	r2, [r7, #24]
 800ee10:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800ee14:	7af8      	ldrb	r0, [r7, #11]
 800ee16:	4798      	blx	r3
 800ee18:	4603      	mov	r3, r0
 800ee1a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800ee1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d104      	bne.n	800ee2e <SCSI_ReadCapacity16+0x50>
 800ee24:	69bb      	ldr	r3, [r7, #24]
 800ee26:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ee2a:	2b02      	cmp	r3, #2
 800ee2c:	d108      	bne.n	800ee40 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ee2e:	7af9      	ldrb	r1, [r7, #11]
 800ee30:	233a      	movs	r3, #58	; 0x3a
 800ee32:	2202      	movs	r2, #2
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f000 f9c6 	bl	800f1c6 <SCSI_SenseCode>
    return -1;
 800ee3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee3e:	e074      	b.n	800ef2a <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	330a      	adds	r3, #10
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	330b      	adds	r3, #11
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ee50:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	330c      	adds	r3, #12
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800ee5a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	320d      	adds	r2, #13
 800ee60:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800ee62:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800ee68:	2300      	movs	r3, #0
 800ee6a:	77fb      	strb	r3, [r7, #31]
 800ee6c:	e007      	b.n	800ee7e <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 800ee6e:	7ffb      	ldrb	r3, [r7, #31]
 800ee70:	69ba      	ldr	r2, [r7, #24]
 800ee72:	4413      	add	r3, r2
 800ee74:	2200      	movs	r2, #0
 800ee76:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800ee78:	7ffb      	ldrb	r3, [r7, #31]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	77fb      	strb	r3, [r7, #31]
 800ee7e:	7ffa      	ldrb	r2, [r7, #31]
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	68db      	ldr	r3, [r3, #12]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d3f2      	bcc.n	800ee6e <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ee8e:	3b01      	subs	r3, #1
 800ee90:	0e1b      	lsrs	r3, r3, #24
 800ee92:	b2da      	uxtb	r2, r3
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ee9e:	3b01      	subs	r3, #1
 800eea0:	0c1b      	lsrs	r3, r3, #16
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800eeae:	3b01      	subs	r3, #1
 800eeb0:	0a1b      	lsrs	r3, r3, #8
 800eeb2:	b2da      	uxtb	r2, r3
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800eebe:	b2db      	uxtb	r3, r3
 800eec0:	3b01      	subs	r3, #1
 800eec2:	b2da      	uxtb	r2, r3
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800eece:	161b      	asrs	r3, r3, #24
 800eed0:	b2da      	uxtb	r2, r3
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800eedc:	141b      	asrs	r3, r3, #16
 800eede:	b2da      	uxtb	r2, r3
 800eee0:	69bb      	ldr	r3, [r7, #24]
 800eee2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800eee4:	69bb      	ldr	r3, [r7, #24]
 800eee6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800eeea:	0a1b      	lsrs	r3, r3, #8
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	b2da      	uxtb	r2, r3
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800eef4:	69bb      	ldr	r3, [r7, #24]
 800eef6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800eefa:	b2da      	uxtb	r2, r3
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	330a      	adds	r3, #10
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	330b      	adds	r3, #11
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ef10:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	330c      	adds	r3, #12
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800ef1a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	320d      	adds	r2, #13
 800ef20:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800ef22:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	60da      	str	r2, [r3, #12]

  return 0;
 800ef28:	2300      	movs	r3, #0
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3720      	adds	r7, #32
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b088      	sub	sp, #32
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	60f8      	str	r0, [r7, #12]
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	607a      	str	r2, [r7, #4]
 800ef3e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef46:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d102      	bne.n	800ef54 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 800ef4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef52:	e05c      	b.n	800f00e <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	f107 0214 	add.w	r2, r7, #20
 800ef60:	f107 0110 	add.w	r1, r7, #16
 800ef64:	7af8      	ldrb	r0, [r7, #11]
 800ef66:	4798      	blx	r3
 800ef68:	4603      	mov	r3, r0
 800ef6a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800ef6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d104      	bne.n	800ef7e <SCSI_ReadFormatCapacity+0x4c>
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ef7a:	2b02      	cmp	r3, #2
 800ef7c:	d108      	bne.n	800ef90 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ef7e:	7af9      	ldrb	r1, [r7, #11]
 800ef80:	233a      	movs	r3, #58	; 0x3a
 800ef82:	2202      	movs	r2, #2
 800ef84:	68f8      	ldr	r0, [r7, #12]
 800ef86:	f000 f91e 	bl	800f1c6 <SCSI_SenseCode>
    return -1;
 800ef8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef8e:	e03e      	b.n	800f00e <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 800ef90:	2300      	movs	r3, #0
 800ef92:	83fb      	strh	r3, [r7, #30]
 800ef94:	e007      	b.n	800efa6 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 800ef96:	8bfb      	ldrh	r3, [r7, #30]
 800ef98:	69ba      	ldr	r2, [r7, #24]
 800ef9a:	4413      	add	r3, r2
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800efa0:	8bfb      	ldrh	r3, [r7, #30]
 800efa2:	3301      	adds	r3, #1
 800efa4:	83fb      	strh	r3, [r7, #30]
 800efa6:	8bfb      	ldrh	r3, [r7, #30]
 800efa8:	2b0b      	cmp	r3, #11
 800efaa:	d9f4      	bls.n	800ef96 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	2208      	movs	r2, #8
 800efb0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	3b01      	subs	r3, #1
 800efb6:	0e1b      	lsrs	r3, r3, #24
 800efb8:	b2da      	uxtb	r2, r3
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	0c1b      	lsrs	r3, r3, #16
 800efc4:	b2da      	uxtb	r2, r3
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	3b01      	subs	r3, #1
 800efce:	0a1b      	lsrs	r3, r3, #8
 800efd0:	b2da      	uxtb	r2, r3
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	3b01      	subs	r3, #1
 800efdc:	b2da      	uxtb	r2, r3
 800efde:	69bb      	ldr	r3, [r7, #24]
 800efe0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	2202      	movs	r2, #2
 800efe6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800efe8:	8abb      	ldrh	r3, [r7, #20]
 800efea:	141b      	asrs	r3, r3, #16
 800efec:	b2da      	uxtb	r2, r3
 800efee:	69bb      	ldr	r3, [r7, #24]
 800eff0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800eff2:	8abb      	ldrh	r3, [r7, #20]
 800eff4:	0a1b      	lsrs	r3, r3, #8
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	b2da      	uxtb	r2, r3
 800effa:	69bb      	ldr	r3, [r7, #24]
 800effc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800effe:	8abb      	ldrh	r3, [r7, #20]
 800f000:	b2da      	uxtb	r2, r3
 800f002:	69bb      	ldr	r3, [r7, #24]
 800f004:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	220c      	movs	r2, #12
 800f00a:	60da      	str	r2, [r3, #12]

  return 0;
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3720      	adds	r7, #32
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
	...

0800f018 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b086      	sub	sp, #24
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	460b      	mov	r3, r1
 800f022:	607a      	str	r2, [r7, #4]
 800f024:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f02c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800f02e:	2317      	movs	r3, #23
 800f030:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d102      	bne.n	800f03e <SCSI_ModeSense6+0x26>
  {
    return -1;
 800f038:	f04f 33ff 	mov.w	r3, #4294967295
 800f03c:	e011      	b.n	800f062 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	3304      	adds	r3, #4
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	b29b      	uxth	r3, r3
 800f046:	8afa      	ldrh	r2, [r7, #22]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d303      	bcc.n	800f054 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	3304      	adds	r3, #4
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800f054:	8afb      	ldrh	r3, [r7, #22]
 800f056:	461a      	mov	r2, r3
 800f058:	4904      	ldr	r1, [pc, #16]	; (800f06c <SCSI_ModeSense6+0x54>)
 800f05a:	6938      	ldr	r0, [r7, #16]
 800f05c:	f000 fdbc 	bl	800fbd8 <SCSI_UpdateBotData>

  return 0;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3718      	adds	r7, #24
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	200000c0 	.word	0x200000c0

0800f070 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b086      	sub	sp, #24
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	460b      	mov	r3, r1
 800f07a:	607a      	str	r2, [r7, #4]
 800f07c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f084:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800f086:	231b      	movs	r3, #27
 800f088:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d102      	bne.n	800f096 <SCSI_ModeSense10+0x26>
  {
    return -1;
 800f090:	f04f 33ff 	mov.w	r3, #4294967295
 800f094:	e011      	b.n	800f0ba <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	3308      	adds	r3, #8
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	b29b      	uxth	r3, r3
 800f09e:	8afa      	ldrh	r2, [r7, #22]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d303      	bcc.n	800f0ac <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	3308      	adds	r3, #8
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800f0ac:	8afb      	ldrh	r3, [r7, #22]
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	4904      	ldr	r1, [pc, #16]	; (800f0c4 <SCSI_ModeSense10+0x54>)
 800f0b2:	6938      	ldr	r0, [r7, #16]
 800f0b4:	f000 fd90 	bl	800fbd8 <SCSI_UpdateBotData>

  return 0;
 800f0b8:	2300      	movs	r3, #0
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3718      	adds	r7, #24
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	200000d8 	.word	0x200000d8

0800f0c8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b086      	sub	sp, #24
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	607a      	str	r2, [r7, #4]
 800f0d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0dc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d102      	bne.n	800f0ea <SCSI_RequestSense+0x22>
  {
    return -1;
 800f0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0e8:	e069      	b.n	800f1be <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d10a      	bne.n	800f10a <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f0fa:	2320      	movs	r3, #32
 800f0fc:	2205      	movs	r2, #5
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f000 f861 	bl	800f1c6 <SCSI_SenseCode>
    return -1;
 800f104:	f04f 33ff 	mov.w	r3, #4294967295
 800f108:	e059      	b.n	800f1be <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800f10a:	2300      	movs	r3, #0
 800f10c:	75fb      	strb	r3, [r7, #23]
 800f10e:	e007      	b.n	800f120 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 800f110:	7dfb      	ldrb	r3, [r7, #23]
 800f112:	693a      	ldr	r2, [r7, #16]
 800f114:	4413      	add	r3, r2
 800f116:	2200      	movs	r2, #0
 800f118:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800f11a:	7dfb      	ldrb	r3, [r7, #23]
 800f11c:	3301      	adds	r3, #1
 800f11e:	75fb      	strb	r3, [r7, #23]
 800f120:	7dfb      	ldrb	r3, [r7, #23]
 800f122:	2b11      	cmp	r3, #17
 800f124:	d9f4      	bls.n	800f110 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	2270      	movs	r2, #112	; 0x70
 800f12a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	220c      	movs	r2, #12
 800f130:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f13e:	429a      	cmp	r2, r3
 800f140:	d02e      	beq.n	800f1a0 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f148:	461a      	mov	r2, r3
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	3248      	adds	r2, #72	; 0x48
 800f14e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f15c:	693a      	ldr	r2, [r7, #16]
 800f15e:	3348      	adds	r3, #72	; 0x48
 800f160:	00db      	lsls	r3, r3, #3
 800f162:	4413      	add	r3, r2
 800f164:	791a      	ldrb	r2, [r3, #4]
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f170:	693a      	ldr	r2, [r7, #16]
 800f172:	3348      	adds	r3, #72	; 0x48
 800f174:	00db      	lsls	r3, r3, #3
 800f176:	4413      	add	r3, r2
 800f178:	795a      	ldrb	r2, [r3, #5]
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f184:	3301      	adds	r3, #1
 800f186:	b2da      	uxtb	r2, r3
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f194:	2b04      	cmp	r3, #4
 800f196:	d103      	bne.n	800f1a0 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	2200      	movs	r2, #0
 800f19c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	2212      	movs	r2, #18
 800f1a4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	3304      	adds	r3, #4
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	2b12      	cmp	r3, #18
 800f1ae:	d805      	bhi.n	800f1bc <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	3304      	adds	r3, #4
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800f1bc:	2300      	movs	r3, #0
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3718      	adds	r7, #24
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800f1c6:	b480      	push	{r7}
 800f1c8:	b085      	sub	sp, #20
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
 800f1ce:	4608      	mov	r0, r1
 800f1d0:	4611      	mov	r1, r2
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	70fb      	strb	r3, [r7, #3]
 800f1d8:	460b      	mov	r3, r1
 800f1da:	70bb      	strb	r3, [r7, #2]
 800f1dc:	4613      	mov	r3, r2
 800f1de:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1e6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d02c      	beq.n	800f248 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	3248      	adds	r2, #72	; 0x48
 800f1fa:	78b9      	ldrb	r1, [r7, #2]
 800f1fc:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f206:	68fa      	ldr	r2, [r7, #12]
 800f208:	3348      	adds	r3, #72	; 0x48
 800f20a:	00db      	lsls	r3, r3, #3
 800f20c:	4413      	add	r3, r2
 800f20e:	787a      	ldrb	r2, [r7, #1]
 800f210:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f218:	68fa      	ldr	r2, [r7, #12]
 800f21a:	3348      	adds	r3, #72	; 0x48
 800f21c:	00db      	lsls	r3, r3, #3
 800f21e:	4413      	add	r3, r2
 800f220:	2200      	movs	r2, #0
 800f222:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f22a:	3301      	adds	r3, #1
 800f22c:	b2da      	uxtb	r2, r3
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f23a:	2b04      	cmp	r3, #4
 800f23c:	d105      	bne.n	800f24a <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2200      	movs	r2, #0
 800f242:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800f246:	e000      	b.n	800f24a <SCSI_SenseCode+0x84>
    return;
 800f248:	bf00      	nop
  }
}
 800f24a:	3714      	adds	r7, #20
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr

0800f254 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	460b      	mov	r3, r1
 800f25e:	607a      	str	r2, [r7, #4]
 800f260:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f268:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d102      	bne.n	800f276 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 800f270:	f04f 33ff 	mov.w	r3, #4294967295
 800f274:	e03b      	b.n	800f2ee <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d10f      	bne.n	800f2a0 <SCSI_StartStopUnit+0x4c>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	3304      	adds	r3, #4
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	f003 0303 	and.w	r3, r3, #3
 800f28a:	2b02      	cmp	r3, #2
 800f28c:	d108      	bne.n	800f2a0 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f28e:	7af9      	ldrb	r1, [r7, #11]
 800f290:	2324      	movs	r3, #36	; 0x24
 800f292:	2205      	movs	r2, #5
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	f7ff ff96 	bl	800f1c6 <SCSI_SenseCode>

    return -1;
 800f29a:	f04f 33ff 	mov.w	r3, #4294967295
 800f29e:	e026      	b.n	800f2ee <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	3304      	adds	r3, #4
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	f003 0303 	and.w	r3, r3, #3
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d104      	bne.n	800f2b8 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800f2b6:	e016      	b.n	800f2e6 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	3304      	adds	r3, #4
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	f003 0303 	and.w	r3, r3, #3
 800f2c2:	2b02      	cmp	r3, #2
 800f2c4:	d104      	bne.n	800f2d0 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	2202      	movs	r2, #2
 800f2ca:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800f2ce:	e00a      	b.n	800f2e6 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	3304      	adds	r3, #4
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	f003 0303 	and.w	r3, r3, #3
 800f2da:	2b03      	cmp	r3, #3
 800f2dc:	d103      	bne.n	800f2e6 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	60da      	str	r2, [r3, #12]

  return 0;
 800f2ec:	2300      	movs	r3, #0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3718      	adds	r7, #24
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f2f6:	b480      	push	{r7}
 800f2f8:	b087      	sub	sp, #28
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	60f8      	str	r0, [r7, #12]
 800f2fe:	460b      	mov	r3, r1
 800f300:	607a      	str	r2, [r7, #4]
 800f302:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f30a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d102      	bne.n	800f318 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 800f312:	f04f 33ff 	mov.w	r3, #4294967295
 800f316:	e011      	b.n	800f33c <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	3304      	adds	r3, #4
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d104      	bne.n	800f32c <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	2200      	movs	r2, #0
 800f326:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800f32a:	e003      	b.n	800f334 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	2201      	movs	r2, #1
 800f330:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	2200      	movs	r2, #0
 800f338:	60da      	str	r2, [r3, #12]

  return 0;
 800f33a:	2300      	movs	r3, #0
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	371c      	adds	r7, #28
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b086      	sub	sp, #24
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	460b      	mov	r3, r1
 800f352:	607a      	str	r2, [r7, #4]
 800f354:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f35c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d102      	bne.n	800f36a <SCSI_Read10+0x22>
  {
    return -1;
 800f364:	f04f 33ff 	mov.w	r3, #4294967295
 800f368:	e08a      	b.n	800f480 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	7a1b      	ldrb	r3, [r3, #8]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d17c      	bne.n	800f46c <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f378:	b25b      	sxtb	r3, r3
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	db0a      	blt.n	800f394 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f384:	2320      	movs	r3, #32
 800f386:	2205      	movs	r2, #5
 800f388:	68f8      	ldr	r0, [r7, #12]
 800f38a:	f7ff ff1c 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f38e:	f04f 33ff 	mov.w	r3, #4294967295
 800f392:	e075      	b.n	800f480 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f39a:	2b02      	cmp	r3, #2
 800f39c:	d108      	bne.n	800f3b0 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f39e:	7af9      	ldrb	r1, [r7, #11]
 800f3a0:	233a      	movs	r3, #58	; 0x3a
 800f3a2:	2202      	movs	r2, #2
 800f3a4:	68f8      	ldr	r0, [r7, #12]
 800f3a6:	f7ff ff0e 	bl	800f1c6 <SCSI_SenseCode>

      return -1;
 800f3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ae:	e067      	b.n	800f480 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	7afa      	ldrb	r2, [r7, #11]
 800f3ba:	4610      	mov	r0, r2
 800f3bc:	4798      	blx	r3
 800f3be:	4603      	mov	r3, r0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d008      	beq.n	800f3d6 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f3c4:	7af9      	ldrb	r1, [r7, #11]
 800f3c6:	233a      	movs	r3, #58	; 0x3a
 800f3c8:	2202      	movs	r2, #2
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f7ff fefb 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d4:	e054      	b.n	800f480 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	3302      	adds	r3, #2
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	3303      	adds	r3, #3
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f3e6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	3304      	adds	r3, #4
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f3f0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	3205      	adds	r2, #5
 800f3f6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800f3f8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	3307      	adds	r3, #7
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	021b      	lsls	r3, r3, #8
 800f408:	687a      	ldr	r2, [r7, #4]
 800f40a:	3208      	adds	r2, #8
 800f40c:	7812      	ldrb	r2, [r2, #0]
 800f40e:	431a      	orrs	r2, r3
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f422:	7af9      	ldrb	r1, [r7, #11]
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f000 faad 	bl	800f984 <SCSI_CheckAddressRange>
 800f42a:	4603      	mov	r3, r0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	da02      	bge.n	800f436 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f430:	f04f 33ff 	mov.w	r3, #4294967295
 800f434:	e024      	b.n	800f480 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f442:	6979      	ldr	r1, [r7, #20]
 800f444:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800f448:	fb01 f303 	mul.w	r3, r1, r3
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d00a      	beq.n	800f466 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f456:	2320      	movs	r3, #32
 800f458:	2205      	movs	r2, #5
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f7ff feb3 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f460:	f04f 33ff 	mov.w	r3, #4294967295
 800f464:	e00c      	b.n	800f480 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	2202      	movs	r2, #2
 800f46a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f472:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800f474:	7afb      	ldrb	r3, [r7, #11]
 800f476:	4619      	mov	r1, r3
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f000 faab 	bl	800f9d4 <SCSI_ProcessRead>
 800f47e:	4603      	mov	r3, r0
}
 800f480:	4618      	mov	r0, r3
 800f482:	3718      	adds	r7, #24
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b086      	sub	sp, #24
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	460b      	mov	r3, r1
 800f492:	607a      	str	r2, [r7, #4]
 800f494:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f49c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d102      	bne.n	800f4aa <SCSI_Read12+0x22>
  {
    return -1;
 800f4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f4a8:	e095      	b.n	800f5d6 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	7a1b      	ldrb	r3, [r3, #8]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f040 8087 	bne.w	800f5c2 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f4ba:	b25b      	sxtb	r3, r3
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	db0a      	blt.n	800f4d6 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f4c6:	2320      	movs	r3, #32
 800f4c8:	2205      	movs	r2, #5
 800f4ca:	68f8      	ldr	r0, [r7, #12]
 800f4cc:	f7ff fe7b 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f4d4:	e07f      	b.n	800f5d6 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f4dc:	2b02      	cmp	r3, #2
 800f4de:	d108      	bne.n	800f4f2 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f4e0:	7af9      	ldrb	r1, [r7, #11]
 800f4e2:	233a      	movs	r3, #58	; 0x3a
 800f4e4:	2202      	movs	r2, #2
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f7ff fe6d 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f0:	e071      	b.n	800f5d6 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f4f8:	689b      	ldr	r3, [r3, #8]
 800f4fa:	7afa      	ldrb	r2, [r7, #11]
 800f4fc:	4610      	mov	r0, r2
 800f4fe:	4798      	blx	r3
 800f500:	4603      	mov	r3, r0
 800f502:	2b00      	cmp	r3, #0
 800f504:	d008      	beq.n	800f518 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f506:	7af9      	ldrb	r1, [r7, #11]
 800f508:	233a      	movs	r3, #58	; 0x3a
 800f50a:	2202      	movs	r2, #2
 800f50c:	68f8      	ldr	r0, [r7, #12]
 800f50e:	f7ff fe5a 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f512:	f04f 33ff 	mov.w	r3, #4294967295
 800f516:	e05e      	b.n	800f5d6 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	3302      	adds	r3, #2
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	3303      	adds	r3, #3
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f528:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	3304      	adds	r3, #4
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f532:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	3205      	adds	r2, #5
 800f538:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800f53a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	3306      	adds	r3, #6
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	3307      	adds	r3, #7
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f552:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	3308      	adds	r3, #8
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f55c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	3209      	adds	r2, #9
 800f562:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f564:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f578:	7af9      	ldrb	r1, [r7, #11]
 800f57a:	68f8      	ldr	r0, [r7, #12]
 800f57c:	f000 fa02 	bl	800f984 <SCSI_CheckAddressRange>
 800f580:	4603      	mov	r3, r0
 800f582:	2b00      	cmp	r3, #0
 800f584:	da02      	bge.n	800f58c <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f586:	f04f 33ff 	mov.w	r3, #4294967295
 800f58a:	e024      	b.n	800f5d6 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f598:	6979      	ldr	r1, [r7, #20]
 800f59a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800f59e:	fb01 f303 	mul.w	r3, r1, r3
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d00a      	beq.n	800f5bc <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f5ac:	2320      	movs	r3, #32
 800f5ae:	2205      	movs	r2, #5
 800f5b0:	68f8      	ldr	r0, [r7, #12]
 800f5b2:	f7ff fe08 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ba:	e00c      	b.n	800f5d6 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	2202      	movs	r2, #2
 800f5c0:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f5c8:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800f5ca:	7afb      	ldrb	r3, [r7, #11]
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	68f8      	ldr	r0, [r7, #12]
 800f5d0:	f000 fa00 	bl	800f9d4 <SCSI_ProcessRead>
 800f5d4:	4603      	mov	r3, r0
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3718      	adds	r7, #24
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b086      	sub	sp, #24
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	60f8      	str	r0, [r7, #12]
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	607a      	str	r2, [r7, #4]
 800f5ea:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5f2:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d102      	bne.n	800f600 <SCSI_Write10+0x22>
  {
    return -1;
 800f5fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f5fe:	e0af      	b.n	800f760 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	7a1b      	ldrb	r3, [r3, #8]
 800f604:	2b00      	cmp	r3, #0
 800f606:	f040 80a5 	bne.w	800f754 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f610:	2b00      	cmp	r3, #0
 800f612:	d10a      	bne.n	800f62a <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f61a:	2320      	movs	r3, #32
 800f61c:	2205      	movs	r2, #5
 800f61e:	68f8      	ldr	r0, [r7, #12]
 800f620:	f7ff fdd1 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f624:	f04f 33ff 	mov.w	r3, #4294967295
 800f628:	e09a      	b.n	800f760 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f630:	b25b      	sxtb	r3, r3
 800f632:	2b00      	cmp	r3, #0
 800f634:	da0a      	bge.n	800f64c <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f63c:	2320      	movs	r3, #32
 800f63e:	2205      	movs	r2, #5
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f7ff fdc0 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f646:	f04f 33ff 	mov.w	r3, #4294967295
 800f64a:	e089      	b.n	800f760 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f652:	689b      	ldr	r3, [r3, #8]
 800f654:	7afa      	ldrb	r2, [r7, #11]
 800f656:	4610      	mov	r0, r2
 800f658:	4798      	blx	r3
 800f65a:	4603      	mov	r3, r0
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d008      	beq.n	800f672 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f660:	7af9      	ldrb	r1, [r7, #11]
 800f662:	233a      	movs	r3, #58	; 0x3a
 800f664:	2202      	movs	r2, #2
 800f666:	68f8      	ldr	r0, [r7, #12]
 800f668:	f7ff fdad 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f66c:	f04f 33ff 	mov.w	r3, #4294967295
 800f670:	e076      	b.n	800f760 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	7afa      	ldrb	r2, [r7, #11]
 800f67c:	4610      	mov	r0, r2
 800f67e:	4798      	blx	r3
 800f680:	4603      	mov	r3, r0
 800f682:	2b00      	cmp	r3, #0
 800f684:	d008      	beq.n	800f698 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f686:	7af9      	ldrb	r1, [r7, #11]
 800f688:	2327      	movs	r3, #39	; 0x27
 800f68a:	2202      	movs	r2, #2
 800f68c:	68f8      	ldr	r0, [r7, #12]
 800f68e:	f7ff fd9a 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f692:	f04f 33ff 	mov.w	r3, #4294967295
 800f696:	e063      	b.n	800f760 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	3302      	adds	r3, #2
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	3303      	adds	r3, #3
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f6a8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	3304      	adds	r3, #4
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f6b2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f6b4:	687a      	ldr	r2, [r7, #4]
 800f6b6:	3205      	adds	r2, #5
 800f6b8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f6ba:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	3307      	adds	r3, #7
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	3208      	adds	r2, #8
 800f6ce:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f6d0:	431a      	orrs	r2, r3
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f6e4:	7af9      	ldrb	r1, [r7, #11]
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f000 f94c 	bl	800f984 <SCSI_CheckAddressRange>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	da02      	bge.n	800f6f8 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f6:	e033      	b.n	800f760 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f6fe:	697a      	ldr	r2, [r7, #20]
 800f700:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f704:	fb02 f303 	mul.w	r3, r2, r3
 800f708:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f710:	693a      	ldr	r2, [r7, #16]
 800f712:	429a      	cmp	r2, r3
 800f714:	d00a      	beq.n	800f72c <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f71c:	2320      	movs	r3, #32
 800f71e:	2205      	movs	r2, #5
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	f7ff fd50 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f726:	f04f 33ff 	mov.w	r3, #4294967295
 800f72a:	e019      	b.n	800f760 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f732:	bf28      	it	cs
 800f734:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f738:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	2201      	movs	r2, #1
 800f73e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	f103 0210 	add.w	r2, r3, #16
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	2101      	movs	r1, #1
 800f74a:	68f8      	ldr	r0, [r7, #12]
 800f74c:	f004 fbd9 	bl	8013f02 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f750:	2300      	movs	r3, #0
 800f752:	e005      	b.n	800f760 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 800f754:	7afb      	ldrb	r3, [r7, #11]
 800f756:	4619      	mov	r1, r3
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f000 f9b4 	bl	800fac6 <SCSI_ProcessWrite>
 800f75e:	4603      	mov	r3, r0
}
 800f760:	4618      	mov	r0, r3
 800f762:	3718      	adds	r7, #24
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b086      	sub	sp, #24
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	460b      	mov	r3, r1
 800f772:	607a      	str	r2, [r7, #4]
 800f774:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f77c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d102      	bne.n	800f78a <SCSI_Write12+0x22>
  {
    return -1;
 800f784:	f04f 33ff 	mov.w	r3, #4294967295
 800f788:	e0bf      	b.n	800f90a <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	7a1b      	ldrb	r3, [r3, #8]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	f040 80b5 	bne.w	800f8fe <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d10a      	bne.n	800f7b4 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f7a4:	2320      	movs	r3, #32
 800f7a6:	2205      	movs	r2, #5
 800f7a8:	68f8      	ldr	r0, [r7, #12]
 800f7aa:	f7ff fd0c 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f7b2:	e0aa      	b.n	800f90a <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f7ba:	b25b      	sxtb	r3, r3
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	da0a      	bge.n	800f7d6 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f7c6:	2320      	movs	r3, #32
 800f7c8:	2205      	movs	r2, #5
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f7ff fcfb 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f7d4:	e099      	b.n	800f90a <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f7dc:	689b      	ldr	r3, [r3, #8]
 800f7de:	7afa      	ldrb	r2, [r7, #11]
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	4798      	blx	r3
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d00b      	beq.n	800f802 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f7ea:	7af9      	ldrb	r1, [r7, #11]
 800f7ec:	233a      	movs	r3, #58	; 0x3a
 800f7ee:	2202      	movs	r2, #2
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f7ff fce8 	bl	800f1c6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2205      	movs	r2, #5
 800f7fa:	721a      	strb	r2, [r3, #8]
      return -1;
 800f7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f800:	e083      	b.n	800f90a <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f808:	68db      	ldr	r3, [r3, #12]
 800f80a:	7afa      	ldrb	r2, [r7, #11]
 800f80c:	4610      	mov	r0, r2
 800f80e:	4798      	blx	r3
 800f810:	4603      	mov	r3, r0
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00b      	beq.n	800f82e <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f816:	7af9      	ldrb	r1, [r7, #11]
 800f818:	2327      	movs	r3, #39	; 0x27
 800f81a:	2202      	movs	r2, #2
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f7ff fcd2 	bl	800f1c6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	2205      	movs	r2, #5
 800f826:	721a      	strb	r2, [r3, #8]
      return -1;
 800f828:	f04f 33ff 	mov.w	r3, #4294967295
 800f82c:	e06d      	b.n	800f90a <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	3302      	adds	r3, #2
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	3303      	adds	r3, #3
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f83e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	3304      	adds	r3, #4
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f848:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	3205      	adds	r2, #5
 800f84e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f850:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	3306      	adds	r3, #6
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	3307      	adds	r3, #7
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f868:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	3308      	adds	r3, #8
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f872:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	3209      	adds	r2, #9
 800f878:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f87a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f88e:	7af9      	ldrb	r1, [r7, #11]
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	f000 f877 	bl	800f984 <SCSI_CheckAddressRange>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	da02      	bge.n	800f8a2 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f89c:	f04f 33ff 	mov.w	r3, #4294967295
 800f8a0:	e033      	b.n	800f90a <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f8a8:	697a      	ldr	r2, [r7, #20]
 800f8aa:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f8ae:	fb02 f303 	mul.w	r3, r2, r3
 800f8b2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f8ba:	693a      	ldr	r2, [r7, #16]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d00a      	beq.n	800f8d6 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f8c6:	2320      	movs	r3, #32
 800f8c8:	2205      	movs	r2, #5
 800f8ca:	68f8      	ldr	r0, [r7, #12]
 800f8cc:	f7ff fc7b 	bl	800f1c6 <SCSI_SenseCode>
      return -1;
 800f8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8d4:	e019      	b.n	800f90a <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8dc:	bf28      	it	cs
 800f8de:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f8e2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	f103 0210 	add.w	r2, r3, #16
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	2101      	movs	r1, #1
 800f8f4:	68f8      	ldr	r0, [r7, #12]
 800f8f6:	f004 fb04 	bl	8013f02 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	e005      	b.n	800f90a <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 800f8fe:	7afb      	ldrb	r3, [r7, #11]
 800f900:	4619      	mov	r1, r3
 800f902:	68f8      	ldr	r0, [r7, #12]
 800f904:	f000 f8df 	bl	800fac6 <SCSI_ProcessWrite>
 800f908:	4603      	mov	r3, r0
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3718      	adds	r7, #24
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}

0800f912 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f912:	b580      	push	{r7, lr}
 800f914:	b086      	sub	sp, #24
 800f916:	af00      	add	r7, sp, #0
 800f918:	60f8      	str	r0, [r7, #12]
 800f91a:	460b      	mov	r3, r1
 800f91c:	607a      	str	r2, [r7, #4]
 800f91e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f926:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d102      	bne.n	800f934 <SCSI_Verify10+0x22>
  {
    return -1;
 800f92e:	f04f 33ff 	mov.w	r3, #4294967295
 800f932:	e023      	b.n	800f97c <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	3301      	adds	r3, #1
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	f003 0302 	and.w	r3, r3, #2
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d008      	beq.n	800f954 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f942:	7af9      	ldrb	r1, [r7, #11]
 800f944:	2324      	movs	r3, #36	; 0x24
 800f946:	2205      	movs	r2, #5
 800f948:	68f8      	ldr	r0, [r7, #12]
 800f94a:	f7ff fc3c 	bl	800f1c6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f94e:	f04f 33ff 	mov.w	r3, #4294967295
 800f952:	e013      	b.n	800f97c <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f960:	7af9      	ldrb	r1, [r7, #11]
 800f962:	68f8      	ldr	r0, [r7, #12]
 800f964:	f000 f80e 	bl	800f984 <SCSI_CheckAddressRange>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	da02      	bge.n	800f974 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 800f96e:	f04f 33ff 	mov.w	r3, #4294967295
 800f972:	e003      	b.n	800f97c <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	2200      	movs	r2, #0
 800f978:	60da      	str	r2, [r3, #12]

  return 0;
 800f97a:	2300      	movs	r3, #0
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3718      	adds	r7, #24
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b086      	sub	sp, #24
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	607a      	str	r2, [r7, #4]
 800f98e:	603b      	str	r3, [r7, #0]
 800f990:	460b      	mov	r3, r1
 800f992:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f99a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d102      	bne.n	800f9a8 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800f9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f9a6:	e011      	b.n	800f9cc <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f9a8:	687a      	ldr	r2, [r7, #4]
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	441a      	add	r2, r3
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d908      	bls.n	800f9ca <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f9b8:	7af9      	ldrb	r1, [r7, #11]
 800f9ba:	2321      	movs	r3, #33	; 0x21
 800f9bc:	2205      	movs	r2, #5
 800f9be:	68f8      	ldr	r0, [r7, #12]
 800f9c0:	f7ff fc01 	bl	800f1c6 <SCSI_SenseCode>
    return -1;
 800f9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9c8:	e000      	b.n	800f9cc <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 800f9ca:	2300      	movs	r3, #0
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3718      	adds	r7, #24
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f9d4:	b590      	push	{r4, r7, lr}
 800f9d6:	b085      	sub	sp, #20
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	460b      	mov	r3, r1
 800f9de:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9e6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f9f4:	fb02 f303 	mul.w	r3, r2, r3
 800f9f8:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d102      	bne.n	800fa06 <SCSI_ProcessRead+0x32>
  {
    return -1;
 800fa00:	f04f 33ff 	mov.w	r3, #4294967295
 800fa04:	e05b      	b.n	800fabe <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa0c:	bf28      	it	cs
 800fa0e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fa12:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa1a:	691c      	ldr	r4, [r3, #16]
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f103 0110 	add.w	r1, r3, #16
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800fa2e:	4618      	mov	r0, r3
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	78f8      	ldrb	r0, [r7, #3]
 800fa3a:	47a0      	blx	r4
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	da08      	bge.n	800fa54 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800fa42:	78f9      	ldrb	r1, [r7, #3]
 800fa44:	2311      	movs	r3, #17
 800fa46:	2204      	movs	r2, #4
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7ff fbbc 	bl	800f1c6 <SCSI_SenseCode>
    return -1;
 800fa4e:	f04f 33ff 	mov.w	r3, #4294967295
 800fa52:	e034      	b.n	800fabe <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f103 0210 	add.w	r2, r3, #16
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	2181      	movs	r1, #129	; 0x81
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f004 fa2e 	bl	8013ec0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800fa70:	4619      	mov	r1, r3
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa78:	441a      	add	r2, r3
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa94:	1ad2      	subs	r2, r2, r3
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	1ad2      	subs	r2, r2, r3
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d102      	bne.n	800fabc <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2203      	movs	r2, #3
 800faba:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800fabc:	2300      	movs	r3, #0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3714      	adds	r7, #20
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd90      	pop	{r4, r7, pc}

0800fac6 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800fac6:	b590      	push	{r4, r7, lr}
 800fac8:	b085      	sub	sp, #20
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
 800face:	460b      	mov	r3, r1
 800fad0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fad8:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800fae6:	fb02 f303 	mul.w	r3, r2, r3
 800faea:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d102      	bne.n	800faf8 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 800faf2:	f04f 33ff 	mov.w	r3, #4294967295
 800faf6:	e06b      	b.n	800fbd0 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fafe:	bf28      	it	cs
 800fb00:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fb04:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fb0c:	695c      	ldr	r4, [r3, #20]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	f103 0110 	add.w	r1, r3, #16
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800fb20:	4618      	mov	r0, r3
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	78f8      	ldrb	r0, [r7, #3]
 800fb2c:	47a0      	blx	r4
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	da08      	bge.n	800fb46 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800fb34:	78f9      	ldrb	r1, [r7, #3]
 800fb36:	2303      	movs	r3, #3
 800fb38:	2204      	movs	r2, #4
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f7ff fb43 	bl	800f1c6 <SCSI_SenseCode>
    return -1;
 800fb40:	f04f 33ff 	mov.w	r3, #4294967295
 800fb44:	e044      	b.n	800fbd0 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800fb52:	4619      	mov	r1, r3
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb5a:	441a      	add	r2, r3
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800fb6e:	4619      	mov	r1, r3
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb76:	1ad2      	subs	r2, r2, r3
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	1ad2      	subs	r2, r2, r3
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d104      	bne.n	800fba2 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800fb98:	2100      	movs	r1, #0
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f7fe fdd8 	bl	800e750 <MSC_BOT_SendCSW>
 800fba0:	e015      	b.n	800fbce <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fba8:	68fa      	ldr	r2, [r7, #12]
 800fbaa:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800fbae:	fb02 f303 	mul.w	r3, r2, r3
 800fbb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbb6:	bf28      	it	cs
 800fbb8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fbbc:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f103 0210 	add.w	r2, r3, #16
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	2101      	movs	r1, #1
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f004 f99a 	bl	8013f02 <USBD_LL_PrepareReceive>
  }

  return 0;
 800fbce:	2300      	movs	r3, #0
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3714      	adds	r7, #20
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd90      	pop	{r4, r7, pc}

0800fbd8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b087      	sub	sp, #28
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800fbe6:	88fb      	ldrh	r3, [r7, #6]
 800fbe8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d102      	bne.n	800fbf6 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800fbf0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbf4:	e013      	b.n	800fc1e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800fbf6:	8afa      	ldrh	r2, [r7, #22]
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800fbfc:	e00b      	b.n	800fc16 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800fbfe:	8afb      	ldrh	r3, [r7, #22]
 800fc00:	3b01      	subs	r3, #1
 800fc02:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800fc04:	8afb      	ldrh	r3, [r7, #22]
 800fc06:	68ba      	ldr	r2, [r7, #8]
 800fc08:	441a      	add	r2, r3
 800fc0a:	8afb      	ldrh	r3, [r7, #22]
 800fc0c:	7811      	ldrb	r1, [r2, #0]
 800fc0e:	68fa      	ldr	r2, [r7, #12]
 800fc10:	4413      	add	r3, r2
 800fc12:	460a      	mov	r2, r1
 800fc14:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800fc16:	8afb      	ldrh	r3, [r7, #22]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d1f0      	bne.n	800fbfe <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	371c      	adds	r7, #28
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr

0800fc2a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fc2a:	b580      	push	{r7, lr}
 800fc2c:	b086      	sub	sp, #24
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	60f8      	str	r0, [r7, #12]
 800fc32:	60b9      	str	r1, [r7, #8]
 800fc34:	4613      	mov	r3, r2
 800fc36:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d101      	bne.n	800fc42 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fc3e:	2303      	movs	r3, #3
 800fc40:	e01f      	b.n	800fc82 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2200      	movs	r2, #0
 800fc46:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2200      	movs	r2, #0
 800fc56:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d003      	beq.n	800fc68 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	68ba      	ldr	r2, [r7, #8]
 800fc64:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	79fa      	ldrb	r2, [r7, #7]
 800fc74:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fc76:	68f8      	ldr	r0, [r7, #12]
 800fc78:	f003 ffce 	bl	8013c18 <USBD_LL_Init>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fc80:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3718      	adds	r7, #24
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b084      	sub	sp, #16
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	6078      	str	r0, [r7, #4]
 800fc92:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fc94:	2300      	movs	r3, #0
 800fc96:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d101      	bne.n	800fca2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800fc9e:	2303      	movs	r3, #3
 800fca0:	e016      	b.n	800fcd0 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	683a      	ldr	r2, [r7, #0]
 800fca6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00b      	beq.n	800fcce <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbe:	f107 020e 	add.w	r2, r7, #14
 800fcc2:	4610      	mov	r0, r2
 800fcc4:	4798      	blx	r3
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800fcce:	2300      	movs	r3, #0
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3710      	adds	r7, #16
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f003 ffe5 	bl	8013cb0 <USBD_LL_Start>
 800fce6:	4603      	mov	r3, r0
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3708      	adds	r7, #8
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fcf8:	2300      	movs	r3, #0
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	370c      	adds	r7, #12
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr

0800fd06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd06:	b580      	push	{r7, lr}
 800fd08:	b084      	sub	sp, #16
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	6078      	str	r0, [r7, #4]
 800fd0e:	460b      	mov	r3, r1
 800fd10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fd12:	2303      	movs	r3, #3
 800fd14:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d009      	beq.n	800fd34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	78fa      	ldrb	r2, [r7, #3]
 800fd2a:	4611      	mov	r1, r2
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	4798      	blx	r3
 800fd30:	4603      	mov	r3, r0
 800fd32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800fd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3710      	adds	r7, #16
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b082      	sub	sp, #8
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
 800fd46:	460b      	mov	r3, r1
 800fd48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d007      	beq.n	800fd64 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	78fa      	ldrb	r2, [r7, #3]
 800fd5e:	4611      	mov	r1, r2
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	4798      	blx	r3
  }

  return USBD_OK;
 800fd64:	2300      	movs	r3, #0
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3708      	adds	r7, #8
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b084      	sub	sp, #16
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
 800fd76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fd7e:	6839      	ldr	r1, [r7, #0]
 800fd80:	4618      	mov	r0, r3
 800fd82:	f000 ffb9 	bl	8010cf8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2201      	movs	r2, #1
 800fd8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800fd94:	461a      	mov	r2, r3
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fda2:	f003 031f 	and.w	r3, r3, #31
 800fda6:	2b02      	cmp	r3, #2
 800fda8:	d01a      	beq.n	800fde0 <USBD_LL_SetupStage+0x72>
 800fdaa:	2b02      	cmp	r3, #2
 800fdac:	d822      	bhi.n	800fdf4 <USBD_LL_SetupStage+0x86>
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d002      	beq.n	800fdb8 <USBD_LL_SetupStage+0x4a>
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	d00a      	beq.n	800fdcc <USBD_LL_SetupStage+0x5e>
 800fdb6:	e01d      	b.n	800fdf4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f000 fa61 	bl	8010288 <USBD_StdDevReq>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	73fb      	strb	r3, [r7, #15]
      break;
 800fdca:	e020      	b.n	800fe0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 fac5 	bl	8010364 <USBD_StdItfReq>
 800fdda:	4603      	mov	r3, r0
 800fddc:	73fb      	strb	r3, [r7, #15]
      break;
 800fdde:	e016      	b.n	800fe0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fde6:	4619      	mov	r1, r3
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 fb04 	bl	80103f6 <USBD_StdEPReq>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	73fb      	strb	r3, [r7, #15]
      break;
 800fdf2:	e00c      	b.n	800fe0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fdfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	4619      	mov	r1, r3
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f003 ffd3 	bl	8013dae <USBD_LL_StallEP>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	73fb      	strb	r3, [r7, #15]
      break;
 800fe0c:	bf00      	nop
  }

  return ret;
 800fe0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3710      	adds	r7, #16
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b086      	sub	sp, #24
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	460b      	mov	r3, r1
 800fe22:	607a      	str	r2, [r7, #4]
 800fe24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fe26:	7afb      	ldrb	r3, [r7, #11]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d138      	bne.n	800fe9e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fe32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe3a:	2b03      	cmp	r3, #3
 800fe3c:	d14a      	bne.n	800fed4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	689a      	ldr	r2, [r3, #8]
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d913      	bls.n	800fe72 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	689a      	ldr	r2, [r3, #8]
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	1ad2      	subs	r2, r2, r3
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	68da      	ldr	r2, [r3, #12]
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	4293      	cmp	r3, r2
 800fe62:	bf28      	it	cs
 800fe64:	4613      	movcs	r3, r2
 800fe66:	461a      	mov	r2, r3
 800fe68:	6879      	ldr	r1, [r7, #4]
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	f001 f81b 	bl	8010ea6 <USBD_CtlContinueRx>
 800fe70:	e030      	b.n	800fed4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe78:	b2db      	uxtb	r3, r3
 800fe7a:	2b03      	cmp	r3, #3
 800fe7c:	d10b      	bne.n	800fe96 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe84:	691b      	ldr	r3, [r3, #16]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d005      	beq.n	800fe96 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe90:	691b      	ldr	r3, [r3, #16]
 800fe92:	68f8      	ldr	r0, [r7, #12]
 800fe94:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f001 f816 	bl	8010ec8 <USBD_CtlSendStatus>
 800fe9c:	e01a      	b.n	800fed4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	2b03      	cmp	r3, #3
 800fea8:	d114      	bne.n	800fed4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800feb0:	699b      	ldr	r3, [r3, #24]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00e      	beq.n	800fed4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800febc:	699b      	ldr	r3, [r3, #24]
 800febe:	7afa      	ldrb	r2, [r7, #11]
 800fec0:	4611      	mov	r1, r2
 800fec2:	68f8      	ldr	r0, [r7, #12]
 800fec4:	4798      	blx	r3
 800fec6:	4603      	mov	r3, r0
 800fec8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800feca:	7dfb      	ldrb	r3, [r7, #23]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800fed0:	7dfb      	ldrb	r3, [r7, #23]
 800fed2:	e000      	b.n	800fed6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800fed4:	2300      	movs	r3, #0
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3718      	adds	r7, #24
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}

0800fede <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fede:	b580      	push	{r7, lr}
 800fee0:	b086      	sub	sp, #24
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	60f8      	str	r0, [r7, #12]
 800fee6:	460b      	mov	r3, r1
 800fee8:	607a      	str	r2, [r7, #4]
 800feea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800feec:	7afb      	ldrb	r3, [r7, #11]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d16b      	bne.n	800ffca <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	3314      	adds	r3, #20
 800fef6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fefe:	2b02      	cmp	r3, #2
 800ff00:	d156      	bne.n	800ffb0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	689a      	ldr	r2, [r3, #8]
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	68db      	ldr	r3, [r3, #12]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d914      	bls.n	800ff38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	689a      	ldr	r2, [r3, #8]
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	1ad2      	subs	r2, r2, r3
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	461a      	mov	r2, r3
 800ff22:	6879      	ldr	r1, [r7, #4]
 800ff24:	68f8      	ldr	r0, [r7, #12]
 800ff26:	f000 ffad 	bl	8010e84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	2100      	movs	r1, #0
 800ff30:	68f8      	ldr	r0, [r7, #12]
 800ff32:	f003 ffe6 	bl	8013f02 <USBD_LL_PrepareReceive>
 800ff36:	e03b      	b.n	800ffb0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	68da      	ldr	r2, [r3, #12]
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	689b      	ldr	r3, [r3, #8]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d11c      	bne.n	800ff7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	685a      	ldr	r2, [r3, #4]
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d316      	bcc.n	800ff7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	685a      	ldr	r2, [r3, #4]
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d20f      	bcs.n	800ff7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ff5e:	2200      	movs	r2, #0
 800ff60:	2100      	movs	r1, #0
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f000 ff8e 	bl	8010e84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ff70:	2300      	movs	r3, #0
 800ff72:	2200      	movs	r2, #0
 800ff74:	2100      	movs	r1, #0
 800ff76:	68f8      	ldr	r0, [r7, #12]
 800ff78:	f003 ffc3 	bl	8013f02 <USBD_LL_PrepareReceive>
 800ff7c:	e018      	b.n	800ffb0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	2b03      	cmp	r3, #3
 800ff88:	d10b      	bne.n	800ffa2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d005      	beq.n	800ffa2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff9c:	68db      	ldr	r3, [r3, #12]
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ffa2:	2180      	movs	r1, #128	; 0x80
 800ffa4:	68f8      	ldr	r0, [r7, #12]
 800ffa6:	f003 ff02 	bl	8013dae <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ffaa:	68f8      	ldr	r0, [r7, #12]
 800ffac:	f000 ff9f 	bl	8010eee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d122      	bne.n	8010000 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ffba:	68f8      	ldr	r0, [r7, #12]
 800ffbc:	f7ff fe98 	bl	800fcf0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ffc8:	e01a      	b.n	8010000 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	2b03      	cmp	r3, #3
 800ffd4:	d114      	bne.n	8010000 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffdc:	695b      	ldr	r3, [r3, #20]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d00e      	beq.n	8010000 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffe8:	695b      	ldr	r3, [r3, #20]
 800ffea:	7afa      	ldrb	r2, [r7, #11]
 800ffec:	4611      	mov	r1, r2
 800ffee:	68f8      	ldr	r0, [r7, #12]
 800fff0:	4798      	blx	r3
 800fff2:	4603      	mov	r3, r0
 800fff4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fff6:	7dfb      	ldrb	r3, [r7, #23]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d001      	beq.n	8010000 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800fffc:	7dfb      	ldrb	r3, [r7, #23]
 800fffe:	e000      	b.n	8010002 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010000:	2300      	movs	r3, #0
}
 8010002:	4618      	mov	r0, r3
 8010004:	3718      	adds	r7, #24
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}

0801000a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801000a:	b580      	push	{r7, lr}
 801000c:	b082      	sub	sp, #8
 801000e:	af00      	add	r7, sp, #0
 8010010:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2201      	movs	r2, #1
 8010016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2200      	movs	r2, #0
 801001e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2200      	movs	r2, #0
 8010026:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2200      	movs	r2, #0
 801002c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010036:	2b00      	cmp	r3, #0
 8010038:	d101      	bne.n	801003e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801003a:	2303      	movs	r3, #3
 801003c:	e02f      	b.n	801009e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010044:	2b00      	cmp	r3, #0
 8010046:	d00f      	beq.n	8010068 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d009      	beq.n	8010068 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	687a      	ldr	r2, [r7, #4]
 801005e:	6852      	ldr	r2, [r2, #4]
 8010060:	b2d2      	uxtb	r2, r2
 8010062:	4611      	mov	r1, r2
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010068:	2340      	movs	r3, #64	; 0x40
 801006a:	2200      	movs	r2, #0
 801006c:	2100      	movs	r1, #0
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f003 fe39 	bl	8013ce6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2201      	movs	r2, #1
 8010078:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2240      	movs	r2, #64	; 0x40
 8010080:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010084:	2340      	movs	r3, #64	; 0x40
 8010086:	2200      	movs	r2, #0
 8010088:	2180      	movs	r1, #128	; 0x80
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f003 fe2b 	bl	8013ce6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2201      	movs	r2, #1
 8010094:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2240      	movs	r2, #64	; 0x40
 801009a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801009c:	2300      	movs	r3, #0
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3708      	adds	r7, #8
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80100a6:	b480      	push	{r7}
 80100a8:	b083      	sub	sp, #12
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
 80100ae:	460b      	mov	r3, r1
 80100b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	78fa      	ldrb	r2, [r7, #3]
 80100b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80100b8:	2300      	movs	r3, #0
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	370c      	adds	r7, #12
 80100be:	46bd      	mov	sp, r7
 80100c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c4:	4770      	bx	lr

080100c6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80100c6:	b480      	push	{r7}
 80100c8:	b083      	sub	sp, #12
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100d4:	b2da      	uxtb	r2, r3
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2204      	movs	r2, #4
 80100e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80100e4:	2300      	movs	r3, #0
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	370c      	adds	r7, #12
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr

080100f2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80100f2:	b480      	push	{r7}
 80100f4:	b083      	sub	sp, #12
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010100:	b2db      	uxtb	r3, r3
 8010102:	2b04      	cmp	r3, #4
 8010104:	d106      	bne.n	8010114 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801010c:	b2da      	uxtb	r2, r3
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010114:	2300      	movs	r3, #0
}
 8010116:	4618      	mov	r0, r3
 8010118:	370c      	adds	r7, #12
 801011a:	46bd      	mov	sp, r7
 801011c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010120:	4770      	bx	lr

08010122 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010122:	b580      	push	{r7, lr}
 8010124:	b082      	sub	sp, #8
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010130:	2b00      	cmp	r3, #0
 8010132:	d101      	bne.n	8010138 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010134:	2303      	movs	r3, #3
 8010136:	e012      	b.n	801015e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801013e:	b2db      	uxtb	r3, r3
 8010140:	2b03      	cmp	r3, #3
 8010142:	d10b      	bne.n	801015c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801014a:	69db      	ldr	r3, [r3, #28]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d005      	beq.n	801015c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010156:	69db      	ldr	r3, [r3, #28]
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801015c:	2300      	movs	r3, #0
}
 801015e:	4618      	mov	r0, r3
 8010160:	3708      	adds	r7, #8
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b082      	sub	sp, #8
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
 801016e:	460b      	mov	r3, r1
 8010170:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010178:	2b00      	cmp	r3, #0
 801017a:	d101      	bne.n	8010180 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801017c:	2303      	movs	r3, #3
 801017e:	e014      	b.n	80101aa <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010186:	b2db      	uxtb	r3, r3
 8010188:	2b03      	cmp	r3, #3
 801018a:	d10d      	bne.n	80101a8 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010192:	6a1b      	ldr	r3, [r3, #32]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d007      	beq.n	80101a8 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801019e:	6a1b      	ldr	r3, [r3, #32]
 80101a0:	78fa      	ldrb	r2, [r7, #3]
 80101a2:	4611      	mov	r1, r2
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80101a8:	2300      	movs	r3, #0
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3708      	adds	r7, #8
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b082      	sub	sp, #8
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
 80101ba:	460b      	mov	r3, r1
 80101bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d101      	bne.n	80101cc <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80101c8:	2303      	movs	r3, #3
 80101ca:	e014      	b.n	80101f6 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	2b03      	cmp	r3, #3
 80101d6:	d10d      	bne.n	80101f4 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d007      	beq.n	80101f4 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ec:	78fa      	ldrb	r2, [r7, #3]
 80101ee:	4611      	mov	r1, r2
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80101f4:	2300      	movs	r3, #0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3708      	adds	r7, #8
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}

080101fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80101fe:	b480      	push	{r7}
 8010200:	b083      	sub	sp, #12
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010206:	2300      	movs	r3, #0
}
 8010208:	4618      	mov	r0, r3
 801020a:	370c      	adds	r7, #12
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2201      	movs	r2, #1
 8010220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801022a:	2b00      	cmp	r3, #0
 801022c:	d009      	beq.n	8010242 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	6852      	ldr	r2, [r2, #4]
 801023a:	b2d2      	uxtb	r2, r2
 801023c:	4611      	mov	r1, r2
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	4798      	blx	r3
  }

  return USBD_OK;
 8010242:	2300      	movs	r3, #0
}
 8010244:	4618      	mov	r0, r3
 8010246:	3708      	adds	r7, #8
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801024c:	b480      	push	{r7}
 801024e:	b087      	sub	sp, #28
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	3301      	adds	r3, #1
 8010262:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801026a:	8a3b      	ldrh	r3, [r7, #16]
 801026c:	021b      	lsls	r3, r3, #8
 801026e:	b21a      	sxth	r2, r3
 8010270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010274:	4313      	orrs	r3, r2
 8010276:	b21b      	sxth	r3, r3
 8010278:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801027a:	89fb      	ldrh	r3, [r7, #14]
}
 801027c:	4618      	mov	r0, r3
 801027e:	371c      	adds	r7, #28
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr

08010288 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010292:	2300      	movs	r3, #0
 8010294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801029e:	2b40      	cmp	r3, #64	; 0x40
 80102a0:	d005      	beq.n	80102ae <USBD_StdDevReq+0x26>
 80102a2:	2b40      	cmp	r3, #64	; 0x40
 80102a4:	d853      	bhi.n	801034e <USBD_StdDevReq+0xc6>
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00b      	beq.n	80102c2 <USBD_StdDevReq+0x3a>
 80102aa:	2b20      	cmp	r3, #32
 80102ac:	d14f      	bne.n	801034e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102b4:	689b      	ldr	r3, [r3, #8]
 80102b6:	6839      	ldr	r1, [r7, #0]
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	4798      	blx	r3
 80102bc:	4603      	mov	r3, r0
 80102be:	73fb      	strb	r3, [r7, #15]
      break;
 80102c0:	e04a      	b.n	8010358 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	785b      	ldrb	r3, [r3, #1]
 80102c6:	2b09      	cmp	r3, #9
 80102c8:	d83b      	bhi.n	8010342 <USBD_StdDevReq+0xba>
 80102ca:	a201      	add	r2, pc, #4	; (adr r2, 80102d0 <USBD_StdDevReq+0x48>)
 80102cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102d0:	08010325 	.word	0x08010325
 80102d4:	08010339 	.word	0x08010339
 80102d8:	08010343 	.word	0x08010343
 80102dc:	0801032f 	.word	0x0801032f
 80102e0:	08010343 	.word	0x08010343
 80102e4:	08010303 	.word	0x08010303
 80102e8:	080102f9 	.word	0x080102f9
 80102ec:	08010343 	.word	0x08010343
 80102f0:	0801031b 	.word	0x0801031b
 80102f4:	0801030d 	.word	0x0801030d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80102f8:	6839      	ldr	r1, [r7, #0]
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f000 f9de 	bl	80106bc <USBD_GetDescriptor>
          break;
 8010300:	e024      	b.n	801034c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010302:	6839      	ldr	r1, [r7, #0]
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f000 fb6d 	bl	80109e4 <USBD_SetAddress>
          break;
 801030a:	e01f      	b.n	801034c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801030c:	6839      	ldr	r1, [r7, #0]
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 fbac 	bl	8010a6c <USBD_SetConfig>
 8010314:	4603      	mov	r3, r0
 8010316:	73fb      	strb	r3, [r7, #15]
          break;
 8010318:	e018      	b.n	801034c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801031a:	6839      	ldr	r1, [r7, #0]
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f000 fc4b 	bl	8010bb8 <USBD_GetConfig>
          break;
 8010322:	e013      	b.n	801034c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010324:	6839      	ldr	r1, [r7, #0]
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f000 fc7c 	bl	8010c24 <USBD_GetStatus>
          break;
 801032c:	e00e      	b.n	801034c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801032e:	6839      	ldr	r1, [r7, #0]
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f000 fcab 	bl	8010c8c <USBD_SetFeature>
          break;
 8010336:	e009      	b.n	801034c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010338:	6839      	ldr	r1, [r7, #0]
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 fcba 	bl	8010cb4 <USBD_ClrFeature>
          break;
 8010340:	e004      	b.n	801034c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010342:	6839      	ldr	r1, [r7, #0]
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 fd11 	bl	8010d6c <USBD_CtlError>
          break;
 801034a:	bf00      	nop
      }
      break;
 801034c:	e004      	b.n	8010358 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801034e:	6839      	ldr	r1, [r7, #0]
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f000 fd0b 	bl	8010d6c <USBD_CtlError>
      break;
 8010356:	bf00      	nop
  }

  return ret;
 8010358:	7bfb      	ldrb	r3, [r7, #15]
}
 801035a:	4618      	mov	r0, r3
 801035c:	3710      	adds	r7, #16
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop

08010364 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b084      	sub	sp, #16
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801036e:	2300      	movs	r3, #0
 8010370:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801037a:	2b40      	cmp	r3, #64	; 0x40
 801037c:	d005      	beq.n	801038a <USBD_StdItfReq+0x26>
 801037e:	2b40      	cmp	r3, #64	; 0x40
 8010380:	d82f      	bhi.n	80103e2 <USBD_StdItfReq+0x7e>
 8010382:	2b00      	cmp	r3, #0
 8010384:	d001      	beq.n	801038a <USBD_StdItfReq+0x26>
 8010386:	2b20      	cmp	r3, #32
 8010388:	d12b      	bne.n	80103e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010390:	b2db      	uxtb	r3, r3
 8010392:	3b01      	subs	r3, #1
 8010394:	2b02      	cmp	r3, #2
 8010396:	d81d      	bhi.n	80103d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	889b      	ldrh	r3, [r3, #4]
 801039c:	b2db      	uxtb	r3, r3
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d813      	bhi.n	80103ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	6839      	ldr	r1, [r7, #0]
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	4798      	blx	r3
 80103b0:	4603      	mov	r3, r0
 80103b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	88db      	ldrh	r3, [r3, #6]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d110      	bne.n	80103de <USBD_StdItfReq+0x7a>
 80103bc:	7bfb      	ldrb	r3, [r7, #15]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d10d      	bne.n	80103de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 fd80 	bl	8010ec8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80103c8:	e009      	b.n	80103de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80103ca:	6839      	ldr	r1, [r7, #0]
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f000 fccd 	bl	8010d6c <USBD_CtlError>
          break;
 80103d2:	e004      	b.n	80103de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80103d4:	6839      	ldr	r1, [r7, #0]
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 fcc8 	bl	8010d6c <USBD_CtlError>
          break;
 80103dc:	e000      	b.n	80103e0 <USBD_StdItfReq+0x7c>
          break;
 80103de:	bf00      	nop
      }
      break;
 80103e0:	e004      	b.n	80103ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80103e2:	6839      	ldr	r1, [r7, #0]
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f000 fcc1 	bl	8010d6c <USBD_CtlError>
      break;
 80103ea:	bf00      	nop
  }

  return ret;
 80103ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3710      	adds	r7, #16
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b084      	sub	sp, #16
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
 80103fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010400:	2300      	movs	r3, #0
 8010402:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	889b      	ldrh	r3, [r3, #4]
 8010408:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	781b      	ldrb	r3, [r3, #0]
 801040e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010412:	2b40      	cmp	r3, #64	; 0x40
 8010414:	d007      	beq.n	8010426 <USBD_StdEPReq+0x30>
 8010416:	2b40      	cmp	r3, #64	; 0x40
 8010418:	f200 8145 	bhi.w	80106a6 <USBD_StdEPReq+0x2b0>
 801041c:	2b00      	cmp	r3, #0
 801041e:	d00c      	beq.n	801043a <USBD_StdEPReq+0x44>
 8010420:	2b20      	cmp	r3, #32
 8010422:	f040 8140 	bne.w	80106a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801042c:	689b      	ldr	r3, [r3, #8]
 801042e:	6839      	ldr	r1, [r7, #0]
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	4798      	blx	r3
 8010434:	4603      	mov	r3, r0
 8010436:	73fb      	strb	r3, [r7, #15]
      break;
 8010438:	e13a      	b.n	80106b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	785b      	ldrb	r3, [r3, #1]
 801043e:	2b03      	cmp	r3, #3
 8010440:	d007      	beq.n	8010452 <USBD_StdEPReq+0x5c>
 8010442:	2b03      	cmp	r3, #3
 8010444:	f300 8129 	bgt.w	801069a <USBD_StdEPReq+0x2a4>
 8010448:	2b00      	cmp	r3, #0
 801044a:	d07f      	beq.n	801054c <USBD_StdEPReq+0x156>
 801044c:	2b01      	cmp	r3, #1
 801044e:	d03c      	beq.n	80104ca <USBD_StdEPReq+0xd4>
 8010450:	e123      	b.n	801069a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010458:	b2db      	uxtb	r3, r3
 801045a:	2b02      	cmp	r3, #2
 801045c:	d002      	beq.n	8010464 <USBD_StdEPReq+0x6e>
 801045e:	2b03      	cmp	r3, #3
 8010460:	d016      	beq.n	8010490 <USBD_StdEPReq+0x9a>
 8010462:	e02c      	b.n	80104be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010464:	7bbb      	ldrb	r3, [r7, #14]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d00d      	beq.n	8010486 <USBD_StdEPReq+0x90>
 801046a:	7bbb      	ldrb	r3, [r7, #14]
 801046c:	2b80      	cmp	r3, #128	; 0x80
 801046e:	d00a      	beq.n	8010486 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010470:	7bbb      	ldrb	r3, [r7, #14]
 8010472:	4619      	mov	r1, r3
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f003 fc9a 	bl	8013dae <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801047a:	2180      	movs	r1, #128	; 0x80
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f003 fc96 	bl	8013dae <USBD_LL_StallEP>
 8010482:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010484:	e020      	b.n	80104c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8010486:	6839      	ldr	r1, [r7, #0]
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 fc6f 	bl	8010d6c <USBD_CtlError>
              break;
 801048e:	e01b      	b.n	80104c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	885b      	ldrh	r3, [r3, #2]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d10e      	bne.n	80104b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010498:	7bbb      	ldrb	r3, [r7, #14]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d00b      	beq.n	80104b6 <USBD_StdEPReq+0xc0>
 801049e:	7bbb      	ldrb	r3, [r7, #14]
 80104a0:	2b80      	cmp	r3, #128	; 0x80
 80104a2:	d008      	beq.n	80104b6 <USBD_StdEPReq+0xc0>
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	88db      	ldrh	r3, [r3, #6]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d104      	bne.n	80104b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80104ac:	7bbb      	ldrb	r3, [r7, #14]
 80104ae:	4619      	mov	r1, r3
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f003 fc7c 	bl	8013dae <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f000 fd06 	bl	8010ec8 <USBD_CtlSendStatus>

              break;
 80104bc:	e004      	b.n	80104c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80104be:	6839      	ldr	r1, [r7, #0]
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f000 fc53 	bl	8010d6c <USBD_CtlError>
              break;
 80104c6:	bf00      	nop
          }
          break;
 80104c8:	e0ec      	b.n	80106a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104d0:	b2db      	uxtb	r3, r3
 80104d2:	2b02      	cmp	r3, #2
 80104d4:	d002      	beq.n	80104dc <USBD_StdEPReq+0xe6>
 80104d6:	2b03      	cmp	r3, #3
 80104d8:	d016      	beq.n	8010508 <USBD_StdEPReq+0x112>
 80104da:	e030      	b.n	801053e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80104dc:	7bbb      	ldrb	r3, [r7, #14]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00d      	beq.n	80104fe <USBD_StdEPReq+0x108>
 80104e2:	7bbb      	ldrb	r3, [r7, #14]
 80104e4:	2b80      	cmp	r3, #128	; 0x80
 80104e6:	d00a      	beq.n	80104fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80104e8:	7bbb      	ldrb	r3, [r7, #14]
 80104ea:	4619      	mov	r1, r3
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f003 fc5e 	bl	8013dae <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80104f2:	2180      	movs	r1, #128	; 0x80
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f003 fc5a 	bl	8013dae <USBD_LL_StallEP>
 80104fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80104fc:	e025      	b.n	801054a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80104fe:	6839      	ldr	r1, [r7, #0]
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f000 fc33 	bl	8010d6c <USBD_CtlError>
              break;
 8010506:	e020      	b.n	801054a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	885b      	ldrh	r3, [r3, #2]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d11b      	bne.n	8010548 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010510:	7bbb      	ldrb	r3, [r7, #14]
 8010512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010516:	2b00      	cmp	r3, #0
 8010518:	d004      	beq.n	8010524 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801051a:	7bbb      	ldrb	r3, [r7, #14]
 801051c:	4619      	mov	r1, r3
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f003 fc64 	bl	8013dec <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f000 fccf 	bl	8010ec8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010530:	689b      	ldr	r3, [r3, #8]
 8010532:	6839      	ldr	r1, [r7, #0]
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	4798      	blx	r3
 8010538:	4603      	mov	r3, r0
 801053a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801053c:	e004      	b.n	8010548 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801053e:	6839      	ldr	r1, [r7, #0]
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 fc13 	bl	8010d6c <USBD_CtlError>
              break;
 8010546:	e000      	b.n	801054a <USBD_StdEPReq+0x154>
              break;
 8010548:	bf00      	nop
          }
          break;
 801054a:	e0ab      	b.n	80106a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010552:	b2db      	uxtb	r3, r3
 8010554:	2b02      	cmp	r3, #2
 8010556:	d002      	beq.n	801055e <USBD_StdEPReq+0x168>
 8010558:	2b03      	cmp	r3, #3
 801055a:	d032      	beq.n	80105c2 <USBD_StdEPReq+0x1cc>
 801055c:	e097      	b.n	801068e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801055e:	7bbb      	ldrb	r3, [r7, #14]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d007      	beq.n	8010574 <USBD_StdEPReq+0x17e>
 8010564:	7bbb      	ldrb	r3, [r7, #14]
 8010566:	2b80      	cmp	r3, #128	; 0x80
 8010568:	d004      	beq.n	8010574 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801056a:	6839      	ldr	r1, [r7, #0]
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f000 fbfd 	bl	8010d6c <USBD_CtlError>
                break;
 8010572:	e091      	b.n	8010698 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010578:	2b00      	cmp	r3, #0
 801057a:	da0b      	bge.n	8010594 <USBD_StdEPReq+0x19e>
 801057c:	7bbb      	ldrb	r3, [r7, #14]
 801057e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010582:	4613      	mov	r3, r2
 8010584:	009b      	lsls	r3, r3, #2
 8010586:	4413      	add	r3, r2
 8010588:	009b      	lsls	r3, r3, #2
 801058a:	3310      	adds	r3, #16
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	4413      	add	r3, r2
 8010590:	3304      	adds	r3, #4
 8010592:	e00b      	b.n	80105ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010594:	7bbb      	ldrb	r3, [r7, #14]
 8010596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801059a:	4613      	mov	r3, r2
 801059c:	009b      	lsls	r3, r3, #2
 801059e:	4413      	add	r3, r2
 80105a0:	009b      	lsls	r3, r3, #2
 80105a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	4413      	add	r3, r2
 80105aa:	3304      	adds	r3, #4
 80105ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	2200      	movs	r2, #0
 80105b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	2202      	movs	r2, #2
 80105b8:	4619      	mov	r1, r3
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 fc47 	bl	8010e4e <USBD_CtlSendData>
              break;
 80105c0:	e06a      	b.n	8010698 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80105c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	da11      	bge.n	80105ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80105ca:	7bbb      	ldrb	r3, [r7, #14]
 80105cc:	f003 020f 	and.w	r2, r3, #15
 80105d0:	6879      	ldr	r1, [r7, #4]
 80105d2:	4613      	mov	r3, r2
 80105d4:	009b      	lsls	r3, r3, #2
 80105d6:	4413      	add	r3, r2
 80105d8:	009b      	lsls	r3, r3, #2
 80105da:	440b      	add	r3, r1
 80105dc:	3324      	adds	r3, #36	; 0x24
 80105de:	881b      	ldrh	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d117      	bne.n	8010614 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80105e4:	6839      	ldr	r1, [r7, #0]
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f000 fbc0 	bl	8010d6c <USBD_CtlError>
                  break;
 80105ec:	e054      	b.n	8010698 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80105ee:	7bbb      	ldrb	r3, [r7, #14]
 80105f0:	f003 020f 	and.w	r2, r3, #15
 80105f4:	6879      	ldr	r1, [r7, #4]
 80105f6:	4613      	mov	r3, r2
 80105f8:	009b      	lsls	r3, r3, #2
 80105fa:	4413      	add	r3, r2
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	440b      	add	r3, r1
 8010600:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010604:	881b      	ldrh	r3, [r3, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d104      	bne.n	8010614 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801060a:	6839      	ldr	r1, [r7, #0]
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f000 fbad 	bl	8010d6c <USBD_CtlError>
                  break;
 8010612:	e041      	b.n	8010698 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010618:	2b00      	cmp	r3, #0
 801061a:	da0b      	bge.n	8010634 <USBD_StdEPReq+0x23e>
 801061c:	7bbb      	ldrb	r3, [r7, #14]
 801061e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010622:	4613      	mov	r3, r2
 8010624:	009b      	lsls	r3, r3, #2
 8010626:	4413      	add	r3, r2
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	3310      	adds	r3, #16
 801062c:	687a      	ldr	r2, [r7, #4]
 801062e:	4413      	add	r3, r2
 8010630:	3304      	adds	r3, #4
 8010632:	e00b      	b.n	801064c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010634:	7bbb      	ldrb	r3, [r7, #14]
 8010636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801063a:	4613      	mov	r3, r2
 801063c:	009b      	lsls	r3, r3, #2
 801063e:	4413      	add	r3, r2
 8010640:	009b      	lsls	r3, r3, #2
 8010642:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010646:	687a      	ldr	r2, [r7, #4]
 8010648:	4413      	add	r3, r2
 801064a:	3304      	adds	r3, #4
 801064c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801064e:	7bbb      	ldrb	r3, [r7, #14]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d002      	beq.n	801065a <USBD_StdEPReq+0x264>
 8010654:	7bbb      	ldrb	r3, [r7, #14]
 8010656:	2b80      	cmp	r3, #128	; 0x80
 8010658:	d103      	bne.n	8010662 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	2200      	movs	r2, #0
 801065e:	601a      	str	r2, [r3, #0]
 8010660:	e00e      	b.n	8010680 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010662:	7bbb      	ldrb	r3, [r7, #14]
 8010664:	4619      	mov	r1, r3
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f003 fbdf 	bl	8013e2a <USBD_LL_IsStallEP>
 801066c:	4603      	mov	r3, r0
 801066e:	2b00      	cmp	r3, #0
 8010670:	d003      	beq.n	801067a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	2201      	movs	r2, #1
 8010676:	601a      	str	r2, [r3, #0]
 8010678:	e002      	b.n	8010680 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	2200      	movs	r2, #0
 801067e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	2202      	movs	r2, #2
 8010684:	4619      	mov	r1, r3
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f000 fbe1 	bl	8010e4e <USBD_CtlSendData>
              break;
 801068c:	e004      	b.n	8010698 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801068e:	6839      	ldr	r1, [r7, #0]
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f000 fb6b 	bl	8010d6c <USBD_CtlError>
              break;
 8010696:	bf00      	nop
          }
          break;
 8010698:	e004      	b.n	80106a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801069a:	6839      	ldr	r1, [r7, #0]
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f000 fb65 	bl	8010d6c <USBD_CtlError>
          break;
 80106a2:	bf00      	nop
      }
      break;
 80106a4:	e004      	b.n	80106b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80106a6:	6839      	ldr	r1, [r7, #0]
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f000 fb5f 	bl	8010d6c <USBD_CtlError>
      break;
 80106ae:	bf00      	nop
  }

  return ret;
 80106b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3710      	adds	r7, #16
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
	...

080106bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80106c6:	2300      	movs	r3, #0
 80106c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80106ca:	2300      	movs	r3, #0
 80106cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80106ce:	2300      	movs	r3, #0
 80106d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	885b      	ldrh	r3, [r3, #2]
 80106d6:	0a1b      	lsrs	r3, r3, #8
 80106d8:	b29b      	uxth	r3, r3
 80106da:	3b01      	subs	r3, #1
 80106dc:	2b0e      	cmp	r3, #14
 80106de:	f200 8152 	bhi.w	8010986 <USBD_GetDescriptor+0x2ca>
 80106e2:	a201      	add	r2, pc, #4	; (adr r2, 80106e8 <USBD_GetDescriptor+0x2c>)
 80106e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106e8:	08010759 	.word	0x08010759
 80106ec:	08010771 	.word	0x08010771
 80106f0:	080107b1 	.word	0x080107b1
 80106f4:	08010987 	.word	0x08010987
 80106f8:	08010987 	.word	0x08010987
 80106fc:	08010927 	.word	0x08010927
 8010700:	08010953 	.word	0x08010953
 8010704:	08010987 	.word	0x08010987
 8010708:	08010987 	.word	0x08010987
 801070c:	08010987 	.word	0x08010987
 8010710:	08010987 	.word	0x08010987
 8010714:	08010987 	.word	0x08010987
 8010718:	08010987 	.word	0x08010987
 801071c:	08010987 	.word	0x08010987
 8010720:	08010725 	.word	0x08010725
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801072a:	69db      	ldr	r3, [r3, #28]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d00b      	beq.n	8010748 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010736:	69db      	ldr	r3, [r3, #28]
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	7c12      	ldrb	r2, [r2, #16]
 801073c:	f107 0108 	add.w	r1, r7, #8
 8010740:	4610      	mov	r0, r2
 8010742:	4798      	blx	r3
 8010744:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010746:	e126      	b.n	8010996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010748:	6839      	ldr	r1, [r7, #0]
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 fb0e 	bl	8010d6c <USBD_CtlError>
        err++;
 8010750:	7afb      	ldrb	r3, [r7, #11]
 8010752:	3301      	adds	r3, #1
 8010754:	72fb      	strb	r3, [r7, #11]
      break;
 8010756:	e11e      	b.n	8010996 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	687a      	ldr	r2, [r7, #4]
 8010762:	7c12      	ldrb	r2, [r2, #16]
 8010764:	f107 0108 	add.w	r1, r7, #8
 8010768:	4610      	mov	r0, r2
 801076a:	4798      	blx	r3
 801076c:	60f8      	str	r0, [r7, #12]
      break;
 801076e:	e112      	b.n	8010996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	7c1b      	ldrb	r3, [r3, #16]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d10d      	bne.n	8010794 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801077e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010780:	f107 0208 	add.w	r2, r7, #8
 8010784:	4610      	mov	r0, r2
 8010786:	4798      	blx	r3
 8010788:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	3301      	adds	r3, #1
 801078e:	2202      	movs	r2, #2
 8010790:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010792:	e100      	b.n	8010996 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801079a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801079c:	f107 0208 	add.w	r2, r7, #8
 80107a0:	4610      	mov	r0, r2
 80107a2:	4798      	blx	r3
 80107a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	3301      	adds	r3, #1
 80107aa:	2202      	movs	r2, #2
 80107ac:	701a      	strb	r2, [r3, #0]
      break;
 80107ae:	e0f2      	b.n	8010996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	885b      	ldrh	r3, [r3, #2]
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	2b05      	cmp	r3, #5
 80107b8:	f200 80ac 	bhi.w	8010914 <USBD_GetDescriptor+0x258>
 80107bc:	a201      	add	r2, pc, #4	; (adr r2, 80107c4 <USBD_GetDescriptor+0x108>)
 80107be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c2:	bf00      	nop
 80107c4:	080107dd 	.word	0x080107dd
 80107c8:	08010811 	.word	0x08010811
 80107cc:	08010845 	.word	0x08010845
 80107d0:	08010879 	.word	0x08010879
 80107d4:	080108ad 	.word	0x080108ad
 80107d8:	080108e1 	.word	0x080108e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d00b      	beq.n	8010800 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	687a      	ldr	r2, [r7, #4]
 80107f2:	7c12      	ldrb	r2, [r2, #16]
 80107f4:	f107 0108 	add.w	r1, r7, #8
 80107f8:	4610      	mov	r0, r2
 80107fa:	4798      	blx	r3
 80107fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80107fe:	e091      	b.n	8010924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010800:	6839      	ldr	r1, [r7, #0]
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 fab2 	bl	8010d6c <USBD_CtlError>
            err++;
 8010808:	7afb      	ldrb	r3, [r7, #11]
 801080a:	3301      	adds	r3, #1
 801080c:	72fb      	strb	r3, [r7, #11]
          break;
 801080e:	e089      	b.n	8010924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010816:	689b      	ldr	r3, [r3, #8]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00b      	beq.n	8010834 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010822:	689b      	ldr	r3, [r3, #8]
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	7c12      	ldrb	r2, [r2, #16]
 8010828:	f107 0108 	add.w	r1, r7, #8
 801082c:	4610      	mov	r0, r2
 801082e:	4798      	blx	r3
 8010830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010832:	e077      	b.n	8010924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010834:	6839      	ldr	r1, [r7, #0]
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 fa98 	bl	8010d6c <USBD_CtlError>
            err++;
 801083c:	7afb      	ldrb	r3, [r7, #11]
 801083e:	3301      	adds	r3, #1
 8010840:	72fb      	strb	r3, [r7, #11]
          break;
 8010842:	e06f      	b.n	8010924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801084a:	68db      	ldr	r3, [r3, #12]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d00b      	beq.n	8010868 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010856:	68db      	ldr	r3, [r3, #12]
 8010858:	687a      	ldr	r2, [r7, #4]
 801085a:	7c12      	ldrb	r2, [r2, #16]
 801085c:	f107 0108 	add.w	r1, r7, #8
 8010860:	4610      	mov	r0, r2
 8010862:	4798      	blx	r3
 8010864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010866:	e05d      	b.n	8010924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010868:	6839      	ldr	r1, [r7, #0]
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f000 fa7e 	bl	8010d6c <USBD_CtlError>
            err++;
 8010870:	7afb      	ldrb	r3, [r7, #11]
 8010872:	3301      	adds	r3, #1
 8010874:	72fb      	strb	r3, [r7, #11]
          break;
 8010876:	e055      	b.n	8010924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801087e:	691b      	ldr	r3, [r3, #16]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d00b      	beq.n	801089c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801088a:	691b      	ldr	r3, [r3, #16]
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	7c12      	ldrb	r2, [r2, #16]
 8010890:	f107 0108 	add.w	r1, r7, #8
 8010894:	4610      	mov	r0, r2
 8010896:	4798      	blx	r3
 8010898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801089a:	e043      	b.n	8010924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801089c:	6839      	ldr	r1, [r7, #0]
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f000 fa64 	bl	8010d6c <USBD_CtlError>
            err++;
 80108a4:	7afb      	ldrb	r3, [r7, #11]
 80108a6:	3301      	adds	r3, #1
 80108a8:	72fb      	strb	r3, [r7, #11]
          break;
 80108aa:	e03b      	b.n	8010924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80108b2:	695b      	ldr	r3, [r3, #20]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00b      	beq.n	80108d0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80108be:	695b      	ldr	r3, [r3, #20]
 80108c0:	687a      	ldr	r2, [r7, #4]
 80108c2:	7c12      	ldrb	r2, [r2, #16]
 80108c4:	f107 0108 	add.w	r1, r7, #8
 80108c8:	4610      	mov	r0, r2
 80108ca:	4798      	blx	r3
 80108cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80108ce:	e029      	b.n	8010924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80108d0:	6839      	ldr	r1, [r7, #0]
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f000 fa4a 	bl	8010d6c <USBD_CtlError>
            err++;
 80108d8:	7afb      	ldrb	r3, [r7, #11]
 80108da:	3301      	adds	r3, #1
 80108dc:	72fb      	strb	r3, [r7, #11]
          break;
 80108de:	e021      	b.n	8010924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80108e6:	699b      	ldr	r3, [r3, #24]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d00b      	beq.n	8010904 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80108f2:	699b      	ldr	r3, [r3, #24]
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	7c12      	ldrb	r2, [r2, #16]
 80108f8:	f107 0108 	add.w	r1, r7, #8
 80108fc:	4610      	mov	r0, r2
 80108fe:	4798      	blx	r3
 8010900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010902:	e00f      	b.n	8010924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010904:	6839      	ldr	r1, [r7, #0]
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f000 fa30 	bl	8010d6c <USBD_CtlError>
            err++;
 801090c:	7afb      	ldrb	r3, [r7, #11]
 801090e:	3301      	adds	r3, #1
 8010910:	72fb      	strb	r3, [r7, #11]
          break;
 8010912:	e007      	b.n	8010924 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010914:	6839      	ldr	r1, [r7, #0]
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 fa28 	bl	8010d6c <USBD_CtlError>
          err++;
 801091c:	7afb      	ldrb	r3, [r7, #11]
 801091e:	3301      	adds	r3, #1
 8010920:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010922:	bf00      	nop
      }
      break;
 8010924:	e037      	b.n	8010996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	7c1b      	ldrb	r3, [r3, #16]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d109      	bne.n	8010942 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010936:	f107 0208 	add.w	r2, r7, #8
 801093a:	4610      	mov	r0, r2
 801093c:	4798      	blx	r3
 801093e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010940:	e029      	b.n	8010996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010942:	6839      	ldr	r1, [r7, #0]
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 fa11 	bl	8010d6c <USBD_CtlError>
        err++;
 801094a:	7afb      	ldrb	r3, [r7, #11]
 801094c:	3301      	adds	r3, #1
 801094e:	72fb      	strb	r3, [r7, #11]
      break;
 8010950:	e021      	b.n	8010996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	7c1b      	ldrb	r3, [r3, #16]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d10d      	bne.n	8010976 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010962:	f107 0208 	add.w	r2, r7, #8
 8010966:	4610      	mov	r0, r2
 8010968:	4798      	blx	r3
 801096a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	3301      	adds	r3, #1
 8010970:	2207      	movs	r2, #7
 8010972:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010974:	e00f      	b.n	8010996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010976:	6839      	ldr	r1, [r7, #0]
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f000 f9f7 	bl	8010d6c <USBD_CtlError>
        err++;
 801097e:	7afb      	ldrb	r3, [r7, #11]
 8010980:	3301      	adds	r3, #1
 8010982:	72fb      	strb	r3, [r7, #11]
      break;
 8010984:	e007      	b.n	8010996 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010986:	6839      	ldr	r1, [r7, #0]
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f000 f9ef 	bl	8010d6c <USBD_CtlError>
      err++;
 801098e:	7afb      	ldrb	r3, [r7, #11]
 8010990:	3301      	adds	r3, #1
 8010992:	72fb      	strb	r3, [r7, #11]
      break;
 8010994:	bf00      	nop
  }

  if (err != 0U)
 8010996:	7afb      	ldrb	r3, [r7, #11]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d11e      	bne.n	80109da <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	88db      	ldrh	r3, [r3, #6]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d016      	beq.n	80109d2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80109a4:	893b      	ldrh	r3, [r7, #8]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d00e      	beq.n	80109c8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	88da      	ldrh	r2, [r3, #6]
 80109ae:	893b      	ldrh	r3, [r7, #8]
 80109b0:	4293      	cmp	r3, r2
 80109b2:	bf28      	it	cs
 80109b4:	4613      	movcs	r3, r2
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80109ba:	893b      	ldrh	r3, [r7, #8]
 80109bc:	461a      	mov	r2, r3
 80109be:	68f9      	ldr	r1, [r7, #12]
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f000 fa44 	bl	8010e4e <USBD_CtlSendData>
 80109c6:	e009      	b.n	80109dc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80109c8:	6839      	ldr	r1, [r7, #0]
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f000 f9ce 	bl	8010d6c <USBD_CtlError>
 80109d0:	e004      	b.n	80109dc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f000 fa78 	bl	8010ec8 <USBD_CtlSendStatus>
 80109d8:	e000      	b.n	80109dc <USBD_GetDescriptor+0x320>
    return;
 80109da:	bf00      	nop
  }
}
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop

080109e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	889b      	ldrh	r3, [r3, #4]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d131      	bne.n	8010a5a <USBD_SetAddress+0x76>
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	88db      	ldrh	r3, [r3, #6]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d12d      	bne.n	8010a5a <USBD_SetAddress+0x76>
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	885b      	ldrh	r3, [r3, #2]
 8010a02:	2b7f      	cmp	r3, #127	; 0x7f
 8010a04:	d829      	bhi.n	8010a5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	885b      	ldrh	r3, [r3, #2]
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	2b03      	cmp	r3, #3
 8010a1c:	d104      	bne.n	8010a28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010a1e:	6839      	ldr	r1, [r7, #0]
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f000 f9a3 	bl	8010d6c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a26:	e01d      	b.n	8010a64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	7bfa      	ldrb	r2, [r7, #15]
 8010a2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010a30:	7bfb      	ldrb	r3, [r7, #15]
 8010a32:	4619      	mov	r1, r3
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f003 fa24 	bl	8013e82 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fa44 	bl	8010ec8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010a40:	7bfb      	ldrb	r3, [r7, #15]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d004      	beq.n	8010a50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2202      	movs	r2, #2
 8010a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a4e:	e009      	b.n	8010a64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2201      	movs	r2, #1
 8010a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a58:	e004      	b.n	8010a64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010a5a:	6839      	ldr	r1, [r7, #0]
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f000 f985 	bl	8010d6c <USBD_CtlError>
  }
}
 8010a62:	bf00      	nop
 8010a64:	bf00      	nop
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b084      	sub	sp, #16
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a76:	2300      	movs	r3, #0
 8010a78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	885b      	ldrh	r3, [r3, #2]
 8010a7e:	b2da      	uxtb	r2, r3
 8010a80:	4b4c      	ldr	r3, [pc, #304]	; (8010bb4 <USBD_SetConfig+0x148>)
 8010a82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010a84:	4b4b      	ldr	r3, [pc, #300]	; (8010bb4 <USBD_SetConfig+0x148>)
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	d905      	bls.n	8010a98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010a8c:	6839      	ldr	r1, [r7, #0]
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f000 f96c 	bl	8010d6c <USBD_CtlError>
    return USBD_FAIL;
 8010a94:	2303      	movs	r3, #3
 8010a96:	e088      	b.n	8010baa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a9e:	b2db      	uxtb	r3, r3
 8010aa0:	2b02      	cmp	r3, #2
 8010aa2:	d002      	beq.n	8010aaa <USBD_SetConfig+0x3e>
 8010aa4:	2b03      	cmp	r3, #3
 8010aa6:	d025      	beq.n	8010af4 <USBD_SetConfig+0x88>
 8010aa8:	e071      	b.n	8010b8e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010aaa:	4b42      	ldr	r3, [pc, #264]	; (8010bb4 <USBD_SetConfig+0x148>)
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d01c      	beq.n	8010aec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8010ab2:	4b40      	ldr	r3, [pc, #256]	; (8010bb4 <USBD_SetConfig+0x148>)
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010abc:	4b3d      	ldr	r3, [pc, #244]	; (8010bb4 <USBD_SetConfig+0x148>)
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f7ff f91f 	bl	800fd06 <USBD_SetClassConfig>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010acc:	7bfb      	ldrb	r3, [r7, #15]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d004      	beq.n	8010adc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8010ad2:	6839      	ldr	r1, [r7, #0]
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f000 f949 	bl	8010d6c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010ada:	e065      	b.n	8010ba8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f000 f9f3 	bl	8010ec8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2203      	movs	r2, #3
 8010ae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010aea:	e05d      	b.n	8010ba8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f000 f9eb 	bl	8010ec8 <USBD_CtlSendStatus>
      break;
 8010af2:	e059      	b.n	8010ba8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010af4:	4b2f      	ldr	r3, [pc, #188]	; (8010bb4 <USBD_SetConfig+0x148>)
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d112      	bne.n	8010b22 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2202      	movs	r2, #2
 8010b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010b04:	4b2b      	ldr	r3, [pc, #172]	; (8010bb4 <USBD_SetConfig+0x148>)
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	461a      	mov	r2, r3
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010b0e:	4b29      	ldr	r3, [pc, #164]	; (8010bb4 <USBD_SetConfig+0x148>)
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	4619      	mov	r1, r3
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f7ff f912 	bl	800fd3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f000 f9d4 	bl	8010ec8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010b20:	e042      	b.n	8010ba8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010b22:	4b24      	ldr	r3, [pc, #144]	; (8010bb4 <USBD_SetConfig+0x148>)
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	461a      	mov	r2, r3
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d02a      	beq.n	8010b86 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	685b      	ldr	r3, [r3, #4]
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	4619      	mov	r1, r3
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f7ff f900 	bl	800fd3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010b3e:	4b1d      	ldr	r3, [pc, #116]	; (8010bb4 <USBD_SetConfig+0x148>)
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	461a      	mov	r2, r3
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010b48:	4b1a      	ldr	r3, [pc, #104]	; (8010bb4 <USBD_SetConfig+0x148>)
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f7ff f8d9 	bl	800fd06 <USBD_SetClassConfig>
 8010b54:	4603      	mov	r3, r0
 8010b56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010b58:	7bfb      	ldrb	r3, [r7, #15]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d00f      	beq.n	8010b7e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010b5e:	6839      	ldr	r1, [r7, #0]
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f000 f903 	bl	8010d6c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f7ff f8e5 	bl	800fd3e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2202      	movs	r2, #2
 8010b78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010b7c:	e014      	b.n	8010ba8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 f9a2 	bl	8010ec8 <USBD_CtlSendStatus>
      break;
 8010b84:	e010      	b.n	8010ba8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 f99e 	bl	8010ec8 <USBD_CtlSendStatus>
      break;
 8010b8c:	e00c      	b.n	8010ba8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010b8e:	6839      	ldr	r1, [r7, #0]
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f000 f8eb 	bl	8010d6c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010b96:	4b07      	ldr	r3, [pc, #28]	; (8010bb4 <USBD_SetConfig+0x148>)
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f7ff f8ce 	bl	800fd3e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010ba2:	2303      	movs	r3, #3
 8010ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8010ba6:	bf00      	nop
  }

  return ret;
 8010ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	20000200 	.word	0x20000200

08010bb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	88db      	ldrh	r3, [r3, #6]
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d004      	beq.n	8010bd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010bca:	6839      	ldr	r1, [r7, #0]
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 f8cd 	bl	8010d6c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010bd2:	e023      	b.n	8010c1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bda:	b2db      	uxtb	r3, r3
 8010bdc:	2b02      	cmp	r3, #2
 8010bde:	dc02      	bgt.n	8010be6 <USBD_GetConfig+0x2e>
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	dc03      	bgt.n	8010bec <USBD_GetConfig+0x34>
 8010be4:	e015      	b.n	8010c12 <USBD_GetConfig+0x5a>
 8010be6:	2b03      	cmp	r3, #3
 8010be8:	d00b      	beq.n	8010c02 <USBD_GetConfig+0x4a>
 8010bea:	e012      	b.n	8010c12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	3308      	adds	r3, #8
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f000 f927 	bl	8010e4e <USBD_CtlSendData>
        break;
 8010c00:	e00c      	b.n	8010c1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	3304      	adds	r3, #4
 8010c06:	2201      	movs	r2, #1
 8010c08:	4619      	mov	r1, r3
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f000 f91f 	bl	8010e4e <USBD_CtlSendData>
        break;
 8010c10:	e004      	b.n	8010c1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010c12:	6839      	ldr	r1, [r7, #0]
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f000 f8a9 	bl	8010d6c <USBD_CtlError>
        break;
 8010c1a:	bf00      	nop
}
 8010c1c:	bf00      	nop
 8010c1e:	3708      	adds	r7, #8
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	3b01      	subs	r3, #1
 8010c38:	2b02      	cmp	r3, #2
 8010c3a:	d81e      	bhi.n	8010c7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	88db      	ldrh	r3, [r3, #6]
 8010c40:	2b02      	cmp	r3, #2
 8010c42:	d004      	beq.n	8010c4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010c44:	6839      	ldr	r1, [r7, #0]
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 f890 	bl	8010d6c <USBD_CtlError>
        break;
 8010c4c:	e01a      	b.n	8010c84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2201      	movs	r2, #1
 8010c52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d005      	beq.n	8010c6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	f043 0202 	orr.w	r2, r3, #2
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	330c      	adds	r3, #12
 8010c6e:	2202      	movs	r2, #2
 8010c70:	4619      	mov	r1, r3
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f000 f8eb 	bl	8010e4e <USBD_CtlSendData>
      break;
 8010c78:	e004      	b.n	8010c84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010c7a:	6839      	ldr	r1, [r7, #0]
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f000 f875 	bl	8010d6c <USBD_CtlError>
      break;
 8010c82:	bf00      	nop
  }
}
 8010c84:	bf00      	nop
 8010c86:	3708      	adds	r7, #8
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	885b      	ldrh	r3, [r3, #2]
 8010c9a:	2b01      	cmp	r3, #1
 8010c9c:	d106      	bne.n	8010cac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f000 f90e 	bl	8010ec8 <USBD_CtlSendStatus>
  }
}
 8010cac:	bf00      	nop
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}

08010cb4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	3b01      	subs	r3, #1
 8010cc8:	2b02      	cmp	r3, #2
 8010cca:	d80b      	bhi.n	8010ce4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	885b      	ldrh	r3, [r3, #2]
 8010cd0:	2b01      	cmp	r3, #1
 8010cd2:	d10c      	bne.n	8010cee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f000 f8f3 	bl	8010ec8 <USBD_CtlSendStatus>
      }
      break;
 8010ce2:	e004      	b.n	8010cee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010ce4:	6839      	ldr	r1, [r7, #0]
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 f840 	bl	8010d6c <USBD_CtlError>
      break;
 8010cec:	e000      	b.n	8010cf0 <USBD_ClrFeature+0x3c>
      break;
 8010cee:	bf00      	nop
  }
}
 8010cf0:	bf00      	nop
 8010cf2:	3708      	adds	r7, #8
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}

08010cf8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b084      	sub	sp, #16
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	781a      	ldrb	r2, [r3, #0]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	3301      	adds	r3, #1
 8010d12:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	781a      	ldrb	r2, [r3, #0]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	3301      	adds	r3, #1
 8010d20:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010d22:	68f8      	ldr	r0, [r7, #12]
 8010d24:	f7ff fa92 	bl	801024c <SWAPBYTE>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	3301      	adds	r3, #1
 8010d34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010d3c:	68f8      	ldr	r0, [r7, #12]
 8010d3e:	f7ff fa85 	bl	801024c <SWAPBYTE>
 8010d42:	4603      	mov	r3, r0
 8010d44:	461a      	mov	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	3301      	adds	r3, #1
 8010d4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	3301      	adds	r3, #1
 8010d54:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010d56:	68f8      	ldr	r0, [r7, #12]
 8010d58:	f7ff fa78 	bl	801024c <SWAPBYTE>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	461a      	mov	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	80da      	strh	r2, [r3, #6]
}
 8010d64:	bf00      	nop
 8010d66:	3710      	adds	r7, #16
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010d76:	2180      	movs	r1, #128	; 0x80
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f003 f818 	bl	8013dae <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010d7e:	2100      	movs	r1, #0
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f003 f814 	bl	8013dae <USBD_LL_StallEP>
}
 8010d86:	bf00      	nop
 8010d88:	3708      	adds	r7, #8
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b086      	sub	sp, #24
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	60f8      	str	r0, [r7, #12]
 8010d96:	60b9      	str	r1, [r7, #8]
 8010d98:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d036      	beq.n	8010e12 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010da8:	6938      	ldr	r0, [r7, #16]
 8010daa:	f000 f836 	bl	8010e1a <USBD_GetLen>
 8010dae:	4603      	mov	r3, r0
 8010db0:	3301      	adds	r3, #1
 8010db2:	b29b      	uxth	r3, r3
 8010db4:	005b      	lsls	r3, r3, #1
 8010db6:	b29a      	uxth	r2, r3
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010dbc:	7dfb      	ldrb	r3, [r7, #23]
 8010dbe:	68ba      	ldr	r2, [r7, #8]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	687a      	ldr	r2, [r7, #4]
 8010dc4:	7812      	ldrb	r2, [r2, #0]
 8010dc6:	701a      	strb	r2, [r3, #0]
  idx++;
 8010dc8:	7dfb      	ldrb	r3, [r7, #23]
 8010dca:	3301      	adds	r3, #1
 8010dcc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010dce:	7dfb      	ldrb	r3, [r7, #23]
 8010dd0:	68ba      	ldr	r2, [r7, #8]
 8010dd2:	4413      	add	r3, r2
 8010dd4:	2203      	movs	r2, #3
 8010dd6:	701a      	strb	r2, [r3, #0]
  idx++;
 8010dd8:	7dfb      	ldrb	r3, [r7, #23]
 8010dda:	3301      	adds	r3, #1
 8010ddc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010dde:	e013      	b.n	8010e08 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010de0:	7dfb      	ldrb	r3, [r7, #23]
 8010de2:	68ba      	ldr	r2, [r7, #8]
 8010de4:	4413      	add	r3, r2
 8010de6:	693a      	ldr	r2, [r7, #16]
 8010de8:	7812      	ldrb	r2, [r2, #0]
 8010dea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	3301      	adds	r3, #1
 8010df0:	613b      	str	r3, [r7, #16]
    idx++;
 8010df2:	7dfb      	ldrb	r3, [r7, #23]
 8010df4:	3301      	adds	r3, #1
 8010df6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010df8:	7dfb      	ldrb	r3, [r7, #23]
 8010dfa:	68ba      	ldr	r2, [r7, #8]
 8010dfc:	4413      	add	r3, r2
 8010dfe:	2200      	movs	r2, #0
 8010e00:	701a      	strb	r2, [r3, #0]
    idx++;
 8010e02:	7dfb      	ldrb	r3, [r7, #23]
 8010e04:	3301      	adds	r3, #1
 8010e06:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d1e7      	bne.n	8010de0 <USBD_GetString+0x52>
 8010e10:	e000      	b.n	8010e14 <USBD_GetString+0x86>
    return;
 8010e12:	bf00      	nop
  }
}
 8010e14:	3718      	adds	r7, #24
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}

08010e1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010e1a:	b480      	push	{r7}
 8010e1c:	b085      	sub	sp, #20
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010e22:	2300      	movs	r3, #0
 8010e24:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010e2a:	e005      	b.n	8010e38 <USBD_GetLen+0x1e>
  {
    len++;
 8010e2c:	7bfb      	ldrb	r3, [r7, #15]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	3301      	adds	r3, #1
 8010e36:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d1f5      	bne.n	8010e2c <USBD_GetLen+0x12>
  }

  return len;
 8010e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3714      	adds	r7, #20
 8010e46:	46bd      	mov	sp, r7
 8010e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4c:	4770      	bx	lr

08010e4e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010e4e:	b580      	push	{r7, lr}
 8010e50:	b084      	sub	sp, #16
 8010e52:	af00      	add	r7, sp, #0
 8010e54:	60f8      	str	r0, [r7, #12]
 8010e56:	60b9      	str	r1, [r7, #8]
 8010e58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	2202      	movs	r2, #2
 8010e5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	68ba      	ldr	r2, [r7, #8]
 8010e72:	2100      	movs	r1, #0
 8010e74:	68f8      	ldr	r0, [r7, #12]
 8010e76:	f003 f823 	bl	8013ec0 <USBD_LL_Transmit>

  return USBD_OK;
 8010e7a:	2300      	movs	r3, #0
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3710      	adds	r7, #16
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	68ba      	ldr	r2, [r7, #8]
 8010e94:	2100      	movs	r1, #0
 8010e96:	68f8      	ldr	r0, [r7, #12]
 8010e98:	f003 f812 	bl	8013ec0 <USBD_LL_Transmit>

  return USBD_OK;
 8010e9c:	2300      	movs	r3, #0
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3710      	adds	r7, #16
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}

08010ea6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010ea6:	b580      	push	{r7, lr}
 8010ea8:	b084      	sub	sp, #16
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	60f8      	str	r0, [r7, #12]
 8010eae:	60b9      	str	r1, [r7, #8]
 8010eb0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	68ba      	ldr	r2, [r7, #8]
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	68f8      	ldr	r0, [r7, #12]
 8010eba:	f003 f822 	bl	8013f02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010ebe:	2300      	movs	r3, #0
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3710      	adds	r7, #16
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}

08010ec8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b082      	sub	sp, #8
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2204      	movs	r2, #4
 8010ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010ed8:	2300      	movs	r3, #0
 8010eda:	2200      	movs	r2, #0
 8010edc:	2100      	movs	r1, #0
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f002 ffee 	bl	8013ec0 <USBD_LL_Transmit>

  return USBD_OK;
 8010ee4:	2300      	movs	r3, #0
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3708      	adds	r7, #8
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}

08010eee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010eee:	b580      	push	{r7, lr}
 8010ef0:	b082      	sub	sp, #8
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2205      	movs	r2, #5
 8010efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010efe:	2300      	movs	r3, #0
 8010f00:	2200      	movs	r2, #0
 8010f02:	2100      	movs	r1, #0
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f002 fffc 	bl	8013f02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010f0a:	2300      	movs	r3, #0
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3708      	adds	r7, #8
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}

08010f14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b084      	sub	sp, #16
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010f1e:	79fb      	ldrb	r3, [r7, #7]
 8010f20:	4a08      	ldr	r2, [pc, #32]	; (8010f44 <disk_status+0x30>)
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	4413      	add	r3, r2
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	685b      	ldr	r3, [r3, #4]
 8010f2a:	79fa      	ldrb	r2, [r7, #7]
 8010f2c:	4905      	ldr	r1, [pc, #20]	; (8010f44 <disk_status+0x30>)
 8010f2e:	440a      	add	r2, r1
 8010f30:	7a12      	ldrb	r2, [r2, #8]
 8010f32:	4610      	mov	r0, r2
 8010f34:	4798      	blx	r3
 8010f36:	4603      	mov	r3, r0
 8010f38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3710      	adds	r7, #16
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	2000022c 	.word	0x2000022c

08010f48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	4603      	mov	r3, r0
 8010f50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010f52:	2300      	movs	r3, #0
 8010f54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010f56:	79fb      	ldrb	r3, [r7, #7]
 8010f58:	4a0d      	ldr	r2, [pc, #52]	; (8010f90 <disk_initialize+0x48>)
 8010f5a:	5cd3      	ldrb	r3, [r2, r3]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d111      	bne.n	8010f84 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010f60:	79fb      	ldrb	r3, [r7, #7]
 8010f62:	4a0b      	ldr	r2, [pc, #44]	; (8010f90 <disk_initialize+0x48>)
 8010f64:	2101      	movs	r1, #1
 8010f66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010f68:	79fb      	ldrb	r3, [r7, #7]
 8010f6a:	4a09      	ldr	r2, [pc, #36]	; (8010f90 <disk_initialize+0x48>)
 8010f6c:	009b      	lsls	r3, r3, #2
 8010f6e:	4413      	add	r3, r2
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	79fa      	ldrb	r2, [r7, #7]
 8010f76:	4906      	ldr	r1, [pc, #24]	; (8010f90 <disk_initialize+0x48>)
 8010f78:	440a      	add	r2, r1
 8010f7a:	7a12      	ldrb	r2, [r2, #8]
 8010f7c:	4610      	mov	r0, r2
 8010f7e:	4798      	blx	r3
 8010f80:	4603      	mov	r3, r0
 8010f82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3710      	adds	r7, #16
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	2000022c 	.word	0x2000022c

08010f94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010f94:	b590      	push	{r4, r7, lr}
 8010f96:	b087      	sub	sp, #28
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	60b9      	str	r1, [r7, #8]
 8010f9c:	607a      	str	r2, [r7, #4]
 8010f9e:	603b      	str	r3, [r7, #0]
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010fa4:	7bfb      	ldrb	r3, [r7, #15]
 8010fa6:	4a0a      	ldr	r2, [pc, #40]	; (8010fd0 <disk_read+0x3c>)
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	4413      	add	r3, r2
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	689c      	ldr	r4, [r3, #8]
 8010fb0:	7bfb      	ldrb	r3, [r7, #15]
 8010fb2:	4a07      	ldr	r2, [pc, #28]	; (8010fd0 <disk_read+0x3c>)
 8010fb4:	4413      	add	r3, r2
 8010fb6:	7a18      	ldrb	r0, [r3, #8]
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	687a      	ldr	r2, [r7, #4]
 8010fbc:	68b9      	ldr	r1, [r7, #8]
 8010fbe:	47a0      	blx	r4
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	75fb      	strb	r3, [r7, #23]
  return res;
 8010fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	371c      	adds	r7, #28
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd90      	pop	{r4, r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	2000022c 	.word	0x2000022c

08010fd4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010fd4:	b590      	push	{r4, r7, lr}
 8010fd6:	b087      	sub	sp, #28
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	60b9      	str	r1, [r7, #8]
 8010fdc:	607a      	str	r2, [r7, #4]
 8010fde:	603b      	str	r3, [r7, #0]
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010fe4:	7bfb      	ldrb	r3, [r7, #15]
 8010fe6:	4a0a      	ldr	r2, [pc, #40]	; (8011010 <disk_write+0x3c>)
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	4413      	add	r3, r2
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	68dc      	ldr	r4, [r3, #12]
 8010ff0:	7bfb      	ldrb	r3, [r7, #15]
 8010ff2:	4a07      	ldr	r2, [pc, #28]	; (8011010 <disk_write+0x3c>)
 8010ff4:	4413      	add	r3, r2
 8010ff6:	7a18      	ldrb	r0, [r3, #8]
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	687a      	ldr	r2, [r7, #4]
 8010ffc:	68b9      	ldr	r1, [r7, #8]
 8010ffe:	47a0      	blx	r4
 8011000:	4603      	mov	r3, r0
 8011002:	75fb      	strb	r3, [r7, #23]
  return res;
 8011004:	7dfb      	ldrb	r3, [r7, #23]
}
 8011006:	4618      	mov	r0, r3
 8011008:	371c      	adds	r7, #28
 801100a:	46bd      	mov	sp, r7
 801100c:	bd90      	pop	{r4, r7, pc}
 801100e:	bf00      	nop
 8011010:	2000022c 	.word	0x2000022c

08011014 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b084      	sub	sp, #16
 8011018:	af00      	add	r7, sp, #0
 801101a:	4603      	mov	r3, r0
 801101c:	603a      	str	r2, [r7, #0]
 801101e:	71fb      	strb	r3, [r7, #7]
 8011020:	460b      	mov	r3, r1
 8011022:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011024:	79fb      	ldrb	r3, [r7, #7]
 8011026:	4a09      	ldr	r2, [pc, #36]	; (801104c <disk_ioctl+0x38>)
 8011028:	009b      	lsls	r3, r3, #2
 801102a:	4413      	add	r3, r2
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	691b      	ldr	r3, [r3, #16]
 8011030:	79fa      	ldrb	r2, [r7, #7]
 8011032:	4906      	ldr	r1, [pc, #24]	; (801104c <disk_ioctl+0x38>)
 8011034:	440a      	add	r2, r1
 8011036:	7a10      	ldrb	r0, [r2, #8]
 8011038:	79b9      	ldrb	r1, [r7, #6]
 801103a:	683a      	ldr	r2, [r7, #0]
 801103c:	4798      	blx	r3
 801103e:	4603      	mov	r3, r0
 8011040:	73fb      	strb	r3, [r7, #15]
  return res;
 8011042:	7bfb      	ldrb	r3, [r7, #15]
}
 8011044:	4618      	mov	r0, r3
 8011046:	3710      	adds	r7, #16
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	2000022c 	.word	0x2000022c

08011050 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011050:	b480      	push	{r7}
 8011052:	b085      	sub	sp, #20
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	3301      	adds	r3, #1
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011060:	89fb      	ldrh	r3, [r7, #14]
 8011062:	021b      	lsls	r3, r3, #8
 8011064:	b21a      	sxth	r2, r3
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	b21b      	sxth	r3, r3
 801106c:	4313      	orrs	r3, r2
 801106e:	b21b      	sxth	r3, r3
 8011070:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011072:	89fb      	ldrh	r3, [r7, #14]
}
 8011074:	4618      	mov	r0, r3
 8011076:	3714      	adds	r7, #20
 8011078:	46bd      	mov	sp, r7
 801107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107e:	4770      	bx	lr

08011080 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011080:	b480      	push	{r7}
 8011082:	b085      	sub	sp, #20
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	3303      	adds	r3, #3
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	021b      	lsls	r3, r3, #8
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	3202      	adds	r2, #2
 8011098:	7812      	ldrb	r2, [r2, #0]
 801109a:	4313      	orrs	r3, r2
 801109c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	021b      	lsls	r3, r3, #8
 80110a2:	687a      	ldr	r2, [r7, #4]
 80110a4:	3201      	adds	r2, #1
 80110a6:	7812      	ldrb	r2, [r2, #0]
 80110a8:	4313      	orrs	r3, r2
 80110aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	021b      	lsls	r3, r3, #8
 80110b0:	687a      	ldr	r2, [r7, #4]
 80110b2:	7812      	ldrb	r2, [r2, #0]
 80110b4:	4313      	orrs	r3, r2
 80110b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80110b8:	68fb      	ldr	r3, [r7, #12]
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3714      	adds	r7, #20
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr

080110c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80110c6:	b480      	push	{r7}
 80110c8:	b083      	sub	sp, #12
 80110ca:	af00      	add	r7, sp, #0
 80110cc:	6078      	str	r0, [r7, #4]
 80110ce:	460b      	mov	r3, r1
 80110d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	1c5a      	adds	r2, r3, #1
 80110d6:	607a      	str	r2, [r7, #4]
 80110d8:	887a      	ldrh	r2, [r7, #2]
 80110da:	b2d2      	uxtb	r2, r2
 80110dc:	701a      	strb	r2, [r3, #0]
 80110de:	887b      	ldrh	r3, [r7, #2]
 80110e0:	0a1b      	lsrs	r3, r3, #8
 80110e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	1c5a      	adds	r2, r3, #1
 80110e8:	607a      	str	r2, [r7, #4]
 80110ea:	887a      	ldrh	r2, [r7, #2]
 80110ec:	b2d2      	uxtb	r2, r2
 80110ee:	701a      	strb	r2, [r3, #0]
}
 80110f0:	bf00      	nop
 80110f2:	370c      	adds	r7, #12
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr

080110fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	1c5a      	adds	r2, r3, #1
 801110a:	607a      	str	r2, [r7, #4]
 801110c:	683a      	ldr	r2, [r7, #0]
 801110e:	b2d2      	uxtb	r2, r2
 8011110:	701a      	strb	r2, [r3, #0]
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	0a1b      	lsrs	r3, r3, #8
 8011116:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	1c5a      	adds	r2, r3, #1
 801111c:	607a      	str	r2, [r7, #4]
 801111e:	683a      	ldr	r2, [r7, #0]
 8011120:	b2d2      	uxtb	r2, r2
 8011122:	701a      	strb	r2, [r3, #0]
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	0a1b      	lsrs	r3, r3, #8
 8011128:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	1c5a      	adds	r2, r3, #1
 801112e:	607a      	str	r2, [r7, #4]
 8011130:	683a      	ldr	r2, [r7, #0]
 8011132:	b2d2      	uxtb	r2, r2
 8011134:	701a      	strb	r2, [r3, #0]
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	0a1b      	lsrs	r3, r3, #8
 801113a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	1c5a      	adds	r2, r3, #1
 8011140:	607a      	str	r2, [r7, #4]
 8011142:	683a      	ldr	r2, [r7, #0]
 8011144:	b2d2      	uxtb	r2, r2
 8011146:	701a      	strb	r2, [r3, #0]
}
 8011148:	bf00      	nop
 801114a:	370c      	adds	r7, #12
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr

08011154 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011154:	b480      	push	{r7}
 8011156:	b087      	sub	sp, #28
 8011158:	af00      	add	r7, sp, #0
 801115a:	60f8      	str	r0, [r7, #12]
 801115c:	60b9      	str	r1, [r7, #8]
 801115e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d00d      	beq.n	801118a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801116e:	693a      	ldr	r2, [r7, #16]
 8011170:	1c53      	adds	r3, r2, #1
 8011172:	613b      	str	r3, [r7, #16]
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	1c59      	adds	r1, r3, #1
 8011178:	6179      	str	r1, [r7, #20]
 801117a:	7812      	ldrb	r2, [r2, #0]
 801117c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	3b01      	subs	r3, #1
 8011182:	607b      	str	r3, [r7, #4]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d1f1      	bne.n	801116e <mem_cpy+0x1a>
	}
}
 801118a:	bf00      	nop
 801118c:	371c      	adds	r7, #28
 801118e:	46bd      	mov	sp, r7
 8011190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011194:	4770      	bx	lr

08011196 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011196:	b480      	push	{r7}
 8011198:	b087      	sub	sp, #28
 801119a:	af00      	add	r7, sp, #0
 801119c:	60f8      	str	r0, [r7, #12]
 801119e:	60b9      	str	r1, [r7, #8]
 80111a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	1c5a      	adds	r2, r3, #1
 80111aa:	617a      	str	r2, [r7, #20]
 80111ac:	68ba      	ldr	r2, [r7, #8]
 80111ae:	b2d2      	uxtb	r2, r2
 80111b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	3b01      	subs	r3, #1
 80111b6:	607b      	str	r3, [r7, #4]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d1f3      	bne.n	80111a6 <mem_set+0x10>
}
 80111be:	bf00      	nop
 80111c0:	bf00      	nop
 80111c2:	371c      	adds	r7, #28
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr

080111cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80111cc:	b480      	push	{r7}
 80111ce:	b089      	sub	sp, #36	; 0x24
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	60f8      	str	r0, [r7, #12]
 80111d4:	60b9      	str	r1, [r7, #8]
 80111d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	61fb      	str	r3, [r7, #28]
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80111e0:	2300      	movs	r3, #0
 80111e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	1c5a      	adds	r2, r3, #1
 80111e8:	61fa      	str	r2, [r7, #28]
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	4619      	mov	r1, r3
 80111ee:	69bb      	ldr	r3, [r7, #24]
 80111f0:	1c5a      	adds	r2, r3, #1
 80111f2:	61ba      	str	r2, [r7, #24]
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	1acb      	subs	r3, r1, r3
 80111f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	3b01      	subs	r3, #1
 80111fe:	607b      	str	r3, [r7, #4]
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d002      	beq.n	801120c <mem_cmp+0x40>
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d0eb      	beq.n	80111e4 <mem_cmp+0x18>

	return r;
 801120c:	697b      	ldr	r3, [r7, #20]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3724      	adds	r7, #36	; 0x24
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr

0801121a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801121a:	b480      	push	{r7}
 801121c:	b083      	sub	sp, #12
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
 8011222:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011224:	e002      	b.n	801122c <chk_chr+0x12>
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	3301      	adds	r3, #1
 801122a:	607b      	str	r3, [r7, #4]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d005      	beq.n	8011240 <chk_chr+0x26>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	461a      	mov	r2, r3
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	4293      	cmp	r3, r2
 801123e:	d1f2      	bne.n	8011226 <chk_chr+0xc>
	return *str;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	781b      	ldrb	r3, [r3, #0]
}
 8011244:	4618      	mov	r0, r3
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr

08011250 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011250:	b480      	push	{r7}
 8011252:	b085      	sub	sp, #20
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801125a:	2300      	movs	r3, #0
 801125c:	60bb      	str	r3, [r7, #8]
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	60fb      	str	r3, [r7, #12]
 8011262:	e029      	b.n	80112b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011264:	4a27      	ldr	r2, [pc, #156]	; (8011304 <chk_lock+0xb4>)
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	011b      	lsls	r3, r3, #4
 801126a:	4413      	add	r3, r2
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d01d      	beq.n	80112ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011272:	4a24      	ldr	r2, [pc, #144]	; (8011304 <chk_lock+0xb4>)
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	011b      	lsls	r3, r3, #4
 8011278:	4413      	add	r3, r2
 801127a:	681a      	ldr	r2, [r3, #0]
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	429a      	cmp	r2, r3
 8011282:	d116      	bne.n	80112b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011284:	4a1f      	ldr	r2, [pc, #124]	; (8011304 <chk_lock+0xb4>)
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	011b      	lsls	r3, r3, #4
 801128a:	4413      	add	r3, r2
 801128c:	3304      	adds	r3, #4
 801128e:	681a      	ldr	r2, [r3, #0]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011294:	429a      	cmp	r2, r3
 8011296:	d10c      	bne.n	80112b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011298:	4a1a      	ldr	r2, [pc, #104]	; (8011304 <chk_lock+0xb4>)
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	011b      	lsls	r3, r3, #4
 801129e:	4413      	add	r3, r2
 80112a0:	3308      	adds	r3, #8
 80112a2:	681a      	ldr	r2, [r3, #0]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d102      	bne.n	80112b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80112ac:	e007      	b.n	80112be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80112ae:	2301      	movs	r3, #1
 80112b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	3301      	adds	r3, #1
 80112b6:	60fb      	str	r3, [r7, #12]
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	2b01      	cmp	r3, #1
 80112bc:	d9d2      	bls.n	8011264 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2b02      	cmp	r3, #2
 80112c2:	d109      	bne.n	80112d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d102      	bne.n	80112d0 <chk_lock+0x80>
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	2b02      	cmp	r3, #2
 80112ce:	d101      	bne.n	80112d4 <chk_lock+0x84>
 80112d0:	2300      	movs	r3, #0
 80112d2:	e010      	b.n	80112f6 <chk_lock+0xa6>
 80112d4:	2312      	movs	r3, #18
 80112d6:	e00e      	b.n	80112f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d108      	bne.n	80112f0 <chk_lock+0xa0>
 80112de:	4a09      	ldr	r2, [pc, #36]	; (8011304 <chk_lock+0xb4>)
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	011b      	lsls	r3, r3, #4
 80112e4:	4413      	add	r3, r2
 80112e6:	330c      	adds	r3, #12
 80112e8:	881b      	ldrh	r3, [r3, #0]
 80112ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112ee:	d101      	bne.n	80112f4 <chk_lock+0xa4>
 80112f0:	2310      	movs	r3, #16
 80112f2:	e000      	b.n	80112f6 <chk_lock+0xa6>
 80112f4:	2300      	movs	r3, #0
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3714      	adds	r7, #20
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr
 8011302:	bf00      	nop
 8011304:	2000020c 	.word	0x2000020c

08011308 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801130e:	2300      	movs	r3, #0
 8011310:	607b      	str	r3, [r7, #4]
 8011312:	e002      	b.n	801131a <enq_lock+0x12>
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	3301      	adds	r3, #1
 8011318:	607b      	str	r3, [r7, #4]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2b01      	cmp	r3, #1
 801131e:	d806      	bhi.n	801132e <enq_lock+0x26>
 8011320:	4a09      	ldr	r2, [pc, #36]	; (8011348 <enq_lock+0x40>)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	011b      	lsls	r3, r3, #4
 8011326:	4413      	add	r3, r2
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d1f2      	bne.n	8011314 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2b02      	cmp	r3, #2
 8011332:	bf14      	ite	ne
 8011334:	2301      	movne	r3, #1
 8011336:	2300      	moveq	r3, #0
 8011338:	b2db      	uxtb	r3, r3
}
 801133a:	4618      	mov	r0, r3
 801133c:	370c      	adds	r7, #12
 801133e:	46bd      	mov	sp, r7
 8011340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011344:	4770      	bx	lr
 8011346:	bf00      	nop
 8011348:	2000020c 	.word	0x2000020c

0801134c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801134c:	b480      	push	{r7}
 801134e:	b085      	sub	sp, #20
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011356:	2300      	movs	r3, #0
 8011358:	60fb      	str	r3, [r7, #12]
 801135a:	e01f      	b.n	801139c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801135c:	4a41      	ldr	r2, [pc, #260]	; (8011464 <inc_lock+0x118>)
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	011b      	lsls	r3, r3, #4
 8011362:	4413      	add	r3, r2
 8011364:	681a      	ldr	r2, [r3, #0]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	429a      	cmp	r2, r3
 801136c:	d113      	bne.n	8011396 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801136e:	4a3d      	ldr	r2, [pc, #244]	; (8011464 <inc_lock+0x118>)
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	011b      	lsls	r3, r3, #4
 8011374:	4413      	add	r3, r2
 8011376:	3304      	adds	r3, #4
 8011378:	681a      	ldr	r2, [r3, #0]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801137e:	429a      	cmp	r2, r3
 8011380:	d109      	bne.n	8011396 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011382:	4a38      	ldr	r2, [pc, #224]	; (8011464 <inc_lock+0x118>)
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	011b      	lsls	r3, r3, #4
 8011388:	4413      	add	r3, r2
 801138a:	3308      	adds	r3, #8
 801138c:	681a      	ldr	r2, [r3, #0]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011392:	429a      	cmp	r2, r3
 8011394:	d006      	beq.n	80113a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	3301      	adds	r3, #1
 801139a:	60fb      	str	r3, [r7, #12]
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2b01      	cmp	r3, #1
 80113a0:	d9dc      	bls.n	801135c <inc_lock+0x10>
 80113a2:	e000      	b.n	80113a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80113a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2b02      	cmp	r3, #2
 80113aa:	d132      	bne.n	8011412 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80113ac:	2300      	movs	r3, #0
 80113ae:	60fb      	str	r3, [r7, #12]
 80113b0:	e002      	b.n	80113b8 <inc_lock+0x6c>
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	3301      	adds	r3, #1
 80113b6:	60fb      	str	r3, [r7, #12]
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	d806      	bhi.n	80113cc <inc_lock+0x80>
 80113be:	4a29      	ldr	r2, [pc, #164]	; (8011464 <inc_lock+0x118>)
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	011b      	lsls	r3, r3, #4
 80113c4:	4413      	add	r3, r2
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d1f2      	bne.n	80113b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2b02      	cmp	r3, #2
 80113d0:	d101      	bne.n	80113d6 <inc_lock+0x8a>
 80113d2:	2300      	movs	r3, #0
 80113d4:	e040      	b.n	8011458 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681a      	ldr	r2, [r3, #0]
 80113da:	4922      	ldr	r1, [pc, #136]	; (8011464 <inc_lock+0x118>)
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	011b      	lsls	r3, r3, #4
 80113e0:	440b      	add	r3, r1
 80113e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	689a      	ldr	r2, [r3, #8]
 80113e8:	491e      	ldr	r1, [pc, #120]	; (8011464 <inc_lock+0x118>)
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	011b      	lsls	r3, r3, #4
 80113ee:	440b      	add	r3, r1
 80113f0:	3304      	adds	r3, #4
 80113f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	695a      	ldr	r2, [r3, #20]
 80113f8:	491a      	ldr	r1, [pc, #104]	; (8011464 <inc_lock+0x118>)
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	011b      	lsls	r3, r3, #4
 80113fe:	440b      	add	r3, r1
 8011400:	3308      	adds	r3, #8
 8011402:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011404:	4a17      	ldr	r2, [pc, #92]	; (8011464 <inc_lock+0x118>)
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	011b      	lsls	r3, r3, #4
 801140a:	4413      	add	r3, r2
 801140c:	330c      	adds	r3, #12
 801140e:	2200      	movs	r2, #0
 8011410:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d009      	beq.n	801142c <inc_lock+0xe0>
 8011418:	4a12      	ldr	r2, [pc, #72]	; (8011464 <inc_lock+0x118>)
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	011b      	lsls	r3, r3, #4
 801141e:	4413      	add	r3, r2
 8011420:	330c      	adds	r3, #12
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d001      	beq.n	801142c <inc_lock+0xe0>
 8011428:	2300      	movs	r3, #0
 801142a:	e015      	b.n	8011458 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d108      	bne.n	8011444 <inc_lock+0xf8>
 8011432:	4a0c      	ldr	r2, [pc, #48]	; (8011464 <inc_lock+0x118>)
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	011b      	lsls	r3, r3, #4
 8011438:	4413      	add	r3, r2
 801143a:	330c      	adds	r3, #12
 801143c:	881b      	ldrh	r3, [r3, #0]
 801143e:	3301      	adds	r3, #1
 8011440:	b29a      	uxth	r2, r3
 8011442:	e001      	b.n	8011448 <inc_lock+0xfc>
 8011444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011448:	4906      	ldr	r1, [pc, #24]	; (8011464 <inc_lock+0x118>)
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	011b      	lsls	r3, r3, #4
 801144e:	440b      	add	r3, r1
 8011450:	330c      	adds	r3, #12
 8011452:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	3301      	adds	r3, #1
}
 8011458:	4618      	mov	r0, r3
 801145a:	3714      	adds	r7, #20
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr
 8011464:	2000020c 	.word	0x2000020c

08011468 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011468:	b480      	push	{r7}
 801146a:	b085      	sub	sp, #20
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011470:	2300      	movs	r3, #0
 8011472:	60fb      	str	r3, [r7, #12]
 8011474:	e010      	b.n	8011498 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011476:	4a0d      	ldr	r2, [pc, #52]	; (80114ac <clear_lock+0x44>)
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	011b      	lsls	r3, r3, #4
 801147c:	4413      	add	r3, r2
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	687a      	ldr	r2, [r7, #4]
 8011482:	429a      	cmp	r2, r3
 8011484:	d105      	bne.n	8011492 <clear_lock+0x2a>
 8011486:	4a09      	ldr	r2, [pc, #36]	; (80114ac <clear_lock+0x44>)
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	011b      	lsls	r3, r3, #4
 801148c:	4413      	add	r3, r2
 801148e:	2200      	movs	r2, #0
 8011490:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	3301      	adds	r3, #1
 8011496:	60fb      	str	r3, [r7, #12]
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	2b01      	cmp	r3, #1
 801149c:	d9eb      	bls.n	8011476 <clear_lock+0xe>
	}
}
 801149e:	bf00      	nop
 80114a0:	bf00      	nop
 80114a2:	3714      	adds	r7, #20
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr
 80114ac:	2000020c 	.word	0x2000020c

080114b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b086      	sub	sp, #24
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80114b8:	2300      	movs	r3, #0
 80114ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	78db      	ldrb	r3, [r3, #3]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d034      	beq.n	801152e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	7858      	ldrb	r0, [r3, #1]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80114d4:	2301      	movs	r3, #1
 80114d6:	697a      	ldr	r2, [r7, #20]
 80114d8:	f7ff fd7c 	bl	8010fd4 <disk_write>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d002      	beq.n	80114e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80114e2:	2301      	movs	r3, #1
 80114e4:	73fb      	strb	r3, [r7, #15]
 80114e6:	e022      	b.n	801152e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2200      	movs	r2, #0
 80114ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114f2:	697a      	ldr	r2, [r7, #20]
 80114f4:	1ad2      	subs	r2, r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	69db      	ldr	r3, [r3, #28]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d217      	bcs.n	801152e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	789b      	ldrb	r3, [r3, #2]
 8011502:	613b      	str	r3, [r7, #16]
 8011504:	e010      	b.n	8011528 <sync_window+0x78>
					wsect += fs->fsize;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	69db      	ldr	r3, [r3, #28]
 801150a:	697a      	ldr	r2, [r7, #20]
 801150c:	4413      	add	r3, r2
 801150e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	7858      	ldrb	r0, [r3, #1]
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801151a:	2301      	movs	r3, #1
 801151c:	697a      	ldr	r2, [r7, #20]
 801151e:	f7ff fd59 	bl	8010fd4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	3b01      	subs	r3, #1
 8011526:	613b      	str	r3, [r7, #16]
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	2b01      	cmp	r3, #1
 801152c:	d8eb      	bhi.n	8011506 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801152e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011530:	4618      	mov	r0, r3
 8011532:	3718      	adds	r7, #24
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b084      	sub	sp, #16
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011542:	2300      	movs	r3, #0
 8011544:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801154a:	683a      	ldr	r2, [r7, #0]
 801154c:	429a      	cmp	r2, r3
 801154e:	d01b      	beq.n	8011588 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f7ff ffad 	bl	80114b0 <sync_window>
 8011556:	4603      	mov	r3, r0
 8011558:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801155a:	7bfb      	ldrb	r3, [r7, #15]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d113      	bne.n	8011588 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	7858      	ldrb	r0, [r3, #1]
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801156a:	2301      	movs	r3, #1
 801156c:	683a      	ldr	r2, [r7, #0]
 801156e:	f7ff fd11 	bl	8010f94 <disk_read>
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d004      	beq.n	8011582 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011578:	f04f 33ff 	mov.w	r3, #4294967295
 801157c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801157e:	2301      	movs	r3, #1
 8011580:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	683a      	ldr	r2, [r7, #0]
 8011586:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011588:	7bfb      	ldrb	r3, [r7, #15]
}
 801158a:	4618      	mov	r0, r3
 801158c:	3710      	adds	r7, #16
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
	...

08011594 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b084      	sub	sp, #16
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f7ff ff87 	bl	80114b0 <sync_window>
 80115a2:	4603      	mov	r3, r0
 80115a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80115a6:	7bfb      	ldrb	r3, [r7, #15]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d159      	bne.n	8011660 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	781b      	ldrb	r3, [r3, #0]
 80115b0:	2b03      	cmp	r3, #3
 80115b2:	d149      	bne.n	8011648 <sync_fs+0xb4>
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	791b      	ldrb	r3, [r3, #4]
 80115b8:	2b01      	cmp	r3, #1
 80115ba:	d145      	bne.n	8011648 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	899b      	ldrh	r3, [r3, #12]
 80115c6:	461a      	mov	r2, r3
 80115c8:	2100      	movs	r1, #0
 80115ca:	f7ff fde4 	bl	8011196 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	3334      	adds	r3, #52	; 0x34
 80115d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80115d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80115da:	4618      	mov	r0, r3
 80115dc:	f7ff fd73 	bl	80110c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	3334      	adds	r3, #52	; 0x34
 80115e4:	4921      	ldr	r1, [pc, #132]	; (801166c <sync_fs+0xd8>)
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ff fd88 	bl	80110fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	3334      	adds	r3, #52	; 0x34
 80115f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80115f4:	491e      	ldr	r1, [pc, #120]	; (8011670 <sync_fs+0xdc>)
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7ff fd80 	bl	80110fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	3334      	adds	r3, #52	; 0x34
 8011600:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	695b      	ldr	r3, [r3, #20]
 8011608:	4619      	mov	r1, r3
 801160a:	4610      	mov	r0, r2
 801160c:	f7ff fd76 	bl	80110fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	3334      	adds	r3, #52	; 0x34
 8011614:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	691b      	ldr	r3, [r3, #16]
 801161c:	4619      	mov	r1, r3
 801161e:	4610      	mov	r0, r2
 8011620:	f7ff fd6c 	bl	80110fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6a1b      	ldr	r3, [r3, #32]
 8011628:	1c5a      	adds	r2, r3, #1
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	7858      	ldrb	r0, [r3, #1]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801163c:	2301      	movs	r3, #1
 801163e:	f7ff fcc9 	bl	8010fd4 <disk_write>
			fs->fsi_flag = 0;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2200      	movs	r2, #0
 8011646:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	785b      	ldrb	r3, [r3, #1]
 801164c:	2200      	movs	r2, #0
 801164e:	2100      	movs	r1, #0
 8011650:	4618      	mov	r0, r3
 8011652:	f7ff fcdf 	bl	8011014 <disk_ioctl>
 8011656:	4603      	mov	r3, r0
 8011658:	2b00      	cmp	r3, #0
 801165a:	d001      	beq.n	8011660 <sync_fs+0xcc>
 801165c:	2301      	movs	r3, #1
 801165e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011660:	7bfb      	ldrb	r3, [r7, #15]
}
 8011662:	4618      	mov	r0, r3
 8011664:	3710      	adds	r7, #16
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	41615252 	.word	0x41615252
 8011670:	61417272 	.word	0x61417272

08011674 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011674:	b480      	push	{r7}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	3b02      	subs	r3, #2
 8011682:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	699b      	ldr	r3, [r3, #24]
 8011688:	3b02      	subs	r3, #2
 801168a:	683a      	ldr	r2, [r7, #0]
 801168c:	429a      	cmp	r2, r3
 801168e:	d301      	bcc.n	8011694 <clust2sect+0x20>
 8011690:	2300      	movs	r3, #0
 8011692:	e008      	b.n	80116a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	895b      	ldrh	r3, [r3, #10]
 8011698:	461a      	mov	r2, r3
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	fb03 f202 	mul.w	r2, r3, r2
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116a4:	4413      	add	r3, r2
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	370c      	adds	r7, #12
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr

080116b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b086      	sub	sp, #24
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
 80116ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	2b01      	cmp	r3, #1
 80116c6:	d904      	bls.n	80116d2 <get_fat+0x20>
 80116c8:	693b      	ldr	r3, [r7, #16]
 80116ca:	699b      	ldr	r3, [r3, #24]
 80116cc:	683a      	ldr	r2, [r7, #0]
 80116ce:	429a      	cmp	r2, r3
 80116d0:	d302      	bcc.n	80116d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80116d2:	2301      	movs	r3, #1
 80116d4:	617b      	str	r3, [r7, #20]
 80116d6:	e0bb      	b.n	8011850 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80116d8:	f04f 33ff 	mov.w	r3, #4294967295
 80116dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80116de:	693b      	ldr	r3, [r7, #16]
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	2b03      	cmp	r3, #3
 80116e4:	f000 8083 	beq.w	80117ee <get_fat+0x13c>
 80116e8:	2b03      	cmp	r3, #3
 80116ea:	f300 80a7 	bgt.w	801183c <get_fat+0x18a>
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	d002      	beq.n	80116f8 <get_fat+0x46>
 80116f2:	2b02      	cmp	r3, #2
 80116f4:	d056      	beq.n	80117a4 <get_fat+0xf2>
 80116f6:	e0a1      	b.n	801183c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	60fb      	str	r3, [r7, #12]
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	085b      	lsrs	r3, r3, #1
 8011700:	68fa      	ldr	r2, [r7, #12]
 8011702:	4413      	add	r3, r2
 8011704:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011706:	693b      	ldr	r3, [r7, #16]
 8011708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	899b      	ldrh	r3, [r3, #12]
 801170e:	4619      	mov	r1, r3
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	fbb3 f3f1 	udiv	r3, r3, r1
 8011716:	4413      	add	r3, r2
 8011718:	4619      	mov	r1, r3
 801171a:	6938      	ldr	r0, [r7, #16]
 801171c:	f7ff ff0c 	bl	8011538 <move_window>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	f040 808d 	bne.w	8011842 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	1c5a      	adds	r2, r3, #1
 801172c:	60fa      	str	r2, [r7, #12]
 801172e:	693a      	ldr	r2, [r7, #16]
 8011730:	8992      	ldrh	r2, [r2, #12]
 8011732:	fbb3 f1f2 	udiv	r1, r3, r2
 8011736:	fb02 f201 	mul.w	r2, r2, r1
 801173a:	1a9b      	subs	r3, r3, r2
 801173c:	693a      	ldr	r2, [r7, #16]
 801173e:	4413      	add	r3, r2
 8011740:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011744:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801174a:	693b      	ldr	r3, [r7, #16]
 801174c:	899b      	ldrh	r3, [r3, #12]
 801174e:	4619      	mov	r1, r3
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	fbb3 f3f1 	udiv	r3, r3, r1
 8011756:	4413      	add	r3, r2
 8011758:	4619      	mov	r1, r3
 801175a:	6938      	ldr	r0, [r7, #16]
 801175c:	f7ff feec 	bl	8011538 <move_window>
 8011760:	4603      	mov	r3, r0
 8011762:	2b00      	cmp	r3, #0
 8011764:	d16f      	bne.n	8011846 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	899b      	ldrh	r3, [r3, #12]
 801176a:	461a      	mov	r2, r3
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011772:	fb02 f201 	mul.w	r2, r2, r1
 8011776:	1a9b      	subs	r3, r3, r2
 8011778:	693a      	ldr	r2, [r7, #16]
 801177a:	4413      	add	r3, r2
 801177c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011780:	021b      	lsls	r3, r3, #8
 8011782:	461a      	mov	r2, r3
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	4313      	orrs	r3, r2
 8011788:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	f003 0301 	and.w	r3, r3, #1
 8011790:	2b00      	cmp	r3, #0
 8011792:	d002      	beq.n	801179a <get_fat+0xe8>
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	091b      	lsrs	r3, r3, #4
 8011798:	e002      	b.n	80117a0 <get_fat+0xee>
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80117a0:	617b      	str	r3, [r7, #20]
			break;
 80117a2:	e055      	b.n	8011850 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	899b      	ldrh	r3, [r3, #12]
 80117ac:	085b      	lsrs	r3, r3, #1
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	4619      	mov	r1, r3
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80117b8:	4413      	add	r3, r2
 80117ba:	4619      	mov	r1, r3
 80117bc:	6938      	ldr	r0, [r7, #16]
 80117be:	f7ff febb 	bl	8011538 <move_window>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d140      	bne.n	801184a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	005b      	lsls	r3, r3, #1
 80117d2:	693a      	ldr	r2, [r7, #16]
 80117d4:	8992      	ldrh	r2, [r2, #12]
 80117d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80117da:	fb02 f200 	mul.w	r2, r2, r0
 80117de:	1a9b      	subs	r3, r3, r2
 80117e0:	440b      	add	r3, r1
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7ff fc34 	bl	8011050 <ld_word>
 80117e8:	4603      	mov	r3, r0
 80117ea:	617b      	str	r3, [r7, #20]
			break;
 80117ec:	e030      	b.n	8011850 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	899b      	ldrh	r3, [r3, #12]
 80117f6:	089b      	lsrs	r3, r3, #2
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	4619      	mov	r1, r3
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8011802:	4413      	add	r3, r2
 8011804:	4619      	mov	r1, r3
 8011806:	6938      	ldr	r0, [r7, #16]
 8011808:	f7ff fe96 	bl	8011538 <move_window>
 801180c:	4603      	mov	r3, r0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d11d      	bne.n	801184e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	009b      	lsls	r3, r3, #2
 801181c:	693a      	ldr	r2, [r7, #16]
 801181e:	8992      	ldrh	r2, [r2, #12]
 8011820:	fbb3 f0f2 	udiv	r0, r3, r2
 8011824:	fb02 f200 	mul.w	r2, r2, r0
 8011828:	1a9b      	subs	r3, r3, r2
 801182a:	440b      	add	r3, r1
 801182c:	4618      	mov	r0, r3
 801182e:	f7ff fc27 	bl	8011080 <ld_dword>
 8011832:	4603      	mov	r3, r0
 8011834:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011838:	617b      	str	r3, [r7, #20]
			break;
 801183a:	e009      	b.n	8011850 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801183c:	2301      	movs	r3, #1
 801183e:	617b      	str	r3, [r7, #20]
 8011840:	e006      	b.n	8011850 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011842:	bf00      	nop
 8011844:	e004      	b.n	8011850 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011846:	bf00      	nop
 8011848:	e002      	b.n	8011850 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801184a:	bf00      	nop
 801184c:	e000      	b.n	8011850 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801184e:	bf00      	nop
		}
	}

	return val;
 8011850:	697b      	ldr	r3, [r7, #20]
}
 8011852:	4618      	mov	r0, r3
 8011854:	3718      	adds	r7, #24
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}

0801185a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801185a:	b590      	push	{r4, r7, lr}
 801185c:	b089      	sub	sp, #36	; 0x24
 801185e:	af00      	add	r7, sp, #0
 8011860:	60f8      	str	r0, [r7, #12]
 8011862:	60b9      	str	r1, [r7, #8]
 8011864:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011866:	2302      	movs	r3, #2
 8011868:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	2b01      	cmp	r3, #1
 801186e:	f240 8102 	bls.w	8011a76 <put_fat+0x21c>
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	699b      	ldr	r3, [r3, #24]
 8011876:	68ba      	ldr	r2, [r7, #8]
 8011878:	429a      	cmp	r2, r3
 801187a:	f080 80fc 	bcs.w	8011a76 <put_fat+0x21c>
		switch (fs->fs_type) {
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	781b      	ldrb	r3, [r3, #0]
 8011882:	2b03      	cmp	r3, #3
 8011884:	f000 80b6 	beq.w	80119f4 <put_fat+0x19a>
 8011888:	2b03      	cmp	r3, #3
 801188a:	f300 80fd 	bgt.w	8011a88 <put_fat+0x22e>
 801188e:	2b01      	cmp	r3, #1
 8011890:	d003      	beq.n	801189a <put_fat+0x40>
 8011892:	2b02      	cmp	r3, #2
 8011894:	f000 8083 	beq.w	801199e <put_fat+0x144>
 8011898:	e0f6      	b.n	8011a88 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	61bb      	str	r3, [r7, #24]
 801189e:	69bb      	ldr	r3, [r7, #24]
 80118a0:	085b      	lsrs	r3, r3, #1
 80118a2:	69ba      	ldr	r2, [r7, #24]
 80118a4:	4413      	add	r3, r2
 80118a6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	899b      	ldrh	r3, [r3, #12]
 80118b0:	4619      	mov	r1, r3
 80118b2:	69bb      	ldr	r3, [r7, #24]
 80118b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80118b8:	4413      	add	r3, r2
 80118ba:	4619      	mov	r1, r3
 80118bc:	68f8      	ldr	r0, [r7, #12]
 80118be:	f7ff fe3b 	bl	8011538 <move_window>
 80118c2:	4603      	mov	r3, r0
 80118c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80118c6:	7ffb      	ldrb	r3, [r7, #31]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	f040 80d6 	bne.w	8011a7a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80118d4:	69bb      	ldr	r3, [r7, #24]
 80118d6:	1c5a      	adds	r2, r3, #1
 80118d8:	61ba      	str	r2, [r7, #24]
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	8992      	ldrh	r2, [r2, #12]
 80118de:	fbb3 f0f2 	udiv	r0, r3, r2
 80118e2:	fb02 f200 	mul.w	r2, r2, r0
 80118e6:	1a9b      	subs	r3, r3, r2
 80118e8:	440b      	add	r3, r1
 80118ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	f003 0301 	and.w	r3, r3, #1
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d00d      	beq.n	8011912 <put_fat+0xb8>
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	b25b      	sxtb	r3, r3
 80118fc:	f003 030f 	and.w	r3, r3, #15
 8011900:	b25a      	sxtb	r2, r3
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	b2db      	uxtb	r3, r3
 8011906:	011b      	lsls	r3, r3, #4
 8011908:	b25b      	sxtb	r3, r3
 801190a:	4313      	orrs	r3, r2
 801190c:	b25b      	sxtb	r3, r3
 801190e:	b2db      	uxtb	r3, r3
 8011910:	e001      	b.n	8011916 <put_fat+0xbc>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	b2db      	uxtb	r3, r3
 8011916:	697a      	ldr	r2, [r7, #20]
 8011918:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	2201      	movs	r2, #1
 801191e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	899b      	ldrh	r3, [r3, #12]
 8011928:	4619      	mov	r1, r3
 801192a:	69bb      	ldr	r3, [r7, #24]
 801192c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011930:	4413      	add	r3, r2
 8011932:	4619      	mov	r1, r3
 8011934:	68f8      	ldr	r0, [r7, #12]
 8011936:	f7ff fdff 	bl	8011538 <move_window>
 801193a:	4603      	mov	r3, r0
 801193c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801193e:	7ffb      	ldrb	r3, [r7, #31]
 8011940:	2b00      	cmp	r3, #0
 8011942:	f040 809c 	bne.w	8011a7e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	899b      	ldrh	r3, [r3, #12]
 8011950:	461a      	mov	r2, r3
 8011952:	69bb      	ldr	r3, [r7, #24]
 8011954:	fbb3 f0f2 	udiv	r0, r3, r2
 8011958:	fb02 f200 	mul.w	r2, r2, r0
 801195c:	1a9b      	subs	r3, r3, r2
 801195e:	440b      	add	r3, r1
 8011960:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	f003 0301 	and.w	r3, r3, #1
 8011968:	2b00      	cmp	r3, #0
 801196a:	d003      	beq.n	8011974 <put_fat+0x11a>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	091b      	lsrs	r3, r3, #4
 8011970:	b2db      	uxtb	r3, r3
 8011972:	e00e      	b.n	8011992 <put_fat+0x138>
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	b25b      	sxtb	r3, r3
 801197a:	f023 030f 	bic.w	r3, r3, #15
 801197e:	b25a      	sxtb	r2, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	0a1b      	lsrs	r3, r3, #8
 8011984:	b25b      	sxtb	r3, r3
 8011986:	f003 030f 	and.w	r3, r3, #15
 801198a:	b25b      	sxtb	r3, r3
 801198c:	4313      	orrs	r3, r2
 801198e:	b25b      	sxtb	r3, r3
 8011990:	b2db      	uxtb	r3, r3
 8011992:	697a      	ldr	r2, [r7, #20]
 8011994:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	2201      	movs	r2, #1
 801199a:	70da      	strb	r2, [r3, #3]
			break;
 801199c:	e074      	b.n	8011a88 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	899b      	ldrh	r3, [r3, #12]
 80119a6:	085b      	lsrs	r3, r3, #1
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	4619      	mov	r1, r3
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80119b2:	4413      	add	r3, r2
 80119b4:	4619      	mov	r1, r3
 80119b6:	68f8      	ldr	r0, [r7, #12]
 80119b8:	f7ff fdbe 	bl	8011538 <move_window>
 80119bc:	4603      	mov	r3, r0
 80119be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80119c0:	7ffb      	ldrb	r3, [r7, #31]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d15d      	bne.n	8011a82 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	005b      	lsls	r3, r3, #1
 80119d0:	68fa      	ldr	r2, [r7, #12]
 80119d2:	8992      	ldrh	r2, [r2, #12]
 80119d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80119d8:	fb02 f200 	mul.w	r2, r2, r0
 80119dc:	1a9b      	subs	r3, r3, r2
 80119de:	440b      	add	r3, r1
 80119e0:	687a      	ldr	r2, [r7, #4]
 80119e2:	b292      	uxth	r2, r2
 80119e4:	4611      	mov	r1, r2
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7ff fb6d 	bl	80110c6 <st_word>
			fs->wflag = 1;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2201      	movs	r2, #1
 80119f0:	70da      	strb	r2, [r3, #3]
			break;
 80119f2:	e049      	b.n	8011a88 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	899b      	ldrh	r3, [r3, #12]
 80119fc:	089b      	lsrs	r3, r3, #2
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	4619      	mov	r1, r3
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a08:	4413      	add	r3, r2
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	68f8      	ldr	r0, [r7, #12]
 8011a0e:	f7ff fd93 	bl	8011538 <move_window>
 8011a12:	4603      	mov	r3, r0
 8011a14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011a16:	7ffb      	ldrb	r3, [r7, #31]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d134      	bne.n	8011a86 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	68fa      	ldr	r2, [r7, #12]
 8011a2e:	8992      	ldrh	r2, [r2, #12]
 8011a30:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a34:	fb02 f200 	mul.w	r2, r2, r0
 8011a38:	1a9b      	subs	r3, r3, r2
 8011a3a:	440b      	add	r3, r1
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7ff fb1f 	bl	8011080 <ld_dword>
 8011a42:	4603      	mov	r3, r0
 8011a44:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011a48:	4323      	orrs	r3, r4
 8011a4a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	009b      	lsls	r3, r3, #2
 8011a56:	68fa      	ldr	r2, [r7, #12]
 8011a58:	8992      	ldrh	r2, [r2, #12]
 8011a5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a5e:	fb02 f200 	mul.w	r2, r2, r0
 8011a62:	1a9b      	subs	r3, r3, r2
 8011a64:	440b      	add	r3, r1
 8011a66:	6879      	ldr	r1, [r7, #4]
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7ff fb47 	bl	80110fc <st_dword>
			fs->wflag = 1;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2201      	movs	r2, #1
 8011a72:	70da      	strb	r2, [r3, #3]
			break;
 8011a74:	e008      	b.n	8011a88 <put_fat+0x22e>
		}
	}
 8011a76:	bf00      	nop
 8011a78:	e006      	b.n	8011a88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011a7a:	bf00      	nop
 8011a7c:	e004      	b.n	8011a88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011a7e:	bf00      	nop
 8011a80:	e002      	b.n	8011a88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011a82:	bf00      	nop
 8011a84:	e000      	b.n	8011a88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011a86:	bf00      	nop
	return res;
 8011a88:	7ffb      	ldrb	r3, [r7, #31]
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3724      	adds	r7, #36	; 0x24
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd90      	pop	{r4, r7, pc}

08011a92 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011a92:	b580      	push	{r7, lr}
 8011a94:	b088      	sub	sp, #32
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	60f8      	str	r0, [r7, #12]
 8011a9a:	60b9      	str	r1, [r7, #8]
 8011a9c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	2b01      	cmp	r3, #1
 8011aac:	d904      	bls.n	8011ab8 <remove_chain+0x26>
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	699b      	ldr	r3, [r3, #24]
 8011ab2:	68ba      	ldr	r2, [r7, #8]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d301      	bcc.n	8011abc <remove_chain+0x2a>
 8011ab8:	2302      	movs	r3, #2
 8011aba:	e04b      	b.n	8011b54 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d00c      	beq.n	8011adc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ac6:	6879      	ldr	r1, [r7, #4]
 8011ac8:	69b8      	ldr	r0, [r7, #24]
 8011aca:	f7ff fec6 	bl	801185a <put_fat>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011ad2:	7ffb      	ldrb	r3, [r7, #31]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d001      	beq.n	8011adc <remove_chain+0x4a>
 8011ad8:	7ffb      	ldrb	r3, [r7, #31]
 8011ada:	e03b      	b.n	8011b54 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011adc:	68b9      	ldr	r1, [r7, #8]
 8011ade:	68f8      	ldr	r0, [r7, #12]
 8011ae0:	f7ff fde7 	bl	80116b2 <get_fat>
 8011ae4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d031      	beq.n	8011b50 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	2b01      	cmp	r3, #1
 8011af0:	d101      	bne.n	8011af6 <remove_chain+0x64>
 8011af2:	2302      	movs	r3, #2
 8011af4:	e02e      	b.n	8011b54 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011afc:	d101      	bne.n	8011b02 <remove_chain+0x70>
 8011afe:	2301      	movs	r3, #1
 8011b00:	e028      	b.n	8011b54 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011b02:	2200      	movs	r2, #0
 8011b04:	68b9      	ldr	r1, [r7, #8]
 8011b06:	69b8      	ldr	r0, [r7, #24]
 8011b08:	f7ff fea7 	bl	801185a <put_fat>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011b10:	7ffb      	ldrb	r3, [r7, #31]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d001      	beq.n	8011b1a <remove_chain+0x88>
 8011b16:	7ffb      	ldrb	r3, [r7, #31]
 8011b18:	e01c      	b.n	8011b54 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011b1a:	69bb      	ldr	r3, [r7, #24]
 8011b1c:	695a      	ldr	r2, [r3, #20]
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	699b      	ldr	r3, [r3, #24]
 8011b22:	3b02      	subs	r3, #2
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d20b      	bcs.n	8011b40 <remove_chain+0xae>
			fs->free_clst++;
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	695b      	ldr	r3, [r3, #20]
 8011b2c:	1c5a      	adds	r2, r3, #1
 8011b2e:	69bb      	ldr	r3, [r7, #24]
 8011b30:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	791b      	ldrb	r3, [r3, #4]
 8011b36:	f043 0301 	orr.w	r3, r3, #1
 8011b3a:	b2da      	uxtb	r2, r3
 8011b3c:	69bb      	ldr	r3, [r7, #24]
 8011b3e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011b44:	69bb      	ldr	r3, [r7, #24]
 8011b46:	699b      	ldr	r3, [r3, #24]
 8011b48:	68ba      	ldr	r2, [r7, #8]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d3c6      	bcc.n	8011adc <remove_chain+0x4a>
 8011b4e:	e000      	b.n	8011b52 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011b50:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011b52:	2300      	movs	r3, #0
}
 8011b54:	4618      	mov	r0, r3
 8011b56:	3720      	adds	r7, #32
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b088      	sub	sp, #32
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d10d      	bne.n	8011b8e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	691b      	ldr	r3, [r3, #16]
 8011b76:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011b78:	69bb      	ldr	r3, [r7, #24]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d004      	beq.n	8011b88 <create_chain+0x2c>
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	699b      	ldr	r3, [r3, #24]
 8011b82:	69ba      	ldr	r2, [r7, #24]
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d31b      	bcc.n	8011bc0 <create_chain+0x64>
 8011b88:	2301      	movs	r3, #1
 8011b8a:	61bb      	str	r3, [r7, #24]
 8011b8c:	e018      	b.n	8011bc0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011b8e:	6839      	ldr	r1, [r7, #0]
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7ff fd8e 	bl	80116b2 <get_fat>
 8011b96:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d801      	bhi.n	8011ba2 <create_chain+0x46>
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	e070      	b.n	8011c84 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba8:	d101      	bne.n	8011bae <create_chain+0x52>
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	e06a      	b.n	8011c84 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	699b      	ldr	r3, [r3, #24]
 8011bb2:	68fa      	ldr	r2, [r7, #12]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d201      	bcs.n	8011bbc <create_chain+0x60>
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	e063      	b.n	8011c84 <create_chain+0x128>
		scl = clst;
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011bc0:	69bb      	ldr	r3, [r7, #24]
 8011bc2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011bc4:	69fb      	ldr	r3, [r7, #28]
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	699b      	ldr	r3, [r3, #24]
 8011bce:	69fa      	ldr	r2, [r7, #28]
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d307      	bcc.n	8011be4 <create_chain+0x88>
				ncl = 2;
 8011bd4:	2302      	movs	r3, #2
 8011bd6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011bd8:	69fa      	ldr	r2, [r7, #28]
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d901      	bls.n	8011be4 <create_chain+0x88>
 8011be0:	2300      	movs	r3, #0
 8011be2:	e04f      	b.n	8011c84 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011be4:	69f9      	ldr	r1, [r7, #28]
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f7ff fd63 	bl	80116b2 <get_fat>
 8011bec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d00e      	beq.n	8011c12 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	2b01      	cmp	r3, #1
 8011bf8:	d003      	beq.n	8011c02 <create_chain+0xa6>
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c00:	d101      	bne.n	8011c06 <create_chain+0xaa>
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	e03e      	b.n	8011c84 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011c06:	69fa      	ldr	r2, [r7, #28]
 8011c08:	69bb      	ldr	r3, [r7, #24]
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	d1da      	bne.n	8011bc4 <create_chain+0x68>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	e038      	b.n	8011c84 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011c12:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011c14:	f04f 32ff 	mov.w	r2, #4294967295
 8011c18:	69f9      	ldr	r1, [r7, #28]
 8011c1a:	6938      	ldr	r0, [r7, #16]
 8011c1c:	f7ff fe1d 	bl	801185a <put_fat>
 8011c20:	4603      	mov	r3, r0
 8011c22:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011c24:	7dfb      	ldrb	r3, [r7, #23]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d109      	bne.n	8011c3e <create_chain+0xe2>
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d006      	beq.n	8011c3e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011c30:	69fa      	ldr	r2, [r7, #28]
 8011c32:	6839      	ldr	r1, [r7, #0]
 8011c34:	6938      	ldr	r0, [r7, #16]
 8011c36:	f7ff fe10 	bl	801185a <put_fat>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011c3e:	7dfb      	ldrb	r3, [r7, #23]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d116      	bne.n	8011c72 <create_chain+0x116>
		fs->last_clst = ncl;
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	69fa      	ldr	r2, [r7, #28]
 8011c48:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	695a      	ldr	r2, [r3, #20]
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	699b      	ldr	r3, [r3, #24]
 8011c52:	3b02      	subs	r3, #2
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d804      	bhi.n	8011c62 <create_chain+0x106>
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	695b      	ldr	r3, [r3, #20]
 8011c5c:	1e5a      	subs	r2, r3, #1
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	791b      	ldrb	r3, [r3, #4]
 8011c66:	f043 0301 	orr.w	r3, r3, #1
 8011c6a:	b2da      	uxtb	r2, r3
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	711a      	strb	r2, [r3, #4]
 8011c70:	e007      	b.n	8011c82 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011c72:	7dfb      	ldrb	r3, [r7, #23]
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	d102      	bne.n	8011c7e <create_chain+0x122>
 8011c78:	f04f 33ff 	mov.w	r3, #4294967295
 8011c7c:	e000      	b.n	8011c80 <create_chain+0x124>
 8011c7e:	2301      	movs	r3, #1
 8011c80:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011c82:	69fb      	ldr	r3, [r7, #28]
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3720      	adds	r7, #32
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}

08011c8c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011c8c:	b480      	push	{r7}
 8011c8e:	b087      	sub	sp, #28
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ca0:	3304      	adds	r3, #4
 8011ca2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	899b      	ldrh	r3, [r3, #12]
 8011ca8:	461a      	mov	r2, r3
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cb0:	68fa      	ldr	r2, [r7, #12]
 8011cb2:	8952      	ldrh	r2, [r2, #10]
 8011cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cb8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	1d1a      	adds	r2, r3, #4
 8011cbe:	613a      	str	r2, [r7, #16]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d101      	bne.n	8011cce <clmt_clust+0x42>
 8011cca:	2300      	movs	r3, #0
 8011ccc:	e010      	b.n	8011cf0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011cce:	697a      	ldr	r2, [r7, #20]
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d307      	bcc.n	8011ce6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011cd6:	697a      	ldr	r2, [r7, #20]
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	1ad3      	subs	r3, r2, r3
 8011cdc:	617b      	str	r3, [r7, #20]
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	3304      	adds	r3, #4
 8011ce2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011ce4:	e7e9      	b.n	8011cba <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011ce6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	4413      	add	r3, r2
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	371c      	adds	r7, #28
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr

08011cfc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b086      	sub	sp, #24
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011d12:	d204      	bcs.n	8011d1e <dir_sdi+0x22>
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	f003 031f 	and.w	r3, r3, #31
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d001      	beq.n	8011d22 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011d1e:	2302      	movs	r3, #2
 8011d20:	e071      	b.n	8011e06 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	683a      	ldr	r2, [r7, #0]
 8011d26:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	689b      	ldr	r3, [r3, #8]
 8011d2c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d106      	bne.n	8011d42 <dir_sdi+0x46>
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	2b02      	cmp	r3, #2
 8011d3a:	d902      	bls.n	8011d42 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d40:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d10c      	bne.n	8011d62 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	095b      	lsrs	r3, r3, #5
 8011d4c:	693a      	ldr	r2, [r7, #16]
 8011d4e:	8912      	ldrh	r2, [r2, #8]
 8011d50:	4293      	cmp	r3, r2
 8011d52:	d301      	bcc.n	8011d58 <dir_sdi+0x5c>
 8011d54:	2302      	movs	r3, #2
 8011d56:	e056      	b.n	8011e06 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	61da      	str	r2, [r3, #28]
 8011d60:	e02d      	b.n	8011dbe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	895b      	ldrh	r3, [r3, #10]
 8011d66:	461a      	mov	r2, r3
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	899b      	ldrh	r3, [r3, #12]
 8011d6c:	fb03 f302 	mul.w	r3, r3, r2
 8011d70:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011d72:	e019      	b.n	8011da8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6979      	ldr	r1, [r7, #20]
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7ff fc9a 	bl	80116b2 <get_fat>
 8011d7e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d86:	d101      	bne.n	8011d8c <dir_sdi+0x90>
 8011d88:	2301      	movs	r3, #1
 8011d8a:	e03c      	b.n	8011e06 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	2b01      	cmp	r3, #1
 8011d90:	d904      	bls.n	8011d9c <dir_sdi+0xa0>
 8011d92:	693b      	ldr	r3, [r7, #16]
 8011d94:	699b      	ldr	r3, [r3, #24]
 8011d96:	697a      	ldr	r2, [r7, #20]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d301      	bcc.n	8011da0 <dir_sdi+0xa4>
 8011d9c:	2302      	movs	r3, #2
 8011d9e:	e032      	b.n	8011e06 <dir_sdi+0x10a>
			ofs -= csz;
 8011da0:	683a      	ldr	r2, [r7, #0]
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	1ad3      	subs	r3, r2, r3
 8011da6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011da8:	683a      	ldr	r2, [r7, #0]
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d2e1      	bcs.n	8011d74 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011db0:	6979      	ldr	r1, [r7, #20]
 8011db2:	6938      	ldr	r0, [r7, #16]
 8011db4:	f7ff fc5e 	bl	8011674 <clust2sect>
 8011db8:	4602      	mov	r2, r0
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	697a      	ldr	r2, [r7, #20]
 8011dc2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	69db      	ldr	r3, [r3, #28]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d101      	bne.n	8011dd0 <dir_sdi+0xd4>
 8011dcc:	2302      	movs	r3, #2
 8011dce:	e01a      	b.n	8011e06 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	69da      	ldr	r2, [r3, #28]
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	899b      	ldrh	r3, [r3, #12]
 8011dd8:	4619      	mov	r1, r3
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	fbb3 f3f1 	udiv	r3, r3, r1
 8011de0:	441a      	add	r2, r3
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	899b      	ldrh	r3, [r3, #12]
 8011df0:	461a      	mov	r2, r3
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	fbb3 f0f2 	udiv	r0, r3, r2
 8011df8:	fb02 f200 	mul.w	r2, r2, r0
 8011dfc:	1a9b      	subs	r3, r3, r2
 8011dfe:	18ca      	adds	r2, r1, r3
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011e04:	2300      	movs	r3, #0
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3718      	adds	r7, #24
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}

08011e0e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011e0e:	b580      	push	{r7, lr}
 8011e10:	b086      	sub	sp, #24
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	6078      	str	r0, [r7, #4]
 8011e16:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	695b      	ldr	r3, [r3, #20]
 8011e22:	3320      	adds	r3, #32
 8011e24:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	69db      	ldr	r3, [r3, #28]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d003      	beq.n	8011e36 <dir_next+0x28>
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011e34:	d301      	bcc.n	8011e3a <dir_next+0x2c>
 8011e36:	2304      	movs	r3, #4
 8011e38:	e0bb      	b.n	8011fb2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	899b      	ldrh	r3, [r3, #12]
 8011e3e:	461a      	mov	r2, r3
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e46:	fb02 f201 	mul.w	r2, r2, r1
 8011e4a:	1a9b      	subs	r3, r3, r2
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	f040 809d 	bne.w	8011f8c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	69db      	ldr	r3, [r3, #28]
 8011e56:	1c5a      	adds	r2, r3, #1
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	699b      	ldr	r3, [r3, #24]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d10b      	bne.n	8011e7c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	095b      	lsrs	r3, r3, #5
 8011e68:	68fa      	ldr	r2, [r7, #12]
 8011e6a:	8912      	ldrh	r2, [r2, #8]
 8011e6c:	4293      	cmp	r3, r2
 8011e6e:	f0c0 808d 	bcc.w	8011f8c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2200      	movs	r2, #0
 8011e76:	61da      	str	r2, [r3, #28]
 8011e78:	2304      	movs	r3, #4
 8011e7a:	e09a      	b.n	8011fb2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	899b      	ldrh	r3, [r3, #12]
 8011e80:	461a      	mov	r2, r3
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e88:	68fa      	ldr	r2, [r7, #12]
 8011e8a:	8952      	ldrh	r2, [r2, #10]
 8011e8c:	3a01      	subs	r2, #1
 8011e8e:	4013      	ands	r3, r2
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d17b      	bne.n	8011f8c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011e94:	687a      	ldr	r2, [r7, #4]
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	699b      	ldr	r3, [r3, #24]
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	4610      	mov	r0, r2
 8011e9e:	f7ff fc08 	bl	80116b2 <get_fat>
 8011ea2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	2b01      	cmp	r3, #1
 8011ea8:	d801      	bhi.n	8011eae <dir_next+0xa0>
 8011eaa:	2302      	movs	r3, #2
 8011eac:	e081      	b.n	8011fb2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eb4:	d101      	bne.n	8011eba <dir_next+0xac>
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	e07b      	b.n	8011fb2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	699b      	ldr	r3, [r3, #24]
 8011ebe:	697a      	ldr	r2, [r7, #20]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d359      	bcc.n	8011f78 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d104      	bne.n	8011ed4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2200      	movs	r2, #0
 8011ece:	61da      	str	r2, [r3, #28]
 8011ed0:	2304      	movs	r3, #4
 8011ed2:	e06e      	b.n	8011fb2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011ed4:	687a      	ldr	r2, [r7, #4]
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	699b      	ldr	r3, [r3, #24]
 8011eda:	4619      	mov	r1, r3
 8011edc:	4610      	mov	r0, r2
 8011ede:	f7ff fe3d 	bl	8011b5c <create_chain>
 8011ee2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d101      	bne.n	8011eee <dir_next+0xe0>
 8011eea:	2307      	movs	r3, #7
 8011eec:	e061      	b.n	8011fb2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	2b01      	cmp	r3, #1
 8011ef2:	d101      	bne.n	8011ef8 <dir_next+0xea>
 8011ef4:	2302      	movs	r3, #2
 8011ef6:	e05c      	b.n	8011fb2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011ef8:	697b      	ldr	r3, [r7, #20]
 8011efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011efe:	d101      	bne.n	8011f04 <dir_next+0xf6>
 8011f00:	2301      	movs	r3, #1
 8011f02:	e056      	b.n	8011fb2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011f04:	68f8      	ldr	r0, [r7, #12]
 8011f06:	f7ff fad3 	bl	80114b0 <sync_window>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d001      	beq.n	8011f14 <dir_next+0x106>
 8011f10:	2301      	movs	r3, #1
 8011f12:	e04e      	b.n	8011fb2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	899b      	ldrh	r3, [r3, #12]
 8011f1e:	461a      	mov	r2, r3
 8011f20:	2100      	movs	r1, #0
 8011f22:	f7ff f938 	bl	8011196 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011f26:	2300      	movs	r3, #0
 8011f28:	613b      	str	r3, [r7, #16]
 8011f2a:	6979      	ldr	r1, [r7, #20]
 8011f2c:	68f8      	ldr	r0, [r7, #12]
 8011f2e:	f7ff fba1 	bl	8011674 <clust2sect>
 8011f32:	4602      	mov	r2, r0
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	631a      	str	r2, [r3, #48]	; 0x30
 8011f38:	e012      	b.n	8011f60 <dir_next+0x152>
						fs->wflag = 1;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011f40:	68f8      	ldr	r0, [r7, #12]
 8011f42:	f7ff fab5 	bl	80114b0 <sync_window>
 8011f46:	4603      	mov	r3, r0
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d001      	beq.n	8011f50 <dir_next+0x142>
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	e030      	b.n	8011fb2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	3301      	adds	r3, #1
 8011f54:	613b      	str	r3, [r7, #16]
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f5a:	1c5a      	adds	r2, r3, #1
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	895b      	ldrh	r3, [r3, #10]
 8011f64:	461a      	mov	r2, r3
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	d3e6      	bcc.n	8011f3a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	1ad2      	subs	r2, r2, r3
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	697a      	ldr	r2, [r7, #20]
 8011f7c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011f7e:	6979      	ldr	r1, [r7, #20]
 8011f80:	68f8      	ldr	r0, [r7, #12]
 8011f82:	f7ff fb77 	bl	8011674 <clust2sect>
 8011f86:	4602      	mov	r2, r0
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	68ba      	ldr	r2, [r7, #8]
 8011f90:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	899b      	ldrh	r3, [r3, #12]
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	68bb      	ldr	r3, [r7, #8]
 8011fa0:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fa4:	fb02 f200 	mul.w	r2, r2, r0
 8011fa8:	1a9b      	subs	r3, r3, r2
 8011faa:	18ca      	adds	r2, r1, r3
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011fb0:	2300      	movs	r3, #0
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3718      	adds	r7, #24
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}

08011fba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011fba:	b580      	push	{r7, lr}
 8011fbc:	b086      	sub	sp, #24
 8011fbe:	af00      	add	r7, sp, #0
 8011fc0:	6078      	str	r0, [r7, #4]
 8011fc2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011fca:	2100      	movs	r1, #0
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7ff fe95 	bl	8011cfc <dir_sdi>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011fd6:	7dfb      	ldrb	r3, [r7, #23]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d12b      	bne.n	8012034 <dir_alloc+0x7a>
		n = 0;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	69db      	ldr	r3, [r3, #28]
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	68f8      	ldr	r0, [r7, #12]
 8011fe8:	f7ff faa6 	bl	8011538 <move_window>
 8011fec:	4603      	mov	r3, r0
 8011fee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011ff0:	7dfb      	ldrb	r3, [r7, #23]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d11d      	bne.n	8012032 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6a1b      	ldr	r3, [r3, #32]
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	2be5      	cmp	r3, #229	; 0xe5
 8011ffe:	d004      	beq.n	801200a <dir_alloc+0x50>
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6a1b      	ldr	r3, [r3, #32]
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d107      	bne.n	801201a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	3301      	adds	r3, #1
 801200e:	613b      	str	r3, [r7, #16]
 8012010:	693a      	ldr	r2, [r7, #16]
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	429a      	cmp	r2, r3
 8012016:	d102      	bne.n	801201e <dir_alloc+0x64>
 8012018:	e00c      	b.n	8012034 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801201a:	2300      	movs	r3, #0
 801201c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801201e:	2101      	movs	r1, #1
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f7ff fef4 	bl	8011e0e <dir_next>
 8012026:	4603      	mov	r3, r0
 8012028:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801202a:	7dfb      	ldrb	r3, [r7, #23]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d0d7      	beq.n	8011fe0 <dir_alloc+0x26>
 8012030:	e000      	b.n	8012034 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012032:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012034:	7dfb      	ldrb	r3, [r7, #23]
 8012036:	2b04      	cmp	r3, #4
 8012038:	d101      	bne.n	801203e <dir_alloc+0x84>
 801203a:	2307      	movs	r3, #7
 801203c:	75fb      	strb	r3, [r7, #23]
	return res;
 801203e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012040:	4618      	mov	r0, r3
 8012042:	3718      	adds	r7, #24
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}

08012048 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b084      	sub	sp, #16
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	331a      	adds	r3, #26
 8012056:	4618      	mov	r0, r3
 8012058:	f7fe fffa 	bl	8011050 <ld_word>
 801205c:	4603      	mov	r3, r0
 801205e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	2b03      	cmp	r3, #3
 8012066:	d109      	bne.n	801207c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	3314      	adds	r3, #20
 801206c:	4618      	mov	r0, r3
 801206e:	f7fe ffef 	bl	8011050 <ld_word>
 8012072:	4603      	mov	r3, r0
 8012074:	041b      	lsls	r3, r3, #16
 8012076:	68fa      	ldr	r2, [r7, #12]
 8012078:	4313      	orrs	r3, r2
 801207a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801207c:	68fb      	ldr	r3, [r7, #12]
}
 801207e:	4618      	mov	r0, r3
 8012080:	3710      	adds	r7, #16
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}

08012086 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012086:	b580      	push	{r7, lr}
 8012088:	b084      	sub	sp, #16
 801208a:	af00      	add	r7, sp, #0
 801208c:	60f8      	str	r0, [r7, #12]
 801208e:	60b9      	str	r1, [r7, #8]
 8012090:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	331a      	adds	r3, #26
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	b292      	uxth	r2, r2
 801209a:	4611      	mov	r1, r2
 801209c:	4618      	mov	r0, r3
 801209e:	f7ff f812 	bl	80110c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	2b03      	cmp	r3, #3
 80120a8:	d109      	bne.n	80120be <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	f103 0214 	add.w	r2, r3, #20
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	0c1b      	lsrs	r3, r3, #16
 80120b4:	b29b      	uxth	r3, r3
 80120b6:	4619      	mov	r1, r3
 80120b8:	4610      	mov	r0, r2
 80120ba:	f7ff f804 	bl	80110c6 <st_word>
	}
}
 80120be:	bf00      	nop
 80120c0:	3710      	adds	r7, #16
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}

080120c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80120c6:	b580      	push	{r7, lr}
 80120c8:	b086      	sub	sp, #24
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80120d4:	2100      	movs	r1, #0
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f7ff fe10 	bl	8011cfc <dir_sdi>
 80120dc:	4603      	mov	r3, r0
 80120de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80120e0:	7dfb      	ldrb	r3, [r7, #23]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d001      	beq.n	80120ea <dir_find+0x24>
 80120e6:	7dfb      	ldrb	r3, [r7, #23]
 80120e8:	e03e      	b.n	8012168 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	69db      	ldr	r3, [r3, #28]
 80120ee:	4619      	mov	r1, r3
 80120f0:	6938      	ldr	r0, [r7, #16]
 80120f2:	f7ff fa21 	bl	8011538 <move_window>
 80120f6:	4603      	mov	r3, r0
 80120f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80120fa:	7dfb      	ldrb	r3, [r7, #23]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d12f      	bne.n	8012160 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6a1b      	ldr	r3, [r3, #32]
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012108:	7bfb      	ldrb	r3, [r7, #15]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d102      	bne.n	8012114 <dir_find+0x4e>
 801210e:	2304      	movs	r3, #4
 8012110:	75fb      	strb	r3, [r7, #23]
 8012112:	e028      	b.n	8012166 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6a1b      	ldr	r3, [r3, #32]
 8012118:	330b      	adds	r3, #11
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012120:	b2da      	uxtb	r2, r3
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6a1b      	ldr	r3, [r3, #32]
 801212a:	330b      	adds	r3, #11
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	f003 0308 	and.w	r3, r3, #8
 8012132:	2b00      	cmp	r3, #0
 8012134:	d10a      	bne.n	801214c <dir_find+0x86>
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6a18      	ldr	r0, [r3, #32]
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	3324      	adds	r3, #36	; 0x24
 801213e:	220b      	movs	r2, #11
 8012140:	4619      	mov	r1, r3
 8012142:	f7ff f843 	bl	80111cc <mem_cmp>
 8012146:	4603      	mov	r3, r0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d00b      	beq.n	8012164 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801214c:	2100      	movs	r1, #0
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7ff fe5d 	bl	8011e0e <dir_next>
 8012154:	4603      	mov	r3, r0
 8012156:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012158:	7dfb      	ldrb	r3, [r7, #23]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d0c5      	beq.n	80120ea <dir_find+0x24>
 801215e:	e002      	b.n	8012166 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012160:	bf00      	nop
 8012162:	e000      	b.n	8012166 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012164:	bf00      	nop

	return res;
 8012166:	7dfb      	ldrb	r3, [r7, #23]
}
 8012168:	4618      	mov	r0, r3
 801216a:	3718      	adds	r7, #24
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801217e:	2101      	movs	r1, #1
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f7ff ff1a 	bl	8011fba <dir_alloc>
 8012186:	4603      	mov	r3, r0
 8012188:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801218a:	7bfb      	ldrb	r3, [r7, #15]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d11c      	bne.n	80121ca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	69db      	ldr	r3, [r3, #28]
 8012194:	4619      	mov	r1, r3
 8012196:	68b8      	ldr	r0, [r7, #8]
 8012198:	f7ff f9ce 	bl	8011538 <move_window>
 801219c:	4603      	mov	r3, r0
 801219e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80121a0:	7bfb      	ldrb	r3, [r7, #15]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d111      	bne.n	80121ca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6a1b      	ldr	r3, [r3, #32]
 80121aa:	2220      	movs	r2, #32
 80121ac:	2100      	movs	r1, #0
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7fe fff1 	bl	8011196 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a18      	ldr	r0, [r3, #32]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	3324      	adds	r3, #36	; 0x24
 80121bc:	220b      	movs	r2, #11
 80121be:	4619      	mov	r1, r3
 80121c0:	f7fe ffc8 	bl	8011154 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	2201      	movs	r2, #1
 80121c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80121ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3710      	adds	r7, #16
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b088      	sub	sp, #32
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	60fb      	str	r3, [r7, #12]
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	3324      	adds	r3, #36	; 0x24
 80121e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80121ea:	220b      	movs	r2, #11
 80121ec:	2120      	movs	r1, #32
 80121ee:	68b8      	ldr	r0, [r7, #8]
 80121f0:	f7fe ffd1 	bl	8011196 <mem_set>
	si = i = 0; ni = 8;
 80121f4:	2300      	movs	r3, #0
 80121f6:	613b      	str	r3, [r7, #16]
 80121f8:	693b      	ldr	r3, [r7, #16]
 80121fa:	61fb      	str	r3, [r7, #28]
 80121fc:	2308      	movs	r3, #8
 80121fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012200:	69fb      	ldr	r3, [r7, #28]
 8012202:	1c5a      	adds	r2, r3, #1
 8012204:	61fa      	str	r2, [r7, #28]
 8012206:	68fa      	ldr	r2, [r7, #12]
 8012208:	4413      	add	r3, r2
 801220a:	781b      	ldrb	r3, [r3, #0]
 801220c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801220e:	7efb      	ldrb	r3, [r7, #27]
 8012210:	2b20      	cmp	r3, #32
 8012212:	d94e      	bls.n	80122b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012214:	7efb      	ldrb	r3, [r7, #27]
 8012216:	2b2f      	cmp	r3, #47	; 0x2f
 8012218:	d006      	beq.n	8012228 <create_name+0x54>
 801221a:	7efb      	ldrb	r3, [r7, #27]
 801221c:	2b5c      	cmp	r3, #92	; 0x5c
 801221e:	d110      	bne.n	8012242 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012220:	e002      	b.n	8012228 <create_name+0x54>
 8012222:	69fb      	ldr	r3, [r7, #28]
 8012224:	3301      	adds	r3, #1
 8012226:	61fb      	str	r3, [r7, #28]
 8012228:	68fa      	ldr	r2, [r7, #12]
 801222a:	69fb      	ldr	r3, [r7, #28]
 801222c:	4413      	add	r3, r2
 801222e:	781b      	ldrb	r3, [r3, #0]
 8012230:	2b2f      	cmp	r3, #47	; 0x2f
 8012232:	d0f6      	beq.n	8012222 <create_name+0x4e>
 8012234:	68fa      	ldr	r2, [r7, #12]
 8012236:	69fb      	ldr	r3, [r7, #28]
 8012238:	4413      	add	r3, r2
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	2b5c      	cmp	r3, #92	; 0x5c
 801223e:	d0f0      	beq.n	8012222 <create_name+0x4e>
			break;
 8012240:	e038      	b.n	80122b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012242:	7efb      	ldrb	r3, [r7, #27]
 8012244:	2b2e      	cmp	r3, #46	; 0x2e
 8012246:	d003      	beq.n	8012250 <create_name+0x7c>
 8012248:	693a      	ldr	r2, [r7, #16]
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	429a      	cmp	r2, r3
 801224e:	d30c      	bcc.n	801226a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	2b0b      	cmp	r3, #11
 8012254:	d002      	beq.n	801225c <create_name+0x88>
 8012256:	7efb      	ldrb	r3, [r7, #27]
 8012258:	2b2e      	cmp	r3, #46	; 0x2e
 801225a:	d001      	beq.n	8012260 <create_name+0x8c>
 801225c:	2306      	movs	r3, #6
 801225e:	e044      	b.n	80122ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012260:	2308      	movs	r3, #8
 8012262:	613b      	str	r3, [r7, #16]
 8012264:	230b      	movs	r3, #11
 8012266:	617b      	str	r3, [r7, #20]
			continue;
 8012268:	e022      	b.n	80122b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801226a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801226e:	2b00      	cmp	r3, #0
 8012270:	da04      	bge.n	801227c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012272:	7efb      	ldrb	r3, [r7, #27]
 8012274:	3b80      	subs	r3, #128	; 0x80
 8012276:	4a1f      	ldr	r2, [pc, #124]	; (80122f4 <create_name+0x120>)
 8012278:	5cd3      	ldrb	r3, [r2, r3]
 801227a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801227c:	7efb      	ldrb	r3, [r7, #27]
 801227e:	4619      	mov	r1, r3
 8012280:	481d      	ldr	r0, [pc, #116]	; (80122f8 <create_name+0x124>)
 8012282:	f7fe ffca 	bl	801121a <chk_chr>
 8012286:	4603      	mov	r3, r0
 8012288:	2b00      	cmp	r3, #0
 801228a:	d001      	beq.n	8012290 <create_name+0xbc>
 801228c:	2306      	movs	r3, #6
 801228e:	e02c      	b.n	80122ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012290:	7efb      	ldrb	r3, [r7, #27]
 8012292:	2b60      	cmp	r3, #96	; 0x60
 8012294:	d905      	bls.n	80122a2 <create_name+0xce>
 8012296:	7efb      	ldrb	r3, [r7, #27]
 8012298:	2b7a      	cmp	r3, #122	; 0x7a
 801229a:	d802      	bhi.n	80122a2 <create_name+0xce>
 801229c:	7efb      	ldrb	r3, [r7, #27]
 801229e:	3b20      	subs	r3, #32
 80122a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80122a2:	693b      	ldr	r3, [r7, #16]
 80122a4:	1c5a      	adds	r2, r3, #1
 80122a6:	613a      	str	r2, [r7, #16]
 80122a8:	68ba      	ldr	r2, [r7, #8]
 80122aa:	4413      	add	r3, r2
 80122ac:	7efa      	ldrb	r2, [r7, #27]
 80122ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80122b0:	e7a6      	b.n	8012200 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80122b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80122b4:	68fa      	ldr	r2, [r7, #12]
 80122b6:	69fb      	ldr	r3, [r7, #28]
 80122b8:	441a      	add	r2, r3
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80122be:	693b      	ldr	r3, [r7, #16]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d101      	bne.n	80122c8 <create_name+0xf4>
 80122c4:	2306      	movs	r3, #6
 80122c6:	e010      	b.n	80122ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	2be5      	cmp	r3, #229	; 0xe5
 80122ce:	d102      	bne.n	80122d6 <create_name+0x102>
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	2205      	movs	r2, #5
 80122d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80122d6:	7efb      	ldrb	r3, [r7, #27]
 80122d8:	2b20      	cmp	r3, #32
 80122da:	d801      	bhi.n	80122e0 <create_name+0x10c>
 80122dc:	2204      	movs	r2, #4
 80122de:	e000      	b.n	80122e2 <create_name+0x10e>
 80122e0:	2200      	movs	r2, #0
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	330b      	adds	r3, #11
 80122e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80122e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3720      	adds	r7, #32
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	08014a54 	.word	0x08014a54
 80122f8:	08014998 	.word	0x08014998

080122fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b086      	sub	sp, #24
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012310:	e002      	b.n	8012318 <follow_path+0x1c>
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	3301      	adds	r3, #1
 8012316:	603b      	str	r3, [r7, #0]
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	2b2f      	cmp	r3, #47	; 0x2f
 801231e:	d0f8      	beq.n	8012312 <follow_path+0x16>
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	2b5c      	cmp	r3, #92	; 0x5c
 8012326:	d0f4      	beq.n	8012312 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	2200      	movs	r2, #0
 801232c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	2b1f      	cmp	r3, #31
 8012334:	d80a      	bhi.n	801234c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2280      	movs	r2, #128	; 0x80
 801233a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801233e:	2100      	movs	r1, #0
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f7ff fcdb 	bl	8011cfc <dir_sdi>
 8012346:	4603      	mov	r3, r0
 8012348:	75fb      	strb	r3, [r7, #23]
 801234a:	e048      	b.n	80123de <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801234c:	463b      	mov	r3, r7
 801234e:	4619      	mov	r1, r3
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f7ff ff3f 	bl	80121d4 <create_name>
 8012356:	4603      	mov	r3, r0
 8012358:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801235a:	7dfb      	ldrb	r3, [r7, #23]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d139      	bne.n	80123d4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f7ff feb0 	bl	80120c6 <dir_find>
 8012366:	4603      	mov	r3, r0
 8012368:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012370:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012372:	7dfb      	ldrb	r3, [r7, #23]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d00a      	beq.n	801238e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012378:	7dfb      	ldrb	r3, [r7, #23]
 801237a:	2b04      	cmp	r3, #4
 801237c:	d12c      	bne.n	80123d8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801237e:	7afb      	ldrb	r3, [r7, #11]
 8012380:	f003 0304 	and.w	r3, r3, #4
 8012384:	2b00      	cmp	r3, #0
 8012386:	d127      	bne.n	80123d8 <follow_path+0xdc>
 8012388:	2305      	movs	r3, #5
 801238a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801238c:	e024      	b.n	80123d8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801238e:	7afb      	ldrb	r3, [r7, #11]
 8012390:	f003 0304 	and.w	r3, r3, #4
 8012394:	2b00      	cmp	r3, #0
 8012396:	d121      	bne.n	80123dc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	799b      	ldrb	r3, [r3, #6]
 801239c:	f003 0310 	and.w	r3, r3, #16
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d102      	bne.n	80123aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80123a4:	2305      	movs	r3, #5
 80123a6:	75fb      	strb	r3, [r7, #23]
 80123a8:	e019      	b.n	80123de <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	695b      	ldr	r3, [r3, #20]
 80123b4:	68fa      	ldr	r2, [r7, #12]
 80123b6:	8992      	ldrh	r2, [r2, #12]
 80123b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80123bc:	fb02 f200 	mul.w	r2, r2, r0
 80123c0:	1a9b      	subs	r3, r3, r2
 80123c2:	440b      	add	r3, r1
 80123c4:	4619      	mov	r1, r3
 80123c6:	68f8      	ldr	r0, [r7, #12]
 80123c8:	f7ff fe3e 	bl	8012048 <ld_clust>
 80123cc:	4602      	mov	r2, r0
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80123d2:	e7bb      	b.n	801234c <follow_path+0x50>
			if (res != FR_OK) break;
 80123d4:	bf00      	nop
 80123d6:	e002      	b.n	80123de <follow_path+0xe2>
				break;
 80123d8:	bf00      	nop
 80123da:	e000      	b.n	80123de <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80123dc:	bf00      	nop
			}
		}
	}

	return res;
 80123de:	7dfb      	ldrb	r3, [r7, #23]
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3718      	adds	r7, #24
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}

080123e8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80123e8:	b480      	push	{r7}
 80123ea:	b087      	sub	sp, #28
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80123f0:	f04f 33ff 	mov.w	r3, #4294967295
 80123f4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d031      	beq.n	8012462 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	617b      	str	r3, [r7, #20]
 8012404:	e002      	b.n	801240c <get_ldnumber+0x24>
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	3301      	adds	r3, #1
 801240a:	617b      	str	r3, [r7, #20]
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	2b20      	cmp	r3, #32
 8012412:	d903      	bls.n	801241c <get_ldnumber+0x34>
 8012414:	697b      	ldr	r3, [r7, #20]
 8012416:	781b      	ldrb	r3, [r3, #0]
 8012418:	2b3a      	cmp	r3, #58	; 0x3a
 801241a:	d1f4      	bne.n	8012406 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801241c:	697b      	ldr	r3, [r7, #20]
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	2b3a      	cmp	r3, #58	; 0x3a
 8012422:	d11c      	bne.n	801245e <get_ldnumber+0x76>
			tp = *path;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	1c5a      	adds	r2, r3, #1
 801242e:	60fa      	str	r2, [r7, #12]
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	3b30      	subs	r3, #48	; 0x30
 8012434:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	2b09      	cmp	r3, #9
 801243a:	d80e      	bhi.n	801245a <get_ldnumber+0x72>
 801243c:	68fa      	ldr	r2, [r7, #12]
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	429a      	cmp	r2, r3
 8012442:	d10a      	bne.n	801245a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d107      	bne.n	801245a <get_ldnumber+0x72>
					vol = (int)i;
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	3301      	adds	r3, #1
 8012452:	617b      	str	r3, [r7, #20]
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	697a      	ldr	r2, [r7, #20]
 8012458:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	e002      	b.n	8012464 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801245e:	2300      	movs	r3, #0
 8012460:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012462:	693b      	ldr	r3, [r7, #16]
}
 8012464:	4618      	mov	r0, r3
 8012466:	371c      	adds	r7, #28
 8012468:	46bd      	mov	sp, r7
 801246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246e:	4770      	bx	lr

08012470 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b082      	sub	sp, #8
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2200      	movs	r2, #0
 801247e:	70da      	strb	r2, [r3, #3]
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f04f 32ff 	mov.w	r2, #4294967295
 8012486:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012488:	6839      	ldr	r1, [r7, #0]
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f7ff f854 	bl	8011538 <move_window>
 8012490:	4603      	mov	r3, r0
 8012492:	2b00      	cmp	r3, #0
 8012494:	d001      	beq.n	801249a <check_fs+0x2a>
 8012496:	2304      	movs	r3, #4
 8012498:	e038      	b.n	801250c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	3334      	adds	r3, #52	; 0x34
 801249e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80124a2:	4618      	mov	r0, r3
 80124a4:	f7fe fdd4 	bl	8011050 <ld_word>
 80124a8:	4603      	mov	r3, r0
 80124aa:	461a      	mov	r2, r3
 80124ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d001      	beq.n	80124b8 <check_fs+0x48>
 80124b4:	2303      	movs	r3, #3
 80124b6:	e029      	b.n	801250c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80124be:	2be9      	cmp	r3, #233	; 0xe9
 80124c0:	d009      	beq.n	80124d6 <check_fs+0x66>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80124c8:	2beb      	cmp	r3, #235	; 0xeb
 80124ca:	d11e      	bne.n	801250a <check_fs+0x9a>
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80124d2:	2b90      	cmp	r3, #144	; 0x90
 80124d4:	d119      	bne.n	801250a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	3334      	adds	r3, #52	; 0x34
 80124da:	3336      	adds	r3, #54	; 0x36
 80124dc:	4618      	mov	r0, r3
 80124de:	f7fe fdcf 	bl	8011080 <ld_dword>
 80124e2:	4603      	mov	r3, r0
 80124e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80124e8:	4a0a      	ldr	r2, [pc, #40]	; (8012514 <check_fs+0xa4>)
 80124ea:	4293      	cmp	r3, r2
 80124ec:	d101      	bne.n	80124f2 <check_fs+0x82>
 80124ee:	2300      	movs	r3, #0
 80124f0:	e00c      	b.n	801250c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	3334      	adds	r3, #52	; 0x34
 80124f6:	3352      	adds	r3, #82	; 0x52
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7fe fdc1 	bl	8011080 <ld_dword>
 80124fe:	4603      	mov	r3, r0
 8012500:	4a05      	ldr	r2, [pc, #20]	; (8012518 <check_fs+0xa8>)
 8012502:	4293      	cmp	r3, r2
 8012504:	d101      	bne.n	801250a <check_fs+0x9a>
 8012506:	2300      	movs	r3, #0
 8012508:	e000      	b.n	801250c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801250a:	2302      	movs	r3, #2
}
 801250c:	4618      	mov	r0, r3
 801250e:	3708      	adds	r7, #8
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}
 8012514:	00544146 	.word	0x00544146
 8012518:	33544146 	.word	0x33544146

0801251c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b096      	sub	sp, #88	; 0x58
 8012520:	af00      	add	r7, sp, #0
 8012522:	60f8      	str	r0, [r7, #12]
 8012524:	60b9      	str	r1, [r7, #8]
 8012526:	4613      	mov	r3, r2
 8012528:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	2200      	movs	r2, #0
 801252e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f7ff ff59 	bl	80123e8 <get_ldnumber>
 8012536:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801253a:	2b00      	cmp	r3, #0
 801253c:	da01      	bge.n	8012542 <find_volume+0x26>
 801253e:	230b      	movs	r3, #11
 8012540:	e265      	b.n	8012a0e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012542:	4ab0      	ldr	r2, [pc, #704]	; (8012804 <find_volume+0x2e8>)
 8012544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801254a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254e:	2b00      	cmp	r3, #0
 8012550:	d101      	bne.n	8012556 <find_volume+0x3a>
 8012552:	230c      	movs	r3, #12
 8012554:	e25b      	b.n	8012a0e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801255a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801255c:	79fb      	ldrb	r3, [r7, #7]
 801255e:	f023 0301 	bic.w	r3, r3, #1
 8012562:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d01a      	beq.n	80125a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801256e:	785b      	ldrb	r3, [r3, #1]
 8012570:	4618      	mov	r0, r3
 8012572:	f7fe fccf 	bl	8010f14 <disk_status>
 8012576:	4603      	mov	r3, r0
 8012578:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801257c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012580:	f003 0301 	and.w	r3, r3, #1
 8012584:	2b00      	cmp	r3, #0
 8012586:	d10c      	bne.n	80125a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012588:	79fb      	ldrb	r3, [r7, #7]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d007      	beq.n	801259e <find_volume+0x82>
 801258e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012592:	f003 0304 	and.w	r3, r3, #4
 8012596:	2b00      	cmp	r3, #0
 8012598:	d001      	beq.n	801259e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801259a:	230a      	movs	r3, #10
 801259c:	e237      	b.n	8012a0e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801259e:	2300      	movs	r3, #0
 80125a0:	e235      	b.n	8012a0e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80125a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a4:	2200      	movs	r2, #0
 80125a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80125a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125aa:	b2da      	uxtb	r2, r3
 80125ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80125b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b2:	785b      	ldrb	r3, [r3, #1]
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7fe fcc7 	bl	8010f48 <disk_initialize>
 80125ba:	4603      	mov	r3, r0
 80125bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80125c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125c4:	f003 0301 	and.w	r3, r3, #1
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d001      	beq.n	80125d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80125cc:	2303      	movs	r3, #3
 80125ce:	e21e      	b.n	8012a0e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80125d0:	79fb      	ldrb	r3, [r7, #7]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d007      	beq.n	80125e6 <find_volume+0xca>
 80125d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125da:	f003 0304 	and.w	r3, r3, #4
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d001      	beq.n	80125e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80125e2:	230a      	movs	r3, #10
 80125e4:	e213      	b.n	8012a0e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80125e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125e8:	7858      	ldrb	r0, [r3, #1]
 80125ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ec:	330c      	adds	r3, #12
 80125ee:	461a      	mov	r2, r3
 80125f0:	2102      	movs	r1, #2
 80125f2:	f7fe fd0f 	bl	8011014 <disk_ioctl>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d001      	beq.n	8012600 <find_volume+0xe4>
 80125fc:	2301      	movs	r3, #1
 80125fe:	e206      	b.n	8012a0e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012602:	899b      	ldrh	r3, [r3, #12]
 8012604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012608:	d80d      	bhi.n	8012626 <find_volume+0x10a>
 801260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801260c:	899b      	ldrh	r3, [r3, #12]
 801260e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012612:	d308      	bcc.n	8012626 <find_volume+0x10a>
 8012614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012616:	899b      	ldrh	r3, [r3, #12]
 8012618:	461a      	mov	r2, r3
 801261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801261c:	899b      	ldrh	r3, [r3, #12]
 801261e:	3b01      	subs	r3, #1
 8012620:	4013      	ands	r3, r2
 8012622:	2b00      	cmp	r3, #0
 8012624:	d001      	beq.n	801262a <find_volume+0x10e>
 8012626:	2301      	movs	r3, #1
 8012628:	e1f1      	b.n	8012a0e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801262a:	2300      	movs	r3, #0
 801262c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801262e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012630:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012632:	f7ff ff1d 	bl	8012470 <check_fs>
 8012636:	4603      	mov	r3, r0
 8012638:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801263c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012640:	2b02      	cmp	r3, #2
 8012642:	d14b      	bne.n	80126dc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012644:	2300      	movs	r3, #0
 8012646:	643b      	str	r3, [r7, #64]	; 0x40
 8012648:	e01f      	b.n	801268a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801264c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012652:	011b      	lsls	r3, r3, #4
 8012654:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012658:	4413      	add	r3, r2
 801265a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265e:	3304      	adds	r3, #4
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d006      	beq.n	8012674 <find_volume+0x158>
 8012666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012668:	3308      	adds	r3, #8
 801266a:	4618      	mov	r0, r3
 801266c:	f7fe fd08 	bl	8011080 <ld_dword>
 8012670:	4602      	mov	r2, r0
 8012672:	e000      	b.n	8012676 <find_volume+0x15a>
 8012674:	2200      	movs	r2, #0
 8012676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012678:	009b      	lsls	r3, r3, #2
 801267a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801267e:	440b      	add	r3, r1
 8012680:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012686:	3301      	adds	r3, #1
 8012688:	643b      	str	r3, [r7, #64]	; 0x40
 801268a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801268c:	2b03      	cmp	r3, #3
 801268e:	d9dc      	bls.n	801264a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012690:	2300      	movs	r3, #0
 8012692:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012696:	2b00      	cmp	r3, #0
 8012698:	d002      	beq.n	80126a0 <find_volume+0x184>
 801269a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801269c:	3b01      	subs	r3, #1
 801269e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80126a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126a2:	009b      	lsls	r3, r3, #2
 80126a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80126a8:	4413      	add	r3, r2
 80126aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80126ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80126b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d005      	beq.n	80126c2 <find_volume+0x1a6>
 80126b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80126b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80126ba:	f7ff fed9 	bl	8012470 <check_fs>
 80126be:	4603      	mov	r3, r0
 80126c0:	e000      	b.n	80126c4 <find_volume+0x1a8>
 80126c2:	2303      	movs	r3, #3
 80126c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80126c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d905      	bls.n	80126dc <find_volume+0x1c0>
 80126d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126d2:	3301      	adds	r3, #1
 80126d4:	643b      	str	r3, [r7, #64]	; 0x40
 80126d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126d8:	2b03      	cmp	r3, #3
 80126da:	d9e1      	bls.n	80126a0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80126dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80126e0:	2b04      	cmp	r3, #4
 80126e2:	d101      	bne.n	80126e8 <find_volume+0x1cc>
 80126e4:	2301      	movs	r3, #1
 80126e6:	e192      	b.n	8012a0e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80126e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	d901      	bls.n	80126f4 <find_volume+0x1d8>
 80126f0:	230d      	movs	r3, #13
 80126f2:	e18c      	b.n	8012a0e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80126f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f6:	3334      	adds	r3, #52	; 0x34
 80126f8:	330b      	adds	r3, #11
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7fe fca8 	bl	8011050 <ld_word>
 8012700:	4603      	mov	r3, r0
 8012702:	461a      	mov	r2, r3
 8012704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012706:	899b      	ldrh	r3, [r3, #12]
 8012708:	429a      	cmp	r2, r3
 801270a:	d001      	beq.n	8012710 <find_volume+0x1f4>
 801270c:	230d      	movs	r3, #13
 801270e:	e17e      	b.n	8012a0e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012712:	3334      	adds	r3, #52	; 0x34
 8012714:	3316      	adds	r3, #22
 8012716:	4618      	mov	r0, r3
 8012718:	f7fe fc9a 	bl	8011050 <ld_word>
 801271c:	4603      	mov	r3, r0
 801271e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012722:	2b00      	cmp	r3, #0
 8012724:	d106      	bne.n	8012734 <find_volume+0x218>
 8012726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012728:	3334      	adds	r3, #52	; 0x34
 801272a:	3324      	adds	r3, #36	; 0x24
 801272c:	4618      	mov	r0, r3
 801272e:	f7fe fca7 	bl	8011080 <ld_dword>
 8012732:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012738:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801273c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012742:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012746:	789b      	ldrb	r3, [r3, #2]
 8012748:	2b01      	cmp	r3, #1
 801274a:	d005      	beq.n	8012758 <find_volume+0x23c>
 801274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274e:	789b      	ldrb	r3, [r3, #2]
 8012750:	2b02      	cmp	r3, #2
 8012752:	d001      	beq.n	8012758 <find_volume+0x23c>
 8012754:	230d      	movs	r3, #13
 8012756:	e15a      	b.n	8012a0e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801275a:	789b      	ldrb	r3, [r3, #2]
 801275c:	461a      	mov	r2, r3
 801275e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012760:	fb02 f303 	mul.w	r3, r2, r3
 8012764:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801276c:	b29a      	uxth	r2, r3
 801276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012770:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012774:	895b      	ldrh	r3, [r3, #10]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d008      	beq.n	801278c <find_volume+0x270>
 801277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801277c:	895b      	ldrh	r3, [r3, #10]
 801277e:	461a      	mov	r2, r3
 8012780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012782:	895b      	ldrh	r3, [r3, #10]
 8012784:	3b01      	subs	r3, #1
 8012786:	4013      	ands	r3, r2
 8012788:	2b00      	cmp	r3, #0
 801278a:	d001      	beq.n	8012790 <find_volume+0x274>
 801278c:	230d      	movs	r3, #13
 801278e:	e13e      	b.n	8012a0e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012792:	3334      	adds	r3, #52	; 0x34
 8012794:	3311      	adds	r3, #17
 8012796:	4618      	mov	r0, r3
 8012798:	f7fe fc5a 	bl	8011050 <ld_word>
 801279c:	4603      	mov	r3, r0
 801279e:	461a      	mov	r2, r3
 80127a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80127a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a6:	891b      	ldrh	r3, [r3, #8]
 80127a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127aa:	8992      	ldrh	r2, [r2, #12]
 80127ac:	0952      	lsrs	r2, r2, #5
 80127ae:	b292      	uxth	r2, r2
 80127b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80127b4:	fb02 f201 	mul.w	r2, r2, r1
 80127b8:	1a9b      	subs	r3, r3, r2
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d001      	beq.n	80127c4 <find_volume+0x2a8>
 80127c0:	230d      	movs	r3, #13
 80127c2:	e124      	b.n	8012a0e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80127c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c6:	3334      	adds	r3, #52	; 0x34
 80127c8:	3313      	adds	r3, #19
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7fe fc40 	bl	8011050 <ld_word>
 80127d0:	4603      	mov	r3, r0
 80127d2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80127d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d106      	bne.n	80127e8 <find_volume+0x2cc>
 80127da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127dc:	3334      	adds	r3, #52	; 0x34
 80127de:	3320      	adds	r3, #32
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7fe fc4d 	bl	8011080 <ld_dword>
 80127e6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80127e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ea:	3334      	adds	r3, #52	; 0x34
 80127ec:	330e      	adds	r3, #14
 80127ee:	4618      	mov	r0, r3
 80127f0:	f7fe fc2e 	bl	8011050 <ld_word>
 80127f4:	4603      	mov	r3, r0
 80127f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80127f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d104      	bne.n	8012808 <find_volume+0x2ec>
 80127fe:	230d      	movs	r3, #13
 8012800:	e105      	b.n	8012a0e <find_volume+0x4f2>
 8012802:	bf00      	nop
 8012804:	20000204 	.word	0x20000204

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012808:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801280a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801280c:	4413      	add	r3, r2
 801280e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012810:	8911      	ldrh	r1, [r2, #8]
 8012812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012814:	8992      	ldrh	r2, [r2, #12]
 8012816:	0952      	lsrs	r2, r2, #5
 8012818:	b292      	uxth	r2, r2
 801281a:	fbb1 f2f2 	udiv	r2, r1, r2
 801281e:	b292      	uxth	r2, r2
 8012820:	4413      	add	r3, r2
 8012822:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012828:	429a      	cmp	r2, r3
 801282a:	d201      	bcs.n	8012830 <find_volume+0x314>
 801282c:	230d      	movs	r3, #13
 801282e:	e0ee      	b.n	8012a0e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012834:	1ad3      	subs	r3, r2, r3
 8012836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012838:	8952      	ldrh	r2, [r2, #10]
 801283a:	fbb3 f3f2 	udiv	r3, r3, r2
 801283e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012842:	2b00      	cmp	r3, #0
 8012844:	d101      	bne.n	801284a <find_volume+0x32e>
 8012846:	230d      	movs	r3, #13
 8012848:	e0e1      	b.n	8012a0e <find_volume+0x4f2>
		fmt = FS_FAT32;
 801284a:	2303      	movs	r3, #3
 801284c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012852:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012856:	4293      	cmp	r3, r2
 8012858:	d802      	bhi.n	8012860 <find_volume+0x344>
 801285a:	2302      	movs	r3, #2
 801285c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012862:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012866:	4293      	cmp	r3, r2
 8012868:	d802      	bhi.n	8012870 <find_volume+0x354>
 801286a:	2301      	movs	r3, #1
 801286c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012872:	1c9a      	adds	r2, r3, #2
 8012874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012876:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801287a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801287c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801287e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012882:	441a      	add	r2, r3
 8012884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012886:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012888:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801288c:	441a      	add	r2, r3
 801288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012890:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012892:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012896:	2b03      	cmp	r3, #3
 8012898:	d11e      	bne.n	80128d8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801289c:	3334      	adds	r3, #52	; 0x34
 801289e:	332a      	adds	r3, #42	; 0x2a
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7fe fbd5 	bl	8011050 <ld_word>
 80128a6:	4603      	mov	r3, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d001      	beq.n	80128b0 <find_volume+0x394>
 80128ac:	230d      	movs	r3, #13
 80128ae:	e0ae      	b.n	8012a0e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80128b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b2:	891b      	ldrh	r3, [r3, #8]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d001      	beq.n	80128bc <find_volume+0x3a0>
 80128b8:	230d      	movs	r3, #13
 80128ba:	e0a8      	b.n	8012a0e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80128bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128be:	3334      	adds	r3, #52	; 0x34
 80128c0:	332c      	adds	r3, #44	; 0x2c
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7fe fbdc 	bl	8011080 <ld_dword>
 80128c8:	4602      	mov	r2, r0
 80128ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128cc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80128ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d0:	699b      	ldr	r3, [r3, #24]
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	647b      	str	r3, [r7, #68]	; 0x44
 80128d6:	e01f      	b.n	8012918 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80128d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128da:	891b      	ldrh	r3, [r3, #8]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d101      	bne.n	80128e4 <find_volume+0x3c8>
 80128e0:	230d      	movs	r3, #13
 80128e2:	e094      	b.n	8012a0e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80128e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128ea:	441a      	add	r2, r3
 80128ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80128f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128f4:	2b02      	cmp	r3, #2
 80128f6:	d103      	bne.n	8012900 <find_volume+0x3e4>
 80128f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fa:	699b      	ldr	r3, [r3, #24]
 80128fc:	005b      	lsls	r3, r3, #1
 80128fe:	e00a      	b.n	8012916 <find_volume+0x3fa>
 8012900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012902:	699a      	ldr	r2, [r3, #24]
 8012904:	4613      	mov	r3, r2
 8012906:	005b      	lsls	r3, r3, #1
 8012908:	4413      	add	r3, r2
 801290a:	085a      	lsrs	r2, r3, #1
 801290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290e:	699b      	ldr	r3, [r3, #24]
 8012910:	f003 0301 	and.w	r3, r3, #1
 8012914:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012916:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291a:	69da      	ldr	r2, [r3, #28]
 801291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291e:	899b      	ldrh	r3, [r3, #12]
 8012920:	4619      	mov	r1, r3
 8012922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012924:	440b      	add	r3, r1
 8012926:	3b01      	subs	r3, #1
 8012928:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801292a:	8989      	ldrh	r1, [r1, #12]
 801292c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012930:	429a      	cmp	r2, r3
 8012932:	d201      	bcs.n	8012938 <find_volume+0x41c>
 8012934:	230d      	movs	r3, #13
 8012936:	e06a      	b.n	8012a0e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801293a:	f04f 32ff 	mov.w	r2, #4294967295
 801293e:	615a      	str	r2, [r3, #20]
 8012940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012942:	695a      	ldr	r2, [r3, #20]
 8012944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012946:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801294a:	2280      	movs	r2, #128	; 0x80
 801294c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801294e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012952:	2b03      	cmp	r3, #3
 8012954:	d149      	bne.n	80129ea <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012958:	3334      	adds	r3, #52	; 0x34
 801295a:	3330      	adds	r3, #48	; 0x30
 801295c:	4618      	mov	r0, r3
 801295e:	f7fe fb77 	bl	8011050 <ld_word>
 8012962:	4603      	mov	r3, r0
 8012964:	2b01      	cmp	r3, #1
 8012966:	d140      	bne.n	80129ea <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801296a:	3301      	adds	r3, #1
 801296c:	4619      	mov	r1, r3
 801296e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012970:	f7fe fde2 	bl	8011538 <move_window>
 8012974:	4603      	mov	r3, r0
 8012976:	2b00      	cmp	r3, #0
 8012978:	d137      	bne.n	80129ea <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801297c:	2200      	movs	r2, #0
 801297e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012982:	3334      	adds	r3, #52	; 0x34
 8012984:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012988:	4618      	mov	r0, r3
 801298a:	f7fe fb61 	bl	8011050 <ld_word>
 801298e:	4603      	mov	r3, r0
 8012990:	461a      	mov	r2, r3
 8012992:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012996:	429a      	cmp	r2, r3
 8012998:	d127      	bne.n	80129ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299c:	3334      	adds	r3, #52	; 0x34
 801299e:	4618      	mov	r0, r3
 80129a0:	f7fe fb6e 	bl	8011080 <ld_dword>
 80129a4:	4603      	mov	r3, r0
 80129a6:	4a1c      	ldr	r2, [pc, #112]	; (8012a18 <find_volume+0x4fc>)
 80129a8:	4293      	cmp	r3, r2
 80129aa:	d11e      	bne.n	80129ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80129ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ae:	3334      	adds	r3, #52	; 0x34
 80129b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80129b4:	4618      	mov	r0, r3
 80129b6:	f7fe fb63 	bl	8011080 <ld_dword>
 80129ba:	4603      	mov	r3, r0
 80129bc:	4a17      	ldr	r2, [pc, #92]	; (8012a1c <find_volume+0x500>)
 80129be:	4293      	cmp	r3, r2
 80129c0:	d113      	bne.n	80129ea <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80129c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c4:	3334      	adds	r3, #52	; 0x34
 80129c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7fe fb58 	bl	8011080 <ld_dword>
 80129d0:	4602      	mov	r2, r0
 80129d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80129d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d8:	3334      	adds	r3, #52	; 0x34
 80129da:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80129de:	4618      	mov	r0, r3
 80129e0:	f7fe fb4e 	bl	8011080 <ld_dword>
 80129e4:	4602      	mov	r2, r0
 80129e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80129ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80129f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80129f2:	4b0b      	ldr	r3, [pc, #44]	; (8012a20 <find_volume+0x504>)
 80129f4:	881b      	ldrh	r3, [r3, #0]
 80129f6:	3301      	adds	r3, #1
 80129f8:	b29a      	uxth	r2, r3
 80129fa:	4b09      	ldr	r3, [pc, #36]	; (8012a20 <find_volume+0x504>)
 80129fc:	801a      	strh	r2, [r3, #0]
 80129fe:	4b08      	ldr	r3, [pc, #32]	; (8012a20 <find_volume+0x504>)
 8012a00:	881a      	ldrh	r2, [r3, #0]
 8012a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a04:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012a06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a08:	f7fe fd2e 	bl	8011468 <clear_lock>
#endif
	return FR_OK;
 8012a0c:	2300      	movs	r3, #0
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3758      	adds	r7, #88	; 0x58
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	bf00      	nop
 8012a18:	41615252 	.word	0x41615252
 8012a1c:	61417272 	.word	0x61417272
 8012a20:	20000208 	.word	0x20000208

08012a24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012a2e:	2309      	movs	r3, #9
 8012a30:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d01c      	beq.n	8012a72 <validate+0x4e>
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d018      	beq.n	8012a72 <validate+0x4e>
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d013      	beq.n	8012a72 <validate+0x4e>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	889a      	ldrh	r2, [r3, #4]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	88db      	ldrh	r3, [r3, #6]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d10c      	bne.n	8012a72 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	785b      	ldrb	r3, [r3, #1]
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7fe fa58 	bl	8010f14 <disk_status>
 8012a64:	4603      	mov	r3, r0
 8012a66:	f003 0301 	and.w	r3, r3, #1
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d101      	bne.n	8012a72 <validate+0x4e>
			res = FR_OK;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012a72:	7bfb      	ldrb	r3, [r7, #15]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d102      	bne.n	8012a7e <validate+0x5a>
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	e000      	b.n	8012a80 <validate+0x5c>
 8012a7e:	2300      	movs	r3, #0
 8012a80:	683a      	ldr	r2, [r7, #0]
 8012a82:	6013      	str	r3, [r2, #0]
	return res;
 8012a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3710      	adds	r7, #16
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}

08012a8e <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012a8e:	b580      	push	{r7, lr}
 8012a90:	b098      	sub	sp, #96	; 0x60
 8012a92:	af00      	add	r7, sp, #0
 8012a94:	60f8      	str	r0, [r7, #12]
 8012a96:	60b9      	str	r1, [r7, #8]
 8012a98:	4613      	mov	r3, r2
 8012a9a:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d101      	bne.n	8012aa6 <f_open+0x18>
 8012aa2:	2309      	movs	r3, #9
 8012aa4:	e1bb      	b.n	8012e1e <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012aa6:	79fb      	ldrb	r3, [r7, #7]
 8012aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012aac:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012aae:	79fa      	ldrb	r2, [r7, #7]
 8012ab0:	f107 0110 	add.w	r1, r7, #16
 8012ab4:	f107 0308 	add.w	r3, r7, #8
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f7ff fd2f 	bl	801251c <find_volume>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012ac4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	f040 819f 	bne.w	8012e0c <f_open+0x37e>
		dj.obj.fs = fs;
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012ad2:	68ba      	ldr	r2, [r7, #8]
 8012ad4:	f107 0314 	add.w	r3, r7, #20
 8012ad8:	4611      	mov	r1, r2
 8012ada:	4618      	mov	r0, r3
 8012adc:	f7ff fc0e 	bl	80122fc <follow_path>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d11a      	bne.n	8012b24 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012aee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012af2:	b25b      	sxtb	r3, r3
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	da03      	bge.n	8012b00 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012af8:	2306      	movs	r3, #6
 8012afa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012afe:	e011      	b.n	8012b24 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012b00:	79fb      	ldrb	r3, [r7, #7]
 8012b02:	f023 0301 	bic.w	r3, r3, #1
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	bf14      	ite	ne
 8012b0a:	2301      	movne	r3, #1
 8012b0c:	2300      	moveq	r3, #0
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	461a      	mov	r2, r3
 8012b12:	f107 0314 	add.w	r3, r7, #20
 8012b16:	4611      	mov	r1, r2
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7fe fb99 	bl	8011250 <chk_lock>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012b24:	79fb      	ldrb	r3, [r7, #7]
 8012b26:	f003 031c 	and.w	r3, r3, #28
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d07f      	beq.n	8012c2e <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012b2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d017      	beq.n	8012b66 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012b36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b3a:	2b04      	cmp	r3, #4
 8012b3c:	d10e      	bne.n	8012b5c <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012b3e:	f7fe fbe3 	bl	8011308 <enq_lock>
 8012b42:	4603      	mov	r3, r0
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d006      	beq.n	8012b56 <f_open+0xc8>
 8012b48:	f107 0314 	add.w	r3, r7, #20
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7ff fb0f 	bl	8012170 <dir_register>
 8012b52:	4603      	mov	r3, r0
 8012b54:	e000      	b.n	8012b58 <f_open+0xca>
 8012b56:	2312      	movs	r3, #18
 8012b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012b5c:	79fb      	ldrb	r3, [r7, #7]
 8012b5e:	f043 0308 	orr.w	r3, r3, #8
 8012b62:	71fb      	strb	r3, [r7, #7]
 8012b64:	e010      	b.n	8012b88 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012b66:	7ebb      	ldrb	r3, [r7, #26]
 8012b68:	f003 0311 	and.w	r3, r3, #17
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d003      	beq.n	8012b78 <f_open+0xea>
					res = FR_DENIED;
 8012b70:	2307      	movs	r3, #7
 8012b72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012b76:	e007      	b.n	8012b88 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012b78:	79fb      	ldrb	r3, [r7, #7]
 8012b7a:	f003 0304 	and.w	r3, r3, #4
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d002      	beq.n	8012b88 <f_open+0xfa>
 8012b82:	2308      	movs	r3, #8
 8012b84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012b88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d168      	bne.n	8012c62 <f_open+0x1d4>
 8012b90:	79fb      	ldrb	r3, [r7, #7]
 8012b92:	f003 0308 	and.w	r3, r3, #8
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d063      	beq.n	8012c62 <f_open+0x1d4>
				dw = GET_FATTIME();
 8012b9a:	f7fb f813 	bl	800dbc4 <get_fattime>
 8012b9e:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ba2:	330e      	adds	r3, #14
 8012ba4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7fe faa8 	bl	80110fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bae:	3316      	adds	r3, #22
 8012bb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7fe faa2 	bl	80110fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bba:	330b      	adds	r3, #11
 8012bbc:	2220      	movs	r2, #32
 8012bbe:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012bc0:	693b      	ldr	r3, [r7, #16]
 8012bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bc4:	4611      	mov	r1, r2
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7ff fa3e 	bl	8012048 <ld_clust>
 8012bcc:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7ff fa56 	bl	8012086 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bdc:	331c      	adds	r3, #28
 8012bde:	2100      	movs	r1, #0
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7fe fa8b 	bl	80110fc <st_dword>
					fs->wflag = 1;
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	2201      	movs	r2, #1
 8012bea:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d037      	beq.n	8012c62 <f_open+0x1d4>
						dw = fs->winsect;
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bf6:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012bf8:	f107 0314 	add.w	r3, r7, #20
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7fe ff46 	bl	8011a92 <remove_chain>
 8012c06:	4603      	mov	r3, r0
 8012c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d126      	bne.n	8012c62 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012c14:	693b      	ldr	r3, [r7, #16]
 8012c16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fe fc8d 	bl	8011538 <move_window>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c28:	3a01      	subs	r2, #1
 8012c2a:	611a      	str	r2, [r3, #16]
 8012c2c:	e019      	b.n	8012c62 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012c2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d115      	bne.n	8012c62 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012c36:	7ebb      	ldrb	r3, [r7, #26]
 8012c38:	f003 0310 	and.w	r3, r3, #16
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d003      	beq.n	8012c48 <f_open+0x1ba>
					res = FR_NO_FILE;
 8012c40:	2304      	movs	r3, #4
 8012c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012c46:	e00c      	b.n	8012c62 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012c48:	79fb      	ldrb	r3, [r7, #7]
 8012c4a:	f003 0302 	and.w	r3, r3, #2
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d007      	beq.n	8012c62 <f_open+0x1d4>
 8012c52:	7ebb      	ldrb	r3, [r7, #26]
 8012c54:	f003 0301 	and.w	r3, r3, #1
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d002      	beq.n	8012c62 <f_open+0x1d4>
						res = FR_DENIED;
 8012c5c:	2307      	movs	r3, #7
 8012c5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012c62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d128      	bne.n	8012cbc <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012c6a:	79fb      	ldrb	r3, [r7, #7]
 8012c6c:	f003 0308 	and.w	r3, r3, #8
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d003      	beq.n	8012c7c <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012c74:	79fb      	ldrb	r3, [r7, #7]
 8012c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c7a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012c8a:	79fb      	ldrb	r3, [r7, #7]
 8012c8c:	f023 0301 	bic.w	r3, r3, #1
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	bf14      	ite	ne
 8012c94:	2301      	movne	r3, #1
 8012c96:	2300      	moveq	r3, #0
 8012c98:	b2db      	uxtb	r3, r3
 8012c9a:	461a      	mov	r2, r3
 8012c9c:	f107 0314 	add.w	r3, r7, #20
 8012ca0:	4611      	mov	r1, r2
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7fe fb52 	bl	801134c <inc_lock>
 8012ca8:	4602      	mov	r2, r0
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	691b      	ldr	r3, [r3, #16]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d102      	bne.n	8012cbc <f_open+0x22e>
 8012cb6:	2302      	movs	r3, #2
 8012cb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012cbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	f040 80a3 	bne.w	8012e0c <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012cc6:	693b      	ldr	r3, [r7, #16]
 8012cc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cca:	4611      	mov	r1, r2
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7ff f9bb 	bl	8012048 <ld_clust>
 8012cd2:	4602      	mov	r2, r0
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cda:	331c      	adds	r3, #28
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f7fe f9cf 	bl	8011080 <ld_dword>
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	2200      	movs	r2, #0
 8012cec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012cee:	693a      	ldr	r2, [r7, #16]
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012cf4:	693b      	ldr	r3, [r7, #16]
 8012cf6:	88da      	ldrh	r2, [r3, #6]
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	79fa      	ldrb	r2, [r7, #7]
 8012d00:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	2200      	movs	r2, #0
 8012d06:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	2200      	movs	r2, #0
 8012d12:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	3330      	adds	r3, #48	; 0x30
 8012d18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012d1c:	2100      	movs	r1, #0
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7fe fa39 	bl	8011196 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012d24:	79fb      	ldrb	r3, [r7, #7]
 8012d26:	f003 0320 	and.w	r3, r3, #32
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d06e      	beq.n	8012e0c <f_open+0x37e>
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	68db      	ldr	r3, [r3, #12]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d06a      	beq.n	8012e0c <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	68da      	ldr	r2, [r3, #12]
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	895b      	ldrh	r3, [r3, #10]
 8012d42:	461a      	mov	r2, r3
 8012d44:	693b      	ldr	r3, [r7, #16]
 8012d46:	899b      	ldrh	r3, [r3, #12]
 8012d48:	fb03 f302 	mul.w	r3, r3, r2
 8012d4c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	689b      	ldr	r3, [r3, #8]
 8012d52:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	68db      	ldr	r3, [r3, #12]
 8012d58:	657b      	str	r3, [r7, #84]	; 0x54
 8012d5a:	e016      	b.n	8012d8a <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7fe fca6 	bl	80116b2 <get_fat>
 8012d66:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d6a:	2b01      	cmp	r3, #1
 8012d6c:	d802      	bhi.n	8012d74 <f_open+0x2e6>
 8012d6e:	2302      	movs	r3, #2
 8012d70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012d74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d7a:	d102      	bne.n	8012d82 <f_open+0x2f4>
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d86:	1ad3      	subs	r3, r2, r3
 8012d88:	657b      	str	r3, [r7, #84]	; 0x54
 8012d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d103      	bne.n	8012d9a <f_open+0x30c>
 8012d92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d8e0      	bhi.n	8012d5c <f_open+0x2ce>
				}
				fp->clust = clst;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d9e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d131      	bne.n	8012e0c <f_open+0x37e>
 8012da8:	693b      	ldr	r3, [r7, #16]
 8012daa:	899b      	ldrh	r3, [r3, #12]
 8012dac:	461a      	mov	r2, r3
 8012dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012db0:	fbb3 f1f2 	udiv	r1, r3, r2
 8012db4:	fb02 f201 	mul.w	r2, r2, r1
 8012db8:	1a9b      	subs	r3, r3, r2
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d026      	beq.n	8012e0c <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7fe fc56 	bl	8011674 <clust2sect>
 8012dc8:	6478      	str	r0, [r7, #68]	; 0x44
 8012dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d103      	bne.n	8012dd8 <f_open+0x34a>
						res = FR_INT_ERR;
 8012dd0:	2302      	movs	r3, #2
 8012dd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012dd6:	e019      	b.n	8012e0c <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	899b      	ldrh	r3, [r3, #12]
 8012ddc:	461a      	mov	r2, r3
 8012dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012de0:	fbb3 f2f2 	udiv	r2, r3, r2
 8012de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012de6:	441a      	add	r2, r3
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	7858      	ldrb	r0, [r3, #1]
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	6a1a      	ldr	r2, [r3, #32]
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	f7fe f8ca 	bl	8010f94 <disk_read>
 8012e00:	4603      	mov	r3, r0
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d002      	beq.n	8012e0c <f_open+0x37e>
 8012e06:	2301      	movs	r3, #1
 8012e08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d002      	beq.n	8012e1a <f_open+0x38c>
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	2200      	movs	r2, #0
 8012e18:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012e1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3760      	adds	r7, #96	; 0x60
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}

08012e26 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012e26:	b580      	push	{r7, lr}
 8012e28:	b08c      	sub	sp, #48	; 0x30
 8012e2a:	af00      	add	r7, sp, #0
 8012e2c:	60f8      	str	r0, [r7, #12]
 8012e2e:	60b9      	str	r1, [r7, #8]
 8012e30:	607a      	str	r2, [r7, #4]
 8012e32:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	f107 0210 	add.w	r2, r7, #16
 8012e44:	4611      	mov	r1, r2
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7ff fdec 	bl	8012a24 <validate>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d107      	bne.n	8012e6a <f_write+0x44>
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	7d5b      	ldrb	r3, [r3, #21]
 8012e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012e62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d002      	beq.n	8012e70 <f_write+0x4a>
 8012e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e6e:	e16a      	b.n	8013146 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	7d1b      	ldrb	r3, [r3, #20]
 8012e74:	f003 0302 	and.w	r3, r3, #2
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d101      	bne.n	8012e80 <f_write+0x5a>
 8012e7c:	2307      	movs	r3, #7
 8012e7e:	e162      	b.n	8013146 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	699a      	ldr	r2, [r3, #24]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	441a      	add	r2, r3
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	699b      	ldr	r3, [r3, #24]
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	f080 814c 	bcs.w	801312a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	699b      	ldr	r3, [r3, #24]
 8012e96:	43db      	mvns	r3, r3
 8012e98:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012e9a:	e146      	b.n	801312a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	699b      	ldr	r3, [r3, #24]
 8012ea0:	693a      	ldr	r2, [r7, #16]
 8012ea2:	8992      	ldrh	r2, [r2, #12]
 8012ea4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ea8:	fb02 f201 	mul.w	r2, r2, r1
 8012eac:	1a9b      	subs	r3, r3, r2
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	f040 80f1 	bne.w	8013096 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	699b      	ldr	r3, [r3, #24]
 8012eb8:	693a      	ldr	r2, [r7, #16]
 8012eba:	8992      	ldrh	r2, [r2, #12]
 8012ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ec0:	693a      	ldr	r2, [r7, #16]
 8012ec2:	8952      	ldrh	r2, [r2, #10]
 8012ec4:	3a01      	subs	r2, #1
 8012ec6:	4013      	ands	r3, r2
 8012ec8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d143      	bne.n	8012f58 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	699b      	ldr	r3, [r3, #24]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d10c      	bne.n	8012ef2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	689b      	ldr	r3, [r3, #8]
 8012edc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d11a      	bne.n	8012f1a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2100      	movs	r1, #0
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fe fe37 	bl	8011b5c <create_chain>
 8012eee:	62b8      	str	r0, [r7, #40]	; 0x28
 8012ef0:	e013      	b.n	8012f1a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d007      	beq.n	8012f0a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	699b      	ldr	r3, [r3, #24]
 8012efe:	4619      	mov	r1, r3
 8012f00:	68f8      	ldr	r0, [r7, #12]
 8012f02:	f7fe fec3 	bl	8011c8c <clmt_clust>
 8012f06:	62b8      	str	r0, [r7, #40]	; 0x28
 8012f08:	e007      	b.n	8012f1a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012f0a:	68fa      	ldr	r2, [r7, #12]
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	69db      	ldr	r3, [r3, #28]
 8012f10:	4619      	mov	r1, r3
 8012f12:	4610      	mov	r0, r2
 8012f14:	f7fe fe22 	bl	8011b5c <create_chain>
 8012f18:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	f000 8109 	beq.w	8013134 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d104      	bne.n	8012f32 <f_write+0x10c>
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2202      	movs	r2, #2
 8012f2c:	755a      	strb	r2, [r3, #21]
 8012f2e:	2302      	movs	r3, #2
 8012f30:	e109      	b.n	8013146 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f38:	d104      	bne.n	8012f44 <f_write+0x11e>
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	2201      	movs	r2, #1
 8012f3e:	755a      	strb	r2, [r3, #21]
 8012f40:	2301      	movs	r3, #1
 8012f42:	e100      	b.n	8013146 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f48:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	689b      	ldr	r3, [r3, #8]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d102      	bne.n	8012f58 <f_write+0x132>
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f56:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	7d1b      	ldrb	r3, [r3, #20]
 8012f5c:	b25b      	sxtb	r3, r3
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	da18      	bge.n	8012f94 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	7858      	ldrb	r0, [r3, #1]
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	6a1a      	ldr	r2, [r3, #32]
 8012f70:	2301      	movs	r3, #1
 8012f72:	f7fe f82f 	bl	8010fd4 <disk_write>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d004      	beq.n	8012f86 <f_write+0x160>
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2201      	movs	r2, #1
 8012f80:	755a      	strb	r2, [r3, #21]
 8012f82:	2301      	movs	r3, #1
 8012f84:	e0df      	b.n	8013146 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	7d1b      	ldrb	r3, [r3, #20]
 8012f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f8e:	b2da      	uxtb	r2, r3
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012f94:	693a      	ldr	r2, [r7, #16]
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	69db      	ldr	r3, [r3, #28]
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	4610      	mov	r0, r2
 8012f9e:	f7fe fb69 	bl	8011674 <clust2sect>
 8012fa2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d104      	bne.n	8012fb4 <f_write+0x18e>
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	2202      	movs	r2, #2
 8012fae:	755a      	strb	r2, [r3, #21]
 8012fb0:	2302      	movs	r3, #2
 8012fb2:	e0c8      	b.n	8013146 <f_write+0x320>
			sect += csect;
 8012fb4:	697a      	ldr	r2, [r7, #20]
 8012fb6:	69bb      	ldr	r3, [r7, #24]
 8012fb8:	4413      	add	r3, r2
 8012fba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012fbc:	693b      	ldr	r3, [r7, #16]
 8012fbe:	899b      	ldrh	r3, [r3, #12]
 8012fc0:	461a      	mov	r2, r3
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fc8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012fca:	6a3b      	ldr	r3, [r7, #32]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d043      	beq.n	8013058 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012fd0:	69ba      	ldr	r2, [r7, #24]
 8012fd2:	6a3b      	ldr	r3, [r7, #32]
 8012fd4:	4413      	add	r3, r2
 8012fd6:	693a      	ldr	r2, [r7, #16]
 8012fd8:	8952      	ldrh	r2, [r2, #10]
 8012fda:	4293      	cmp	r3, r2
 8012fdc:	d905      	bls.n	8012fea <f_write+0x1c4>
					cc = fs->csize - csect;
 8012fde:	693b      	ldr	r3, [r7, #16]
 8012fe0:	895b      	ldrh	r3, [r3, #10]
 8012fe2:	461a      	mov	r2, r3
 8012fe4:	69bb      	ldr	r3, [r7, #24]
 8012fe6:	1ad3      	subs	r3, r2, r3
 8012fe8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012fea:	693b      	ldr	r3, [r7, #16]
 8012fec:	7858      	ldrb	r0, [r3, #1]
 8012fee:	6a3b      	ldr	r3, [r7, #32]
 8012ff0:	697a      	ldr	r2, [r7, #20]
 8012ff2:	69f9      	ldr	r1, [r7, #28]
 8012ff4:	f7fd ffee 	bl	8010fd4 <disk_write>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d004      	beq.n	8013008 <f_write+0x1e2>
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	2201      	movs	r2, #1
 8013002:	755a      	strb	r2, [r3, #21]
 8013004:	2301      	movs	r3, #1
 8013006:	e09e      	b.n	8013146 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	6a1a      	ldr	r2, [r3, #32]
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	1ad3      	subs	r3, r2, r3
 8013010:	6a3a      	ldr	r2, [r7, #32]
 8013012:	429a      	cmp	r2, r3
 8013014:	d918      	bls.n	8013048 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	6a1a      	ldr	r2, [r3, #32]
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	1ad3      	subs	r3, r2, r3
 8013024:	693a      	ldr	r2, [r7, #16]
 8013026:	8992      	ldrh	r2, [r2, #12]
 8013028:	fb02 f303 	mul.w	r3, r2, r3
 801302c:	69fa      	ldr	r2, [r7, #28]
 801302e:	18d1      	adds	r1, r2, r3
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	899b      	ldrh	r3, [r3, #12]
 8013034:	461a      	mov	r2, r3
 8013036:	f7fe f88d 	bl	8011154 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	7d1b      	ldrb	r3, [r3, #20]
 801303e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013042:	b2da      	uxtb	r2, r3
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	899b      	ldrh	r3, [r3, #12]
 801304c:	461a      	mov	r2, r3
 801304e:	6a3b      	ldr	r3, [r7, #32]
 8013050:	fb02 f303 	mul.w	r3, r2, r3
 8013054:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013056:	e04b      	b.n	80130f0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	6a1b      	ldr	r3, [r3, #32]
 801305c:	697a      	ldr	r2, [r7, #20]
 801305e:	429a      	cmp	r2, r3
 8013060:	d016      	beq.n	8013090 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	699a      	ldr	r2, [r3, #24]
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801306a:	429a      	cmp	r2, r3
 801306c:	d210      	bcs.n	8013090 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	7858      	ldrb	r0, [r3, #1]
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013078:	2301      	movs	r3, #1
 801307a:	697a      	ldr	r2, [r7, #20]
 801307c:	f7fd ff8a 	bl	8010f94 <disk_read>
 8013080:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013082:	2b00      	cmp	r3, #0
 8013084:	d004      	beq.n	8013090 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	2201      	movs	r2, #1
 801308a:	755a      	strb	r2, [r3, #21]
 801308c:	2301      	movs	r3, #1
 801308e:	e05a      	b.n	8013146 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	697a      	ldr	r2, [r7, #20]
 8013094:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	899b      	ldrh	r3, [r3, #12]
 801309a:	4618      	mov	r0, r3
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	699b      	ldr	r3, [r3, #24]
 80130a0:	693a      	ldr	r2, [r7, #16]
 80130a2:	8992      	ldrh	r2, [r2, #12]
 80130a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80130a8:	fb02 f201 	mul.w	r2, r2, r1
 80130ac:	1a9b      	subs	r3, r3, r2
 80130ae:	1ac3      	subs	r3, r0, r3
 80130b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80130b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d901      	bls.n	80130be <f_write+0x298>
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	699b      	ldr	r3, [r3, #24]
 80130c8:	693a      	ldr	r2, [r7, #16]
 80130ca:	8992      	ldrh	r2, [r2, #12]
 80130cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80130d0:	fb02 f200 	mul.w	r2, r2, r0
 80130d4:	1a9b      	subs	r3, r3, r2
 80130d6:	440b      	add	r3, r1
 80130d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130da:	69f9      	ldr	r1, [r7, #28]
 80130dc:	4618      	mov	r0, r3
 80130de:	f7fe f839 	bl	8011154 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	7d1b      	ldrb	r3, [r3, #20]
 80130e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80130ea:	b2da      	uxtb	r2, r3
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80130f0:	69fa      	ldr	r2, [r7, #28]
 80130f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f4:	4413      	add	r3, r2
 80130f6:	61fb      	str	r3, [r7, #28]
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	699a      	ldr	r2, [r3, #24]
 80130fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fe:	441a      	add	r2, r3
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	619a      	str	r2, [r3, #24]
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	68da      	ldr	r2, [r3, #12]
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	699b      	ldr	r3, [r3, #24]
 801310c:	429a      	cmp	r2, r3
 801310e:	bf38      	it	cc
 8013110:	461a      	movcc	r2, r3
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	60da      	str	r2, [r3, #12]
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	681a      	ldr	r2, [r3, #0]
 801311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311c:	441a      	add	r2, r3
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	601a      	str	r2, [r3, #0]
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013126:	1ad3      	subs	r3, r2, r3
 8013128:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	2b00      	cmp	r3, #0
 801312e:	f47f aeb5 	bne.w	8012e9c <f_write+0x76>
 8013132:	e000      	b.n	8013136 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013134:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	7d1b      	ldrb	r3, [r3, #20]
 801313a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801313e:	b2da      	uxtb	r2, r3
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013144:	2300      	movs	r3, #0
}
 8013146:	4618      	mov	r0, r3
 8013148:	3730      	adds	r7, #48	; 0x30
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}

0801314e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801314e:	b580      	push	{r7, lr}
 8013150:	b086      	sub	sp, #24
 8013152:	af00      	add	r7, sp, #0
 8013154:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	f107 0208 	add.w	r2, r7, #8
 801315c:	4611      	mov	r1, r2
 801315e:	4618      	mov	r0, r3
 8013160:	f7ff fc60 	bl	8012a24 <validate>
 8013164:	4603      	mov	r3, r0
 8013166:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013168:	7dfb      	ldrb	r3, [r7, #23]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d168      	bne.n	8013240 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	7d1b      	ldrb	r3, [r3, #20]
 8013172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013176:	2b00      	cmp	r3, #0
 8013178:	d062      	beq.n	8013240 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	7d1b      	ldrb	r3, [r3, #20]
 801317e:	b25b      	sxtb	r3, r3
 8013180:	2b00      	cmp	r3, #0
 8013182:	da15      	bge.n	80131b0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	7858      	ldrb	r0, [r3, #1]
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6a1a      	ldr	r2, [r3, #32]
 8013192:	2301      	movs	r3, #1
 8013194:	f7fd ff1e 	bl	8010fd4 <disk_write>
 8013198:	4603      	mov	r3, r0
 801319a:	2b00      	cmp	r3, #0
 801319c:	d001      	beq.n	80131a2 <f_sync+0x54>
 801319e:	2301      	movs	r3, #1
 80131a0:	e04f      	b.n	8013242 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	7d1b      	ldrb	r3, [r3, #20]
 80131a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131aa:	b2da      	uxtb	r2, r3
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80131b0:	f7fa fd08 	bl	800dbc4 <get_fattime>
 80131b4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80131b6:	68ba      	ldr	r2, [r7, #8]
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131bc:	4619      	mov	r1, r3
 80131be:	4610      	mov	r0, r2
 80131c0:	f7fe f9ba 	bl	8011538 <move_window>
 80131c4:	4603      	mov	r3, r0
 80131c6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80131c8:	7dfb      	ldrb	r3, [r7, #23]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d138      	bne.n	8013240 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131d2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	330b      	adds	r3, #11
 80131d8:	781a      	ldrb	r2, [r3, #0]
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	330b      	adds	r3, #11
 80131de:	f042 0220 	orr.w	r2, r2, #32
 80131e2:	b2d2      	uxtb	r2, r2
 80131e4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6818      	ldr	r0, [r3, #0]
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	689b      	ldr	r3, [r3, #8]
 80131ee:	461a      	mov	r2, r3
 80131f0:	68f9      	ldr	r1, [r7, #12]
 80131f2:	f7fe ff48 	bl	8012086 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	f103 021c 	add.w	r2, r3, #28
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	68db      	ldr	r3, [r3, #12]
 8013200:	4619      	mov	r1, r3
 8013202:	4610      	mov	r0, r2
 8013204:	f7fd ff7a 	bl	80110fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	3316      	adds	r3, #22
 801320c:	6939      	ldr	r1, [r7, #16]
 801320e:	4618      	mov	r0, r3
 8013210:	f7fd ff74 	bl	80110fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	3312      	adds	r3, #18
 8013218:	2100      	movs	r1, #0
 801321a:	4618      	mov	r0, r3
 801321c:	f7fd ff53 	bl	80110c6 <st_word>
					fs->wflag = 1;
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	2201      	movs	r2, #1
 8013224:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	4618      	mov	r0, r3
 801322a:	f7fe f9b3 	bl	8011594 <sync_fs>
 801322e:	4603      	mov	r3, r0
 8013230:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	7d1b      	ldrb	r3, [r3, #20]
 8013236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801323a:	b2da      	uxtb	r2, r3
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013240:	7dfb      	ldrb	r3, [r7, #23]
}
 8013242:	4618      	mov	r0, r3
 8013244:	3718      	adds	r7, #24
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}

0801324a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801324a:	b580      	push	{r7, lr}
 801324c:	b086      	sub	sp, #24
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
 8013252:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d101      	bne.n	801325e <f_opendir+0x14>
 801325a:	2309      	movs	r3, #9
 801325c:	e064      	b.n	8013328 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8013262:	f107 010c 	add.w	r1, r7, #12
 8013266:	463b      	mov	r3, r7
 8013268:	2200      	movs	r2, #0
 801326a:	4618      	mov	r0, r3
 801326c:	f7ff f956 	bl	801251c <find_volume>
 8013270:	4603      	mov	r3, r0
 8013272:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013274:	7dfb      	ldrb	r3, [r7, #23]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d14f      	bne.n	801331a <f_opendir+0xd0>
		obj->fs = fs;
 801327a:	68fa      	ldr	r2, [r7, #12]
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	4619      	mov	r1, r3
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	f7ff f839 	bl	80122fc <follow_path>
 801328a:	4603      	mov	r3, r0
 801328c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801328e:	7dfb      	ldrb	r3, [r7, #23]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d13d      	bne.n	8013310 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801329a:	b25b      	sxtb	r3, r3
 801329c:	2b00      	cmp	r3, #0
 801329e:	db12      	blt.n	80132c6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	799b      	ldrb	r3, [r3, #6]
 80132a4:	f003 0310 	and.w	r3, r3, #16
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d00a      	beq.n	80132c2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80132ac:	68fa      	ldr	r2, [r7, #12]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6a1b      	ldr	r3, [r3, #32]
 80132b2:	4619      	mov	r1, r3
 80132b4:	4610      	mov	r0, r2
 80132b6:	f7fe fec7 	bl	8012048 <ld_clust>
 80132ba:	4602      	mov	r2, r0
 80132bc:	693b      	ldr	r3, [r7, #16]
 80132be:	609a      	str	r2, [r3, #8]
 80132c0:	e001      	b.n	80132c6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80132c2:	2305      	movs	r3, #5
 80132c4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80132c6:	7dfb      	ldrb	r3, [r7, #23]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d121      	bne.n	8013310 <f_opendir+0xc6>
				obj->id = fs->id;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	88da      	ldrh	r2, [r3, #6]
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80132d4:	2100      	movs	r1, #0
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7fe fd10 	bl	8011cfc <dir_sdi>
 80132dc:	4603      	mov	r3, r0
 80132de:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80132e0:	7dfb      	ldrb	r3, [r7, #23]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d114      	bne.n	8013310 <f_opendir+0xc6>
					if (obj->sclust) {
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	689b      	ldr	r3, [r3, #8]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d00d      	beq.n	801330a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80132ee:	2100      	movs	r1, #0
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f7fe f82b 	bl	801134c <inc_lock>
 80132f6:	4602      	mov	r2, r0
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	691b      	ldr	r3, [r3, #16]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d105      	bne.n	8013310 <f_opendir+0xc6>
 8013304:	2312      	movs	r3, #18
 8013306:	75fb      	strb	r3, [r7, #23]
 8013308:	e002      	b.n	8013310 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	2200      	movs	r2, #0
 801330e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013310:	7dfb      	ldrb	r3, [r7, #23]
 8013312:	2b04      	cmp	r3, #4
 8013314:	d101      	bne.n	801331a <f_opendir+0xd0>
 8013316:	2305      	movs	r3, #5
 8013318:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801331a:	7dfb      	ldrb	r3, [r7, #23]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d002      	beq.n	8013326 <f_opendir+0xdc>
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	2200      	movs	r2, #0
 8013324:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013326:	7dfb      	ldrb	r3, [r7, #23]
}
 8013328:	4618      	mov	r0, r3
 801332a:	3718      	adds	r7, #24
 801332c:	46bd      	mov	sp, r7
 801332e:	bd80      	pop	{r7, pc}

08013330 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b096      	sub	sp, #88	; 0x58
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013338:	f107 0108 	add.w	r1, r7, #8
 801333c:	1d3b      	adds	r3, r7, #4
 801333e:	2202      	movs	r2, #2
 8013340:	4618      	mov	r0, r3
 8013342:	f7ff f8eb 	bl	801251c <find_volume>
 8013346:	4603      	mov	r3, r0
 8013348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013354:	2b00      	cmp	r3, #0
 8013356:	f040 80f2 	bne.w	801353e <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801335a:	687a      	ldr	r2, [r7, #4]
 801335c:	f107 030c 	add.w	r3, r7, #12
 8013360:	4611      	mov	r1, r2
 8013362:	4618      	mov	r0, r3
 8013364:	f7fe ffca 	bl	80122fc <follow_path>
 8013368:	4603      	mov	r3, r0
 801336a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801336e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013372:	2b00      	cmp	r3, #0
 8013374:	d102      	bne.n	801337c <f_mkdir+0x4c>
 8013376:	2308      	movs	r3, #8
 8013378:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801337c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013380:	2b04      	cmp	r3, #4
 8013382:	f040 80dc 	bne.w	801353e <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013386:	f107 030c 	add.w	r3, r7, #12
 801338a:	2100      	movs	r1, #0
 801338c:	4618      	mov	r0, r3
 801338e:	f7fe fbe5 	bl	8011b5c <create_chain>
 8013392:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	895b      	ldrh	r3, [r3, #10]
 8013398:	461a      	mov	r2, r3
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	899b      	ldrh	r3, [r3, #12]
 801339e:	fb03 f302 	mul.w	r3, r3, r2
 80133a2:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80133a4:	2300      	movs	r3, #0
 80133a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80133aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d102      	bne.n	80133b6 <f_mkdir+0x86>
 80133b0:	2307      	movs	r3, #7
 80133b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80133b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133b8:	2b01      	cmp	r3, #1
 80133ba:	d102      	bne.n	80133c2 <f_mkdir+0x92>
 80133bc:	2302      	movs	r3, #2
 80133be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80133c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133c8:	d102      	bne.n	80133d0 <f_mkdir+0xa0>
 80133ca:	2301      	movs	r3, #1
 80133cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80133d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d106      	bne.n	80133e6 <f_mkdir+0xb6>
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	4618      	mov	r0, r3
 80133dc:	f7fe f868 	bl	80114b0 <sync_window>
 80133e0:	4603      	mov	r3, r0
 80133e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80133e6:	f7fa fbed 	bl	800dbc4 <get_fattime>
 80133ea:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80133ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d16c      	bne.n	80134ce <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7fe f93b 	bl	8011674 <clust2sect>
 80133fe:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	3334      	adds	r3, #52	; 0x34
 8013404:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	899b      	ldrh	r3, [r3, #12]
 801340a:	461a      	mov	r2, r3
 801340c:	2100      	movs	r1, #0
 801340e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013410:	f7fd fec1 	bl	8011196 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013414:	220b      	movs	r2, #11
 8013416:	2120      	movs	r1, #32
 8013418:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801341a:	f7fd febc 	bl	8011196 <mem_set>
					dir[DIR_Name] = '.';
 801341e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013420:	222e      	movs	r2, #46	; 0x2e
 8013422:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013426:	330b      	adds	r3, #11
 8013428:	2210      	movs	r2, #16
 801342a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801342c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801342e:	3316      	adds	r3, #22
 8013430:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013432:	4618      	mov	r0, r3
 8013434:	f7fd fe62 	bl	80110fc <st_dword>
					st_clust(fs, dir, dcl);
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801343c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801343e:	4618      	mov	r0, r3
 8013440:	f7fe fe21 	bl	8012086 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013446:	3320      	adds	r3, #32
 8013448:	2220      	movs	r2, #32
 801344a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801344c:	4618      	mov	r0, r3
 801344e:	f7fd fe81 	bl	8011154 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013454:	3321      	adds	r3, #33	; 0x21
 8013456:	222e      	movs	r2, #46	; 0x2e
 8013458:	701a      	strb	r2, [r3, #0]
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	781b      	ldrb	r3, [r3, #0]
 8013462:	2b03      	cmp	r3, #3
 8013464:	d106      	bne.n	8013474 <f_mkdir+0x144>
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801346a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801346c:	429a      	cmp	r2, r3
 801346e:	d101      	bne.n	8013474 <f_mkdir+0x144>
 8013470:	2300      	movs	r3, #0
 8013472:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013474:	68b8      	ldr	r0, [r7, #8]
 8013476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013478:	3320      	adds	r3, #32
 801347a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801347c:	4619      	mov	r1, r3
 801347e:	f7fe fe02 	bl	8012086 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	895b      	ldrh	r3, [r3, #10]
 8013486:	653b      	str	r3, [r7, #80]	; 0x50
 8013488:	e01c      	b.n	80134c4 <f_mkdir+0x194>
					fs->winsect = dsc++;
 801348a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801348c:	1c5a      	adds	r2, r3, #1
 801348e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013490:	68ba      	ldr	r2, [r7, #8]
 8013492:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	2201      	movs	r2, #1
 8013498:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801349a:	68bb      	ldr	r3, [r7, #8]
 801349c:	4618      	mov	r0, r3
 801349e:	f7fe f807 	bl	80114b0 <sync_window>
 80134a2:	4603      	mov	r3, r0
 80134a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80134a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d10d      	bne.n	80134cc <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	899b      	ldrh	r3, [r3, #12]
 80134b4:	461a      	mov	r2, r3
 80134b6:	2100      	movs	r1, #0
 80134b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80134ba:	f7fd fe6c 	bl	8011196 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80134be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134c0:	3b01      	subs	r3, #1
 80134c2:	653b      	str	r3, [r7, #80]	; 0x50
 80134c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d1df      	bne.n	801348a <f_mkdir+0x15a>
 80134ca:	e000      	b.n	80134ce <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80134cc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80134ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d107      	bne.n	80134e6 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80134d6:	f107 030c 	add.w	r3, r7, #12
 80134da:	4618      	mov	r0, r3
 80134dc:	f7fe fe48 	bl	8012170 <dir_register>
 80134e0:	4603      	mov	r3, r0
 80134e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80134e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d120      	bne.n	8013530 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80134ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f0:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80134f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134f4:	3316      	adds	r3, #22
 80134f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fd fdff 	bl	80110fc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80134fe:	68bb      	ldr	r3, [r7, #8]
 8013500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013502:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013504:	4618      	mov	r0, r3
 8013506:	f7fe fdbe 	bl	8012086 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801350a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801350c:	330b      	adds	r3, #11
 801350e:	2210      	movs	r2, #16
 8013510:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	2201      	movs	r2, #1
 8013516:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801351c:	2b00      	cmp	r3, #0
 801351e:	d10e      	bne.n	801353e <f_mkdir+0x20e>
					res = sync_fs(fs);
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	4618      	mov	r0, r3
 8013524:	f7fe f836 	bl	8011594 <sync_fs>
 8013528:	4603      	mov	r3, r0
 801352a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801352e:	e006      	b.n	801353e <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013530:	f107 030c 	add.w	r3, r7, #12
 8013534:	2200      	movs	r2, #0
 8013536:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013538:	4618      	mov	r0, r3
 801353a:	f7fe faaa 	bl	8011a92 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801353e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013542:	4618      	mov	r0, r3
 8013544:	3758      	adds	r7, #88	; 0x58
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}
	...

0801354c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801354c:	b480      	push	{r7}
 801354e:	b087      	sub	sp, #28
 8013550:	af00      	add	r7, sp, #0
 8013552:	60f8      	str	r0, [r7, #12]
 8013554:	60b9      	str	r1, [r7, #8]
 8013556:	4613      	mov	r3, r2
 8013558:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801355a:	2301      	movs	r3, #1
 801355c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801355e:	2300      	movs	r3, #0
 8013560:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013562:	4b1f      	ldr	r3, [pc, #124]	; (80135e0 <FATFS_LinkDriverEx+0x94>)
 8013564:	7a5b      	ldrb	r3, [r3, #9]
 8013566:	b2db      	uxtb	r3, r3
 8013568:	2b00      	cmp	r3, #0
 801356a:	d131      	bne.n	80135d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801356c:	4b1c      	ldr	r3, [pc, #112]	; (80135e0 <FATFS_LinkDriverEx+0x94>)
 801356e:	7a5b      	ldrb	r3, [r3, #9]
 8013570:	b2db      	uxtb	r3, r3
 8013572:	461a      	mov	r2, r3
 8013574:	4b1a      	ldr	r3, [pc, #104]	; (80135e0 <FATFS_LinkDriverEx+0x94>)
 8013576:	2100      	movs	r1, #0
 8013578:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801357a:	4b19      	ldr	r3, [pc, #100]	; (80135e0 <FATFS_LinkDriverEx+0x94>)
 801357c:	7a5b      	ldrb	r3, [r3, #9]
 801357e:	b2db      	uxtb	r3, r3
 8013580:	4a17      	ldr	r2, [pc, #92]	; (80135e0 <FATFS_LinkDriverEx+0x94>)
 8013582:	009b      	lsls	r3, r3, #2
 8013584:	4413      	add	r3, r2
 8013586:	68fa      	ldr	r2, [r7, #12]
 8013588:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801358a:	4b15      	ldr	r3, [pc, #84]	; (80135e0 <FATFS_LinkDriverEx+0x94>)
 801358c:	7a5b      	ldrb	r3, [r3, #9]
 801358e:	b2db      	uxtb	r3, r3
 8013590:	461a      	mov	r2, r3
 8013592:	4b13      	ldr	r3, [pc, #76]	; (80135e0 <FATFS_LinkDriverEx+0x94>)
 8013594:	4413      	add	r3, r2
 8013596:	79fa      	ldrb	r2, [r7, #7]
 8013598:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801359a:	4b11      	ldr	r3, [pc, #68]	; (80135e0 <FATFS_LinkDriverEx+0x94>)
 801359c:	7a5b      	ldrb	r3, [r3, #9]
 801359e:	b2db      	uxtb	r3, r3
 80135a0:	1c5a      	adds	r2, r3, #1
 80135a2:	b2d1      	uxtb	r1, r2
 80135a4:	4a0e      	ldr	r2, [pc, #56]	; (80135e0 <FATFS_LinkDriverEx+0x94>)
 80135a6:	7251      	strb	r1, [r2, #9]
 80135a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80135aa:	7dbb      	ldrb	r3, [r7, #22]
 80135ac:	3330      	adds	r3, #48	; 0x30
 80135ae:	b2da      	uxtb	r2, r3
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	3301      	adds	r3, #1
 80135b8:	223a      	movs	r2, #58	; 0x3a
 80135ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	3302      	adds	r3, #2
 80135c0:	222f      	movs	r2, #47	; 0x2f
 80135c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	3303      	adds	r3, #3
 80135c8:	2200      	movs	r2, #0
 80135ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80135cc:	2300      	movs	r3, #0
 80135ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80135d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	371c      	adds	r7, #28
 80135d6:	46bd      	mov	sp, r7
 80135d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135dc:	4770      	bx	lr
 80135de:	bf00      	nop
 80135e0:	2000022c 	.word	0x2000022c

080135e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b082      	sub	sp, #8
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80135ee:	2200      	movs	r2, #0
 80135f0:	6839      	ldr	r1, [r7, #0]
 80135f2:	6878      	ldr	r0, [r7, #4]
 80135f4:	f7ff ffaa 	bl	801354c <FATFS_LinkDriverEx>
 80135f8:	4603      	mov	r3, r0
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	3708      	adds	r7, #8
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}
	...

08013604 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013608:	2200      	movs	r2, #0
 801360a:	4912      	ldr	r1, [pc, #72]	; (8013654 <MX_USB_DEVICE_Init+0x50>)
 801360c:	4812      	ldr	r0, [pc, #72]	; (8013658 <MX_USB_DEVICE_Init+0x54>)
 801360e:	f7fc fb0c 	bl	800fc2a <USBD_Init>
 8013612:	4603      	mov	r3, r0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d001      	beq.n	801361c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013618:	f7ee faa6 	bl	8001b68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801361c:	490f      	ldr	r1, [pc, #60]	; (801365c <MX_USB_DEVICE_Init+0x58>)
 801361e:	480e      	ldr	r0, [pc, #56]	; (8013658 <MX_USB_DEVICE_Init+0x54>)
 8013620:	f7fc fb33 	bl	800fc8a <USBD_RegisterClass>
 8013624:	4603      	mov	r3, r0
 8013626:	2b00      	cmp	r3, #0
 8013628:	d001      	beq.n	801362e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801362a:	f7ee fa9d 	bl	8001b68 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801362e:	490c      	ldr	r1, [pc, #48]	; (8013660 <MX_USB_DEVICE_Init+0x5c>)
 8013630:	4809      	ldr	r0, [pc, #36]	; (8013658 <MX_USB_DEVICE_Init+0x54>)
 8013632:	f7fa fee3 	bl	800e3fc <USBD_MSC_RegisterStorage>
 8013636:	4603      	mov	r3, r0
 8013638:	2b00      	cmp	r3, #0
 801363a:	d001      	beq.n	8013640 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801363c:	f7ee fa94 	bl	8001b68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013640:	4805      	ldr	r0, [pc, #20]	; (8013658 <MX_USB_DEVICE_Init+0x54>)
 8013642:	f7fc fb49 	bl	800fcd8 <USBD_Start>
 8013646:	4603      	mov	r3, r0
 8013648:	2b00      	cmp	r3, #0
 801364a:	d001      	beq.n	8013650 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801364c:	f7ee fa8c 	bl	8001b68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013650:	bf00      	nop
 8013652:	bd80      	pop	{r7, pc}
 8013654:	200000f4 	.word	0x200000f4
 8013658:	20005afc 	.word	0x20005afc
 801365c:	2000000c 	.word	0x2000000c
 8013660:	20000154 	.word	0x20000154

08013664 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013664:	b480      	push	{r7}
 8013666:	b083      	sub	sp, #12
 8013668:	af00      	add	r7, sp, #0
 801366a:	4603      	mov	r3, r0
 801366c:	6039      	str	r1, [r7, #0]
 801366e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	2212      	movs	r2, #18
 8013674:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013676:	4b03      	ldr	r3, [pc, #12]	; (8013684 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013678:	4618      	mov	r0, r3
 801367a:	370c      	adds	r7, #12
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr
 8013684:	20000114 	.word	0x20000114

08013688 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013688:	b480      	push	{r7}
 801368a:	b083      	sub	sp, #12
 801368c:	af00      	add	r7, sp, #0
 801368e:	4603      	mov	r3, r0
 8013690:	6039      	str	r1, [r7, #0]
 8013692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	2204      	movs	r2, #4
 8013698:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801369a:	4b03      	ldr	r3, [pc, #12]	; (80136a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801369c:	4618      	mov	r0, r3
 801369e:	370c      	adds	r7, #12
 80136a0:	46bd      	mov	sp, r7
 80136a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a6:	4770      	bx	lr
 80136a8:	20000134 	.word	0x20000134

080136ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b082      	sub	sp, #8
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	4603      	mov	r3, r0
 80136b4:	6039      	str	r1, [r7, #0]
 80136b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80136b8:	79fb      	ldrb	r3, [r7, #7]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d105      	bne.n	80136ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80136be:	683a      	ldr	r2, [r7, #0]
 80136c0:	4907      	ldr	r1, [pc, #28]	; (80136e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80136c2:	4808      	ldr	r0, [pc, #32]	; (80136e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80136c4:	f7fd fb63 	bl	8010d8e <USBD_GetString>
 80136c8:	e004      	b.n	80136d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80136ca:	683a      	ldr	r2, [r7, #0]
 80136cc:	4904      	ldr	r1, [pc, #16]	; (80136e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80136ce:	4805      	ldr	r0, [pc, #20]	; (80136e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80136d0:	f7fd fb5d 	bl	8010d8e <USBD_GetString>
  }
  return USBD_StrDesc;
 80136d4:	4b02      	ldr	r3, [pc, #8]	; (80136e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80136d6:	4618      	mov	r0, r3
 80136d8:	3708      	adds	r7, #8
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}
 80136de:	bf00      	nop
 80136e0:	20005dcc 	.word	0x20005dcc
 80136e4:	080149dc 	.word	0x080149dc

080136e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	4603      	mov	r3, r0
 80136f0:	6039      	str	r1, [r7, #0]
 80136f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80136f4:	683a      	ldr	r2, [r7, #0]
 80136f6:	4904      	ldr	r1, [pc, #16]	; (8013708 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80136f8:	4804      	ldr	r0, [pc, #16]	; (801370c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80136fa:	f7fd fb48 	bl	8010d8e <USBD_GetString>
  return USBD_StrDesc;
 80136fe:	4b02      	ldr	r3, [pc, #8]	; (8013708 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013700:	4618      	mov	r0, r3
 8013702:	3708      	adds	r7, #8
 8013704:	46bd      	mov	sp, r7
 8013706:	bd80      	pop	{r7, pc}
 8013708:	20005dcc 	.word	0x20005dcc
 801370c:	080149f0 	.word	0x080149f0

08013710 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
 8013716:	4603      	mov	r3, r0
 8013718:	6039      	str	r1, [r7, #0]
 801371a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	221a      	movs	r2, #26
 8013720:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013722:	f000 f855 	bl	80137d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013726:	4b02      	ldr	r3, [pc, #8]	; (8013730 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013728:	4618      	mov	r0, r3
 801372a:	3708      	adds	r7, #8
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}
 8013730:	20000138 	.word	0x20000138

08013734 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	4603      	mov	r3, r0
 801373c:	6039      	str	r1, [r7, #0]
 801373e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013740:	79fb      	ldrb	r3, [r7, #7]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d105      	bne.n	8013752 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013746:	683a      	ldr	r2, [r7, #0]
 8013748:	4907      	ldr	r1, [pc, #28]	; (8013768 <USBD_FS_ConfigStrDescriptor+0x34>)
 801374a:	4808      	ldr	r0, [pc, #32]	; (801376c <USBD_FS_ConfigStrDescriptor+0x38>)
 801374c:	f7fd fb1f 	bl	8010d8e <USBD_GetString>
 8013750:	e004      	b.n	801375c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013752:	683a      	ldr	r2, [r7, #0]
 8013754:	4904      	ldr	r1, [pc, #16]	; (8013768 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013756:	4805      	ldr	r0, [pc, #20]	; (801376c <USBD_FS_ConfigStrDescriptor+0x38>)
 8013758:	f7fd fb19 	bl	8010d8e <USBD_GetString>
  }
  return USBD_StrDesc;
 801375c:	4b02      	ldr	r3, [pc, #8]	; (8013768 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801375e:	4618      	mov	r0, r3
 8013760:	3708      	adds	r7, #8
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}
 8013766:	bf00      	nop
 8013768:	20005dcc 	.word	0x20005dcc
 801376c:	08014a04 	.word	0x08014a04

08013770 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	4603      	mov	r3, r0
 8013778:	6039      	str	r1, [r7, #0]
 801377a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801377c:	79fb      	ldrb	r3, [r7, #7]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d105      	bne.n	801378e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013782:	683a      	ldr	r2, [r7, #0]
 8013784:	4907      	ldr	r1, [pc, #28]	; (80137a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013786:	4808      	ldr	r0, [pc, #32]	; (80137a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013788:	f7fd fb01 	bl	8010d8e <USBD_GetString>
 801378c:	e004      	b.n	8013798 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801378e:	683a      	ldr	r2, [r7, #0]
 8013790:	4904      	ldr	r1, [pc, #16]	; (80137a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013792:	4805      	ldr	r0, [pc, #20]	; (80137a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013794:	f7fd fafb 	bl	8010d8e <USBD_GetString>
  }
  return USBD_StrDesc;
 8013798:	4b02      	ldr	r3, [pc, #8]	; (80137a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801379a:	4618      	mov	r0, r3
 801379c:	3708      	adds	r7, #8
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	bf00      	nop
 80137a4:	20005dcc 	.word	0x20005dcc
 80137a8:	08014a10 	.word	0x08014a10

080137ac <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137ac:	b480      	push	{r7}
 80137ae:	b083      	sub	sp, #12
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	4603      	mov	r3, r0
 80137b4:	6039      	str	r1, [r7, #0]
 80137b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	220c      	movs	r2, #12
 80137bc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80137be:	4b03      	ldr	r3, [pc, #12]	; (80137cc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	370c      	adds	r7, #12
 80137c4:	46bd      	mov	sp, r7
 80137c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ca:	4770      	bx	lr
 80137cc:	20000128 	.word	0x20000128

080137d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b084      	sub	sp, #16
 80137d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80137d6:	4b0f      	ldr	r3, [pc, #60]	; (8013814 <Get_SerialNum+0x44>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80137dc:	4b0e      	ldr	r3, [pc, #56]	; (8013818 <Get_SerialNum+0x48>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80137e2:	4b0e      	ldr	r3, [pc, #56]	; (801381c <Get_SerialNum+0x4c>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80137e8:	68fa      	ldr	r2, [r7, #12]
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4413      	add	r3, r2
 80137ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d009      	beq.n	801380a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80137f6:	2208      	movs	r2, #8
 80137f8:	4909      	ldr	r1, [pc, #36]	; (8013820 <Get_SerialNum+0x50>)
 80137fa:	68f8      	ldr	r0, [r7, #12]
 80137fc:	f000 f814 	bl	8013828 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013800:	2204      	movs	r2, #4
 8013802:	4908      	ldr	r1, [pc, #32]	; (8013824 <Get_SerialNum+0x54>)
 8013804:	68b8      	ldr	r0, [r7, #8]
 8013806:	f000 f80f 	bl	8013828 <IntToUnicode>
  }
}
 801380a:	bf00      	nop
 801380c:	3710      	adds	r7, #16
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	1fff7a10 	.word	0x1fff7a10
 8013818:	1fff7a14 	.word	0x1fff7a14
 801381c:	1fff7a18 	.word	0x1fff7a18
 8013820:	2000013a 	.word	0x2000013a
 8013824:	2000014a 	.word	0x2000014a

08013828 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013828:	b480      	push	{r7}
 801382a:	b087      	sub	sp, #28
 801382c:	af00      	add	r7, sp, #0
 801382e:	60f8      	str	r0, [r7, #12]
 8013830:	60b9      	str	r1, [r7, #8]
 8013832:	4613      	mov	r3, r2
 8013834:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013836:	2300      	movs	r3, #0
 8013838:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801383a:	2300      	movs	r3, #0
 801383c:	75fb      	strb	r3, [r7, #23]
 801383e:	e027      	b.n	8013890 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	0f1b      	lsrs	r3, r3, #28
 8013844:	2b09      	cmp	r3, #9
 8013846:	d80b      	bhi.n	8013860 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	0f1b      	lsrs	r3, r3, #28
 801384c:	b2da      	uxtb	r2, r3
 801384e:	7dfb      	ldrb	r3, [r7, #23]
 8013850:	005b      	lsls	r3, r3, #1
 8013852:	4619      	mov	r1, r3
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	440b      	add	r3, r1
 8013858:	3230      	adds	r2, #48	; 0x30
 801385a:	b2d2      	uxtb	r2, r2
 801385c:	701a      	strb	r2, [r3, #0]
 801385e:	e00a      	b.n	8013876 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	0f1b      	lsrs	r3, r3, #28
 8013864:	b2da      	uxtb	r2, r3
 8013866:	7dfb      	ldrb	r3, [r7, #23]
 8013868:	005b      	lsls	r3, r3, #1
 801386a:	4619      	mov	r1, r3
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	440b      	add	r3, r1
 8013870:	3237      	adds	r2, #55	; 0x37
 8013872:	b2d2      	uxtb	r2, r2
 8013874:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	011b      	lsls	r3, r3, #4
 801387a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801387c:	7dfb      	ldrb	r3, [r7, #23]
 801387e:	005b      	lsls	r3, r3, #1
 8013880:	3301      	adds	r3, #1
 8013882:	68ba      	ldr	r2, [r7, #8]
 8013884:	4413      	add	r3, r2
 8013886:	2200      	movs	r2, #0
 8013888:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801388a:	7dfb      	ldrb	r3, [r7, #23]
 801388c:	3301      	adds	r3, #1
 801388e:	75fb      	strb	r3, [r7, #23]
 8013890:	7dfa      	ldrb	r2, [r7, #23]
 8013892:	79fb      	ldrb	r3, [r7, #7]
 8013894:	429a      	cmp	r2, r3
 8013896:	d3d3      	bcc.n	8013840 <IntToUnicode+0x18>
  }
}
 8013898:	bf00      	nop
 801389a:	bf00      	nop
 801389c:	371c      	adds	r7, #28
 801389e:	46bd      	mov	sp, r7
 80138a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a4:	4770      	bx	lr

080138a6 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80138a6:	b480      	push	{r7}
 80138a8:	b083      	sub	sp, #12
 80138aa:	af00      	add	r7, sp, #0
 80138ac:	4603      	mov	r3, r0
 80138ae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80138b0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80138b2:	4618      	mov	r0, r3
 80138b4:	370c      	adds	r7, #12
 80138b6:	46bd      	mov	sp, r7
 80138b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138bc:	4770      	bx	lr

080138be <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80138be:	b480      	push	{r7}
 80138c0:	b085      	sub	sp, #20
 80138c2:	af00      	add	r7, sp, #0
 80138c4:	4603      	mov	r3, r0
 80138c6:	60b9      	str	r1, [r7, #8]
 80138c8:	607a      	str	r2, [r7, #4]
 80138ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80138d2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80138da:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80138dc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3714      	adds	r7, #20
 80138e2:	46bd      	mov	sp, r7
 80138e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e8:	4770      	bx	lr

080138ea <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80138ea:	b480      	push	{r7}
 80138ec:	b083      	sub	sp, #12
 80138ee:	af00      	add	r7, sp, #0
 80138f0:	4603      	mov	r3, r0
 80138f2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80138f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	370c      	adds	r7, #12
 80138fa:	46bd      	mov	sp, r7
 80138fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013900:	4770      	bx	lr

08013902 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8013902:	b480      	push	{r7}
 8013904:	b083      	sub	sp, #12
 8013906:	af00      	add	r7, sp, #0
 8013908:	4603      	mov	r3, r0
 801390a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801390c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801390e:	4618      	mov	r0, r3
 8013910:	370c      	adds	r7, #12
 8013912:	46bd      	mov	sp, r7
 8013914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013918:	4770      	bx	lr

0801391a <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801391a:	b480      	push	{r7}
 801391c:	b085      	sub	sp, #20
 801391e:	af00      	add	r7, sp, #0
 8013920:	60b9      	str	r1, [r7, #8]
 8013922:	607a      	str	r2, [r7, #4]
 8013924:	461a      	mov	r2, r3
 8013926:	4603      	mov	r3, r0
 8013928:	73fb      	strb	r3, [r7, #15]
 801392a:	4613      	mov	r3, r2
 801392c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 801392e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013930:	4618      	mov	r0, r3
 8013932:	3714      	adds	r7, #20
 8013934:	46bd      	mov	sp, r7
 8013936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393a:	4770      	bx	lr

0801393c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801393c:	b480      	push	{r7}
 801393e:	b085      	sub	sp, #20
 8013940:	af00      	add	r7, sp, #0
 8013942:	60b9      	str	r1, [r7, #8]
 8013944:	607a      	str	r2, [r7, #4]
 8013946:	461a      	mov	r2, r3
 8013948:	4603      	mov	r3, r0
 801394a:	73fb      	strb	r3, [r7, #15]
 801394c:	4613      	mov	r3, r2
 801394e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8013950:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8013952:	4618      	mov	r0, r3
 8013954:	3714      	adds	r7, #20
 8013956:	46bd      	mov	sp, r7
 8013958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395c:	4770      	bx	lr

0801395e <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801395e:	b480      	push	{r7}
 8013960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8013962:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8013964:	4618      	mov	r0, r3
 8013966:	46bd      	mov	sp, r7
 8013968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396c:	4770      	bx	lr
	...

08013970 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b08a      	sub	sp, #40	; 0x28
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013978:	f107 0314 	add.w	r3, r7, #20
 801397c:	2200      	movs	r2, #0
 801397e:	601a      	str	r2, [r3, #0]
 8013980:	605a      	str	r2, [r3, #4]
 8013982:	609a      	str	r2, [r3, #8]
 8013984:	60da      	str	r2, [r3, #12]
 8013986:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013990:	d147      	bne.n	8013a22 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013992:	2300      	movs	r3, #0
 8013994:	613b      	str	r3, [r7, #16]
 8013996:	4b25      	ldr	r3, [pc, #148]	; (8013a2c <HAL_PCD_MspInit+0xbc>)
 8013998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801399a:	4a24      	ldr	r2, [pc, #144]	; (8013a2c <HAL_PCD_MspInit+0xbc>)
 801399c:	f043 0301 	orr.w	r3, r3, #1
 80139a0:	6313      	str	r3, [r2, #48]	; 0x30
 80139a2:	4b22      	ldr	r3, [pc, #136]	; (8013a2c <HAL_PCD_MspInit+0xbc>)
 80139a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139a6:	f003 0301 	and.w	r3, r3, #1
 80139aa:	613b      	str	r3, [r7, #16]
 80139ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80139ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80139b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80139b4:	2300      	movs	r3, #0
 80139b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139b8:	2300      	movs	r3, #0
 80139ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80139bc:	f107 0314 	add.w	r3, r7, #20
 80139c0:	4619      	mov	r1, r3
 80139c2:	481b      	ldr	r0, [pc, #108]	; (8013a30 <HAL_PCD_MspInit+0xc0>)
 80139c4:	f7f2 fdd2 	bl	800656c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80139c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80139cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80139ce:	2302      	movs	r3, #2
 80139d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139d2:	2300      	movs	r3, #0
 80139d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80139d6:	2303      	movs	r3, #3
 80139d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80139da:	230a      	movs	r3, #10
 80139dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80139de:	f107 0314 	add.w	r3, r7, #20
 80139e2:	4619      	mov	r1, r3
 80139e4:	4812      	ldr	r0, [pc, #72]	; (8013a30 <HAL_PCD_MspInit+0xc0>)
 80139e6:	f7f2 fdc1 	bl	800656c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80139ea:	4b10      	ldr	r3, [pc, #64]	; (8013a2c <HAL_PCD_MspInit+0xbc>)
 80139ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139ee:	4a0f      	ldr	r2, [pc, #60]	; (8013a2c <HAL_PCD_MspInit+0xbc>)
 80139f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139f4:	6353      	str	r3, [r2, #52]	; 0x34
 80139f6:	2300      	movs	r3, #0
 80139f8:	60fb      	str	r3, [r7, #12]
 80139fa:	4b0c      	ldr	r3, [pc, #48]	; (8013a2c <HAL_PCD_MspInit+0xbc>)
 80139fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139fe:	4a0b      	ldr	r2, [pc, #44]	; (8013a2c <HAL_PCD_MspInit+0xbc>)
 8013a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013a04:	6453      	str	r3, [r2, #68]	; 0x44
 8013a06:	4b09      	ldr	r3, [pc, #36]	; (8013a2c <HAL_PCD_MspInit+0xbc>)
 8013a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013a0e:	60fb      	str	r3, [r7, #12]
 8013a10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8013a12:	2200      	movs	r2, #0
 8013a14:	2100      	movs	r1, #0
 8013a16:	2043      	movs	r0, #67	; 0x43
 8013a18:	f7f2 f9d3 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013a1c:	2043      	movs	r0, #67	; 0x43
 8013a1e:	f7f2 f9ec 	bl	8005dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013a22:	bf00      	nop
 8013a24:	3728      	adds	r7, #40	; 0x28
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}
 8013a2a:	bf00      	nop
 8013a2c:	40023800 	.word	0x40023800
 8013a30:	40020000 	.word	0x40020000

08013a34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8013a48:	4619      	mov	r1, r3
 8013a4a:	4610      	mov	r0, r2
 8013a4c:	f7fc f98f 	bl	800fd6e <USBD_LL_SetupStage>
}
 8013a50:	bf00      	nop
 8013a52:	3708      	adds	r7, #8
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd80      	pop	{r7, pc}

08013a58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
 8013a60:	460b      	mov	r3, r1
 8013a62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013a6a:	78fa      	ldrb	r2, [r7, #3]
 8013a6c:	6879      	ldr	r1, [r7, #4]
 8013a6e:	4613      	mov	r3, r2
 8013a70:	00db      	lsls	r3, r3, #3
 8013a72:	1a9b      	subs	r3, r3, r2
 8013a74:	009b      	lsls	r3, r3, #2
 8013a76:	440b      	add	r3, r1
 8013a78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013a7c:	681a      	ldr	r2, [r3, #0]
 8013a7e:	78fb      	ldrb	r3, [r7, #3]
 8013a80:	4619      	mov	r1, r3
 8013a82:	f7fc f9c9 	bl	800fe18 <USBD_LL_DataOutStage>
}
 8013a86:	bf00      	nop
 8013a88:	3708      	adds	r7, #8
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}

08013a8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a8e:	b580      	push	{r7, lr}
 8013a90:	b082      	sub	sp, #8
 8013a92:	af00      	add	r7, sp, #0
 8013a94:	6078      	str	r0, [r7, #4]
 8013a96:	460b      	mov	r3, r1
 8013a98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013aa0:	78fa      	ldrb	r2, [r7, #3]
 8013aa2:	6879      	ldr	r1, [r7, #4]
 8013aa4:	4613      	mov	r3, r2
 8013aa6:	00db      	lsls	r3, r3, #3
 8013aa8:	1a9b      	subs	r3, r3, r2
 8013aaa:	009b      	lsls	r3, r3, #2
 8013aac:	440b      	add	r3, r1
 8013aae:	3348      	adds	r3, #72	; 0x48
 8013ab0:	681a      	ldr	r2, [r3, #0]
 8013ab2:	78fb      	ldrb	r3, [r7, #3]
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	f7fc fa12 	bl	800fede <USBD_LL_DataInStage>
}
 8013aba:	bf00      	nop
 8013abc:	3708      	adds	r7, #8
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}

08013ac2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ac2:	b580      	push	{r7, lr}
 8013ac4:	b082      	sub	sp, #8
 8013ac6:	af00      	add	r7, sp, #0
 8013ac8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7fc fb26 	bl	8010122 <USBD_LL_SOF>
}
 8013ad6:	bf00      	nop
 8013ad8:	3708      	adds	r7, #8
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}

08013ade <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ade:	b580      	push	{r7, lr}
 8013ae0:	b084      	sub	sp, #16
 8013ae2:	af00      	add	r7, sp, #0
 8013ae4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	68db      	ldr	r3, [r3, #12]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d102      	bne.n	8013af8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013af2:	2300      	movs	r3, #0
 8013af4:	73fb      	strb	r3, [r7, #15]
 8013af6:	e008      	b.n	8013b0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	68db      	ldr	r3, [r3, #12]
 8013afc:	2b02      	cmp	r3, #2
 8013afe:	d102      	bne.n	8013b06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013b00:	2301      	movs	r3, #1
 8013b02:	73fb      	strb	r3, [r7, #15]
 8013b04:	e001      	b.n	8013b0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013b06:	f7ee f82f 	bl	8001b68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013b10:	7bfa      	ldrb	r2, [r7, #15]
 8013b12:	4611      	mov	r1, r2
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7fc fac6 	bl	80100a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7fc fa72 	bl	801000a <USBD_LL_Reset>
}
 8013b26:	bf00      	nop
 8013b28:	3710      	adds	r7, #16
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}
	...

08013b30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b082      	sub	sp, #8
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7fc fac1 	bl	80100c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	687a      	ldr	r2, [r7, #4]
 8013b50:	6812      	ldr	r2, [r2, #0]
 8013b52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013b56:	f043 0301 	orr.w	r3, r3, #1
 8013b5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6a1b      	ldr	r3, [r3, #32]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d005      	beq.n	8013b70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013b64:	4b04      	ldr	r3, [pc, #16]	; (8013b78 <HAL_PCD_SuspendCallback+0x48>)
 8013b66:	691b      	ldr	r3, [r3, #16]
 8013b68:	4a03      	ldr	r2, [pc, #12]	; (8013b78 <HAL_PCD_SuspendCallback+0x48>)
 8013b6a:	f043 0306 	orr.w	r3, r3, #6
 8013b6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013b70:	bf00      	nop
 8013b72:	3708      	adds	r7, #8
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}
 8013b78:	e000ed00 	.word	0xe000ed00

08013b7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7fc fab1 	bl	80100f2 <USBD_LL_Resume>
}
 8013b90:	bf00      	nop
 8013b92:	3708      	adds	r7, #8
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}

08013b98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	460b      	mov	r3, r1
 8013ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013baa:	78fa      	ldrb	r2, [r7, #3]
 8013bac:	4611      	mov	r1, r2
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7fc faff 	bl	80101b2 <USBD_LL_IsoOUTIncomplete>
}
 8013bb4:	bf00      	nop
 8013bb6:	3708      	adds	r7, #8
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}

08013bbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	460b      	mov	r3, r1
 8013bc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013bce:	78fa      	ldrb	r2, [r7, #3]
 8013bd0:	4611      	mov	r1, r2
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7fc fac7 	bl	8010166 <USBD_LL_IsoINIncomplete>
}
 8013bd8:	bf00      	nop
 8013bda:	3708      	adds	r7, #8
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}

08013be0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b082      	sub	sp, #8
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f7fc fb05 	bl	80101fe <USBD_LL_DevConnected>
}
 8013bf4:	bf00      	nop
 8013bf6:	3708      	adds	r7, #8
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}

08013bfc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fc fb02 	bl	8010214 <USBD_LL_DevDisconnected>
}
 8013c10:	bf00      	nop
 8013c12:	3708      	adds	r7, #8
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}

08013c18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d13c      	bne.n	8013ca2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013c28:	4a20      	ldr	r2, [pc, #128]	; (8013cac <USBD_LL_Init+0x94>)
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	4a1e      	ldr	r2, [pc, #120]	; (8013cac <USBD_LL_Init+0x94>)
 8013c34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013c38:	4b1c      	ldr	r3, [pc, #112]	; (8013cac <USBD_LL_Init+0x94>)
 8013c3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013c3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8013c40:	4b1a      	ldr	r3, [pc, #104]	; (8013cac <USBD_LL_Init+0x94>)
 8013c42:	2206      	movs	r2, #6
 8013c44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013c46:	4b19      	ldr	r3, [pc, #100]	; (8013cac <USBD_LL_Init+0x94>)
 8013c48:	2202      	movs	r2, #2
 8013c4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013c4c:	4b17      	ldr	r3, [pc, #92]	; (8013cac <USBD_LL_Init+0x94>)
 8013c4e:	2200      	movs	r2, #0
 8013c50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013c52:	4b16      	ldr	r3, [pc, #88]	; (8013cac <USBD_LL_Init+0x94>)
 8013c54:	2202      	movs	r2, #2
 8013c56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013c58:	4b14      	ldr	r3, [pc, #80]	; (8013cac <USBD_LL_Init+0x94>)
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013c5e:	4b13      	ldr	r3, [pc, #76]	; (8013cac <USBD_LL_Init+0x94>)
 8013c60:	2200      	movs	r2, #0
 8013c62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013c64:	4b11      	ldr	r3, [pc, #68]	; (8013cac <USBD_LL_Init+0x94>)
 8013c66:	2200      	movs	r2, #0
 8013c68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8013c6a:	4b10      	ldr	r3, [pc, #64]	; (8013cac <USBD_LL_Init+0x94>)
 8013c6c:	2201      	movs	r2, #1
 8013c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013c70:	4b0e      	ldr	r3, [pc, #56]	; (8013cac <USBD_LL_Init+0x94>)
 8013c72:	2200      	movs	r2, #0
 8013c74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013c76:	480d      	ldr	r0, [pc, #52]	; (8013cac <USBD_LL_Init+0x94>)
 8013c78:	f7f3 fae3 	bl	8007242 <HAL_PCD_Init>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d001      	beq.n	8013c86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013c82:	f7ed ff71 	bl	8001b68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013c86:	2180      	movs	r1, #128	; 0x80
 8013c88:	4808      	ldr	r0, [pc, #32]	; (8013cac <USBD_LL_Init+0x94>)
 8013c8a:	f7f4 fca2 	bl	80085d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013c8e:	2240      	movs	r2, #64	; 0x40
 8013c90:	2100      	movs	r1, #0
 8013c92:	4806      	ldr	r0, [pc, #24]	; (8013cac <USBD_LL_Init+0x94>)
 8013c94:	f7f4 fc56 	bl	8008544 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013c98:	2280      	movs	r2, #128	; 0x80
 8013c9a:	2101      	movs	r1, #1
 8013c9c:	4803      	ldr	r0, [pc, #12]	; (8013cac <USBD_LL_Init+0x94>)
 8013c9e:	f7f4 fc51 	bl	8008544 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013ca2:	2300      	movs	r3, #0
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	20005fcc 	.word	0x20005fcc

08013cb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b084      	sub	sp, #16
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7f3 fbdf 	bl	800748a <HAL_PCD_Start>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013cd0:	7bfb      	ldrb	r3, [r7, #15]
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f000 f9b0 	bl	8014038 <USBD_Get_USB_Status>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	3710      	adds	r7, #16
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}

08013ce6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013ce6:	b580      	push	{r7, lr}
 8013ce8:	b084      	sub	sp, #16
 8013cea:	af00      	add	r7, sp, #0
 8013cec:	6078      	str	r0, [r7, #4]
 8013cee:	4608      	mov	r0, r1
 8013cf0:	4611      	mov	r1, r2
 8013cf2:	461a      	mov	r2, r3
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	70fb      	strb	r3, [r7, #3]
 8013cf8:	460b      	mov	r3, r1
 8013cfa:	70bb      	strb	r3, [r7, #2]
 8013cfc:	4613      	mov	r3, r2
 8013cfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d00:	2300      	movs	r3, #0
 8013d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d04:	2300      	movs	r3, #0
 8013d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013d0e:	78bb      	ldrb	r3, [r7, #2]
 8013d10:	883a      	ldrh	r2, [r7, #0]
 8013d12:	78f9      	ldrb	r1, [r7, #3]
 8013d14:	f7f3 fff0 	bl	8007cf8 <HAL_PCD_EP_Open>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d1c:	7bfb      	ldrb	r3, [r7, #15]
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f000 f98a 	bl	8014038 <USBD_Get_USB_Status>
 8013d24:	4603      	mov	r3, r0
 8013d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3710      	adds	r7, #16
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}

08013d32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013d32:	b580      	push	{r7, lr}
 8013d34:	b084      	sub	sp, #16
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	6078      	str	r0, [r7, #4]
 8013d3a:	460b      	mov	r3, r1
 8013d3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d42:	2300      	movs	r3, #0
 8013d44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013d4c:	78fa      	ldrb	r2, [r7, #3]
 8013d4e:	4611      	mov	r1, r2
 8013d50:	4618      	mov	r0, r3
 8013d52:	f7f4 f839 	bl	8007dc8 <HAL_PCD_EP_Close>
 8013d56:	4603      	mov	r3, r0
 8013d58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d5a:	7bfb      	ldrb	r3, [r7, #15]
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f000 f96b 	bl	8014038 <USBD_Get_USB_Status>
 8013d62:	4603      	mov	r3, r0
 8013d64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3710      	adds	r7, #16
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b084      	sub	sp, #16
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	460b      	mov	r3, r1
 8013d7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d80:	2300      	movs	r3, #0
 8013d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013d8a:	78fa      	ldrb	r2, [r7, #3]
 8013d8c:	4611      	mov	r1, r2
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7f4 f9cb 	bl	800812a <HAL_PCD_EP_Flush>
 8013d94:	4603      	mov	r3, r0
 8013d96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d98:	7bfb      	ldrb	r3, [r7, #15]
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f000 f94c 	bl	8014038 <USBD_Get_USB_Status>
 8013da0:	4603      	mov	r3, r0
 8013da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3710      	adds	r7, #16
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}

08013dae <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013dae:	b580      	push	{r7, lr}
 8013db0:	b084      	sub	sp, #16
 8013db2:	af00      	add	r7, sp, #0
 8013db4:	6078      	str	r0, [r7, #4]
 8013db6:	460b      	mov	r3, r1
 8013db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013dc8:	78fa      	ldrb	r2, [r7, #3]
 8013dca:	4611      	mov	r1, r2
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7f4 f8f2 	bl	8007fb6 <HAL_PCD_EP_SetStall>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013dd6:	7bfb      	ldrb	r3, [r7, #15]
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f000 f92d 	bl	8014038 <USBD_Get_USB_Status>
 8013dde:	4603      	mov	r3, r0
 8013de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8013de4:	4618      	mov	r0, r3
 8013de6:	3710      	adds	r7, #16
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}

08013dec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b084      	sub	sp, #16
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
 8013df4:	460b      	mov	r3, r1
 8013df6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013e06:	78fa      	ldrb	r2, [r7, #3]
 8013e08:	4611      	mov	r1, r2
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7f4 f937 	bl	800807e <HAL_PCD_EP_ClrStall>
 8013e10:	4603      	mov	r3, r0
 8013e12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e14:	7bfb      	ldrb	r3, [r7, #15]
 8013e16:	4618      	mov	r0, r3
 8013e18:	f000 f90e 	bl	8014038 <USBD_Get_USB_Status>
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3710      	adds	r7, #16
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}

08013e2a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013e2a:	b480      	push	{r7}
 8013e2c:	b085      	sub	sp, #20
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	6078      	str	r0, [r7, #4]
 8013e32:	460b      	mov	r3, r1
 8013e34:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013e3c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	da0b      	bge.n	8013e5e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013e46:	78fb      	ldrb	r3, [r7, #3]
 8013e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e4c:	68f9      	ldr	r1, [r7, #12]
 8013e4e:	4613      	mov	r3, r2
 8013e50:	00db      	lsls	r3, r3, #3
 8013e52:	1a9b      	subs	r3, r3, r2
 8013e54:	009b      	lsls	r3, r3, #2
 8013e56:	440b      	add	r3, r1
 8013e58:	333e      	adds	r3, #62	; 0x3e
 8013e5a:	781b      	ldrb	r3, [r3, #0]
 8013e5c:	e00b      	b.n	8013e76 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013e5e:	78fb      	ldrb	r3, [r7, #3]
 8013e60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e64:	68f9      	ldr	r1, [r7, #12]
 8013e66:	4613      	mov	r3, r2
 8013e68:	00db      	lsls	r3, r3, #3
 8013e6a:	1a9b      	subs	r3, r3, r2
 8013e6c:	009b      	lsls	r3, r3, #2
 8013e6e:	440b      	add	r3, r1
 8013e70:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013e74:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	3714      	adds	r7, #20
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr

08013e82 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013e82:	b580      	push	{r7, lr}
 8013e84:	b084      	sub	sp, #16
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	6078      	str	r0, [r7, #4]
 8013e8a:	460b      	mov	r3, r1
 8013e8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e92:	2300      	movs	r3, #0
 8013e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013e9c:	78fa      	ldrb	r2, [r7, #3]
 8013e9e:	4611      	mov	r1, r2
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f7f3 ff04 	bl	8007cae <HAL_PCD_SetAddress>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013eaa:	7bfb      	ldrb	r3, [r7, #15]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f000 f8c3 	bl	8014038 <USBD_Get_USB_Status>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013eb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3710      	adds	r7, #16
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}

08013ec0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b086      	sub	sp, #24
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	60f8      	str	r0, [r7, #12]
 8013ec8:	607a      	str	r2, [r7, #4]
 8013eca:	603b      	str	r3, [r7, #0]
 8013ecc:	460b      	mov	r3, r1
 8013ece:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013ede:	7af9      	ldrb	r1, [r7, #11]
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	687a      	ldr	r2, [r7, #4]
 8013ee4:	f7f4 f81d 	bl	8007f22 <HAL_PCD_EP_Transmit>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013eec:	7dfb      	ldrb	r3, [r7, #23]
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f000 f8a2 	bl	8014038 <USBD_Get_USB_Status>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013ef8:	7dbb      	ldrb	r3, [r7, #22]
}
 8013efa:	4618      	mov	r0, r3
 8013efc:	3718      	adds	r7, #24
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}

08013f02 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013f02:	b580      	push	{r7, lr}
 8013f04:	b086      	sub	sp, #24
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	60f8      	str	r0, [r7, #12]
 8013f0a:	607a      	str	r2, [r7, #4]
 8013f0c:	603b      	str	r3, [r7, #0]
 8013f0e:	460b      	mov	r3, r1
 8013f10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f12:	2300      	movs	r3, #0
 8013f14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f16:	2300      	movs	r3, #0
 8013f18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013f20:	7af9      	ldrb	r1, [r7, #11]
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	687a      	ldr	r2, [r7, #4]
 8013f26:	f7f3 ff99 	bl	8007e5c <HAL_PCD_EP_Receive>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013f2e:	7dfb      	ldrb	r3, [r7, #23]
 8013f30:	4618      	mov	r0, r3
 8013f32:	f000 f881 	bl	8014038 <USBD_Get_USB_Status>
 8013f36:	4603      	mov	r3, r0
 8013f38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013f3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	3718      	adds	r7, #24
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}

08013f44 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b082      	sub	sp, #8
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
 8013f4c:	460b      	mov	r3, r1
 8013f4e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013f56:	78fa      	ldrb	r2, [r7, #3]
 8013f58:	4611      	mov	r1, r2
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7f3 ffc9 	bl	8007ef2 <HAL_PCD_EP_GetRxCount>
 8013f60:	4603      	mov	r3, r0
}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3708      	adds	r7, #8
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
	...

08013f6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	460b      	mov	r3, r1
 8013f76:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013f78:	78fb      	ldrb	r3, [r7, #3]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d002      	beq.n	8013f84 <HAL_PCDEx_LPM_Callback+0x18>
 8013f7e:	2b01      	cmp	r3, #1
 8013f80:	d01f      	beq.n	8013fc2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8013f82:	e03b      	b.n	8013ffc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6a1b      	ldr	r3, [r3, #32]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d007      	beq.n	8013f9c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8013f8c:	f7ed fa10 	bl	80013b0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013f90:	4b1c      	ldr	r3, [pc, #112]	; (8014004 <HAL_PCDEx_LPM_Callback+0x98>)
 8013f92:	691b      	ldr	r3, [r3, #16]
 8013f94:	4a1b      	ldr	r2, [pc, #108]	; (8014004 <HAL_PCDEx_LPM_Callback+0x98>)
 8013f96:	f023 0306 	bic.w	r3, r3, #6
 8013f9a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	687a      	ldr	r2, [r7, #4]
 8013fa8:	6812      	ldr	r2, [r2, #0]
 8013faa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013fae:	f023 0301 	bic.w	r3, r3, #1
 8013fb2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7fc f899 	bl	80100f2 <USBD_LL_Resume>
    break;
 8013fc0:	e01c      	b.n	8013ffc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	687a      	ldr	r2, [r7, #4]
 8013fce:	6812      	ldr	r2, [r2, #0]
 8013fd0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013fd4:	f043 0301 	orr.w	r3, r3, #1
 8013fd8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7fc f870 	bl	80100c6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	6a1b      	ldr	r3, [r3, #32]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d005      	beq.n	8013ffa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013fee:	4b05      	ldr	r3, [pc, #20]	; (8014004 <HAL_PCDEx_LPM_Callback+0x98>)
 8013ff0:	691b      	ldr	r3, [r3, #16]
 8013ff2:	4a04      	ldr	r2, [pc, #16]	; (8014004 <HAL_PCDEx_LPM_Callback+0x98>)
 8013ff4:	f043 0306 	orr.w	r3, r3, #6
 8013ff8:	6113      	str	r3, [r2, #16]
    break;
 8013ffa:	bf00      	nop
}
 8013ffc:	bf00      	nop
 8013ffe:	3708      	adds	r7, #8
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	e000ed00 	.word	0xe000ed00

08014008 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014008:	b480      	push	{r7}
 801400a:	b083      	sub	sp, #12
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014010:	4b03      	ldr	r3, [pc, #12]	; (8014020 <USBD_static_malloc+0x18>)
}
 8014012:	4618      	mov	r0, r3
 8014014:	370c      	adds	r7, #12
 8014016:	46bd      	mov	sp, r7
 8014018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401c:	4770      	bx	lr
 801401e:	bf00      	nop
 8014020:	20000238 	.word	0x20000238

08014024 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014024:	b480      	push	{r7}
 8014026:	b083      	sub	sp, #12
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]

}
 801402c:	bf00      	nop
 801402e:	370c      	adds	r7, #12
 8014030:	46bd      	mov	sp, r7
 8014032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014036:	4770      	bx	lr

08014038 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014038:	b480      	push	{r7}
 801403a:	b085      	sub	sp, #20
 801403c:	af00      	add	r7, sp, #0
 801403e:	4603      	mov	r3, r0
 8014040:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014042:	2300      	movs	r3, #0
 8014044:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014046:	79fb      	ldrb	r3, [r7, #7]
 8014048:	2b03      	cmp	r3, #3
 801404a:	d817      	bhi.n	801407c <USBD_Get_USB_Status+0x44>
 801404c:	a201      	add	r2, pc, #4	; (adr r2, 8014054 <USBD_Get_USB_Status+0x1c>)
 801404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014052:	bf00      	nop
 8014054:	08014065 	.word	0x08014065
 8014058:	0801406b 	.word	0x0801406b
 801405c:	08014071 	.word	0x08014071
 8014060:	08014077 	.word	0x08014077
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014064:	2300      	movs	r3, #0
 8014066:	73fb      	strb	r3, [r7, #15]
    break;
 8014068:	e00b      	b.n	8014082 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801406a:	2303      	movs	r3, #3
 801406c:	73fb      	strb	r3, [r7, #15]
    break;
 801406e:	e008      	b.n	8014082 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014070:	2301      	movs	r3, #1
 8014072:	73fb      	strb	r3, [r7, #15]
    break;
 8014074:	e005      	b.n	8014082 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014076:	2303      	movs	r3, #3
 8014078:	73fb      	strb	r3, [r7, #15]
    break;
 801407a:	e002      	b.n	8014082 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801407c:	2303      	movs	r3, #3
 801407e:	73fb      	strb	r3, [r7, #15]
    break;
 8014080:	bf00      	nop
  }
  return usb_status;
 8014082:	7bfb      	ldrb	r3, [r7, #15]
}
 8014084:	4618      	mov	r0, r3
 8014086:	3714      	adds	r7, #20
 8014088:	46bd      	mov	sp, r7
 801408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408e:	4770      	bx	lr

08014090 <__errno>:
 8014090:	4b01      	ldr	r3, [pc, #4]	; (8014098 <__errno+0x8>)
 8014092:	6818      	ldr	r0, [r3, #0]
 8014094:	4770      	bx	lr
 8014096:	bf00      	nop
 8014098:	20000174 	.word	0x20000174

0801409c <__libc_init_array>:
 801409c:	b570      	push	{r4, r5, r6, lr}
 801409e:	4d0d      	ldr	r5, [pc, #52]	; (80140d4 <__libc_init_array+0x38>)
 80140a0:	4c0d      	ldr	r4, [pc, #52]	; (80140d8 <__libc_init_array+0x3c>)
 80140a2:	1b64      	subs	r4, r4, r5
 80140a4:	10a4      	asrs	r4, r4, #2
 80140a6:	2600      	movs	r6, #0
 80140a8:	42a6      	cmp	r6, r4
 80140aa:	d109      	bne.n	80140c0 <__libc_init_array+0x24>
 80140ac:	4d0b      	ldr	r5, [pc, #44]	; (80140dc <__libc_init_array+0x40>)
 80140ae:	4c0c      	ldr	r4, [pc, #48]	; (80140e0 <__libc_init_array+0x44>)
 80140b0:	f000 fc4e 	bl	8014950 <_init>
 80140b4:	1b64      	subs	r4, r4, r5
 80140b6:	10a4      	asrs	r4, r4, #2
 80140b8:	2600      	movs	r6, #0
 80140ba:	42a6      	cmp	r6, r4
 80140bc:	d105      	bne.n	80140ca <__libc_init_array+0x2e>
 80140be:	bd70      	pop	{r4, r5, r6, pc}
 80140c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80140c4:	4798      	blx	r3
 80140c6:	3601      	adds	r6, #1
 80140c8:	e7ee      	b.n	80140a8 <__libc_init_array+0xc>
 80140ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80140ce:	4798      	blx	r3
 80140d0:	3601      	adds	r6, #1
 80140d2:	e7f2      	b.n	80140ba <__libc_init_array+0x1e>
 80140d4:	08014b34 	.word	0x08014b34
 80140d8:	08014b34 	.word	0x08014b34
 80140dc:	08014b34 	.word	0x08014b34
 80140e0:	08014b38 	.word	0x08014b38

080140e4 <memcpy>:
 80140e4:	440a      	add	r2, r1
 80140e6:	4291      	cmp	r1, r2
 80140e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80140ec:	d100      	bne.n	80140f0 <memcpy+0xc>
 80140ee:	4770      	bx	lr
 80140f0:	b510      	push	{r4, lr}
 80140f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80140fa:	4291      	cmp	r1, r2
 80140fc:	d1f9      	bne.n	80140f2 <memcpy+0xe>
 80140fe:	bd10      	pop	{r4, pc}

08014100 <memset>:
 8014100:	4402      	add	r2, r0
 8014102:	4603      	mov	r3, r0
 8014104:	4293      	cmp	r3, r2
 8014106:	d100      	bne.n	801410a <memset+0xa>
 8014108:	4770      	bx	lr
 801410a:	f803 1b01 	strb.w	r1, [r3], #1
 801410e:	e7f9      	b.n	8014104 <memset+0x4>

08014110 <siprintf>:
 8014110:	b40e      	push	{r1, r2, r3}
 8014112:	b500      	push	{lr}
 8014114:	b09c      	sub	sp, #112	; 0x70
 8014116:	ab1d      	add	r3, sp, #116	; 0x74
 8014118:	9002      	str	r0, [sp, #8]
 801411a:	9006      	str	r0, [sp, #24]
 801411c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014120:	4809      	ldr	r0, [pc, #36]	; (8014148 <siprintf+0x38>)
 8014122:	9107      	str	r1, [sp, #28]
 8014124:	9104      	str	r1, [sp, #16]
 8014126:	4909      	ldr	r1, [pc, #36]	; (801414c <siprintf+0x3c>)
 8014128:	f853 2b04 	ldr.w	r2, [r3], #4
 801412c:	9105      	str	r1, [sp, #20]
 801412e:	6800      	ldr	r0, [r0, #0]
 8014130:	9301      	str	r3, [sp, #4]
 8014132:	a902      	add	r1, sp, #8
 8014134:	f000 f868 	bl	8014208 <_svfiprintf_r>
 8014138:	9b02      	ldr	r3, [sp, #8]
 801413a:	2200      	movs	r2, #0
 801413c:	701a      	strb	r2, [r3, #0]
 801413e:	b01c      	add	sp, #112	; 0x70
 8014140:	f85d eb04 	ldr.w	lr, [sp], #4
 8014144:	b003      	add	sp, #12
 8014146:	4770      	bx	lr
 8014148:	20000174 	.word	0x20000174
 801414c:	ffff0208 	.word	0xffff0208

08014150 <__ssputs_r>:
 8014150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014154:	688e      	ldr	r6, [r1, #8]
 8014156:	429e      	cmp	r6, r3
 8014158:	4682      	mov	sl, r0
 801415a:	460c      	mov	r4, r1
 801415c:	4690      	mov	r8, r2
 801415e:	461f      	mov	r7, r3
 8014160:	d838      	bhi.n	80141d4 <__ssputs_r+0x84>
 8014162:	898a      	ldrh	r2, [r1, #12]
 8014164:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014168:	d032      	beq.n	80141d0 <__ssputs_r+0x80>
 801416a:	6825      	ldr	r5, [r4, #0]
 801416c:	6909      	ldr	r1, [r1, #16]
 801416e:	eba5 0901 	sub.w	r9, r5, r1
 8014172:	6965      	ldr	r5, [r4, #20]
 8014174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801417c:	3301      	adds	r3, #1
 801417e:	444b      	add	r3, r9
 8014180:	106d      	asrs	r5, r5, #1
 8014182:	429d      	cmp	r5, r3
 8014184:	bf38      	it	cc
 8014186:	461d      	movcc	r5, r3
 8014188:	0553      	lsls	r3, r2, #21
 801418a:	d531      	bpl.n	80141f0 <__ssputs_r+0xa0>
 801418c:	4629      	mov	r1, r5
 801418e:	f000 fb39 	bl	8014804 <_malloc_r>
 8014192:	4606      	mov	r6, r0
 8014194:	b950      	cbnz	r0, 80141ac <__ssputs_r+0x5c>
 8014196:	230c      	movs	r3, #12
 8014198:	f8ca 3000 	str.w	r3, [sl]
 801419c:	89a3      	ldrh	r3, [r4, #12]
 801419e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141a2:	81a3      	strh	r3, [r4, #12]
 80141a4:	f04f 30ff 	mov.w	r0, #4294967295
 80141a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141ac:	6921      	ldr	r1, [r4, #16]
 80141ae:	464a      	mov	r2, r9
 80141b0:	f7ff ff98 	bl	80140e4 <memcpy>
 80141b4:	89a3      	ldrh	r3, [r4, #12]
 80141b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80141ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141be:	81a3      	strh	r3, [r4, #12]
 80141c0:	6126      	str	r6, [r4, #16]
 80141c2:	6165      	str	r5, [r4, #20]
 80141c4:	444e      	add	r6, r9
 80141c6:	eba5 0509 	sub.w	r5, r5, r9
 80141ca:	6026      	str	r6, [r4, #0]
 80141cc:	60a5      	str	r5, [r4, #8]
 80141ce:	463e      	mov	r6, r7
 80141d0:	42be      	cmp	r6, r7
 80141d2:	d900      	bls.n	80141d6 <__ssputs_r+0x86>
 80141d4:	463e      	mov	r6, r7
 80141d6:	4632      	mov	r2, r6
 80141d8:	6820      	ldr	r0, [r4, #0]
 80141da:	4641      	mov	r1, r8
 80141dc:	f000 faa8 	bl	8014730 <memmove>
 80141e0:	68a3      	ldr	r3, [r4, #8]
 80141e2:	6822      	ldr	r2, [r4, #0]
 80141e4:	1b9b      	subs	r3, r3, r6
 80141e6:	4432      	add	r2, r6
 80141e8:	60a3      	str	r3, [r4, #8]
 80141ea:	6022      	str	r2, [r4, #0]
 80141ec:	2000      	movs	r0, #0
 80141ee:	e7db      	b.n	80141a8 <__ssputs_r+0x58>
 80141f0:	462a      	mov	r2, r5
 80141f2:	f000 fb61 	bl	80148b8 <_realloc_r>
 80141f6:	4606      	mov	r6, r0
 80141f8:	2800      	cmp	r0, #0
 80141fa:	d1e1      	bne.n	80141c0 <__ssputs_r+0x70>
 80141fc:	6921      	ldr	r1, [r4, #16]
 80141fe:	4650      	mov	r0, sl
 8014200:	f000 fab0 	bl	8014764 <_free_r>
 8014204:	e7c7      	b.n	8014196 <__ssputs_r+0x46>
	...

08014208 <_svfiprintf_r>:
 8014208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801420c:	4698      	mov	r8, r3
 801420e:	898b      	ldrh	r3, [r1, #12]
 8014210:	061b      	lsls	r3, r3, #24
 8014212:	b09d      	sub	sp, #116	; 0x74
 8014214:	4607      	mov	r7, r0
 8014216:	460d      	mov	r5, r1
 8014218:	4614      	mov	r4, r2
 801421a:	d50e      	bpl.n	801423a <_svfiprintf_r+0x32>
 801421c:	690b      	ldr	r3, [r1, #16]
 801421e:	b963      	cbnz	r3, 801423a <_svfiprintf_r+0x32>
 8014220:	2140      	movs	r1, #64	; 0x40
 8014222:	f000 faef 	bl	8014804 <_malloc_r>
 8014226:	6028      	str	r0, [r5, #0]
 8014228:	6128      	str	r0, [r5, #16]
 801422a:	b920      	cbnz	r0, 8014236 <_svfiprintf_r+0x2e>
 801422c:	230c      	movs	r3, #12
 801422e:	603b      	str	r3, [r7, #0]
 8014230:	f04f 30ff 	mov.w	r0, #4294967295
 8014234:	e0d1      	b.n	80143da <_svfiprintf_r+0x1d2>
 8014236:	2340      	movs	r3, #64	; 0x40
 8014238:	616b      	str	r3, [r5, #20]
 801423a:	2300      	movs	r3, #0
 801423c:	9309      	str	r3, [sp, #36]	; 0x24
 801423e:	2320      	movs	r3, #32
 8014240:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014244:	f8cd 800c 	str.w	r8, [sp, #12]
 8014248:	2330      	movs	r3, #48	; 0x30
 801424a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80143f4 <_svfiprintf_r+0x1ec>
 801424e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014252:	f04f 0901 	mov.w	r9, #1
 8014256:	4623      	mov	r3, r4
 8014258:	469a      	mov	sl, r3
 801425a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801425e:	b10a      	cbz	r2, 8014264 <_svfiprintf_r+0x5c>
 8014260:	2a25      	cmp	r2, #37	; 0x25
 8014262:	d1f9      	bne.n	8014258 <_svfiprintf_r+0x50>
 8014264:	ebba 0b04 	subs.w	fp, sl, r4
 8014268:	d00b      	beq.n	8014282 <_svfiprintf_r+0x7a>
 801426a:	465b      	mov	r3, fp
 801426c:	4622      	mov	r2, r4
 801426e:	4629      	mov	r1, r5
 8014270:	4638      	mov	r0, r7
 8014272:	f7ff ff6d 	bl	8014150 <__ssputs_r>
 8014276:	3001      	adds	r0, #1
 8014278:	f000 80aa 	beq.w	80143d0 <_svfiprintf_r+0x1c8>
 801427c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801427e:	445a      	add	r2, fp
 8014280:	9209      	str	r2, [sp, #36]	; 0x24
 8014282:	f89a 3000 	ldrb.w	r3, [sl]
 8014286:	2b00      	cmp	r3, #0
 8014288:	f000 80a2 	beq.w	80143d0 <_svfiprintf_r+0x1c8>
 801428c:	2300      	movs	r3, #0
 801428e:	f04f 32ff 	mov.w	r2, #4294967295
 8014292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014296:	f10a 0a01 	add.w	sl, sl, #1
 801429a:	9304      	str	r3, [sp, #16]
 801429c:	9307      	str	r3, [sp, #28]
 801429e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142a2:	931a      	str	r3, [sp, #104]	; 0x68
 80142a4:	4654      	mov	r4, sl
 80142a6:	2205      	movs	r2, #5
 80142a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142ac:	4851      	ldr	r0, [pc, #324]	; (80143f4 <_svfiprintf_r+0x1ec>)
 80142ae:	f7eb ffaf 	bl	8000210 <memchr>
 80142b2:	9a04      	ldr	r2, [sp, #16]
 80142b4:	b9d8      	cbnz	r0, 80142ee <_svfiprintf_r+0xe6>
 80142b6:	06d0      	lsls	r0, r2, #27
 80142b8:	bf44      	itt	mi
 80142ba:	2320      	movmi	r3, #32
 80142bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80142c0:	0711      	lsls	r1, r2, #28
 80142c2:	bf44      	itt	mi
 80142c4:	232b      	movmi	r3, #43	; 0x2b
 80142c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80142ca:	f89a 3000 	ldrb.w	r3, [sl]
 80142ce:	2b2a      	cmp	r3, #42	; 0x2a
 80142d0:	d015      	beq.n	80142fe <_svfiprintf_r+0xf6>
 80142d2:	9a07      	ldr	r2, [sp, #28]
 80142d4:	4654      	mov	r4, sl
 80142d6:	2000      	movs	r0, #0
 80142d8:	f04f 0c0a 	mov.w	ip, #10
 80142dc:	4621      	mov	r1, r4
 80142de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142e2:	3b30      	subs	r3, #48	; 0x30
 80142e4:	2b09      	cmp	r3, #9
 80142e6:	d94e      	bls.n	8014386 <_svfiprintf_r+0x17e>
 80142e8:	b1b0      	cbz	r0, 8014318 <_svfiprintf_r+0x110>
 80142ea:	9207      	str	r2, [sp, #28]
 80142ec:	e014      	b.n	8014318 <_svfiprintf_r+0x110>
 80142ee:	eba0 0308 	sub.w	r3, r0, r8
 80142f2:	fa09 f303 	lsl.w	r3, r9, r3
 80142f6:	4313      	orrs	r3, r2
 80142f8:	9304      	str	r3, [sp, #16]
 80142fa:	46a2      	mov	sl, r4
 80142fc:	e7d2      	b.n	80142a4 <_svfiprintf_r+0x9c>
 80142fe:	9b03      	ldr	r3, [sp, #12]
 8014300:	1d19      	adds	r1, r3, #4
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	9103      	str	r1, [sp, #12]
 8014306:	2b00      	cmp	r3, #0
 8014308:	bfbb      	ittet	lt
 801430a:	425b      	neglt	r3, r3
 801430c:	f042 0202 	orrlt.w	r2, r2, #2
 8014310:	9307      	strge	r3, [sp, #28]
 8014312:	9307      	strlt	r3, [sp, #28]
 8014314:	bfb8      	it	lt
 8014316:	9204      	strlt	r2, [sp, #16]
 8014318:	7823      	ldrb	r3, [r4, #0]
 801431a:	2b2e      	cmp	r3, #46	; 0x2e
 801431c:	d10c      	bne.n	8014338 <_svfiprintf_r+0x130>
 801431e:	7863      	ldrb	r3, [r4, #1]
 8014320:	2b2a      	cmp	r3, #42	; 0x2a
 8014322:	d135      	bne.n	8014390 <_svfiprintf_r+0x188>
 8014324:	9b03      	ldr	r3, [sp, #12]
 8014326:	1d1a      	adds	r2, r3, #4
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	9203      	str	r2, [sp, #12]
 801432c:	2b00      	cmp	r3, #0
 801432e:	bfb8      	it	lt
 8014330:	f04f 33ff 	movlt.w	r3, #4294967295
 8014334:	3402      	adds	r4, #2
 8014336:	9305      	str	r3, [sp, #20]
 8014338:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014404 <_svfiprintf_r+0x1fc>
 801433c:	7821      	ldrb	r1, [r4, #0]
 801433e:	2203      	movs	r2, #3
 8014340:	4650      	mov	r0, sl
 8014342:	f7eb ff65 	bl	8000210 <memchr>
 8014346:	b140      	cbz	r0, 801435a <_svfiprintf_r+0x152>
 8014348:	2340      	movs	r3, #64	; 0x40
 801434a:	eba0 000a 	sub.w	r0, r0, sl
 801434e:	fa03 f000 	lsl.w	r0, r3, r0
 8014352:	9b04      	ldr	r3, [sp, #16]
 8014354:	4303      	orrs	r3, r0
 8014356:	3401      	adds	r4, #1
 8014358:	9304      	str	r3, [sp, #16]
 801435a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801435e:	4826      	ldr	r0, [pc, #152]	; (80143f8 <_svfiprintf_r+0x1f0>)
 8014360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014364:	2206      	movs	r2, #6
 8014366:	f7eb ff53 	bl	8000210 <memchr>
 801436a:	2800      	cmp	r0, #0
 801436c:	d038      	beq.n	80143e0 <_svfiprintf_r+0x1d8>
 801436e:	4b23      	ldr	r3, [pc, #140]	; (80143fc <_svfiprintf_r+0x1f4>)
 8014370:	bb1b      	cbnz	r3, 80143ba <_svfiprintf_r+0x1b2>
 8014372:	9b03      	ldr	r3, [sp, #12]
 8014374:	3307      	adds	r3, #7
 8014376:	f023 0307 	bic.w	r3, r3, #7
 801437a:	3308      	adds	r3, #8
 801437c:	9303      	str	r3, [sp, #12]
 801437e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014380:	4433      	add	r3, r6
 8014382:	9309      	str	r3, [sp, #36]	; 0x24
 8014384:	e767      	b.n	8014256 <_svfiprintf_r+0x4e>
 8014386:	fb0c 3202 	mla	r2, ip, r2, r3
 801438a:	460c      	mov	r4, r1
 801438c:	2001      	movs	r0, #1
 801438e:	e7a5      	b.n	80142dc <_svfiprintf_r+0xd4>
 8014390:	2300      	movs	r3, #0
 8014392:	3401      	adds	r4, #1
 8014394:	9305      	str	r3, [sp, #20]
 8014396:	4619      	mov	r1, r3
 8014398:	f04f 0c0a 	mov.w	ip, #10
 801439c:	4620      	mov	r0, r4
 801439e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143a2:	3a30      	subs	r2, #48	; 0x30
 80143a4:	2a09      	cmp	r2, #9
 80143a6:	d903      	bls.n	80143b0 <_svfiprintf_r+0x1a8>
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d0c5      	beq.n	8014338 <_svfiprintf_r+0x130>
 80143ac:	9105      	str	r1, [sp, #20]
 80143ae:	e7c3      	b.n	8014338 <_svfiprintf_r+0x130>
 80143b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80143b4:	4604      	mov	r4, r0
 80143b6:	2301      	movs	r3, #1
 80143b8:	e7f0      	b.n	801439c <_svfiprintf_r+0x194>
 80143ba:	ab03      	add	r3, sp, #12
 80143bc:	9300      	str	r3, [sp, #0]
 80143be:	462a      	mov	r2, r5
 80143c0:	4b0f      	ldr	r3, [pc, #60]	; (8014400 <_svfiprintf_r+0x1f8>)
 80143c2:	a904      	add	r1, sp, #16
 80143c4:	4638      	mov	r0, r7
 80143c6:	f3af 8000 	nop.w
 80143ca:	1c42      	adds	r2, r0, #1
 80143cc:	4606      	mov	r6, r0
 80143ce:	d1d6      	bne.n	801437e <_svfiprintf_r+0x176>
 80143d0:	89ab      	ldrh	r3, [r5, #12]
 80143d2:	065b      	lsls	r3, r3, #25
 80143d4:	f53f af2c 	bmi.w	8014230 <_svfiprintf_r+0x28>
 80143d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143da:	b01d      	add	sp, #116	; 0x74
 80143dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143e0:	ab03      	add	r3, sp, #12
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	462a      	mov	r2, r5
 80143e6:	4b06      	ldr	r3, [pc, #24]	; (8014400 <_svfiprintf_r+0x1f8>)
 80143e8:	a904      	add	r1, sp, #16
 80143ea:	4638      	mov	r0, r7
 80143ec:	f000 f87a 	bl	80144e4 <_printf_i>
 80143f0:	e7eb      	b.n	80143ca <_svfiprintf_r+0x1c2>
 80143f2:	bf00      	nop
 80143f4:	08014af8 	.word	0x08014af8
 80143f8:	08014b02 	.word	0x08014b02
 80143fc:	00000000 	.word	0x00000000
 8014400:	08014151 	.word	0x08014151
 8014404:	08014afe 	.word	0x08014afe

08014408 <_printf_common>:
 8014408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801440c:	4616      	mov	r6, r2
 801440e:	4699      	mov	r9, r3
 8014410:	688a      	ldr	r2, [r1, #8]
 8014412:	690b      	ldr	r3, [r1, #16]
 8014414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014418:	4293      	cmp	r3, r2
 801441a:	bfb8      	it	lt
 801441c:	4613      	movlt	r3, r2
 801441e:	6033      	str	r3, [r6, #0]
 8014420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014424:	4607      	mov	r7, r0
 8014426:	460c      	mov	r4, r1
 8014428:	b10a      	cbz	r2, 801442e <_printf_common+0x26>
 801442a:	3301      	adds	r3, #1
 801442c:	6033      	str	r3, [r6, #0]
 801442e:	6823      	ldr	r3, [r4, #0]
 8014430:	0699      	lsls	r1, r3, #26
 8014432:	bf42      	ittt	mi
 8014434:	6833      	ldrmi	r3, [r6, #0]
 8014436:	3302      	addmi	r3, #2
 8014438:	6033      	strmi	r3, [r6, #0]
 801443a:	6825      	ldr	r5, [r4, #0]
 801443c:	f015 0506 	ands.w	r5, r5, #6
 8014440:	d106      	bne.n	8014450 <_printf_common+0x48>
 8014442:	f104 0a19 	add.w	sl, r4, #25
 8014446:	68e3      	ldr	r3, [r4, #12]
 8014448:	6832      	ldr	r2, [r6, #0]
 801444a:	1a9b      	subs	r3, r3, r2
 801444c:	42ab      	cmp	r3, r5
 801444e:	dc26      	bgt.n	801449e <_printf_common+0x96>
 8014450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014454:	1e13      	subs	r3, r2, #0
 8014456:	6822      	ldr	r2, [r4, #0]
 8014458:	bf18      	it	ne
 801445a:	2301      	movne	r3, #1
 801445c:	0692      	lsls	r2, r2, #26
 801445e:	d42b      	bmi.n	80144b8 <_printf_common+0xb0>
 8014460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014464:	4649      	mov	r1, r9
 8014466:	4638      	mov	r0, r7
 8014468:	47c0      	blx	r8
 801446a:	3001      	adds	r0, #1
 801446c:	d01e      	beq.n	80144ac <_printf_common+0xa4>
 801446e:	6823      	ldr	r3, [r4, #0]
 8014470:	68e5      	ldr	r5, [r4, #12]
 8014472:	6832      	ldr	r2, [r6, #0]
 8014474:	f003 0306 	and.w	r3, r3, #6
 8014478:	2b04      	cmp	r3, #4
 801447a:	bf08      	it	eq
 801447c:	1aad      	subeq	r5, r5, r2
 801447e:	68a3      	ldr	r3, [r4, #8]
 8014480:	6922      	ldr	r2, [r4, #16]
 8014482:	bf0c      	ite	eq
 8014484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014488:	2500      	movne	r5, #0
 801448a:	4293      	cmp	r3, r2
 801448c:	bfc4      	itt	gt
 801448e:	1a9b      	subgt	r3, r3, r2
 8014490:	18ed      	addgt	r5, r5, r3
 8014492:	2600      	movs	r6, #0
 8014494:	341a      	adds	r4, #26
 8014496:	42b5      	cmp	r5, r6
 8014498:	d11a      	bne.n	80144d0 <_printf_common+0xc8>
 801449a:	2000      	movs	r0, #0
 801449c:	e008      	b.n	80144b0 <_printf_common+0xa8>
 801449e:	2301      	movs	r3, #1
 80144a0:	4652      	mov	r2, sl
 80144a2:	4649      	mov	r1, r9
 80144a4:	4638      	mov	r0, r7
 80144a6:	47c0      	blx	r8
 80144a8:	3001      	adds	r0, #1
 80144aa:	d103      	bne.n	80144b4 <_printf_common+0xac>
 80144ac:	f04f 30ff 	mov.w	r0, #4294967295
 80144b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144b4:	3501      	adds	r5, #1
 80144b6:	e7c6      	b.n	8014446 <_printf_common+0x3e>
 80144b8:	18e1      	adds	r1, r4, r3
 80144ba:	1c5a      	adds	r2, r3, #1
 80144bc:	2030      	movs	r0, #48	; 0x30
 80144be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80144c2:	4422      	add	r2, r4
 80144c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80144c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80144cc:	3302      	adds	r3, #2
 80144ce:	e7c7      	b.n	8014460 <_printf_common+0x58>
 80144d0:	2301      	movs	r3, #1
 80144d2:	4622      	mov	r2, r4
 80144d4:	4649      	mov	r1, r9
 80144d6:	4638      	mov	r0, r7
 80144d8:	47c0      	blx	r8
 80144da:	3001      	adds	r0, #1
 80144dc:	d0e6      	beq.n	80144ac <_printf_common+0xa4>
 80144de:	3601      	adds	r6, #1
 80144e0:	e7d9      	b.n	8014496 <_printf_common+0x8e>
	...

080144e4 <_printf_i>:
 80144e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80144e8:	460c      	mov	r4, r1
 80144ea:	4691      	mov	r9, r2
 80144ec:	7e27      	ldrb	r7, [r4, #24]
 80144ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80144f0:	2f78      	cmp	r7, #120	; 0x78
 80144f2:	4680      	mov	r8, r0
 80144f4:	469a      	mov	sl, r3
 80144f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80144fa:	d807      	bhi.n	801450c <_printf_i+0x28>
 80144fc:	2f62      	cmp	r7, #98	; 0x62
 80144fe:	d80a      	bhi.n	8014516 <_printf_i+0x32>
 8014500:	2f00      	cmp	r7, #0
 8014502:	f000 80d8 	beq.w	80146b6 <_printf_i+0x1d2>
 8014506:	2f58      	cmp	r7, #88	; 0x58
 8014508:	f000 80a3 	beq.w	8014652 <_printf_i+0x16e>
 801450c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014514:	e03a      	b.n	801458c <_printf_i+0xa8>
 8014516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801451a:	2b15      	cmp	r3, #21
 801451c:	d8f6      	bhi.n	801450c <_printf_i+0x28>
 801451e:	a001      	add	r0, pc, #4	; (adr r0, 8014524 <_printf_i+0x40>)
 8014520:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014524:	0801457d 	.word	0x0801457d
 8014528:	08014591 	.word	0x08014591
 801452c:	0801450d 	.word	0x0801450d
 8014530:	0801450d 	.word	0x0801450d
 8014534:	0801450d 	.word	0x0801450d
 8014538:	0801450d 	.word	0x0801450d
 801453c:	08014591 	.word	0x08014591
 8014540:	0801450d 	.word	0x0801450d
 8014544:	0801450d 	.word	0x0801450d
 8014548:	0801450d 	.word	0x0801450d
 801454c:	0801450d 	.word	0x0801450d
 8014550:	0801469d 	.word	0x0801469d
 8014554:	080145c1 	.word	0x080145c1
 8014558:	0801467f 	.word	0x0801467f
 801455c:	0801450d 	.word	0x0801450d
 8014560:	0801450d 	.word	0x0801450d
 8014564:	080146bf 	.word	0x080146bf
 8014568:	0801450d 	.word	0x0801450d
 801456c:	080145c1 	.word	0x080145c1
 8014570:	0801450d 	.word	0x0801450d
 8014574:	0801450d 	.word	0x0801450d
 8014578:	08014687 	.word	0x08014687
 801457c:	680b      	ldr	r3, [r1, #0]
 801457e:	1d1a      	adds	r2, r3, #4
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	600a      	str	r2, [r1, #0]
 8014584:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801458c:	2301      	movs	r3, #1
 801458e:	e0a3      	b.n	80146d8 <_printf_i+0x1f4>
 8014590:	6825      	ldr	r5, [r4, #0]
 8014592:	6808      	ldr	r0, [r1, #0]
 8014594:	062e      	lsls	r6, r5, #24
 8014596:	f100 0304 	add.w	r3, r0, #4
 801459a:	d50a      	bpl.n	80145b2 <_printf_i+0xce>
 801459c:	6805      	ldr	r5, [r0, #0]
 801459e:	600b      	str	r3, [r1, #0]
 80145a0:	2d00      	cmp	r5, #0
 80145a2:	da03      	bge.n	80145ac <_printf_i+0xc8>
 80145a4:	232d      	movs	r3, #45	; 0x2d
 80145a6:	426d      	negs	r5, r5
 80145a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145ac:	485e      	ldr	r0, [pc, #376]	; (8014728 <_printf_i+0x244>)
 80145ae:	230a      	movs	r3, #10
 80145b0:	e019      	b.n	80145e6 <_printf_i+0x102>
 80145b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80145b6:	6805      	ldr	r5, [r0, #0]
 80145b8:	600b      	str	r3, [r1, #0]
 80145ba:	bf18      	it	ne
 80145bc:	b22d      	sxthne	r5, r5
 80145be:	e7ef      	b.n	80145a0 <_printf_i+0xbc>
 80145c0:	680b      	ldr	r3, [r1, #0]
 80145c2:	6825      	ldr	r5, [r4, #0]
 80145c4:	1d18      	adds	r0, r3, #4
 80145c6:	6008      	str	r0, [r1, #0]
 80145c8:	0628      	lsls	r0, r5, #24
 80145ca:	d501      	bpl.n	80145d0 <_printf_i+0xec>
 80145cc:	681d      	ldr	r5, [r3, #0]
 80145ce:	e002      	b.n	80145d6 <_printf_i+0xf2>
 80145d0:	0669      	lsls	r1, r5, #25
 80145d2:	d5fb      	bpl.n	80145cc <_printf_i+0xe8>
 80145d4:	881d      	ldrh	r5, [r3, #0]
 80145d6:	4854      	ldr	r0, [pc, #336]	; (8014728 <_printf_i+0x244>)
 80145d8:	2f6f      	cmp	r7, #111	; 0x6f
 80145da:	bf0c      	ite	eq
 80145dc:	2308      	moveq	r3, #8
 80145de:	230a      	movne	r3, #10
 80145e0:	2100      	movs	r1, #0
 80145e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80145e6:	6866      	ldr	r6, [r4, #4]
 80145e8:	60a6      	str	r6, [r4, #8]
 80145ea:	2e00      	cmp	r6, #0
 80145ec:	bfa2      	ittt	ge
 80145ee:	6821      	ldrge	r1, [r4, #0]
 80145f0:	f021 0104 	bicge.w	r1, r1, #4
 80145f4:	6021      	strge	r1, [r4, #0]
 80145f6:	b90d      	cbnz	r5, 80145fc <_printf_i+0x118>
 80145f8:	2e00      	cmp	r6, #0
 80145fa:	d04d      	beq.n	8014698 <_printf_i+0x1b4>
 80145fc:	4616      	mov	r6, r2
 80145fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8014602:	fb03 5711 	mls	r7, r3, r1, r5
 8014606:	5dc7      	ldrb	r7, [r0, r7]
 8014608:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801460c:	462f      	mov	r7, r5
 801460e:	42bb      	cmp	r3, r7
 8014610:	460d      	mov	r5, r1
 8014612:	d9f4      	bls.n	80145fe <_printf_i+0x11a>
 8014614:	2b08      	cmp	r3, #8
 8014616:	d10b      	bne.n	8014630 <_printf_i+0x14c>
 8014618:	6823      	ldr	r3, [r4, #0]
 801461a:	07df      	lsls	r7, r3, #31
 801461c:	d508      	bpl.n	8014630 <_printf_i+0x14c>
 801461e:	6923      	ldr	r3, [r4, #16]
 8014620:	6861      	ldr	r1, [r4, #4]
 8014622:	4299      	cmp	r1, r3
 8014624:	bfde      	ittt	le
 8014626:	2330      	movle	r3, #48	; 0x30
 8014628:	f806 3c01 	strble.w	r3, [r6, #-1]
 801462c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014630:	1b92      	subs	r2, r2, r6
 8014632:	6122      	str	r2, [r4, #16]
 8014634:	f8cd a000 	str.w	sl, [sp]
 8014638:	464b      	mov	r3, r9
 801463a:	aa03      	add	r2, sp, #12
 801463c:	4621      	mov	r1, r4
 801463e:	4640      	mov	r0, r8
 8014640:	f7ff fee2 	bl	8014408 <_printf_common>
 8014644:	3001      	adds	r0, #1
 8014646:	d14c      	bne.n	80146e2 <_printf_i+0x1fe>
 8014648:	f04f 30ff 	mov.w	r0, #4294967295
 801464c:	b004      	add	sp, #16
 801464e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014652:	4835      	ldr	r0, [pc, #212]	; (8014728 <_printf_i+0x244>)
 8014654:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014658:	6823      	ldr	r3, [r4, #0]
 801465a:	680e      	ldr	r6, [r1, #0]
 801465c:	061f      	lsls	r7, r3, #24
 801465e:	f856 5b04 	ldr.w	r5, [r6], #4
 8014662:	600e      	str	r6, [r1, #0]
 8014664:	d514      	bpl.n	8014690 <_printf_i+0x1ac>
 8014666:	07d9      	lsls	r1, r3, #31
 8014668:	bf44      	itt	mi
 801466a:	f043 0320 	orrmi.w	r3, r3, #32
 801466e:	6023      	strmi	r3, [r4, #0]
 8014670:	b91d      	cbnz	r5, 801467a <_printf_i+0x196>
 8014672:	6823      	ldr	r3, [r4, #0]
 8014674:	f023 0320 	bic.w	r3, r3, #32
 8014678:	6023      	str	r3, [r4, #0]
 801467a:	2310      	movs	r3, #16
 801467c:	e7b0      	b.n	80145e0 <_printf_i+0xfc>
 801467e:	6823      	ldr	r3, [r4, #0]
 8014680:	f043 0320 	orr.w	r3, r3, #32
 8014684:	6023      	str	r3, [r4, #0]
 8014686:	2378      	movs	r3, #120	; 0x78
 8014688:	4828      	ldr	r0, [pc, #160]	; (801472c <_printf_i+0x248>)
 801468a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801468e:	e7e3      	b.n	8014658 <_printf_i+0x174>
 8014690:	065e      	lsls	r6, r3, #25
 8014692:	bf48      	it	mi
 8014694:	b2ad      	uxthmi	r5, r5
 8014696:	e7e6      	b.n	8014666 <_printf_i+0x182>
 8014698:	4616      	mov	r6, r2
 801469a:	e7bb      	b.n	8014614 <_printf_i+0x130>
 801469c:	680b      	ldr	r3, [r1, #0]
 801469e:	6826      	ldr	r6, [r4, #0]
 80146a0:	6960      	ldr	r0, [r4, #20]
 80146a2:	1d1d      	adds	r5, r3, #4
 80146a4:	600d      	str	r5, [r1, #0]
 80146a6:	0635      	lsls	r5, r6, #24
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	d501      	bpl.n	80146b0 <_printf_i+0x1cc>
 80146ac:	6018      	str	r0, [r3, #0]
 80146ae:	e002      	b.n	80146b6 <_printf_i+0x1d2>
 80146b0:	0671      	lsls	r1, r6, #25
 80146b2:	d5fb      	bpl.n	80146ac <_printf_i+0x1c8>
 80146b4:	8018      	strh	r0, [r3, #0]
 80146b6:	2300      	movs	r3, #0
 80146b8:	6123      	str	r3, [r4, #16]
 80146ba:	4616      	mov	r6, r2
 80146bc:	e7ba      	b.n	8014634 <_printf_i+0x150>
 80146be:	680b      	ldr	r3, [r1, #0]
 80146c0:	1d1a      	adds	r2, r3, #4
 80146c2:	600a      	str	r2, [r1, #0]
 80146c4:	681e      	ldr	r6, [r3, #0]
 80146c6:	6862      	ldr	r2, [r4, #4]
 80146c8:	2100      	movs	r1, #0
 80146ca:	4630      	mov	r0, r6
 80146cc:	f7eb fda0 	bl	8000210 <memchr>
 80146d0:	b108      	cbz	r0, 80146d6 <_printf_i+0x1f2>
 80146d2:	1b80      	subs	r0, r0, r6
 80146d4:	6060      	str	r0, [r4, #4]
 80146d6:	6863      	ldr	r3, [r4, #4]
 80146d8:	6123      	str	r3, [r4, #16]
 80146da:	2300      	movs	r3, #0
 80146dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146e0:	e7a8      	b.n	8014634 <_printf_i+0x150>
 80146e2:	6923      	ldr	r3, [r4, #16]
 80146e4:	4632      	mov	r2, r6
 80146e6:	4649      	mov	r1, r9
 80146e8:	4640      	mov	r0, r8
 80146ea:	47d0      	blx	sl
 80146ec:	3001      	adds	r0, #1
 80146ee:	d0ab      	beq.n	8014648 <_printf_i+0x164>
 80146f0:	6823      	ldr	r3, [r4, #0]
 80146f2:	079b      	lsls	r3, r3, #30
 80146f4:	d413      	bmi.n	801471e <_printf_i+0x23a>
 80146f6:	68e0      	ldr	r0, [r4, #12]
 80146f8:	9b03      	ldr	r3, [sp, #12]
 80146fa:	4298      	cmp	r0, r3
 80146fc:	bfb8      	it	lt
 80146fe:	4618      	movlt	r0, r3
 8014700:	e7a4      	b.n	801464c <_printf_i+0x168>
 8014702:	2301      	movs	r3, #1
 8014704:	4632      	mov	r2, r6
 8014706:	4649      	mov	r1, r9
 8014708:	4640      	mov	r0, r8
 801470a:	47d0      	blx	sl
 801470c:	3001      	adds	r0, #1
 801470e:	d09b      	beq.n	8014648 <_printf_i+0x164>
 8014710:	3501      	adds	r5, #1
 8014712:	68e3      	ldr	r3, [r4, #12]
 8014714:	9903      	ldr	r1, [sp, #12]
 8014716:	1a5b      	subs	r3, r3, r1
 8014718:	42ab      	cmp	r3, r5
 801471a:	dcf2      	bgt.n	8014702 <_printf_i+0x21e>
 801471c:	e7eb      	b.n	80146f6 <_printf_i+0x212>
 801471e:	2500      	movs	r5, #0
 8014720:	f104 0619 	add.w	r6, r4, #25
 8014724:	e7f5      	b.n	8014712 <_printf_i+0x22e>
 8014726:	bf00      	nop
 8014728:	08014b09 	.word	0x08014b09
 801472c:	08014b1a 	.word	0x08014b1a

08014730 <memmove>:
 8014730:	4288      	cmp	r0, r1
 8014732:	b510      	push	{r4, lr}
 8014734:	eb01 0402 	add.w	r4, r1, r2
 8014738:	d902      	bls.n	8014740 <memmove+0x10>
 801473a:	4284      	cmp	r4, r0
 801473c:	4623      	mov	r3, r4
 801473e:	d807      	bhi.n	8014750 <memmove+0x20>
 8014740:	1e43      	subs	r3, r0, #1
 8014742:	42a1      	cmp	r1, r4
 8014744:	d008      	beq.n	8014758 <memmove+0x28>
 8014746:	f811 2b01 	ldrb.w	r2, [r1], #1
 801474a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801474e:	e7f8      	b.n	8014742 <memmove+0x12>
 8014750:	4402      	add	r2, r0
 8014752:	4601      	mov	r1, r0
 8014754:	428a      	cmp	r2, r1
 8014756:	d100      	bne.n	801475a <memmove+0x2a>
 8014758:	bd10      	pop	{r4, pc}
 801475a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801475e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014762:	e7f7      	b.n	8014754 <memmove+0x24>

08014764 <_free_r>:
 8014764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014766:	2900      	cmp	r1, #0
 8014768:	d048      	beq.n	80147fc <_free_r+0x98>
 801476a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801476e:	9001      	str	r0, [sp, #4]
 8014770:	2b00      	cmp	r3, #0
 8014772:	f1a1 0404 	sub.w	r4, r1, #4
 8014776:	bfb8      	it	lt
 8014778:	18e4      	addlt	r4, r4, r3
 801477a:	f000 f8d3 	bl	8014924 <__malloc_lock>
 801477e:	4a20      	ldr	r2, [pc, #128]	; (8014800 <_free_r+0x9c>)
 8014780:	9801      	ldr	r0, [sp, #4]
 8014782:	6813      	ldr	r3, [r2, #0]
 8014784:	4615      	mov	r5, r2
 8014786:	b933      	cbnz	r3, 8014796 <_free_r+0x32>
 8014788:	6063      	str	r3, [r4, #4]
 801478a:	6014      	str	r4, [r2, #0]
 801478c:	b003      	add	sp, #12
 801478e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014792:	f000 b8cd 	b.w	8014930 <__malloc_unlock>
 8014796:	42a3      	cmp	r3, r4
 8014798:	d90b      	bls.n	80147b2 <_free_r+0x4e>
 801479a:	6821      	ldr	r1, [r4, #0]
 801479c:	1862      	adds	r2, r4, r1
 801479e:	4293      	cmp	r3, r2
 80147a0:	bf04      	itt	eq
 80147a2:	681a      	ldreq	r2, [r3, #0]
 80147a4:	685b      	ldreq	r3, [r3, #4]
 80147a6:	6063      	str	r3, [r4, #4]
 80147a8:	bf04      	itt	eq
 80147aa:	1852      	addeq	r2, r2, r1
 80147ac:	6022      	streq	r2, [r4, #0]
 80147ae:	602c      	str	r4, [r5, #0]
 80147b0:	e7ec      	b.n	801478c <_free_r+0x28>
 80147b2:	461a      	mov	r2, r3
 80147b4:	685b      	ldr	r3, [r3, #4]
 80147b6:	b10b      	cbz	r3, 80147bc <_free_r+0x58>
 80147b8:	42a3      	cmp	r3, r4
 80147ba:	d9fa      	bls.n	80147b2 <_free_r+0x4e>
 80147bc:	6811      	ldr	r1, [r2, #0]
 80147be:	1855      	adds	r5, r2, r1
 80147c0:	42a5      	cmp	r5, r4
 80147c2:	d10b      	bne.n	80147dc <_free_r+0x78>
 80147c4:	6824      	ldr	r4, [r4, #0]
 80147c6:	4421      	add	r1, r4
 80147c8:	1854      	adds	r4, r2, r1
 80147ca:	42a3      	cmp	r3, r4
 80147cc:	6011      	str	r1, [r2, #0]
 80147ce:	d1dd      	bne.n	801478c <_free_r+0x28>
 80147d0:	681c      	ldr	r4, [r3, #0]
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	6053      	str	r3, [r2, #4]
 80147d6:	4421      	add	r1, r4
 80147d8:	6011      	str	r1, [r2, #0]
 80147da:	e7d7      	b.n	801478c <_free_r+0x28>
 80147dc:	d902      	bls.n	80147e4 <_free_r+0x80>
 80147de:	230c      	movs	r3, #12
 80147e0:	6003      	str	r3, [r0, #0]
 80147e2:	e7d3      	b.n	801478c <_free_r+0x28>
 80147e4:	6825      	ldr	r5, [r4, #0]
 80147e6:	1961      	adds	r1, r4, r5
 80147e8:	428b      	cmp	r3, r1
 80147ea:	bf04      	itt	eq
 80147ec:	6819      	ldreq	r1, [r3, #0]
 80147ee:	685b      	ldreq	r3, [r3, #4]
 80147f0:	6063      	str	r3, [r4, #4]
 80147f2:	bf04      	itt	eq
 80147f4:	1949      	addeq	r1, r1, r5
 80147f6:	6021      	streq	r1, [r4, #0]
 80147f8:	6054      	str	r4, [r2, #4]
 80147fa:	e7c7      	b.n	801478c <_free_r+0x28>
 80147fc:	b003      	add	sp, #12
 80147fe:	bd30      	pop	{r4, r5, pc}
 8014800:	200004b0 	.word	0x200004b0

08014804 <_malloc_r>:
 8014804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014806:	1ccd      	adds	r5, r1, #3
 8014808:	f025 0503 	bic.w	r5, r5, #3
 801480c:	3508      	adds	r5, #8
 801480e:	2d0c      	cmp	r5, #12
 8014810:	bf38      	it	cc
 8014812:	250c      	movcc	r5, #12
 8014814:	2d00      	cmp	r5, #0
 8014816:	4606      	mov	r6, r0
 8014818:	db01      	blt.n	801481e <_malloc_r+0x1a>
 801481a:	42a9      	cmp	r1, r5
 801481c:	d903      	bls.n	8014826 <_malloc_r+0x22>
 801481e:	230c      	movs	r3, #12
 8014820:	6033      	str	r3, [r6, #0]
 8014822:	2000      	movs	r0, #0
 8014824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014826:	f000 f87d 	bl	8014924 <__malloc_lock>
 801482a:	4921      	ldr	r1, [pc, #132]	; (80148b0 <_malloc_r+0xac>)
 801482c:	680a      	ldr	r2, [r1, #0]
 801482e:	4614      	mov	r4, r2
 8014830:	b99c      	cbnz	r4, 801485a <_malloc_r+0x56>
 8014832:	4f20      	ldr	r7, [pc, #128]	; (80148b4 <_malloc_r+0xb0>)
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	b923      	cbnz	r3, 8014842 <_malloc_r+0x3e>
 8014838:	4621      	mov	r1, r4
 801483a:	4630      	mov	r0, r6
 801483c:	f000 f862 	bl	8014904 <_sbrk_r>
 8014840:	6038      	str	r0, [r7, #0]
 8014842:	4629      	mov	r1, r5
 8014844:	4630      	mov	r0, r6
 8014846:	f000 f85d 	bl	8014904 <_sbrk_r>
 801484a:	1c43      	adds	r3, r0, #1
 801484c:	d123      	bne.n	8014896 <_malloc_r+0x92>
 801484e:	230c      	movs	r3, #12
 8014850:	6033      	str	r3, [r6, #0]
 8014852:	4630      	mov	r0, r6
 8014854:	f000 f86c 	bl	8014930 <__malloc_unlock>
 8014858:	e7e3      	b.n	8014822 <_malloc_r+0x1e>
 801485a:	6823      	ldr	r3, [r4, #0]
 801485c:	1b5b      	subs	r3, r3, r5
 801485e:	d417      	bmi.n	8014890 <_malloc_r+0x8c>
 8014860:	2b0b      	cmp	r3, #11
 8014862:	d903      	bls.n	801486c <_malloc_r+0x68>
 8014864:	6023      	str	r3, [r4, #0]
 8014866:	441c      	add	r4, r3
 8014868:	6025      	str	r5, [r4, #0]
 801486a:	e004      	b.n	8014876 <_malloc_r+0x72>
 801486c:	6863      	ldr	r3, [r4, #4]
 801486e:	42a2      	cmp	r2, r4
 8014870:	bf0c      	ite	eq
 8014872:	600b      	streq	r3, [r1, #0]
 8014874:	6053      	strne	r3, [r2, #4]
 8014876:	4630      	mov	r0, r6
 8014878:	f000 f85a 	bl	8014930 <__malloc_unlock>
 801487c:	f104 000b 	add.w	r0, r4, #11
 8014880:	1d23      	adds	r3, r4, #4
 8014882:	f020 0007 	bic.w	r0, r0, #7
 8014886:	1ac2      	subs	r2, r0, r3
 8014888:	d0cc      	beq.n	8014824 <_malloc_r+0x20>
 801488a:	1a1b      	subs	r3, r3, r0
 801488c:	50a3      	str	r3, [r4, r2]
 801488e:	e7c9      	b.n	8014824 <_malloc_r+0x20>
 8014890:	4622      	mov	r2, r4
 8014892:	6864      	ldr	r4, [r4, #4]
 8014894:	e7cc      	b.n	8014830 <_malloc_r+0x2c>
 8014896:	1cc4      	adds	r4, r0, #3
 8014898:	f024 0403 	bic.w	r4, r4, #3
 801489c:	42a0      	cmp	r0, r4
 801489e:	d0e3      	beq.n	8014868 <_malloc_r+0x64>
 80148a0:	1a21      	subs	r1, r4, r0
 80148a2:	4630      	mov	r0, r6
 80148a4:	f000 f82e 	bl	8014904 <_sbrk_r>
 80148a8:	3001      	adds	r0, #1
 80148aa:	d1dd      	bne.n	8014868 <_malloc_r+0x64>
 80148ac:	e7cf      	b.n	801484e <_malloc_r+0x4a>
 80148ae:	bf00      	nop
 80148b0:	200004b0 	.word	0x200004b0
 80148b4:	200004b4 	.word	0x200004b4

080148b8 <_realloc_r>:
 80148b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ba:	4607      	mov	r7, r0
 80148bc:	4614      	mov	r4, r2
 80148be:	460e      	mov	r6, r1
 80148c0:	b921      	cbnz	r1, 80148cc <_realloc_r+0x14>
 80148c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80148c6:	4611      	mov	r1, r2
 80148c8:	f7ff bf9c 	b.w	8014804 <_malloc_r>
 80148cc:	b922      	cbnz	r2, 80148d8 <_realloc_r+0x20>
 80148ce:	f7ff ff49 	bl	8014764 <_free_r>
 80148d2:	4625      	mov	r5, r4
 80148d4:	4628      	mov	r0, r5
 80148d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148d8:	f000 f830 	bl	801493c <_malloc_usable_size_r>
 80148dc:	42a0      	cmp	r0, r4
 80148de:	d20f      	bcs.n	8014900 <_realloc_r+0x48>
 80148e0:	4621      	mov	r1, r4
 80148e2:	4638      	mov	r0, r7
 80148e4:	f7ff ff8e 	bl	8014804 <_malloc_r>
 80148e8:	4605      	mov	r5, r0
 80148ea:	2800      	cmp	r0, #0
 80148ec:	d0f2      	beq.n	80148d4 <_realloc_r+0x1c>
 80148ee:	4631      	mov	r1, r6
 80148f0:	4622      	mov	r2, r4
 80148f2:	f7ff fbf7 	bl	80140e4 <memcpy>
 80148f6:	4631      	mov	r1, r6
 80148f8:	4638      	mov	r0, r7
 80148fa:	f7ff ff33 	bl	8014764 <_free_r>
 80148fe:	e7e9      	b.n	80148d4 <_realloc_r+0x1c>
 8014900:	4635      	mov	r5, r6
 8014902:	e7e7      	b.n	80148d4 <_realloc_r+0x1c>

08014904 <_sbrk_r>:
 8014904:	b538      	push	{r3, r4, r5, lr}
 8014906:	4d06      	ldr	r5, [pc, #24]	; (8014920 <_sbrk_r+0x1c>)
 8014908:	2300      	movs	r3, #0
 801490a:	4604      	mov	r4, r0
 801490c:	4608      	mov	r0, r1
 801490e:	602b      	str	r3, [r5, #0]
 8014910:	f7f0 f8b6 	bl	8004a80 <_sbrk>
 8014914:	1c43      	adds	r3, r0, #1
 8014916:	d102      	bne.n	801491e <_sbrk_r+0x1a>
 8014918:	682b      	ldr	r3, [r5, #0]
 801491a:	b103      	cbz	r3, 801491e <_sbrk_r+0x1a>
 801491c:	6023      	str	r3, [r4, #0]
 801491e:	bd38      	pop	{r3, r4, r5, pc}
 8014920:	200063d4 	.word	0x200063d4

08014924 <__malloc_lock>:
 8014924:	4801      	ldr	r0, [pc, #4]	; (801492c <__malloc_lock+0x8>)
 8014926:	f000 b811 	b.w	801494c <__retarget_lock_acquire_recursive>
 801492a:	bf00      	nop
 801492c:	200063dc 	.word	0x200063dc

08014930 <__malloc_unlock>:
 8014930:	4801      	ldr	r0, [pc, #4]	; (8014938 <__malloc_unlock+0x8>)
 8014932:	f000 b80c 	b.w	801494e <__retarget_lock_release_recursive>
 8014936:	bf00      	nop
 8014938:	200063dc 	.word	0x200063dc

0801493c <_malloc_usable_size_r>:
 801493c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014940:	1f18      	subs	r0, r3, #4
 8014942:	2b00      	cmp	r3, #0
 8014944:	bfbc      	itt	lt
 8014946:	580b      	ldrlt	r3, [r1, r0]
 8014948:	18c0      	addlt	r0, r0, r3
 801494a:	4770      	bx	lr

0801494c <__retarget_lock_acquire_recursive>:
 801494c:	4770      	bx	lr

0801494e <__retarget_lock_release_recursive>:
 801494e:	4770      	bx	lr

08014950 <_init>:
 8014950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014952:	bf00      	nop
 8014954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014956:	bc08      	pop	{r3}
 8014958:	469e      	mov	lr, r3
 801495a:	4770      	bx	lr

0801495c <_fini>:
 801495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801495e:	bf00      	nop
 8014960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014962:	bc08      	pop	{r3}
 8014964:	469e      	mov	lr, r3
 8014966:	4770      	bx	lr
