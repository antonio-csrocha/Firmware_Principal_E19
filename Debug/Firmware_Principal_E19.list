
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fce4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800fea8  0800fea8  0001fea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff44  0800ff44  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff44  0800ff44  0001ff44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff4c  0800ff4c  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff4c  0800ff4c  0001ff4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff50  0800ff50  0001ff50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800ff54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006164  20000174  080100c8  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200062d8  080100c8  000262d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036cd0  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a0b  00000000  00000000  00056e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002148  00000000  00000000  0005d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e90  00000000  00000000  0005f9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d811  00000000  00000000  00061858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030ba5  00000000  00000000  0008f069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f24eb  00000000  00000000  000bfc0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b20f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008acc  00000000  00000000  001b214c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000174 	.word	0x20000174
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800fe90 	.word	0x0800fe90

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000178 	.word	0x20000178
 8000200:	0800fe90 	.word	0x0800fe90

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <FT_CAN_ProcessData>:
}

#ifndef FT_CAN_SIMPLE

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800050a:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8000512:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 8000514:	89fb      	ldrh	r3, [r7, #14]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	2b00      	cmp	r3, #0
 800051c:	f040 8215 	bne.w	800094a <FT_CAN_ProcessData+0x44e>
	{
		return;
	}

	switch(id >> 1)
 8000520:	89fb      	ldrh	r3, [r7, #14]
 8000522:	085b      	lsrs	r3, r3, #1
 8000524:	b29b      	uxth	r3, r3
 8000526:	2b8d      	cmp	r3, #141	; 0x8d
 8000528:	f300 8166 	bgt.w	80007f8 <FT_CAN_ProcessData+0x2fc>
 800052c:	2b00      	cmp	r3, #0
 800052e:	dc41      	bgt.n	80005b4 <FT_CAN_ProcessData+0xb8>
 8000530:	e204      	b.n	800093c <FT_CAN_ProcessData+0x440>
 8000532:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000536:	2b1b      	cmp	r3, #27
 8000538:	f200 8200 	bhi.w	800093c <FT_CAN_ProcessData+0x440>
 800053c:	a201      	add	r2, pc, #4	; (adr r2, 8000544 <FT_CAN_ProcessData+0x48>)
 800053e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000542:	bf00      	nop
 8000544:	0800090d 	.word	0x0800090d
 8000548:	0800093d 	.word	0x0800093d
 800054c:	0800093d 	.word	0x0800093d
 8000550:	0800093d 	.word	0x0800093d
 8000554:	0800093d 	.word	0x0800093d
 8000558:	0800093d 	.word	0x0800093d
 800055c:	0800093d 	.word	0x0800093d
 8000560:	0800093d 	.word	0x0800093d
 8000564:	0800093d 	.word	0x0800093d
 8000568:	0800093d 	.word	0x0800093d
 800056c:	0800093d 	.word	0x0800093d
 8000570:	0800093d 	.word	0x0800093d
 8000574:	0800093d 	.word	0x0800093d
 8000578:	0800093d 	.word	0x0800093d
 800057c:	0800093d 	.word	0x0800093d
 8000580:	0800093d 	.word	0x0800093d
 8000584:	0800093d 	.word	0x0800093d
 8000588:	0800093d 	.word	0x0800093d
 800058c:	08000915 	.word	0x08000915
 8000590:	0800093d 	.word	0x0800093d
 8000594:	0800093d 	.word	0x0800093d
 8000598:	0800093d 	.word	0x0800093d
 800059c:	0800093d 	.word	0x0800093d
 80005a0:	0800093d 	.word	0x0800093d
 80005a4:	0800091d 	.word	0x0800091d
 80005a8:	08000925 	.word	0x08000925
 80005ac:	0800092d 	.word	0x0800092d
 80005b0:	08000935 	.word	0x08000935
 80005b4:	3b01      	subs	r3, #1
 80005b6:	2b8c      	cmp	r3, #140	; 0x8c
 80005b8:	f200 81c0 	bhi.w	800093c <FT_CAN_ProcessData+0x440>
 80005bc:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <FT_CAN_ProcessData+0xc8>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	0800080b 	.word	0x0800080b
 80005c8:	08000815 	.word	0x08000815
 80005cc:	0800081d 	.word	0x0800081d
 80005d0:	08000825 	.word	0x08000825
 80005d4:	0800082d 	.word	0x0800082d
 80005d8:	08000837 	.word	0x08000837
 80005dc:	0800083f 	.word	0x0800083f
 80005e0:	08000875 	.word	0x08000875
 80005e4:	0800087d 	.word	0x0800087d
 80005e8:	08000885 	.word	0x08000885
 80005ec:	0800088d 	.word	0x0800088d
 80005f0:	08000895 	.word	0x08000895
 80005f4:	0800089d 	.word	0x0800089d
 80005f8:	080008a5 	.word	0x080008a5
 80005fc:	080008ad 	.word	0x080008ad
 8000600:	080008b5 	.word	0x080008b5
 8000604:	08000847 	.word	0x08000847
 8000608:	0800093d 	.word	0x0800093d
 800060c:	0800093d 	.word	0x0800093d
 8000610:	0800093d 	.word	0x0800093d
 8000614:	0800093d 	.word	0x0800093d
 8000618:	0800093d 	.word	0x0800093d
 800061c:	0800093d 	.word	0x0800093d
 8000620:	0800093d 	.word	0x0800093d
 8000624:	0800093d 	.word	0x0800093d
 8000628:	0800093d 	.word	0x0800093d
 800062c:	0800093d 	.word	0x0800093d
 8000630:	0800093d 	.word	0x0800093d
 8000634:	0800093d 	.word	0x0800093d
 8000638:	0800093d 	.word	0x0800093d
 800063c:	0800093d 	.word	0x0800093d
 8000640:	0800093d 	.word	0x0800093d
 8000644:	0800093d 	.word	0x0800093d
 8000648:	0800093d 	.word	0x0800093d
 800064c:	0800093d 	.word	0x0800093d
 8000650:	0800093d 	.word	0x0800093d
 8000654:	0800093d 	.word	0x0800093d
 8000658:	0800093d 	.word	0x0800093d
 800065c:	0800084f 	.word	0x0800084f
 8000660:	0800093d 	.word	0x0800093d
 8000664:	0800093d 	.word	0x0800093d
 8000668:	0800093d 	.word	0x0800093d
 800066c:	0800093d 	.word	0x0800093d
 8000670:	0800093d 	.word	0x0800093d
 8000674:	0800093d 	.word	0x0800093d
 8000678:	0800093d 	.word	0x0800093d
 800067c:	0800093d 	.word	0x0800093d
 8000680:	0800093d 	.word	0x0800093d
 8000684:	0800093d 	.word	0x0800093d
 8000688:	0800093d 	.word	0x0800093d
 800068c:	0800093d 	.word	0x0800093d
 8000690:	0800093d 	.word	0x0800093d
 8000694:	0800093d 	.word	0x0800093d
 8000698:	0800093d 	.word	0x0800093d
 800069c:	0800093d 	.word	0x0800093d
 80006a0:	0800093d 	.word	0x0800093d
 80006a4:	0800093d 	.word	0x0800093d
 80006a8:	0800093d 	.word	0x0800093d
 80006ac:	0800093d 	.word	0x0800093d
 80006b0:	0800093d 	.word	0x0800093d
 80006b4:	0800093d 	.word	0x0800093d
 80006b8:	0800093d 	.word	0x0800093d
 80006bc:	0800093d 	.word	0x0800093d
 80006c0:	0800093d 	.word	0x0800093d
 80006c4:	0800093d 	.word	0x0800093d
 80006c8:	08000857 	.word	0x08000857
 80006cc:	0800093d 	.word	0x0800093d
 80006d0:	0800093d 	.word	0x0800093d
 80006d4:	0800093d 	.word	0x0800093d
 80006d8:	0800093d 	.word	0x0800093d
 80006dc:	0800093d 	.word	0x0800093d
 80006e0:	080008bd 	.word	0x080008bd
 80006e4:	080008c5 	.word	0x080008c5
 80006e8:	080008cd 	.word	0x080008cd
 80006ec:	080008d5 	.word	0x080008d5
 80006f0:	080008dd 	.word	0x080008dd
 80006f4:	080008e5 	.word	0x080008e5
 80006f8:	080008ed 	.word	0x080008ed
 80006fc:	080008f5 	.word	0x080008f5
 8000700:	080008fd 	.word	0x080008fd
 8000704:	08000905 	.word	0x08000905
 8000708:	0800093d 	.word	0x0800093d
 800070c:	0800093d 	.word	0x0800093d
 8000710:	0800093d 	.word	0x0800093d
 8000714:	0800093d 	.word	0x0800093d
 8000718:	0800093d 	.word	0x0800093d
 800071c:	0800093d 	.word	0x0800093d
 8000720:	0800093d 	.word	0x0800093d
 8000724:	0800093d 	.word	0x0800093d
 8000728:	0800093d 	.word	0x0800093d
 800072c:	0800093d 	.word	0x0800093d
 8000730:	0800093d 	.word	0x0800093d
 8000734:	0800093d 	.word	0x0800093d
 8000738:	0800093d 	.word	0x0800093d
 800073c:	0800093d 	.word	0x0800093d
 8000740:	0800093d 	.word	0x0800093d
 8000744:	0800093d 	.word	0x0800093d
 8000748:	0800093d 	.word	0x0800093d
 800074c:	0800093d 	.word	0x0800093d
 8000750:	0800093d 	.word	0x0800093d
 8000754:	0800093d 	.word	0x0800093d
 8000758:	0800093d 	.word	0x0800093d
 800075c:	0800093d 	.word	0x0800093d
 8000760:	0800093d 	.word	0x0800093d
 8000764:	0800093d 	.word	0x0800093d
 8000768:	0800093d 	.word	0x0800093d
 800076c:	0800093d 	.word	0x0800093d
 8000770:	0800093d 	.word	0x0800093d
 8000774:	0800093d 	.word	0x0800093d
 8000778:	0800093d 	.word	0x0800093d
 800077c:	0800093d 	.word	0x0800093d
 8000780:	0800093d 	.word	0x0800093d
 8000784:	0800093d 	.word	0x0800093d
 8000788:	0800093d 	.word	0x0800093d
 800078c:	0800093d 	.word	0x0800093d
 8000790:	0800093d 	.word	0x0800093d
 8000794:	0800093d 	.word	0x0800093d
 8000798:	0800093d 	.word	0x0800093d
 800079c:	0800093d 	.word	0x0800093d
 80007a0:	0800093d 	.word	0x0800093d
 80007a4:	0800093d 	.word	0x0800093d
 80007a8:	0800093d 	.word	0x0800093d
 80007ac:	0800093d 	.word	0x0800093d
 80007b0:	0800093d 	.word	0x0800093d
 80007b4:	0800093d 	.word	0x0800093d
 80007b8:	0800093d 	.word	0x0800093d
 80007bc:	0800093d 	.word	0x0800093d
 80007c0:	0800093d 	.word	0x0800093d
 80007c4:	0800093d 	.word	0x0800093d
 80007c8:	0800093d 	.word	0x0800093d
 80007cc:	0800093d 	.word	0x0800093d
 80007d0:	0800093d 	.word	0x0800093d
 80007d4:	0800093d 	.word	0x0800093d
 80007d8:	0800093d 	.word	0x0800093d
 80007dc:	0800093d 	.word	0x0800093d
 80007e0:	0800093d 	.word	0x0800093d
 80007e4:	0800093d 	.word	0x0800093d
 80007e8:	0800093d 	.word	0x0800093d
 80007ec:	0800093d 	.word	0x0800093d
 80007f0:	08000861 	.word	0x08000861
 80007f4:	0800086b 	.word	0x0800086b
 80007f8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80007fc:	f280 809e 	bge.w	800093c <FT_CAN_ProcessData+0x440>
 8000800:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8000804:	f6bf ae95 	bge.w	8000532 <FT_CAN_ProcessData+0x36>
 8000808:	e098      	b.n	800093c <FT_CAN_ProcessData+0x440>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	89ba      	ldrh	r2, [r7, #12]
 800080e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 8000812:	e093      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	89ba      	ldrh	r2, [r7, #12]
 8000818:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 800081a:	e08f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	89ba      	ldrh	r2, [r7, #12]
 8000820:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8000822:	e08b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	89ba      	ldrh	r2, [r7, #12]
 8000828:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 800082a:	e087      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	89ba      	ldrh	r2, [r7, #12]
 8000830:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 8000834:	e082      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	89ba      	ldrh	r2, [r7, #12]
 800083a:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 800083c:	e07e      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	89ba      	ldrh	r2, [r7, #12]
 8000842:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8000844:	e07a      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	89ba      	ldrh	r2, [r7, #12]
 800084a:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 800084c:	e076      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	89ba      	ldrh	r2, [r7, #12]
 8000852:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8000854:	e072      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	89ba      	ldrh	r2, [r7, #12]
 800085a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 800085e:	e06d      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	89ba      	ldrh	r2, [r7, #12]
 8000864:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 8000868:	e068      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	89ba      	ldrh	r2, [r7, #12]
 800086e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			break;
 8000872:	e063      	b.n	800093c <FT_CAN_ProcessData+0x440>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	89ba      	ldrh	r2, [r7, #12]
 8000878:	831a      	strh	r2, [r3, #24]
			break;
 800087a:	e05f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	89ba      	ldrh	r2, [r7, #12]
 8000880:	805a      	strh	r2, [r3, #2]
			break;
 8000882:	e05b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	89ba      	ldrh	r2, [r7, #12]
 8000888:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 800088a:	e057      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	89ba      	ldrh	r2, [r7, #12]
 8000890:	841a      	strh	r2, [r3, #32]
			break;
 8000892:	e053      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	89ba      	ldrh	r2, [r7, #12]
 8000898:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 800089a:	e04f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	89ba      	ldrh	r2, [r7, #12]
 80008a0:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 80008a2:	e04b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	89ba      	ldrh	r2, [r7, #12]
 80008a8:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 80008aa:	e047      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	89ba      	ldrh	r2, [r7, #12]
 80008b0:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 80008b2:	e043      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	89ba      	ldrh	r2, [r7, #12]
 80008b8:	821a      	strh	r2, [r3, #16]
			break;
 80008ba:	e03f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	89ba      	ldrh	r2, [r7, #12]
 80008c0:	839a      	strh	r2, [r3, #28]
			break;
 80008c2:	e03b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	89ba      	ldrh	r2, [r7, #12]
 80008c8:	83da      	strh	r2, [r3, #30]
			break;
 80008ca:	e037      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	89ba      	ldrh	r2, [r7, #12]
 80008d0:	835a      	strh	r2, [r3, #26]
			break;
 80008d2:	e033      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	89ba      	ldrh	r2, [r7, #12]
 80008d8:	819a      	strh	r2, [r3, #12]
			break;
 80008da:	e02f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	89ba      	ldrh	r2, [r7, #12]
 80008e0:	801a      	strh	r2, [r3, #0]
			break;
 80008e2:	e02b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	89ba      	ldrh	r2, [r7, #12]
 80008e8:	811a      	strh	r2, [r3, #8]
			break;
 80008ea:	e027      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	89ba      	ldrh	r2, [r7, #12]
 80008f0:	825a      	strh	r2, [r3, #18]
			break;
 80008f2:	e023      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	89ba      	ldrh	r2, [r7, #12]
 80008f8:	829a      	strh	r2, [r3, #20]
			break;
 80008fa:	e01f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	89ba      	ldrh	r2, [r7, #12]
 8000900:	82da      	strh	r2, [r3, #22]
			break;
 8000902:	e01b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	89ba      	ldrh	r2, [r7, #12]
 8000908:	815a      	strh	r2, [r3, #10]
			break;
 800090a:	e017      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	89ba      	ldrh	r2, [r7, #12]
 8000910:	809a      	strh	r2, [r3, #4]
			break;
 8000912:	e013      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	89ba      	ldrh	r2, [r7, #12]
 8000918:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 800091a:	e00f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->total_fuel_flow = data;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	89ba      	ldrh	r2, [r7, #12]
 8000920:	81da      	strh	r2, [r3, #14]
			break;
 8000922:	e00b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	89ba      	ldrh	r2, [r7, #12]
 8000928:	80da      	strh	r2, [r3, #6]
			break;
 800092a:	e007      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	89ba      	ldrh	r2, [r7, #12]
 8000930:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8000932:	e003      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	89ba      	ldrh	r2, [r7, #12]
 8000938:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 800093a:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 800093c:	89ba      	ldrh	r2, [r7, #12]
 800093e:	89fb      	ldrh	r3, [r7, #14]
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f806 	bl	8000954 <FT_CAN_ProcessCustomData>
 8000948:	e000      	b.n	800094c <FT_CAN_ProcessData+0x450>
		return;
 800094a:	bf00      	nop
}
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop

08000954 <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	460a      	mov	r2, r1
 800095e:	80fb      	strh	r3, [r7, #6]
 8000960:	4613      	mov	r3, r2
 8000962:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <FT_CAN_ReceiveData>:

#endif

void FT_CAN_ReceiveData(uint32_t RxID, uint32_t RxLength, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	466b      	mov	r3, sp
 8000980:	461d      	mov	r5, r3
	uint32_t extid = (RxID & 0x1FF80000) >> 13;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	0b5a      	lsrs	r2, r3, #13
 8000986:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800098a:	4013      	ands	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]

	if(		   (extid != FT_Gear_Controller)
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000994:	d02d      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Knock_Meter)
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	f240 1241 	movw	r2, #321	; 0x141
 800099c:	4293      	cmp	r3, r2
 800099e:	d028      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Boost_Controller2)
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 80009a6:	d024      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Injector_Driver)
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 80009ae:	d020      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Nano)
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80009b6:	d01c      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Slim)
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	f240 2241 	movw	r2, #577	; 0x241
 80009be:	4293      	cmp	r3, r2
 80009c0:	d017      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Alcohol_O2)
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	f240 2242 	movw	r2, #578	; 0x242
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d012      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FTSpark)
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	f240 2243 	movw	r2, #579	; 0x243
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d00d      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Switchpad)
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 80009dc:	d009      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT500)
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80009e4:	d005      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT600))
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	f240 2281 	movw	r2, #641	; 0x281
 80009ec:	4293      	cmp	r3, r2
 80009ee:	f040 8386 	bne.w	80010fe <FT_CAN_ReceiveData+0x78e>
		return;

	uint8_t buffer[RxLength];
 80009f2:	68bc      	ldr	r4, [r7, #8]
 80009f4:	4623      	mov	r3, r4
 80009f6:	3b01      	subs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	4620      	mov	r0, r4
 80009fc:	f04f 0100 	mov.w	r1, #0
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	00cb      	lsls	r3, r1, #3
 8000a0a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a0e:	00c2      	lsls	r2, r0, #3
 8000a10:	4620      	mov	r0, r4
 8000a12:	f04f 0100 	mov.w	r1, #0
 8000a16:	f04f 0200 	mov.w	r2, #0
 8000a1a:	f04f 0300 	mov.w	r3, #0
 8000a1e:	00cb      	lsls	r3, r1, #3
 8000a20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a24:	00c2      	lsls	r2, r0, #3
 8000a26:	1de3      	adds	r3, r4, #7
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	ebad 0d03 	sub.w	sp, sp, r3
 8000a30:	466b      	mov	r3, sp
 8000a32:	3300      	adds	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < RxLength; i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	77fb      	strb	r3, [r7, #31]
 8000a3a:	e009      	b.n	8000a50 <FT_CAN_ReceiveData+0xe0>
		buffer[i] = pData[i];
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	441a      	add	r2, r3
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	7811      	ldrb	r1, [r2, #0]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < RxLength; i++)
 8000a4a:	7ffb      	ldrb	r3, [r7, #31]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	77fb      	strb	r3, [r7, #31]
 8000a50:	7ffb      	ldrb	r3, [r7, #31]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d8f1      	bhi.n	8000a3c <FT_CAN_ReceiveData+0xcc>

	if((((RxID / 0x800) & 0x7) == 0x00) || (((RxID / 0x800) & 0x7) == 0x01))
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	0adb      	lsrs	r3, r3, #11
 8000a5c:	f003 0307 	and.w	r3, r3, #7
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <FT_CAN_ReceiveData+0x102>
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	0adb      	lsrs	r3, r3, #11
 8000a68:	f003 0307 	and.w	r3, r3, #7
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	f040 813e 	bne.w	8000cee <FT_CAN_ReceiveData+0x37e>
	{
		if((RxID & 0xFFF) == 0x600)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000a7c:	d143      	bne.n	8000b06 <FT_CAN_ReceiveData+0x196>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	021b      	lsls	r3, r3, #8
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->tps |= buffer[1];
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->map  = buffer[2] << 8;
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	789b      	ldrb	r3, [r3, #2]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	021b      	lsls	r3, r3, #8
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->map |= buffer[3];
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	78db      	ldrb	r3, [r3, #3]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->iat  = buffer[4] << 8;
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->iat |= buffer[5];
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	795b      	ldrb	r3, [r3, #5]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	799b      	ldrb	r3, [r3, #6]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->ect |= buffer[7];
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	79db      	ldrb	r3, [r3, #7]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	4313      	orrs	r3, r2
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	865a      	strh	r2, [r3, #50]	; 0x32

			return;
 8000b04:	e2fc      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
		else if((RxID & 0xFFF) == 0x601)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b0c:	f240 6201 	movw	r2, #1537	; 0x601
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d143      	bne.n	8000b9c <FT_CAN_ReceiveData+0x22c>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	785b      	ldrb	r3, [r3, #1]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	789b      	ldrb	r3, [r3, #2]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	78db      	ldrb	r3, [r3, #3]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	4313      	orrs	r3, r2
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	791b      	ldrb	r3, [r3, #4]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->coolant_pressure |= buffer[5];
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	795b      	ldrb	r3, [r3, #5]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	799b      	ldrb	r3, [r3, #6]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->gear 			 |= buffer[7];
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	79db      	ldrb	r3, [r3, #7]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	4313      	orrs	r3, r2
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	875a      	strh	r2, [r3, #58]	; 0x3a

			return;
 8000b9a:	e2b1      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
		else if((RxID & 0xFFF) == 0x602)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	f240 6202 	movw	r2, #1538	; 0x602
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d149      	bne.n	8000c3e <FT_CAN_ReceiveData+0x2ce>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->lambda 			|= buffer[1];
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	785b      	ldrb	r3, [r3, #1]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	789b      	ldrb	r3, [r3, #2]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->rpm 			|= buffer[3];
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	78db      	ldrb	r3, [r3, #3]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	791b      	ldrb	r3, [r3, #4]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	795b      	ldrb	r3, [r3, #5]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	799b      	ldrb	r3, [r3, #6]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	79db      	ldrb	r3, [r3, #7]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			return;
 8000c3c:	e260      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}

#ifndef FT_CAN_SIMPLE
		else if((RxID & 0xFF) == 0xFF)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2bff      	cmp	r3, #255	; 0xff
 8000c44:	f040 8258 	bne.w	80010f8 <FT_CAN_ReceiveData+0x788>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[1];
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	789b      	ldrb	r3, [r3, #2]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[3];
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	78db      	ldrb	r3, [r3, #3]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000c94:	6838      	ldr	r0, [r7, #0]
 8000c96:	f7ff fc31 	bl	80004fc <FT_CAN_ProcessData>

			FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	791b      	ldrb	r3, [r3, #4]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[5];
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	795b      	ldrb	r3, [r3, #5]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[6] << 8;
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	799b      	ldrb	r3, [r3, #6]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[7];
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	79db      	ldrb	r3, [r3, #7]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000ce6:	6838      	ldr	r0, [r7, #0]
 8000ce8:	f7ff fc08 	bl	80004fc <FT_CAN_ProcessData>

			return;
 8000cec:	e208      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
	}

	else if(buffer[0] == 0xFF)
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2bff      	cmp	r3, #255	; 0xff
 8000cf4:	d129      	bne.n	8000d4a <FT_CAN_ReceiveData+0x3da>
	{
		FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	785b      	ldrb	r3, [r3, #1]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_id 	 |= buffer[2];
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	789b      	ldrb	r3, [r3, #2]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_content  = buffer[3] << 8;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	78db      	ldrb	r3, [r3, #3]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		FT_Data_Struct->data_content |= buffer[4];
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	791b      	ldrb	r3, [r3, #4]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

		FT_CAN_ProcessData(FT_Data_Struct);
 8000d42:	6838      	ldr	r0, [r7, #0]
 8000d44:	f7ff fbda 	bl	80004fc <FT_CAN_ProcessData>

		return;
 8000d48:	e1da      	b.n	8001100 <FT_CAN_ReceiveData+0x790>

	//Segmented Messages
	else
	{
		//First Message
		if(buffer[0] == 0)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14b      	bne.n	8000dea <FT_CAN_ReceiveData+0x47a>
		{
			FT_Data_Struct->data_length   = buffer[1] << 8;
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	785b      	ldrb	r3, [r3, #1]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->data_length  |= buffer[2];
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	789b      	ldrb	r3, [r3, #2]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

			FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	78db      	ldrb	r3, [r3, #3]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[4];
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	791b      	ldrb	r3, [r3, #4]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[5] << 8;
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	795b      	ldrb	r3, [r3, #5]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[6];
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	799b      	ldrb	r3, [r3, #6]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000dc4:	6838      	ldr	r0, [r7, #0]
 8000dc6:	f7ff fb99 	bl	80004fc <FT_CAN_ProcessData>

			if(RxLength == 8)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	2b08      	cmp	r3, #8
 8000dce:	d107      	bne.n	8000de0 <FT_CAN_ReceiveData+0x470>
				FT_Data_Struct->data_id   = buffer[7] << 8;
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	79db      	ldrb	r3, [r3, #7]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg = 0;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000de8:	e18a      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
		//Messages 1, 5, etc
		else if((buffer[0]-1)%4 == 0)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d15c      	bne.n	8000eb2 <FT_CAN_ReceiveData+0x542>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000e04:	3301      	adds	r3, #1
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d120      	bne.n	8000e4c <FT_CAN_ReceiveData+0x4dc>
			{
				FT_Data_Struct->data_id 	 |= buffer[1];
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[2] << 8;
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	789b      	ldrb	r3, [r3, #2]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[3];
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	78db      	ldrb	r3, [r3, #3]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000e46:	6838      	ldr	r0, [r7, #0]
 8000e48:	f7ff fb58 	bl	80004fc <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d128      	bne.n	8000ea4 <FT_CAN_ReceiveData+0x534>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	791b      	ldrb	r3, [r3, #4]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[5];
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	799b      	ldrb	r3, [r3, #6]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[7];
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	79db      	ldrb	r3, [r3, #7]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000e9e:	6838      	ldr	r0, [r7, #0]
 8000ea0:	f7ff fb2c 	bl	80004fc <FT_CAN_ProcessData>
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000eb0:	e126      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
		//messages 2, 6, etc
		else if((buffer[0]-2)%4 == 0)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d150      	bne.n	8000f62 <FT_CAN_ReceiveData+0x5f2>
		{
			if(RxLength >= 5)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	d928      	bls.n	8000f18 <FT_CAN_ReceiveData+0x5a8>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	785b      	ldrb	r3, [r3, #1]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[2];
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	789b      	ldrb	r3, [r3, #2]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	78db      	ldrb	r3, [r3, #3]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[4];
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	791b      	ldrb	r3, [r3, #4]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000f12:	6838      	ldr	r0, [r7, #0]
 8000f14:	f7ff faf2 	bl	80004fc <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d11a      	bne.n	8000f54 <FT_CAN_ReceiveData+0x5e4>
			{
				FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	795b      	ldrb	r3, [r3, #5]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	|= buffer[6];
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content = buffer[7] << 8;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	79db      	ldrb	r3, [r3, #7]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			}

			FT_Data_Struct->data_last_seg 	 = buffer[0];
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000f60:	e0ce      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
		//Messages 3, 7, etc
		else if((buffer[0]-3)%4 == 0)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	3b03      	subs	r3, #3
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d15f      	bne.n	8001030 <FT_CAN_ReceiveData+0x6c0>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d10d      	bne.n	8000f9e <FT_CAN_ReceiveData+0x62e>
			{
				FT_Data_Struct->data_content |= buffer[1];
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	785b      	ldrb	r3, [r3, #1]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000f98:	6838      	ldr	r0, [r7, #0]
 8000f9a:	f7ff faaf 	bl	80004fc <FT_CAN_ProcessData>
			}

			if(RxLength >= 6)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d928      	bls.n	8000ff6 <FT_CAN_ReceiveData+0x686>
			{
				FT_Data_Struct->data_id  	  = buffer[2] << 8;
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	789b      	ldrb	r3, [r3, #2]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[3];
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	78db      	ldrb	r3, [r3, #3]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[4] << 8;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	791b      	ldrb	r3, [r3, #4]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[5];
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	795b      	ldrb	r3, [r3, #5]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000ff0:	6838      	ldr	r0, [r7, #0]
 8000ff2:	f7ff fa83 	bl	80004fc <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d112      	bne.n	8001022 <FT_CAN_ReceiveData+0x6b2>
			{
				FT_Data_Struct->data_id 	  = buffer[6] << 8;
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	799b      	ldrb	r3, [r3, #6]
 8001000:	b29b      	uxth	r3, r3
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b29a      	uxth	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[7];
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	79db      	ldrb	r3, [r3, #7]
 8001016:	b29b      	uxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b29a      	uxth	r2, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b29a      	uxth	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 800102e:	e067      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
		//Messages 4, 8, etc
		else if(buffer[0]%4 == 0)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d15d      	bne.n	80010fa <FT_CAN_ReceiveData+0x78a>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800104a:	3301      	adds	r3, #1
 800104c:	429a      	cmp	r2, r3
 800104e:	d115      	bne.n	800107c <FT_CAN_ReceiveData+0x70c>
			{
				FT_Data_Struct->data_content  = buffer[1] << 8;
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	b29b      	uxth	r3, r3
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b29a      	uxth	r2, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[2];
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	789b      	ldrb	r3, [r3, #2]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b29a      	uxth	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001076:	6838      	ldr	r0, [r7, #0]
 8001078:	f7ff fa40 	bl	80004fc <FT_CAN_ProcessData>
			}

			if(RxLength >= 7)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	2b06      	cmp	r3, #6
 8001080:	d928      	bls.n	80010d4 <FT_CAN_ReceiveData+0x764>
			{
				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	78db      	ldrb	r3, [r3, #3]
 8001086:	b29b      	uxth	r3, r3
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b29a      	uxth	r2, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[4];
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	b29b      	uxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[5] << 8;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	795b      	ldrb	r3, [r3, #5]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[6];
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	799b      	ldrb	r3, [r3, #6]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80010ce:	6838      	ldr	r0, [r7, #0]
 80010d0:	f7ff fa14 	bl	80004fc <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d107      	bne.n	80010ea <FT_CAN_ReceiveData+0x77a>
			FT_Data_Struct->data_id 	  	  = buffer[7] << 8;
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	79db      	ldrb	r3, [r3, #7]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 80010f6:	e003      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		if((RxID & 0xFFF) == 0x600)
 80010f8:	bf00      	nop
 80010fa:	46ad      	mov	sp, r5
 80010fc:	e001      	b.n	8001102 <FT_CAN_ReceiveData+0x792>
		return;
 80010fe:	bf00      	nop
 8001100:	46ad      	mov	sp, r5
		}
#endif
	}
}
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bdb0      	pop	{r4, r5, r7, pc}

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f001 fb80 	bl	8002810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f870 	bl	80011f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001114:	f000 f8e6 	bl	80012e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001118:	f000 fba2 	bl	8001860 <MX_GPIO_Init>
  MX_DMA_Init();
 800111c:	f000 fb68 	bl	80017f0 <MX_DMA_Init>
  MX_IWDG_Init();
 8001120:	f000 fa9c 	bl	800165c <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 8001124:	f000 fb0e 	bl	8001744 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 8001128:	f000 f904 	bl	8001334 <MX_ADC1_Init>
  MX_RTC_Init();
 800112c:	f000 fab0 	bl	8001690 <MX_RTC_Init>
  MX_TIM6_Init();
 8001130:	f000 fb28 	bl	8001784 <MX_TIM6_Init>
  MX_FATFS_Init();
 8001134:	f009 ffb8 	bl	800b0a8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001138:	f00e f92a 	bl	800f390 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 800113c:	f000 f992 	bl	8001464 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001140:	f000 fa28 	bl	8001594 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001144:	f000 fa5c 	bl	8001600 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Acc_Msg[0] >= Per_Msg[0])
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <main+0xe0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a27      	ldr	r2, [pc, #156]	; (80011ec <main+0xe4>)
 800114e:	8812      	ldrh	r2, [r2, #0]
 8001150:	4293      	cmp	r3, r2
 8001152:	d306      	bcc.n	8001162 <main+0x5a>
	  {
		  Acc_Msg[0] = 0;
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <main+0xe0>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
		  Principal_Transmit_Msg(&hcan1, 0);
 800115a:	2100      	movs	r1, #0
 800115c:	4824      	ldr	r0, [pc, #144]	; (80011f0 <main+0xe8>)
 800115e:	f000 fe27 	bl	8001db0 <Principal_Transmit_Msg>
	  }

	  if(Acc_Msg[1] >= Per_Msg[1])
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <main+0xe0>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a21      	ldr	r2, [pc, #132]	; (80011ec <main+0xe4>)
 8001168:	8852      	ldrh	r2, [r2, #2]
 800116a:	4293      	cmp	r3, r2
 800116c:	d306      	bcc.n	800117c <main+0x74>
	  {
		  Acc_Msg[1] = 0;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <main+0xe0>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
		  Principal_Transmit_Msg(&hcan1, 1);
 8001174:	2101      	movs	r1, #1
 8001176:	481e      	ldr	r0, [pc, #120]	; (80011f0 <main+0xe8>)
 8001178:	f000 fe1a 	bl	8001db0 <Principal_Transmit_Msg>
	  }

	  if(Acc_Msg[2] >= Per_Msg[2])
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <main+0xe0>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <main+0xe4>)
 8001182:	8892      	ldrh	r2, [r2, #4]
 8001184:	4293      	cmp	r3, r2
 8001186:	d306      	bcc.n	8001196 <main+0x8e>
	  {
		  Acc_Msg[2] = 0;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <main+0xe0>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
		  Principal_Transmit_Msg(&hcan1, 2);
 800118e:	2102      	movs	r1, #2
 8001190:	4817      	ldr	r0, [pc, #92]	; (80011f0 <main+0xe8>)
 8001192:	f000 fe0d 	bl	8001db0 <Principal_Transmit_Msg>
	  }

	  if(Acc_Msg[3] >= Per_Msg[3])
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <main+0xe0>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <main+0xe4>)
 800119c:	88d2      	ldrh	r2, [r2, #6]
 800119e:	4293      	cmp	r3, r2
 80011a0:	d306      	bcc.n	80011b0 <main+0xa8>
	  {
		  Acc_Msg[3] = 0;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <main+0xe0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
		  Principal_Transmit_Msg(&hcan1, 3);
 80011a8:	2103      	movs	r1, #3
 80011aa:	4811      	ldr	r0, [pc, #68]	; (80011f0 <main+0xe8>)
 80011ac:	f000 fe00 	bl	8001db0 <Principal_Transmit_Msg>
	  }

	  if(Acc_Msg[4] >= Per_Msg[4])
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <main+0xe0>)
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <main+0xe4>)
 80011b6:	8912      	ldrh	r2, [r2, #8]
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d306      	bcc.n	80011ca <main+0xc2>
	  {
		  Acc_Msg[4] = 0;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <main+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
		  Principal_Transmit_Msg(&hcan1, 4);
 80011c2:	2104      	movs	r1, #4
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <main+0xe8>)
 80011c6:	f000 fdf3 	bl	8001db0 <Principal_Transmit_Msg>
	  }

	  if(Acc_Msg[5] >= Per_Msg[5])
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <main+0xe0>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <main+0xe4>)
 80011d0:	8952      	ldrh	r2, [r2, #10]
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d3b8      	bcc.n	8001148 <main+0x40>
	  {
		  Acc_Msg[5] = 0;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <main+0xe0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
		  Principal_Transmit_Msg(&hcan1, 5);
 80011dc:	2105      	movs	r1, #5
 80011de:	4804      	ldr	r0, [pc, #16]	; (80011f0 <main+0xe8>)
 80011e0:	f000 fde6 	bl	8001db0 <Principal_Transmit_Msg>
	  if(Acc_Msg[0] >= Per_Msg[0])
 80011e4:	e7b0      	b.n	8001148 <main+0x40>
 80011e6:	bf00      	nop
 80011e8:	20002800 	.word	0x20002800
 80011ec:	20003984 	.word	0x20003984
 80011f0:	200038d0 	.word	0x200038d0

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	2234      	movs	r2, #52	; 0x34
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00e fe3c 	bl	800fe80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <SystemClock_Config+0xe8>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <SystemClock_Config+0xe8>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <SystemClock_Config+0xe8>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <SystemClock_Config+0xec>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <SystemClock_Config+0xec>)
 800123e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <SystemClock_Config+0xec>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001250:	2309      	movs	r3, #9
 8001252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800125a:	2301      	movs	r3, #1
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800125e:	2301      	movs	r3, #1
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001262:	2302      	movs	r3, #2
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001266:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800126c:	2308      	movs	r3, #8
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001270:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001276:	2302      	movs	r3, #2
 8001278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800127a:	2306      	movs	r3, #6
 800127c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800127e:	2302      	movs	r3, #2
 8001280:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4618      	mov	r0, r3
 8001288:	f005 fb58 	bl	800693c <HAL_RCC_OscConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001292:	f000 fb8b 	bl	80019ac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001296:	f004 fd1f 	bl	8005cd8 <HAL_PWREx_EnableOverDrive>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80012a0:	f000 fb84 	bl	80019ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2302      	movs	r3, #2
 80012aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	2105      	movs	r1, #5
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fd58 	bl	8005d78 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80012ce:	f000 fb6d 	bl	80019ac <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3750      	adds	r7, #80	; 0x50
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000

080012e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b098      	sub	sp, #96	; 0x60
 80012e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	225c      	movs	r2, #92	; 0x5c
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00e fdc5 	bl	800fe80 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80012f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012fa:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 80012fc:	2308      	movs	r3, #8
 80012fe:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001300:	23c0      	movs	r3, #192	; 0xc0
 8001302:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8001308:	2304      	movs	r3, #4
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8001310:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001314:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001316:	2300      	movs	r3, #0
 8001318:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fe31 	bl	8005f84 <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8001328:	f000 fb40 	bl	80019ac <Error_Handler>
  }
}
 800132c:	bf00      	nop
 800132e:	3760      	adds	r7, #96	; 0x60
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001346:	4b44      	ldr	r3, [pc, #272]	; (8001458 <MX_ADC1_Init+0x124>)
 8001348:	4a44      	ldr	r2, [pc, #272]	; (800145c <MX_ADC1_Init+0x128>)
 800134a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800134c:	4b42      	ldr	r3, [pc, #264]	; (8001458 <MX_ADC1_Init+0x124>)
 800134e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001352:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001354:	4b40      	ldr	r3, [pc, #256]	; (8001458 <MX_ADC1_Init+0x124>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800135a:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <MX_ADC1_Init+0x124>)
 800135c:	2201      	movs	r2, #1
 800135e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001360:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <MX_ADC1_Init+0x124>)
 8001362:	2201      	movs	r2, #1
 8001364:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <MX_ADC1_Init+0x124>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136e:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <MX_ADC1_Init+0x124>)
 8001370:	2200      	movs	r2, #0
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001374:	4b38      	ldr	r3, [pc, #224]	; (8001458 <MX_ADC1_Init+0x124>)
 8001376:	4a3a      	ldr	r2, [pc, #232]	; (8001460 <MX_ADC1_Init+0x12c>)
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <MX_ADC1_Init+0x124>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <MX_ADC1_Init+0x124>)
 8001382:	2206      	movs	r2, #6
 8001384:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <MX_ADC1_Init+0x124>)
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <MX_ADC1_Init+0x124>)
 8001390:	2201      	movs	r2, #1
 8001392:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001394:	4830      	ldr	r0, [pc, #192]	; (8001458 <MX_ADC1_Init+0x124>)
 8001396:	f001 fad1 	bl	800293c <HAL_ADC_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013a0:	f000 fb04 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80013ac:	2307      	movs	r3, #7
 80013ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4828      	ldr	r0, [pc, #160]	; (8001458 <MX_ADC1_Init+0x124>)
 80013b6:	f001 fb05 	bl	80029c4 <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013c0:	f000 faf4 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	4619      	mov	r1, r3
 80013d0:	4821      	ldr	r0, [pc, #132]	; (8001458 <MX_ADC1_Init+0x124>)
 80013d2:	f001 faf7 	bl	80029c4 <HAL_ADC_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013dc:	f000 fae6 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013e4:	2303      	movs	r3, #3
 80013e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	481a      	ldr	r0, [pc, #104]	; (8001458 <MX_ADC1_Init+0x124>)
 80013ee:	f001 fae9 	bl	80029c4 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80013f8:	f000 fad8 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013fc:	2303      	movs	r3, #3
 80013fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001400:	2304      	movs	r3, #4
 8001402:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	4813      	ldr	r0, [pc, #76]	; (8001458 <MX_ADC1_Init+0x124>)
 800140a:	f001 fadb 	bl	80029c4 <HAL_ADC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001414:	f000 faca 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001418:	2304      	movs	r3, #4
 800141a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800141c:	2305      	movs	r3, #5
 800141e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	4619      	mov	r1, r3
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <MX_ADC1_Init+0x124>)
 8001426:	f001 facd 	bl	80029c4 <HAL_ADC_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001430:	f000 fabc 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001434:	2305      	movs	r3, #5
 8001436:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001438:	2306      	movs	r3, #6
 800143a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_ADC1_Init+0x124>)
 8001442:	f001 fabf 	bl	80029c4 <HAL_ADC_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800144c:	f000 faae 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200025e8 	.word	0x200025e8
 800145c:	40012000 	.word	0x40012000
 8001460:	0f000001 	.word	0x0f000001

08001464 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <MX_ADC2_Init+0x124>)
 8001478:	4a44      	ldr	r2, [pc, #272]	; (800158c <MX_ADC2_Init+0x128>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800147c:	4b42      	ldr	r3, [pc, #264]	; (8001588 <MX_ADC2_Init+0x124>)
 800147e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001482:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001484:	4b40      	ldr	r3, [pc, #256]	; (8001588 <MX_ADC2_Init+0x124>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800148a:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <MX_ADC2_Init+0x124>)
 800148c:	2201      	movs	r2, #1
 800148e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <MX_ADC2_Init+0x124>)
 8001492:	2201      	movs	r2, #1
 8001494:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001496:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <MX_ADC2_Init+0x124>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149e:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <MX_ADC2_Init+0x124>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a4:	4b38      	ldr	r3, [pc, #224]	; (8001588 <MX_ADC2_Init+0x124>)
 80014a6:	4a3a      	ldr	r2, [pc, #232]	; (8001590 <MX_ADC2_Init+0x12c>)
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	4b37      	ldr	r3, [pc, #220]	; (8001588 <MX_ADC2_Init+0x124>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 80014b0:	4b35      	ldr	r3, [pc, #212]	; (8001588 <MX_ADC2_Init+0x124>)
 80014b2:	2206      	movs	r2, #6
 80014b4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80014b6:	4b34      	ldr	r3, [pc, #208]	; (8001588 <MX_ADC2_Init+0x124>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014be:	4b32      	ldr	r3, [pc, #200]	; (8001588 <MX_ADC2_Init+0x124>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014c4:	4830      	ldr	r0, [pc, #192]	; (8001588 <MX_ADC2_Init+0x124>)
 80014c6:	f001 fa39 	bl	800293c <HAL_ADC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80014d0:	f000 fa6c 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014d4:	2306      	movs	r3, #6
 80014d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014dc:	2307      	movs	r3, #7
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	4828      	ldr	r0, [pc, #160]	; (8001588 <MX_ADC2_Init+0x124>)
 80014e6:	f001 fa6d 	bl	80029c4 <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80014f0:	f000 fa5c 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80014f4:	2307      	movs	r3, #7
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4821      	ldr	r0, [pc, #132]	; (8001588 <MX_ADC2_Init+0x124>)
 8001502:	f001 fa5f 	bl	80029c4 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800150c:	f000 fa4e 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001510:	230e      	movs	r3, #14
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001514:	2303      	movs	r3, #3
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	481a      	ldr	r0, [pc, #104]	; (8001588 <MX_ADC2_Init+0x124>)
 800151e:	f001 fa51 	bl	80029c4 <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001528:	f000 fa40 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800152c:	230f      	movs	r3, #15
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001530:	2304      	movs	r3, #4
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4813      	ldr	r0, [pc, #76]	; (8001588 <MX_ADC2_Init+0x124>)
 800153a:	f001 fa43 	bl	80029c4 <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001544:	f000 fa32 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001548:	2308      	movs	r3, #8
 800154a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800154c:	2305      	movs	r3, #5
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <MX_ADC2_Init+0x124>)
 8001556:	f001 fa35 	bl	80029c4 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8001560:	f000 fa24 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001564:	2309      	movs	r3, #9
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001568:	2306      	movs	r3, #6
 800156a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_ADC2_Init+0x124>)
 8001572:	f001 fa27 	bl	80029c4 <HAL_ADC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800157c:	f000 fa16 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200004c0 	.word	0x200004c0
 800158c:	40012100 	.word	0x40012100
 8001590:	0f000001 	.word	0x0f000001

08001594 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_CAN1_Init+0x64>)
 800159a:	4a18      	ldr	r2, [pc, #96]	; (80015fc <MX_CAN1_Init+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015a0:	2205      	movs	r2, #5
 80015a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015b2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80015b6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015e4:	f001 fc1c 	bl	8002e20 <HAL_CAN_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80015ee:	f000 f9dd 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200038d0 	.word	0x200038d0
 80015fc:	40006400 	.word	0x40006400

08001600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2C1_Init+0x50>)
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <MX_I2C1_Init+0x54>)
 8001608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_I2C1_Init+0x50>)
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_I2C1_Init+0x58>)
 800160e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_I2C1_Init+0x50>)
 800161e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_I2C1_Init+0x50>)
 800163e:	f002 ffc9 	bl	80045d4 <HAL_I2C_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001648:	f000 f9b0 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000508 	.word	0x20000508
 8001654:	40005400 	.word	0x40005400
 8001658:	00061a80 	.word	0x00061a80

0800165c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_IWDG_Init+0x2c>)
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <MX_IWDG_Init+0x30>)
 8001664:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_IWDG_Init+0x2c>)
 8001668:	2204      	movs	r2, #4
 800166a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 249;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_IWDG_Init+0x2c>)
 800166e:	22f9      	movs	r2, #249	; 0xf9
 8001670:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_IWDG_Init+0x2c>)
 8001674:	f003 f8f2 	bl	800485c <HAL_IWDG_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 800167e:	f000 f995 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000560 	.word	0x20000560
 800168c:	40003000 	.word	0x40003000

08001690 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016a4:	2300      	movs	r3, #0
 80016a6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <MX_RTC_Init+0xac>)
 80016aa:	4a25      	ldr	r2, [pc, #148]	; (8001740 <MX_RTC_Init+0xb0>)
 80016ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <MX_RTC_Init+0xac>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <MX_RTC_Init+0xac>)
 80016b6:	227f      	movs	r2, #127	; 0x7f
 80016b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <MX_RTC_Init+0xac>)
 80016bc:	22ff      	movs	r2, #255	; 0xff
 80016be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <MX_RTC_Init+0xac>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <MX_RTC_Init+0xac>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_RTC_Init+0xac>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016d2:	481a      	ldr	r0, [pc, #104]	; (800173c <MX_RTC_Init+0xac>)
 80016d4:	f005 fbd0 	bl	8006e78 <HAL_RTC_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80016de:	f000 f965 	bl	80019ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2201      	movs	r2, #1
 80016fa:	4619      	mov	r1, r3
 80016fc:	480f      	ldr	r0, [pc, #60]	; (800173c <MX_RTC_Init+0xac>)
 80016fe:	f005 fc4c 	bl	8006f9a <HAL_RTC_SetTime>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001708:	f000 f950 	bl	80019ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800170c:	2301      	movs	r3, #1
 800170e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001710:	2301      	movs	r3, #1
 8001712:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001714:	2301      	movs	r3, #1
 8001716:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001718:	2300      	movs	r3, #0
 800171a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800171c:	463b      	mov	r3, r7
 800171e:	2201      	movs	r2, #1
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <MX_RTC_Init+0xac>)
 8001724:	f005 fcf6 	bl	8007114 <HAL_RTC_SetDate>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800172e:	f000 f93d 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200026b0 	.word	0x200026b0
 8001740:	40002800 	.word	0x40002800

08001744 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_SDIO_SD_Init+0x38>)
 800174a:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <MX_SDIO_SD_Init+0x3c>)
 800174c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_SDIO_SD_Init+0x38>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_SDIO_SD_Init+0x38>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_SDIO_SD_Init+0x38>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_SDIO_SD_Init+0x38>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <MX_SDIO_SD_Init+0x38>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <MX_SDIO_SD_Init+0x38>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	2000277c 	.word	0x2000277c
 8001780:	40012c00 	.word	0x40012c00

08001784 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178a:	463b      	mov	r3, r7
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_TIM6_Init+0x64>)
 8001794:	4a15      	ldr	r2, [pc, #84]	; (80017ec <MX_TIM6_Init+0x68>)
 8001796:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <MX_TIM6_Init+0x64>)
 800179a:	2259      	movs	r2, #89	; 0x59
 800179c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_TIM6_Init+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <MX_TIM6_Init+0x64>)
 80017a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_TIM6_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_TIM6_Init+0x64>)
 80017b4:	f007 f8e1 	bl	800897a <HAL_TIM_Base_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80017be:	f000 f8f5 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017ca:	463b      	mov	r3, r7
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <MX_TIM6_Init+0x64>)
 80017d0:	f007 faf2 	bl	8008db8 <HAL_TIMEx_MasterConfigSynchronization>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80017da:	f000 f8e7 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20002730 	.word	0x20002730
 80017ec:	40001000 	.word	0x40001000

080017f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_DMA_Init+0x6c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <MX_DMA_Init+0x6c>)
 8001800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_DMA_Init+0x6c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2102      	movs	r1, #2
 8001816:	2038      	movs	r0, #56	; 0x38
 8001818:	f002 f929 	bl	8003a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800181c:	2038      	movs	r0, #56	; 0x38
 800181e:	f002 f942 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2102      	movs	r1, #2
 8001826:	203a      	movs	r0, #58	; 0x3a
 8001828:	f002 f921 	bl	8003a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800182c:	203a      	movs	r0, #58	; 0x3a
 800182e:	f002 f93a 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	203b      	movs	r0, #59	; 0x3b
 8001838:	f002 f919 	bl	8003a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800183c:	203b      	movs	r0, #59	; 0x3b
 800183e:	f002 f932 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	2045      	movs	r0, #69	; 0x45
 8001848:	f002 f911 	bl	8003a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800184c:	2045      	movs	r0, #69	; 0x45
 800184e:	f002 f92a 	bl	8003aa6 <HAL_NVIC_EnableIRQ>

}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800

08001860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <MX_GPIO_Init+0x140>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a48      	ldr	r2, [pc, #288]	; (80019a0 <MX_GPIO_Init+0x140>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <MX_GPIO_Init+0x140>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b42      	ldr	r3, [pc, #264]	; (80019a0 <MX_GPIO_Init+0x140>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a41      	ldr	r2, [pc, #260]	; (80019a0 <MX_GPIO_Init+0x140>)
 800189c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <MX_GPIO_Init+0x140>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <MX_GPIO_Init+0x140>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a3a      	ldr	r2, [pc, #232]	; (80019a0 <MX_GPIO_Init+0x140>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <MX_GPIO_Init+0x140>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b34      	ldr	r3, [pc, #208]	; (80019a0 <MX_GPIO_Init+0x140>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a33      	ldr	r2, [pc, #204]	; (80019a0 <MX_GPIO_Init+0x140>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <MX_GPIO_Init+0x140>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <MX_GPIO_Init+0x140>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a2c      	ldr	r2, [pc, #176]	; (80019a0 <MX_GPIO_Init+0x140>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <MX_GPIO_Init+0x140>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	210f      	movs	r1, #15
 8001906:	4827      	ldr	r0, [pc, #156]	; (80019a4 <MX_GPIO_Init+0x144>)
 8001908:	f002 fe32 	bl	8004570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001912:	4825      	ldr	r0, [pc, #148]	; (80019a8 <MX_GPIO_Init+0x148>)
 8001914:	f002 fe2c 	bl	8004570 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001918:	230f      	movs	r3, #15
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	2301      	movs	r3, #1
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	481d      	ldr	r0, [pc, #116]	; (80019a4 <MX_GPIO_Init+0x144>)
 8001930:	f002 fc72 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001934:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4816      	ldr	r0, [pc, #88]	; (80019a8 <MX_GPIO_Init+0x148>)
 800194e:	f002 fc63 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001952:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001958:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800195c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	480f      	ldr	r0, [pc, #60]	; (80019a8 <MX_GPIO_Init+0x148>)
 800196a:	f002 fc55 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4808      	ldr	r0, [pc, #32]	; (80019a4 <MX_GPIO_Init+0x144>)
 8001982:	f002 fc49 	bl	8004218 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2102      	movs	r1, #2
 800198a:	2028      	movs	r0, #40	; 0x28
 800198c:	f002 f86f 	bl	8003a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001990:	2028      	movs	r0, #40	; 0x28
 8001992:	f002 f888 	bl	8003aa6 <HAL_NVIC_EnableIRQ>

}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020400 	.word	0x40020400

080019ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
}
 80019b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <Error_Handler+0x8>
	...

080019b8 <Msg_0>:
 */

#include "principal.h"

static void Msg_0(CAN_HandleTypeDef* hcan)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	CAN_Tx_Header.StdId = FIRST_ID;
 80019c0:	4b39      	ldr	r3, [pc, #228]	; (8001aa8 <Msg_0+0xf0>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
	CAN_Tx_Header.DLC = 8;
 80019c6:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <Msg_0+0xf0>)
 80019c8:	2208      	movs	r2, #8
 80019ca:	611a      	str	r2, [r3, #16]
	CAN_Tx_Header.IDE = CAN_ID_STD;
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <Msg_0+0xf0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
	CAN_Tx_Header.RTR = CAN_RTR_DATA;
 80019d2:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <Msg_0+0xf0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
	CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <Msg_0+0xf0>)
 80019da:	2200      	movs	r2, #0
 80019dc:	751a      	strb	r2, [r3, #20]

	CAN_Tx_Data[0] = ADC_Buffer[0] >> 8;
 80019de:	4b33      	ldr	r3, [pc, #204]	; (8001aac <Msg_0+0xf4>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <Msg_0+0xf8>)
 80019ea:	701a      	strb	r2, [r3, #0]
	CAN_Tx_Data[1] = ADC_Buffer[0] & 0xff;
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <Msg_0+0xf4>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <Msg_0+0xf8>)
 80019f4:	705a      	strb	r2, [r3, #1]
	CAN_Tx_Data[2] = ADC_Buffer[1] >> 8;
 80019f6:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <Msg_0+0xf4>)
 80019f8:	885b      	ldrh	r3, [r3, #2]
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <Msg_0+0xf8>)
 8001a02:	709a      	strb	r2, [r3, #2]
	CAN_Tx_Data[3] = ADC_Buffer[1] & 0xff;
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <Msg_0+0xf4>)
 8001a06:	885b      	ldrh	r3, [r3, #2]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <Msg_0+0xf8>)
 8001a0c:	70da      	strb	r2, [r3, #3]
	CAN_Tx_Data[4] = ADC_Buffer[2] >> 8;
 8001a0e:	4b27      	ldr	r3, [pc, #156]	; (8001aac <Msg_0+0xf4>)
 8001a10:	889b      	ldrh	r3, [r3, #4]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <Msg_0+0xf8>)
 8001a1a:	711a      	strb	r2, [r3, #4]
	CAN_Tx_Data[5] = ADC_Buffer[2] & 0xff;
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <Msg_0+0xf4>)
 8001a1e:	889b      	ldrh	r3, [r3, #4]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <Msg_0+0xf8>)
 8001a24:	715a      	strb	r2, [r3, #5]
	CAN_Tx_Data[6] = ADC_Buffer[3] >> 8;
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <Msg_0+0xf4>)
 8001a28:	88db      	ldrh	r3, [r3, #6]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <Msg_0+0xf8>)
 8001a32:	719a      	strb	r2, [r3, #6]
	CAN_Tx_Data[7] = ADC_Buffer[3] & 0xff;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <Msg_0+0xf4>)
 8001a36:	88db      	ldrh	r3, [r3, #6]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <Msg_0+0xf8>)
 8001a3c:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == 1)
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <Msg_0+0xfc>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d108      	bne.n	8001a58 <Msg_0+0xa0>
		Principal_Datalogger_Save_Buffer(CAN_Tx_Header.StdId, CAN_Tx_Header.DLC, CAN_Tx_Data, &File_Struct);
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <Msg_0+0xf0>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <Msg_0+0xf0>)
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	b2d9      	uxtb	r1, r3
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <Msg_0+0x100>)
 8001a52:	4a17      	ldr	r2, [pc, #92]	; (8001ab0 <Msg_0+0xf8>)
 8001a54:	f000 f9de 	bl	8001e14 <Principal_Datalogger_Save_Buffer>

	if(Acc_CAN[0] >= Per_CAN[0])
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <Msg_0+0x104>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <Msg_0+0x108>)
 8001a5e:	8812      	ldrh	r2, [r2, #0]
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d31d      	bcc.n	8001aa0 <Msg_0+0xe8>
	{
		Acc_CAN[0] = 0;
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <Msg_0+0x104>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
		if(HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Header, CAN_Tx_Data, &pTxMailbox) == HAL_OK)
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <Msg_0+0x10c>)
 8001a6c:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <Msg_0+0xf8>)
 8001a6e:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <Msg_0+0xf0>)
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f001 fad0 	bl	8003016 <HAL_CAN_AddTxMessage>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <Msg_0+0xca>
			Verify_CAN[0] = 1;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <Msg_0+0x110>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	e002      	b.n	8001a8e <Msg_0+0xd6>
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 fb9c 	bl	80031cc <HAL_CAN_GetTxMailboxesFreeLevel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d002      	beq.n	8001aa0 <Msg_0+0xe8>
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d9f3      	bls.n	8001a88 <Msg_0+0xd0>
	}
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20002634 	.word	0x20002634
 8001aac:	200004a8 	.word	0x200004a8
 8001ab0:	20003928 	.word	0x20003928
 8001ab4:	20002778 	.word	0x20002778
 8001ab8:	2000282c 	.word	0x2000282c
 8001abc:	200038f8 	.word	0x200038f8
 8001ac0:	20000480 	.word	0x20000480
 8001ac4:	20000488 	.word	0x20000488
 8001ac8:	200025b0 	.word	0x200025b0

08001acc <Msg_1>:

static void Msg_1(CAN_HandleTypeDef* hcan)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	CAN_Tx_Header.StdId = FIRST_ID + 1;
 8001ad4:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <Msg_1+0xf0>)
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	601a      	str	r2, [r3, #0]
	CAN_Tx_Header.DLC = 8;
 8001ada:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <Msg_1+0xf0>)
 8001adc:	2208      	movs	r2, #8
 8001ade:	611a      	str	r2, [r3, #16]
	CAN_Tx_Header.IDE = CAN_ID_STD;
 8001ae0:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <Msg_1+0xf0>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
	CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8001ae6:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <Msg_1+0xf0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
	CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001aec:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <Msg_1+0xf0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	751a      	strb	r2, [r3, #20]

	CAN_Tx_Data[0] = ADC_Buffer[4] >> 8;
 8001af2:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <Msg_1+0xf4>)
 8001af4:	891b      	ldrh	r3, [r3, #8]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <Msg_1+0xf8>)
 8001afe:	701a      	strb	r2, [r3, #0]
	CAN_Tx_Data[1] = ADC_Buffer[4] & 0xff;
 8001b00:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <Msg_1+0xf4>)
 8001b02:	891b      	ldrh	r3, [r3, #8]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <Msg_1+0xf8>)
 8001b08:	705a      	strb	r2, [r3, #1]
	CAN_Tx_Data[2] = ADC_Buffer[5] >> 8;
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <Msg_1+0xf4>)
 8001b0c:	895b      	ldrh	r3, [r3, #10]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <Msg_1+0xf8>)
 8001b16:	709a      	strb	r2, [r3, #2]
	CAN_Tx_Data[3] = ADC_Buffer[5] & 0xff;
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <Msg_1+0xf4>)
 8001b1a:	895b      	ldrh	r3, [r3, #10]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <Msg_1+0xf8>)
 8001b20:	70da      	strb	r2, [r3, #3]
	CAN_Tx_Data[4] = ADC_Buffer[6] >> 8;
 8001b22:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <Msg_1+0xf4>)
 8001b24:	899b      	ldrh	r3, [r3, #12]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <Msg_1+0xf8>)
 8001b2e:	711a      	strb	r2, [r3, #4]
	CAN_Tx_Data[5] = ADC_Buffer[6] & 0xff;
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <Msg_1+0xf4>)
 8001b32:	899b      	ldrh	r3, [r3, #12]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <Msg_1+0xf8>)
 8001b38:	715a      	strb	r2, [r3, #5]
	CAN_Tx_Data[6] = ADC_Buffer[7] >> 8;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <Msg_1+0xf4>)
 8001b3c:	89db      	ldrh	r3, [r3, #14]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <Msg_1+0xf8>)
 8001b46:	719a      	strb	r2, [r3, #6]
	CAN_Tx_Data[7] = ADC_Buffer[7] & 0xff;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <Msg_1+0xf4>)
 8001b4a:	89db      	ldrh	r3, [r3, #14]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <Msg_1+0xf8>)
 8001b50:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == 1)
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <Msg_1+0xfc>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d108      	bne.n	8001b6c <Msg_1+0xa0>
		Principal_Datalogger_Save_Buffer(CAN_Tx_Header.StdId, CAN_Tx_Header.DLC, CAN_Tx_Data, &File_Struct);
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <Msg_1+0xf0>)
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <Msg_1+0xf0>)
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	b2d9      	uxtb	r1, r3
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <Msg_1+0x100>)
 8001b66:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <Msg_1+0xf8>)
 8001b68:	f000 f954 	bl	8001e14 <Principal_Datalogger_Save_Buffer>

	if(Acc_CAN[1] >= Per_CAN[1])
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <Msg_1+0x104>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <Msg_1+0x108>)
 8001b72:	8852      	ldrh	r2, [r2, #2]
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d31d      	bcc.n	8001bb4 <Msg_1+0xe8>
	{
		Acc_CAN[1] = 0;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <Msg_1+0x104>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	605a      	str	r2, [r3, #4]
		if(HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Header, CAN_Tx_Data, &pTxMailbox) == HAL_OK)
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <Msg_1+0x10c>)
 8001b80:	4a10      	ldr	r2, [pc, #64]	; (8001bc4 <Msg_1+0xf8>)
 8001b82:	490e      	ldr	r1, [pc, #56]	; (8001bbc <Msg_1+0xf0>)
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f001 fa46 	bl	8003016 <HAL_CAN_AddTxMessage>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <Msg_1+0xca>
			Verify_CAN[0] = 1;
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <Msg_1+0x110>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	e002      	b.n	8001ba2 <Msg_1+0xd6>
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f001 fb12 	bl	80031cc <HAL_CAN_GetTxMailboxesFreeLevel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d002      	beq.n	8001bb4 <Msg_1+0xe8>
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d9f3      	bls.n	8001b9c <Msg_1+0xd0>
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20002634 	.word	0x20002634
 8001bc0:	200004a8 	.word	0x200004a8
 8001bc4:	20003928 	.word	0x20003928
 8001bc8:	20002778 	.word	0x20002778
 8001bcc:	2000282c 	.word	0x2000282c
 8001bd0:	200038f8 	.word	0x200038f8
 8001bd4:	20000480 	.word	0x20000480
 8001bd8:	20000488 	.word	0x20000488
 8001bdc:	200025b0 	.word	0x200025b0

08001be0 <Msg_2>:

static void Msg_2(CAN_HandleTypeDef* hcan)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	CAN_Tx_Header.StdId = FIRST_ID + 2;
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <Msg_2+0xf0>)
 8001bea:	2203      	movs	r2, #3
 8001bec:	601a      	str	r2, [r3, #0]
	CAN_Tx_Header.DLC = 8;
 8001bee:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <Msg_2+0xf0>)
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	611a      	str	r2, [r3, #16]
	CAN_Tx_Header.IDE = CAN_ID_STD;
 8001bf4:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <Msg_2+0xf0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
	CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8001bfa:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <Msg_2+0xf0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
	CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001c00:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <Msg_2+0xf0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	751a      	strb	r2, [r3, #20]

	CAN_Tx_Data[0] = ADC_Buffer[8] >> 8;
 8001c06:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <Msg_2+0xf4>)
 8001c08:	8a1b      	ldrh	r3, [r3, #16]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <Msg_2+0xf8>)
 8001c12:	701a      	strb	r2, [r3, #0]
	CAN_Tx_Data[1] = ADC_Buffer[8] & 0xff;
 8001c14:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <Msg_2+0xf4>)
 8001c16:	8a1b      	ldrh	r3, [r3, #16]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <Msg_2+0xf8>)
 8001c1c:	705a      	strb	r2, [r3, #1]
	CAN_Tx_Data[2] = ADC_Buffer[9] >> 8;
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <Msg_2+0xf4>)
 8001c20:	8a5b      	ldrh	r3, [r3, #18]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <Msg_2+0xf8>)
 8001c2a:	709a      	strb	r2, [r3, #2]
	CAN_Tx_Data[3] = ADC_Buffer[9] & 0xff;
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <Msg_2+0xf4>)
 8001c2e:	8a5b      	ldrh	r3, [r3, #18]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <Msg_2+0xf8>)
 8001c34:	70da      	strb	r2, [r3, #3]
	CAN_Tx_Data[4] = ADC_Buffer[10] >> 8;
 8001c36:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <Msg_2+0xf4>)
 8001c38:	8a9b      	ldrh	r3, [r3, #20]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <Msg_2+0xf8>)
 8001c42:	711a      	strb	r2, [r3, #4]
	CAN_Tx_Data[5] = ADC_Buffer[10] & 0xff;
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <Msg_2+0xf4>)
 8001c46:	8a9b      	ldrh	r3, [r3, #20]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <Msg_2+0xf8>)
 8001c4c:	715a      	strb	r2, [r3, #5]
	CAN_Tx_Data[6] = ADC_Buffer[11] >> 8;
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <Msg_2+0xf4>)
 8001c50:	8adb      	ldrh	r3, [r3, #22]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <Msg_2+0xf8>)
 8001c5a:	719a      	strb	r2, [r3, #6]
	CAN_Tx_Data[7] = ADC_Buffer[11] & 0xff;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <Msg_2+0xf4>)
 8001c5e:	8adb      	ldrh	r3, [r3, #22]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <Msg_2+0xf8>)
 8001c64:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == 1)
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <Msg_2+0xfc>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d108      	bne.n	8001c80 <Msg_2+0xa0>
		Principal_Datalogger_Save_Buffer(CAN_Tx_Header.StdId, CAN_Tx_Header.DLC, CAN_Tx_Data, &File_Struct);
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <Msg_2+0xf0>)
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <Msg_2+0xf0>)
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	b2d9      	uxtb	r1, r3
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <Msg_2+0x100>)
 8001c7a:	4a17      	ldr	r2, [pc, #92]	; (8001cd8 <Msg_2+0xf8>)
 8001c7c:	f000 f8ca 	bl	8001e14 <Principal_Datalogger_Save_Buffer>

	if(Acc_CAN[2] >= Per_CAN[2])
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <Msg_2+0x104>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <Msg_2+0x108>)
 8001c86:	8892      	ldrh	r2, [r2, #4]
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d31d      	bcc.n	8001cc8 <Msg_2+0xe8>
	{
		Acc_CAN[2] = 0;
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <Msg_2+0x104>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
		if(HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Header, CAN_Tx_Data, &pTxMailbox) == HAL_OK)
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <Msg_2+0x10c>)
 8001c94:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <Msg_2+0xf8>)
 8001c96:	490e      	ldr	r1, [pc, #56]	; (8001cd0 <Msg_2+0xf0>)
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f001 f9bc 	bl	8003016 <HAL_CAN_AddTxMessage>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <Msg_2+0xca>
			Verify_CAN[0] = 1;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <Msg_2+0x110>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	e002      	b.n	8001cb6 <Msg_2+0xd6>
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f001 fa88 	bl	80031cc <HAL_CAN_GetTxMailboxesFreeLevel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d002      	beq.n	8001cc8 <Msg_2+0xe8>
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d9f3      	bls.n	8001cb0 <Msg_2+0xd0>
	}
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20002634 	.word	0x20002634
 8001cd4:	200004a8 	.word	0x200004a8
 8001cd8:	20003928 	.word	0x20003928
 8001cdc:	20002778 	.word	0x20002778
 8001ce0:	2000282c 	.word	0x2000282c
 8001ce4:	200038f8 	.word	0x200038f8
 8001ce8:	20000480 	.word	0x20000480
 8001cec:	20000488 	.word	0x20000488
 8001cf0:	200025b0 	.word	0x200025b0

08001cf4 <Msg_Verify>:

static void Msg_Verify(CAN_HandleTypeDef* hcan)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	CAN_Tx_Header.StdId = FIRST_ID + 4;
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <Msg_Verify+0x80>)
 8001cfe:	2205      	movs	r2, #5
 8001d00:	601a      	str	r2, [r3, #0]
	CAN_Tx_Header.DLC = 8;
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <Msg_Verify+0x80>)
 8001d04:	2208      	movs	r2, #8
 8001d06:	611a      	str	r2, [r3, #16]
	CAN_Tx_Header.IDE = CAN_ID_STD;
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <Msg_Verify+0x80>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
	CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <Msg_Verify+0x80>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	60da      	str	r2, [r3, #12]
	CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001d14:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <Msg_Verify+0x80>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	751a      	strb	r2, [r3, #20]

	if(Flag_Datalogger == 1)
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <Msg_Verify+0x84>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d108      	bne.n	8001d34 <Msg_Verify+0x40>
		Principal_Datalogger_Save_Buffer(CAN_Tx_Header.StdId, CAN_Tx_Header.DLC, CAN_Tx_Data, &File_Struct);
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <Msg_Verify+0x80>)
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <Msg_Verify+0x80>)
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	b2d9      	uxtb	r1, r3
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <Msg_Verify+0x88>)
 8001d2e:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <Msg_Verify+0x8c>)
 8001d30:	f000 f870 	bl	8001e14 <Principal_Datalogger_Save_Buffer>

	if(HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Header, CAN_Tx_Data, &pTxMailbox) == HAL_OK)
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <Msg_Verify+0x90>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <Msg_Verify+0x8c>)
 8001d38:	490e      	ldr	r1, [pc, #56]	; (8001d74 <Msg_Verify+0x80>)
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f001 f96b 	bl	8003016 <HAL_CAN_AddTxMessage>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <Msg_Verify+0x58>
		Verify_CAN[0] = 1;
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <Msg_Verify+0x94>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e002      	b.n	8001d58 <Msg_Verify+0x64>
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	3301      	adds	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f001 fa37 	bl	80031cc <HAL_CAN_GetTxMailboxesFreeLevel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d002      	beq.n	8001d6a <Msg_Verify+0x76>
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d9f3      	bls.n	8001d52 <Msg_Verify+0x5e>
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20002634 	.word	0x20002634
 8001d78:	20002778 	.word	0x20002778
 8001d7c:	2000282c 	.word	0x2000282c
 8001d80:	20003928 	.word	0x20003928
 8001d84:	20000488 	.word	0x20000488
 8001d88:	200025b0 	.word	0x200025b0

08001d8c <Msg_PDM>:

static void Msg_PDM()
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
	uint8_t buffer[8];
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <Msg_ECU>:

static void Msg_ECU()
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
	uint8_t buffer[8];
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d824      	bhi.n	8001e0c <Principal_Transmit_Msg+0x5c>
 8001dc2:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <Principal_Transmit_Msg+0x18>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001de1 	.word	0x08001de1
 8001dcc:	08001de9 	.word	0x08001de9
 8001dd0:	08001df1 	.word	0x08001df1
 8001dd4:	08001df9 	.word	0x08001df9
 8001dd8:	08001e01 	.word	0x08001e01
 8001ddc:	08001e07 	.word	0x08001e07
	{
		case 0:
			Msg_0(hcan);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff fde9 	bl	80019b8 <Msg_0>
			break;
 8001de6:	e012      	b.n	8001e0e <Principal_Transmit_Msg+0x5e>

		case 1:
			Msg_1(hcan);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fe6f 	bl	8001acc <Msg_1>
			break;
 8001dee:	e00e      	b.n	8001e0e <Principal_Transmit_Msg+0x5e>

		case 2:
			Msg_2(hcan);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff fef5 	bl	8001be0 <Msg_2>
			break;
 8001df6:	e00a      	b.n	8001e0e <Principal_Transmit_Msg+0x5e>

		case 3:
			Msg_Verify(hcan);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff7b 	bl	8001cf4 <Msg_Verify>
			break;
 8001dfe:	e006      	b.n	8001e0e <Principal_Transmit_Msg+0x5e>

		case 4:
			Msg_PDM();
 8001e00:	f7ff ffc4 	bl	8001d8c <Msg_PDM>
			break;
 8001e04:	e003      	b.n	8001e0e <Principal_Transmit_Msg+0x5e>

		case 5:
			Msg_ECU();
 8001e06:	f7ff ffca 	bl	8001d9e <Msg_ECU>
			break;
 8001e0a:	e000      	b.n	8001e0e <Principal_Transmit_Msg+0x5e>

		default:
			return;
 8001e0c:	bf00      	nop
	}
}
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <Principal_Datalogger_Save_Buffer>:

	return retVal;
}

void Principal_Datalogger_Save_Buffer(uint32_t Data_ID, uint8_t Data_Length, uint8_t* Data_Buffer, FIL* file_struct)
{
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	460b      	mov	r3, r1
 8001e22:	72fb      	strb	r3, [r7, #11]
 8001e24:	466b      	mov	r3, sp
 8001e26:	461d      	mov	r5, r3
	uint8_t buffer[5 + Data_Length];
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	1d5c      	adds	r4, r3, #5
 8001e2c:	1e63      	subs	r3, r4, #1
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	4623      	mov	r3, r4
 8001e32:	4618      	mov	r0, r3
 8001e34:	f04f 0100 	mov.w	r1, #0
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	00cb      	lsls	r3, r1, #3
 8001e42:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e46:	00c2      	lsls	r2, r0, #3
 8001e48:	4623      	mov	r3, r4
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f04f 0100 	mov.w	r1, #0
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	00cb      	lsls	r3, r1, #3
 8001e5a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e5e:	00c2      	lsls	r2, r0, #3
 8001e60:	4623      	mov	r3, r4
 8001e62:	3307      	adds	r3, #7
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	ebad 0d03 	sub.w	sp, sp, r3
 8001e6c:	466b      	mov	r3, sp
 8001e6e:	3300      	adds	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
	BYTE byte;
	FRESULT verify[2];

	buffer[0] = 'D';
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2244      	movs	r2, #68	; 0x44
 8001e76:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'L';
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	224c      	movs	r2, #76	; 0x4c
 8001e7c:	705a      	strb	r2, [r3, #1]
	buffer[2] = Data_ID & 0xff;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	709a      	strb	r2, [r3, #2]
	buffer[3] = Data_Length;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	7afa      	ldrb	r2, [r7, #11]
 8001e8a:	70da      	strb	r2, [r3, #3]
	buffer[4] = Acc_Datalogger;
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <Principal_Datalogger_Save_Buffer+0x128>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	711a      	strb	r2, [r3, #4]

	Acc_Datalogger = 0;
 8001e96:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <Principal_Datalogger_Save_Buffer+0x128>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

	for(uint8_t i = 0; i < Data_Length; i++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	77fb      	strb	r3, [r7, #31]
 8001ea0:	e00a      	b.n	8001eb8 <Principal_Datalogger_Save_Buffer+0xa4>
		buffer[5 + i] = Data_Buffer[i];
 8001ea2:	7ffb      	ldrb	r3, [r7, #31]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	441a      	add	r2, r3
 8001ea8:	7ffb      	ldrb	r3, [r7, #31]
 8001eaa:	3305      	adds	r3, #5
 8001eac:	7811      	ldrb	r1, [r2, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < Data_Length; i++)
 8001eb2:	7ffb      	ldrb	r3, [r7, #31]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	77fb      	strb	r3, [r7, #31]
 8001eb8:	7ffa      	ldrb	r2, [r7, #31]
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d3f0      	bcc.n	8001ea2 <Principal_Datalogger_Save_Buffer+0x8e>

	memcpy(&Datalogger_Buffer + Datalogger_Buffer_Position, buffer, 5 + Data_Length);
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <Principal_Datalogger_Save_Buffer+0x12c>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	031b      	lsls	r3, r3, #12
 8001ec6:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <Principal_Datalogger_Save_Buffer+0x130>)
 8001ec8:	1898      	adds	r0, r3, r2
 8001eca:	6979      	ldr	r1, [r7, #20]
 8001ecc:	7afb      	ldrb	r3, [r7, #11]
 8001ece:	3305      	adds	r3, #5
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f00d ffc7 	bl	800fe64 <memcpy>

	Datalogger_Buffer_Position += (5 + Data_Length);
 8001ed6:	7afb      	ldrb	r3, [r7, #11]
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <Principal_Datalogger_Save_Buffer+0x12c>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3305      	adds	r3, #5
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <Principal_Datalogger_Save_Buffer+0x12c>)
 8001ee8:	801a      	strh	r2, [r3, #0]

	if(Datalogger_Buffer_Position > (DATALOGGER_BUFFER_SIZE - DATALOGGER_MSG_MAX_SIZE))
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <Principal_Datalogger_Save_Buffer+0x12c>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	f640 72f2 	movw	r2, #4082	; 0xff2
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d91c      	bls.n	8001f30 <Principal_Datalogger_Save_Buffer+0x11c>
	{
		verify[0] = f_write(file_struct, &Datalogger_Buffer, Datalogger_Buffer_Position, &byte);
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <Principal_Datalogger_Save_Buffer+0x12c>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f107 0313 	add.w	r3, r7, #19
 8001f00:	4910      	ldr	r1, [pc, #64]	; (8001f44 <Principal_Datalogger_Save_Buffer+0x130>)
 8001f02:	6838      	ldr	r0, [r7, #0]
 8001f04:	f00c ffd6 	bl	800eeb4 <f_write>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	743b      	strb	r3, [r7, #16]

		verify[1] = f_sync(file_struct);
 8001f0c:	6838      	ldr	r0, [r7, #0]
 8001f0e:	f00d f965 	bl	800f1dc <f_sync>
 8001f12:	4603      	mov	r3, r0
 8001f14:	747b      	strb	r3, [r7, #17]

		if((verify[0] == FR_OK) && (verify[1] == FR_OK))
 8001f16:	7c3b      	ldrb	r3, [r7, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d106      	bne.n	8001f2a <Principal_Datalogger_Save_Buffer+0x116>
 8001f1c:	7c7b      	ldrb	r3, [r7, #17]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <Principal_Datalogger_Save_Buffer+0x116>
			Verify_Datalogger = 1;
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <Principal_Datalogger_Save_Buffer+0x134>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e002      	b.n	8001f30 <Principal_Datalogger_Save_Buffer+0x11c>
		else
			Verify_Datalogger = 0;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <Principal_Datalogger_Save_Buffer+0x134>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	46ad      	mov	sp, r5
	}
}
 8001f32:	bf00      	nop
 8001f34:	3720      	adds	r7, #32
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bdb0      	pop	{r4, r5, r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20003924 	.word	0x20003924
 8001f40:	2000055c 	.word	0x2000055c
 8001f44:	2000056c 	.word	0x2000056c
 8001f48:	200025ac 	.word	0x200025ac

08001f4c <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_Rx_Header, CAN_Rx_Data) == HAL_OK)
 8001f54:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001f56:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f58:	2100      	movs	r1, #0
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f001 f96b 	bl	8003236 <HAL_CAN_GetRxMessage>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d120      	bne.n	8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
	{
		Verify_CAN[1] = 1;
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	705a      	strb	r2, [r3, #1]

		if(CAN_Rx_Header.IDE == CAN_ID_STD)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		{
			Principal_Datalogger_Save_Buffer(CAN_Rx_Header.StdId, CAN_Rx_Header.DLC, CAN_Rx_Data, &File_Struct);
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	b2d9      	uxtb	r1, r3
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001f82:	f7ff ff47 	bl	8001e14 <Principal_Datalogger_Save_Buffer>
		}
	}

	else
		Verify_CAN[1] = 0;
}
 8001f86:	e012      	b.n	8001fae <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		else if((CAN_Rx_Header.ExtId & 0x1FFFF000) == 0x1E35C000)
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00b      	beq.n	8001fae <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
			FT_CAN_ReceiveData(CAN_Rx_Header.ExtId, CAN_Rx_Header.DLC, CAN_Rx_Data, &ECU_Data);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f98:	6858      	ldr	r0, [r3, #4]
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f9c:	6919      	ldr	r1, [r3, #16]
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001fa0:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001fa2:	f7fe fce5 	bl	8000970 <FT_CAN_ReceiveData>
}
 8001fa6:	e002      	b.n	8001fae <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		Verify_CAN[1] = 0;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	705a      	strb	r2, [r3, #1]
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20002818 	.word	0x20002818
 8001fbc:	2000048c 	.word	0x2000048c
 8001fc0:	200025b0 	.word	0x200025b0
 8001fc4:	2000282c 	.word	0x2000282c
 8001fc8:	1ffff000 	.word	0x1ffff000
 8001fcc:	1e35c000 	.word	0x1e35c000
 8001fd0:	20003930 	.word	0x20003930

08001fd4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == EXTI1_Pin)
	{

	}
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a15      	ldr	r2, [pc, #84]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d121      	bne.n	8002042 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		for(uint8_t i = 0; i < NBR_OF_MSGS; i++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	e00a      	b.n	800201a <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			Acc_CAN[i]++;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	4a13      	ldr	r2, [pc, #76]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002008:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800200c:	3201      	adds	r2, #1
 800200e:	4911      	ldr	r1, [pc, #68]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8_t i = 0; i < NBR_OF_MSGS; i++)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	3301      	adds	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d9f1      	bls.n	8002004 <HAL_TIM_PeriodElapsedCallback+0x18>
		}

		for(uint8_t i = 0; i < (NBR_OF_MSGS + NBR_OF_LOCAL_MSGS); i++)
 8002020:	2300      	movs	r3, #0
 8002022:	73bb      	strb	r3, [r7, #14]
 8002024:	e00a      	b.n	800203c <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			Acc_Msg[i]++;
 8002026:	7bbb      	ldrb	r3, [r7, #14]
 8002028:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800202a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800202e:	3201      	adds	r2, #1
 8002030:	4909      	ldr	r1, [pc, #36]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8_t i = 0; i < (NBR_OF_MSGS + NBR_OF_LOCAL_MSGS); i++)
 8002036:	7bbb      	ldrb	r3, [r7, #14]
 8002038:	3301      	adds	r3, #1
 800203a:	73bb      	strb	r3, [r7, #14]
 800203c:	7bbb      	ldrb	r3, [r7, #14]
 800203e:	2b05      	cmp	r3, #5
 8002040:	d9f1      	bls.n	8002026 <HAL_TIM_PeriodElapsedCallback+0x3a>
		}
	}
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40001000 	.word	0x40001000
 8002054:	200038f8 	.word	0x200038f8
 8002058:	20002800 	.word	0x20002800

0800205c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_MspInit+0x4c>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	4a0f      	ldr	r2, [pc, #60]	; (80020a8 <HAL_MspInit+0x4c>)
 800206c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002070:	6453      	str	r3, [r2, #68]	; 0x44
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_MspInit+0x4c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_MspInit+0x4c>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_MspInit+0x4c>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_MspInit+0x4c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800

080020ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08e      	sub	sp, #56	; 0x38
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a79      	ldr	r2, [pc, #484]	; (80022b0 <HAL_ADC_MspInit+0x204>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d158      	bne.n	8002180 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	4b78      	ldr	r3, [pc, #480]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a77      	ldr	r2, [pc, #476]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b75      	ldr	r3, [pc, #468]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	4b71      	ldr	r3, [pc, #452]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a70      	ldr	r2, [pc, #448]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b6e      	ldr	r3, [pc, #440]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002106:	233f      	movs	r3, #63	; 0x3f
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210a:	2303      	movs	r3, #3
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002116:	4619      	mov	r1, r3
 8002118:	4867      	ldr	r0, [pc, #412]	; (80022b8 <HAL_ADC_MspInit+0x20c>)
 800211a:	f002 f87d 	bl	8004218 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_ADC_MspInit+0x210>)
 8002120:	4a67      	ldr	r2, [pc, #412]	; (80022c0 <HAL_ADC_MspInit+0x214>)
 8002122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002124:	4b65      	ldr	r3, [pc, #404]	; (80022bc <HAL_ADC_MspInit+0x210>)
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800212a:	4b64      	ldr	r3, [pc, #400]	; (80022bc <HAL_ADC_MspInit+0x210>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002130:	4b62      	ldr	r3, [pc, #392]	; (80022bc <HAL_ADC_MspInit+0x210>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002136:	4b61      	ldr	r3, [pc, #388]	; (80022bc <HAL_ADC_MspInit+0x210>)
 8002138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800213c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800213e:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <HAL_ADC_MspInit+0x210>)
 8002140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002144:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002146:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <HAL_ADC_MspInit+0x210>)
 8002148:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800214c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800214e:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <HAL_ADC_MspInit+0x210>)
 8002150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002154:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002156:	4b59      	ldr	r3, [pc, #356]	; (80022bc <HAL_ADC_MspInit+0x210>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800215c:	4b57      	ldr	r3, [pc, #348]	; (80022bc <HAL_ADC_MspInit+0x210>)
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002162:	4856      	ldr	r0, [pc, #344]	; (80022bc <HAL_ADC_MspInit+0x210>)
 8002164:	f001 fcba 	bl	8003adc <HAL_DMA_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800216e:	f7ff fc1d 	bl	80019ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a51      	ldr	r2, [pc, #324]	; (80022bc <HAL_ADC_MspInit+0x210>)
 8002176:	639a      	str	r2, [r3, #56]	; 0x38
 8002178:	4a50      	ldr	r2, [pc, #320]	; (80022bc <HAL_ADC_MspInit+0x210>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800217e:	e092      	b.n	80022a6 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a4f      	ldr	r2, [pc, #316]	; (80022c4 <HAL_ADC_MspInit+0x218>)
 8002186:	4293      	cmp	r3, r2
 8002188:	f040 808d 	bne.w	80022a6 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	4b48      	ldr	r3, [pc, #288]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	4a47      	ldr	r2, [pc, #284]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 8002196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219a:	6453      	str	r3, [r2, #68]	; 0x44
 800219c:	4b45      	ldr	r3, [pc, #276]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4a40      	ldr	r2, [pc, #256]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
 80021b8:	4b3e      	ldr	r3, [pc, #248]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	4a39      	ldr	r2, [pc, #228]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6313      	str	r3, [r2, #48]	; 0x30
 80021d4:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	4b33      	ldr	r3, [pc, #204]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4a32      	ldr	r2, [pc, #200]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80021ea:	f043 0302 	orr.w	r3, r3, #2
 80021ee:	6313      	str	r3, [r2, #48]	; 0x30
 80021f0:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <HAL_ADC_MspInit+0x208>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021fc:	23c0      	movs	r3, #192	; 0xc0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002200:	2303      	movs	r3, #3
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220c:	4619      	mov	r1, r3
 800220e:	482a      	ldr	r0, [pc, #168]	; (80022b8 <HAL_ADC_MspInit+0x20c>)
 8002210:	f002 f802 	bl	8004218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002214:	2330      	movs	r3, #48	; 0x30
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002218:	2303      	movs	r3, #3
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	4619      	mov	r1, r3
 8002226:	4828      	ldr	r0, [pc, #160]	; (80022c8 <HAL_ADC_MspInit+0x21c>)
 8002228:	f001 fff6 	bl	8004218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800222c:	2303      	movs	r3, #3
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002230:	2303      	movs	r3, #3
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223c:	4619      	mov	r1, r3
 800223e:	4823      	ldr	r0, [pc, #140]	; (80022cc <HAL_ADC_MspInit+0x220>)
 8002240:	f001 ffea 	bl	8004218 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 8002246:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <HAL_ADC_MspInit+0x228>)
 8002248:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 800224c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002250:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002252:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 8002260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002264:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 8002268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800226c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 8002270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002274:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 8002278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800227c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800228a:	4811      	ldr	r0, [pc, #68]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 800228c:	f001 fc26 	bl	8003adc <HAL_DMA_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8002296:	f7ff fb89 	bl	80019ac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
 80022a0:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <HAL_ADC_MspInit+0x224>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022a6:	bf00      	nop
 80022a8:	3738      	adds	r7, #56	; 0x38
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40012000 	.word	0x40012000
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	20002650 	.word	0x20002650
 80022c0:	40026410 	.word	0x40026410
 80022c4:	40012100 	.word	0x40012100
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020400 	.word	0x40020400
 80022d0:	20003870 	.word	0x20003870
 80022d4:	40026440 	.word	0x40026440

080022d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1d      	ldr	r2, [pc, #116]	; (800236c <HAL_CAN_MspInit+0x94>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d134      	bne.n	8002364 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_CAN_MspInit+0x98>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <HAL_CAN_MspInit+0x98>)
 8002304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_CAN_MspInit+0x98>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_CAN_MspInit+0x98>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a14      	ldr	r2, [pc, #80]	; (8002370 <HAL_CAN_MspInit+0x98>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_CAN_MspInit+0x98>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002332:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002344:	2309      	movs	r3, #9
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	4809      	ldr	r0, [pc, #36]	; (8002374 <HAL_CAN_MspInit+0x9c>)
 8002350:	f001 ff62 	bl	8004218 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2102      	movs	r1, #2
 8002358:	2014      	movs	r0, #20
 800235a:	f001 fb88 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800235e:	2014      	movs	r0, #20
 8002360:	f001 fba1 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002364:	bf00      	nop
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40006400 	.word	0x40006400
 8002370:	40023800 	.word	0x40023800
 8002374:	40020400 	.word	0x40020400

08002378 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a19      	ldr	r2, [pc, #100]	; (80023fc <HAL_I2C_MspInit+0x84>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d12b      	bne.n	80023f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_I2C_MspInit+0x88>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <HAL_I2C_MspInit+0x88>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_I2C_MspInit+0x88>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023b6:	23c0      	movs	r3, #192	; 0xc0
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ba:	2312      	movs	r3, #18
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023c6:	2304      	movs	r3, #4
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	480c      	ldr	r0, [pc, #48]	; (8002404 <HAL_I2C_MspInit+0x8c>)
 80023d2:	f001 ff21 	bl	8004218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_I2C_MspInit+0x88>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a08      	ldr	r2, [pc, #32]	; (8002400 <HAL_I2C_MspInit+0x88>)
 80023e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_I2C_MspInit+0x88>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023f2:	bf00      	nop
 80023f4:	3728      	adds	r7, #40	; 0x28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40005400 	.word	0x40005400
 8002400:	40023800 	.word	0x40023800
 8002404:	40020400 	.word	0x40020400

08002408 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b09a      	sub	sp, #104	; 0x68
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	225c      	movs	r2, #92	; 0x5c
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f00d fd31 	bl	800fe80 <memset>
  if(hrtc->Instance==RTC)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a0c      	ldr	r2, [pc, #48]	; (8002454 <HAL_RTC_MspInit+0x4c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d111      	bne.n	800244c <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002428:	2320      	movs	r3, #32
 800242a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800242c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002430:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	4618      	mov	r0, r3
 8002438:	f003 fda4 	bl	8005f84 <HAL_RCCEx_PeriphCLKConfig>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002442:	f7ff fab3 	bl	80019ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <HAL_RTC_MspInit+0x50>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800244c:	bf00      	nop
 800244e:	3768      	adds	r7, #104	; 0x68
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40002800 	.word	0x40002800
 8002458:	42470e3c 	.word	0x42470e3c

0800245c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a68      	ldr	r2, [pc, #416]	; (800261c <HAL_SD_MspInit+0x1c0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	f040 80c9 	bne.w	8002612 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	4b66      	ldr	r3, [pc, #408]	; (8002620 <HAL_SD_MspInit+0x1c4>)
 8002486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002488:	4a65      	ldr	r2, [pc, #404]	; (8002620 <HAL_SD_MspInit+0x1c4>)
 800248a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800248e:	6453      	str	r3, [r2, #68]	; 0x44
 8002490:	4b63      	ldr	r3, [pc, #396]	; (8002620 <HAL_SD_MspInit+0x1c4>)
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	4b5f      	ldr	r3, [pc, #380]	; (8002620 <HAL_SD_MspInit+0x1c4>)
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	4a5e      	ldr	r2, [pc, #376]	; (8002620 <HAL_SD_MspInit+0x1c4>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6313      	str	r3, [r2, #48]	; 0x30
 80024ac:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <HAL_SD_MspInit+0x1c4>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	4b58      	ldr	r3, [pc, #352]	; (8002620 <HAL_SD_MspInit+0x1c4>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	4a57      	ldr	r2, [pc, #348]	; (8002620 <HAL_SD_MspInit+0x1c4>)
 80024c2:	f043 0308 	orr.w	r3, r3, #8
 80024c6:	6313      	str	r3, [r2, #48]	; 0x30
 80024c8:	4b55      	ldr	r3, [pc, #340]	; (8002620 <HAL_SD_MspInit+0x1c4>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80024d4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80024d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80024e6:	230c      	movs	r3, #12
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	484c      	ldr	r0, [pc, #304]	; (8002624 <HAL_SD_MspInit+0x1c8>)
 80024f2:	f001 fe91 	bl	8004218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024f6:	2304      	movs	r3, #4
 80024f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002506:	230c      	movs	r3, #12
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	4845      	ldr	r0, [pc, #276]	; (8002628 <HAL_SD_MspInit+0x1cc>)
 8002512:	f001 fe81 	bl	8004218 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002516:	4b45      	ldr	r3, [pc, #276]	; (800262c <HAL_SD_MspInit+0x1d0>)
 8002518:	4a45      	ldr	r2, [pc, #276]	; (8002630 <HAL_SD_MspInit+0x1d4>)
 800251a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800251c:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_SD_MspInit+0x1d0>)
 800251e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002522:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002524:	4b41      	ldr	r3, [pc, #260]	; (800262c <HAL_SD_MspInit+0x1d0>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800252a:	4b40      	ldr	r3, [pc, #256]	; (800262c <HAL_SD_MspInit+0x1d0>)
 800252c:	2200      	movs	r2, #0
 800252e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002530:	4b3e      	ldr	r3, [pc, #248]	; (800262c <HAL_SD_MspInit+0x1d0>)
 8002532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002536:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002538:	4b3c      	ldr	r3, [pc, #240]	; (800262c <HAL_SD_MspInit+0x1d0>)
 800253a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800253e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002540:	4b3a      	ldr	r3, [pc, #232]	; (800262c <HAL_SD_MspInit+0x1d0>)
 8002542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002546:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002548:	4b38      	ldr	r3, [pc, #224]	; (800262c <HAL_SD_MspInit+0x1d0>)
 800254a:	2220      	movs	r2, #32
 800254c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800254e:	4b37      	ldr	r3, [pc, #220]	; (800262c <HAL_SD_MspInit+0x1d0>)
 8002550:	2200      	movs	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002554:	4b35      	ldr	r3, [pc, #212]	; (800262c <HAL_SD_MspInit+0x1d0>)
 8002556:	2204      	movs	r2, #4
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800255a:	4b34      	ldr	r3, [pc, #208]	; (800262c <HAL_SD_MspInit+0x1d0>)
 800255c:	2203      	movs	r2, #3
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002560:	4b32      	ldr	r3, [pc, #200]	; (800262c <HAL_SD_MspInit+0x1d0>)
 8002562:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_SD_MspInit+0x1d0>)
 800256a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002570:	482e      	ldr	r0, [pc, #184]	; (800262c <HAL_SD_MspInit+0x1d0>)
 8002572:	f001 fab3 	bl	8003adc <HAL_DMA_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800257c:	f7ff fa16 	bl	80019ac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a2a      	ldr	r2, [pc, #168]	; (800262c <HAL_SD_MspInit+0x1d0>)
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
 8002586:	4a29      	ldr	r2, [pc, #164]	; (800262c <HAL_SD_MspInit+0x1d0>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800258c:	4b29      	ldr	r3, [pc, #164]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 800258e:	4a2a      	ldr	r2, [pc, #168]	; (8002638 <HAL_SD_MspInit+0x1dc>)
 8002590:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002592:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 8002594:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002598:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 800259c:	2240      	movs	r2, #64	; 0x40
 800259e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a0:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ac:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025ae:	4b21      	ldr	r3, [pc, #132]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025b6:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025bc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80025be:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025c0:	2220      	movs	r2, #32
 80025c2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025cc:	2204      	movs	r2, #4
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025d2:	2203      	movs	r2, #3
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80025e6:	4813      	ldr	r0, [pc, #76]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025e8:	f001 fa78 	bl	8003adc <HAL_DMA_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80025f2:	f7ff f9db 	bl	80019ac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80025fc:	4a0d      	ldr	r2, [pc, #52]	; (8002634 <HAL_SD_MspInit+0x1d8>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 1, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2101      	movs	r1, #1
 8002606:	2031      	movs	r0, #49	; 0x31
 8002608:	f001 fa31 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800260c:	2031      	movs	r0, #49	; 0x31
 800260e:	f001 fa4a 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002612:	bf00      	nop
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40012c00 	.word	0x40012c00
 8002620:	40023800 	.word	0x40023800
 8002624:	40020800 	.word	0x40020800
 8002628:	40020c00 	.word	0x40020c00
 800262c:	20000420 	.word	0x20000420
 8002630:	40026458 	.word	0x40026458
 8002634:	200026d0 	.word	0x200026d0
 8002638:	400264a0 	.word	0x400264a0

0800263c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HAL_TIM_Base_MspInit+0x48>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d115      	bne.n	800267a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <HAL_TIM_Base_MspInit+0x4c>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a0c      	ldr	r2, [pc, #48]	; (8002688 <HAL_TIM_Base_MspInit+0x4c>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_TIM_Base_MspInit+0x4c>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2036      	movs	r0, #54	; 0x36
 8002670:	f001 f9fd 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002674:	2036      	movs	r0, #54	; 0x36
 8002676:	f001 fa16 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40001000 	.word	0x40001000
 8002688:	40023800 	.word	0x40023800

0800268c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <NMI_Handler+0x4>

08002692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002696:	e7fe      	b.n	8002696 <HardFault_Handler+0x4>

08002698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800269c:	e7fe      	b.n	800269c <MemManage_Handler+0x4>

0800269e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a2:	e7fe      	b.n	80026a2 <BusFault_Handler+0x4>

080026a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <UsageFault_Handler+0x4>

080026aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d8:	f000 f8ec 	bl	80028b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}

080026e0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <CAN1_RX0_IRQHandler+0x10>)
 80026e6:	f000 feb8 	bl	800345a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200038d0 	.word	0x200038d0

080026f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 80026f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026fc:	f001 ff52 	bl	80045a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 8002700:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002704:	f001 ff4e 	bl	80045a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <SDIO_IRQHandler+0x10>)
 8002712:	f005 f889 	bl	8007828 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	2000277c 	.word	0x2000277c

08002720 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <TIM6_DAC_IRQHandler+0x10>)
 8002726:	f006 f977 	bl	8008a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20002730 	.word	0x20002730

08002734 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002738:	4802      	ldr	r0, [pc, #8]	; (8002744 <DMA2_Stream0_IRQHandler+0x10>)
 800273a:	f001 faf7 	bl	8003d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20002650 	.word	0x20002650

08002748 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <DMA2_Stream2_IRQHandler+0x10>)
 800274e:	f001 faed 	bl	8003d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20003870 	.word	0x20003870

0800275c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <DMA2_Stream3_IRQHandler+0x10>)
 8002762:	f001 fae3 	bl	8003d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000420 	.word	0x20000420

08002770 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <OTG_FS_IRQHandler+0x10>)
 8002776:	f002 fa0a 	bl	8004b8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20005ed0 	.word	0x20005ed0

08002784 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <DMA2_Stream6_IRQHandler+0x10>)
 800278a:	f001 facf 	bl	8003d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200026d0 	.word	0x200026d0

08002798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <SystemInit+0x20>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <SystemInit+0x20>)
 80027a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027c0:	480d      	ldr	r0, [pc, #52]	; (80027f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027c2:	490e      	ldr	r1, [pc, #56]	; (80027fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027c4:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c8:	e002      	b.n	80027d0 <LoopCopyDataInit>

080027ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ce:	3304      	adds	r3, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d4:	d3f9      	bcc.n	80027ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d6:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027d8:	4c0b      	ldr	r4, [pc, #44]	; (8002808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027dc:	e001      	b.n	80027e2 <LoopFillZerobss>

080027de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e0:	3204      	adds	r2, #4

080027e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e4:	d3fb      	bcc.n	80027de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027e6:	f7ff ffd7 	bl	8002798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ea:	f00d fb17 	bl	800fe1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ee:	f7fe fc8b 	bl	8001108 <main>
  bx  lr    
 80027f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027fc:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8002800:	0800ff54 	.word	0x0800ff54
  ldr r2, =_sbss
 8002804:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8002808:	200062d8 	.word	0x200062d8

0800280c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800280c:	e7fe      	b.n	800280c <ADC_IRQHandler>
	...

08002810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_Init+0x40>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <HAL_Init+0x40>)
 800281a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800281e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_Init+0x40>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_Init+0x40>)
 8002826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800282a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_Init+0x40>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a07      	ldr	r2, [pc, #28]	; (8002850 <HAL_Init+0x40>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002838:	2003      	movs	r0, #3
 800283a:	f001 f90d 	bl	8003a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800283e:	200f      	movs	r0, #15
 8002840:	f000 f808 	bl	8002854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002844:	f7ff fc0a 	bl	800205c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023c00 	.word	0x40023c00

08002854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_InitTick+0x54>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_InitTick+0x58>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286a:	fbb3 f3f1 	udiv	r3, r3, r1
 800286e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002872:	4618      	mov	r0, r3
 8002874:	f001 f925 	bl	8003ac2 <HAL_SYSTICK_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e00e      	b.n	80028a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b0f      	cmp	r3, #15
 8002886:	d80a      	bhi.n	800289e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002888:	2200      	movs	r2, #0
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f001 f8ed 	bl	8003a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002894:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <HAL_InitTick+0x5c>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000000 	.word	0x20000000
 80028ac:	20000008 	.word	0x20000008
 80028b0:	20000004 	.word	0x20000004

080028b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_IncTick+0x20>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_IncTick+0x24>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <HAL_IncTick+0x24>)
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000008 	.word	0x20000008
 80028d8:	20003990 	.word	0x20003990

080028dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return uwTick;
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <HAL_GetTick+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20003990 	.word	0x20003990

080028f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff ffee 	bl	80028dc <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d005      	beq.n	800291a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <HAL_Delay+0x44>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800291a:	bf00      	nop
 800291c:	f7ff ffde 	bl	80028dc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	429a      	cmp	r2, r3
 800292a:	d8f7      	bhi.n	800291c <HAL_Delay+0x28>
  {
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000008 	.word	0x20000008

0800293c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e033      	b.n	80029ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fba6 	bl	80020ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d118      	bne.n	80029ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002982:	f023 0302 	bic.w	r3, r3, #2
 8002986:	f043 0202 	orr.w	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f94a 	bl	8002c28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f023 0303 	bic.w	r3, r3, #3
 80029a2:	f043 0201 	orr.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
 80029aa:	e001      	b.n	80029b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1c>
 80029dc:	2302      	movs	r3, #2
 80029de:	e113      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x244>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	d925      	bls.n	8002a3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68d9      	ldr	r1, [r3, #12]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	3b1e      	subs	r3, #30
 8002a06:	2207      	movs	r2, #7
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	400a      	ands	r2, r1
 8002a14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68d9      	ldr	r1, [r3, #12]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	4603      	mov	r3, r0
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4403      	add	r3, r0
 8002a2e:	3b1e      	subs	r3, #30
 8002a30:	409a      	lsls	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	e022      	b.n	8002a82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6919      	ldr	r1, [r3, #16]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	2207      	movs	r2, #7
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6919      	ldr	r1, [r3, #16]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4403      	add	r3, r0
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d824      	bhi.n	8002ad4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	3b05      	subs	r3, #5
 8002a9c:	221f      	movs	r2, #31
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	4618      	mov	r0, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b05      	subs	r3, #5
 8002ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ad2:	e04c      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d824      	bhi.n	8002b26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	3b23      	subs	r3, #35	; 0x23
 8002aee:	221f      	movs	r2, #31
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43da      	mvns	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	400a      	ands	r2, r1
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	3b23      	subs	r3, #35	; 0x23
 8002b18:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
 8002b24:	e023      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	3b41      	subs	r3, #65	; 0x41
 8002b38:	221f      	movs	r2, #31
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	400a      	ands	r2, r1
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	3b41      	subs	r3, #65	; 0x41
 8002b62:	fa00 f203 	lsl.w	r2, r0, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b6e:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <HAL_ADC_ConfigChannel+0x250>)
 8002b70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <HAL_ADC_ConfigChannel+0x254>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10f      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x1d8>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b12      	cmp	r3, #18
 8002b82:	d10b      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_ADC_ConfigChannel+0x254>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d12b      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x23a>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <HAL_ADC_ConfigChannel+0x258>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d003      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x1f4>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b11      	cmp	r3, #17
 8002bb6:	d122      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <HAL_ADC_ConfigChannel+0x258>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d111      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <HAL_ADC_ConfigChannel+0x25c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a11      	ldr	r2, [pc, #68]	; (8002c24 <HAL_ADC_ConfigChannel+0x260>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	0c9a      	lsrs	r2, r3, #18
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bf0:	e002      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f9      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40012300 	.word	0x40012300
 8002c18:	40012000 	.word	0x40012000
 8002c1c:	10000012 	.word	0x10000012
 8002c20:	20000000 	.word	0x20000000
 8002c24:	431bde83 	.word	0x431bde83

08002c28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c30:	4b79      	ldr	r3, [pc, #484]	; (8002e18 <ADC_Init+0x1f0>)
 8002c32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	021a      	lsls	r2, r3, #8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6899      	ldr	r1, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	4a58      	ldr	r2, [pc, #352]	; (8002e1c <ADC_Init+0x1f4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d022      	beq.n	8002d06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6899      	ldr	r1, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	e00f      	b.n	8002d26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0202 	bic.w	r2, r2, #2
 8002d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6899      	ldr	r1, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7e1b      	ldrb	r3, [r3, #24]
 8002d40:	005a      	lsls	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01b      	beq.n	8002d8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	035a      	lsls	r2, r3, #13
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	e007      	b.n	8002d9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	051a      	lsls	r2, r3, #20
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6899      	ldr	r1, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dde:	025a      	lsls	r2, r3, #9
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	029a      	lsls	r2, r3, #10
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40012300 	.word	0x40012300
 8002e1c:	0f000001 	.word	0x0f000001

08002e20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e0ed      	b.n	800300e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff fa4a 	bl	80022d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e54:	f7ff fd42 	bl	80028dc <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e5a:	e012      	b.n	8002e82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e5c:	f7ff fd3e 	bl	80028dc <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b0a      	cmp	r3, #10
 8002e68:	d90b      	bls.n	8002e82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2205      	movs	r2, #5
 8002e7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0c5      	b.n	800300e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0e5      	beq.n	8002e5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0202 	bic.w	r2, r2, #2
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ea0:	f7ff fd1c 	bl	80028dc <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ea6:	e012      	b.n	8002ece <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ea8:	f7ff fd18 	bl	80028dc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b0a      	cmp	r3, #10
 8002eb4:	d90b      	bls.n	8002ece <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2205      	movs	r2, #5
 8002ec6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e09f      	b.n	800300e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e5      	bne.n	8002ea8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	7e1b      	ldrb	r3, [r3, #24]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d108      	bne.n	8002ef6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e007      	b.n	8002f06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7e5b      	ldrb	r3, [r3, #25]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d108      	bne.n	8002f20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e007      	b.n	8002f30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7e9b      	ldrb	r3, [r3, #26]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d108      	bne.n	8002f4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0220 	orr.w	r2, r2, #32
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e007      	b.n	8002f5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0220 	bic.w	r2, r2, #32
 8002f58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7edb      	ldrb	r3, [r3, #27]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d108      	bne.n	8002f74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0210 	bic.w	r2, r2, #16
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e007      	b.n	8002f84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0210 	orr.w	r2, r2, #16
 8002f82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	7f1b      	ldrb	r3, [r3, #28]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d108      	bne.n	8002f9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0208 	orr.w	r2, r2, #8
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e007      	b.n	8002fae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0208 	bic.w	r2, r2, #8
 8002fac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7f5b      	ldrb	r3, [r3, #29]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d108      	bne.n	8002fc8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0204 	orr.w	r2, r2, #4
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	e007      	b.n	8002fd8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0204 	bic.w	r2, r2, #4
 8002fd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	ea42 0103 	orr.w	r1, r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	1e5a      	subs	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003016:	b480      	push	{r7}
 8003018:	b089      	sub	sp, #36	; 0x24
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800302a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003034:	7ffb      	ldrb	r3, [r7, #31]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d003      	beq.n	8003042 <HAL_CAN_AddTxMessage+0x2c>
 800303a:	7ffb      	ldrb	r3, [r7, #31]
 800303c:	2b02      	cmp	r3, #2
 800303e:	f040 80b8 	bne.w	80031b2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003052:	2b00      	cmp	r3, #0
 8003054:	d105      	bne.n	8003062 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a0 	beq.w	80031a2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	0e1b      	lsrs	r3, r3, #24
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d907      	bls.n	8003082 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e09e      	b.n	80031c0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003082:	2201      	movs	r2, #1
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	409a      	lsls	r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10d      	bne.n	80030b0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800309e:	68f9      	ldr	r1, [r7, #12]
 80030a0:	6809      	ldr	r1, [r1, #0]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	3318      	adds	r3, #24
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	440b      	add	r3, r1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e00f      	b.n	80030d0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030c0:	68f9      	ldr	r1, [r7, #12]
 80030c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80030c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3318      	adds	r3, #24
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	440b      	add	r3, r1
 80030ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6819      	ldr	r1, [r3, #0]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	3318      	adds	r3, #24
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	440b      	add	r3, r1
 80030e0:	3304      	adds	r3, #4
 80030e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	7d1b      	ldrb	r3, [r3, #20]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d111      	bne.n	8003110 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3318      	adds	r3, #24
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	4413      	add	r3, r2
 80030f8:	3304      	adds	r3, #4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	6811      	ldr	r1, [r2, #0]
 8003100:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3318      	adds	r3, #24
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	440b      	add	r3, r1
 800310c:	3304      	adds	r3, #4
 800310e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3307      	adds	r3, #7
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	061a      	lsls	r2, r3, #24
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3306      	adds	r3, #6
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3305      	adds	r3, #5
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	4313      	orrs	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	3204      	adds	r2, #4
 8003130:	7812      	ldrb	r2, [r2, #0]
 8003132:	4610      	mov	r0, r2
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	6811      	ldr	r1, [r2, #0]
 8003138:	ea43 0200 	orr.w	r2, r3, r0
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	440b      	add	r3, r1
 8003142:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003146:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3303      	adds	r3, #3
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	061a      	lsls	r2, r3, #24
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3302      	adds	r3, #2
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3301      	adds	r3, #1
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	4313      	orrs	r3, r2
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	7812      	ldrb	r2, [r2, #0]
 8003168:	4610      	mov	r0, r2
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	6811      	ldr	r1, [r2, #0]
 800316e:	ea43 0200 	orr.w	r2, r3, r0
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	440b      	add	r3, r1
 8003178:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800317c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3318      	adds	r3, #24
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	4413      	add	r3, r2
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	6811      	ldr	r1, [r2, #0]
 8003190:	f043 0201 	orr.w	r2, r3, #1
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3318      	adds	r3, #24
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	440b      	add	r3, r1
 800319c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e00e      	b.n	80031c0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e006      	b.n	80031c0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
  }
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3724      	adds	r7, #36	; 0x24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031de:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80031e0:	7afb      	ldrb	r3, [r7, #11]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d002      	beq.n	80031ec <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80031e6:	7afb      	ldrb	r3, [r7, #11]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d11d      	bne.n	8003228 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3301      	adds	r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3301      	adds	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3301      	adds	r3, #1
 8003226:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003228:	68fb      	ldr	r3, [r7, #12]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003236:	b480      	push	{r7}
 8003238:	b087      	sub	sp, #28
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800324a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d003      	beq.n	800325a <HAL_CAN_GetRxMessage+0x24>
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b02      	cmp	r3, #2
 8003256:	f040 80f3 	bne.w	8003440 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10e      	bne.n	800327e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0e7      	b.n	800344e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d107      	bne.n	800329c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0d8      	b.n	800344e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	331b      	adds	r3, #27
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	4413      	add	r3, r2
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0204 	and.w	r2, r3, #4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10c      	bne.n	80032d4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	331b      	adds	r3, #27
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	4413      	add	r3, r2
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0d5b      	lsrs	r3, r3, #21
 80032ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e00b      	b.n	80032ec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	331b      	adds	r3, #27
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	4413      	add	r3, r2
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	08db      	lsrs	r3, r3, #3
 80032e4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	331b      	adds	r3, #27
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	4413      	add	r3, r2
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0202 	and.w	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	331b      	adds	r3, #27
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	4413      	add	r3, r2
 800330e:	3304      	adds	r3, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	331b      	adds	r3, #27
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	4413      	add	r3, r2
 8003326:	3304      	adds	r3, #4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	b2da      	uxtb	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	331b      	adds	r3, #27
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	4413      	add	r3, r2
 800333e:	3304      	adds	r3, #4
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	b29a      	uxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	4413      	add	r3, r2
 8003354:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	4413      	add	r3, r2
 800336a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0a1a      	lsrs	r2, r3, #8
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	4413      	add	r3, r2
 8003384:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0c1a      	lsrs	r2, r3, #16
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	3302      	adds	r3, #2
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	4413      	add	r3, r2
 800339e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	0e1a      	lsrs	r2, r3, #24
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	3303      	adds	r3, #3
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	3304      	adds	r3, #4
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0a1a      	lsrs	r2, r3, #8
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	3305      	adds	r3, #5
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0c1a      	lsrs	r2, r3, #16
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	3306      	adds	r3, #6
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	4413      	add	r3, r2
 8003404:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	0e1a      	lsrs	r2, r3, #24
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	3307      	adds	r3, #7
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d108      	bne.n	800342c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0220 	orr.w	r2, r2, #32
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e007      	b.n	800343c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0220 	orr.w	r2, r2, #32
 800343a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e006      	b.n	800344e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b08a      	sub	sp, #40	; 0x28
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d07c      	beq.n	800359a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d023      	beq.n	80034f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2201      	movs	r2, #1
 80034b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f983 	bl	80037c8 <HAL_CAN_TxMailbox0CompleteCallback>
 80034c2:	e016      	b.n	80034f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d004      	beq.n	80034d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	e00c      	b.n	80034f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d004      	beq.n	80034ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	e002      	b.n	80034f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f989 	bl	8003804 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d024      	beq.n	8003546 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003504:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f963 	bl	80037dc <HAL_CAN_TxMailbox1CompleteCallback>
 8003516:	e016      	b.n	8003546 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351e:	2b00      	cmp	r3, #0
 8003520:	d004      	beq.n	800352c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
 800352a:	e00c      	b.n	8003546 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003532:	2b00      	cmp	r3, #0
 8003534:	d004      	beq.n	8003540 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
 800353e:	e002      	b.n	8003546 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f969 	bl	8003818 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d024      	beq.n	800359a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003558:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f943 	bl	80037f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800356a:	e016      	b.n	800359a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d004      	beq.n	8003580 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	e00c      	b.n	800359a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
 8003592:	e002      	b.n	800359a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f949 	bl	800382c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00c      	beq.n	80035be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2210      	movs	r2, #16
 80035bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00b      	beq.n	80035e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2208      	movs	r2, #8
 80035d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f930 	bl	8003840 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fe fca7 	bl	8001f4c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00c      	beq.n	8003622 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003618:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2210      	movs	r2, #16
 8003620:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00b      	beq.n	8003644 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d006      	beq.n	8003644 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2208      	movs	r2, #8
 800363c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f912 	bl	8003868 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f8f9 	bl	8003854 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2210      	movs	r2, #16
 800367c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8fc 	bl	800387c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d006      	beq.n	80036a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2208      	movs	r2, #8
 800369e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f8f5 	bl	8003890 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d07b      	beq.n	80037a8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d072      	beq.n	80037a0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	f043 0302 	orr.w	r3, r3, #2
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003714:	2b00      	cmp	r3, #0
 8003716:	d043      	beq.n	80037a0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800371e:	2b00      	cmp	r3, #0
 8003720:	d03e      	beq.n	80037a0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003728:	2b60      	cmp	r3, #96	; 0x60
 800372a:	d02b      	beq.n	8003784 <HAL_CAN_IRQHandler+0x32a>
 800372c:	2b60      	cmp	r3, #96	; 0x60
 800372e:	d82e      	bhi.n	800378e <HAL_CAN_IRQHandler+0x334>
 8003730:	2b50      	cmp	r3, #80	; 0x50
 8003732:	d022      	beq.n	800377a <HAL_CAN_IRQHandler+0x320>
 8003734:	2b50      	cmp	r3, #80	; 0x50
 8003736:	d82a      	bhi.n	800378e <HAL_CAN_IRQHandler+0x334>
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d019      	beq.n	8003770 <HAL_CAN_IRQHandler+0x316>
 800373c:	2b40      	cmp	r3, #64	; 0x40
 800373e:	d826      	bhi.n	800378e <HAL_CAN_IRQHandler+0x334>
 8003740:	2b30      	cmp	r3, #48	; 0x30
 8003742:	d010      	beq.n	8003766 <HAL_CAN_IRQHandler+0x30c>
 8003744:	2b30      	cmp	r3, #48	; 0x30
 8003746:	d822      	bhi.n	800378e <HAL_CAN_IRQHandler+0x334>
 8003748:	2b10      	cmp	r3, #16
 800374a:	d002      	beq.n	8003752 <HAL_CAN_IRQHandler+0x2f8>
 800374c:	2b20      	cmp	r3, #32
 800374e:	d005      	beq.n	800375c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003750:	e01d      	b.n	800378e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	f043 0308 	orr.w	r3, r3, #8
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800375a:	e019      	b.n	8003790 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	f043 0310 	orr.w	r3, r3, #16
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003764:	e014      	b.n	8003790 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	f043 0320 	orr.w	r3, r3, #32
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800376e:	e00f      	b.n	8003790 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003778:	e00a      	b.n	8003790 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003782:	e005      	b.n	8003790 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800378c:	e000      	b.n	8003790 <HAL_CAN_IRQHandler+0x336>
            break;
 800378e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800379e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2204      	movs	r2, #4
 80037a6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f872 	bl	80038a4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80037c0:	bf00      	nop
 80037c2:	3728      	adds	r7, #40	; 0x28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <__NVIC_SetPriorityGrouping+0x44>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038d4:	4013      	ands	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ea:	4a04      	ldr	r2, [pc, #16]	; (80038fc <__NVIC_SetPriorityGrouping+0x44>)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	60d3      	str	r3, [r2, #12]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <__NVIC_GetPriorityGrouping+0x18>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	0a1b      	lsrs	r3, r3, #8
 800390a:	f003 0307 	and.w	r3, r3, #7
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	2b00      	cmp	r3, #0
 800392c:	db0b      	blt.n	8003946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	f003 021f 	and.w	r2, r3, #31
 8003934:	4907      	ldr	r1, [pc, #28]	; (8003954 <__NVIC_EnableIRQ+0x38>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	2001      	movs	r0, #1
 800393e:	fa00 f202 	lsl.w	r2, r0, r2
 8003942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	e000e100 	.word	0xe000e100

08003958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003968:	2b00      	cmp	r3, #0
 800396a:	db0a      	blt.n	8003982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	490c      	ldr	r1, [pc, #48]	; (80039a4 <__NVIC_SetPriority+0x4c>)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	0112      	lsls	r2, r2, #4
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	440b      	add	r3, r1
 800397c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003980:	e00a      	b.n	8003998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4908      	ldr	r1, [pc, #32]	; (80039a8 <__NVIC_SetPriority+0x50>)
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3b04      	subs	r3, #4
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	440b      	add	r3, r1
 8003996:	761a      	strb	r2, [r3, #24]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000e100 	.word	0xe000e100
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b089      	sub	sp, #36	; 0x24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f1c3 0307 	rsb	r3, r3, #7
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	bf28      	it	cs
 80039ca:	2304      	movcs	r3, #4
 80039cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d902      	bls.n	80039dc <NVIC_EncodePriority+0x30>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3b03      	subs	r3, #3
 80039da:	e000      	b.n	80039de <NVIC_EncodePriority+0x32>
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	401a      	ands	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	43d9      	mvns	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	4313      	orrs	r3, r2
         );
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3724      	adds	r7, #36	; 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a24:	d301      	bcc.n	8003a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00f      	b.n	8003a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <SysTick_Config+0x40>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a32:	210f      	movs	r1, #15
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	f7ff ff8e 	bl	8003958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <SysTick_Config+0x40>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a42:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <SysTick_Config+0x40>)
 8003a44:	2207      	movs	r2, #7
 8003a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000e010 	.word	0xe000e010

08003a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff29 	bl	80038b8 <__NVIC_SetPriorityGrouping>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	4603      	mov	r3, r0
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a80:	f7ff ff3e 	bl	8003900 <__NVIC_GetPriorityGrouping>
 8003a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	f7ff ff8e 	bl	80039ac <NVIC_EncodePriority>
 8003a90:	4602      	mov	r2, r0
 8003a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff5d 	bl	8003958 <__NVIC_SetPriority>
}
 8003a9e:	bf00      	nop
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4603      	mov	r3, r0
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff31 	bl	800391c <__NVIC_EnableIRQ>
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ffa2 	bl	8003a14 <SysTick_Config>
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ae8:	f7fe fef8 	bl	80028dc <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e099      	b.n	8003c2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b18:	e00f      	b.n	8003b3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b1a:	f7fe fedf 	bl	80028dc <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d908      	bls.n	8003b3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2203      	movs	r2, #3
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e078      	b.n	8003c2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e8      	bne.n	8003b1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4b38      	ldr	r3, [pc, #224]	; (8003c34 <HAL_DMA_Init+0x158>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d107      	bne.n	8003ba4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0307 	bic.w	r3, r3, #7
 8003bba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d117      	bne.n	8003bfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00e      	beq.n	8003bfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fa9d 	bl	8004120 <DMA_CheckFifoParam>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2240      	movs	r2, #64	; 0x40
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e016      	b.n	8003c2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fa54 	bl	80040b4 <DMA_CalcBaseAndBitshift>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	223f      	movs	r2, #63	; 0x3f
 8003c16:	409a      	lsls	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	f010803f 	.word	0xf010803f

08003c38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_DMA_Start_IT+0x26>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e040      	b.n	8003ce0 <HAL_DMA_Start_IT+0xa8>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d12f      	bne.n	8003cd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f9e6 	bl	8004058 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	223f      	movs	r2, #63	; 0x3f
 8003c92:	409a      	lsls	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0216 	orr.w	r2, r2, #22
 8003ca6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0208 	orr.w	r2, r2, #8
 8003cbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e005      	b.n	8003cde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d004      	beq.n	8003d06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2280      	movs	r2, #128	; 0x80
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e00c      	b.n	8003d20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2205      	movs	r2, #5
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d38:	4b92      	ldr	r3, [pc, #584]	; (8003f84 <HAL_DMA_IRQHandler+0x258>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a92      	ldr	r2, [pc, #584]	; (8003f88 <HAL_DMA_IRQHandler+0x25c>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	0a9b      	lsrs	r3, r3, #10
 8003d44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d56:	2208      	movs	r2, #8
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01a      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d013      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0204 	bic.w	r2, r2, #4
 8003d7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d84:	2208      	movs	r2, #8
 8003d86:	409a      	lsls	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f043 0201 	orr.w	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d012      	beq.n	8003dce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00b      	beq.n	8003dce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	2201      	movs	r2, #1
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	f043 0202 	orr.w	r2, r3, #2
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d012      	beq.n	8003e04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df0:	2204      	movs	r2, #4
 8003df2:	409a      	lsls	r2, r3
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfc:	f043 0204 	orr.w	r2, r3, #4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	2210      	movs	r2, #16
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d043      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d03c      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	2210      	movs	r2, #16
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d018      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d108      	bne.n	8003e5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d024      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
 8003e5a:	e01f      	b.n	8003e9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01b      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	4798      	blx	r3
 8003e6c:	e016      	b.n	8003e9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0208 	bic.w	r2, r2, #8
 8003e8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 808e 	beq.w	8003fca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8086 	beq.w	8003fca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b05      	cmp	r3, #5
 8003ed4:	d136      	bne.n	8003f44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0216 	bic.w	r2, r2, #22
 8003ee4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <HAL_DMA_IRQHandler+0x1da>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0208 	bic.w	r2, r2, #8
 8003f14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1a:	223f      	movs	r2, #63	; 0x3f
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d07d      	beq.n	8004036 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	4798      	blx	r3
        }
        return;
 8003f42:	e078      	b.n	8004036 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d01c      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d108      	bne.n	8003f72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d030      	beq.n	8003fca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
 8003f70:	e02b      	b.n	8003fca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d027      	beq.n	8003fca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
 8003f82:	e022      	b.n	8003fca <HAL_DMA_IRQHandler+0x29e>
 8003f84:	20000000 	.word	0x20000000
 8003f88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10f      	bne.n	8003fba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0210 	bic.w	r2, r2, #16
 8003fa8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d032      	beq.n	8004038 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d022      	beq.n	8004024 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2205      	movs	r2, #5
 8003fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d307      	bcc.n	8004012 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f2      	bne.n	8003ff6 <HAL_DMA_IRQHandler+0x2ca>
 8004010:	e000      	b.n	8004014 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004012:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4798      	blx	r3
 8004034:	e000      	b.n	8004038 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004036:	bf00      	nop
    }
  }
}
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop

08004040 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004074:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d108      	bne.n	8004098 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004096:	e007      	b.n	80040a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	60da      	str	r2, [r3, #12]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	3b10      	subs	r3, #16
 80040c4:	4a14      	ldr	r2, [pc, #80]	; (8004118 <DMA_CalcBaseAndBitshift+0x64>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040ce:	4a13      	ldr	r2, [pc, #76]	; (800411c <DMA_CalcBaseAndBitshift+0x68>)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d909      	bls.n	80040f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	1d1a      	adds	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	659a      	str	r2, [r3, #88]	; 0x58
 80040f4:	e007      	b.n	8004106 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	aaaaaaab 	.word	0xaaaaaaab
 800411c:	0800ff04 	.word	0x0800ff04

08004120 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11f      	bne.n	800417a <DMA_CheckFifoParam+0x5a>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d856      	bhi.n	80041ee <DMA_CheckFifoParam+0xce>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <DMA_CheckFifoParam+0x28>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	08004159 	.word	0x08004159
 800414c:	0800416b 	.word	0x0800416b
 8004150:	08004159 	.word	0x08004159
 8004154:	080041ef 	.word	0x080041ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d046      	beq.n	80041f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004168:	e043      	b.n	80041f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004172:	d140      	bne.n	80041f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004178:	e03d      	b.n	80041f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004182:	d121      	bne.n	80041c8 <DMA_CheckFifoParam+0xa8>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d837      	bhi.n	80041fa <DMA_CheckFifoParam+0xda>
 800418a:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <DMA_CheckFifoParam+0x70>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041a7 	.word	0x080041a7
 8004198:	080041a1 	.word	0x080041a1
 800419c:	080041b9 	.word	0x080041b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
      break;
 80041a4:	e030      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d025      	beq.n	80041fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b6:	e022      	b.n	80041fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041c0:	d11f      	bne.n	8004202 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041c6:	e01c      	b.n	8004202 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d903      	bls.n	80041d6 <DMA_CheckFifoParam+0xb6>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d003      	beq.n	80041dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041d4:	e018      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
      break;
 80041da:	e015      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00e      	beq.n	8004206 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      break;
 80041ec:	e00b      	b.n	8004206 <DMA_CheckFifoParam+0xe6>
      break;
 80041ee:	bf00      	nop
 80041f0:	e00a      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 80041f2:	bf00      	nop
 80041f4:	e008      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 80041f6:	bf00      	nop
 80041f8:	e006      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 80041fa:	bf00      	nop
 80041fc:	e004      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 80041fe:	bf00      	nop
 8004200:	e002      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;   
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 8004206:	bf00      	nop
    }
  } 
  
  return status; 
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop

08004218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004218:	b480      	push	{r7}
 800421a:	b089      	sub	sp, #36	; 0x24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800422a:	2300      	movs	r3, #0
 800422c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	e165      	b.n	8004500 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004234:	2201      	movs	r2, #1
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4013      	ands	r3, r2
 8004246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	429a      	cmp	r2, r3
 800424e:	f040 8154 	bne.w	80044fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d005      	beq.n	800426a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004266:	2b02      	cmp	r3, #2
 8004268:	d130      	bne.n	80042cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	2203      	movs	r2, #3
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4013      	ands	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042a0:	2201      	movs	r2, #1
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	f003 0201 	and.w	r2, r3, #1
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d017      	beq.n	8004308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	2203      	movs	r2, #3
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d123      	bne.n	800435c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	08da      	lsrs	r2, r3, #3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3208      	adds	r2, #8
 800431c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	220f      	movs	r2, #15
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	08da      	lsrs	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3208      	adds	r2, #8
 8004356:	69b9      	ldr	r1, [r7, #24]
 8004358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	2203      	movs	r2, #3
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 0203 	and.w	r2, r3, #3
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80ae 	beq.w	80044fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	4b5d      	ldr	r3, [pc, #372]	; (8004518 <HAL_GPIO_Init+0x300>)
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	4a5c      	ldr	r2, [pc, #368]	; (8004518 <HAL_GPIO_Init+0x300>)
 80043a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043ac:	6453      	str	r3, [r2, #68]	; 0x44
 80043ae:	4b5a      	ldr	r3, [pc, #360]	; (8004518 <HAL_GPIO_Init+0x300>)
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ba:	4a58      	ldr	r2, [pc, #352]	; (800451c <HAL_GPIO_Init+0x304>)
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	3302      	adds	r3, #2
 80043c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	220f      	movs	r2, #15
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4013      	ands	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a4f      	ldr	r2, [pc, #316]	; (8004520 <HAL_GPIO_Init+0x308>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d025      	beq.n	8004432 <HAL_GPIO_Init+0x21a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a4e      	ldr	r2, [pc, #312]	; (8004524 <HAL_GPIO_Init+0x30c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01f      	beq.n	800442e <HAL_GPIO_Init+0x216>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a4d      	ldr	r2, [pc, #308]	; (8004528 <HAL_GPIO_Init+0x310>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d019      	beq.n	800442a <HAL_GPIO_Init+0x212>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a4c      	ldr	r2, [pc, #304]	; (800452c <HAL_GPIO_Init+0x314>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <HAL_GPIO_Init+0x20e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a4b      	ldr	r2, [pc, #300]	; (8004530 <HAL_GPIO_Init+0x318>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00d      	beq.n	8004422 <HAL_GPIO_Init+0x20a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a4a      	ldr	r2, [pc, #296]	; (8004534 <HAL_GPIO_Init+0x31c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d007      	beq.n	800441e <HAL_GPIO_Init+0x206>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a49      	ldr	r2, [pc, #292]	; (8004538 <HAL_GPIO_Init+0x320>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_GPIO_Init+0x202>
 8004416:	2306      	movs	r3, #6
 8004418:	e00c      	b.n	8004434 <HAL_GPIO_Init+0x21c>
 800441a:	2307      	movs	r3, #7
 800441c:	e00a      	b.n	8004434 <HAL_GPIO_Init+0x21c>
 800441e:	2305      	movs	r3, #5
 8004420:	e008      	b.n	8004434 <HAL_GPIO_Init+0x21c>
 8004422:	2304      	movs	r3, #4
 8004424:	e006      	b.n	8004434 <HAL_GPIO_Init+0x21c>
 8004426:	2303      	movs	r3, #3
 8004428:	e004      	b.n	8004434 <HAL_GPIO_Init+0x21c>
 800442a:	2302      	movs	r3, #2
 800442c:	e002      	b.n	8004434 <HAL_GPIO_Init+0x21c>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_GPIO_Init+0x21c>
 8004432:	2300      	movs	r3, #0
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	f002 0203 	and.w	r2, r2, #3
 800443a:	0092      	lsls	r2, r2, #2
 800443c:	4093      	lsls	r3, r2
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4313      	orrs	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004444:	4935      	ldr	r1, [pc, #212]	; (800451c <HAL_GPIO_Init+0x304>)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	089b      	lsrs	r3, r3, #2
 800444a:	3302      	adds	r3, #2
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004452:	4b3a      	ldr	r3, [pc, #232]	; (800453c <HAL_GPIO_Init+0x324>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	43db      	mvns	r3, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004476:	4a31      	ldr	r2, [pc, #196]	; (800453c <HAL_GPIO_Init+0x324>)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800447c:	4b2f      	ldr	r3, [pc, #188]	; (800453c <HAL_GPIO_Init+0x324>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044a0:	4a26      	ldr	r2, [pc, #152]	; (800453c <HAL_GPIO_Init+0x324>)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044a6:	4b25      	ldr	r3, [pc, #148]	; (800453c <HAL_GPIO_Init+0x324>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4013      	ands	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ca:	4a1c      	ldr	r2, [pc, #112]	; (800453c <HAL_GPIO_Init+0x324>)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <HAL_GPIO_Init+0x324>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	43db      	mvns	r3, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4013      	ands	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044f4:	4a11      	ldr	r2, [pc, #68]	; (800453c <HAL_GPIO_Init+0x324>)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3301      	adds	r3, #1
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	2b0f      	cmp	r3, #15
 8004504:	f67f ae96 	bls.w	8004234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	3724      	adds	r7, #36	; 0x24
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800
 800451c:	40013800 	.word	0x40013800
 8004520:	40020000 	.word	0x40020000
 8004524:	40020400 	.word	0x40020400
 8004528:	40020800 	.word	0x40020800
 800452c:	40020c00 	.word	0x40020c00
 8004530:	40021000 	.word	0x40021000
 8004534:	40021400 	.word	0x40021400
 8004538:	40021800 	.word	0x40021800
 800453c:	40013c00 	.word	0x40013c00

08004540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	887b      	ldrh	r3, [r7, #2]
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
 800455c:	e001      	b.n	8004562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004562:	7bfb      	ldrb	r3, [r7, #15]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]
 800457c:	4613      	mov	r3, r2
 800457e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004580:	787b      	ldrb	r3, [r7, #1]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004586:	887a      	ldrh	r2, [r7, #2]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800458c:	e003      	b.n	8004596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800458e:	887b      	ldrh	r3, [r7, #2]
 8004590:	041a      	lsls	r2, r3, #16
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	619a      	str	r2, [r3, #24]
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045ae:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d006      	beq.n	80045c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045ba:	4a05      	ldr	r2, [pc, #20]	; (80045d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd fd06 	bl	8001fd4 <HAL_GPIO_EXTI_Callback>
  }
}
 80045c8:	bf00      	nop
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40013c00 	.word	0x40013c00

080045d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e12b      	b.n	800483e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd febc 	bl	8002378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2224      	movs	r2, #36	; 0x24
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004626:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004636:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004638:	f001 fc90 	bl	8005f5c <HAL_RCC_GetPCLK1Freq>
 800463c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4a81      	ldr	r2, [pc, #516]	; (8004848 <HAL_I2C_Init+0x274>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d807      	bhi.n	8004658 <HAL_I2C_Init+0x84>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a80      	ldr	r2, [pc, #512]	; (800484c <HAL_I2C_Init+0x278>)
 800464c:	4293      	cmp	r3, r2
 800464e:	bf94      	ite	ls
 8004650:	2301      	movls	r3, #1
 8004652:	2300      	movhi	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	e006      	b.n	8004666 <HAL_I2C_Init+0x92>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a7d      	ldr	r2, [pc, #500]	; (8004850 <HAL_I2C_Init+0x27c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	bf94      	ite	ls
 8004660:	2301      	movls	r3, #1
 8004662:	2300      	movhi	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e0e7      	b.n	800483e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4a78      	ldr	r2, [pc, #480]	; (8004854 <HAL_I2C_Init+0x280>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	0c9b      	lsrs	r3, r3, #18
 8004678:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4a6a      	ldr	r2, [pc, #424]	; (8004848 <HAL_I2C_Init+0x274>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d802      	bhi.n	80046a8 <HAL_I2C_Init+0xd4>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	3301      	adds	r3, #1
 80046a6:	e009      	b.n	80046bc <HAL_I2C_Init+0xe8>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	4a69      	ldr	r2, [pc, #420]	; (8004858 <HAL_I2C_Init+0x284>)
 80046b4:	fba2 2303 	umull	r2, r3, r2, r3
 80046b8:	099b      	lsrs	r3, r3, #6
 80046ba:	3301      	adds	r3, #1
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	495c      	ldr	r1, [pc, #368]	; (8004848 <HAL_I2C_Init+0x274>)
 80046d8:	428b      	cmp	r3, r1
 80046da:	d819      	bhi.n	8004710 <HAL_I2C_Init+0x13c>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1e59      	subs	r1, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046ea:	1c59      	adds	r1, r3, #1
 80046ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046f0:	400b      	ands	r3, r1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_I2C_Init+0x138>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1e59      	subs	r1, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	fbb1 f3f3 	udiv	r3, r1, r3
 8004704:	3301      	adds	r3, #1
 8004706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470a:	e051      	b.n	80047b0 <HAL_I2C_Init+0x1dc>
 800470c:	2304      	movs	r3, #4
 800470e:	e04f      	b.n	80047b0 <HAL_I2C_Init+0x1dc>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d111      	bne.n	800473c <HAL_I2C_Init+0x168>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1e58      	subs	r0, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	440b      	add	r3, r1
 8004726:	fbb0 f3f3 	udiv	r3, r0, r3
 800472a:	3301      	adds	r3, #1
 800472c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf0c      	ite	eq
 8004734:	2301      	moveq	r3, #1
 8004736:	2300      	movne	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e012      	b.n	8004762 <HAL_I2C_Init+0x18e>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	1e58      	subs	r0, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	0099      	lsls	r1, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004752:	3301      	adds	r3, #1
 8004754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_I2C_Init+0x196>
 8004766:	2301      	movs	r3, #1
 8004768:	e022      	b.n	80047b0 <HAL_I2C_Init+0x1dc>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10e      	bne.n	8004790 <HAL_I2C_Init+0x1bc>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1e58      	subs	r0, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	460b      	mov	r3, r1
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	440b      	add	r3, r1
 8004780:	fbb0 f3f3 	udiv	r3, r0, r3
 8004784:	3301      	adds	r3, #1
 8004786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800478a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800478e:	e00f      	b.n	80047b0 <HAL_I2C_Init+0x1dc>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e58      	subs	r0, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	0099      	lsls	r1, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a6:	3301      	adds	r3, #1
 80047a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	6809      	ldr	r1, [r1, #0]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6911      	ldr	r1, [r2, #16]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68d2      	ldr	r2, [r2, #12]
 80047ea:	4311      	orrs	r1, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	430b      	orrs	r3, r1
 80047f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	000186a0 	.word	0x000186a0
 800484c:	001e847f 	.word	0x001e847f
 8004850:	003d08ff 	.word	0x003d08ff
 8004854:	431bde83 	.word	0x431bde83
 8004858:	10624dd3 	.word	0x10624dd3

0800485c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e034      	b.n	80048d8 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004876:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f245 5255 	movw	r2, #21845	; 0x5555
 8004880:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6852      	ldr	r2, [r2, #4]
 800488a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6892      	ldr	r2, [r2, #8]
 8004894:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004896:	f7fe f821 	bl	80028dc <HAL_GetTick>
 800489a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800489c:	e00f      	b.n	80048be <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800489e:	f7fe f81d 	bl	80028dc <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b31      	cmp	r3, #49	; 0x31
 80048aa:	d908      	bls.n	80048be <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e00c      	b.n	80048d8 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e8      	bne.n	800489e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80048d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e2:	b08f      	sub	sp, #60	; 0x3c
 80048e4:	af0a      	add	r7, sp, #40	; 0x28
 80048e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e116      	b.n	8004b20 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d106      	bne.n	8004912 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f00a fef5 	bl	800f6fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2203      	movs	r2, #3
 8004916:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d102      	bne.n	800492c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f005 f95a 	bl	8009bea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	687e      	ldr	r6, [r7, #4]
 800493e:	466d      	mov	r5, sp
 8004940:	f106 0410 	add.w	r4, r6, #16
 8004944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800494a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800494c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004950:	e885 0003 	stmia.w	r5, {r0, r1}
 8004954:	1d33      	adds	r3, r6, #4
 8004956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004958:	6838      	ldr	r0, [r7, #0]
 800495a:	f005 f831 	bl	80099c0 <USB_CoreInit>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0d7      	b.n	8004b20 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f005 f948 	bl	8009c0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800497c:	2300      	movs	r3, #0
 800497e:	73fb      	strb	r3, [r7, #15]
 8004980:	e04a      	b.n	8004a18 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004982:	7bfa      	ldrb	r2, [r7, #15]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	333d      	adds	r3, #61	; 0x3d
 8004992:	2201      	movs	r2, #1
 8004994:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004996:	7bfa      	ldrb	r2, [r7, #15]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	333c      	adds	r3, #60	; 0x3c
 80049a6:	7bfa      	ldrb	r2, [r7, #15]
 80049a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049aa:	7bfa      	ldrb	r2, [r7, #15]
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	b298      	uxth	r0, r3
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	3342      	adds	r3, #66	; 0x42
 80049be:	4602      	mov	r2, r0
 80049c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049c2:	7bfa      	ldrb	r2, [r7, #15]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	333f      	adds	r3, #63	; 0x3f
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049d6:	7bfa      	ldrb	r2, [r7, #15]
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	3344      	adds	r3, #68	; 0x44
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049ea:	7bfa      	ldrb	r2, [r7, #15]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	3348      	adds	r3, #72	; 0x48
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049fe:	7bfa      	ldrb	r2, [r7, #15]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3350      	adds	r3, #80	; 0x50
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	3301      	adds	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
 8004a18:	7bfa      	ldrb	r2, [r7, #15]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d3af      	bcc.n	8004982 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
 8004a26:	e044      	b.n	8004ab2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a28:	7bfa      	ldrb	r2, [r7, #15]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a3e:	7bfa      	ldrb	r2, [r7, #15]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004a50:	7bfa      	ldrb	r2, [r7, #15]
 8004a52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a54:	7bfa      	ldrb	r2, [r7, #15]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a80:	7bfa      	ldrb	r2, [r7, #15]
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a96:	7bfa      	ldrb	r2, [r7, #15]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
 8004ab2:	7bfa      	ldrb	r2, [r7, #15]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d3b5      	bcc.n	8004a28 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	687e      	ldr	r6, [r7, #4]
 8004ac4:	466d      	mov	r5, sp
 8004ac6:	f106 0410 	add.w	r4, r6, #16
 8004aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ad2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ad6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ada:	1d33      	adds	r3, r6, #4
 8004adc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ade:	6838      	ldr	r0, [r7, #0]
 8004ae0:	f005 f8e0 	bl	8009ca4 <USB_DevInit>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e014      	b.n	8004b20 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d102      	bne.n	8004b14 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f001 f8be 	bl	8005c90 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f006 f94f 	bl	800adbc <USB_DevDisconnect>

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b28 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_PCD_Start+0x1c>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e020      	b.n	8004b86 <HAL_PCD_Start+0x5e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d109      	bne.n	8004b68 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d005      	beq.n	8004b68 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f005 f82b 	bl	8009bc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f006 f8ff 	bl	800ad7a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b8e:	b590      	push	{r4, r7, lr}
 8004b90:	b08d      	sub	sp, #52	; 0x34
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f006 f9bd 	bl	800af24 <USB_GetMode>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f040 83ca 	bne.w	8005346 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f006 f921 	bl	800adfe <USB_ReadInterrupts>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 83c0 	beq.w	8005344 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f006 f918 	bl	800adfe <USB_ReadInterrupts>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d107      	bne.n	8004be8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f002 0202 	and.w	r2, r2, #2
 8004be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f006 f906 	bl	800adfe <USB_ReadInterrupts>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d161      	bne.n	8004cc0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0210 	bic.w	r2, r2, #16
 8004c0a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f003 020f 	and.w	r2, r3, #15
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	4413      	add	r3, r2
 8004c28:	3304      	adds	r3, #4
 8004c2a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	0c5b      	lsrs	r3, r3, #17
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d124      	bne.n	8004c82 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004c3e:	4013      	ands	r3, r2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d035      	beq.n	8004cb0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	6a38      	ldr	r0, [r7, #32]
 8004c58:	f005 ff3d 	bl	800aad6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c68:	441a      	add	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c7a:	441a      	add	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	619a      	str	r2, [r3, #24]
 8004c80:	e016      	b.n	8004cb0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	0c5b      	lsrs	r3, r3, #17
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	2b06      	cmp	r3, #6
 8004c8c:	d110      	bne.n	8004cb0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c94:	2208      	movs	r2, #8
 8004c96:	4619      	mov	r1, r3
 8004c98:	6a38      	ldr	r0, [r7, #32]
 8004c9a:	f005 ff1c 	bl	800aad6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004caa:	441a      	add	r2, r3
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0210 	orr.w	r2, r2, #16
 8004cbe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f006 f89a 	bl	800adfe <USB_ReadInterrupts>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004cd4:	d16e      	bne.n	8004db4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f006 f8a0 	bl	800ae24 <USB_ReadDevAllOutEpInterrupt>
 8004ce4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004ce6:	e062      	b.n	8004dae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d057      	beq.n	8004da2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f006 f8c5 	bl	800ae8c <USB_ReadDevOutEPInterrupt>
 8004d02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00c      	beq.n	8004d28 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fe0a 	bl	800593c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00c      	beq.n	8004d4c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2308      	movs	r3, #8
 8004d42:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 ff04 	bl	8005b54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	461a      	mov	r2, r3
 8004d64:	2310      	movs	r3, #16
 8004d66:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2320      	movs	r3, #32
 8004d82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004da0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	3301      	adds	r3, #1
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d199      	bne.n	8004ce8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f006 f820 	bl	800adfe <USB_ReadInterrupts>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dc8:	f040 80c0 	bne.w	8004f4c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f006 f841 	bl	800ae58 <USB_ReadDevAllInEpInterrupt>
 8004dd6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ddc:	e0b2      	b.n	8004f44 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80a7 	beq.w	8004f38 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	4611      	mov	r1, r2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f006 f867 	bl	800aec8 <USB_ReadDevInEPInterrupt>
 8004dfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d057      	beq.n	8004eb6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	69f9      	ldr	r1, [r7, #28]
 8004e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e26:	4013      	ands	r3, r2
 8004e28:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e36:	461a      	mov	r2, r3
 8004e38:	2301      	movs	r3, #1
 8004e3a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d132      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e48:	4613      	mov	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	3348      	adds	r3, #72	; 0x48
 8004e54:	6819      	ldr	r1, [r3, #0]
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4403      	add	r3, r0
 8004e64:	3344      	adds	r3, #68	; 0x44
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4419      	add	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6e:	4613      	mov	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4403      	add	r3, r0
 8004e78:	3348      	adds	r3, #72	; 0x48
 8004e7a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d113      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x31c>
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e86:	4613      	mov	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	1a9b      	subs	r3, r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	3350      	adds	r3, #80	; 0x50
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d108      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	f006 f86f 	bl	800af88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f00a fcb2 	bl	800f81a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2308      	movs	r3, #8
 8004ed0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2310      	movs	r3, #16
 8004eec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	461a      	mov	r2, r3
 8004f06:	2340      	movs	r3, #64	; 0x40
 8004f08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	461a      	mov	r2, r3
 8004f22:	2302      	movs	r3, #2
 8004f24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fc75 	bl	8005822 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f47f af49 	bne.w	8004dde <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f005 ff54 	bl	800adfe <USB_ReadInterrupts>
 8004f56:	4603      	mov	r3, r0
 8004f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f60:	d122      	bne.n	8004fa8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f70:	f023 0301 	bic.w	r3, r3, #1
 8004f74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d108      	bne.n	8004f92 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f88:	2100      	movs	r1, #0
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f00a feb4 	bl	800fcf8 <HAL_PCDEx_LPM_Callback>
 8004f90:	e002      	b.n	8004f98 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f00a fcb8 	bl	800f908 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f005 ff26 	bl	800adfe <USB_ReadInterrupts>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbc:	d112      	bne.n	8004fe4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d102      	bne.n	8004fd4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f00a fc74 	bl	800f8bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695a      	ldr	r2, [r3, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004fe2:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f005 ff08 	bl	800adfe <USB_ReadInterrupts>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ff8:	d121      	bne.n	800503e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005008:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d111      	bne.n	8005038 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	f003 020f 	and.w	r2, r3, #15
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800502e:	2101      	movs	r1, #1
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f00a fe61 	bl	800fcf8 <HAL_PCDEx_LPM_Callback>
 8005036:	e002      	b.n	800503e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f00a fc3f 	bl	800f8bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f005 fedb 	bl	800adfe <USB_ReadInterrupts>
 8005048:	4603      	mov	r3, r0
 800504a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	f040 80c7 	bne.w	80051e4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2110      	movs	r1, #16
 8005070:	4618      	mov	r0, r3
 8005072:	f004 ff75 	bl	8009f60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005076:	2300      	movs	r3, #0
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800507a:	e056      	b.n	800512a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	461a      	mov	r2, r3
 800508a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800508e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050ae:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	461a      	mov	r2, r3
 80050de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005102:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005122:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005126:	3301      	adds	r3, #1
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005130:	429a      	cmp	r2, r3
 8005132:	d3a3      	bcc.n	800507c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005142:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005146:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	2b00      	cmp	r3, #0
 800514e:	d016      	beq.n	800517e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005160:	f043 030b 	orr.w	r3, r3, #11
 8005164:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005176:	f043 030b 	orr.w	r3, r3, #11
 800517a:	6453      	str	r3, [r2, #68]	; 0x44
 800517c:	e015      	b.n	80051aa <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005190:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005194:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a4:	f043 030b 	orr.w	r3, r3, #11
 80051a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051ce:	461a      	mov	r2, r3
 80051d0:	f005 feda 	bl	800af88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80051e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f005 fe08 	bl	800adfe <USB_ReadInterrupts>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f8:	d124      	bne.n	8005244 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f005 fe9e 	bl	800af40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f004 ff06 	bl	800a01a <USB_GetDevSpeed>
 800520e:	4603      	mov	r3, r0
 8005210:	461a      	mov	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681c      	ldr	r4, [r3, #0]
 800521a:	f000 fe93 	bl	8005f44 <HAL_RCC_GetHCLKFreq>
 800521e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	4620      	mov	r0, r4
 800522a:	f004 fc2b 	bl	8009a84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f00a fb1b 	bl	800f86a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695a      	ldr	r2, [r3, #20]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005242:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f005 fdd8 	bl	800adfe <USB_ReadInterrupts>
 800524e:	4603      	mov	r3, r0
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b08      	cmp	r3, #8
 8005256:	d10a      	bne.n	800526e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f00a faf8 	bl	800f84e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695a      	ldr	r2, [r3, #20]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f002 0208 	and.w	r2, r2, #8
 800526c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f005 fdc3 	bl	800adfe <USB_ReadInterrupts>
 8005278:	4603      	mov	r3, r0
 800527a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800527e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005282:	d10f      	bne.n	80052a4 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	b2db      	uxtb	r3, r3
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f00a fb5a 	bl	800f948 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80052a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f005 fda8 	bl	800adfe <USB_ReadInterrupts>
 80052ae:	4603      	mov	r3, r0
 80052b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052b8:	d10f      	bne.n	80052da <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f00a fb2d 	bl	800f924 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80052d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f005 fd8d 	bl	800adfe <USB_ReadInterrupts>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ee:	d10a      	bne.n	8005306 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f00a fb3b 	bl	800f96c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005304:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f005 fd77 	bl	800adfe <USB_ReadInterrupts>
 8005310:	4603      	mov	r3, r0
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b04      	cmp	r3, #4
 8005318:	d115      	bne.n	8005346 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f00a fb2b 	bl	800f988 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6859      	ldr	r1, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
 8005342:	e000      	b.n	8005346 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005344:	bf00      	nop
    }
  }
}
 8005346:	3734      	adds	r7, #52	; 0x34
 8005348:	46bd      	mov	sp, r7
 800534a:	bd90      	pop	{r4, r7, pc}

0800534c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_PCD_SetAddress+0x1a>
 8005362:	2302      	movs	r3, #2
 8005364:	e013      	b.n	800538e <HAL_PCD_SetAddress+0x42>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	4611      	mov	r1, r2
 800537e:	4618      	mov	r0, r3
 8005380:	f005 fcd5 	bl	800ad2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	4608      	mov	r0, r1
 80053a0:	4611      	mov	r1, r2
 80053a2:	461a      	mov	r2, r3
 80053a4:	4603      	mov	r3, r0
 80053a6:	70fb      	strb	r3, [r7, #3]
 80053a8:	460b      	mov	r3, r1
 80053aa:	803b      	strh	r3, [r7, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	da0f      	bge.n	80053dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	f003 020f 	and.w	r2, r3, #15
 80053c2:	4613      	mov	r3, r2
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	3338      	adds	r3, #56	; 0x38
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4413      	add	r3, r2
 80053d0:	3304      	adds	r3, #4
 80053d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2201      	movs	r2, #1
 80053d8:	705a      	strb	r2, [r3, #1]
 80053da:	e00f      	b.n	80053fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	f003 020f 	and.w	r2, r3, #15
 80053e2:	4613      	mov	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	4413      	add	r3, r2
 80053f2:	3304      	adds	r3, #4
 80053f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	b2da      	uxtb	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005408:	883a      	ldrh	r2, [r7, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	78ba      	ldrb	r2, [r7, #2]
 8005412:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	785b      	ldrb	r3, [r3, #1]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005426:	78bb      	ldrb	r3, [r7, #2]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d102      	bne.n	8005432 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_PCD_EP_Open+0xaa>
 800543c:	2302      	movs	r3, #2
 800543e:	e00e      	b.n	800545e <HAL_PCD_EP_Open+0xc8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68f9      	ldr	r1, [r7, #12]
 800544e:	4618      	mov	r0, r3
 8005450:	f004 fe08 	bl	800a064 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800545c:	7afb      	ldrb	r3, [r7, #11]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	460b      	mov	r3, r1
 8005470:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005476:	2b00      	cmp	r3, #0
 8005478:	da0f      	bge.n	800549a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800547a:	78fb      	ldrb	r3, [r7, #3]
 800547c:	f003 020f 	and.w	r2, r3, #15
 8005480:	4613      	mov	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	3338      	adds	r3, #56	; 0x38
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	4413      	add	r3, r2
 800548e:	3304      	adds	r3, #4
 8005490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	705a      	strb	r2, [r3, #1]
 8005498:	e00f      	b.n	80054ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	f003 020f 	and.w	r2, r3, #15
 80054a0:	4613      	mov	r3, r2
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	4413      	add	r3, r2
 80054b0:	3304      	adds	r3, #4
 80054b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_PCD_EP_Close+0x6e>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e00e      	b.n	80054f2 <HAL_PCD_EP_Close+0x8c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68f9      	ldr	r1, [r7, #12]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f004 fe46 	bl	800a174 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b086      	sub	sp, #24
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	460b      	mov	r3, r1
 8005508:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800550a:	7afb      	ldrb	r3, [r7, #11]
 800550c:	f003 020f 	and.w	r2, r3, #15
 8005510:	4613      	mov	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	3304      	adds	r3, #4
 8005522:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2200      	movs	r2, #0
 8005534:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2200      	movs	r2, #0
 800553a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800553c:	7afb      	ldrb	r3, [r7, #11]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	b2da      	uxtb	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d102      	bne.n	8005556 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005556:	7afb      	ldrb	r3, [r7, #11]
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	2b00      	cmp	r3, #0
 800555e:	d109      	bne.n	8005574 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	461a      	mov	r2, r3
 800556c:	6979      	ldr	r1, [r7, #20]
 800556e:	f005 f921 	bl	800a7b4 <USB_EP0StartXfer>
 8005572:	e008      	b.n	8005586 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	6979      	ldr	r1, [r7, #20]
 8005582:	f004 fed3 	bl	800a32c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	f003 020f 	and.w	r2, r3, #15
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80055b2:	681b      	ldr	r3, [r3, #0]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	607a      	str	r2, [r7, #4]
 80055ca:	603b      	str	r3, [r7, #0]
 80055cc:	460b      	mov	r3, r1
 80055ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055d0:	7afb      	ldrb	r3, [r7, #11]
 80055d2:	f003 020f 	and.w	r2, r3, #15
 80055d6:	4613      	mov	r3, r2
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	3338      	adds	r3, #56	; 0x38
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	3304      	adds	r3, #4
 80055e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2200      	movs	r2, #0
 80055f8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2201      	movs	r2, #1
 80055fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005600:	7afb      	ldrb	r3, [r7, #11]
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	b2da      	uxtb	r2, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d102      	bne.n	800561a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800561a:	7afb      	ldrb	r3, [r7, #11]
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	2b00      	cmp	r3, #0
 8005622:	d109      	bne.n	8005638 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	6979      	ldr	r1, [r7, #20]
 8005632:	f005 f8bf 	bl	800a7b4 <USB_EP0StartXfer>
 8005636:	e008      	b.n	800564a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	6979      	ldr	r1, [r7, #20]
 8005646:	f004 fe71 	bl	800a32c <USB_EPStartXfer>
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	f003 020f 	and.w	r2, r3, #15
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	429a      	cmp	r2, r3
 800566c:	d901      	bls.n	8005672 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e050      	b.n	8005714 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005676:	2b00      	cmp	r3, #0
 8005678:	da0f      	bge.n	800569a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	f003 020f 	and.w	r2, r3, #15
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	3338      	adds	r3, #56	; 0x38
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	3304      	adds	r3, #4
 8005690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	705a      	strb	r2, [r3, #1]
 8005698:	e00d      	b.n	80056b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800569a:	78fa      	ldrb	r2, [r7, #3]
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	4413      	add	r3, r2
 80056ac:	3304      	adds	r3, #4
 80056ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_PCD_EP_SetStall+0x82>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e01e      	b.n	8005714 <HAL_PCD_EP_SetStall+0xc0>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f005 fa4e 	bl	800ab86 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	b2d9      	uxtb	r1, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005704:	461a      	mov	r2, r3
 8005706:	f005 fc3f 	bl	800af88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	f003 020f 	and.w	r2, r3, #15
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d901      	bls.n	800573a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e042      	b.n	80057c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800573a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800573e:	2b00      	cmp	r3, #0
 8005740:	da0f      	bge.n	8005762 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	f003 020f 	and.w	r2, r3, #15
 8005748:	4613      	mov	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	1a9b      	subs	r3, r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	3338      	adds	r3, #56	; 0x38
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	3304      	adds	r3, #4
 8005758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	705a      	strb	r2, [r3, #1]
 8005760:	e00f      	b.n	8005782 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	f003 020f 	and.w	r2, r3, #15
 8005768:	4613      	mov	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	4413      	add	r3, r2
 8005778:	3304      	adds	r3, #4
 800577a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	b2da      	uxtb	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_PCD_EP_ClrStall+0x86>
 800579e:	2302      	movs	r3, #2
 80057a0:	e00e      	b.n	80057c0 <HAL_PCD_EP_ClrStall+0xa4>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68f9      	ldr	r1, [r7, #12]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f005 fa56 	bl	800ac62 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_PCD_EP_Flush+0x1a>
 80057de:	2302      	movs	r3, #2
 80057e0:	e01b      	b.n	800581a <HAL_PCD_EP_Flush+0x52>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80057ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	da09      	bge.n	8005806 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	4619      	mov	r1, r3
 80057fe:	4610      	mov	r0, r2
 8005800:	f004 fbae 	bl	8009f60 <USB_FlushTxFifo>
 8005804:	e004      	b.n	8005810 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f004 fbcc 	bl	8009fa8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b08a      	sub	sp, #40	; 0x28
 8005826:	af02      	add	r7, sp, #8
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	4613      	mov	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	3338      	adds	r3, #56	; 0x38
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4413      	add	r3, r2
 8005846:	3304      	adds	r3, #4
 8005848:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	429a      	cmp	r2, r3
 8005854:	d901      	bls.n	800585a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e06c      	b.n	8005934 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	429a      	cmp	r2, r3
 800586e:	d902      	bls.n	8005876 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	3303      	adds	r3, #3
 800587a:	089b      	lsrs	r3, r3, #2
 800587c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800587e:	e02b      	b.n	80058d8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	695a      	ldr	r2, [r3, #20]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	429a      	cmp	r2, r3
 8005894:	d902      	bls.n	800589c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	3303      	adds	r3, #3
 80058a0:	089b      	lsrs	r3, r3, #2
 80058a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68d9      	ldr	r1, [r3, #12]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4603      	mov	r3, r0
 80058ba:	6978      	ldr	r0, [r7, #20]
 80058bc:	f005 f8cd 	bl	800aa5a <USB_WritePacket>

    ep->xfer_buff  += len;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	441a      	add	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	441a      	add	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d809      	bhi.n	8005902 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d203      	bcs.n	8005902 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1be      	bne.n	8005880 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	695a      	ldr	r2, [r3, #20]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	429a      	cmp	r2, r3
 800590c:	d811      	bhi.n	8005932 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	2201      	movs	r2, #1
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	43db      	mvns	r3, r3
 8005928:	6939      	ldr	r1, [r7, #16]
 800592a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800592e:	4013      	ands	r3, r2
 8005930:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	333c      	adds	r3, #60	; 0x3c
 8005954:	3304      	adds	r3, #4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b01      	cmp	r3, #1
 8005970:	f040 80a0 	bne.w	8005ab4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d015      	beq.n	80059aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4a72      	ldr	r2, [pc, #456]	; (8005b4c <PCD_EP_OutXfrComplete_int+0x210>)
 8005982:	4293      	cmp	r3, r2
 8005984:	f240 80dd 	bls.w	8005b42 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 80d7 	beq.w	8005b42 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a0:	461a      	mov	r2, r3
 80059a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059a6:	6093      	str	r3, [r2, #8]
 80059a8:	e0cb      	b.n	8005b42 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d009      	beq.n	80059c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c0:	461a      	mov	r2, r3
 80059c2:	2320      	movs	r3, #32
 80059c4:	6093      	str	r3, [r2, #8]
 80059c6:	e0bc      	b.n	8005b42 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 80b7 	bne.w	8005b42 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4a5d      	ldr	r2, [pc, #372]	; (8005b4c <PCD_EP_OutXfrComplete_int+0x210>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d90f      	bls.n	80059fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	461a      	mov	r2, r3
 80059f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f8:	6093      	str	r3, [r2, #8]
 80059fa:	e0a2      	b.n	8005b42 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	4613      	mov	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a0e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	0159      	lsls	r1, r3, #5
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	440b      	add	r3, r1
 8005a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005a22:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4403      	add	r3, r0
 8005a32:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005a36:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a4a:	6819      	ldr	r1, [r3, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	4613      	mov	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4403      	add	r3, r0
 8005a5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4419      	add	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	4613      	mov	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4403      	add	r3, r0
 8005a70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a74:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d114      	bne.n	8005aa6 <PCD_EP_OutXfrComplete_int+0x16a>
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	4613      	mov	r3, r2
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	440b      	add	r3, r1
 8005a8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d108      	bne.n	8005aa6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	f005 fa71 	bl	800af88 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f009 fe99 	bl	800f7e4 <HAL_PCD_DataOutStageCallback>
 8005ab2:	e046      	b.n	8005b42 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4a26      	ldr	r2, [pc, #152]	; (8005b50 <PCD_EP_OutXfrComplete_int+0x214>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d124      	bne.n	8005b06 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ad8:	6093      	str	r3, [r2, #8]
 8005ada:	e032      	b.n	8005b42 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d008      	beq.n	8005af8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af2:	461a      	mov	r2, r3
 8005af4:	2320      	movs	r3, #32
 8005af6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f009 fe70 	bl	800f7e4 <HAL_PCD_DataOutStageCallback>
 8005b04:	e01d      	b.n	8005b42 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d114      	bne.n	8005b36 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	4613      	mov	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	1a9b      	subs	r3, r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	440b      	add	r3, r1
 8005b1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d108      	bne.n	8005b36 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2100      	movs	r1, #0
 8005b32:	f005 fa29 	bl	800af88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f009 fe51 	bl	800f7e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	4f54300a 	.word	0x4f54300a
 8005b50:	4f54310a 	.word	0x4f54310a

08005b54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	333c      	adds	r3, #60	; 0x3c
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <PCD_EP_OutSetupPacket_int+0x88>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d90e      	bls.n	8005ba8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d009      	beq.n	8005ba8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f009 fe09 	bl	800f7c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <PCD_EP_OutSetupPacket_int+0x88>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d90c      	bls.n	8005bd0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d108      	bne.n	8005bd0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2101      	movs	r1, #1
 8005bcc:	f005 f9dc 	bl	800af88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	4f54300a 	.word	0x4f54300a

08005be0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
 8005bec:	4613      	mov	r3, r2
 8005bee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d107      	bne.n	8005c0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005bfe:	883b      	ldrh	r3, [r7, #0]
 8005c00:	0419      	lsls	r1, r3, #16
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c0c:	e028      	b.n	8005c60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c14:	0c1b      	lsrs	r3, r3, #16
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	4413      	add	r3, r2
 8005c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	73fb      	strb	r3, [r7, #15]
 8005c20:	e00d      	b.n	8005c3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	3340      	adds	r3, #64	; 0x40
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	4413      	add	r3, r2
 8005c36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
 8005c3e:	7bfa      	ldrb	r2, [r7, #15]
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d3ec      	bcc.n	8005c22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c48:	883b      	ldrh	r3, [r7, #0]
 8005c4a:	0418      	lsls	r0, r3, #16
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6819      	ldr	r1, [r3, #0]
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	4302      	orrs	r2, r0
 8005c58:	3340      	adds	r3, #64	; 0x40
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	887a      	ldrh	r2, [r7, #2]
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc2:	f043 0303 	orr.w	r3, r3, #3
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	4b20      	ldr	r3, [pc, #128]	; (8005d68 <HAL_PWREx_EnableOverDrive+0x90>)
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <HAL_PWREx_EnableOverDrive+0x90>)
 8005cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cf2:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <HAL_PWREx_EnableOverDrive+0x90>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005cfe:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <HAL_PWREx_EnableOverDrive+0x94>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d04:	f7fc fdea 	bl	80028dc <HAL_GetTick>
 8005d08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d0a:	e009      	b.n	8005d20 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d0c:	f7fc fde6 	bl	80028dc <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d1a:	d901      	bls.n	8005d20 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e01f      	b.n	8005d60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d20:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2c:	d1ee      	bne.n	8005d0c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d2e:	4b11      	ldr	r3, [pc, #68]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d34:	f7fc fdd2 	bl	80028dc <HAL_GetTick>
 8005d38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d3a:	e009      	b.n	8005d50 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d3c:	f7fc fdce 	bl	80028dc <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d4a:	d901      	bls.n	8005d50 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e007      	b.n	8005d60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d50:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d5c:	d1ee      	bne.n	8005d3c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	420e0040 	.word	0x420e0040
 8005d70:	40007000 	.word	0x40007000
 8005d74:	420e0044 	.word	0x420e0044

08005d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0cc      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d8c:	4b68      	ldr	r3, [pc, #416]	; (8005f30 <HAL_RCC_ClockConfig+0x1b8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d90c      	bls.n	8005db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9a:	4b65      	ldr	r3, [pc, #404]	; (8005f30 <HAL_RCC_ClockConfig+0x1b8>)
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da2:	4b63      	ldr	r3, [pc, #396]	; (8005f30 <HAL_RCC_ClockConfig+0x1b8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d001      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e0b8      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d020      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dcc:	4b59      	ldr	r3, [pc, #356]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	4a58      	ldr	r2, [pc, #352]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005de4:	4b53      	ldr	r3, [pc, #332]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	4a52      	ldr	r2, [pc, #328]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005df0:	4b50      	ldr	r3, [pc, #320]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	494d      	ldr	r1, [pc, #308]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d044      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d107      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e16:	4b47      	ldr	r3, [pc, #284]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d119      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e07f      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d003      	beq.n	8005e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d107      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e36:	4b3f      	ldr	r3, [pc, #252]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d109      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e06f      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e46:	4b3b      	ldr	r3, [pc, #236]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e067      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e56:	4b37      	ldr	r3, [pc, #220]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f023 0203 	bic.w	r2, r3, #3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	4934      	ldr	r1, [pc, #208]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e68:	f7fc fd38 	bl	80028dc <HAL_GetTick>
 8005e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e6e:	e00a      	b.n	8005e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e70:	f7fc fd34 	bl	80028dc <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e04f      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e86:	4b2b      	ldr	r3, [pc, #172]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 020c 	and.w	r2, r3, #12
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d1eb      	bne.n	8005e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e98:	4b25      	ldr	r3, [pc, #148]	; (8005f30 <HAL_RCC_ClockConfig+0x1b8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d20c      	bcs.n	8005ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ea6:	4b22      	ldr	r3, [pc, #136]	; (8005f30 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eae:	4b20      	ldr	r3, [pc, #128]	; (8005f30 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d001      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e032      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ecc:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	4916      	ldr	r1, [pc, #88]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eea:	4b12      	ldr	r3, [pc, #72]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	490e      	ldr	r1, [pc, #56]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005efe:	f000 fb6b 	bl	80065d8 <HAL_RCC_GetSysClockFreq>
 8005f02:	4602      	mov	r2, r0
 8005f04:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	490a      	ldr	r1, [pc, #40]	; (8005f38 <HAL_RCC_ClockConfig+0x1c0>)
 8005f10:	5ccb      	ldrb	r3, [r1, r3]
 8005f12:	fa22 f303 	lsr.w	r3, r2, r3
 8005f16:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <HAL_RCC_ClockConfig+0x1c4>)
 8005f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <HAL_RCC_ClockConfig+0x1c8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fc fc98 	bl	8002854 <HAL_InitTick>

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40023c00 	.word	0x40023c00
 8005f34:	40023800 	.word	0x40023800
 8005f38:	0800feec 	.word	0x0800feec
 8005f3c:	20000000 	.word	0x20000000
 8005f40:	20000004 	.word	0x20000004

08005f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f48:	4b03      	ldr	r3, [pc, #12]	; (8005f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	20000000 	.word	0x20000000

08005f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f60:	f7ff fff0 	bl	8005f44 <HAL_RCC_GetHCLKFreq>
 8005f64:	4602      	mov	r2, r0
 8005f66:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	0a9b      	lsrs	r3, r3, #10
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	4903      	ldr	r1, [pc, #12]	; (8005f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f72:	5ccb      	ldrb	r3, [r1, r3]
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	0800fefc 	.word	0x0800fefc

08005f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08c      	sub	sp, #48	; 0x30
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d010      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005fbc:	4b6f      	ldr	r3, [pc, #444]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	496c      	ldr	r1, [pc, #432]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d010      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005fea:	4b64      	ldr	r3, [pc, #400]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff8:	4960      	ldr	r1, [pc, #384]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006008:	2301      	movs	r3, #1
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d017      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006018:	4b58      	ldr	r3, [pc, #352]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800601a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800601e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	4955      	ldr	r1, [pc, #340]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006036:	d101      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006038:	2301      	movs	r3, #1
 800603a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006044:	2301      	movs	r3, #1
 8006046:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d017      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006054:	4b49      	ldr	r3, [pc, #292]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800605a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006062:	4946      	ldr	r1, [pc, #280]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006072:	d101      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006074:	2301      	movs	r3, #1
 8006076:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006080:	2301      	movs	r3, #1
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 808a 	beq.w	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	4b39      	ldr	r3, [pc, #228]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	4a38      	ldr	r2, [pc, #224]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800609c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a0:	6413      	str	r3, [r2, #64]	; 0x40
 80060a2:	4b36      	ldr	r3, [pc, #216]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060ae:	4b34      	ldr	r3, [pc, #208]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a33      	ldr	r2, [pc, #204]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80060b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060ba:	f7fc fc0f 	bl	80028dc <HAL_GetTick>
 80060be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060c0:	e008      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060c2:	f7fc fc0b 	bl	80028dc <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e278      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060d4:	4b2a      	ldr	r3, [pc, #168]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060e0:	4b26      	ldr	r3, [pc, #152]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80060e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d02f      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f8:	6a3a      	ldr	r2, [r7, #32]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d028      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060fe:	4b1f      	ldr	r3, [pc, #124]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006106:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006108:	4b1e      	ldr	r3, [pc, #120]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800610e:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006114:	4a19      	ldr	r2, [pc, #100]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800611a:	4b18      	ldr	r3, [pc, #96]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b01      	cmp	r3, #1
 8006124:	d114      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006126:	f7fc fbd9 	bl	80028dc <HAL_GetTick>
 800612a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800612c:	e00a      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800612e:	f7fc fbd5 	bl	80028dc <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f241 3288 	movw	r2, #5000	; 0x1388
 800613c:	4293      	cmp	r3, r2
 800613e:	d901      	bls.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e240      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006144:	4b0d      	ldr	r3, [pc, #52]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0ee      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006158:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800615c:	d114      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800615e:	4b07      	ldr	r3, [pc, #28]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800616e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006172:	4902      	ldr	r1, [pc, #8]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006174:	4313      	orrs	r3, r2
 8006176:	608b      	str	r3, [r1, #8]
 8006178:	e00c      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800
 8006180:	40007000 	.word	0x40007000
 8006184:	42470e40 	.word	0x42470e40
 8006188:	4b4a      	ldr	r3, [pc, #296]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	4a49      	ldr	r2, [pc, #292]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800618e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006192:	6093      	str	r3, [r2, #8]
 8006194:	4b47      	ldr	r3, [pc, #284]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006196:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a0:	4944      	ldr	r1, [pc, #272]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80061b8:	4b3f      	ldr	r3, [pc, #252]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80061ba:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00a      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80061c8:	4b3a      	ldr	r3, [pc, #232]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80061ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d6:	4937      	ldr	r1, [pc, #220]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061ea:	4b32      	ldr	r3, [pc, #200]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80061ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061f0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f8:	492e      	ldr	r1, [pc, #184]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d011      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800620c:	4b29      	ldr	r3, [pc, #164]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800620e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006212:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621a:	4926      	ldr	r1, [pc, #152]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800621c:	4313      	orrs	r3, r2
 800621e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800622a:	d101      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800622c:	2301      	movs	r3, #1
 800622e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800623c:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800623e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006242:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	491a      	ldr	r1, [pc, #104]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800624c:	4313      	orrs	r3, r2
 800624e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800625a:	2b00      	cmp	r3, #0
 800625c:	d011      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800625e:	4b15      	ldr	r3, [pc, #84]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006264:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626c:	4911      	ldr	r1, [pc, #68]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800626e:	4313      	orrs	r3, r2
 8006270:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800627c:	d101      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800627e:	2301      	movs	r3, #1
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d005      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006290:	f040 80ff 	bne.w	8006492 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006294:	4b09      	ldr	r3, [pc, #36]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800629a:	f7fc fb1f 	bl	80028dc <HAL_GetTick>
 800629e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062a0:	e00e      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062a2:	f7fc fb1b 	bl	80028dc <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d907      	bls.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e188      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80062b4:	40023800 	.word	0x40023800
 80062b8:	424711e0 	.word	0x424711e0
 80062bc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062c0:	4b7e      	ldr	r3, [pc, #504]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1ea      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d009      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d028      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d124      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80062f4:	4b71      	ldr	r3, [pc, #452]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80062f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062fa:	0c1b      	lsrs	r3, r3, #16
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	3301      	adds	r3, #1
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006306:	4b6d      	ldr	r3, [pc, #436]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800630c:	0e1b      	lsrs	r3, r3, #24
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	019b      	lsls	r3, r3, #6
 800631e:	431a      	orrs	r2, r3
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	3b01      	subs	r3, #1
 8006326:	041b      	lsls	r3, r3, #16
 8006328:	431a      	orrs	r2, r3
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	061b      	lsls	r3, r3, #24
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	071b      	lsls	r3, r3, #28
 8006336:	4961      	ldr	r1, [pc, #388]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006352:	d00a      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800635c:	2b00      	cmp	r3, #0
 800635e:	d035      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006368:	d130      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800636a:	4b54      	ldr	r3, [pc, #336]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800636c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006370:	0c1b      	lsrs	r3, r3, #16
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	3301      	adds	r3, #1
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800637c:	4b4f      	ldr	r3, [pc, #316]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800637e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006382:	0f1b      	lsrs	r3, r3, #28
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	019b      	lsls	r3, r3, #6
 8006394:	431a      	orrs	r2, r3
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	085b      	lsrs	r3, r3, #1
 800639a:	3b01      	subs	r3, #1
 800639c:	041b      	lsls	r3, r3, #16
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	061b      	lsls	r3, r3, #24
 80063a6:	431a      	orrs	r2, r3
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	071b      	lsls	r3, r3, #28
 80063ac:	4943      	ldr	r1, [pc, #268]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80063b4:	4b41      	ldr	r3, [pc, #260]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80063b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063ba:	f023 021f 	bic.w	r2, r3, #31
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	3b01      	subs	r3, #1
 80063c4:	493d      	ldr	r1, [pc, #244]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d029      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063e0:	d124      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80063e2:	4b36      	ldr	r3, [pc, #216]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80063e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e8:	0c1b      	lsrs	r3, r3, #16
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	3301      	adds	r3, #1
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063f4:	4b31      	ldr	r3, [pc, #196]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80063f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063fa:	0f1b      	lsrs	r3, r3, #28
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	019b      	lsls	r3, r3, #6
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	3b01      	subs	r3, #1
 8006416:	041b      	lsls	r3, r3, #16
 8006418:	431a      	orrs	r2, r3
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	061b      	lsls	r3, r3, #24
 800641e:	431a      	orrs	r2, r3
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	071b      	lsls	r3, r3, #28
 8006424:	4925      	ldr	r1, [pc, #148]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006434:	2b00      	cmp	r3, #0
 8006436:	d016      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	019b      	lsls	r3, r3, #6
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	3b01      	subs	r3, #1
 800644c:	041b      	lsls	r3, r3, #16
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	061b      	lsls	r3, r3, #24
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	071b      	lsls	r3, r3, #28
 800645e:	4917      	ldr	r1, [pc, #92]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006466:	4b16      	ldr	r3, [pc, #88]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006468:	2201      	movs	r2, #1
 800646a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800646c:	f7fc fa36 	bl	80028dc <HAL_GetTick>
 8006470:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006474:	f7fc fa32 	bl	80028dc <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e09f      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006486:	4b0d      	ldr	r3, [pc, #52]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	2b01      	cmp	r3, #1
 8006496:	f040 8095 	bne.w	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800649a:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064a0:	f7fc fa1c 	bl	80028dc <HAL_GetTick>
 80064a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064a6:	e00f      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80064a8:	f7fc fa18 	bl	80028dc <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d908      	bls.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e085      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80064ba:	bf00      	nop
 80064bc:	40023800 	.word	0x40023800
 80064c0:	42470068 	.word	0x42470068
 80064c4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064c8:	4b41      	ldr	r3, [pc, #260]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064d4:	d0e8      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x566>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d009      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d02b      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d127      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80064fe:	4b34      	ldr	r3, [pc, #208]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006504:	0c1b      	lsrs	r3, r3, #16
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	3301      	adds	r3, #1
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	019b      	lsls	r3, r3, #6
 800651a:	431a      	orrs	r2, r3
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	3b01      	subs	r3, #1
 8006522:	041b      	lsls	r3, r3, #16
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	061b      	lsls	r3, r3, #24
 800652c:	4928      	ldr	r1, [pc, #160]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006534:	4b26      	ldr	r3, [pc, #152]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800653a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006542:	3b01      	subs	r3, #1
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	4922      	ldr	r1, [pc, #136]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006556:	2b00      	cmp	r3, #0
 8006558:	d01d      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006562:	d118      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006564:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656a:	0e1b      	lsrs	r3, r3, #24
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	019b      	lsls	r3, r3, #6
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	085b      	lsrs	r3, r3, #1
 8006584:	3b01      	subs	r3, #1
 8006586:	041b      	lsls	r3, r3, #16
 8006588:	431a      	orrs	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	061b      	lsls	r3, r3, #24
 800658e:	4910      	ldr	r1, [pc, #64]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006596:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006598:	2201      	movs	r2, #1
 800659a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800659c:	f7fc f99e 	bl	80028dc <HAL_GetTick>
 80065a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065a2:	e008      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80065a4:	f7fc f99a 	bl	80028dc <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e007      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065c2:	d1ef      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3730      	adds	r7, #48	; 0x30
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40023800 	.word	0x40023800
 80065d4:	42470070 	.word	0x42470070

080065d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065dc:	b088      	sub	sp, #32
 80065de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065f4:	4bce      	ldr	r3, [pc, #824]	; (8006930 <HAL_RCC_GetSysClockFreq+0x358>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f003 030c 	and.w	r3, r3, #12
 80065fc:	2b0c      	cmp	r3, #12
 80065fe:	f200 818d 	bhi.w	800691c <HAL_RCC_GetSysClockFreq+0x344>
 8006602:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <HAL_RCC_GetSysClockFreq+0x30>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	0800663d 	.word	0x0800663d
 800660c:	0800691d 	.word	0x0800691d
 8006610:	0800691d 	.word	0x0800691d
 8006614:	0800691d 	.word	0x0800691d
 8006618:	08006643 	.word	0x08006643
 800661c:	0800691d 	.word	0x0800691d
 8006620:	0800691d 	.word	0x0800691d
 8006624:	0800691d 	.word	0x0800691d
 8006628:	08006649 	.word	0x08006649
 800662c:	0800691d 	.word	0x0800691d
 8006630:	0800691d 	.word	0x0800691d
 8006634:	0800691d 	.word	0x0800691d
 8006638:	080067bd 	.word	0x080067bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800663c:	4bbd      	ldr	r3, [pc, #756]	; (8006934 <HAL_RCC_GetSysClockFreq+0x35c>)
 800663e:	61bb      	str	r3, [r7, #24]
       break;
 8006640:	e16f      	b.n	8006922 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006642:	4bbd      	ldr	r3, [pc, #756]	; (8006938 <HAL_RCC_GetSysClockFreq+0x360>)
 8006644:	61bb      	str	r3, [r7, #24]
      break;
 8006646:	e16c      	b.n	8006922 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006648:	4bb9      	ldr	r3, [pc, #740]	; (8006930 <HAL_RCC_GetSysClockFreq+0x358>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006650:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006652:	4bb7      	ldr	r3, [pc, #732]	; (8006930 <HAL_RCC_GetSysClockFreq+0x358>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d053      	beq.n	8006706 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800665e:	4bb4      	ldr	r3, [pc, #720]	; (8006930 <HAL_RCC_GetSysClockFreq+0x358>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	099b      	lsrs	r3, r3, #6
 8006664:	461a      	mov	r2, r3
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800666e:	f04f 0100 	mov.w	r1, #0
 8006672:	ea02 0400 	and.w	r4, r2, r0
 8006676:	603c      	str	r4, [r7, #0]
 8006678:	400b      	ands	r3, r1
 800667a:	607b      	str	r3, [r7, #4]
 800667c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006680:	4620      	mov	r0, r4
 8006682:	4629      	mov	r1, r5
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	014b      	lsls	r3, r1, #5
 800668e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006692:	0142      	lsls	r2, r0, #5
 8006694:	4610      	mov	r0, r2
 8006696:	4619      	mov	r1, r3
 8006698:	4623      	mov	r3, r4
 800669a:	1ac0      	subs	r0, r0, r3
 800669c:	462b      	mov	r3, r5
 800669e:	eb61 0103 	sbc.w	r1, r1, r3
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	f04f 0300 	mov.w	r3, #0
 80066aa:	018b      	lsls	r3, r1, #6
 80066ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80066b0:	0182      	lsls	r2, r0, #6
 80066b2:	1a12      	subs	r2, r2, r0
 80066b4:	eb63 0301 	sbc.w	r3, r3, r1
 80066b8:	f04f 0000 	mov.w	r0, #0
 80066bc:	f04f 0100 	mov.w	r1, #0
 80066c0:	00d9      	lsls	r1, r3, #3
 80066c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066c6:	00d0      	lsls	r0, r2, #3
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4621      	mov	r1, r4
 80066ce:	1852      	adds	r2, r2, r1
 80066d0:	4629      	mov	r1, r5
 80066d2:	eb43 0101 	adc.w	r1, r3, r1
 80066d6:	460b      	mov	r3, r1
 80066d8:	f04f 0000 	mov.w	r0, #0
 80066dc:	f04f 0100 	mov.w	r1, #0
 80066e0:	0259      	lsls	r1, r3, #9
 80066e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80066e6:	0250      	lsls	r0, r2, #9
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4610      	mov	r0, r2
 80066ee:	4619      	mov	r1, r3
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f04f 0300 	mov.w	r3, #0
 80066f8:	f7f9 fd84 	bl	8000204 <__aeabi_uldivmod>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4613      	mov	r3, r2
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	e04c      	b.n	80067a0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006706:	4b8a      	ldr	r3, [pc, #552]	; (8006930 <HAL_RCC_GetSysClockFreq+0x358>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	099b      	lsrs	r3, r3, #6
 800670c:	461a      	mov	r2, r3
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006716:	f04f 0100 	mov.w	r1, #0
 800671a:	ea02 0a00 	and.w	sl, r2, r0
 800671e:	ea03 0b01 	and.w	fp, r3, r1
 8006722:	4650      	mov	r0, sl
 8006724:	4659      	mov	r1, fp
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	014b      	lsls	r3, r1, #5
 8006730:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006734:	0142      	lsls	r2, r0, #5
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	ebb0 000a 	subs.w	r0, r0, sl
 800673e:	eb61 010b 	sbc.w	r1, r1, fp
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	018b      	lsls	r3, r1, #6
 800674c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006750:	0182      	lsls	r2, r0, #6
 8006752:	1a12      	subs	r2, r2, r0
 8006754:	eb63 0301 	sbc.w	r3, r3, r1
 8006758:	f04f 0000 	mov.w	r0, #0
 800675c:	f04f 0100 	mov.w	r1, #0
 8006760:	00d9      	lsls	r1, r3, #3
 8006762:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006766:	00d0      	lsls	r0, r2, #3
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	eb12 020a 	adds.w	r2, r2, sl
 8006770:	eb43 030b 	adc.w	r3, r3, fp
 8006774:	f04f 0000 	mov.w	r0, #0
 8006778:	f04f 0100 	mov.w	r1, #0
 800677c:	0299      	lsls	r1, r3, #10
 800677e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006782:	0290      	lsls	r0, r2, #10
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	461a      	mov	r2, r3
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	f7f9 fd36 	bl	8000204 <__aeabi_uldivmod>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4613      	mov	r3, r2
 800679e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067a0:	4b63      	ldr	r3, [pc, #396]	; (8006930 <HAL_RCC_GetSysClockFreq+0x358>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	3301      	adds	r3, #1
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80067b0:	69fa      	ldr	r2, [r7, #28]
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b8:	61bb      	str	r3, [r7, #24]
      break;
 80067ba:	e0b2      	b.n	8006922 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067bc:	4b5c      	ldr	r3, [pc, #368]	; (8006930 <HAL_RCC_GetSysClockFreq+0x358>)
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067c4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067c6:	4b5a      	ldr	r3, [pc, #360]	; (8006930 <HAL_RCC_GetSysClockFreq+0x358>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d04d      	beq.n	800686e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067d2:	4b57      	ldr	r3, [pc, #348]	; (8006930 <HAL_RCC_GetSysClockFreq+0x358>)
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	099b      	lsrs	r3, r3, #6
 80067d8:	461a      	mov	r2, r3
 80067da:	f04f 0300 	mov.w	r3, #0
 80067de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80067e2:	f04f 0100 	mov.w	r1, #0
 80067e6:	ea02 0800 	and.w	r8, r2, r0
 80067ea:	ea03 0901 	and.w	r9, r3, r1
 80067ee:	4640      	mov	r0, r8
 80067f0:	4649      	mov	r1, r9
 80067f2:	f04f 0200 	mov.w	r2, #0
 80067f6:	f04f 0300 	mov.w	r3, #0
 80067fa:	014b      	lsls	r3, r1, #5
 80067fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006800:	0142      	lsls	r2, r0, #5
 8006802:	4610      	mov	r0, r2
 8006804:	4619      	mov	r1, r3
 8006806:	ebb0 0008 	subs.w	r0, r0, r8
 800680a:	eb61 0109 	sbc.w	r1, r1, r9
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	018b      	lsls	r3, r1, #6
 8006818:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800681c:	0182      	lsls	r2, r0, #6
 800681e:	1a12      	subs	r2, r2, r0
 8006820:	eb63 0301 	sbc.w	r3, r3, r1
 8006824:	f04f 0000 	mov.w	r0, #0
 8006828:	f04f 0100 	mov.w	r1, #0
 800682c:	00d9      	lsls	r1, r3, #3
 800682e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006832:	00d0      	lsls	r0, r2, #3
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	eb12 0208 	adds.w	r2, r2, r8
 800683c:	eb43 0309 	adc.w	r3, r3, r9
 8006840:	f04f 0000 	mov.w	r0, #0
 8006844:	f04f 0100 	mov.w	r1, #0
 8006848:	0259      	lsls	r1, r3, #9
 800684a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800684e:	0250      	lsls	r0, r2, #9
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4610      	mov	r0, r2
 8006856:	4619      	mov	r1, r3
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	461a      	mov	r2, r3
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	f7f9 fcd0 	bl	8000204 <__aeabi_uldivmod>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4613      	mov	r3, r2
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	e04a      	b.n	8006904 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800686e:	4b30      	ldr	r3, [pc, #192]	; (8006930 <HAL_RCC_GetSysClockFreq+0x358>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	099b      	lsrs	r3, r3, #6
 8006874:	461a      	mov	r2, r3
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800687e:	f04f 0100 	mov.w	r1, #0
 8006882:	ea02 0400 	and.w	r4, r2, r0
 8006886:	ea03 0501 	and.w	r5, r3, r1
 800688a:	4620      	mov	r0, r4
 800688c:	4629      	mov	r1, r5
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	014b      	lsls	r3, r1, #5
 8006898:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800689c:	0142      	lsls	r2, r0, #5
 800689e:	4610      	mov	r0, r2
 80068a0:	4619      	mov	r1, r3
 80068a2:	1b00      	subs	r0, r0, r4
 80068a4:	eb61 0105 	sbc.w	r1, r1, r5
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	018b      	lsls	r3, r1, #6
 80068b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80068b6:	0182      	lsls	r2, r0, #6
 80068b8:	1a12      	subs	r2, r2, r0
 80068ba:	eb63 0301 	sbc.w	r3, r3, r1
 80068be:	f04f 0000 	mov.w	r0, #0
 80068c2:	f04f 0100 	mov.w	r1, #0
 80068c6:	00d9      	lsls	r1, r3, #3
 80068c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068cc:	00d0      	lsls	r0, r2, #3
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	1912      	adds	r2, r2, r4
 80068d4:	eb45 0303 	adc.w	r3, r5, r3
 80068d8:	f04f 0000 	mov.w	r0, #0
 80068dc:	f04f 0100 	mov.w	r1, #0
 80068e0:	0299      	lsls	r1, r3, #10
 80068e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80068e6:	0290      	lsls	r0, r2, #10
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4610      	mov	r0, r2
 80068ee:	4619      	mov	r1, r3
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	f7f9 fc84 	bl	8000204 <__aeabi_uldivmod>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4613      	mov	r3, r2
 8006902:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006904:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <HAL_RCC_GetSysClockFreq+0x358>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	0f1b      	lsrs	r3, r3, #28
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	fbb2 f3f3 	udiv	r3, r2, r3
 8006918:	61bb      	str	r3, [r7, #24]
      break;
 800691a:	e002      	b.n	8006922 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800691c:	4b05      	ldr	r3, [pc, #20]	; (8006934 <HAL_RCC_GetSysClockFreq+0x35c>)
 800691e:	61bb      	str	r3, [r7, #24]
      break;
 8006920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006922:	69bb      	ldr	r3, [r7, #24]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3720      	adds	r7, #32
 8006928:	46bd      	mov	sp, r7
 800692a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800692e:	bf00      	nop
 8006930:	40023800 	.word	0x40023800
 8006934:	00f42400 	.word	0x00f42400
 8006938:	007a1200 	.word	0x007a1200

0800693c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e28d      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 8083 	beq.w	8006a62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800695c:	4b94      	ldr	r3, [pc, #592]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 030c 	and.w	r3, r3, #12
 8006964:	2b04      	cmp	r3, #4
 8006966:	d019      	beq.n	800699c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006968:	4b91      	ldr	r3, [pc, #580]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006970:	2b08      	cmp	r3, #8
 8006972:	d106      	bne.n	8006982 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006974:	4b8e      	ldr	r3, [pc, #568]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800697c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006980:	d00c      	beq.n	800699c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006982:	4b8b      	ldr	r3, [pc, #556]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800698a:	2b0c      	cmp	r3, #12
 800698c:	d112      	bne.n	80069b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800698e:	4b88      	ldr	r3, [pc, #544]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800699a:	d10b      	bne.n	80069b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800699c:	4b84      	ldr	r3, [pc, #528]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d05b      	beq.n	8006a60 <HAL_RCC_OscConfig+0x124>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d157      	bne.n	8006a60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e25a      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069bc:	d106      	bne.n	80069cc <HAL_RCC_OscConfig+0x90>
 80069be:	4b7c      	ldr	r3, [pc, #496]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a7b      	ldr	r2, [pc, #492]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 80069c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	e01d      	b.n	8006a08 <HAL_RCC_OscConfig+0xcc>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069d4:	d10c      	bne.n	80069f0 <HAL_RCC_OscConfig+0xb4>
 80069d6:	4b76      	ldr	r3, [pc, #472]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a75      	ldr	r2, [pc, #468]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 80069dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	4b73      	ldr	r3, [pc, #460]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a72      	ldr	r2, [pc, #456]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 80069e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	e00b      	b.n	8006a08 <HAL_RCC_OscConfig+0xcc>
 80069f0:	4b6f      	ldr	r3, [pc, #444]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a6e      	ldr	r2, [pc, #440]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 80069f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	4b6c      	ldr	r3, [pc, #432]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a6b      	ldr	r2, [pc, #428]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d013      	beq.n	8006a38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fb ff64 	bl	80028dc <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a18:	f7fb ff60 	bl	80028dc <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b64      	cmp	r3, #100	; 0x64
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e21f      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2a:	4b61      	ldr	r3, [pc, #388]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCC_OscConfig+0xdc>
 8006a36:	e014      	b.n	8006a62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a38:	f7fb ff50 	bl	80028dc <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a40:	f7fb ff4c 	bl	80028dc <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b64      	cmp	r3, #100	; 0x64
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e20b      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a52:	4b57      	ldr	r3, [pc, #348]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x104>
 8006a5e:	e000      	b.n	8006a62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d06f      	beq.n	8006b4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a6e:	4b50      	ldr	r3, [pc, #320]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 030c 	and.w	r3, r3, #12
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d017      	beq.n	8006aaa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a7a:	4b4d      	ldr	r3, [pc, #308]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d105      	bne.n	8006a92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a86:	4b4a      	ldr	r3, [pc, #296]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00b      	beq.n	8006aaa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a92:	4b47      	ldr	r3, [pc, #284]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a9a:	2b0c      	cmp	r3, #12
 8006a9c:	d11c      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a9e:	4b44      	ldr	r3, [pc, #272]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d116      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aaa:	4b41      	ldr	r3, [pc, #260]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x186>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d001      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e1d3      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac2:	4b3b      	ldr	r3, [pc, #236]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	4937      	ldr	r1, [pc, #220]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ad6:	e03a      	b.n	8006b4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d020      	beq.n	8006b22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ae0:	4b34      	ldr	r3, [pc, #208]	; (8006bb4 <HAL_RCC_OscConfig+0x278>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae6:	f7fb fef9 	bl	80028dc <HAL_GetTick>
 8006aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aec:	e008      	b.n	8006b00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aee:	f7fb fef5 	bl	80028dc <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e1b4      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b00:	4b2b      	ldr	r3, [pc, #172]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0f0      	beq.n	8006aee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b0c:	4b28      	ldr	r3, [pc, #160]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	4925      	ldr	r1, [pc, #148]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	600b      	str	r3, [r1, #0]
 8006b20:	e015      	b.n	8006b4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b22:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <HAL_RCC_OscConfig+0x278>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b28:	f7fb fed8 	bl	80028dc <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b30:	f7fb fed4 	bl	80028dc <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e193      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b42:	4b1b      	ldr	r3, [pc, #108]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1f0      	bne.n	8006b30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d036      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d016      	beq.n	8006b90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b62:	4b15      	ldr	r3, [pc, #84]	; (8006bb8 <HAL_RCC_OscConfig+0x27c>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b68:	f7fb feb8 	bl	80028dc <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b70:	f7fb feb4 	bl	80028dc <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e173      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b82:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <HAL_RCC_OscConfig+0x274>)
 8006b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d0f0      	beq.n	8006b70 <HAL_RCC_OscConfig+0x234>
 8006b8e:	e01b      	b.n	8006bc8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b90:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <HAL_RCC_OscConfig+0x27c>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b96:	f7fb fea1 	bl	80028dc <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b9c:	e00e      	b.n	8006bbc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b9e:	f7fb fe9d 	bl	80028dc <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d907      	bls.n	8006bbc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e15c      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	42470000 	.word	0x42470000
 8006bb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bbc:	4b8a      	ldr	r3, [pc, #552]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1ea      	bne.n	8006b9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8097 	beq.w	8006d04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bda:	4b83      	ldr	r3, [pc, #524]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10f      	bne.n	8006c06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006be6:	2300      	movs	r3, #0
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	4b7f      	ldr	r3, [pc, #508]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	4a7e      	ldr	r2, [pc, #504]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bf6:	4b7c      	ldr	r3, [pc, #496]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	60bb      	str	r3, [r7, #8]
 8006c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c06:	4b79      	ldr	r3, [pc, #484]	; (8006dec <HAL_RCC_OscConfig+0x4b0>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d118      	bne.n	8006c44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c12:	4b76      	ldr	r3, [pc, #472]	; (8006dec <HAL_RCC_OscConfig+0x4b0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a75      	ldr	r2, [pc, #468]	; (8006dec <HAL_RCC_OscConfig+0x4b0>)
 8006c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c1e:	f7fb fe5d 	bl	80028dc <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c26:	f7fb fe59 	bl	80028dc <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e118      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c38:	4b6c      	ldr	r3, [pc, #432]	; (8006dec <HAL_RCC_OscConfig+0x4b0>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d106      	bne.n	8006c5a <HAL_RCC_OscConfig+0x31e>
 8006c4c:	4b66      	ldr	r3, [pc, #408]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c50:	4a65      	ldr	r2, [pc, #404]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006c52:	f043 0301 	orr.w	r3, r3, #1
 8006c56:	6713      	str	r3, [r2, #112]	; 0x70
 8006c58:	e01c      	b.n	8006c94 <HAL_RCC_OscConfig+0x358>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	2b05      	cmp	r3, #5
 8006c60:	d10c      	bne.n	8006c7c <HAL_RCC_OscConfig+0x340>
 8006c62:	4b61      	ldr	r3, [pc, #388]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	4a60      	ldr	r2, [pc, #384]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006c68:	f043 0304 	orr.w	r3, r3, #4
 8006c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6e:	4b5e      	ldr	r3, [pc, #376]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c72:	4a5d      	ldr	r2, [pc, #372]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006c74:	f043 0301 	orr.w	r3, r3, #1
 8006c78:	6713      	str	r3, [r2, #112]	; 0x70
 8006c7a:	e00b      	b.n	8006c94 <HAL_RCC_OscConfig+0x358>
 8006c7c:	4b5a      	ldr	r3, [pc, #360]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c80:	4a59      	ldr	r2, [pc, #356]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	6713      	str	r3, [r2, #112]	; 0x70
 8006c88:	4b57      	ldr	r3, [pc, #348]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8c:	4a56      	ldr	r2, [pc, #344]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006c8e:	f023 0304 	bic.w	r3, r3, #4
 8006c92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d015      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c9c:	f7fb fe1e 	bl	80028dc <HAL_GetTick>
 8006ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca2:	e00a      	b.n	8006cba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ca4:	f7fb fe1a 	bl	80028dc <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e0d7      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cba:	4b4b      	ldr	r3, [pc, #300]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0ee      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x368>
 8006cc6:	e014      	b.n	8006cf2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc8:	f7fb fe08 	bl	80028dc <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cce:	e00a      	b.n	8006ce6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cd0:	f7fb fe04 	bl	80028dc <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e0c1      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce6:	4b40      	ldr	r3, [pc, #256]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1ee      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d105      	bne.n	8006d04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cf8:	4b3b      	ldr	r3, [pc, #236]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	4a3a      	ldr	r2, [pc, #232]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80ad 	beq.w	8006e68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d0e:	4b36      	ldr	r3, [pc, #216]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 030c 	and.w	r3, r3, #12
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	d060      	beq.n	8006ddc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d145      	bne.n	8006dae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d22:	4b33      	ldr	r3, [pc, #204]	; (8006df0 <HAL_RCC_OscConfig+0x4b4>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d28:	f7fb fdd8 	bl	80028dc <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d30:	f7fb fdd4 	bl	80028dc <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e093      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d42:	4b29      	ldr	r3, [pc, #164]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f0      	bne.n	8006d30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69da      	ldr	r2, [r3, #28]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	019b      	lsls	r3, r3, #6
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	085b      	lsrs	r3, r3, #1
 8006d66:	3b01      	subs	r3, #1
 8006d68:	041b      	lsls	r3, r3, #16
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	061b      	lsls	r3, r3, #24
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d78:	071b      	lsls	r3, r3, #28
 8006d7a:	491b      	ldr	r1, [pc, #108]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d80:	4b1b      	ldr	r3, [pc, #108]	; (8006df0 <HAL_RCC_OscConfig+0x4b4>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d86:	f7fb fda9 	bl	80028dc <HAL_GetTick>
 8006d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d8c:	e008      	b.n	8006da0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d8e:	f7fb fda5 	bl	80028dc <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e064      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006da0:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0f0      	beq.n	8006d8e <HAL_RCC_OscConfig+0x452>
 8006dac:	e05c      	b.n	8006e68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dae:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <HAL_RCC_OscConfig+0x4b4>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db4:	f7fb fd92 	bl	80028dc <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dbc:	f7fb fd8e 	bl	80028dc <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e04d      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dce:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <HAL_RCC_OscConfig+0x4ac>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f0      	bne.n	8006dbc <HAL_RCC_OscConfig+0x480>
 8006dda:	e045      	b.n	8006e68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d107      	bne.n	8006df4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e040      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
 8006de8:	40023800 	.word	0x40023800
 8006dec:	40007000 	.word	0x40007000
 8006df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006df4:	4b1f      	ldr	r3, [pc, #124]	; (8006e74 <HAL_RCC_OscConfig+0x538>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d030      	beq.n	8006e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d129      	bne.n	8006e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d122      	bne.n	8006e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e24:	4013      	ands	r3, r2
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d119      	bne.n	8006e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	085b      	lsrs	r3, r3, #1
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d10f      	bne.n	8006e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d107      	bne.n	8006e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d001      	beq.n	8006e68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	40023800 	.word	0x40023800

08006e78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e083      	b.n	8006f92 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	7f5b      	ldrb	r3, [r3, #29]
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d105      	bne.n	8006ea0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fb fab4 	bl	8002408 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	22ca      	movs	r2, #202	; 0xca
 8006eac:	625a      	str	r2, [r3, #36]	; 0x24
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2253      	movs	r2, #83	; 0x53
 8006eb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f9fb 	bl	80072b2 <RTC_EnterInitMode>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d008      	beq.n	8006ed4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	22ff      	movs	r2, #255	; 0xff
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2204      	movs	r2, #4
 8006ece:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e05e      	b.n	8006f92 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6899      	ldr	r1, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	431a      	orrs	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	68d2      	ldr	r2, [r2, #12]
 8006f0e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6919      	ldr	r1, [r3, #16]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	041a      	lsls	r2, r3, #16
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f32:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10e      	bne.n	8006f60 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f98d 	bl	8007262 <HAL_RTC_WaitForSynchro>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d008      	beq.n	8006f60 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	22ff      	movs	r2, #255	; 0xff
 8006f54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2204      	movs	r2, #4
 8006f5a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e018      	b.n	8006f92 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f6e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	22ff      	movs	r2, #255	; 0xff
 8006f88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006f90:	2300      	movs	r3, #0
  }
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006f9a:	b590      	push	{r4, r7, lr}
 8006f9c:	b087      	sub	sp, #28
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	7f1b      	ldrb	r3, [r3, #28]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d101      	bne.n	8006fb6 <HAL_RTC_SetTime+0x1c>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e0aa      	b.n	800710c <HAL_RTC_SetTime+0x172>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d126      	bne.n	8007016 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d102      	bne.n	8006fdc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 f992 	bl	800730a <RTC_ByteToBcd2>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f98b 	bl	800730a <RTC_ByteToBcd2>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006ff8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	789b      	ldrb	r3, [r3, #2]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 f983 	bl	800730a <RTC_ByteToBcd2>
 8007004:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007006:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	78db      	ldrb	r3, [r3, #3]
 800700e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007010:	4313      	orrs	r3, r2
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	e018      	b.n	8007048 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2200      	movs	r2, #0
 8007028:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	785b      	ldrb	r3, [r3, #1]
 8007034:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007036:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800703c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	78db      	ldrb	r3, [r3, #3]
 8007042:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007044:	4313      	orrs	r3, r2
 8007046:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	22ca      	movs	r2, #202	; 0xca
 800704e:	625a      	str	r2, [r3, #36]	; 0x24
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2253      	movs	r2, #83	; 0x53
 8007056:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f92a 	bl	80072b2 <RTC_EnterInitMode>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00b      	beq.n	800707c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	22ff      	movs	r2, #255	; 0xff
 800706a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2204      	movs	r2, #4
 8007070:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e047      	b.n	800710c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007086:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800708a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800709a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6899      	ldr	r1, [r3, #8]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	431a      	orrs	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d111      	bne.n	80070f6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f8c5 	bl	8007262 <HAL_RTC_WaitForSynchro>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	22ff      	movs	r2, #255	; 0xff
 80070e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2204      	movs	r2, #4
 80070ea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e00a      	b.n	800710c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	22ff      	movs	r2, #255	; 0xff
 80070fc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800710a:	2300      	movs	r3, #0
  }
}
 800710c:	4618      	mov	r0, r3
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	bd90      	pop	{r4, r7, pc}

08007114 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007114:	b590      	push	{r4, r7, lr}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	7f1b      	ldrb	r3, [r3, #28]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d101      	bne.n	8007130 <HAL_RTC_SetDate+0x1c>
 800712c:	2302      	movs	r3, #2
 800712e:	e094      	b.n	800725a <HAL_RTC_SetDate+0x146>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2201      	movs	r2, #1
 8007134:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2202      	movs	r2, #2
 800713a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10e      	bne.n	8007160 <HAL_RTC_SetDate+0x4c>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	f003 0310 	and.w	r3, r3, #16
 800714a:	2b00      	cmp	r3, #0
 800714c:	d008      	beq.n	8007160 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	f023 0310 	bic.w	r3, r3, #16
 8007156:	b2db      	uxtb	r3, r3
 8007158:	330a      	adds	r3, #10
 800715a:	b2da      	uxtb	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d11c      	bne.n	80071a0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	78db      	ldrb	r3, [r3, #3]
 800716a:	4618      	mov	r0, r3
 800716c:	f000 f8cd 	bl	800730a <RTC_ByteToBcd2>
 8007170:	4603      	mov	r3, r0
 8007172:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	785b      	ldrb	r3, [r3, #1]
 8007178:	4618      	mov	r0, r3
 800717a:	f000 f8c6 	bl	800730a <RTC_ByteToBcd2>
 800717e:	4603      	mov	r3, r0
 8007180:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007182:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	789b      	ldrb	r3, [r3, #2]
 8007188:	4618      	mov	r0, r3
 800718a:	f000 f8be 	bl	800730a <RTC_ByteToBcd2>
 800718e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007190:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	e00e      	b.n	80071be <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	78db      	ldrb	r3, [r3, #3]
 80071a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80071ac:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80071b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	22ca      	movs	r2, #202	; 0xca
 80071c4:	625a      	str	r2, [r3, #36]	; 0x24
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2253      	movs	r2, #83	; 0x53
 80071cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 f86f 	bl	80072b2 <RTC_EnterInitMode>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	22ff      	movs	r2, #255	; 0xff
 80071e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2204      	movs	r2, #4
 80071e6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e033      	b.n	800725a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007200:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007210:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	d111      	bne.n	8007244 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f81e 	bl	8007262 <HAL_RTC_WaitForSynchro>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00b      	beq.n	8007244 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	22ff      	movs	r2, #255	; 0xff
 8007232:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2204      	movs	r2, #4
 8007238:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e00a      	b.n	800725a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	22ff      	movs	r2, #255	; 0xff
 800724a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2201      	movs	r2, #1
 8007250:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007258:	2300      	movs	r3, #0
  }
}
 800725a:	4618      	mov	r0, r3
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	bd90      	pop	{r4, r7, pc}

08007262 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800727c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800727e:	f7fb fb2d 	bl	80028dc <HAL_GetTick>
 8007282:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007284:	e009      	b.n	800729a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007286:	f7fb fb29 	bl	80028dc <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007294:	d901      	bls.n	800729a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e007      	b.n	80072aa <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0ee      	beq.n	8007286 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d119      	bne.n	8007300 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f04f 32ff 	mov.w	r2, #4294967295
 80072d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072d6:	f7fb fb01 	bl	80028dc <HAL_GetTick>
 80072da:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80072dc:	e009      	b.n	80072f2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80072de:	f7fb fafd 	bl	80028dc <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072ec:	d901      	bls.n	80072f2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e007      	b.n	8007302 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0ee      	beq.n	80072de <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800730a:	b480      	push	{r7}
 800730c:	b085      	sub	sp, #20
 800730e:	af00      	add	r7, sp, #0
 8007310:	4603      	mov	r3, r0
 8007312:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007318:	e005      	b.n	8007326 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3301      	adds	r3, #1
 800731e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	3b0a      	subs	r3, #10
 8007324:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	2b09      	cmp	r3, #9
 800732a:	d8f6      	bhi.n	800731a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	b2da      	uxtb	r2, r3
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	4313      	orrs	r3, r2
 8007338:	b2db      	uxtb	r3, r3
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e022      	b.n	800739e <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d105      	bne.n	8007370 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fb f876 	bl	800245c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2203      	movs	r2, #3
 8007374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f815 	bl	80073a8 <HAL_SD_InitCard>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e00a      	b.n	800739e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80073a8:	b5b0      	push	{r4, r5, r7, lr}
 80073aa:	b08e      	sub	sp, #56	; 0x38
 80073ac:	af04      	add	r7, sp, #16
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80073b4:	2300      	movs	r3, #0
 80073b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80073bc:	2300      	movs	r3, #0
 80073be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80073c4:	2376      	movs	r3, #118	; 0x76
 80073c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681d      	ldr	r5, [r3, #0]
 80073cc:	466c      	mov	r4, sp
 80073ce:	f107 0314 	add.w	r3, r7, #20
 80073d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80073d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80073da:	f107 0308 	add.w	r3, r7, #8
 80073de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073e0:	4628      	mov	r0, r5
 80073e2:	f001 fd79 	bl	8008ed8 <SDIO_Init>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80073ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e04c      	b.n	8007492 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80073f8:	4b28      	ldr	r3, [pc, #160]	; (800749c <HAL_SD_InitCard+0xf4>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4618      	mov	r0, r3
 8007404:	f001 fdb1 	bl	8008f6a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007408:	4b24      	ldr	r3, [pc, #144]	; (800749c <HAL_SD_InitCard+0xf4>)
 800740a:	2201      	movs	r2, #1
 800740c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 ffee 	bl	80083f0 <SD_PowerON>
 8007414:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00b      	beq.n	8007434 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e02e      	b.n	8007492 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 ff0f 	bl	8008258 <SD_InitCard>
 800743a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00b      	beq.n	800745a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e01b      	b.n	8007492 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007462:	4618      	mov	r0, r3
 8007464:	f001 fe14 	bl	8009090 <SDMMC_CmdBlockLength>
 8007468:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00f      	beq.n	8007490 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a0a      	ldr	r2, [pc, #40]	; (80074a0 <HAL_SD_InitCard+0xf8>)
 8007476:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e000      	b.n	8007492 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3728      	adds	r7, #40	; 0x28
 8007496:	46bd      	mov	sp, r7
 8007498:	bdb0      	pop	{r4, r5, r7, pc}
 800749a:	bf00      	nop
 800749c:	422580a0 	.word	0x422580a0
 80074a0:	004005ff 	.word	0x004005ff

080074a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08c      	sub	sp, #48	; 0x30
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d107      	bne.n	80074cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e0be      	b.n	800764a <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	f040 80b7 	bne.w	8007648 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80074e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	441a      	add	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d907      	bls.n	80074fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e0a5      	b.n	800764a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2203      	movs	r2, #3
 8007502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2200      	movs	r2, #0
 800750c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800751c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	4a4c      	ldr	r2, [pc, #304]	; (8007654 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8007524:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	4a4b      	ldr	r2, [pc, #300]	; (8007658 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800752c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	2200      	movs	r2, #0
 8007534:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	2200      	movs	r2, #0
 800753c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3380      	adds	r3, #128	; 0x80
 8007564:	4619      	mov	r1, r3
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	025b      	lsls	r3, r3, #9
 800756c:	089b      	lsrs	r3, r3, #2
 800756e:	f7fc fb63 	bl	8003c38 <HAL_DMA_Start_IT>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d017      	beq.n	80075a8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007586:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a33      	ldr	r2, [pc, #204]	; (800765c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800758e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e050      	b.n	800764a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80075a8:	4b2d      	ldr	r3, [pc, #180]	; (8007660 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d002      	beq.n	80075bc <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 80075b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b8:	025b      	lsls	r3, r3, #9
 80075ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80075bc:	f04f 33ff 	mov.w	r3, #4294967295
 80075c0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	025b      	lsls	r3, r3, #9
 80075c6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80075c8:	2390      	movs	r3, #144	; 0x90
 80075ca:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80075cc:	2302      	movs	r3, #2
 80075ce:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80075d4:	2301      	movs	r3, #1
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f107 0210 	add.w	r2, r7, #16
 80075e0:	4611      	mov	r1, r2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 fd28 	bl	8009038 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d90a      	bls.n	8007604 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2282      	movs	r2, #130	; 0x82
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 fd8c 	bl	8009118 <SDMMC_CmdReadMultiBlock>
 8007600:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007602:	e009      	b.n	8007618 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2281      	movs	r2, #129	; 0x81
 8007608:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007610:	4618      	mov	r0, r3
 8007612:	f001 fd5f 	bl	80090d4 <SDMMC_CmdReadSingleBlock>
 8007616:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	2b00      	cmp	r3, #0
 800761c:	d012      	beq.n	8007644 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a0e      	ldr	r2, [pc, #56]	; (800765c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007624:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	431a      	orrs	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e002      	b.n	800764a <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	e000      	b.n	800764a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007648:	2302      	movs	r3, #2
  }
}
 800764a:	4618      	mov	r0, r3
 800764c:	3730      	adds	r7, #48	; 0x30
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	08008067 	.word	0x08008067
 8007658:	080080d9 	.word	0x080080d9
 800765c:	004005ff 	.word	0x004005ff
 8007660:	4225858c 	.word	0x4225858c

08007664 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08c      	sub	sp, #48	; 0x30
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d107      	bne.n	800768c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e0c1      	b.n	8007810 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b01      	cmp	r3, #1
 8007696:	f040 80ba 	bne.w	800780e <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80076a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	441a      	add	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d907      	bls.n	80076be <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e0a8      	b.n	8007810 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2203      	movs	r2, #3
 80076c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2200      	movs	r2, #0
 80076cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f042 021a 	orr.w	r2, r2, #26
 80076dc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e2:	4a4d      	ldr	r2, [pc, #308]	; (8007818 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 80076e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	4a4c      	ldr	r2, [pc, #304]	; (800781c <HAL_SD_WriteBlocks_DMA+0x1b8>)
 80076ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f2:	2200      	movs	r2, #0
 80076f4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d002      	beq.n	8007704 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	025b      	lsls	r3, r3, #9
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d90a      	bls.n	8007720 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	22a0      	movs	r2, #160	; 0xa0
 800770e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007716:	4618      	mov	r0, r3
 8007718:	f001 fd42 	bl	80091a0 <SDMMC_CmdWriteMultiBlock>
 800771c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800771e:	e009      	b.n	8007734 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2290      	movs	r2, #144	; 0x90
 8007724:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800772c:	4618      	mov	r0, r3
 800772e:	f001 fd15 	bl	800915c <SDMMC_CmdWriteSingleBlock>
 8007732:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	2b00      	cmp	r3, #0
 8007738:	d012      	beq.n	8007760 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a38      	ldr	r2, [pc, #224]	; (8007820 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007740:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	431a      	orrs	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e057      	b.n	8007810 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007760:	4b30      	ldr	r3, [pc, #192]	; (8007824 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007762:	2201      	movs	r2, #1
 8007764:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776a:	2240      	movs	r2, #64	; 0x40
 800776c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3380      	adds	r3, #128	; 0x80
 8007796:	461a      	mov	r2, r3
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	025b      	lsls	r3, r3, #9
 800779c:	089b      	lsrs	r3, r3, #2
 800779e:	f7fc fa4b 	bl	8003c38 <HAL_DMA_Start_IT>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d01a      	beq.n	80077de <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 021a 	bic.w	r2, r2, #26
 80077b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a18      	ldr	r2, [pc, #96]	; (8007820 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e018      	b.n	8007810 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80077de:	f04f 33ff 	mov.w	r3, #4294967295
 80077e2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	025b      	lsls	r3, r3, #9
 80077e8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80077ea:	2390      	movs	r3, #144	; 0x90
 80077ec:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80077ee:	2300      	movs	r3, #0
 80077f0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80077f6:	2301      	movs	r3, #1
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f107 0210 	add.w	r2, r7, #16
 8007802:	4611      	mov	r1, r2
 8007804:	4618      	mov	r0, r3
 8007806:	f001 fc17 	bl	8009038 <SDIO_ConfigData>

      return HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	e000      	b.n	8007810 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800780e:	2302      	movs	r3, #2
  }
}
 8007810:	4618      	mov	r0, r3
 8007812:	3730      	adds	r7, #48	; 0x30
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	0800803d 	.word	0x0800803d
 800781c:	080080d9 	.word	0x080080d9
 8007820:	004005ff 	.word	0x004005ff
 8007824:	4225858c 	.word	0x4225858c

08007828 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d008      	beq.n	8007856 <HAL_SD_IRQHandler+0x2e>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 ffed 	bl	800882e <SD_Read_IT>
 8007854:	e155      	b.n	8007b02 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 808f 	beq.w	8007984 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800786e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6812      	ldr	r2, [r2, #0]
 800787a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800787e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007882:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0201 	bic.w	r2, r2, #1
 8007892:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d039      	beq.n	8007912 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d104      	bne.n	80078b2 <HAL_SD_IRQHandler+0x8a>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d011      	beq.n	80078d6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 fc94 	bl	80091e4 <SDMMC_CmdStopTransfer>
 80078bc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	431a      	orrs	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f91f 	bl	8007b14 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f240 523a 	movw	r2, #1338	; 0x53a
 80078de:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d104      	bne.n	8007902 <HAL_SD_IRQHandler+0xda>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f003 fc76 	bl	800b1f4 <HAL_SD_RxCpltCallback>
 8007908:	e0fb      	b.n	8007b02 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f003 fc68 	bl	800b1e0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007910:	e0f7      	b.n	8007b02 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 80f2 	beq.w	8007b02 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b00      	cmp	r3, #0
 8007926:	d011      	beq.n	800794c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4618      	mov	r0, r3
 800792e:	f001 fc59 	bl	80091e4 <SDMMC_CmdStopTransfer>
 8007932:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	431a      	orrs	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f8e4 	bl	8007b14 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	f040 80d5 	bne.w	8007b02 <HAL_SD_IRQHandler+0x2da>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	f040 80cf 	bne.w	8007b02 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0208 	bic.w	r2, r2, #8
 8007972:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f003 fc2f 	bl	800b1e0 <HAL_SD_TxCpltCallback>
}
 8007982:	e0be      	b.n	8007b02 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d008      	beq.n	80079a4 <HAL_SD_IRQHandler+0x17c>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f003 0308 	and.w	r3, r3, #8
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 ff97 	bl	80088d0 <SD_Write_IT>
 80079a2:	e0ae      	b.n	8007b02 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079aa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 80a7 	beq.w	8007b02 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	f043 0202 	orr.w	r2, r3, #2
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d4:	f003 0308 	and.w	r3, r3, #8
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	f043 0208 	orr.w	r2, r3, #8
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ee:	f003 0320 	and.w	r3, r3, #32
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d005      	beq.n	8007a02 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	f043 0220 	orr.w	r2, r3, #32
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a08:	f003 0310 	and.w	r3, r3, #16
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a14:	f043 0210 	orr.w	r2, r3, #16
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f240 523a 	movw	r2, #1338	; 0x53a
 8007a24:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007a34:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f001 fbd2 	bl	80091e4 <SDMMC_CmdStopTransfer>
 8007a40:	4602      	mov	r2, r0
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f003 0308 	and.w	r3, r3, #8
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f855 	bl	8007b14 <HAL_SD_ErrorCallback>
}
 8007a6a:	e04a      	b.n	8007b02 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d045      	beq.n	8007b02 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <HAL_SD_IRQHandler+0x262>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d011      	beq.n	8007aae <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8e:	4a1f      	ldr	r2, [pc, #124]	; (8007b0c <HAL_SD_IRQHandler+0x2e4>)
 8007a90:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fc f926 	bl	8003ce8 <HAL_DMA_Abort_IT>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d02f      	beq.n	8007b02 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fb68 	bl	800817c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007aac:	e029      	b.n	8007b02 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <HAL_SD_IRQHandler+0x29a>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d011      	beq.n	8007ae6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	4a12      	ldr	r2, [pc, #72]	; (8007b10 <HAL_SD_IRQHandler+0x2e8>)
 8007ac8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fc f90a 	bl	8003ce8 <HAL_DMA_Abort_IT>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d013      	beq.n	8007b02 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fb83 	bl	80081ea <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007ae4:	e00d      	b.n	8007b02 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f003 fb66 	bl	800b1cc <HAL_SD_AbortCallback>
}
 8007b00:	e7ff      	b.n	8007b02 <HAL_SD_IRQHandler+0x2da>
 8007b02:	bf00      	nop
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	0800817d 	.word	0x0800817d
 8007b10:	080081eb 	.word	0x080081eb

08007b14 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b36:	0f9b      	lsrs	r3, r3, #30
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b42:	0e9b      	lsrs	r3, r3, #26
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b54:	0e1b      	lsrs	r3, r3, #24
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	f003 0303 	and.w	r3, r3, #3
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b66:	0c1b      	lsrs	r3, r3, #16
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b72:	0a1b      	lsrs	r3, r3, #8
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b88:	0d1b      	lsrs	r3, r3, #20
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b94:	0c1b      	lsrs	r3, r3, #16
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	f003 030f 	and.w	r3, r3, #15
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba6:	0bdb      	lsrs	r3, r3, #15
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb8:	0b9b      	lsrs	r3, r3, #14
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bca:	0b5b      	lsrs	r3, r3, #13
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bdc:	0b1b      	lsrs	r3, r3, #12
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2200      	movs	r2, #0
 8007bee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d163      	bne.n	8007cc0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bfc:	009a      	lsls	r2, r3, #2
 8007bfe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c02:	4013      	ands	r3, r2
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007c08:	0f92      	lsrs	r2, r2, #30
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c14:	0edb      	lsrs	r3, r3, #27
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	f003 0307 	and.w	r3, r3, #7
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c26:	0e1b      	lsrs	r3, r3, #24
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c38:	0d5b      	lsrs	r3, r3, #21
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c4a:	0c9b      	lsrs	r3, r3, #18
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c5c:	0bdb      	lsrs	r3, r3, #15
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	7e1b      	ldrb	r3, [r3, #24]
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	f003 0307 	and.w	r3, r3, #7
 8007c7e:	3302      	adds	r3, #2
 8007c80:	2201      	movs	r2, #1
 8007c82:	fa02 f303 	lsl.w	r3, r2, r3
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007c8a:	fb02 f203 	mul.w	r2, r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	7a1b      	ldrb	r3, [r3, #8]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	f003 030f 	and.w	r3, r3, #15
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	409a      	lsls	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007cac:	0a52      	lsrs	r2, r2, #9
 8007cae:	fb02 f203 	mul.w	r2, r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cbc:	661a      	str	r2, [r3, #96]	; 0x60
 8007cbe:	e031      	b.n	8007d24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d11d      	bne.n	8007d04 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ccc:	041b      	lsls	r3, r3, #16
 8007cce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd6:	0c1b      	lsrs	r3, r3, #16
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	029a      	lsls	r2, r3, #10
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	661a      	str	r2, [r3, #96]	; 0x60
 8007d02:	e00f      	b.n	8007d24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a58      	ldr	r2, [pc, #352]	; (8007e6c <HAL_SD_GetCardCSD+0x344>)
 8007d0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e09d      	b.n	8007e60 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d28:	0b9b      	lsrs	r3, r3, #14
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d3a:	09db      	lsrs	r3, r3, #7
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5c:	0fdb      	lsrs	r3, r3, #31
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d68:	0f5b      	lsrs	r3, r3, #29
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7a:	0e9b      	lsrs	r3, r3, #26
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	f003 0307 	and.w	r3, r3, #7
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8c:	0d9b      	lsrs	r3, r3, #22
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 030f 	and.w	r3, r3, #15
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9e:	0d5b      	lsrs	r3, r3, #21
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dba:	0c1b      	lsrs	r3, r3, #16
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dce:	0bdb      	lsrs	r3, r3, #15
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de2:	0b9b      	lsrs	r3, r3, #14
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df6:	0b5b      	lsrs	r3, r3, #13
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0a:	0b1b      	lsrs	r3, r3, #12
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1e:	0a9b      	lsrs	r3, r3, #10
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e32:	0a1b      	lsrs	r3, r3, #8
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e46:	085b      	lsrs	r3, r3, #1
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	004005ff 	.word	0x004005ff

08007e70 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007ec8:	b5b0      	push	{r4, r5, r7, lr}
 8007eca:	b08e      	sub	sp, #56	; 0x38
 8007ecc:	af04      	add	r7, sp, #16
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2203      	movs	r2, #3
 8007edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d02e      	beq.n	8007f46 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eee:	d106      	bne.n	8007efe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	639a      	str	r2, [r3, #56]	; 0x38
 8007efc:	e029      	b.n	8007f52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f04:	d10a      	bne.n	8007f1c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fb28 	bl	800855c <SD_WideBus_Enable>
 8007f0c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	431a      	orrs	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	639a      	str	r2, [r3, #56]	; 0x38
 8007f1a:	e01a      	b.n	8007f52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10a      	bne.n	8007f38 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fb65 	bl	80085f2 <SD_WideBus_Disable>
 8007f28:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	431a      	orrs	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	639a      	str	r2, [r3, #56]	; 0x38
 8007f36:	e00c      	b.n	8007f52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	639a      	str	r2, [r3, #56]	; 0x38
 8007f44:	e005      	b.n	8007f52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00b      	beq.n	8007f72 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a26      	ldr	r2, [pc, #152]	; (8007ff8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f70:	e01f      	b.n	8007fb2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681d      	ldr	r5, [r3, #0]
 8007f98:	466c      	mov	r4, sp
 8007f9a:	f107 0314 	add.w	r3, r7, #20
 8007f9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007fa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fa6:	f107 0308 	add.w	r3, r7, #8
 8007faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fac:	4628      	mov	r0, r5
 8007fae:	f000 ff93 	bl	8008ed8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f001 f868 	bl	8009090 <SDMMC_CmdBlockLength>
 8007fc0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00c      	beq.n	8007fe2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a0a      	ldr	r2, [pc, #40]	; (8007ff8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3728      	adds	r7, #40	; 0x28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	004005ff 	.word	0x004005ff

08007ffc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008008:	f107 030c 	add.w	r3, r7, #12
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fa7c 	bl	800850c <SD_SendStatus>
 8008014:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	0a5b      	lsrs	r3, r3, #9
 800802c:	f003 030f 	and.w	r3, r3, #15
 8008030:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008032:	693b      	ldr	r3, [r7, #16]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008058:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800805a:	bf00      	nop
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008078:	2b82      	cmp	r3, #130	; 0x82
 800807a:	d111      	bne.n	80080a0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4618      	mov	r0, r3
 8008082:	f001 f8af 	bl	80091e4 <SDMMC_CmdStopTransfer>
 8008086:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d008      	beq.n	80080a0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	431a      	orrs	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f7ff fd3a 	bl	8007b14 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0208 	bic.w	r2, r2, #8
 80080ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f240 523a 	movw	r2, #1338	; 0x53a
 80080b8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f003 f893 	bl	800b1f4 <HAL_SD_RxCpltCallback>
#endif
}
 80080ce:	bf00      	nop
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fb ffaa 	bl	8004040 <HAL_DMA_GetError>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d03e      	beq.n	8008170 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008100:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d002      	beq.n	800810e <SD_DMAError+0x36>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d12d      	bne.n	800816a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a19      	ldr	r2, [pc, #100]	; (8008178 <SD_DMAError+0xa0>)
 8008114:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008124:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008132:	6978      	ldr	r0, [r7, #20]
 8008134:	f7ff ff62 	bl	8007ffc <HAL_SD_GetCardState>
 8008138:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b06      	cmp	r3, #6
 800813e:	d002      	beq.n	8008146 <SD_DMAError+0x6e>
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b05      	cmp	r3, #5
 8008144:	d10a      	bne.n	800815c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4618      	mov	r0, r3
 800814c:	f001 f84a 	bl	80091e4 <SDMMC_CmdStopTransfer>
 8008150:	4602      	mov	r2, r0
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008156:	431a      	orrs	r2, r3
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2200      	movs	r2, #0
 8008168:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800816a:	6978      	ldr	r0, [r7, #20]
 800816c:	f7ff fcd2 	bl	8007b14 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008170:	bf00      	nop
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	004005ff 	.word	0x004005ff

0800817c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008188:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008192:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7ff ff31 	bl	8007ffc <HAL_SD_GetCardState>
 800819a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b06      	cmp	r3, #6
 80081ae:	d002      	beq.n	80081b6 <SD_DMATxAbort+0x3a>
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b05      	cmp	r3, #5
 80081b4:	d10a      	bne.n	80081cc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f001 f812 	bl	80091e4 <SDMMC_CmdStopTransfer>
 80081c0:	4602      	mov	r2, r0
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	431a      	orrs	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d103      	bne.n	80081dc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f002 fff9 	bl	800b1cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80081da:	e002      	b.n	80081e2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f7ff fc99 	bl	8007b14 <HAL_SD_ErrorCallback>
}
 80081e2:	bf00      	nop
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8008200:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f7ff fefa 	bl	8007ffc <HAL_SD_GetCardState>
 8008208:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2b06      	cmp	r3, #6
 800821c:	d002      	beq.n	8008224 <SD_DMARxAbort+0x3a>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b05      	cmp	r3, #5
 8008222:	d10a      	bne.n	800823a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4618      	mov	r0, r3
 800822a:	f000 ffdb 	bl	80091e4 <SDMMC_CmdStopTransfer>
 800822e:	4602      	mov	r2, r0
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	431a      	orrs	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	2b00      	cmp	r3, #0
 8008240:	d103      	bne.n	800824a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f002 ffc2 	bl	800b1cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008248:	e002      	b.n	8008250 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff fc62 	bl	8007b14 <HAL_SD_ErrorCallback>
}
 8008250:	bf00      	nop
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008258:	b5b0      	push	{r4, r5, r7, lr}
 800825a:	b094      	sub	sp, #80	; 0x50
 800825c:	af04      	add	r7, sp, #16
 800825e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008260:	2301      	movs	r3, #1
 8008262:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fe8d 	bl	8008f88 <SDIO_GetPowerState>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d102      	bne.n	800827a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008274:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008278:	e0b6      	b.n	80083e8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827e:	2b03      	cmp	r3, #3
 8008280:	d02f      	beq.n	80082e2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4618      	mov	r0, r3
 8008288:	f001 f8b6 	bl	80093f8 <SDMMC_CmdSendCID>
 800828c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800828e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <SD_InitCard+0x40>
    {
      return errorstate;
 8008294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008296:	e0a7      	b.n	80083e8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 feb7 	bl	8009012 <SDIO_GetResponse>
 80082a4:	4602      	mov	r2, r0
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2104      	movs	r1, #4
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 feae 	bl	8009012 <SDIO_GetResponse>
 80082b6:	4602      	mov	r2, r0
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2108      	movs	r1, #8
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fea5 	bl	8009012 <SDIO_GetResponse>
 80082c8:	4602      	mov	r2, r0
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	210c      	movs	r1, #12
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fe9c 	bl	8009012 <SDIO_GetResponse>
 80082da:	4602      	mov	r2, r0
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d00d      	beq.n	8008306 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f107 020e 	add.w	r2, r7, #14
 80082f2:	4611      	mov	r1, r2
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 f8bc 	bl	8009472 <SDMMC_CmdSetRelAdd>
 80082fa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80082fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <SD_InitCard+0xae>
    {
      return errorstate;
 8008302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008304:	e070      	b.n	80083e8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830a:	2b03      	cmp	r3, #3
 800830c:	d036      	beq.n	800837c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800830e:	89fb      	ldrh	r3, [r7, #14]
 8008310:	461a      	mov	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831e:	041b      	lsls	r3, r3, #16
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f001 f886 	bl	8009434 <SDMMC_CmdSendCSD>
 8008328:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800832a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008332:	e059      	b.n	80083e8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2100      	movs	r1, #0
 800833a:	4618      	mov	r0, r3
 800833c:	f000 fe69 	bl	8009012 <SDIO_GetResponse>
 8008340:	4602      	mov	r2, r0
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2104      	movs	r1, #4
 800834c:	4618      	mov	r0, r3
 800834e:	f000 fe60 	bl	8009012 <SDIO_GetResponse>
 8008352:	4602      	mov	r2, r0
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2108      	movs	r1, #8
 800835e:	4618      	mov	r0, r3
 8008360:	f000 fe57 	bl	8009012 <SDIO_GetResponse>
 8008364:	4602      	mov	r2, r0
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	210c      	movs	r1, #12
 8008370:	4618      	mov	r0, r3
 8008372:	f000 fe4e 	bl	8009012 <SDIO_GetResponse>
 8008376:	4602      	mov	r2, r0
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2104      	movs	r1, #4
 8008382:	4618      	mov	r0, r3
 8008384:	f000 fe45 	bl	8009012 <SDIO_GetResponse>
 8008388:	4603      	mov	r3, r0
 800838a:	0d1a      	lsrs	r2, r3, #20
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008390:	f107 0310 	add.w	r3, r7, #16
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff fbc6 	bl	8007b28 <HAL_SD_GetCardCSD>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d002      	beq.n	80083a8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083a6:	e01f      	b.n	80083e8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6819      	ldr	r1, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b0:	041b      	lsls	r3, r3, #16
 80083b2:	461a      	mov	r2, r3
 80083b4:	f04f 0300 	mov.w	r3, #0
 80083b8:	4608      	mov	r0, r1
 80083ba:	f000 ff35 	bl	8009228 <SDMMC_CmdSelDesel>
 80083be:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80083c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <SD_InitCard+0x172>
  {
    return errorstate;
 80083c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c8:	e00e      	b.n	80083e8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681d      	ldr	r5, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	466c      	mov	r4, sp
 80083d2:	f103 0210 	add.w	r2, r3, #16
 80083d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80083d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083dc:	3304      	adds	r3, #4
 80083de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083e0:	4628      	mov	r0, r5
 80083e2:	f000 fd79 	bl	8008ed8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3740      	adds	r7, #64	; 0x40
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bdb0      	pop	{r4, r5, r7, pc}

080083f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	2300      	movs	r3, #0
 8008402:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 ff30 	bl	800926e <SDMMC_CmdGoIdleState>
 800840e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	e072      	b.n	8008500 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 ff43 	bl	80092aa <SDMMC_CmdOperCond>
 8008424:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00d      	beq.n	8008448 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4618      	mov	r0, r3
 8008438:	f000 ff19 	bl	800926e <SDMMC_CmdGoIdleState>
 800843c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d004      	beq.n	800844e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	e05b      	b.n	8008500 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008452:	2b01      	cmp	r3, #1
 8008454:	d137      	bne.n	80084c6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2100      	movs	r1, #0
 800845c:	4618      	mov	r0, r3
 800845e:	f000 ff43 	bl	80092e8 <SDMMC_CmdAppCommand>
 8008462:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d02d      	beq.n	80084c6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800846a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800846e:	e047      	b.n	8008500 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2100      	movs	r1, #0
 8008476:	4618      	mov	r0, r3
 8008478:	f000 ff36 	bl	80092e8 <SDMMC_CmdAppCommand>
 800847c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <SD_PowerON+0x98>
    {
      return errorstate;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	e03b      	b.n	8008500 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	491e      	ldr	r1, [pc, #120]	; (8008508 <SD_PowerON+0x118>)
 800848e:	4618      	mov	r0, r3
 8008490:	f000 ff4c 	bl	800932c <SDMMC_CmdAppOperCommand>
 8008494:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800849c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084a0:	e02e      	b.n	8008500 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2100      	movs	r1, #0
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 fdb2 	bl	8009012 <SDIO_GetResponse>
 80084ae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	0fdb      	lsrs	r3, r3, #31
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d101      	bne.n	80084bc <SD_PowerON+0xcc>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e000      	b.n	80084be <SD_PowerON+0xce>
 80084bc:	2300      	movs	r3, #0
 80084be:	613b      	str	r3, [r7, #16]

    count++;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	3301      	adds	r3, #1
 80084c4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d802      	bhi.n	80084d6 <SD_PowerON+0xe6>
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0cc      	beq.n	8008470 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80084dc:	4293      	cmp	r3, r2
 80084de:	d902      	bls.n	80084e6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80084e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084e4:	e00c      	b.n	8008500 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	645a      	str	r2, [r3, #68]	; 0x44
 80084f6:	e002      	b.n	80084fe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	c1100000 	.word	0xc1100000

0800850c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d102      	bne.n	8008522 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800851c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008520:	e018      	b.n	8008554 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800852a:	041b      	lsls	r3, r3, #16
 800852c:	4619      	mov	r1, r3
 800852e:	4610      	mov	r0, r2
 8008530:	f000 ffc0 	bl	80094b4 <SDMMC_CmdSendStatus>
 8008534:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <SD_SendStatus+0x34>
  {
    return errorstate;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	e009      	b.n	8008554 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2100      	movs	r1, #0
 8008546:	4618      	mov	r0, r3
 8008548:	f000 fd63 	bl	8009012 <SDIO_GetResponse>
 800854c:	4602      	mov	r2, r0
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	2300      	movs	r3, #0
 800856a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2100      	movs	r1, #0
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fd4d 	bl	8009012 <SDIO_GetResponse>
 8008578:	4603      	mov	r3, r0
 800857a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800857e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008582:	d102      	bne.n	800858a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008584:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008588:	e02f      	b.n	80085ea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800858a:	f107 030c 	add.w	r3, r7, #12
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f879 	bl	8008688 <SD_FindSCR>
 8008596:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	e023      	b.n	80085ea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01c      	beq.n	80085e6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085b4:	041b      	lsls	r3, r3, #16
 80085b6:	4619      	mov	r1, r3
 80085b8:	4610      	mov	r0, r2
 80085ba:	f000 fe95 	bl	80092e8 <SDMMC_CmdAppCommand>
 80085be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	e00f      	b.n	80085ea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2102      	movs	r1, #2
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 fece 	bl	8009372 <SDMMC_CmdBusWidth>
 80085d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	e003      	b.n	80085ea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80085e2:	2300      	movs	r3, #0
 80085e4:	e001      	b.n	80085ea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b086      	sub	sp, #24
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	2300      	movs	r3, #0
 8008600:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2100      	movs	r1, #0
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fd02 	bl	8009012 <SDIO_GetResponse>
 800860e:	4603      	mov	r3, r0
 8008610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008614:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008618:	d102      	bne.n	8008620 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800861a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800861e:	e02f      	b.n	8008680 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008620:	f107 030c 	add.w	r3, r7, #12
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f82e 	bl	8008688 <SD_FindSCR>
 800862c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	e023      	b.n	8008680 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01c      	beq.n	800867c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800864a:	041b      	lsls	r3, r3, #16
 800864c:	4619      	mov	r1, r3
 800864e:	4610      	mov	r0, r2
 8008650:	f000 fe4a 	bl	80092e8 <SDMMC_CmdAppCommand>
 8008654:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	e00f      	b.n	8008680 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2100      	movs	r1, #0
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fe83 	bl	8009372 <SDMMC_CmdBusWidth>
 800866c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	e003      	b.n	8008680 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008678:	2300      	movs	r3, #0
 800867a:	e001      	b.n	8008680 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800867c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008688:	b590      	push	{r4, r7, lr}
 800868a:	b08f      	sub	sp, #60	; 0x3c
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008692:	f7fa f923 	bl	80028dc <HAL_GetTick>
 8008696:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800869c:	2300      	movs	r3, #0
 800869e:	60bb      	str	r3, [r7, #8]
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2108      	movs	r1, #8
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fcee 	bl	8009090 <SDMMC_CmdBlockLength>
 80086b4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	e0b2      	b.n	8008826 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	4619      	mov	r1, r3
 80086cc:	4610      	mov	r0, r2
 80086ce:	f000 fe0b 	bl	80092e8 <SDMMC_CmdAppCommand>
 80086d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <SD_FindSCR+0x56>
  {
    return errorstate;
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	e0a3      	b.n	8008826 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086de:	f04f 33ff 	mov.w	r3, #4294967295
 80086e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80086e4:	2308      	movs	r3, #8
 80086e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80086e8:	2330      	movs	r3, #48	; 0x30
 80086ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80086ec:	2302      	movs	r3, #2
 80086ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80086f4:	2301      	movs	r3, #1
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f107 0210 	add.w	r2, r7, #16
 8008700:	4611      	mov	r1, r2
 8008702:	4618      	mov	r0, r3
 8008704:	f000 fc98 	bl	8009038 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 fe52 	bl	80093b6 <SDMMC_CmdSendSCR>
 8008712:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	2b00      	cmp	r3, #0
 8008718:	d02a      	beq.n	8008770 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	e083      	b.n	8008826 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00f      	beq.n	800874c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6819      	ldr	r1, [r3, #0]
 8008730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	f107 0208 	add.w	r2, r7, #8
 8008738:	18d4      	adds	r4, r2, r3
 800873a:	4608      	mov	r0, r1
 800873c:	f000 fbf7 	bl	8008f2e <SDIO_ReadFIFO>
 8008740:	4603      	mov	r3, r0
 8008742:	6023      	str	r3, [r4, #0]
      index++;
 8008744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008746:	3301      	adds	r3, #1
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
 800874a:	e006      	b.n	800875a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d012      	beq.n	8008780 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800875a:	f7fa f8bf 	bl	80028dc <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008768:	d102      	bne.n	8008770 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800876a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800876e:	e05a      	b.n	8008826 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008776:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0cf      	beq.n	800871e <SD_FindSCR+0x96>
 800877e:	e000      	b.n	8008782 <SD_FindSCR+0xfa>
      break;
 8008780:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008788:	f003 0308 	and.w	r3, r3, #8
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2208      	movs	r2, #8
 8008796:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008798:	2308      	movs	r3, #8
 800879a:	e044      	b.n	8008826 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d005      	beq.n	80087b6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2202      	movs	r2, #2
 80087b0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80087b2:	2302      	movs	r3, #2
 80087b4:	e037      	b.n	8008826 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d005      	beq.n	80087d0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2220      	movs	r2, #32
 80087ca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80087cc:	2320      	movs	r3, #32
 80087ce:	e02a      	b.n	8008826 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f240 523a 	movw	r2, #1338	; 0x53a
 80087d8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	061a      	lsls	r2, r3, #24
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	021b      	lsls	r3, r3, #8
 80087e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087e6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	0a1b      	lsrs	r3, r3, #8
 80087ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	0e1b      	lsrs	r3, r3, #24
 80087f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fa:	601a      	str	r2, [r3, #0]
    scr++;
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	3304      	adds	r3, #4
 8008800:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	061a      	lsls	r2, r3, #24
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	021b      	lsls	r3, r3, #8
 800880a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800880e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	0a1b      	lsrs	r3, r3, #8
 8008814:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008818:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	0e1b      	lsrs	r3, r3, #24
 800881e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008822:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	373c      	adds	r7, #60	; 0x3c
 800882a:	46bd      	mov	sp, r7
 800882c:	bd90      	pop	{r4, r7, pc}

0800882e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b086      	sub	sp, #24
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d03f      	beq.n	80088c8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008848:	2300      	movs	r3, #0
 800884a:	617b      	str	r3, [r7, #20]
 800884c:	e033      	b.n	80088b6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fb6b 	bl	8008f2e <SDIO_ReadFIFO>
 8008858:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	b2da      	uxtb	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3301      	adds	r3, #1
 8008866:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	3b01      	subs	r3, #1
 800886c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	0a1b      	lsrs	r3, r3, #8
 8008872:	b2da      	uxtb	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3301      	adds	r3, #1
 800887c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	3b01      	subs	r3, #1
 8008882:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	0c1b      	lsrs	r3, r3, #16
 8008888:	b2da      	uxtb	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3301      	adds	r3, #1
 8008892:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	3b01      	subs	r3, #1
 8008898:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	0e1b      	lsrs	r3, r3, #24
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3301      	adds	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	3301      	adds	r3, #1
 80088b4:	617b      	str	r3, [r7, #20]
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b07      	cmp	r3, #7
 80088ba:	d9c8      	bls.n	800884e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80088c8:	bf00      	nop
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d043      	beq.n	8008972 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80088ea:	2300      	movs	r3, #0
 80088ec:	617b      	str	r3, [r7, #20]
 80088ee:	e037      	b.n	8008960 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3301      	adds	r3, #1
 80088fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	3b01      	subs	r3, #1
 8008900:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	021a      	lsls	r2, r3, #8
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	4313      	orrs	r3, r2
 800890c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3301      	adds	r3, #1
 8008912:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	3b01      	subs	r3, #1
 8008918:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	041a      	lsls	r2, r3, #16
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	4313      	orrs	r3, r2
 8008924:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	3301      	adds	r3, #1
 800892a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	3b01      	subs	r3, #1
 8008930:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	061a      	lsls	r2, r3, #24
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	4313      	orrs	r3, r2
 800893c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	3b01      	subs	r3, #1
 8008948:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f107 0208 	add.w	r2, r7, #8
 8008952:	4611      	mov	r1, r2
 8008954:	4618      	mov	r0, r3
 8008956:	f000 faf7 	bl	8008f48 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	3301      	adds	r3, #1
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2b07      	cmp	r3, #7
 8008964:	d9c4      	bls.n	80088f0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008972:	bf00      	nop
 8008974:	3718      	adds	r7, #24
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e041      	b.n	8008a10 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	d106      	bne.n	80089a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7f9 fe4b 	bl	800263c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2202      	movs	r2, #2
 80089aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3304      	adds	r3, #4
 80089b6:	4619      	mov	r1, r3
 80089b8:	4610      	mov	r0, r2
 80089ba:	f000 f95d 	bl	8008c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d122      	bne.n	8008a74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d11b      	bne.n	8008a74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f06f 0202 	mvn.w	r2, #2
 8008a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f8ee 	bl	8008c3c <HAL_TIM_IC_CaptureCallback>
 8008a60:	e005      	b.n	8008a6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f8e0 	bl	8008c28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f8f1 	bl	8008c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	f003 0304 	and.w	r3, r3, #4
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d122      	bne.n	8008ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d11b      	bne.n	8008ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f06f 0204 	mvn.w	r2, #4
 8008a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f8c4 	bl	8008c3c <HAL_TIM_IC_CaptureCallback>
 8008ab4:	e005      	b.n	8008ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f8b6 	bl	8008c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f8c7 	bl	8008c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	f003 0308 	and.w	r3, r3, #8
 8008ad2:	2b08      	cmp	r3, #8
 8008ad4:	d122      	bne.n	8008b1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f003 0308 	and.w	r3, r3, #8
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d11b      	bne.n	8008b1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f06f 0208 	mvn.w	r2, #8
 8008aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2204      	movs	r2, #4
 8008af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f89a 	bl	8008c3c <HAL_TIM_IC_CaptureCallback>
 8008b08:	e005      	b.n	8008b16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f88c 	bl	8008c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f89d 	bl	8008c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	f003 0310 	and.w	r3, r3, #16
 8008b26:	2b10      	cmp	r3, #16
 8008b28:	d122      	bne.n	8008b70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	2b10      	cmp	r3, #16
 8008b36:	d11b      	bne.n	8008b70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f06f 0210 	mvn.w	r2, #16
 8008b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2208      	movs	r2, #8
 8008b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f870 	bl	8008c3c <HAL_TIM_IC_CaptureCallback>
 8008b5c:	e005      	b.n	8008b6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f862 	bl	8008c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f873 	bl	8008c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d10e      	bne.n	8008b9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d107      	bne.n	8008b9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f06f 0201 	mvn.w	r2, #1
 8008b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7f9 fa28 	bl	8001fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba6:	2b80      	cmp	r3, #128	; 0x80
 8008ba8:	d10e      	bne.n	8008bc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb4:	2b80      	cmp	r3, #128	; 0x80
 8008bb6:	d107      	bne.n	8008bc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f97e 	bl	8008ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd2:	2b40      	cmp	r3, #64	; 0x40
 8008bd4:	d10e      	bne.n	8008bf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be0:	2b40      	cmp	r3, #64	; 0x40
 8008be2:	d107      	bne.n	8008bf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f838 	bl	8008c64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	f003 0320 	and.w	r3, r3, #32
 8008bfe:	2b20      	cmp	r3, #32
 8008c00:	d10e      	bne.n	8008c20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f003 0320 	and.w	r3, r3, #32
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d107      	bne.n	8008c20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f06f 0220 	mvn.w	r2, #32
 8008c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f948 	bl	8008eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c20:	bf00      	nop
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a40      	ldr	r2, [pc, #256]	; (8008d8c <TIM_Base_SetConfig+0x114>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d013      	beq.n	8008cb8 <TIM_Base_SetConfig+0x40>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c96:	d00f      	beq.n	8008cb8 <TIM_Base_SetConfig+0x40>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a3d      	ldr	r2, [pc, #244]	; (8008d90 <TIM_Base_SetConfig+0x118>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d00b      	beq.n	8008cb8 <TIM_Base_SetConfig+0x40>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a3c      	ldr	r2, [pc, #240]	; (8008d94 <TIM_Base_SetConfig+0x11c>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d007      	beq.n	8008cb8 <TIM_Base_SetConfig+0x40>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a3b      	ldr	r2, [pc, #236]	; (8008d98 <TIM_Base_SetConfig+0x120>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d003      	beq.n	8008cb8 <TIM_Base_SetConfig+0x40>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a3a      	ldr	r2, [pc, #232]	; (8008d9c <TIM_Base_SetConfig+0x124>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d108      	bne.n	8008cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a2f      	ldr	r2, [pc, #188]	; (8008d8c <TIM_Base_SetConfig+0x114>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d02b      	beq.n	8008d2a <TIM_Base_SetConfig+0xb2>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd8:	d027      	beq.n	8008d2a <TIM_Base_SetConfig+0xb2>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a2c      	ldr	r2, [pc, #176]	; (8008d90 <TIM_Base_SetConfig+0x118>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d023      	beq.n	8008d2a <TIM_Base_SetConfig+0xb2>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a2b      	ldr	r2, [pc, #172]	; (8008d94 <TIM_Base_SetConfig+0x11c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d01f      	beq.n	8008d2a <TIM_Base_SetConfig+0xb2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a2a      	ldr	r2, [pc, #168]	; (8008d98 <TIM_Base_SetConfig+0x120>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d01b      	beq.n	8008d2a <TIM_Base_SetConfig+0xb2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a29      	ldr	r2, [pc, #164]	; (8008d9c <TIM_Base_SetConfig+0x124>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d017      	beq.n	8008d2a <TIM_Base_SetConfig+0xb2>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a28      	ldr	r2, [pc, #160]	; (8008da0 <TIM_Base_SetConfig+0x128>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d013      	beq.n	8008d2a <TIM_Base_SetConfig+0xb2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a27      	ldr	r2, [pc, #156]	; (8008da4 <TIM_Base_SetConfig+0x12c>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00f      	beq.n	8008d2a <TIM_Base_SetConfig+0xb2>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a26      	ldr	r2, [pc, #152]	; (8008da8 <TIM_Base_SetConfig+0x130>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00b      	beq.n	8008d2a <TIM_Base_SetConfig+0xb2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a25      	ldr	r2, [pc, #148]	; (8008dac <TIM_Base_SetConfig+0x134>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d007      	beq.n	8008d2a <TIM_Base_SetConfig+0xb2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a24      	ldr	r2, [pc, #144]	; (8008db0 <TIM_Base_SetConfig+0x138>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_Base_SetConfig+0xb2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a23      	ldr	r2, [pc, #140]	; (8008db4 <TIM_Base_SetConfig+0x13c>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d108      	bne.n	8008d3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a0a      	ldr	r2, [pc, #40]	; (8008d8c <TIM_Base_SetConfig+0x114>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d003      	beq.n	8008d70 <TIM_Base_SetConfig+0xf8>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a0c      	ldr	r2, [pc, #48]	; (8008d9c <TIM_Base_SetConfig+0x124>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d103      	bne.n	8008d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	691a      	ldr	r2, [r3, #16]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	615a      	str	r2, [r3, #20]
}
 8008d7e:	bf00      	nop
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	40010000 	.word	0x40010000
 8008d90:	40000400 	.word	0x40000400
 8008d94:	40000800 	.word	0x40000800
 8008d98:	40000c00 	.word	0x40000c00
 8008d9c:	40010400 	.word	0x40010400
 8008da0:	40014000 	.word	0x40014000
 8008da4:	40014400 	.word	0x40014400
 8008da8:	40014800 	.word	0x40014800
 8008dac:	40001800 	.word	0x40001800
 8008db0:	40001c00 	.word	0x40001c00
 8008db4:	40002000 	.word	0x40002000

08008db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d101      	bne.n	8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e05a      	b.n	8008e86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a21      	ldr	r2, [pc, #132]	; (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d022      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e1c:	d01d      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a1d      	ldr	r2, [pc, #116]	; (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d018      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a1b      	ldr	r2, [pc, #108]	; (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d013      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a1a      	ldr	r2, [pc, #104]	; (8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00e      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a18      	ldr	r2, [pc, #96]	; (8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d009      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a17      	ldr	r2, [pc, #92]	; (8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d004      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a15      	ldr	r2, [pc, #84]	; (8008eac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d10c      	bne.n	8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40000400 	.word	0x40000400
 8008e9c:	40000800 	.word	0x40000800
 8008ea0:	40000c00 	.word	0x40000c00
 8008ea4:	40010400 	.word	0x40010400
 8008ea8:	40014000 	.word	0x40014000
 8008eac:	40001800 	.word	0x40001800

08008eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008ed8:	b084      	sub	sp, #16
 8008eda:	b480      	push	{r7}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	f107 001c 	add.w	r0, r7, #28
 8008ee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008eee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008ef2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008ef6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008efa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008efe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008f02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008f12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	b004      	add	sp, #16
 8008f2c:	4770      	bx	lr

08008f2e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2203      	movs	r2, #3
 8008f76:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008f78:	2002      	movs	r0, #2
 8008f7a:	f7f9 fcbb 	bl	80028f4 <HAL_Delay>
  
  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0303 	and.w	r3, r3, #3
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fc2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008fc8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008fce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008fde:	f023 030f 	bic.w	r3, r3, #15
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	b2db      	uxtb	r3, r3
}
 8009006:	4618      	mov	r0, r3
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	3314      	adds	r3, #20
 8009020:	461a      	mov	r2, r3
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	4413      	add	r3, r2
 8009026:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
}  
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800905e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009064:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800906a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	4313      	orrs	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009076:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	431a      	orrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009082:	2300      	movs	r3, #0

}
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800909e:	2310      	movs	r3, #16
 80090a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090a2:	2340      	movs	r3, #64	; 0x40
 80090a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090a6:	2300      	movs	r3, #0
 80090a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090b0:	f107 0308 	add.w	r3, r7, #8
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff ff74 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80090bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c0:	2110      	movs	r1, #16
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fa44 	bl	8009550 <SDMMC_GetCmdResp1>
 80090c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ca:	69fb      	ldr	r3, [r7, #28]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3720      	adds	r7, #32
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80090e2:	2311      	movs	r3, #17
 80090e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090e6:	2340      	movs	r3, #64	; 0x40
 80090e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090f4:	f107 0308 	add.w	r3, r7, #8
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff ff52 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009100:	f241 3288 	movw	r2, #5000	; 0x1388
 8009104:	2111      	movs	r1, #17
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa22 	bl	8009550 <SDMMC_GetCmdResp1>
 800910c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800910e:	69fb      	ldr	r3, [r7, #28]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009126:	2312      	movs	r3, #18
 8009128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800912a:	2340      	movs	r3, #64	; 0x40
 800912c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009136:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009138:	f107 0308 	add.w	r3, r7, #8
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff ff30 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009144:	f241 3288 	movw	r2, #5000	; 0x1388
 8009148:	2112      	movs	r1, #18
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fa00 	bl	8009550 <SDMMC_GetCmdResp1>
 8009150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009152:	69fb      	ldr	r3, [r7, #28]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3720      	adds	r7, #32
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800916a:	2318      	movs	r3, #24
 800916c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800916e:	2340      	movs	r3, #64	; 0x40
 8009170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009172:	2300      	movs	r3, #0
 8009174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800917a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800917c:	f107 0308 	add.w	r3, r7, #8
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff ff0e 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009188:	f241 3288 	movw	r2, #5000	; 0x1388
 800918c:	2118      	movs	r1, #24
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f9de 	bl	8009550 <SDMMC_GetCmdResp1>
 8009194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009196:	69fb      	ldr	r3, [r7, #28]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3720      	adds	r7, #32
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80091ae:	2319      	movs	r3, #25
 80091b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091b2:	2340      	movs	r3, #64	; 0x40
 80091b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091b6:	2300      	movs	r3, #0
 80091b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091c0:	f107 0308 	add.w	r3, r7, #8
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7ff feec 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80091cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d0:	2119      	movs	r1, #25
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f9bc 	bl	8009550 <SDMMC_GetCmdResp1>
 80091d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091da:	69fb      	ldr	r3, [r7, #28]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3720      	adds	r7, #32
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b088      	sub	sp, #32
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80091f0:	230c      	movs	r3, #12
 80091f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091f4:	2340      	movs	r3, #64	; 0x40
 80091f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091f8:	2300      	movs	r3, #0
 80091fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009200:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009202:	f107 0308 	add.w	r3, r7, #8
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff fecb 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800920e:	4a05      	ldr	r2, [pc, #20]	; (8009224 <SDMMC_CmdStopTransfer+0x40>)
 8009210:	210c      	movs	r1, #12
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f99c 	bl	8009550 <SDMMC_GetCmdResp1>
 8009218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800921a:	69fb      	ldr	r3, [r7, #28]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3720      	adds	r7, #32
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	05f5e100 	.word	0x05f5e100

08009228 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08a      	sub	sp, #40	; 0x28
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009238:	2307      	movs	r3, #7
 800923a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800923c:	2340      	movs	r3, #64	; 0x40
 800923e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009240:	2300      	movs	r3, #0
 8009242:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009248:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800924a:	f107 0310 	add.w	r3, r7, #16
 800924e:	4619      	mov	r1, r3
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f7ff fea7 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009256:	f241 3288 	movw	r2, #5000	; 0x1388
 800925a:	2107      	movs	r1, #7
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f977 	bl	8009550 <SDMMC_GetCmdResp1>
 8009262:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009266:	4618      	mov	r0, r3
 8009268:	3728      	adds	r7, #40	; 0x28
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b088      	sub	sp, #32
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800927e:	2300      	movs	r3, #0
 8009280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009282:	2300      	movs	r3, #0
 8009284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800928a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800928c:	f107 0308 	add.w	r3, r7, #8
 8009290:	4619      	mov	r1, r3
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7ff fe86 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f92d 	bl	80094f8 <SDMMC_GetCmdError>
 800929e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092a0:	69fb      	ldr	r3, [r7, #28]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3720      	adds	r7, #32
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b088      	sub	sp, #32
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80092b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80092b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80092b8:	2308      	movs	r3, #8
 80092ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092bc:	2340      	movs	r3, #64	; 0x40
 80092be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092c0:	2300      	movs	r3, #0
 80092c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092ca:	f107 0308 	add.w	r3, r7, #8
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff fe67 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fb24 	bl	8009924 <SDMMC_GetCmdResp7>
 80092dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092de:	69fb      	ldr	r3, [r7, #28]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3720      	adds	r7, #32
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80092f6:	2337      	movs	r3, #55	; 0x37
 80092f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092fa:	2340      	movs	r3, #64	; 0x40
 80092fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009306:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009308:	f107 0308 	add.w	r3, r7, #8
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff fe48 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009314:	f241 3288 	movw	r2, #5000	; 0x1388
 8009318:	2137      	movs	r1, #55	; 0x37
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f918 	bl	8009550 <SDMMC_GetCmdResp1>
 8009320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009322:	69fb      	ldr	r3, [r7, #28]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800933c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009342:	2329      	movs	r3, #41	; 0x29
 8009344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009346:	2340      	movs	r3, #64	; 0x40
 8009348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800934a:	2300      	movs	r3, #0
 800934c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800934e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009352:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009354:	f107 0308 	add.w	r3, r7, #8
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff fe22 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fa2b 	bl	80097bc <SDMMC_GetCmdResp3>
 8009366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009368:	69fb      	ldr	r3, [r7, #28]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3720      	adds	r7, #32
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b088      	sub	sp, #32
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009380:	2306      	movs	r3, #6
 8009382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009384:	2340      	movs	r3, #64	; 0x40
 8009386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009388:	2300      	movs	r3, #0
 800938a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800938c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009390:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009392:	f107 0308 	add.w	r3, r7, #8
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7ff fe03 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800939e:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a2:	2106      	movs	r1, #6
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f8d3 	bl	8009550 <SDMMC_GetCmdResp1>
 80093aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ac:	69fb      	ldr	r3, [r7, #28]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3720      	adds	r7, #32
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b088      	sub	sp, #32
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80093c2:	2333      	movs	r3, #51	; 0x33
 80093c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093c6:	2340      	movs	r3, #64	; 0x40
 80093c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093d4:	f107 0308 	add.w	r3, r7, #8
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff fde2 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80093e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e4:	2133      	movs	r1, #51	; 0x33
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f8b2 	bl	8009550 <SDMMC_GetCmdResp1>
 80093ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ee:	69fb      	ldr	r3, [r7, #28]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3720      	adds	r7, #32
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009404:	2302      	movs	r3, #2
 8009406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009408:	23c0      	movs	r3, #192	; 0xc0
 800940a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800940c:	2300      	movs	r3, #0
 800940e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009414:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009416:	f107 0308 	add.w	r3, r7, #8
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff fdc1 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f982 	bl	800972c <SDMMC_GetCmdResp2>
 8009428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800942a:	69fb      	ldr	r3, [r7, #28]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3720      	adds	r7, #32
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b088      	sub	sp, #32
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009442:	2309      	movs	r3, #9
 8009444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009446:	23c0      	movs	r3, #192	; 0xc0
 8009448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800944a:	2300      	movs	r3, #0
 800944c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800944e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009452:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009454:	f107 0308 	add.w	r3, r7, #8
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff fda2 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f963 	bl	800972c <SDMMC_GetCmdResp2>
 8009466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009468:	69fb      	ldr	r3, [r7, #28]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3720      	adds	r7, #32
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b088      	sub	sp, #32
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009480:	2303      	movs	r3, #3
 8009482:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009484:	2340      	movs	r3, #64	; 0x40
 8009486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009488:	2300      	movs	r3, #0
 800948a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800948c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009490:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009492:	f107 0308 	add.w	r3, r7, #8
 8009496:	4619      	mov	r1, r3
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7ff fd83 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	2103      	movs	r1, #3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f9c8 	bl	8009838 <SDMMC_GetCmdResp6>
 80094a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094aa:	69fb      	ldr	r3, [r7, #28]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3720      	adds	r7, #32
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80094c2:	230d      	movs	r3, #13
 80094c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094c6:	2340      	movs	r3, #64	; 0x40
 80094c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094ca:	2300      	movs	r3, #0
 80094cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094d4:	f107 0308 	add.w	r3, r7, #8
 80094d8:	4619      	mov	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7ff fd62 	bl	8008fa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80094e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094e4:	210d      	movs	r1, #13
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f832 	bl	8009550 <SDMMC_GetCmdResp1>
 80094ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ee:	69fb      	ldr	r3, [r7, #28]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3720      	adds	r7, #32
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009500:	4b11      	ldr	r3, [pc, #68]	; (8009548 <SDMMC_GetCmdError+0x50>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a11      	ldr	r2, [pc, #68]	; (800954c <SDMMC_GetCmdError+0x54>)
 8009506:	fba2 2303 	umull	r2, r3, r2, r3
 800950a:	0a5b      	lsrs	r3, r3, #9
 800950c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009510:	fb02 f303 	mul.w	r3, r2, r3
 8009514:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	1e5a      	subs	r2, r3, #1
 800951a:	60fa      	str	r2, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d102      	bne.n	8009526 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009524:	e009      	b.n	800953a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0f1      	beq.n	8009516 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	22c5      	movs	r2, #197	; 0xc5
 8009536:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	20000000 	.word	0x20000000
 800954c:	10624dd3 	.word	0x10624dd3

08009550 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	460b      	mov	r3, r1
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800955e:	4b70      	ldr	r3, [pc, #448]	; (8009720 <SDMMC_GetCmdResp1+0x1d0>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a70      	ldr	r2, [pc, #448]	; (8009724 <SDMMC_GetCmdResp1+0x1d4>)
 8009564:	fba2 2303 	umull	r2, r3, r2, r3
 8009568:	0a5a      	lsrs	r2, r3, #9
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	fb02 f303 	mul.w	r3, r2, r3
 8009570:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	1e5a      	subs	r2, r3, #1
 8009576:	61fa      	str	r2, [r7, #28]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800957c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009580:	e0c9      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009586:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0ef      	beq.n	8009572 <SDMMC_GetCmdResp1+0x22>
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1ea      	bne.n	8009572 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a0:	f003 0304 	and.w	r3, r3, #4
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d004      	beq.n	80095b2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2204      	movs	r2, #4
 80095ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095ae:	2304      	movs	r3, #4
 80095b0:	e0b1      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d004      	beq.n	80095c8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2201      	movs	r2, #1
 80095c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e0a6      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	22c5      	movs	r2, #197	; 0xc5
 80095cc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f7ff fd12 	bl	8008ff8 <SDIO_GetCommandResponse>
 80095d4:	4603      	mov	r3, r0
 80095d6:	461a      	mov	r2, r3
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	4293      	cmp	r3, r2
 80095dc:	d001      	beq.n	80095e2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095de:	2301      	movs	r3, #1
 80095e0:	e099      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80095e2:	2100      	movs	r1, #0
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f7ff fd14 	bl	8009012 <SDIO_GetResponse>
 80095ea:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	4b4e      	ldr	r3, [pc, #312]	; (8009728 <SDMMC_GetCmdResp1+0x1d8>)
 80095f0:	4013      	ands	r3, r2
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80095f6:	2300      	movs	r3, #0
 80095f8:	e08d      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	da02      	bge.n	8009606 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009604:	e087      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009610:	2340      	movs	r3, #64	; 0x40
 8009612:	e080      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800961e:	2380      	movs	r3, #128	; 0x80
 8009620:	e079      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800962c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009630:	e071      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800963c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009640:	e069      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800964c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009650:	e061      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800965c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009660:	e059      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800966c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009670:	e051      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800967c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009680:	e049      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800968c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009690:	e041      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800969c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096a0:	e039      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80096ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80096b0:	e031      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80096bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80096c0:	e029      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80096cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80096d0:	e021      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80096dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80096e0:	e019      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80096ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096f0:	e011      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80096fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009700:	e009      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f003 0308 	and.w	r3, r3, #8
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800970c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009710:	e001      	b.n	8009716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009716:	4618      	mov	r0, r3
 8009718:	3720      	adds	r7, #32
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20000000 	.word	0x20000000
 8009724:	10624dd3 	.word	0x10624dd3
 8009728:	fdffe008 	.word	0xfdffe008

0800972c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009734:	4b1f      	ldr	r3, [pc, #124]	; (80097b4 <SDMMC_GetCmdResp2+0x88>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a1f      	ldr	r2, [pc, #124]	; (80097b8 <SDMMC_GetCmdResp2+0x8c>)
 800973a:	fba2 2303 	umull	r2, r3, r2, r3
 800973e:	0a5b      	lsrs	r3, r3, #9
 8009740:	f241 3288 	movw	r2, #5000	; 0x1388
 8009744:	fb02 f303 	mul.w	r3, r2, r3
 8009748:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	1e5a      	subs	r2, r3, #1
 800974e:	60fa      	str	r2, [r7, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d102      	bne.n	800975a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009754:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009758:	e026      	b.n	80097a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009766:	2b00      	cmp	r3, #0
 8009768:	d0ef      	beq.n	800974a <SDMMC_GetCmdResp2+0x1e>
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1ea      	bne.n	800974a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	d004      	beq.n	800978a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2204      	movs	r2, #4
 8009784:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009786:	2304      	movs	r3, #4
 8009788:	e00e      	b.n	80097a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	d004      	beq.n	80097a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800979c:	2301      	movs	r3, #1
 800979e:	e003      	b.n	80097a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	22c5      	movs	r2, #197	; 0xc5
 80097a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	20000000 	.word	0x20000000
 80097b8:	10624dd3 	.word	0x10624dd3

080097bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097c4:	4b1a      	ldr	r3, [pc, #104]	; (8009830 <SDMMC_GetCmdResp3+0x74>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a1a      	ldr	r2, [pc, #104]	; (8009834 <SDMMC_GetCmdResp3+0x78>)
 80097ca:	fba2 2303 	umull	r2, r3, r2, r3
 80097ce:	0a5b      	lsrs	r3, r3, #9
 80097d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097d4:	fb02 f303 	mul.w	r3, r2, r3
 80097d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	1e5a      	subs	r2, r3, #1
 80097de:	60fa      	str	r2, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d102      	bne.n	80097ea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097e8:	e01b      	b.n	8009822 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d0ef      	beq.n	80097da <SDMMC_GetCmdResp3+0x1e>
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1ea      	bne.n	80097da <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009808:	f003 0304 	and.w	r3, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	d004      	beq.n	800981a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2204      	movs	r2, #4
 8009814:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009816:	2304      	movs	r3, #4
 8009818:	e003      	b.n	8009822 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	22c5      	movs	r2, #197	; 0xc5
 800981e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	20000000 	.word	0x20000000
 8009834:	10624dd3 	.word	0x10624dd3

08009838 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	460b      	mov	r3, r1
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009846:	4b35      	ldr	r3, [pc, #212]	; (800991c <SDMMC_GetCmdResp6+0xe4>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a35      	ldr	r2, [pc, #212]	; (8009920 <SDMMC_GetCmdResp6+0xe8>)
 800984c:	fba2 2303 	umull	r2, r3, r2, r3
 8009850:	0a5b      	lsrs	r3, r3, #9
 8009852:	f241 3288 	movw	r2, #5000	; 0x1388
 8009856:	fb02 f303 	mul.w	r3, r2, r3
 800985a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	1e5a      	subs	r2, r3, #1
 8009860:	61fa      	str	r2, [r7, #28]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d102      	bne.n	800986c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009866:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800986a:	e052      	b.n	8009912 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009870:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0ef      	beq.n	800985c <SDMMC_GetCmdResp6+0x24>
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1ea      	bne.n	800985c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988a:	f003 0304 	and.w	r3, r3, #4
 800988e:	2b00      	cmp	r3, #0
 8009890:	d004      	beq.n	800989c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2204      	movs	r2, #4
 8009896:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009898:	2304      	movs	r3, #4
 800989a:	e03a      	b.n	8009912 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d004      	beq.n	80098b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2201      	movs	r2, #1
 80098ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e02f      	b.n	8009912 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f7ff fba0 	bl	8008ff8 <SDIO_GetCommandResponse>
 80098b8:	4603      	mov	r3, r0
 80098ba:	461a      	mov	r2, r3
 80098bc:	7afb      	ldrb	r3, [r7, #11]
 80098be:	4293      	cmp	r3, r2
 80098c0:	d001      	beq.n	80098c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e025      	b.n	8009912 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	22c5      	movs	r2, #197	; 0xc5
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80098cc:	2100      	movs	r1, #0
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f7ff fb9f 	bl	8009012 <SDIO_GetResponse>
 80098d4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d106      	bne.n	80098ee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	0c1b      	lsrs	r3, r3, #16
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80098ea:	2300      	movs	r3, #0
 80098ec:	e011      	b.n	8009912 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80098f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098fc:	e009      	b.n	8009912 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800990c:	e001      	b.n	8009912 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800990e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009912:	4618      	mov	r0, r3
 8009914:	3720      	adds	r7, #32
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20000000 	.word	0x20000000
 8009920:	10624dd3 	.word	0x10624dd3

08009924 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800992c:	4b22      	ldr	r3, [pc, #136]	; (80099b8 <SDMMC_GetCmdResp7+0x94>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a22      	ldr	r2, [pc, #136]	; (80099bc <SDMMC_GetCmdResp7+0x98>)
 8009932:	fba2 2303 	umull	r2, r3, r2, r3
 8009936:	0a5b      	lsrs	r3, r3, #9
 8009938:	f241 3288 	movw	r2, #5000	; 0x1388
 800993c:	fb02 f303 	mul.w	r3, r2, r3
 8009940:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	1e5a      	subs	r2, r3, #1
 8009946:	60fa      	str	r2, [r7, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d102      	bne.n	8009952 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800994c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009950:	e02c      	b.n	80099ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009956:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0ef      	beq.n	8009942 <SDMMC_GetCmdResp7+0x1e>
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1ea      	bne.n	8009942 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009970:	f003 0304 	and.w	r3, r3, #4
 8009974:	2b00      	cmp	r3, #0
 8009976:	d004      	beq.n	8009982 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2204      	movs	r2, #4
 800997c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800997e:	2304      	movs	r3, #4
 8009980:	e014      	b.n	80099ac <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	2b00      	cmp	r3, #0
 800998c:	d004      	beq.n	8009998 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009994:	2301      	movs	r3, #1
 8009996:	e009      	b.n	80099ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800999c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2240      	movs	r2, #64	; 0x40
 80099a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80099aa:	2300      	movs	r3, #0
  
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20000000 	.word	0x20000000
 80099bc:	10624dd3 	.word	0x10624dd3

080099c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099c0:	b084      	sub	sp, #16
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	f107 001c 	add.w	r0, r7, #28
 80099ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d122      	bne.n	8009a1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80099ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d105      	bne.n	8009a12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f001 fb16 	bl	800b044 <USB_CoreReset>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]
 8009a1c:	e01a      	b.n	8009a54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 fb0a 	bl	800b044 <USB_CoreReset>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d106      	bne.n	8009a48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	639a      	str	r2, [r3, #56]	; 0x38
 8009a46:	e005      	b.n	8009a54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d10b      	bne.n	8009a72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f043 0206 	orr.w	r2, r3, #6
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	f043 0220 	orr.w	r2, r3, #32
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a7e:	b004      	add	sp, #16
 8009a80:	4770      	bx	lr
	...

08009a84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d165      	bne.n	8009b64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	4a41      	ldr	r2, [pc, #260]	; (8009ba0 <USB_SetTurnaroundTime+0x11c>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d906      	bls.n	8009aae <USB_SetTurnaroundTime+0x2a>
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	4a40      	ldr	r2, [pc, #256]	; (8009ba4 <USB_SetTurnaroundTime+0x120>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d202      	bcs.n	8009aae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009aa8:	230f      	movs	r3, #15
 8009aaa:	617b      	str	r3, [r7, #20]
 8009aac:	e062      	b.n	8009b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	4a3c      	ldr	r2, [pc, #240]	; (8009ba4 <USB_SetTurnaroundTime+0x120>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d306      	bcc.n	8009ac4 <USB_SetTurnaroundTime+0x40>
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	4a3b      	ldr	r2, [pc, #236]	; (8009ba8 <USB_SetTurnaroundTime+0x124>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d202      	bcs.n	8009ac4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009abe:	230e      	movs	r3, #14
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	e057      	b.n	8009b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	4a38      	ldr	r2, [pc, #224]	; (8009ba8 <USB_SetTurnaroundTime+0x124>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d306      	bcc.n	8009ada <USB_SetTurnaroundTime+0x56>
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	4a37      	ldr	r2, [pc, #220]	; (8009bac <USB_SetTurnaroundTime+0x128>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d202      	bcs.n	8009ada <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009ad4:	230d      	movs	r3, #13
 8009ad6:	617b      	str	r3, [r7, #20]
 8009ad8:	e04c      	b.n	8009b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	4a33      	ldr	r2, [pc, #204]	; (8009bac <USB_SetTurnaroundTime+0x128>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d306      	bcc.n	8009af0 <USB_SetTurnaroundTime+0x6c>
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	4a32      	ldr	r2, [pc, #200]	; (8009bb0 <USB_SetTurnaroundTime+0x12c>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d802      	bhi.n	8009af0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009aea:	230c      	movs	r3, #12
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	e041      	b.n	8009b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	4a2f      	ldr	r2, [pc, #188]	; (8009bb0 <USB_SetTurnaroundTime+0x12c>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d906      	bls.n	8009b06 <USB_SetTurnaroundTime+0x82>
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	4a2e      	ldr	r2, [pc, #184]	; (8009bb4 <USB_SetTurnaroundTime+0x130>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d802      	bhi.n	8009b06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009b00:	230b      	movs	r3, #11
 8009b02:	617b      	str	r3, [r7, #20]
 8009b04:	e036      	b.n	8009b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	4a2a      	ldr	r2, [pc, #168]	; (8009bb4 <USB_SetTurnaroundTime+0x130>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d906      	bls.n	8009b1c <USB_SetTurnaroundTime+0x98>
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	4a29      	ldr	r2, [pc, #164]	; (8009bb8 <USB_SetTurnaroundTime+0x134>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d802      	bhi.n	8009b1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009b16:	230a      	movs	r3, #10
 8009b18:	617b      	str	r3, [r7, #20]
 8009b1a:	e02b      	b.n	8009b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	4a26      	ldr	r2, [pc, #152]	; (8009bb8 <USB_SetTurnaroundTime+0x134>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d906      	bls.n	8009b32 <USB_SetTurnaroundTime+0xae>
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	4a25      	ldr	r2, [pc, #148]	; (8009bbc <USB_SetTurnaroundTime+0x138>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d202      	bcs.n	8009b32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009b2c:	2309      	movs	r3, #9
 8009b2e:	617b      	str	r3, [r7, #20]
 8009b30:	e020      	b.n	8009b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	4a21      	ldr	r2, [pc, #132]	; (8009bbc <USB_SetTurnaroundTime+0x138>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d306      	bcc.n	8009b48 <USB_SetTurnaroundTime+0xc4>
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	4a20      	ldr	r2, [pc, #128]	; (8009bc0 <USB_SetTurnaroundTime+0x13c>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d802      	bhi.n	8009b48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009b42:	2308      	movs	r3, #8
 8009b44:	617b      	str	r3, [r7, #20]
 8009b46:	e015      	b.n	8009b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	4a1d      	ldr	r2, [pc, #116]	; (8009bc0 <USB_SetTurnaroundTime+0x13c>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d906      	bls.n	8009b5e <USB_SetTurnaroundTime+0xda>
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	4a1c      	ldr	r2, [pc, #112]	; (8009bc4 <USB_SetTurnaroundTime+0x140>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d202      	bcs.n	8009b5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009b58:	2307      	movs	r3, #7
 8009b5a:	617b      	str	r3, [r7, #20]
 8009b5c:	e00a      	b.n	8009b74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009b5e:	2306      	movs	r3, #6
 8009b60:	617b      	str	r3, [r7, #20]
 8009b62:	e007      	b.n	8009b74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009b64:	79fb      	ldrb	r3, [r7, #7]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d102      	bne.n	8009b70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009b6a:	2309      	movs	r3, #9
 8009b6c:	617b      	str	r3, [r7, #20]
 8009b6e:	e001      	b.n	8009b74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009b70:	2309      	movs	r3, #9
 8009b72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	68da      	ldr	r2, [r3, #12]
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	029b      	lsls	r3, r3, #10
 8009b88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009b8c:	431a      	orrs	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	371c      	adds	r7, #28
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr
 8009ba0:	00d8acbf 	.word	0x00d8acbf
 8009ba4:	00e4e1c0 	.word	0x00e4e1c0
 8009ba8:	00f42400 	.word	0x00f42400
 8009bac:	01067380 	.word	0x01067380
 8009bb0:	011a499f 	.word	0x011a499f
 8009bb4:	01312cff 	.word	0x01312cff
 8009bb8:	014ca43f 	.word	0x014ca43f
 8009bbc:	016e3600 	.word	0x016e3600
 8009bc0:	01a6ab1f 	.word	0x01a6ab1f
 8009bc4:	01e84800 	.word	0x01e84800

08009bc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	f043 0201 	orr.w	r2, r3, #1
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b083      	sub	sp, #12
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f023 0201 	bic.w	r2, r3, #1
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	460b      	mov	r3, r1
 8009c16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d115      	bne.n	8009c5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c3a:	2001      	movs	r0, #1
 8009c3c:	f7f8 fe5a 	bl	80028f4 <HAL_Delay>
      ms++;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3301      	adds	r3, #1
 8009c44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 f96c 	bl	800af24 <USB_GetMode>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d01e      	beq.n	8009c90 <USB_SetCurrentMode+0x84>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b31      	cmp	r3, #49	; 0x31
 8009c56:	d9f0      	bls.n	8009c3a <USB_SetCurrentMode+0x2e>
 8009c58:	e01a      	b.n	8009c90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009c5a:	78fb      	ldrb	r3, [r7, #3]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d115      	bne.n	8009c8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c6c:	2001      	movs	r0, #1
 8009c6e:	f7f8 fe41 	bl	80028f4 <HAL_Delay>
      ms++;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3301      	adds	r3, #1
 8009c76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f001 f953 	bl	800af24 <USB_GetMode>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d005      	beq.n	8009c90 <USB_SetCurrentMode+0x84>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b31      	cmp	r3, #49	; 0x31
 8009c88:	d9f0      	bls.n	8009c6c <USB_SetCurrentMode+0x60>
 8009c8a:	e001      	b.n	8009c90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e005      	b.n	8009c9c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b32      	cmp	r3, #50	; 0x32
 8009c94:	d101      	bne.n	8009c9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e000      	b.n	8009c9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b086      	sub	sp, #24
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	613b      	str	r3, [r7, #16]
 8009cc2:	e009      	b.n	8009cd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	3340      	adds	r3, #64	; 0x40
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	2200      	movs	r2, #0
 8009cd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	613b      	str	r3, [r7, #16]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	2b0e      	cmp	r3, #14
 8009cdc:	d9f2      	bls.n	8009cc4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d11c      	bne.n	8009d1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf2:	f043 0302 	orr.w	r3, r3, #2
 8009cf6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	e005      	b.n	8009d2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d30:	461a      	mov	r2, r3
 8009d32:	2300      	movs	r3, #0
 8009d34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d44:	461a      	mov	r2, r3
 8009d46:	680b      	ldr	r3, [r1, #0]
 8009d48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d10c      	bne.n	8009d6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d104      	bne.n	8009d60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009d56:	2100      	movs	r1, #0
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f945 	bl	8009fe8 <USB_SetDevSpeed>
 8009d5e:	e008      	b.n	8009d72 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009d60:	2101      	movs	r1, #1
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f940 	bl	8009fe8 <USB_SetDevSpeed>
 8009d68:	e003      	b.n	8009d72 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d6a:	2103      	movs	r1, #3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 f93b 	bl	8009fe8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d72:	2110      	movs	r1, #16
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f8f3 	bl	8009f60 <USB_FlushTxFifo>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f90f 	bl	8009fa8 <USB_FlushRxFifo>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da6:	461a      	mov	r2, r3
 8009da8:	2300      	movs	r3, #0
 8009daa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db2:	461a      	mov	r2, r3
 8009db4:	2300      	movs	r3, #0
 8009db6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009db8:	2300      	movs	r3, #0
 8009dba:	613b      	str	r3, [r7, #16]
 8009dbc:	e043      	b.n	8009e46 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dd4:	d118      	bne.n	8009e08 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10a      	bne.n	8009df2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de8:	461a      	mov	r2, r3
 8009dea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	e013      	b.n	8009e1a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dfe:	461a      	mov	r2, r3
 8009e00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	e008      	b.n	8009e1a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e14:	461a      	mov	r2, r3
 8009e16:	2300      	movs	r3, #0
 8009e18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	015a      	lsls	r2, r3, #5
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	4413      	add	r3, r2
 8009e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e26:	461a      	mov	r2, r3
 8009e28:	2300      	movs	r3, #0
 8009e2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e38:	461a      	mov	r2, r3
 8009e3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	3301      	adds	r3, #1
 8009e44:	613b      	str	r3, [r7, #16]
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d3b7      	bcc.n	8009dbe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e4e:	2300      	movs	r3, #0
 8009e50:	613b      	str	r3, [r7, #16]
 8009e52:	e043      	b.n	8009edc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e6a:	d118      	bne.n	8009e9e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10a      	bne.n	8009e88 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	015a      	lsls	r2, r3, #5
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	e013      	b.n	8009eb0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	015a      	lsls	r2, r3, #5
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	4413      	add	r3, r2
 8009e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e94:	461a      	mov	r2, r3
 8009e96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	e008      	b.n	8009eb0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	015a      	lsls	r2, r3, #5
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eaa:	461a      	mov	r2, r3
 8009eac:	2300      	movs	r3, #0
 8009eae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	015a      	lsls	r2, r3, #5
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	015a      	lsls	r2, r3, #5
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ed4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	613b      	str	r3, [r7, #16]
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d3b7      	bcc.n	8009e54 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ef2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ef6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009f04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d105      	bne.n	8009f18 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	f043 0210 	orr.w	r2, r3, #16
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	699a      	ldr	r2, [r3, #24]
 8009f1c:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <USB_DevInit+0x2b8>)
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d005      	beq.n	8009f36 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	f043 0208 	orr.w	r2, r3, #8
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d107      	bne.n	8009f4c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f44:	f043 0304 	orr.w	r3, r3, #4
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f58:	b004      	add	sp, #16
 8009f5a:	4770      	bx	lr
 8009f5c:	803c3800 	.word	0x803c3800

08009f60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	019b      	lsls	r3, r3, #6
 8009f72:	f043 0220 	orr.w	r2, r3, #32
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	4a08      	ldr	r2, [pc, #32]	; (8009fa4 <USB_FlushTxFifo+0x44>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d901      	bls.n	8009f8a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e006      	b.n	8009f98 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b20      	cmp	r3, #32
 8009f94:	d0f1      	beq.n	8009f7a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	00030d40 	.word	0x00030d40

08009fa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2210      	movs	r2, #16
 8009fb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	60fb      	str	r3, [r7, #12]
 8009fc0:	4a08      	ldr	r2, [pc, #32]	; (8009fe4 <USB_FlushRxFifo+0x3c>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d901      	bls.n	8009fca <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e006      	b.n	8009fd8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	f003 0310 	and.w	r3, r3, #16
 8009fd2:	2b10      	cmp	r3, #16
 8009fd4:	d0f1      	beq.n	8009fba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	00030d40 	.word	0x00030d40

08009fe8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	78fb      	ldrb	r3, [r7, #3]
 800a002:	68f9      	ldr	r1, [r7, #12]
 800a004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a008:	4313      	orrs	r3, r2
 800a00a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b087      	sub	sp, #28
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	f003 0306 	and.w	r3, r3, #6
 800a032:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d102      	bne.n	800a040 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a03a:	2300      	movs	r3, #0
 800a03c:	75fb      	strb	r3, [r7, #23]
 800a03e:	e00a      	b.n	800a056 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b02      	cmp	r3, #2
 800a044:	d002      	beq.n	800a04c <USB_GetDevSpeed+0x32>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b06      	cmp	r3, #6
 800a04a:	d102      	bne.n	800a052 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a04c:	2302      	movs	r3, #2
 800a04e:	75fb      	strb	r3, [r7, #23]
 800a050:	e001      	b.n	800a056 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a052:	230f      	movs	r3, #15
 800a054:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a056:	7dfb      	ldrb	r3, [r7, #23]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	371c      	adds	r7, #28
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	785b      	ldrb	r3, [r3, #1]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d13a      	bne.n	800a0f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a086:	69da      	ldr	r2, [r3, #28]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 030f 	and.w	r3, r3, #15
 800a090:	2101      	movs	r1, #1
 800a092:	fa01 f303 	lsl.w	r3, r1, r3
 800a096:	b29b      	uxth	r3, r3
 800a098:	68f9      	ldr	r1, [r7, #12]
 800a09a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d155      	bne.n	800a164 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	78db      	ldrb	r3, [r3, #3]
 800a0d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	059b      	lsls	r3, r3, #22
 800a0da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	e036      	b.n	800a164 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0fc:	69da      	ldr	r2, [r3, #28]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	f003 030f 	and.w	r3, r3, #15
 800a106:	2101      	movs	r1, #1
 800a108:	fa01 f303 	lsl.w	r3, r1, r3
 800a10c:	041b      	lsls	r3, r3, #16
 800a10e:	68f9      	ldr	r1, [r7, #12]
 800a110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a114:	4313      	orrs	r3, r2
 800a116:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d11a      	bne.n	800a164 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	78db      	ldrb	r3, [r3, #3]
 800a148:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a14a:	430b      	orrs	r3, r1
 800a14c:	4313      	orrs	r3, r2
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	0151      	lsls	r1, r2, #5
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	440a      	add	r2, r1
 800a156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a15a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a15e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a162:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
	...

0800a174 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	785b      	ldrb	r3, [r3, #1]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d161      	bne.n	800a254 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1a6:	d11f      	bne.n	800a1e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	0151      	lsls	r1, r2, #5
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	440a      	add	r2, r1
 800a1be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a1c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	0151      	lsls	r1, r2, #5
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	440a      	add	r2, r1
 800a1de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	f003 030f 	and.w	r3, r3, #15
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	43db      	mvns	r3, r3
 800a202:	68f9      	ldr	r1, [r7, #12]
 800a204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a208:	4013      	ands	r3, r2
 800a20a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a212:	69da      	ldr	r2, [r3, #28]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	f003 030f 	and.w	r3, r3, #15
 800a21c:	2101      	movs	r1, #1
 800a21e:	fa01 f303 	lsl.w	r3, r1, r3
 800a222:	b29b      	uxth	r3, r3
 800a224:	43db      	mvns	r3, r3
 800a226:	68f9      	ldr	r1, [r7, #12]
 800a228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a22c:	4013      	ands	r3, r2
 800a22e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	0159      	lsls	r1, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	440b      	add	r3, r1
 800a246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a24a:	4619      	mov	r1, r3
 800a24c:	4b35      	ldr	r3, [pc, #212]	; (800a324 <USB_DeactivateEndpoint+0x1b0>)
 800a24e:	4013      	ands	r3, r2
 800a250:	600b      	str	r3, [r1, #0]
 800a252:	e060      	b.n	800a316 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a26a:	d11f      	bne.n	800a2ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	0151      	lsls	r1, r2, #5
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	440a      	add	r2, r1
 800a282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a286:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a28a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	f003 030f 	and.w	r3, r3, #15
 800a2bc:	2101      	movs	r1, #1
 800a2be:	fa01 f303 	lsl.w	r3, r1, r3
 800a2c2:	041b      	lsls	r3, r3, #16
 800a2c4:	43db      	mvns	r3, r3
 800a2c6:	68f9      	ldr	r1, [r7, #12]
 800a2c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d6:	69da      	ldr	r2, [r3, #28]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	f003 030f 	and.w	r3, r3, #15
 800a2e0:	2101      	movs	r1, #1
 800a2e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e6:	041b      	lsls	r3, r3, #16
 800a2e8:	43db      	mvns	r3, r3
 800a2ea:	68f9      	ldr	r1, [r7, #12]
 800a2ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	0159      	lsls	r1, r3, #5
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	440b      	add	r3, r1
 800a30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a30e:	4619      	mov	r1, r3
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <USB_DeactivateEndpoint+0x1b4>)
 800a312:	4013      	ands	r3, r2
 800a314:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	ec337800 	.word	0xec337800
 800a328:	eff37800 	.word	0xeff37800

0800a32c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08a      	sub	sp, #40	; 0x28
 800a330:	af02      	add	r7, sp, #8
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	785b      	ldrb	r3, [r3, #1]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	f040 815c 	bne.w	800a606 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	695b      	ldr	r3, [r3, #20]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d132      	bne.n	800a3bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	0151      	lsls	r1, r2, #5
 800a368:	69fa      	ldr	r2, [r7, #28]
 800a36a:	440a      	add	r2, r1
 800a36c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a370:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a374:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a378:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	4413      	add	r3, r2
 800a382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	69ba      	ldr	r2, [r7, #24]
 800a38a:	0151      	lsls	r1, r2, #5
 800a38c:	69fa      	ldr	r2, [r7, #28]
 800a38e:	440a      	add	r2, r1
 800a390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a398:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	69ba      	ldr	r2, [r7, #24]
 800a3aa:	0151      	lsls	r1, r2, #5
 800a3ac:	69fa      	ldr	r2, [r7, #28]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3b4:	0cdb      	lsrs	r3, r3, #19
 800a3b6:	04db      	lsls	r3, r3, #19
 800a3b8:	6113      	str	r3, [r2, #16]
 800a3ba:	e074      	b.n	800a4a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	0151      	lsls	r1, r2, #5
 800a3ce:	69fa      	ldr	r2, [r7, #28]
 800a3d0:	440a      	add	r2, r1
 800a3d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3d6:	0cdb      	lsrs	r3, r3, #19
 800a3d8:	04db      	lsls	r3, r3, #19
 800a3da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	0151      	lsls	r1, r2, #5
 800a3ee:	69fa      	ldr	r2, [r7, #28]
 800a3f0:	440a      	add	r2, r1
 800a3f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	015a      	lsls	r2, r3, #5
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	4413      	add	r3, r2
 800a408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a40c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	6959      	ldr	r1, [r3, #20]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	440b      	add	r3, r1
 800a418:	1e59      	subs	r1, r3, #1
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a422:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a424:	4b9d      	ldr	r3, [pc, #628]	; (800a69c <USB_EPStartXfer+0x370>)
 800a426:	400b      	ands	r3, r1
 800a428:	69b9      	ldr	r1, [r7, #24]
 800a42a:	0148      	lsls	r0, r1, #5
 800a42c:	69f9      	ldr	r1, [r7, #28]
 800a42e:	4401      	add	r1, r0
 800a430:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a434:	4313      	orrs	r3, r2
 800a436:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	015a      	lsls	r2, r3, #5
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a444:	691a      	ldr	r2, [r3, #16]
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a44e:	69b9      	ldr	r1, [r7, #24]
 800a450:	0148      	lsls	r0, r1, #5
 800a452:	69f9      	ldr	r1, [r7, #28]
 800a454:	4401      	add	r1, r0
 800a456:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a45a:	4313      	orrs	r3, r2
 800a45c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	78db      	ldrb	r3, [r3, #3]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d11f      	bne.n	800a4a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	69ba      	ldr	r2, [r7, #24]
 800a476:	0151      	lsls	r1, r2, #5
 800a478:	69fa      	ldr	r2, [r7, #28]
 800a47a:	440a      	add	r2, r1
 800a47c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a480:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a484:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	015a      	lsls	r2, r3, #5
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	4413      	add	r3, r2
 800a48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	0151      	lsls	r1, r2, #5
 800a498:	69fa      	ldr	r2, [r7, #28]
 800a49a:	440a      	add	r2, r1
 800a49c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d14b      	bne.n	800a544 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d009      	beq.n	800a4c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	78db      	ldrb	r3, [r3, #3]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d128      	bne.n	800a522 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d110      	bne.n	800a502 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	69ba      	ldr	r2, [r7, #24]
 800a4f0:	0151      	lsls	r1, r2, #5
 800a4f2:	69fa      	ldr	r2, [r7, #28]
 800a4f4:	440a      	add	r2, r1
 800a4f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4fe:	6013      	str	r3, [r2, #0]
 800a500:	e00f      	b.n	800a522 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	015a      	lsls	r2, r3, #5
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	4413      	add	r3, r2
 800a50a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	69ba      	ldr	r2, [r7, #24]
 800a512:	0151      	lsls	r1, r2, #5
 800a514:	69fa      	ldr	r2, [r7, #28]
 800a516:	440a      	add	r2, r1
 800a518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a51c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a520:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	69ba      	ldr	r2, [r7, #24]
 800a532:	0151      	lsls	r1, r2, #5
 800a534:	69fa      	ldr	r2, [r7, #28]
 800a536:	440a      	add	r2, r1
 800a538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a53c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	e12f      	b.n	800a7a4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	69ba      	ldr	r2, [r7, #24]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a55e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a562:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	78db      	ldrb	r3, [r3, #3]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d015      	beq.n	800a598 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	695b      	ldr	r3, [r3, #20]
 800a570:	2b00      	cmp	r3, #0
 800a572:	f000 8117 	beq.w	800a7a4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a57c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	f003 030f 	and.w	r3, r3, #15
 800a586:	2101      	movs	r1, #1
 800a588:	fa01 f303 	lsl.w	r3, r1, r3
 800a58c:	69f9      	ldr	r1, [r7, #28]
 800a58e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a592:	4313      	orrs	r3, r2
 800a594:	634b      	str	r3, [r1, #52]	; 0x34
 800a596:	e105      	b.n	800a7a4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d110      	bne.n	800a5ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	69ba      	ldr	r2, [r7, #24]
 800a5b8:	0151      	lsls	r1, r2, #5
 800a5ba:	69fa      	ldr	r2, [r7, #28]
 800a5bc:	440a      	add	r2, r1
 800a5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5c6:	6013      	str	r3, [r2, #0]
 800a5c8:	e00f      	b.n	800a5ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	0151      	lsls	r1, r2, #5
 800a5dc:	69fa      	ldr	r2, [r7, #28]
 800a5de:	440a      	add	r2, r1
 800a5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	68d9      	ldr	r1, [r3, #12]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	781a      	ldrb	r2, [r3, #0]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	b298      	uxth	r0, r3
 800a5f8:	79fb      	ldrb	r3, [r7, #7]
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 fa2b 	bl	800aa5a <USB_WritePacket>
 800a604:	e0ce      	b.n	800a7a4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	015a      	lsls	r2, r3, #5
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	4413      	add	r3, r2
 800a60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	69ba      	ldr	r2, [r7, #24]
 800a616:	0151      	lsls	r1, r2, #5
 800a618:	69fa      	ldr	r2, [r7, #28]
 800a61a:	440a      	add	r2, r1
 800a61c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a620:	0cdb      	lsrs	r3, r3, #19
 800a622:	04db      	lsls	r3, r3, #19
 800a624:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	015a      	lsls	r2, r3, #5
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	4413      	add	r3, r2
 800a62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	0151      	lsls	r1, r2, #5
 800a638:	69fa      	ldr	r2, [r7, #28]
 800a63a:	440a      	add	r2, r1
 800a63c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a640:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a644:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a648:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d126      	bne.n	800a6a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a65e:	691a      	ldr	r2, [r3, #16]
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a668:	69b9      	ldr	r1, [r7, #24]
 800a66a:	0148      	lsls	r0, r1, #5
 800a66c:	69f9      	ldr	r1, [r7, #28]
 800a66e:	4401      	add	r1, r0
 800a670:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a674:	4313      	orrs	r3, r2
 800a676:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	0151      	lsls	r1, r2, #5
 800a68a:	69fa      	ldr	r2, [r7, #28]
 800a68c:	440a      	add	r2, r1
 800a68e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a692:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a696:	6113      	str	r3, [r2, #16]
 800a698:	e036      	b.n	800a708 <USB_EPStartXfer+0x3dc>
 800a69a:	bf00      	nop
 800a69c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	695a      	ldr	r2, [r3, #20]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	1e5a      	subs	r2, r3, #1
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c2:	691a      	ldr	r2, [r3, #16]
 800a6c4:	8afb      	ldrh	r3, [r7, #22]
 800a6c6:	04d9      	lsls	r1, r3, #19
 800a6c8:	4b39      	ldr	r3, [pc, #228]	; (800a7b0 <USB_EPStartXfer+0x484>)
 800a6ca:	400b      	ands	r3, r1
 800a6cc:	69b9      	ldr	r1, [r7, #24]
 800a6ce:	0148      	lsls	r0, r1, #5
 800a6d0:	69f9      	ldr	r1, [r7, #28]
 800a6d2:	4401      	add	r1, r0
 800a6d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6e8:	691a      	ldr	r2, [r3, #16]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	8af9      	ldrh	r1, [r7, #22]
 800a6f0:	fb01 f303 	mul.w	r3, r1, r3
 800a6f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6f8:	69b9      	ldr	r1, [r7, #24]
 800a6fa:	0148      	lsls	r0, r1, #5
 800a6fc:	69f9      	ldr	r1, [r7, #28]
 800a6fe:	4401      	add	r1, r0
 800a700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a704:	4313      	orrs	r3, r2
 800a706:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a708:	79fb      	ldrb	r3, [r7, #7]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d10d      	bne.n	800a72a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	68d9      	ldr	r1, [r3, #12]
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	4413      	add	r3, r2
 800a722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a726:	460a      	mov	r2, r1
 800a728:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	78db      	ldrb	r3, [r3, #3]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d128      	bne.n	800a784 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d110      	bne.n	800a764 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	69ba      	ldr	r2, [r7, #24]
 800a752:	0151      	lsls	r1, r2, #5
 800a754:	69fa      	ldr	r2, [r7, #28]
 800a756:	440a      	add	r2, r1
 800a758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a75c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a760:	6013      	str	r3, [r2, #0]
 800a762:	e00f      	b.n	800a784 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	015a      	lsls	r2, r3, #5
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	69ba      	ldr	r2, [r7, #24]
 800a774:	0151      	lsls	r1, r2, #5
 800a776:	69fa      	ldr	r2, [r7, #28]
 800a778:	440a      	add	r2, r1
 800a77a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a77e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a782:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	69ba      	ldr	r2, [r7, #24]
 800a794:	0151      	lsls	r1, r2, #5
 800a796:	69fa      	ldr	r2, [r7, #28]
 800a798:	440a      	add	r2, r1
 800a79a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a79e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3720      	adds	r7, #32
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	1ff80000 	.word	0x1ff80000

0800a7b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b087      	sub	sp, #28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	785b      	ldrb	r3, [r3, #1]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	f040 80cd 	bne.w	800a970 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d132      	bne.n	800a844 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	0151      	lsls	r1, r2, #5
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	440a      	add	r2, r1
 800a7f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a7fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a800:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	015a      	lsls	r2, r3, #5
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	4413      	add	r3, r2
 800a80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	0151      	lsls	r1, r2, #5
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	440a      	add	r2, r1
 800a818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a81c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	0151      	lsls	r1, r2, #5
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	440a      	add	r2, r1
 800a838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a83c:	0cdb      	lsrs	r3, r3, #19
 800a83e:	04db      	lsls	r3, r3, #19
 800a840:	6113      	str	r3, [r2, #16]
 800a842:	e04e      	b.n	800a8e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	015a      	lsls	r2, r3, #5
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	0151      	lsls	r1, r2, #5
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	440a      	add	r2, r1
 800a85a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a85e:	0cdb      	lsrs	r3, r3, #19
 800a860:	04db      	lsls	r3, r3, #19
 800a862:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	015a      	lsls	r2, r3, #5
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	0151      	lsls	r1, r2, #5
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	440a      	add	r2, r1
 800a87a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a87e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a882:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a886:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	695a      	ldr	r2, [r3, #20]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	429a      	cmp	r2, r3
 800a892:	d903      	bls.n	800a89c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	689a      	ldr	r2, [r3, #8]
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	0151      	lsls	r1, r2, #5
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	440a      	add	r2, r1
 800a8b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c8:	691a      	ldr	r2, [r3, #16]
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8d2:	6939      	ldr	r1, [r7, #16]
 800a8d4:	0148      	lsls	r0, r1, #5
 800a8d6:	6979      	ldr	r1, [r7, #20]
 800a8d8:	4401      	add	r1, r0
 800a8da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a8e2:	79fb      	ldrb	r3, [r7, #7]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d11e      	bne.n	800a926 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d009      	beq.n	800a904 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	015a      	lsls	r2, r3, #5
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	0151      	lsls	r1, r2, #5
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	440a      	add	r2, r1
 800a91a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a91e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	e092      	b.n	800aa4c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	015a      	lsls	r2, r3, #5
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	4413      	add	r3, r2
 800a92e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	0151      	lsls	r1, r2, #5
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	440a      	add	r2, r1
 800a93c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a940:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a944:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d07e      	beq.n	800aa4c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	f003 030f 	and.w	r3, r3, #15
 800a95e:	2101      	movs	r1, #1
 800a960:	fa01 f303 	lsl.w	r3, r1, r3
 800a964:	6979      	ldr	r1, [r7, #20]
 800a966:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a96a:	4313      	orrs	r3, r2
 800a96c:	634b      	str	r3, [r1, #52]	; 0x34
 800a96e:	e06d      	b.n	800aa4c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	015a      	lsls	r2, r3, #5
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	4413      	add	r3, r2
 800a978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	0151      	lsls	r1, r2, #5
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	440a      	add	r2, r1
 800a986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a98a:	0cdb      	lsrs	r3, r3, #19
 800a98c:	04db      	lsls	r3, r3, #19
 800a98e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	4413      	add	r3, r2
 800a998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	0151      	lsls	r1, r2, #5
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	440a      	add	r2, r1
 800a9a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9b2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	695b      	ldr	r3, [r3, #20]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	689a      	ldr	r2, [r3, #8]
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	015a      	lsls	r2, r3, #5
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	0151      	lsls	r1, r2, #5
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	440a      	add	r2, r1
 800a9da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f0:	691a      	ldr	r2, [r3, #16]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9fa:	6939      	ldr	r1, [r7, #16]
 800a9fc:	0148      	lsls	r0, r1, #5
 800a9fe:	6979      	ldr	r1, [r7, #20]
 800aa00:	4401      	add	r1, r0
 800aa02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa06:	4313      	orrs	r3, r2
 800aa08:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800aa0a:	79fb      	ldrb	r3, [r7, #7]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d10d      	bne.n	800aa2c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d009      	beq.n	800aa2c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	68d9      	ldr	r1, [r3, #12]
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa28:	460a      	mov	r2, r1
 800aa2a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	015a      	lsls	r2, r3, #5
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	693a      	ldr	r2, [r7, #16]
 800aa3c:	0151      	lsls	r1, r2, #5
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	440a      	add	r2, r1
 800aa42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	371c      	adds	r7, #28
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b089      	sub	sp, #36	; 0x24
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	4611      	mov	r1, r2
 800aa66:	461a      	mov	r2, r3
 800aa68:	460b      	mov	r3, r1
 800aa6a:	71fb      	strb	r3, [r7, #7]
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aa78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d123      	bne.n	800aac8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aa80:	88bb      	ldrh	r3, [r7, #4]
 800aa82:	3303      	adds	r3, #3
 800aa84:	089b      	lsrs	r3, r3, #2
 800aa86:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aa88:	2300      	movs	r3, #0
 800aa8a:	61bb      	str	r3, [r7, #24]
 800aa8c:	e018      	b.n	800aac0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	031a      	lsls	r2, r3, #12
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	4413      	add	r3, r2
 800aa96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	3301      	adds	r3, #1
 800aab2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	3301      	adds	r3, #1
 800aab8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	3301      	adds	r3, #1
 800aabe:	61bb      	str	r3, [r7, #24]
 800aac0:	69ba      	ldr	r2, [r7, #24]
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d3e2      	bcc.n	800aa8e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3724      	adds	r7, #36	; 0x24
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b08b      	sub	sp, #44	; 0x2c
 800aada:	af00      	add	r7, sp, #0
 800aadc:	60f8      	str	r0, [r7, #12]
 800aade:	60b9      	str	r1, [r7, #8]
 800aae0:	4613      	mov	r3, r2
 800aae2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aaec:	88fb      	ldrh	r3, [r7, #6]
 800aaee:	089b      	lsrs	r3, r3, #2
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aaf4:	88fb      	ldrh	r3, [r7, #6]
 800aaf6:	f003 0303 	and.w	r3, r3, #3
 800aafa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aafc:	2300      	movs	r3, #0
 800aafe:	623b      	str	r3, [r7, #32]
 800ab00:	e014      	b.n	800ab2c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	601a      	str	r2, [r3, #0]
    pDest++;
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	3301      	adds	r3, #1
 800ab12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	3301      	adds	r3, #1
 800ab18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	3301      	adds	r3, #1
 800ab24:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ab26:	6a3b      	ldr	r3, [r7, #32]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	623b      	str	r3, [r7, #32]
 800ab2c:	6a3a      	ldr	r2, [r7, #32]
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d3e6      	bcc.n	800ab02 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ab34:	8bfb      	ldrh	r3, [r7, #30]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d01e      	beq.n	800ab78 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab44:	461a      	mov	r2, r3
 800ab46:	f107 0310 	add.w	r3, r7, #16
 800ab4a:	6812      	ldr	r2, [r2, #0]
 800ab4c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	6a3b      	ldr	r3, [r7, #32]
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	fa22 f303 	lsr.w	r3, r2, r3
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	701a      	strb	r2, [r3, #0]
      i++;
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	3301      	adds	r3, #1
 800ab64:	623b      	str	r3, [r7, #32]
      pDest++;
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	3301      	adds	r3, #1
 800ab6a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ab6c:	8bfb      	ldrh	r3, [r7, #30]
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ab72:	8bfb      	ldrh	r3, [r7, #30]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1ea      	bne.n	800ab4e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ab78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	372c      	adds	r7, #44	; 0x2c
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b085      	sub	sp, #20
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	785b      	ldrb	r3, [r3, #1]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d12c      	bne.n	800abfc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	015a      	lsls	r2, r3, #5
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	4413      	add	r3, r2
 800abaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	db12      	blt.n	800abda <USB_EPSetStall+0x54>
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00f      	beq.n	800abda <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	015a      	lsls	r2, r3, #5
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	4413      	add	r3, r2
 800abc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	0151      	lsls	r1, r2, #5
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	440a      	add	r2, r1
 800abd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800abd8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	0151      	lsls	r1, r2, #5
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	440a      	add	r2, r1
 800abf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800abf8:	6013      	str	r3, [r2, #0]
 800abfa:	e02b      	b.n	800ac54 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	db12      	blt.n	800ac34 <USB_EPSetStall+0xae>
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00f      	beq.n	800ac34 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	0151      	lsls	r1, r2, #5
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	440a      	add	r2, r1
 800ac2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac32:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	015a      	lsls	r2, r3, #5
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	0151      	lsls	r1, r2, #5
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	440a      	add	r2, r1
 800ac4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	785b      	ldrb	r3, [r3, #1]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d128      	bne.n	800acd0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	015a      	lsls	r2, r3, #5
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	0151      	lsls	r1, r2, #5
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	440a      	add	r2, r1
 800ac94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	78db      	ldrb	r3, [r3, #3]
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d003      	beq.n	800acae <USB_EPClearStall+0x4c>
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	78db      	ldrb	r3, [r3, #3]
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d138      	bne.n	800ad20 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	015a      	lsls	r2, r3, #5
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	4413      	add	r3, r2
 800acb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68ba      	ldr	r2, [r7, #8]
 800acbe:	0151      	lsls	r1, r2, #5
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	440a      	add	r2, r1
 800acc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800accc:	6013      	str	r3, [r2, #0]
 800acce:	e027      	b.n	800ad20 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	015a      	lsls	r2, r3, #5
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4413      	add	r3, r2
 800acd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	0151      	lsls	r1, r2, #5
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	440a      	add	r2, r1
 800ace6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800acee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	78db      	ldrb	r3, [r3, #3]
 800acf4:	2b03      	cmp	r3, #3
 800acf6:	d003      	beq.n	800ad00 <USB_EPClearStall+0x9e>
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	78db      	ldrb	r3, [r3, #3]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d10f      	bne.n	800ad20 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	015a      	lsls	r2, r3, #5
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	4413      	add	r3, r2
 800ad08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	0151      	lsls	r1, r2, #5
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	440a      	add	r2, r1
 800ad16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad1e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b085      	sub	sp, #20
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	460b      	mov	r3, r1
 800ad38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad4c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ad50:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	78fb      	ldrb	r3, [r7, #3]
 800ad5c:	011b      	lsls	r3, r3, #4
 800ad5e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ad62:	68f9      	ldr	r1, [r7, #12]
 800ad64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b085      	sub	sp, #20
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad94:	f023 0303 	bic.w	r3, r3, #3
 800ad98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ada8:	f023 0302 	bic.w	r3, r3, #2
 800adac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800add6:	f023 0303 	bic.w	r3, r3, #3
 800adda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800adea:	f043 0302 	orr.w	r3, r3, #2
 800adee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800adfe:	b480      	push	{r7}
 800ae00:	b085      	sub	sp, #20
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	4013      	ands	r3, r2
 800ae14:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ae16:	68fb      	ldr	r3, [r7, #12]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae36:	699b      	ldr	r3, [r3, #24]
 800ae38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae40:	69db      	ldr	r3, [r3, #28]
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	4013      	ands	r3, r2
 800ae46:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	0c1b      	lsrs	r3, r3, #16
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3714      	adds	r7, #20
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae74:	69db      	ldr	r3, [r3, #28]
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	4013      	ands	r3, r2
 800ae7a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	b29b      	uxth	r3, r3
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	460b      	mov	r3, r1
 800ae96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ae9c:	78fb      	ldrb	r3, [r7, #3]
 800ae9e:	015a      	lsls	r2, r3, #5
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	4413      	add	r3, r2
 800aea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeb2:	695b      	ldr	r3, [r3, #20]
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aeba:	68bb      	ldr	r3, [r7, #8]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aeec:	78fb      	ldrb	r3, [r7, #3]
 800aeee:	f003 030f 	and.w	r3, r3, #15
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	fa22 f303 	lsr.w	r3, r2, r3
 800aef8:	01db      	lsls	r3, r3, #7
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	693a      	ldr	r2, [r7, #16]
 800aefe:	4313      	orrs	r3, r2
 800af00:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800af02:	78fb      	ldrb	r3, [r7, #3]
 800af04:	015a      	lsls	r2, r3, #5
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	4413      	add	r3, r2
 800af0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	4013      	ands	r3, r2
 800af14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af16:	68bb      	ldr	r3, [r7, #8]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	371c      	adds	r7, #28
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	f003 0301 	and.w	r3, r3, #1
}
 800af34:	4618      	mov	r0, r3
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800af5e:	f023 0307 	bic.w	r3, r3, #7
 800af62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
	...

0800af88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800af88:	b480      	push	{r7}
 800af8a:	b087      	sub	sp, #28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	460b      	mov	r3, r1
 800af92:	607a      	str	r2, [r7, #4]
 800af94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	333c      	adds	r3, #60	; 0x3c
 800af9e:	3304      	adds	r3, #4
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	4a26      	ldr	r2, [pc, #152]	; (800b040 <USB_EP0_OutStart+0xb8>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d90a      	bls.n	800afc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afbc:	d101      	bne.n	800afc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	e037      	b.n	800b032 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc8:	461a      	mov	r2, r3
 800afca:	2300      	movs	r3, #0
 800afcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aff0:	f043 0318 	orr.w	r3, r3, #24
 800aff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b004:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b008:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b00a:	7afb      	ldrb	r3, [r7, #11]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d10f      	bne.n	800b030 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b016:	461a      	mov	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b02a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b02e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	371c      	adds	r7, #28
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	4f54300a 	.word	0x4f54300a

0800b044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b04c:	2300      	movs	r3, #0
 800b04e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	3301      	adds	r3, #1
 800b054:	60fb      	str	r3, [r7, #12]
 800b056:	4a13      	ldr	r2, [pc, #76]	; (800b0a4 <USB_CoreReset+0x60>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d901      	bls.n	800b060 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e01a      	b.n	800b096 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	2b00      	cmp	r3, #0
 800b066:	daf3      	bge.n	800b050 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	f043 0201 	orr.w	r2, r3, #1
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3301      	adds	r3, #1
 800b07c:	60fb      	str	r3, [r7, #12]
 800b07e:	4a09      	ldr	r2, [pc, #36]	; (800b0a4 <USB_CoreReset+0x60>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d901      	bls.n	800b088 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b084:	2303      	movs	r3, #3
 800b086:	e006      	b.n	800b096 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	2b01      	cmp	r3, #1
 800b092:	d0f1      	beq.n	800b078 <USB_CoreReset+0x34>

  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	00030d40 	.word	0x00030d40

0800b0a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b0ac:	4904      	ldr	r1, [pc, #16]	; (800b0c0 <MX_FATFS_Init+0x18>)
 800b0ae:	4805      	ldr	r0, [pc, #20]	; (800b0c4 <MX_FATFS_Init+0x1c>)
 800b0b0:	f004 f95e 	bl	800f370 <FATFS_LinkDriver>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	4b03      	ldr	r3, [pc, #12]	; (800b0c8 <MX_FATFS_Init+0x20>)
 800b0ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b0bc:	bf00      	nop
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20003998 	.word	0x20003998
 800b0c4:	0800ff0c 	.word	0x0800ff0c
 800b0c8:	20003994 	.word	0x20003994

0800b0cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b0d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b0e6:	f000 f896 	bl	800b216 <BSP_SD_IsDetected>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d001      	beq.n	800b0f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e012      	b.n	800b11a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b0f4:	480b      	ldr	r0, [pc, #44]	; (800b124 <BSP_SD_Init+0x48>)
 800b0f6:	f7fc f926 	bl	8007346 <HAL_SD_Init>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b0fe:	79fb      	ldrb	r3, [r7, #7]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d109      	bne.n	800b118 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b104:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b108:	4806      	ldr	r0, [pc, #24]	; (800b124 <BSP_SD_Init+0x48>)
 800b10a:	f7fc fedd 	bl	8007ec8 <HAL_SD_ConfigWideBusOperation>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d001      	beq.n	800b118 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b118:	79fb      	ldrb	r3, [r7, #7]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	2000277c 	.word	0x2000277c

0800b128 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	68f9      	ldr	r1, [r7, #12]
 800b13e:	4806      	ldr	r0, [pc, #24]	; (800b158 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b140:	f7fc f9b0 	bl	80074a4 <HAL_SD_ReadBlocks_DMA>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3718      	adds	r7, #24
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	2000277c 	.word	0x2000277c

0800b15c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b168:	2300      	movs	r3, #0
 800b16a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68ba      	ldr	r2, [r7, #8]
 800b170:	68f9      	ldr	r1, [r7, #12]
 800b172:	4806      	ldr	r0, [pc, #24]	; (800b18c <BSP_SD_WriteBlocks_DMA+0x30>)
 800b174:	f7fc fa76 	bl	8007664 <HAL_SD_WriteBlocks_DMA>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d001      	beq.n	800b182 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b182:	7dfb      	ldrb	r3, [r7, #23]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3718      	adds	r7, #24
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	2000277c 	.word	0x2000277c

0800b190 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b194:	4805      	ldr	r0, [pc, #20]	; (800b1ac <BSP_SD_GetCardState+0x1c>)
 800b196:	f7fc ff31 	bl	8007ffc <HAL_SD_GetCardState>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b04      	cmp	r3, #4
 800b19e:	bf14      	ite	ne
 800b1a0:	2301      	movne	r3, #1
 800b1a2:	2300      	moveq	r3, #0
 800b1a4:	b2db      	uxtb	r3, r3
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	2000277c 	.word	0x2000277c

0800b1b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b1b8:	6879      	ldr	r1, [r7, #4]
 800b1ba:	4803      	ldr	r0, [pc, #12]	; (800b1c8 <BSP_SD_GetCardInfo+0x18>)
 800b1bc:	f7fc fe58 	bl	8007e70 <HAL_SD_GetCardInfo>
}
 800b1c0:	bf00      	nop
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	2000277c 	.word	0x2000277c

0800b1cc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b1d4:	f000 f818 	bl	800b208 <BSP_SD_AbortCallback>
}
 800b1d8:	bf00      	nop
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b1e8:	f000 f9a8 	bl	800b53c <BSP_SD_WriteCpltCallback>
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b1fc:	f000 f9aa 	bl	800b554 <BSP_SD_ReadCpltCallback>
}
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b208:	b480      	push	{r7}
 800b20a:	af00      	add	r7, sp, #0

}
 800b20c:	bf00      	nop
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b082      	sub	sp, #8
 800b21a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b21c:	2301      	movs	r3, #1
 800b21e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b220:	f000 f80c 	bl	800b23c <BSP_PlatformIsDetected>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d101      	bne.n	800b22e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b22a:	2300      	movs	r3, #0
 800b22c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b22e:	79fb      	ldrb	r3, [r7, #7]
 800b230:	b2db      	uxtb	r3, r3
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
	...

0800b23c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b242:	2301      	movs	r3, #1
 800b244:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b246:	2180      	movs	r1, #128	; 0x80
 800b248:	4806      	ldr	r0, [pc, #24]	; (800b264 <BSP_PlatformIsDetected+0x28>)
 800b24a:	f7f9 f979 	bl	8004540 <HAL_GPIO_ReadPin>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b254:	2300      	movs	r3, #0
 800b256:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b258:	79fb      	ldrb	r3, [r7, #7]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	40020800 	.word	0x40020800

0800b268 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b270:	f7f7 fb34 	bl	80028dc <HAL_GetTick>
 800b274:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b276:	e006      	b.n	800b286 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b278:	f7ff ff8a 	bl	800b190 <BSP_SD_GetCardState>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b282:	2300      	movs	r3, #0
 800b284:	e009      	b.n	800b29a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b286:	f7f7 fb29 	bl	80028dc <HAL_GetTick>
 800b28a:	4602      	mov	r2, r0
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	429a      	cmp	r2, r3
 800b294:	d8f0      	bhi.n	800b278 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b296:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
	...

0800b2a4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b2ae:	4b0b      	ldr	r3, [pc, #44]	; (800b2dc <SD_CheckStatus+0x38>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b2b4:	f7ff ff6c 	bl	800b190 <BSP_SD_GetCardState>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d107      	bne.n	800b2ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b2be:	4b07      	ldr	r3, [pc, #28]	; (800b2dc <SD_CheckStatus+0x38>)
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	f023 0301 	bic.w	r3, r3, #1
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	4b04      	ldr	r3, [pc, #16]	; (800b2dc <SD_CheckStatus+0x38>)
 800b2cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b2ce:	4b03      	ldr	r3, [pc, #12]	; (800b2dc <SD_CheckStatus+0x38>)
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	b2db      	uxtb	r3, r3
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	20000009 	.word	0x20000009

0800b2e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b2ea:	f7ff fef7 	bl	800b0dc <BSP_SD_Init>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d107      	bne.n	800b304 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b2f4:	79fb      	ldrb	r3, [r7, #7]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7ff ffd4 	bl	800b2a4 <SD_CheckStatus>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	461a      	mov	r2, r3
 800b300:	4b04      	ldr	r3, [pc, #16]	; (800b314 <SD_initialize+0x34>)
 800b302:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b304:	4b03      	ldr	r3, [pc, #12]	; (800b314 <SD_initialize+0x34>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	b2db      	uxtb	r3, r3
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	20000009 	.word	0x20000009

0800b318 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	4603      	mov	r3, r0
 800b320:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b322:	79fb      	ldrb	r3, [r7, #7]
 800b324:	4618      	mov	r0, r3
 800b326:	f7ff ffbd 	bl	800b2a4 <SD_CheckStatus>
 800b32a:	4603      	mov	r3, r0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60b9      	str	r1, [r7, #8]
 800b33c:	607a      	str	r2, [r7, #4]
 800b33e:	603b      	str	r3, [r7, #0]
 800b340:	4603      	mov	r3, r0
 800b342:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b348:	f247 5030 	movw	r0, #30000	; 0x7530
 800b34c:	f7ff ff8c 	bl	800b268 <SD_CheckStatusWithTimeout>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	da01      	bge.n	800b35a <SD_read+0x26>
  {
    return res;
 800b356:	7dfb      	ldrb	r3, [r7, #23]
 800b358:	e03b      	b.n	800b3d2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	6879      	ldr	r1, [r7, #4]
 800b35e:	68b8      	ldr	r0, [r7, #8]
 800b360:	f7ff fee2 	bl	800b128 <BSP_SD_ReadBlocks_DMA>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d132      	bne.n	800b3d0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b36a:	4b1c      	ldr	r3, [pc, #112]	; (800b3dc <SD_read+0xa8>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b370:	f7f7 fab4 	bl	80028dc <HAL_GetTick>
 800b374:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b376:	bf00      	nop
 800b378:	4b18      	ldr	r3, [pc, #96]	; (800b3dc <SD_read+0xa8>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d108      	bne.n	800b392 <SD_read+0x5e>
 800b380:	f7f7 faac 	bl	80028dc <HAL_GetTick>
 800b384:	4602      	mov	r2, r0
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	f247 522f 	movw	r2, #29999	; 0x752f
 800b38e:	4293      	cmp	r3, r2
 800b390:	d9f2      	bls.n	800b378 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b392:	4b12      	ldr	r3, [pc, #72]	; (800b3dc <SD_read+0xa8>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d102      	bne.n	800b3a0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	75fb      	strb	r3, [r7, #23]
 800b39e:	e017      	b.n	800b3d0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b3a0:	4b0e      	ldr	r3, [pc, #56]	; (800b3dc <SD_read+0xa8>)
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b3a6:	f7f7 fa99 	bl	80028dc <HAL_GetTick>
 800b3aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b3ac:	e007      	b.n	800b3be <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b3ae:	f7ff feef 	bl	800b190 <BSP_SD_GetCardState>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d102      	bne.n	800b3be <SD_read+0x8a>
          {
            res = RES_OK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b3bc:	e008      	b.n	800b3d0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b3be:	f7f7 fa8d 	bl	80028dc <HAL_GetTick>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	f247 522f 	movw	r2, #29999	; 0x752f
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d9ee      	bls.n	800b3ae <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3718      	adds	r7, #24
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20000194 	.word	0x20000194

0800b3e0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60b9      	str	r1, [r7, #8]
 800b3e8:	607a      	str	r2, [r7, #4]
 800b3ea:	603b      	str	r3, [r7, #0]
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b3f4:	4b24      	ldr	r3, [pc, #144]	; (800b488 <SD_write+0xa8>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b3fa:	f247 5030 	movw	r0, #30000	; 0x7530
 800b3fe:	f7ff ff33 	bl	800b268 <SD_CheckStatusWithTimeout>
 800b402:	4603      	mov	r3, r0
 800b404:	2b00      	cmp	r3, #0
 800b406:	da01      	bge.n	800b40c <SD_write+0x2c>
  {
    return res;
 800b408:	7dfb      	ldrb	r3, [r7, #23]
 800b40a:	e038      	b.n	800b47e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	68b8      	ldr	r0, [r7, #8]
 800b412:	f7ff fea3 	bl	800b15c <BSP_SD_WriteBlocks_DMA>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d12f      	bne.n	800b47c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b41c:	f7f7 fa5e 	bl	80028dc <HAL_GetTick>
 800b420:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b422:	bf00      	nop
 800b424:	4b18      	ldr	r3, [pc, #96]	; (800b488 <SD_write+0xa8>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d108      	bne.n	800b43e <SD_write+0x5e>
 800b42c:	f7f7 fa56 	bl	80028dc <HAL_GetTick>
 800b430:	4602      	mov	r2, r0
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	f247 522f 	movw	r2, #29999	; 0x752f
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d9f2      	bls.n	800b424 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b43e:	4b12      	ldr	r3, [pc, #72]	; (800b488 <SD_write+0xa8>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d102      	bne.n	800b44c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	75fb      	strb	r3, [r7, #23]
 800b44a:	e017      	b.n	800b47c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b44c:	4b0e      	ldr	r3, [pc, #56]	; (800b488 <SD_write+0xa8>)
 800b44e:	2200      	movs	r2, #0
 800b450:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b452:	f7f7 fa43 	bl	80028dc <HAL_GetTick>
 800b456:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b458:	e007      	b.n	800b46a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b45a:	f7ff fe99 	bl	800b190 <BSP_SD_GetCardState>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d102      	bne.n	800b46a <SD_write+0x8a>
          {
            res = RES_OK;
 800b464:	2300      	movs	r3, #0
 800b466:	75fb      	strb	r3, [r7, #23]
            break;
 800b468:	e008      	b.n	800b47c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b46a:	f7f7 fa37 	bl	80028dc <HAL_GetTick>
 800b46e:	4602      	mov	r2, r0
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	f247 522f 	movw	r2, #29999	; 0x752f
 800b478:	4293      	cmp	r3, r2
 800b47a:	d9ee      	bls.n	800b45a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b47c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3718      	adds	r7, #24
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	20000190 	.word	0x20000190

0800b48c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08c      	sub	sp, #48	; 0x30
 800b490:	af00      	add	r7, sp, #0
 800b492:	4603      	mov	r3, r0
 800b494:	603a      	str	r2, [r7, #0]
 800b496:	71fb      	strb	r3, [r7, #7]
 800b498:	460b      	mov	r3, r1
 800b49a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b4a2:	4b25      	ldr	r3, [pc, #148]	; (800b538 <SD_ioctl+0xac>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	f003 0301 	and.w	r3, r3, #1
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d001      	beq.n	800b4b4 <SD_ioctl+0x28>
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e03c      	b.n	800b52e <SD_ioctl+0xa2>

  switch (cmd)
 800b4b4:	79bb      	ldrb	r3, [r7, #6]
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d834      	bhi.n	800b524 <SD_ioctl+0x98>
 800b4ba:	a201      	add	r2, pc, #4	; (adr r2, 800b4c0 <SD_ioctl+0x34>)
 800b4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c0:	0800b4d1 	.word	0x0800b4d1
 800b4c4:	0800b4d9 	.word	0x0800b4d9
 800b4c8:	0800b4f1 	.word	0x0800b4f1
 800b4cc:	0800b50b 	.word	0x0800b50b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4d6:	e028      	b.n	800b52a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4d8:	f107 030c 	add.w	r3, r7, #12
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff fe67 	bl	800b1b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b4e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4ee:	e01c      	b.n	800b52a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4f0:	f107 030c 	add.w	r3, r7, #12
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7ff fe5b 	bl	800b1b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b508:	e00f      	b.n	800b52a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b50a:	f107 030c 	add.w	r3, r7, #12
 800b50e:	4618      	mov	r0, r3
 800b510:	f7ff fe4e 	bl	800b1b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b516:	0a5a      	lsrs	r2, r3, #9
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b522:	e002      	b.n	800b52a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b524:	2304      	movs	r3, #4
 800b526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b52a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3730      	adds	r7, #48	; 0x30
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	20000009 	.word	0x20000009

0800b53c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b53c:	b480      	push	{r7}
 800b53e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b540:	4b03      	ldr	r3, [pc, #12]	; (800b550 <BSP_SD_WriteCpltCallback+0x14>)
 800b542:	2201      	movs	r2, #1
 800b544:	601a      	str	r2, [r3, #0]
}
 800b546:	bf00      	nop
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	20000190 	.word	0x20000190

0800b554 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b554:	b480      	push	{r7}
 800b556:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b558:	4b03      	ldr	r3, [pc, #12]	; (800b568 <BSP_SD_ReadCpltCallback+0x14>)
 800b55a:	2201      	movs	r2, #1
 800b55c:	601a      	str	r2, [r3, #0]
}
 800b55e:	bf00      	nop
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	20000194 	.word	0x20000194

0800b56c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800b578:	f44f 701d 	mov.w	r0, #628	; 0x274
 800b57c:	f004 fc0a 	bl	800fd94 <USBD_static_malloc>
 800b580:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d105      	bne.n	800b594 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b590:	2302      	movs	r3, #2
 800b592:	e034      	b.n	800b5fe <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	7c1b      	ldrb	r3, [r3, #16]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d115      	bne.n	800b5d0 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b5a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5a8:	2202      	movs	r2, #2
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f004 fa60 	bl	800fa72 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b5ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5be:	2202      	movs	r2, #2
 800b5c0:	2181      	movs	r1, #129	; 0x81
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f004 fa55 	bl	800fa72 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	871a      	strh	r2, [r3, #56]	; 0x38
 800b5ce:	e012      	b.n	800b5f6 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b5d0:	2340      	movs	r3, #64	; 0x40
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	2101      	movs	r1, #1
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f004 fa4b 	bl	800fa72 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b5e4:	2340      	movs	r3, #64	; 0x40
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	2181      	movs	r1, #129	; 0x81
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f004 fa41 	bl	800fa72 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f999 	bl	800b92e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b082      	sub	sp, #8
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	460b      	mov	r3, r1
 800b610:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800b612:	2101      	movs	r1, #1
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f004 fa52 	bl	800fabe <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800b622:	2181      	movs	r1, #129	; 0x81
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f004 fa4a 	bl	800fabe <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00c      	beq.n	800b654 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f9d5 	bl	800b9ea <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b646:	4618      	mov	r0, r3
 800b648:	f004 fbb2 	bl	800fdb0 <USBD_static_free>
    pdev->pClassData = NULL;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
	...

0800b660 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b670:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800b672:	2300      	movs	r3, #0
 800b674:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800b676:	2300      	movs	r3, #0
 800b678:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b680:	2303      	movs	r3, #3
 800b682:	e0db      	b.n	800b83c <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d04e      	beq.n	800b72e <USBD_MSC_Setup+0xce>
 800b690:	2b20      	cmp	r3, #32
 800b692:	f040 80cb 	bne.w	800b82c <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	785b      	ldrb	r3, [r3, #1]
 800b69a:	2bfe      	cmp	r3, #254	; 0xfe
 800b69c:	d002      	beq.n	800b6a4 <USBD_MSC_Setup+0x44>
 800b69e:	2bff      	cmp	r3, #255	; 0xff
 800b6a0:	d025      	beq.n	800b6ee <USBD_MSC_Setup+0x8e>
 800b6a2:	e03c      	b.n	800b71e <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	885b      	ldrh	r3, [r3, #2]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d119      	bne.n	800b6e0 <USBD_MSC_Setup+0x80>
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	88db      	ldrh	r3, [r3, #6]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d115      	bne.n	800b6e0 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	da10      	bge.n	800b6e0 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6c4:	699b      	ldr	r3, [r3, #24]
 800b6c6:	4798      	blx	r3
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f002 fe3d 	bl	800e356 <USBD_CtlSendData>
 800b6dc:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b6de:	e025      	b.n	800b72c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f002 fdc6 	bl	800e274 <USBD_CtlError>
            ret = USBD_FAIL;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	75fb      	strb	r3, [r7, #23]
          break;
 800b6ec:	e01e      	b.n	800b72c <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	885b      	ldrh	r3, [r3, #2]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10c      	bne.n	800b710 <USBD_MSC_Setup+0xb0>
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	88db      	ldrh	r3, [r3, #6]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d108      	bne.n	800b710 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b704:	2b00      	cmp	r3, #0
 800b706:	db03      	blt.n	800b710 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f948 	bl	800b99e <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b70e:	e00d      	b.n	800b72c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f002 fdae 	bl	800e274 <USBD_CtlError>
            ret = USBD_FAIL;
 800b718:	2303      	movs	r3, #3
 800b71a:	75fb      	strb	r3, [r7, #23]
          break;
 800b71c:	e006      	b.n	800b72c <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f002 fda7 	bl	800e274 <USBD_CtlError>
          ret = USBD_FAIL;
 800b726:	2303      	movs	r3, #3
 800b728:	75fb      	strb	r3, [r7, #23]
          break;
 800b72a:	bf00      	nop
      }
      break;
 800b72c:	e085      	b.n	800b83a <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	785b      	ldrb	r3, [r3, #1]
 800b732:	2b0b      	cmp	r3, #11
 800b734:	d871      	bhi.n	800b81a <USBD_MSC_Setup+0x1ba>
 800b736:	a201      	add	r2, pc, #4	; (adr r2, 800b73c <USBD_MSC_Setup+0xdc>)
 800b738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73c:	0800b76d 	.word	0x0800b76d
 800b740:	0800b7e9 	.word	0x0800b7e9
 800b744:	0800b81b 	.word	0x0800b81b
 800b748:	0800b81b 	.word	0x0800b81b
 800b74c:	0800b81b 	.word	0x0800b81b
 800b750:	0800b81b 	.word	0x0800b81b
 800b754:	0800b81b 	.word	0x0800b81b
 800b758:	0800b81b 	.word	0x0800b81b
 800b75c:	0800b81b 	.word	0x0800b81b
 800b760:	0800b81b 	.word	0x0800b81b
 800b764:	0800b797 	.word	0x0800b797
 800b768:	0800b7c1 	.word	0x0800b7c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b03      	cmp	r3, #3
 800b776:	d107      	bne.n	800b788 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b778:	f107 030e 	add.w	r3, r7, #14
 800b77c:	2202      	movs	r2, #2
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f002 fde8 	bl	800e356 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b786:	e050      	b.n	800b82a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800b788:	6839      	ldr	r1, [r7, #0]
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f002 fd72 	bl	800e274 <USBD_CtlError>
            ret = USBD_FAIL;
 800b790:	2303      	movs	r3, #3
 800b792:	75fb      	strb	r3, [r7, #23]
          break;
 800b794:	e049      	b.n	800b82a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d107      	bne.n	800b7b2 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f002 fdd3 	bl	800e356 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b7b0:	e03b      	b.n	800b82a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f002 fd5d 	bl	800e274 <USBD_CtlError>
            ret = USBD_FAIL;
 800b7ba:	2303      	movs	r3, #3
 800b7bc:	75fb      	strb	r3, [r7, #23]
          break;
 800b7be:	e034      	b.n	800b82a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d106      	bne.n	800b7da <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	885b      	ldrh	r3, [r3, #2]
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b7d8:	e027      	b.n	800b82a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f002 fd49 	bl	800e274 <USBD_CtlError>
            ret = USBD_FAIL;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	75fb      	strb	r3, [r7, #23]
          break;
 800b7e6:	e020      	b.n	800b82a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	2b03      	cmp	r3, #3
 800b7f2:	d119      	bne.n	800b828 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	885b      	ldrh	r3, [r3, #2]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d115      	bne.n	800b828 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	889b      	ldrh	r3, [r3, #4]
 800b800:	b2db      	uxtb	r3, r3
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f004 f979 	bl	800fafc <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	889b      	ldrh	r3, [r3, #4]
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fa82 	bl	800bd1c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800b818:	e006      	b.n	800b828 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f002 fd29 	bl	800e274 <USBD_CtlError>
          ret = USBD_FAIL;
 800b822:	2303      	movs	r3, #3
 800b824:	75fb      	strb	r3, [r7, #23]
          break;
 800b826:	e000      	b.n	800b82a <USBD_MSC_Setup+0x1ca>
          break;
 800b828:	bf00      	nop
      }
      break;
 800b82a:	e006      	b.n	800b83a <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f002 fd20 	bl	800e274 <USBD_CtlError>
      ret = USBD_FAIL;
 800b834:	2303      	movs	r3, #3
 800b836:	75fb      	strb	r3, [r7, #23]
      break;
 800b838:	bf00      	nop
  }

  return (uint8_t)ret;
 800b83a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3718      	adds	r7, #24
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800b850:	78fb      	ldrb	r3, [r7, #3]
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f8dc 	bl	800ba12 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	460b      	mov	r3, r1
 800b86e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800b870:	78fb      	ldrb	r3, [r7, #3]
 800b872:	4619      	mov	r1, r3
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f902 	bl	800ba7e <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2220      	movs	r2, #32
 800b890:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800b892:	4b03      	ldr	r3, [pc, #12]	; (800b8a0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800b894:	4618      	mov	r0, r3
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	20000044 	.word	0x20000044

0800b8a4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2220      	movs	r2, #32
 800b8b0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800b8b2:	4b03      	ldr	r3, [pc, #12]	; (800b8c0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	20000064 	.word	0x20000064

0800b8c4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2220      	movs	r2, #32
 800b8d0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800b8d2:	4b03      	ldr	r3, [pc, #12]	; (800b8e0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	20000084 	.word	0x20000084

0800b8e4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	220a      	movs	r2, #10
 800b8f0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800b8f2:	4b03      	ldr	r3, [pc, #12]	; (800b900 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	200000a4 	.word	0x200000a4

0800b904 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d101      	bne.n	800b918 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b914:	2303      	movs	r3, #3
 800b916:	e004      	b.n	800b922 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	683a      	ldr	r2, [r7, #0]
 800b91c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b084      	sub	sp, #16
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b93c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d028      	beq.n	800b996 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2200      	movs	r2, #0
 800b94e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2000      	movs	r0, #0
 800b972:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800b974:	2101      	movs	r1, #1
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f004 f8c0 	bl	800fafc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800b97c:	2181      	movs	r1, #129	; 0x81
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f004 f8bc 	bl	800fafc <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b98a:	231f      	movs	r3, #31
 800b98c:	2101      	movs	r1, #1
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f004 f97d 	bl	800fc8e <USBD_LL_PrepareReceive>
 800b994:	e000      	b.n	800b998 <MSC_BOT_Init+0x6a>
    return;
 800b996:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b084      	sub	sp, #16
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9ac:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d016      	beq.n	800b9e2 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800b9c0:	2181      	movs	r1, #129	; 0x81
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f004 f8d8 	bl	800fb78 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800b9c8:	2101      	movs	r1, #1
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f004 f8d4 	bl	800fb78 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b9d6:	231f      	movs	r3, #31
 800b9d8:	2101      	movs	r1, #1
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f004 f957 	bl	800fc8e <USBD_LL_PrepareReceive>
 800b9e0:	e000      	b.n	800b9e4 <MSC_BOT_Reset+0x46>
    return;
 800b9e2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b085      	sub	sp, #20
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9f8:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	721a      	strb	r2, [r3, #8]
  }
}
 800ba06:	bf00      	nop
 800ba08:	3714      	adds	r7, #20
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b084      	sub	sp, #16
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba24:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d020      	beq.n	800ba6e <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	7a1b      	ldrb	r3, [r3, #8]
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	d005      	beq.n	800ba40 <MSC_BOT_DataIn+0x2e>
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	db1c      	blt.n	800ba72 <MSC_BOT_DataIn+0x60>
 800ba38:	3b03      	subs	r3, #3
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d819      	bhi.n	800ba72 <MSC_BOT_DataIn+0x60>
 800ba3e:	e011      	b.n	800ba64 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f992 	bl	800bd78 <SCSI_ProcessCmd>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	da0d      	bge.n	800ba76 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ba5a:	2101      	movs	r1, #1
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f8fb 	bl	800bc58 <MSC_BOT_SendCSW>
      }
      break;
 800ba62:	e008      	b.n	800ba76 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ba64:	2100      	movs	r1, #0
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f8f6 	bl	800bc58 <MSC_BOT_SendCSW>
      break;
 800ba6c:	e004      	b.n	800ba78 <MSC_BOT_DataIn+0x66>
    return;
 800ba6e:	bf00      	nop
 800ba70:	e002      	b.n	800ba78 <MSC_BOT_DataIn+0x66>

    default:
      break;
 800ba72:	bf00      	nop
 800ba74:	e000      	b.n	800ba78 <MSC_BOT_DataIn+0x66>
      break;
 800ba76:	bf00      	nop
  }
}
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b084      	sub	sp, #16
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
 800ba86:	460b      	mov	r3, r1
 800ba88:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba90:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d01c      	beq.n	800bad2 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	7a1b      	ldrb	r3, [r3, #8]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <MSC_BOT_DataOut+0x28>
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d004      	beq.n	800baae <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800baa4:	e018      	b.n	800bad8 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 f81a 	bl	800bae0 <MSC_BOT_CBW_Decode>
      break;
 800baac:	e014      	b.n	800bad8 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800baba:	461a      	mov	r2, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f95b 	bl	800bd78 <SCSI_ProcessCmd>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	da06      	bge.n	800bad6 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800bac8:	2101      	movs	r1, #1
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f8c4 	bl	800bc58 <MSC_BOT_SendCSW>
      break;
 800bad0:	e001      	b.n	800bad6 <MSC_BOT_DataOut+0x58>
    return;
 800bad2:	bf00      	nop
 800bad4:	e000      	b.n	800bad8 <MSC_BOT_DataOut+0x5a>
      break;
 800bad6:	bf00      	nop
  }
}
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
	...

0800bae0 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baee:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d077      	beq.n	800bbe6 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800bb0e:	2101      	movs	r1, #1
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f004 f8dd 	bl	800fcd0 <USBD_LL_GetRxDataSize>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b1f      	cmp	r3, #31
 800bb1a:	d114      	bne.n	800bb46 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800bb22:	4a34      	ldr	r2, [pc, #208]	; (800bbf4 <MSC_BOT_CBW_Decode+0x114>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d10e      	bne.n	800bb46 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d809      	bhi.n	800bb46 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d004      	beq.n	800bb46 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800bb42:	2b10      	cmp	r3, #16
 800bb44:	d90e      	bls.n	800bb64 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb4c:	2320      	movs	r3, #32
 800bb4e:	2205      	movs	r2, #5
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fdbc 	bl	800c6ce <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2202      	movs	r2, #2
 800bb5a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 f8ab 	bl	800bcb8 <MSC_BOT_Abort>
 800bb62:	e043      	b.n	800bbec <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800bb70:	461a      	mov	r2, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f900 	bl	800bd78 <SCSI_ProcessCmd>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	da0c      	bge.n	800bb98 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	7a1b      	ldrb	r3, [r3, #8]
 800bb82:	2b05      	cmp	r3, #5
 800bb84:	d104      	bne.n	800bb90 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800bb86:	2101      	movs	r1, #1
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 f865 	bl	800bc58 <MSC_BOT_SendCSW>
 800bb8e:	e02d      	b.n	800bbec <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f891 	bl	800bcb8 <MSC_BOT_Abort>
 800bb96:	e029      	b.n	800bbec <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	7a1b      	ldrb	r3, [r3, #8]
 800bb9c:	2b02      	cmp	r3, #2
 800bb9e:	d024      	beq.n	800bbea <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d020      	beq.n	800bbea <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800bbac:	2b03      	cmp	r3, #3
 800bbae:	d01c      	beq.n	800bbea <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d009      	beq.n	800bbcc <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f103 0110 	add.w	r1, r3, #16
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f817 	bl	800bbf8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800bbca:	e00f      	b.n	800bbec <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d104      	bne.n	800bbde <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f83e 	bl	800bc58 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800bbdc:	e006      	b.n	800bbec <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f86a 	bl	800bcb8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800bbe4:	e002      	b.n	800bbec <MSC_BOT_CBW_Decode+0x10c>
    return;
 800bbe6:	bf00      	nop
 800bbe8:	e000      	b.n	800bbec <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 800bbea:	bf00      	nop
    }
  }
}
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	43425355 	.word	0x43425355

0800bbf8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc0a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	4293      	cmp	r3, r2
 800bc16:	bf28      	it	cs
 800bc18:	4613      	movcs	r3, r2
 800bc1a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d015      	beq.n	800bc4e <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	1ad2      	subs	r2, r2, r3
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	2204      	movs	r2, #4
 800bc3e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	2181      	movs	r1, #129	; 0x81
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f004 f800 	bl	800fc4c <USBD_LL_Transmit>
 800bc4c:	e000      	b.n	800bc50 <MSC_BOT_SendData+0x58>
    return;
 800bc4e:	bf00      	nop
}
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	460b      	mov	r3, r1
 800bc62:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc6a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d01b      	beq.n	800bcaa <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	4a0f      	ldr	r2, [pc, #60]	; (800bcb4 <MSC_BOT_SendCSW+0x5c>)
 800bc76:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	78fa      	ldrb	r2, [r7, #3]
 800bc7e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2200      	movs	r2, #0
 800bc86:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800bc8e:	230d      	movs	r3, #13
 800bc90:	2181      	movs	r1, #129	; 0x81
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f003 ffda 	bl	800fc4c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800bc9e:	231f      	movs	r3, #31
 800bca0:	2101      	movs	r1, #1
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f003 fff3 	bl	800fc8e <USBD_LL_PrepareReceive>
 800bca8:	e000      	b.n	800bcac <MSC_BOT_SendCSW+0x54>
    return;
 800bcaa:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	53425355 	.word	0x53425355

0800bcb8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcc6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d022      	beq.n	800bd14 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10c      	bne.n	800bcf2 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d007      	beq.n	800bcf2 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d103      	bne.n	800bcf2 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800bcea:	2101      	movs	r1, #1
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f003 ff24 	bl	800fb3a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800bcf2:	2181      	movs	r1, #129	; 0x81
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f003 ff20 	bl	800fb3a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	7a5b      	ldrb	r3, [r3, #9]
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d109      	bne.n	800bd16 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800bd02:	2181      	movs	r1, #129	; 0x81
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f003 ff18 	bl	800fb3a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f003 ff14 	bl	800fb3a <USBD_LL_StallEP>
 800bd12:	e000      	b.n	800bd16 <MSC_BOT_Abort+0x5e>
    return;
 800bd14:	bf00      	nop
  }
}
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd2e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d019      	beq.n	800bd6a <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	7a5b      	ldrb	r3, [r3, #9]
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d108      	bne.n	800bd50 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800bd3e:	2181      	movs	r1, #129	; 0x81
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f003 fefa 	bl	800fb3a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800bd46:	2101      	movs	r1, #1
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f003 fef6 	bl	800fb3a <USBD_LL_StallEP>
 800bd4e:	e00f      	b.n	800bd70 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800bd50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	da0a      	bge.n	800bd6e <MSC_BOT_CplClrFeature+0x52>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	7a5b      	ldrb	r3, [r3, #9]
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d006      	beq.n	800bd6e <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800bd60:	2101      	movs	r1, #1
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7ff ff78 	bl	800bc58 <MSC_BOT_SendCSW>
 800bd68:	e002      	b.n	800bd70 <MSC_BOT_CplClrFeature+0x54>
    return;
 800bd6a:	bf00      	nop
 800bd6c:	e000      	b.n	800bd70 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 800bd6e:	bf00      	nop
  }
}
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
	...

0800bd78 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	460b      	mov	r3, r1
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd8c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d102      	bne.n	800bd9a <SCSI_ProcessCmd+0x22>
  {
    return -1;
 800bd94:	f04f 33ff 	mov.w	r3, #4294967295
 800bd98:	e168      	b.n	800c06c <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2baa      	cmp	r3, #170	; 0xaa
 800bda0:	f000 8144 	beq.w	800c02c <SCSI_ProcessCmd+0x2b4>
 800bda4:	2baa      	cmp	r3, #170	; 0xaa
 800bda6:	f300 8153 	bgt.w	800c050 <SCSI_ProcessCmd+0x2d8>
 800bdaa:	2ba8      	cmp	r3, #168	; 0xa8
 800bdac:	f000 812c 	beq.w	800c008 <SCSI_ProcessCmd+0x290>
 800bdb0:	2ba8      	cmp	r3, #168	; 0xa8
 800bdb2:	f300 814d 	bgt.w	800c050 <SCSI_ProcessCmd+0x2d8>
 800bdb6:	2b5a      	cmp	r3, #90	; 0x5a
 800bdb8:	f300 80c0 	bgt.w	800bf3c <SCSI_ProcessCmd+0x1c4>
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f2c0 8147 	blt.w	800c050 <SCSI_ProcessCmd+0x2d8>
 800bdc2:	2b5a      	cmp	r3, #90	; 0x5a
 800bdc4:	f200 8144 	bhi.w	800c050 <SCSI_ProcessCmd+0x2d8>
 800bdc8:	a201      	add	r2, pc, #4	; (adr r2, 800bdd0 <SCSI_ProcessCmd+0x58>)
 800bdca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdce:	bf00      	nop
 800bdd0:	0800bf43 	.word	0x0800bf43
 800bdd4:	0800c051 	.word	0x0800c051
 800bdd8:	0800c051 	.word	0x0800c051
 800bddc:	0800bf55 	.word	0x0800bf55
 800bde0:	0800c051 	.word	0x0800c051
 800bde4:	0800c051 	.word	0x0800c051
 800bde8:	0800c051 	.word	0x0800c051
 800bdec:	0800c051 	.word	0x0800c051
 800bdf0:	0800c051 	.word	0x0800c051
 800bdf4:	0800c051 	.word	0x0800c051
 800bdf8:	0800c051 	.word	0x0800c051
 800bdfc:	0800c051 	.word	0x0800c051
 800be00:	0800c051 	.word	0x0800c051
 800be04:	0800c051 	.word	0x0800c051
 800be08:	0800c051 	.word	0x0800c051
 800be0c:	0800c051 	.word	0x0800c051
 800be10:	0800c051 	.word	0x0800c051
 800be14:	0800c051 	.word	0x0800c051
 800be18:	0800bf67 	.word	0x0800bf67
 800be1c:	0800c051 	.word	0x0800c051
 800be20:	0800c051 	.word	0x0800c051
 800be24:	0800c051 	.word	0x0800c051
 800be28:	0800c051 	.word	0x0800c051
 800be2c:	0800c051 	.word	0x0800c051
 800be30:	0800c051 	.word	0x0800c051
 800be34:	0800c051 	.word	0x0800c051
 800be38:	0800bf9d 	.word	0x0800bf9d
 800be3c:	0800bf79 	.word	0x0800bf79
 800be40:	0800c051 	.word	0x0800c051
 800be44:	0800c051 	.word	0x0800c051
 800be48:	0800bf8b 	.word	0x0800bf8b
 800be4c:	0800c051 	.word	0x0800c051
 800be50:	0800c051 	.word	0x0800c051
 800be54:	0800c051 	.word	0x0800c051
 800be58:	0800c051 	.word	0x0800c051
 800be5c:	0800bfc1 	.word	0x0800bfc1
 800be60:	0800c051 	.word	0x0800c051
 800be64:	0800bfd3 	.word	0x0800bfd3
 800be68:	0800c051 	.word	0x0800c051
 800be6c:	0800c051 	.word	0x0800c051
 800be70:	0800bff7 	.word	0x0800bff7
 800be74:	0800c051 	.word	0x0800c051
 800be78:	0800c01b 	.word	0x0800c01b
 800be7c:	0800c051 	.word	0x0800c051
 800be80:	0800c051 	.word	0x0800c051
 800be84:	0800c051 	.word	0x0800c051
 800be88:	0800c051 	.word	0x0800c051
 800be8c:	0800c03f 	.word	0x0800c03f
 800be90:	0800c051 	.word	0x0800c051
 800be94:	0800c051 	.word	0x0800c051
 800be98:	0800c051 	.word	0x0800c051
 800be9c:	0800c051 	.word	0x0800c051
 800bea0:	0800c051 	.word	0x0800c051
 800bea4:	0800c051 	.word	0x0800c051
 800bea8:	0800c051 	.word	0x0800c051
 800beac:	0800c051 	.word	0x0800c051
 800beb0:	0800c051 	.word	0x0800c051
 800beb4:	0800c051 	.word	0x0800c051
 800beb8:	0800c051 	.word	0x0800c051
 800bebc:	0800c051 	.word	0x0800c051
 800bec0:	0800c051 	.word	0x0800c051
 800bec4:	0800c051 	.word	0x0800c051
 800bec8:	0800c051 	.word	0x0800c051
 800becc:	0800c051 	.word	0x0800c051
 800bed0:	0800c051 	.word	0x0800c051
 800bed4:	0800c051 	.word	0x0800c051
 800bed8:	0800c051 	.word	0x0800c051
 800bedc:	0800c051 	.word	0x0800c051
 800bee0:	0800c051 	.word	0x0800c051
 800bee4:	0800c051 	.word	0x0800c051
 800bee8:	0800c051 	.word	0x0800c051
 800beec:	0800c051 	.word	0x0800c051
 800bef0:	0800c051 	.word	0x0800c051
 800bef4:	0800c051 	.word	0x0800c051
 800bef8:	0800c051 	.word	0x0800c051
 800befc:	0800c051 	.word	0x0800c051
 800bf00:	0800c051 	.word	0x0800c051
 800bf04:	0800c051 	.word	0x0800c051
 800bf08:	0800c051 	.word	0x0800c051
 800bf0c:	0800c051 	.word	0x0800c051
 800bf10:	0800c051 	.word	0x0800c051
 800bf14:	0800c051 	.word	0x0800c051
 800bf18:	0800c051 	.word	0x0800c051
 800bf1c:	0800c051 	.word	0x0800c051
 800bf20:	0800c051 	.word	0x0800c051
 800bf24:	0800c051 	.word	0x0800c051
 800bf28:	0800c051 	.word	0x0800c051
 800bf2c:	0800c051 	.word	0x0800c051
 800bf30:	0800c051 	.word	0x0800c051
 800bf34:	0800c051 	.word	0x0800c051
 800bf38:	0800bfaf 	.word	0x0800bfaf
 800bf3c:	2b9e      	cmp	r3, #158	; 0x9e
 800bf3e:	d051      	beq.n	800bfe4 <SCSI_ProcessCmd+0x26c>
 800bf40:	e086      	b.n	800c050 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800bf42:	7afb      	ldrb	r3, [r7, #11]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	4619      	mov	r1, r3
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f000 f893 	bl	800c074 <SCSI_TestUnitReady>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	75fb      	strb	r3, [r7, #23]
      break;
 800bf52:	e089      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800bf54:	7afb      	ldrb	r3, [r7, #11]
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	4619      	mov	r1, r3
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f000 fb38 	bl	800c5d0 <SCSI_RequestSense>
 800bf60:	4603      	mov	r3, r0
 800bf62:	75fb      	strb	r3, [r7, #23]
      break;
 800bf64:	e080      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800bf66:	7afb      	ldrb	r3, [r7, #11]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f000 f8d1 	bl	800c114 <SCSI_Inquiry>
 800bf72:	4603      	mov	r3, r0
 800bf74:	75fb      	strb	r3, [r7, #23]
      break;
 800bf76:	e077      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800bf78:	7afb      	ldrb	r3, [r7, #11]
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f000 fbec 	bl	800c75c <SCSI_StartStopUnit>
 800bf84:	4603      	mov	r3, r0
 800bf86:	75fb      	strb	r3, [r7, #23]
      break;
 800bf88:	e06e      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800bf8a:	7afb      	ldrb	r3, [r7, #11]
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f000 fc34 	bl	800c7fe <SCSI_AllowPreventRemovable>
 800bf96:	4603      	mov	r3, r0
 800bf98:	75fb      	strb	r3, [r7, #23]
      break;
 800bf9a:	e065      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800bf9c:	7afb      	ldrb	r3, [r7, #11]
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f000 fabc 	bl	800c520 <SCSI_ModeSense6>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	75fb      	strb	r3, [r7, #23]
      break;
 800bfac:	e05c      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800bfae:	7afb      	ldrb	r3, [r7, #11]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f000 fadf 	bl	800c578 <SCSI_ModeSense10>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	75fb      	strb	r3, [r7, #23]
      break;
 800bfbe:	e053      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800bfc0:	7afb      	ldrb	r3, [r7, #11]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f000 fa37 	bl	800c43a <SCSI_ReadFormatCapacity>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	75fb      	strb	r3, [r7, #23]
      break;
 800bfd0:	e04a      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800bfd2:	7afb      	ldrb	r3, [r7, #11]
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 f90f 	bl	800c1fc <SCSI_ReadCapacity10>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	75fb      	strb	r3, [r7, #23]
      break;
 800bfe2:	e041      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800bfe4:	7afb      	ldrb	r3, [r7, #11]
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 f97b 	bl	800c2e6 <SCSI_ReadCapacity16>
 800bff0:	4603      	mov	r3, r0
 800bff2:	75fb      	strb	r3, [r7, #23]
      break;
 800bff4:	e038      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800bff6:	7afb      	ldrb	r3, [r7, #11]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	4619      	mov	r1, r3
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f000 fc27 	bl	800c850 <SCSI_Read10>
 800c002:	4603      	mov	r3, r0
 800c004:	75fb      	strb	r3, [r7, #23]
      break;
 800c006:	e02f      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800c008:	7afb      	ldrb	r3, [r7, #11]
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	4619      	mov	r1, r3
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f000 fcbe 	bl	800c990 <SCSI_Read12>
 800c014:	4603      	mov	r3, r0
 800c016:	75fb      	strb	r3, [r7, #23]
      break;
 800c018:	e026      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800c01a:	7afb      	ldrb	r3, [r7, #11]
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	4619      	mov	r1, r3
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f000 fd60 	bl	800cae6 <SCSI_Write10>
 800c026:	4603      	mov	r3, r0
 800c028:	75fb      	strb	r3, [r7, #23]
      break;
 800c02a:	e01d      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800c02c:	7afb      	ldrb	r3, [r7, #11]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	4619      	mov	r1, r3
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f000 fe1c 	bl	800cc70 <SCSI_Write12>
 800c038:	4603      	mov	r3, r0
 800c03a:	75fb      	strb	r3, [r7, #23]
      break;
 800c03c:	e014      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800c03e:	7afb      	ldrb	r3, [r7, #11]
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	4619      	mov	r1, r3
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f000 fee8 	bl	800ce1a <SCSI_Verify10>
 800c04a:	4603      	mov	r3, r0
 800c04c:	75fb      	strb	r3, [r7, #23]
      break;
 800c04e:	e00b      	b.n	800c068 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800c050:	7af9      	ldrb	r1, [r7, #11]
 800c052:	2320      	movs	r3, #32
 800c054:	2205      	movs	r2, #5
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f000 fb39 	bl	800c6ce <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	2202      	movs	r2, #2
 800c060:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800c062:	23ff      	movs	r3, #255	; 0xff
 800c064:	75fb      	strb	r3, [r7, #23]
      break;
 800c066:	bf00      	nop
  }

  return ret;
 800c068:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3718      	adds	r7, #24
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	460b      	mov	r3, r1
 800c07e:	607a      	str	r2, [r7, #4]
 800c080:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c088:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d102      	bne.n	800c096 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 800c090:	f04f 33ff 	mov.w	r3, #4294967295
 800c094:	e03a      	b.n	800c10c <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00a      	beq.n	800c0b6 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c0a6:	2320      	movs	r3, #32
 800c0a8:	2205      	movs	r2, #5
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f000 fb0f 	bl	800c6ce <SCSI_SenseCode>

    return -1;
 800c0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0b4:	e02a      	b.n	800c10c <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d10b      	bne.n	800c0d8 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c0c0:	7af9      	ldrb	r1, [r7, #11]
 800c0c2:	233a      	movs	r3, #58	; 0x3a
 800c0c4:	2202      	movs	r2, #2
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f000 fb01 	bl	800c6ce <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	2205      	movs	r2, #5
 800c0d0:	721a      	strb	r2, [r3, #8]
    return -1;
 800c0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d6:	e019      	b.n	800c10c <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	7afa      	ldrb	r2, [r7, #11]
 800c0e2:	4610      	mov	r0, r2
 800c0e4:	4798      	blx	r3
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00b      	beq.n	800c104 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c0ec:	7af9      	ldrb	r1, [r7, #11]
 800c0ee:	233a      	movs	r3, #58	; 0x3a
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f000 faeb 	bl	800c6ce <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	2205      	movs	r2, #5
 800c0fc:	721a      	strb	r2, [r3, #8]

    return -1;
 800c0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c102:	e003      	b.n	800c10c <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	2200      	movs	r2, #0
 800c108:	60da      	str	r2, [r3, #12]

  return 0;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b088      	sub	sp, #32
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	460b      	mov	r3, r1
 800c11e:	607a      	str	r2, [r7, #4]
 800c120:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c128:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d102      	bne.n	800c136 <SCSI_Inquiry+0x22>
  {
    return -1;
 800c130:	f04f 33ff 	mov.w	r3, #4294967295
 800c134:	e05a      	b.n	800c1ec <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10a      	bne.n	800c156 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c146:	2320      	movs	r3, #32
 800c148:	2205      	movs	r2, #5
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 fabf 	bl	800c6ce <SCSI_SenseCode>
    return -1;
 800c150:	f04f 33ff 	mov.w	r3, #4294967295
 800c154:	e04a      	b.n	800c1ec <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	3301      	adds	r3, #1
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	2b00      	cmp	r3, #0
 800c162:	d020      	beq.n	800c1a6 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	3302      	adds	r3, #2
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d105      	bne.n	800c17a <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800c16e:	2206      	movs	r2, #6
 800c170:	4920      	ldr	r1, [pc, #128]	; (800c1f4 <SCSI_Inquiry+0xe0>)
 800c172:	69b8      	ldr	r0, [r7, #24]
 800c174:	f000 ffb4 	bl	800d0e0 <SCSI_UpdateBotData>
 800c178:	e037      	b.n	800c1ea <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	3302      	adds	r3, #2
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	2b80      	cmp	r3, #128	; 0x80
 800c182:	d105      	bne.n	800c190 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800c184:	2208      	movs	r2, #8
 800c186:	491c      	ldr	r1, [pc, #112]	; (800c1f8 <SCSI_Inquiry+0xe4>)
 800c188:	69b8      	ldr	r0, [r7, #24]
 800c18a:	f000 ffa9 	bl	800d0e0 <SCSI_UpdateBotData>
 800c18e:	e02c      	b.n	800c1ea <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c196:	2324      	movs	r3, #36	; 0x24
 800c198:	2205      	movs	r2, #5
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f000 fa97 	bl	800c6ce <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800c1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a4:	e022      	b.n	800c1ec <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1ac:	69d9      	ldr	r1, [r3, #28]
 800c1ae:	7afa      	ldrb	r2, [r7, #11]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	00db      	lsls	r3, r3, #3
 800c1b4:	4413      	add	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	440b      	add	r3, r1
 800c1ba:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	3304      	adds	r3, #4
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	3305      	adds	r3, #5
 800c1c6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	8bfa      	ldrh	r2, [r7, #30]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d303      	bcc.n	800c1de <SCSI_Inquiry+0xca>
    {
      len = params[4];
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	3304      	adds	r3, #4
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800c1de:	8bfb      	ldrh	r3, [r7, #30]
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	6979      	ldr	r1, [r7, #20]
 800c1e4:	69b8      	ldr	r0, [r7, #24]
 800c1e6:	f000 ff7b 	bl	800d0e0 <SCSI_UpdateBotData>
  }

  return 0;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3720      	adds	r7, #32
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	200000b0 	.word	0x200000b0
 800c1f8:	200000b8 	.word	0x200000b8

0800c1fc <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b086      	sub	sp, #24
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	460b      	mov	r3, r1
 800c206:	607a      	str	r2, [r7, #4]
 800c208:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c210:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d102      	bne.n	800c21e <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 800c218:	f04f 33ff 	mov.w	r3, #4294967295
 800c21c:	e05f      	b.n	800c2de <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800c22c:	697a      	ldr	r2, [r7, #20]
 800c22e:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800c232:	7af8      	ldrb	r0, [r7, #11]
 800c234:	4798      	blx	r3
 800c236:	4603      	mov	r3, r0
 800c238:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c23a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d104      	bne.n	800c24c <SCSI_ReadCapacity10+0x50>
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d108      	bne.n	800c25e <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c24c:	7af9      	ldrb	r1, [r7, #11]
 800c24e:	233a      	movs	r3, #58	; 0x3a
 800c250:	2202      	movs	r2, #2
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f000 fa3b 	bl	800c6ce <SCSI_SenseCode>
    return -1;
 800c258:	f04f 33ff 	mov.w	r3, #4294967295
 800c25c:	e03f      	b.n	800c2de <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c264:	3b01      	subs	r3, #1
 800c266:	0e1b      	lsrs	r3, r3, #24
 800c268:	b2da      	uxtb	r2, r3
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c274:	3b01      	subs	r3, #1
 800c276:	0c1b      	lsrs	r3, r3, #16
 800c278:	b2da      	uxtb	r2, r3
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c284:	3b01      	subs	r3, #1
 800c286:	0a1b      	lsrs	r3, r3, #8
 800c288:	b2da      	uxtb	r2, r3
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c294:	b2db      	uxtb	r3, r3
 800c296:	3b01      	subs	r3, #1
 800c298:	b2da      	uxtb	r2, r3
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c2a4:	161b      	asrs	r3, r3, #24
 800c2a6:	b2da      	uxtb	r2, r3
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c2b2:	141b      	asrs	r3, r3, #16
 800c2b4:	b2da      	uxtb	r2, r3
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c2c0:	0a1b      	lsrs	r3, r3, #8
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	b2da      	uxtb	r2, r3
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c2d0:	b2da      	uxtb	r2, r3
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2208      	movs	r2, #8
 800c2da:	60da      	str	r2, [r3, #12]

  return 0;
 800c2dc:	2300      	movs	r3, #0

}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b088      	sub	sp, #32
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	60f8      	str	r0, [r7, #12]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	607a      	str	r2, [r7, #4]
 800c2f2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2fa:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d102      	bne.n	800c308 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 800c302:	f04f 33ff 	mov.w	r3, #4294967295
 800c306:	e094      	b.n	800c432 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	69ba      	ldr	r2, [r7, #24]
 800c312:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800c316:	69ba      	ldr	r2, [r7, #24]
 800c318:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800c31c:	7af8      	ldrb	r0, [r7, #11]
 800c31e:	4798      	blx	r3
 800c320:	4603      	mov	r3, r0
 800c322:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d104      	bne.n	800c336 <SCSI_ReadCapacity16+0x50>
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c332:	2b02      	cmp	r3, #2
 800c334:	d108      	bne.n	800c348 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c336:	7af9      	ldrb	r1, [r7, #11]
 800c338:	233a      	movs	r3, #58	; 0x3a
 800c33a:	2202      	movs	r2, #2
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f000 f9c6 	bl	800c6ce <SCSI_SenseCode>
    return -1;
 800c342:	f04f 33ff 	mov.w	r3, #4294967295
 800c346:	e074      	b.n	800c432 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	330a      	adds	r3, #10
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	330b      	adds	r3, #11
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c358:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	330c      	adds	r3, #12
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800c362:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	320d      	adds	r2, #13
 800c368:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800c36a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800c370:	2300      	movs	r3, #0
 800c372:	77fb      	strb	r3, [r7, #31]
 800c374:	e007      	b.n	800c386 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 800c376:	7ffb      	ldrb	r3, [r7, #31]
 800c378:	69ba      	ldr	r2, [r7, #24]
 800c37a:	4413      	add	r3, r2
 800c37c:	2200      	movs	r2, #0
 800c37e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800c380:	7ffb      	ldrb	r3, [r7, #31]
 800c382:	3301      	adds	r3, #1
 800c384:	77fb      	strb	r3, [r7, #31]
 800c386:	7ffa      	ldrb	r2, [r7, #31]
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d3f2      	bcc.n	800c376 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c396:	3b01      	subs	r3, #1
 800c398:	0e1b      	lsrs	r3, r3, #24
 800c39a:	b2da      	uxtb	r2, r3
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	0c1b      	lsrs	r3, r3, #16
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	0a1b      	lsrs	r3, r3, #8
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c3d6:	161b      	asrs	r3, r3, #24
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c3e4:	141b      	asrs	r3, r3, #16
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c3f2:	0a1b      	lsrs	r3, r3, #8
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	b2da      	uxtb	r2, r3
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c402:	b2da      	uxtb	r2, r3
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	330a      	adds	r3, #10
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	330b      	adds	r3, #11
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c418:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	330c      	adds	r3, #12
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800c422:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	320d      	adds	r2, #13
 800c428:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800c42a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	60da      	str	r2, [r3, #12]

  return 0;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3720      	adds	r7, #32
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b088      	sub	sp, #32
 800c43e:	af00      	add	r7, sp, #0
 800c440:	60f8      	str	r0, [r7, #12]
 800c442:	460b      	mov	r3, r1
 800c444:	607a      	str	r2, [r7, #4]
 800c446:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c44e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d102      	bne.n	800c45c <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 800c456:	f04f 33ff 	mov.w	r3, #4294967295
 800c45a:	e05c      	b.n	800c516 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	f107 0214 	add.w	r2, r7, #20
 800c468:	f107 0110 	add.w	r1, r7, #16
 800c46c:	7af8      	ldrb	r0, [r7, #11]
 800c46e:	4798      	blx	r3
 800c470:	4603      	mov	r3, r0
 800c472:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c474:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d104      	bne.n	800c486 <SCSI_ReadFormatCapacity+0x4c>
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c482:	2b02      	cmp	r3, #2
 800c484:	d108      	bne.n	800c498 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c486:	7af9      	ldrb	r1, [r7, #11]
 800c488:	233a      	movs	r3, #58	; 0x3a
 800c48a:	2202      	movs	r2, #2
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f000 f91e 	bl	800c6ce <SCSI_SenseCode>
    return -1;
 800c492:	f04f 33ff 	mov.w	r3, #4294967295
 800c496:	e03e      	b.n	800c516 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 800c498:	2300      	movs	r3, #0
 800c49a:	83fb      	strh	r3, [r7, #30]
 800c49c:	e007      	b.n	800c4ae <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 800c49e:	8bfb      	ldrh	r3, [r7, #30]
 800c4a0:	69ba      	ldr	r2, [r7, #24]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800c4a8:	8bfb      	ldrh	r3, [r7, #30]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	83fb      	strh	r3, [r7, #30]
 800c4ae:	8bfb      	ldrh	r3, [r7, #30]
 800c4b0:	2b0b      	cmp	r3, #11
 800c4b2:	d9f4      	bls.n	800c49e <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	2208      	movs	r2, #8
 800c4b8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	0e1b      	lsrs	r3, r3, #24
 800c4c0:	b2da      	uxtb	r2, r3
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	3b01      	subs	r3, #1
 800c4ca:	0c1b      	lsrs	r3, r3, #16
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	0a1b      	lsrs	r3, r3, #8
 800c4d8:	b2da      	uxtb	r2, r3
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	b2da      	uxtb	r2, r3
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800c4f0:	8abb      	ldrh	r3, [r7, #20]
 800c4f2:	141b      	asrs	r3, r3, #16
 800c4f4:	b2da      	uxtb	r2, r3
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800c4fa:	8abb      	ldrh	r3, [r7, #20]
 800c4fc:	0a1b      	lsrs	r3, r3, #8
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	b2da      	uxtb	r2, r3
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800c506:	8abb      	ldrh	r3, [r7, #20]
 800c508:	b2da      	uxtb	r2, r3
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	220c      	movs	r2, #12
 800c512:	60da      	str	r2, [r3, #12]

  return 0;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3720      	adds	r7, #32
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	460b      	mov	r3, r1
 800c52a:	607a      	str	r2, [r7, #4]
 800c52c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c534:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800c536:	2317      	movs	r3, #23
 800c538:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d102      	bne.n	800c546 <SCSI_ModeSense6+0x26>
  {
    return -1;
 800c540:	f04f 33ff 	mov.w	r3, #4294967295
 800c544:	e011      	b.n	800c56a <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	3304      	adds	r3, #4
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	8afa      	ldrh	r2, [r7, #22]
 800c550:	429a      	cmp	r2, r3
 800c552:	d303      	bcc.n	800c55c <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	3304      	adds	r3, #4
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800c55c:	8afb      	ldrh	r3, [r7, #22]
 800c55e:	461a      	mov	r2, r3
 800c560:	4904      	ldr	r1, [pc, #16]	; (800c574 <SCSI_ModeSense6+0x54>)
 800c562:	6938      	ldr	r0, [r7, #16]
 800c564:	f000 fdbc 	bl	800d0e0 <SCSI_UpdateBotData>

  return 0;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3718      	adds	r7, #24
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	200000c0 	.word	0x200000c0

0800c578 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	460b      	mov	r3, r1
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c58c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800c58e:	231b      	movs	r3, #27
 800c590:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d102      	bne.n	800c59e <SCSI_ModeSense10+0x26>
  {
    return -1;
 800c598:	f04f 33ff 	mov.w	r3, #4294967295
 800c59c:	e011      	b.n	800c5c2 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	3308      	adds	r3, #8
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	8afa      	ldrh	r2, [r7, #22]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d303      	bcc.n	800c5b4 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	3308      	adds	r3, #8
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800c5b4:	8afb      	ldrh	r3, [r7, #22]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	4904      	ldr	r1, [pc, #16]	; (800c5cc <SCSI_ModeSense10+0x54>)
 800c5ba:	6938      	ldr	r0, [r7, #16]
 800c5bc:	f000 fd90 	bl	800d0e0 <SCSI_UpdateBotData>

  return 0;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3718      	adds	r7, #24
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	200000d8 	.word	0x200000d8

0800c5d0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b086      	sub	sp, #24
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	460b      	mov	r3, r1
 800c5da:	607a      	str	r2, [r7, #4]
 800c5dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5e4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d102      	bne.n	800c5f2 <SCSI_RequestSense+0x22>
  {
    return -1;
 800c5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f0:	e069      	b.n	800c6c6 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10a      	bne.n	800c612 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c602:	2320      	movs	r3, #32
 800c604:	2205      	movs	r2, #5
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f000 f861 	bl	800c6ce <SCSI_SenseCode>
    return -1;
 800c60c:	f04f 33ff 	mov.w	r3, #4294967295
 800c610:	e059      	b.n	800c6c6 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c612:	2300      	movs	r3, #0
 800c614:	75fb      	strb	r3, [r7, #23]
 800c616:	e007      	b.n	800c628 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 800c618:	7dfb      	ldrb	r3, [r7, #23]
 800c61a:	693a      	ldr	r2, [r7, #16]
 800c61c:	4413      	add	r3, r2
 800c61e:	2200      	movs	r2, #0
 800c620:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c622:	7dfb      	ldrb	r3, [r7, #23]
 800c624:	3301      	adds	r3, #1
 800c626:	75fb      	strb	r3, [r7, #23]
 800c628:	7dfb      	ldrb	r3, [r7, #23]
 800c62a:	2b11      	cmp	r3, #17
 800c62c:	d9f4      	bls.n	800c618 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	2270      	movs	r2, #112	; 0x70
 800c632:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	220c      	movs	r2, #12
 800c638:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c646:	429a      	cmp	r2, r3
 800c648:	d02e      	beq.n	800c6a8 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c650:	461a      	mov	r2, r3
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	3248      	adds	r2, #72	; 0x48
 800c656:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	3348      	adds	r3, #72	; 0x48
 800c668:	00db      	lsls	r3, r3, #3
 800c66a:	4413      	add	r3, r2
 800c66c:	791a      	ldrb	r2, [r3, #4]
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c678:	693a      	ldr	r2, [r7, #16]
 800c67a:	3348      	adds	r3, #72	; 0x48
 800c67c:	00db      	lsls	r3, r3, #3
 800c67e:	4413      	add	r3, r2
 800c680:	795a      	ldrb	r2, [r3, #5]
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c68c:	3301      	adds	r3, #1
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c69c:	2b04      	cmp	r3, #4
 800c69e:	d103      	bne.n	800c6a8 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	2212      	movs	r2, #18
 800c6ac:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	2b12      	cmp	r3, #18
 800c6b6:	d805      	bhi.n	800c6c4 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	3304      	adds	r3, #4
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3718      	adds	r7, #24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b085      	sub	sp, #20
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	4608      	mov	r0, r1
 800c6d8:	4611      	mov	r1, r2
 800c6da:	461a      	mov	r2, r3
 800c6dc:	4603      	mov	r3, r0
 800c6de:	70fb      	strb	r3, [r7, #3]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	70bb      	strb	r3, [r7, #2]
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c6ee:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d02c      	beq.n	800c750 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3248      	adds	r2, #72	; 0x48
 800c702:	78b9      	ldrb	r1, [r7, #2]
 800c704:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c70e:	68fa      	ldr	r2, [r7, #12]
 800c710:	3348      	adds	r3, #72	; 0x48
 800c712:	00db      	lsls	r3, r3, #3
 800c714:	4413      	add	r3, r2
 800c716:	787a      	ldrb	r2, [r7, #1]
 800c718:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	3348      	adds	r3, #72	; 0x48
 800c724:	00db      	lsls	r3, r3, #3
 800c726:	4413      	add	r3, r2
 800c728:	2200      	movs	r2, #0
 800c72a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c732:	3301      	adds	r3, #1
 800c734:	b2da      	uxtb	r2, r3
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c742:	2b04      	cmp	r3, #4
 800c744:	d105      	bne.n	800c752 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800c74e:	e000      	b.n	800c752 <SCSI_SenseCode+0x84>
    return;
 800c750:	bf00      	nop
  }
}
 800c752:	3714      	adds	r7, #20
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	460b      	mov	r3, r1
 800c766:	607a      	str	r2, [r7, #4]
 800c768:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c770:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d102      	bne.n	800c77e <SCSI_StartStopUnit+0x22>
  {
    return -1;
 800c778:	f04f 33ff 	mov.w	r3, #4294967295
 800c77c:	e03b      	b.n	800c7f6 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c784:	2b01      	cmp	r3, #1
 800c786:	d10f      	bne.n	800c7a8 <SCSI_StartStopUnit+0x4c>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	3304      	adds	r3, #4
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	f003 0303 	and.w	r3, r3, #3
 800c792:	2b02      	cmp	r3, #2
 800c794:	d108      	bne.n	800c7a8 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800c796:	7af9      	ldrb	r1, [r7, #11]
 800c798:	2324      	movs	r3, #36	; 0x24
 800c79a:	2205      	movs	r2, #5
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f7ff ff96 	bl	800c6ce <SCSI_SenseCode>

    return -1;
 800c7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a6:	e026      	b.n	800c7f6 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	3304      	adds	r3, #4
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	f003 0303 	and.w	r3, r3, #3
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d104      	bne.n	800c7c0 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c7be:	e016      	b.n	800c7ee <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	f003 0303 	and.w	r3, r3, #3
 800c7ca:	2b02      	cmp	r3, #2
 800c7cc:	d104      	bne.n	800c7d8 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2202      	movs	r2, #2
 800c7d2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c7d6:	e00a      	b.n	800c7ee <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	3304      	adds	r3, #4
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	f003 0303 	and.w	r3, r3, #3
 800c7e2:	2b03      	cmp	r3, #3
 800c7e4:	d103      	bne.n	800c7ee <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	60da      	str	r2, [r3, #12]

  return 0;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3718      	adds	r7, #24
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c7fe:	b480      	push	{r7}
 800c800:	b087      	sub	sp, #28
 800c802:	af00      	add	r7, sp, #0
 800c804:	60f8      	str	r0, [r7, #12]
 800c806:	460b      	mov	r3, r1
 800c808:	607a      	str	r2, [r7, #4]
 800c80a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c812:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d102      	bne.n	800c820 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 800c81a:	f04f 33ff 	mov.w	r3, #4294967295
 800c81e:	e011      	b.n	800c844 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	3304      	adds	r3, #4
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d104      	bne.n	800c834 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c832:	e003      	b.n	800c83c <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	2200      	movs	r2, #0
 800c840:	60da      	str	r2, [r3, #12]

  return 0;
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	371c      	adds	r7, #28
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b086      	sub	sp, #24
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	460b      	mov	r3, r1
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c864:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d102      	bne.n	800c872 <SCSI_Read10+0x22>
  {
    return -1;
 800c86c:	f04f 33ff 	mov.w	r3, #4294967295
 800c870:	e08a      	b.n	800c988 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	7a1b      	ldrb	r3, [r3, #8]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d17c      	bne.n	800c974 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c880:	b25b      	sxtb	r3, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	db0a      	blt.n	800c89c <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c88c:	2320      	movs	r3, #32
 800c88e:	2205      	movs	r2, #5
 800c890:	68f8      	ldr	r0, [r7, #12]
 800c892:	f7ff ff1c 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800c896:	f04f 33ff 	mov.w	r3, #4294967295
 800c89a:	e075      	b.n	800c988 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	d108      	bne.n	800c8b8 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c8a6:	7af9      	ldrb	r1, [r7, #11]
 800c8a8:	233a      	movs	r3, #58	; 0x3a
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f7ff ff0e 	bl	800c6ce <SCSI_SenseCode>

      return -1;
 800c8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b6:	e067      	b.n	800c988 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	7afa      	ldrb	r2, [r7, #11]
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	4798      	blx	r3
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d008      	beq.n	800c8de <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c8cc:	7af9      	ldrb	r1, [r7, #11]
 800c8ce:	233a      	movs	r3, #58	; 0x3a
 800c8d0:	2202      	movs	r2, #2
 800c8d2:	68f8      	ldr	r0, [r7, #12]
 800c8d4:	f7ff fefb 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800c8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8dc:	e054      	b.n	800c988 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	3302      	adds	r3, #2
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	3303      	adds	r3, #3
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c8ee:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c8f8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	3205      	adds	r2, #5
 800c8fe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c900:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	3307      	adds	r3, #7
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	021b      	lsls	r3, r3, #8
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	3208      	adds	r2, #8
 800c914:	7812      	ldrb	r2, [r2, #0]
 800c916:	431a      	orrs	r2, r3
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c92a:	7af9      	ldrb	r1, [r7, #11]
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f000 faad 	bl	800ce8c <SCSI_CheckAddressRange>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	da02      	bge.n	800c93e <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c938:	f04f 33ff 	mov.w	r3, #4294967295
 800c93c:	e024      	b.n	800c988 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c94a:	6979      	ldr	r1, [r7, #20]
 800c94c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800c950:	fb01 f303 	mul.w	r3, r1, r3
 800c954:	429a      	cmp	r2, r3
 800c956:	d00a      	beq.n	800c96e <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c95e:	2320      	movs	r3, #32
 800c960:	2205      	movs	r2, #5
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f7ff feb3 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800c968:	f04f 33ff 	mov.w	r3, #4294967295
 800c96c:	e00c      	b.n	800c988 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	2202      	movs	r2, #2
 800c972:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c97a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c97c:	7afb      	ldrb	r3, [r7, #11]
 800c97e:	4619      	mov	r1, r3
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f000 faab 	bl	800cedc <SCSI_ProcessRead>
 800c986:	4603      	mov	r3, r0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3718      	adds	r7, #24
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	460b      	mov	r3, r1
 800c99a:	607a      	str	r2, [r7, #4]
 800c99c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9a4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d102      	bne.n	800c9b2 <SCSI_Read12+0x22>
  {
    return -1;
 800c9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b0:	e095      	b.n	800cade <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	7a1b      	ldrb	r3, [r3, #8]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f040 8087 	bne.w	800caca <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c9c2:	b25b      	sxtb	r3, r3
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	db0a      	blt.n	800c9de <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c9ce:	2320      	movs	r3, #32
 800c9d0:	2205      	movs	r2, #5
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f7ff fe7b 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800c9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9dc:	e07f      	b.n	800cade <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d108      	bne.n	800c9fa <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c9e8:	7af9      	ldrb	r1, [r7, #11]
 800c9ea:	233a      	movs	r3, #58	; 0x3a
 800c9ec:	2202      	movs	r2, #2
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f7ff fe6d 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800c9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f8:	e071      	b.n	800cade <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	7afa      	ldrb	r2, [r7, #11]
 800ca04:	4610      	mov	r0, r2
 800ca06:	4798      	blx	r3
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d008      	beq.n	800ca20 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ca0e:	7af9      	ldrb	r1, [r7, #11]
 800ca10:	233a      	movs	r3, #58	; 0x3a
 800ca12:	2202      	movs	r2, #2
 800ca14:	68f8      	ldr	r0, [r7, #12]
 800ca16:	f7ff fe5a 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800ca1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca1e:	e05e      	b.n	800cade <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	3302      	adds	r3, #2
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	3303      	adds	r3, #3
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ca30:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3304      	adds	r3, #4
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ca3a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	3205      	adds	r2, #5
 800ca40:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ca42:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	3306      	adds	r3, #6
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	3307      	adds	r3, #7
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ca5a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	3308      	adds	r3, #8
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ca64:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	3209      	adds	r2, #9
 800ca6a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ca6c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ca80:	7af9      	ldrb	r1, [r7, #11]
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	f000 fa02 	bl	800ce8c <SCSI_CheckAddressRange>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	da02      	bge.n	800ca94 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ca8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca92:	e024      	b.n	800cade <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800caa0:	6979      	ldr	r1, [r7, #20]
 800caa2:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800caa6:	fb01 f303 	mul.w	r3, r1, r3
 800caaa:	429a      	cmp	r2, r3
 800caac:	d00a      	beq.n	800cac4 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cab4:	2320      	movs	r3, #32
 800cab6:	2205      	movs	r2, #5
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f7ff fe08 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800cabe:	f04f 33ff 	mov.w	r3, #4294967295
 800cac2:	e00c      	b.n	800cade <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	2202      	movs	r2, #2
 800cac8:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cad0:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800cad2:	7afb      	ldrb	r3, [r7, #11]
 800cad4:	4619      	mov	r1, r3
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f000 fa00 	bl	800cedc <SCSI_ProcessRead>
 800cadc:	4603      	mov	r3, r0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b086      	sub	sp, #24
 800caea:	af00      	add	r7, sp, #0
 800caec:	60f8      	str	r0, [r7, #12]
 800caee:	460b      	mov	r3, r1
 800caf0:	607a      	str	r2, [r7, #4]
 800caf2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cafa:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d102      	bne.n	800cb08 <SCSI_Write10+0x22>
  {
    return -1;
 800cb02:	f04f 33ff 	mov.w	r3, #4294967295
 800cb06:	e0af      	b.n	800cc68 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	7a1b      	ldrb	r3, [r3, #8]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f040 80a5 	bne.w	800cc5c <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10a      	bne.n	800cb32 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cb22:	2320      	movs	r3, #32
 800cb24:	2205      	movs	r2, #5
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f7ff fdd1 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800cb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb30:	e09a      	b.n	800cc68 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800cb38:	b25b      	sxtb	r3, r3
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	da0a      	bge.n	800cb54 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cb44:	2320      	movs	r3, #32
 800cb46:	2205      	movs	r2, #5
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f7ff fdc0 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800cb4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb52:	e089      	b.n	800cc68 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	7afa      	ldrb	r2, [r7, #11]
 800cb5e:	4610      	mov	r0, r2
 800cb60:	4798      	blx	r3
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d008      	beq.n	800cb7a <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cb68:	7af9      	ldrb	r1, [r7, #11]
 800cb6a:	233a      	movs	r3, #58	; 0x3a
 800cb6c:	2202      	movs	r2, #2
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7ff fdad 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800cb74:	f04f 33ff 	mov.w	r3, #4294967295
 800cb78:	e076      	b.n	800cc68 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	7afa      	ldrb	r2, [r7, #11]
 800cb84:	4610      	mov	r0, r2
 800cb86:	4798      	blx	r3
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d008      	beq.n	800cba0 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800cb8e:	7af9      	ldrb	r1, [r7, #11]
 800cb90:	2327      	movs	r3, #39	; 0x27
 800cb92:	2202      	movs	r2, #2
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f7ff fd9a 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800cb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb9e:	e063      	b.n	800cc68 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3302      	adds	r3, #2
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3303      	adds	r3, #3
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cbb0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	3304      	adds	r3, #4
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800cbba:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	3205      	adds	r2, #5
 800cbc0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800cbc2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	3307      	adds	r3, #7
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	3208      	adds	r2, #8
 800cbd6:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800cbd8:	431a      	orrs	r2, r3
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cbec:	7af9      	ldrb	r1, [r7, #11]
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f000 f94c 	bl	800ce8c <SCSI_CheckAddressRange>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	da02      	bge.n	800cc00 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800cbfa:	f04f 33ff 	mov.w	r3, #4294967295
 800cbfe:	e033      	b.n	800cc68 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cc06:	697a      	ldr	r2, [r7, #20]
 800cc08:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cc0c:	fb02 f303 	mul.w	r3, r2, r3
 800cc10:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cc18:	693a      	ldr	r2, [r7, #16]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d00a      	beq.n	800cc34 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cc24:	2320      	movs	r3, #32
 800cc26:	2205      	movs	r2, #5
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f7ff fd50 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800cc2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc32:	e019      	b.n	800cc68 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc3a:	bf28      	it	cs
 800cc3c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800cc40:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	2201      	movs	r2, #1
 800cc46:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	f103 0210 	add.w	r2, r3, #16
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	2101      	movs	r1, #1
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f003 f81b 	bl	800fc8e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	e005      	b.n	800cc68 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 800cc5c:	7afb      	ldrb	r3, [r7, #11]
 800cc5e:	4619      	mov	r1, r3
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f000 f9b4 	bl	800cfce <SCSI_ProcessWrite>
 800cc66:	4603      	mov	r3, r0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3718      	adds	r7, #24
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc84:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d102      	bne.n	800cc92 <SCSI_Write12+0x22>
  {
    return -1;
 800cc8c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc90:	e0bf      	b.n	800ce12 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	7a1b      	ldrb	r3, [r3, #8]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f040 80b5 	bne.w	800ce06 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d10a      	bne.n	800ccbc <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ccac:	2320      	movs	r3, #32
 800ccae:	2205      	movs	r2, #5
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f7ff fd0c 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800ccb6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccba:	e0aa      	b.n	800ce12 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ccc2:	b25b      	sxtb	r3, r3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	da0a      	bge.n	800ccde <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ccce:	2320      	movs	r3, #32
 800ccd0:	2205      	movs	r2, #5
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	f7ff fcfb 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800ccd8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccdc:	e099      	b.n	800ce12 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	7afa      	ldrb	r2, [r7, #11]
 800cce8:	4610      	mov	r0, r2
 800ccea:	4798      	blx	r3
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00b      	beq.n	800cd0a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ccf2:	7af9      	ldrb	r1, [r7, #11]
 800ccf4:	233a      	movs	r3, #58	; 0x3a
 800ccf6:	2202      	movs	r2, #2
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f7ff fce8 	bl	800c6ce <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2205      	movs	r2, #5
 800cd02:	721a      	strb	r2, [r3, #8]
      return -1;
 800cd04:	f04f 33ff 	mov.w	r3, #4294967295
 800cd08:	e083      	b.n	800ce12 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	7afa      	ldrb	r2, [r7, #11]
 800cd14:	4610      	mov	r0, r2
 800cd16:	4798      	blx	r3
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00b      	beq.n	800cd36 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800cd1e:	7af9      	ldrb	r1, [r7, #11]
 800cd20:	2327      	movs	r3, #39	; 0x27
 800cd22:	2202      	movs	r2, #2
 800cd24:	68f8      	ldr	r0, [r7, #12]
 800cd26:	f7ff fcd2 	bl	800c6ce <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	2205      	movs	r2, #5
 800cd2e:	721a      	strb	r2, [r3, #8]
      return -1;
 800cd30:	f04f 33ff 	mov.w	r3, #4294967295
 800cd34:	e06d      	b.n	800ce12 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	3302      	adds	r3, #2
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	3303      	adds	r3, #3
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cd46:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800cd50:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	3205      	adds	r2, #5
 800cd56:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800cd58:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	3306      	adds	r3, #6
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	3307      	adds	r3, #7
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800cd70:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	3308      	adds	r3, #8
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800cd7a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	3209      	adds	r2, #9
 800cd80:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800cd82:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cd96:	7af9      	ldrb	r1, [r7, #11]
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f000 f877 	bl	800ce8c <SCSI_CheckAddressRange>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	da02      	bge.n	800cdaa <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800cda4:	f04f 33ff 	mov.w	r3, #4294967295
 800cda8:	e033      	b.n	800ce12 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cdb0:	697a      	ldr	r2, [r7, #20]
 800cdb2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cdb6:	fb02 f303 	mul.w	r3, r2, r3
 800cdba:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d00a      	beq.n	800cdde <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cdce:	2320      	movs	r3, #32
 800cdd0:	2205      	movs	r2, #5
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f7ff fc7b 	bl	800c6ce <SCSI_SenseCode>
      return -1;
 800cdd8:	f04f 33ff 	mov.w	r3, #4294967295
 800cddc:	e019      	b.n	800ce12 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cde4:	bf28      	it	cs
 800cde6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800cdea:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	f103 0210 	add.w	r2, r3, #16
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	2101      	movs	r1, #1
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	f002 ff46 	bl	800fc8e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	e005      	b.n	800ce12 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 800ce06:	7afb      	ldrb	r3, [r7, #11]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	68f8      	ldr	r0, [r7, #12]
 800ce0c:	f000 f8df 	bl	800cfce <SCSI_ProcessWrite>
 800ce10:	4603      	mov	r3, r0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3718      	adds	r7, #24
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b086      	sub	sp, #24
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	60f8      	str	r0, [r7, #12]
 800ce22:	460b      	mov	r3, r1
 800ce24:	607a      	str	r2, [r7, #4]
 800ce26:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce2e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d102      	bne.n	800ce3c <SCSI_Verify10+0x22>
  {
    return -1;
 800ce36:	f04f 33ff 	mov.w	r3, #4294967295
 800ce3a:	e023      	b.n	800ce84 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	f003 0302 	and.w	r3, r3, #2
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d008      	beq.n	800ce5c <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ce4a:	7af9      	ldrb	r1, [r7, #11]
 800ce4c:	2324      	movs	r3, #36	; 0x24
 800ce4e:	2205      	movs	r2, #5
 800ce50:	68f8      	ldr	r0, [r7, #12]
 800ce52:	f7ff fc3c 	bl	800c6ce <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800ce56:	f04f 33ff 	mov.w	r3, #4294967295
 800ce5a:	e013      	b.n	800ce84 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ce68:	7af9      	ldrb	r1, [r7, #11]
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f000 f80e 	bl	800ce8c <SCSI_CheckAddressRange>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	da02      	bge.n	800ce7c <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 800ce76:	f04f 33ff 	mov.w	r3, #4294967295
 800ce7a:	e003      	b.n	800ce84 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	60da      	str	r2, [r3, #12]

  return 0;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3718      	adds	r7, #24
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	607a      	str	r2, [r7, #4]
 800ce96:	603b      	str	r3, [r7, #0]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cea2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d102      	bne.n	800ceb0 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800ceaa:	f04f 33ff 	mov.w	r3, #4294967295
 800ceae:	e011      	b.n	800ced4 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	441a      	add	r2, r3
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d908      	bls.n	800ced2 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800cec0:	7af9      	ldrb	r1, [r7, #11]
 800cec2:	2321      	movs	r3, #33	; 0x21
 800cec4:	2205      	movs	r2, #5
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f7ff fc01 	bl	800c6ce <SCSI_SenseCode>
    return -1;
 800cecc:	f04f 33ff 	mov.w	r3, #4294967295
 800ced0:	e000      	b.n	800ced4 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3718      	adds	r7, #24
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800cedc:	b590      	push	{r4, r7, lr}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	460b      	mov	r3, r1
 800cee6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ceee:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cef6:	68fa      	ldr	r2, [r7, #12]
 800cef8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cefc:	fb02 f303 	mul.w	r3, r2, r3
 800cf00:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d102      	bne.n	800cf0e <SCSI_ProcessRead+0x32>
  {
    return -1;
 800cf08:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0c:	e05b      	b.n	800cfc6 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf14:	bf28      	it	cs
 800cf16:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800cf1a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf22:	691c      	ldr	r4, [r3, #16]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f103 0110 	add.w	r1, r3, #16
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cf36:	4618      	mov	r0, r3
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	78f8      	ldrb	r0, [r7, #3]
 800cf42:	47a0      	blx	r4
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	da08      	bge.n	800cf5c <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800cf4a:	78f9      	ldrb	r1, [r7, #3]
 800cf4c:	2311      	movs	r3, #17
 800cf4e:	2204      	movs	r2, #4
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7ff fbbc 	bl	800c6ce <SCSI_SenseCode>
    return -1;
 800cf56:	f04f 33ff 	mov.w	r3, #4294967295
 800cf5a:	e034      	b.n	800cfc6 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f103 0210 	add.w	r2, r3, #16
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2181      	movs	r1, #129	; 0x81
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f002 fe70 	bl	800fc4c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cf78:	4619      	mov	r1, r3
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf80:	441a      	add	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cf94:	4619      	mov	r1, r3
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf9c:	1ad2      	subs	r2, r2, r3
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	1ad2      	subs	r2, r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d102      	bne.n	800cfc4 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2203      	movs	r2, #3
 800cfc2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3714      	adds	r7, #20
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd90      	pop	{r4, r7, pc}

0800cfce <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800cfce:	b590      	push	{r4, r7, lr}
 800cfd0:	b085      	sub	sp, #20
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfe0:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cfee:	fb02 f303 	mul.w	r3, r2, r3
 800cff2:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d102      	bne.n	800d000 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 800cffa:	f04f 33ff 	mov.w	r3, #4294967295
 800cffe:	e06b      	b.n	800d0d8 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d006:	bf28      	it	cs
 800d008:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d00c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d014:	695c      	ldr	r4, [r3, #20]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f103 0110 	add.w	r1, r3, #16
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d028:	4618      	mov	r0, r3
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800d030:	b29b      	uxth	r3, r3
 800d032:	78f8      	ldrb	r0, [r7, #3]
 800d034:	47a0      	blx	r4
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	da08      	bge.n	800d04e <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800d03c:	78f9      	ldrb	r1, [r7, #3]
 800d03e:	2303      	movs	r3, #3
 800d040:	2204      	movs	r2, #4
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f7ff fb43 	bl	800c6ce <SCSI_SenseCode>
    return -1;
 800d048:	f04f 33ff 	mov.w	r3, #4294967295
 800d04c:	e044      	b.n	800d0d8 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d05a:	4619      	mov	r1, r3
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d062:	441a      	add	r2, r3
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d076:	4619      	mov	r1, r3
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d07e:	1ad2      	subs	r2, r2, r3
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	1ad2      	subs	r2, r2, r3
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d104      	bne.n	800d0aa <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7fe fdd8 	bl	800bc58 <MSC_BOT_SendCSW>
 800d0a8:	e015      	b.n	800d0d6 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800d0b6:	fb02 f303 	mul.w	r3, r2, r3
 800d0ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0be:	bf28      	it	cs
 800d0c0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d0c4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f103 0210 	add.w	r2, r3, #16
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	2101      	movs	r1, #1
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f002 fddc 	bl	800fc8e <USBD_LL_PrepareReceive>
  }

  return 0;
 800d0d6:	2300      	movs	r3, #0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3714      	adds	r7, #20
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd90      	pop	{r4, r7, pc}

0800d0e0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b087      	sub	sp, #28
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800d0ee:	88fb      	ldrh	r3, [r7, #6]
 800d0f0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d102      	bne.n	800d0fe <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800d0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0fc:	e013      	b.n	800d126 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800d0fe:	8afa      	ldrh	r2, [r7, #22]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800d104:	e00b      	b.n	800d11e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800d106:	8afb      	ldrh	r3, [r7, #22]
 800d108:	3b01      	subs	r3, #1
 800d10a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800d10c:	8afb      	ldrh	r3, [r7, #22]
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	441a      	add	r2, r3
 800d112:	8afb      	ldrh	r3, [r7, #22]
 800d114:	7811      	ldrb	r1, [r2, #0]
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	4413      	add	r3, r2
 800d11a:	460a      	mov	r2, r1
 800d11c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800d11e:	8afb      	ldrh	r3, [r7, #22]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1f0      	bne.n	800d106 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	371c      	adds	r7, #28
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr

0800d132 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b086      	sub	sp, #24
 800d136:	af00      	add	r7, sp, #0
 800d138:	60f8      	str	r0, [r7, #12]
 800d13a:	60b9      	str	r1, [r7, #8]
 800d13c:	4613      	mov	r3, r2
 800d13e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d101      	bne.n	800d14a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d146:	2303      	movs	r3, #3
 800d148:	e01f      	b.n	800d18a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d003      	beq.n	800d170 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	79fa      	ldrb	r2, [r7, #7]
 800d17c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f002 fc10 	bl	800f9a4 <USBD_LL_Init>
 800d184:	4603      	mov	r3, r0
 800d186:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d188:	7dfb      	ldrb	r3, [r7, #23]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3718      	adds	r7, #24
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b084      	sub	sp, #16
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
 800d19a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d19c:	2300      	movs	r3, #0
 800d19e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d1a6:	2303      	movs	r3, #3
 800d1a8:	e016      	b.n	800d1d8 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	683a      	ldr	r2, [r7, #0]
 800d1ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00b      	beq.n	800d1d6 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c6:	f107 020e 	add.w	r2, r7, #14
 800d1ca:	4610      	mov	r0, r2
 800d1cc:	4798      	blx	r3
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d1d6:	2300      	movs	r3, #0
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3710      	adds	r7, #16
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f002 fc27 	bl	800fa3c <USBD_LL_Start>
 800d1ee:	4603      	mov	r3, r0
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	370c      	adds	r7, #12
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b084      	sub	sp, #16
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	460b      	mov	r3, r1
 800d218:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d21a:	2303      	movs	r3, #3
 800d21c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d224:	2b00      	cmp	r3, #0
 800d226:	d009      	beq.n	800d23c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	78fa      	ldrb	r2, [r7, #3]
 800d232:	4611      	mov	r1, r2
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	4798      	blx	r3
 800d238:	4603      	mov	r3, r0
 800d23a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b082      	sub	sp, #8
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
 800d24e:	460b      	mov	r3, r1
 800d250:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d007      	beq.n	800d26c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	78fa      	ldrb	r2, [r7, #3]
 800d266:	4611      	mov	r1, r2
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	4798      	blx	r3
  }

  return USBD_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b084      	sub	sp, #16
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	4618      	mov	r0, r3
 800d28a:	f000 ffb9 	bl	800e200 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2201      	movs	r2, #1
 800d292:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d29c:	461a      	mov	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d2aa:	f003 031f 	and.w	r3, r3, #31
 800d2ae:	2b02      	cmp	r3, #2
 800d2b0:	d01a      	beq.n	800d2e8 <USBD_LL_SetupStage+0x72>
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d822      	bhi.n	800d2fc <USBD_LL_SetupStage+0x86>
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <USBD_LL_SetupStage+0x4a>
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d00a      	beq.n	800d2d4 <USBD_LL_SetupStage+0x5e>
 800d2be:	e01d      	b.n	800d2fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 fa61 	bl	800d790 <USBD_StdDevReq>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800d2d2:	e020      	b.n	800d316 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 fac5 	bl	800d86c <USBD_StdItfReq>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	73fb      	strb	r3, [r7, #15]
      break;
 800d2e6:	e016      	b.n	800d316 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 fb04 	bl	800d8fe <USBD_StdEPReq>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	73fb      	strb	r3, [r7, #15]
      break;
 800d2fa:	e00c      	b.n	800d316 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d302:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d306:	b2db      	uxtb	r3, r3
 800d308:	4619      	mov	r1, r3
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f002 fc15 	bl	800fb3a <USBD_LL_StallEP>
 800d310:	4603      	mov	r3, r0
 800d312:	73fb      	strb	r3, [r7, #15]
      break;
 800d314:	bf00      	nop
  }

  return ret;
 800d316:	7bfb      	ldrb	r3, [r7, #15]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	460b      	mov	r3, r1
 800d32a:	607a      	str	r2, [r7, #4]
 800d32c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d32e:	7afb      	ldrb	r3, [r7, #11]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d138      	bne.n	800d3a6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d33a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d342:	2b03      	cmp	r3, #3
 800d344:	d14a      	bne.n	800d3dc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	689a      	ldr	r2, [r3, #8]
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d913      	bls.n	800d37a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	689a      	ldr	r2, [r3, #8]
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	1ad2      	subs	r2, r2, r3
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	68da      	ldr	r2, [r3, #12]
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	4293      	cmp	r3, r2
 800d36a:	bf28      	it	cs
 800d36c:	4613      	movcs	r3, r2
 800d36e:	461a      	mov	r2, r3
 800d370:	6879      	ldr	r1, [r7, #4]
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	f001 f81b 	bl	800e3ae <USBD_CtlContinueRx>
 800d378:	e030      	b.n	800d3dc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d380:	b2db      	uxtb	r3, r3
 800d382:	2b03      	cmp	r3, #3
 800d384:	d10b      	bne.n	800d39e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d005      	beq.n	800d39e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d398:	691b      	ldr	r3, [r3, #16]
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d39e:	68f8      	ldr	r0, [r7, #12]
 800d3a0:	f001 f816 	bl	800e3d0 <USBD_CtlSendStatus>
 800d3a4:	e01a      	b.n	800d3dc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	2b03      	cmp	r3, #3
 800d3b0:	d114      	bne.n	800d3dc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3b8:	699b      	ldr	r3, [r3, #24]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00e      	beq.n	800d3dc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3c4:	699b      	ldr	r3, [r3, #24]
 800d3c6:	7afa      	ldrb	r2, [r7, #11]
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	4798      	blx	r3
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d3d2:	7dfb      	ldrb	r3, [r7, #23]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d001      	beq.n	800d3dc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d3d8:	7dfb      	ldrb	r3, [r7, #23]
 800d3da:	e000      	b.n	800d3de <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3718      	adds	r7, #24
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b086      	sub	sp, #24
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	60f8      	str	r0, [r7, #12]
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	607a      	str	r2, [r7, #4]
 800d3f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d3f4:	7afb      	ldrb	r3, [r7, #11]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d16b      	bne.n	800d4d2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3314      	adds	r3, #20
 800d3fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d406:	2b02      	cmp	r3, #2
 800d408:	d156      	bne.n	800d4b8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	689a      	ldr	r2, [r3, #8]
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	429a      	cmp	r2, r3
 800d414:	d914      	bls.n	800d440 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	689a      	ldr	r2, [r3, #8]
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	1ad2      	subs	r2, r2, r3
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	689b      	ldr	r3, [r3, #8]
 800d428:	461a      	mov	r2, r3
 800d42a:	6879      	ldr	r1, [r7, #4]
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f000 ffad 	bl	800e38c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d432:	2300      	movs	r3, #0
 800d434:	2200      	movs	r2, #0
 800d436:	2100      	movs	r1, #0
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	f002 fc28 	bl	800fc8e <USBD_LL_PrepareReceive>
 800d43e:	e03b      	b.n	800d4b8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	68da      	ldr	r2, [r3, #12]
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d11c      	bne.n	800d486 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	685a      	ldr	r2, [r3, #4]
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d454:	429a      	cmp	r2, r3
 800d456:	d316      	bcc.n	800d486 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	685a      	ldr	r2, [r3, #4]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d462:	429a      	cmp	r2, r3
 800d464:	d20f      	bcs.n	800d486 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d466:	2200      	movs	r2, #0
 800d468:	2100      	movs	r1, #0
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f000 ff8e 	bl	800e38c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2200      	movs	r2, #0
 800d474:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d478:	2300      	movs	r3, #0
 800d47a:	2200      	movs	r2, #0
 800d47c:	2100      	movs	r1, #0
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f002 fc05 	bl	800fc8e <USBD_LL_PrepareReceive>
 800d484:	e018      	b.n	800d4b8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	2b03      	cmp	r3, #3
 800d490:	d10b      	bne.n	800d4aa <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d005      	beq.n	800d4aa <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4a4:	68db      	ldr	r3, [r3, #12]
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4aa:	2180      	movs	r1, #128	; 0x80
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f002 fb44 	bl	800fb3a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f000 ff9f 	bl	800e3f6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d122      	bne.n	800d508 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7ff fe98 	bl	800d1f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d4d0:	e01a      	b.n	800d508 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	2b03      	cmp	r3, #3
 800d4dc:	d114      	bne.n	800d508 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00e      	beq.n	800d508 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4f0:	695b      	ldr	r3, [r3, #20]
 800d4f2:	7afa      	ldrb	r2, [r7, #11]
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	4798      	blx	r3
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d4fe:	7dfb      	ldrb	r3, [r7, #23]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d001      	beq.n	800d508 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d504:	7dfb      	ldrb	r3, [r7, #23]
 800d506:	e000      	b.n	800d50a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3718      	adds	r7, #24
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b082      	sub	sp, #8
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2201      	movs	r2, #1
 800d51e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d101      	bne.n	800d546 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d542:	2303      	movs	r3, #3
 800d544:	e02f      	b.n	800d5a6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00f      	beq.n	800d570 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d009      	beq.n	800d570 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	6852      	ldr	r2, [r2, #4]
 800d568:	b2d2      	uxtb	r2, r2
 800d56a:	4611      	mov	r1, r2
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d570:	2340      	movs	r3, #64	; 0x40
 800d572:	2200      	movs	r2, #0
 800d574:	2100      	movs	r1, #0
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f002 fa7b 	bl	800fa72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2240      	movs	r2, #64	; 0x40
 800d588:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d58c:	2340      	movs	r3, #64	; 0x40
 800d58e:	2200      	movs	r2, #0
 800d590:	2180      	movs	r1, #128	; 0x80
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f002 fa6d 	bl	800fa72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2240      	movs	r2, #64	; 0x40
 800d5a2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b083      	sub	sp, #12
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	78fa      	ldrb	r2, [r7, #3]
 800d5be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d5c0:	2300      	movs	r3, #0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	370c      	adds	r7, #12
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr

0800d5ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d5ce:	b480      	push	{r7}
 800d5d0:	b083      	sub	sp, #12
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5dc:	b2da      	uxtb	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2204      	movs	r2, #4
 800d5e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d5ec:	2300      	movs	r3, #0
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d5fa:	b480      	push	{r7}
 800d5fc:	b083      	sub	sp, #12
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	2b04      	cmp	r3, #4
 800d60c:	d106      	bne.n	800d61c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d614:	b2da      	uxtb	r2, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	370c      	adds	r7, #12
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr

0800d62a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b082      	sub	sp, #8
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d101      	bne.n	800d640 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d63c:	2303      	movs	r3, #3
 800d63e:	e012      	b.n	800d666 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d646:	b2db      	uxtb	r3, r3
 800d648:	2b03      	cmp	r3, #3
 800d64a:	d10b      	bne.n	800d664 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d652:	69db      	ldr	r3, [r3, #28]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d005      	beq.n	800d664 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d65e:	69db      	ldr	r3, [r3, #28]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d664:	2300      	movs	r3, #0
}
 800d666:	4618      	mov	r0, r3
 800d668:	3708      	adds	r7, #8
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b082      	sub	sp, #8
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
 800d676:	460b      	mov	r3, r1
 800d678:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d684:	2303      	movs	r3, #3
 800d686:	e014      	b.n	800d6b2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	2b03      	cmp	r3, #3
 800d692:	d10d      	bne.n	800d6b0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d69a:	6a1b      	ldr	r3, [r3, #32]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d007      	beq.n	800d6b0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6a6:	6a1b      	ldr	r3, [r3, #32]
 800d6a8:	78fa      	ldrb	r2, [r7, #3]
 800d6aa:	4611      	mov	r1, r2
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d6b0:	2300      	movs	r3, #0
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b082      	sub	sp, #8
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d101      	bne.n	800d6d4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d6d0:	2303      	movs	r3, #3
 800d6d2:	e014      	b.n	800d6fe <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	2b03      	cmp	r3, #3
 800d6de:	d10d      	bne.n	800d6fc <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d007      	beq.n	800d6fc <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f4:	78fa      	ldrb	r2, [r7, #3]
 800d6f6:	4611      	mov	r1, r2
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d6fc:	2300      	movs	r3, #0
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d706:	b480      	push	{r7}
 800d708:	b083      	sub	sp, #12
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d70e:	2300      	movs	r3, #0
}
 800d710:	4618      	mov	r0, r3
 800d712:	370c      	adds	r7, #12
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2201      	movs	r2, #1
 800d728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d732:	2b00      	cmp	r3, #0
 800d734:	d009      	beq.n	800d74a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	6852      	ldr	r2, [r2, #4]
 800d742:	b2d2      	uxtb	r2, r2
 800d744:	4611      	mov	r1, r2
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	4798      	blx	r3
  }

  return USBD_OK;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3708      	adds	r7, #8
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d754:	b480      	push	{r7}
 800d756:	b087      	sub	sp, #28
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	3301      	adds	r3, #1
 800d76a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d772:	8a3b      	ldrh	r3, [r7, #16]
 800d774:	021b      	lsls	r3, r3, #8
 800d776:	b21a      	sxth	r2, r3
 800d778:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d77c:	4313      	orrs	r3, r2
 800d77e:	b21b      	sxth	r3, r3
 800d780:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d782:	89fb      	ldrh	r3, [r7, #14]
}
 800d784:	4618      	mov	r0, r3
 800d786:	371c      	adds	r7, #28
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d79a:	2300      	movs	r3, #0
 800d79c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d7a6:	2b40      	cmp	r3, #64	; 0x40
 800d7a8:	d005      	beq.n	800d7b6 <USBD_StdDevReq+0x26>
 800d7aa:	2b40      	cmp	r3, #64	; 0x40
 800d7ac:	d853      	bhi.n	800d856 <USBD_StdDevReq+0xc6>
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00b      	beq.n	800d7ca <USBD_StdDevReq+0x3a>
 800d7b2:	2b20      	cmp	r3, #32
 800d7b4:	d14f      	bne.n	800d856 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	4798      	blx	r3
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	73fb      	strb	r3, [r7, #15]
      break;
 800d7c8:	e04a      	b.n	800d860 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	785b      	ldrb	r3, [r3, #1]
 800d7ce:	2b09      	cmp	r3, #9
 800d7d0:	d83b      	bhi.n	800d84a <USBD_StdDevReq+0xba>
 800d7d2:	a201      	add	r2, pc, #4	; (adr r2, 800d7d8 <USBD_StdDevReq+0x48>)
 800d7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d8:	0800d82d 	.word	0x0800d82d
 800d7dc:	0800d841 	.word	0x0800d841
 800d7e0:	0800d84b 	.word	0x0800d84b
 800d7e4:	0800d837 	.word	0x0800d837
 800d7e8:	0800d84b 	.word	0x0800d84b
 800d7ec:	0800d80b 	.word	0x0800d80b
 800d7f0:	0800d801 	.word	0x0800d801
 800d7f4:	0800d84b 	.word	0x0800d84b
 800d7f8:	0800d823 	.word	0x0800d823
 800d7fc:	0800d815 	.word	0x0800d815
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d800:	6839      	ldr	r1, [r7, #0]
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f9de 	bl	800dbc4 <USBD_GetDescriptor>
          break;
 800d808:	e024      	b.n	800d854 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d80a:	6839      	ldr	r1, [r7, #0]
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 fb6d 	bl	800deec <USBD_SetAddress>
          break;
 800d812:	e01f      	b.n	800d854 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d814:	6839      	ldr	r1, [r7, #0]
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 fbac 	bl	800df74 <USBD_SetConfig>
 800d81c:	4603      	mov	r3, r0
 800d81e:	73fb      	strb	r3, [r7, #15]
          break;
 800d820:	e018      	b.n	800d854 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d822:	6839      	ldr	r1, [r7, #0]
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fc4b 	bl	800e0c0 <USBD_GetConfig>
          break;
 800d82a:	e013      	b.n	800d854 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d82c:	6839      	ldr	r1, [r7, #0]
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 fc7c 	bl	800e12c <USBD_GetStatus>
          break;
 800d834:	e00e      	b.n	800d854 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d836:	6839      	ldr	r1, [r7, #0]
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 fcab 	bl	800e194 <USBD_SetFeature>
          break;
 800d83e:	e009      	b.n	800d854 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d840:	6839      	ldr	r1, [r7, #0]
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 fcba 	bl	800e1bc <USBD_ClrFeature>
          break;
 800d848:	e004      	b.n	800d854 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 fd11 	bl	800e274 <USBD_CtlError>
          break;
 800d852:	bf00      	nop
      }
      break;
 800d854:	e004      	b.n	800d860 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d856:	6839      	ldr	r1, [r7, #0]
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 fd0b 	bl	800e274 <USBD_CtlError>
      break;
 800d85e:	bf00      	nop
  }

  return ret;
 800d860:	7bfb      	ldrb	r3, [r7, #15]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3710      	adds	r7, #16
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop

0800d86c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d876:	2300      	movs	r3, #0
 800d878:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d882:	2b40      	cmp	r3, #64	; 0x40
 800d884:	d005      	beq.n	800d892 <USBD_StdItfReq+0x26>
 800d886:	2b40      	cmp	r3, #64	; 0x40
 800d888:	d82f      	bhi.n	800d8ea <USBD_StdItfReq+0x7e>
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d001      	beq.n	800d892 <USBD_StdItfReq+0x26>
 800d88e:	2b20      	cmp	r3, #32
 800d890:	d12b      	bne.n	800d8ea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	3b01      	subs	r3, #1
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d81d      	bhi.n	800d8dc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	889b      	ldrh	r3, [r3, #4]
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d813      	bhi.n	800d8d2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	6839      	ldr	r1, [r7, #0]
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	4798      	blx	r3
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	88db      	ldrh	r3, [r3, #6]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d110      	bne.n	800d8e6 <USBD_StdItfReq+0x7a>
 800d8c4:	7bfb      	ldrb	r3, [r7, #15]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d10d      	bne.n	800d8e6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 fd80 	bl	800e3d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d8d0:	e009      	b.n	800d8e6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d8d2:	6839      	ldr	r1, [r7, #0]
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 fccd 	bl	800e274 <USBD_CtlError>
          break;
 800d8da:	e004      	b.n	800d8e6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d8dc:	6839      	ldr	r1, [r7, #0]
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 fcc8 	bl	800e274 <USBD_CtlError>
          break;
 800d8e4:	e000      	b.n	800d8e8 <USBD_StdItfReq+0x7c>
          break;
 800d8e6:	bf00      	nop
      }
      break;
 800d8e8:	e004      	b.n	800d8f4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d8ea:	6839      	ldr	r1, [r7, #0]
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 fcc1 	bl	800e274 <USBD_CtlError>
      break;
 800d8f2:	bf00      	nop
  }

  return ret;
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b084      	sub	sp, #16
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
 800d906:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d908:	2300      	movs	r3, #0
 800d90a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	889b      	ldrh	r3, [r3, #4]
 800d910:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d91a:	2b40      	cmp	r3, #64	; 0x40
 800d91c:	d007      	beq.n	800d92e <USBD_StdEPReq+0x30>
 800d91e:	2b40      	cmp	r3, #64	; 0x40
 800d920:	f200 8145 	bhi.w	800dbae <USBD_StdEPReq+0x2b0>
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00c      	beq.n	800d942 <USBD_StdEPReq+0x44>
 800d928:	2b20      	cmp	r3, #32
 800d92a:	f040 8140 	bne.w	800dbae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	6839      	ldr	r1, [r7, #0]
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	4798      	blx	r3
 800d93c:	4603      	mov	r3, r0
 800d93e:	73fb      	strb	r3, [r7, #15]
      break;
 800d940:	e13a      	b.n	800dbb8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	785b      	ldrb	r3, [r3, #1]
 800d946:	2b03      	cmp	r3, #3
 800d948:	d007      	beq.n	800d95a <USBD_StdEPReq+0x5c>
 800d94a:	2b03      	cmp	r3, #3
 800d94c:	f300 8129 	bgt.w	800dba2 <USBD_StdEPReq+0x2a4>
 800d950:	2b00      	cmp	r3, #0
 800d952:	d07f      	beq.n	800da54 <USBD_StdEPReq+0x156>
 800d954:	2b01      	cmp	r3, #1
 800d956:	d03c      	beq.n	800d9d2 <USBD_StdEPReq+0xd4>
 800d958:	e123      	b.n	800dba2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d960:	b2db      	uxtb	r3, r3
 800d962:	2b02      	cmp	r3, #2
 800d964:	d002      	beq.n	800d96c <USBD_StdEPReq+0x6e>
 800d966:	2b03      	cmp	r3, #3
 800d968:	d016      	beq.n	800d998 <USBD_StdEPReq+0x9a>
 800d96a:	e02c      	b.n	800d9c6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d96c:	7bbb      	ldrb	r3, [r7, #14]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00d      	beq.n	800d98e <USBD_StdEPReq+0x90>
 800d972:	7bbb      	ldrb	r3, [r7, #14]
 800d974:	2b80      	cmp	r3, #128	; 0x80
 800d976:	d00a      	beq.n	800d98e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d978:	7bbb      	ldrb	r3, [r7, #14]
 800d97a:	4619      	mov	r1, r3
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f002 f8dc 	bl	800fb3a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d982:	2180      	movs	r1, #128	; 0x80
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f002 f8d8 	bl	800fb3a <USBD_LL_StallEP>
 800d98a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d98c:	e020      	b.n	800d9d0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d98e:	6839      	ldr	r1, [r7, #0]
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 fc6f 	bl	800e274 <USBD_CtlError>
              break;
 800d996:	e01b      	b.n	800d9d0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	885b      	ldrh	r3, [r3, #2]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d10e      	bne.n	800d9be <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d9a0:	7bbb      	ldrb	r3, [r7, #14]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00b      	beq.n	800d9be <USBD_StdEPReq+0xc0>
 800d9a6:	7bbb      	ldrb	r3, [r7, #14]
 800d9a8:	2b80      	cmp	r3, #128	; 0x80
 800d9aa:	d008      	beq.n	800d9be <USBD_StdEPReq+0xc0>
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	88db      	ldrh	r3, [r3, #6]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d104      	bne.n	800d9be <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9b4:	7bbb      	ldrb	r3, [r7, #14]
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f002 f8be 	bl	800fb3a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 fd06 	bl	800e3d0 <USBD_CtlSendStatus>

              break;
 800d9c4:	e004      	b.n	800d9d0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d9c6:	6839      	ldr	r1, [r7, #0]
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 fc53 	bl	800e274 <USBD_CtlError>
              break;
 800d9ce:	bf00      	nop
          }
          break;
 800d9d0:	e0ec      	b.n	800dbac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d002      	beq.n	800d9e4 <USBD_StdEPReq+0xe6>
 800d9de:	2b03      	cmp	r3, #3
 800d9e0:	d016      	beq.n	800da10 <USBD_StdEPReq+0x112>
 800d9e2:	e030      	b.n	800da46 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9e4:	7bbb      	ldrb	r3, [r7, #14]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00d      	beq.n	800da06 <USBD_StdEPReq+0x108>
 800d9ea:	7bbb      	ldrb	r3, [r7, #14]
 800d9ec:	2b80      	cmp	r3, #128	; 0x80
 800d9ee:	d00a      	beq.n	800da06 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9f0:	7bbb      	ldrb	r3, [r7, #14]
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f002 f8a0 	bl	800fb3a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9fa:	2180      	movs	r1, #128	; 0x80
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f002 f89c 	bl	800fb3a <USBD_LL_StallEP>
 800da02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da04:	e025      	b.n	800da52 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800da06:	6839      	ldr	r1, [r7, #0]
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 fc33 	bl	800e274 <USBD_CtlError>
              break;
 800da0e:	e020      	b.n	800da52 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	885b      	ldrh	r3, [r3, #2]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d11b      	bne.n	800da50 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800da18:	7bbb      	ldrb	r3, [r7, #14]
 800da1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d004      	beq.n	800da2c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800da22:	7bbb      	ldrb	r3, [r7, #14]
 800da24:	4619      	mov	r1, r3
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f002 f8a6 	bl	800fb78 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 fccf 	bl	800e3d0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	6839      	ldr	r1, [r7, #0]
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	4798      	blx	r3
 800da40:	4603      	mov	r3, r0
 800da42:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800da44:	e004      	b.n	800da50 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800da46:	6839      	ldr	r1, [r7, #0]
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 fc13 	bl	800e274 <USBD_CtlError>
              break;
 800da4e:	e000      	b.n	800da52 <USBD_StdEPReq+0x154>
              break;
 800da50:	bf00      	nop
          }
          break;
 800da52:	e0ab      	b.n	800dbac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d002      	beq.n	800da66 <USBD_StdEPReq+0x168>
 800da60:	2b03      	cmp	r3, #3
 800da62:	d032      	beq.n	800daca <USBD_StdEPReq+0x1cc>
 800da64:	e097      	b.n	800db96 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da66:	7bbb      	ldrb	r3, [r7, #14]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d007      	beq.n	800da7c <USBD_StdEPReq+0x17e>
 800da6c:	7bbb      	ldrb	r3, [r7, #14]
 800da6e:	2b80      	cmp	r3, #128	; 0x80
 800da70:	d004      	beq.n	800da7c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800da72:	6839      	ldr	r1, [r7, #0]
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 fbfd 	bl	800e274 <USBD_CtlError>
                break;
 800da7a:	e091      	b.n	800dba0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da80:	2b00      	cmp	r3, #0
 800da82:	da0b      	bge.n	800da9c <USBD_StdEPReq+0x19e>
 800da84:	7bbb      	ldrb	r3, [r7, #14]
 800da86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da8a:	4613      	mov	r3, r2
 800da8c:	009b      	lsls	r3, r3, #2
 800da8e:	4413      	add	r3, r2
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	3310      	adds	r3, #16
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	4413      	add	r3, r2
 800da98:	3304      	adds	r3, #4
 800da9a:	e00b      	b.n	800dab4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800da9c:	7bbb      	ldrb	r3, [r7, #14]
 800da9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800daa2:	4613      	mov	r3, r2
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	4413      	add	r3, r2
 800daa8:	009b      	lsls	r3, r3, #2
 800daaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	4413      	add	r3, r2
 800dab2:	3304      	adds	r3, #4
 800dab4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	2200      	movs	r2, #0
 800daba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	2202      	movs	r2, #2
 800dac0:	4619      	mov	r1, r3
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 fc47 	bl	800e356 <USBD_CtlSendData>
              break;
 800dac8:	e06a      	b.n	800dba0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800daca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	da11      	bge.n	800daf6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dad2:	7bbb      	ldrb	r3, [r7, #14]
 800dad4:	f003 020f 	and.w	r2, r3, #15
 800dad8:	6879      	ldr	r1, [r7, #4]
 800dada:	4613      	mov	r3, r2
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	4413      	add	r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	440b      	add	r3, r1
 800dae4:	3324      	adds	r3, #36	; 0x24
 800dae6:	881b      	ldrh	r3, [r3, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d117      	bne.n	800db1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800daec:	6839      	ldr	r1, [r7, #0]
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 fbc0 	bl	800e274 <USBD_CtlError>
                  break;
 800daf4:	e054      	b.n	800dba0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800daf6:	7bbb      	ldrb	r3, [r7, #14]
 800daf8:	f003 020f 	and.w	r2, r3, #15
 800dafc:	6879      	ldr	r1, [r7, #4]
 800dafe:	4613      	mov	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4413      	add	r3, r2
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	440b      	add	r3, r1
 800db08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800db0c:	881b      	ldrh	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d104      	bne.n	800db1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 fbad 	bl	800e274 <USBD_CtlError>
                  break;
 800db1a:	e041      	b.n	800dba0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db20:	2b00      	cmp	r3, #0
 800db22:	da0b      	bge.n	800db3c <USBD_StdEPReq+0x23e>
 800db24:	7bbb      	ldrb	r3, [r7, #14]
 800db26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db2a:	4613      	mov	r3, r2
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	4413      	add	r3, r2
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	3310      	adds	r3, #16
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	4413      	add	r3, r2
 800db38:	3304      	adds	r3, #4
 800db3a:	e00b      	b.n	800db54 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db3c:	7bbb      	ldrb	r3, [r7, #14]
 800db3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db42:	4613      	mov	r3, r2
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	4413      	add	r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db4e:	687a      	ldr	r2, [r7, #4]
 800db50:	4413      	add	r3, r2
 800db52:	3304      	adds	r3, #4
 800db54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800db56:	7bbb      	ldrb	r3, [r7, #14]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d002      	beq.n	800db62 <USBD_StdEPReq+0x264>
 800db5c:	7bbb      	ldrb	r3, [r7, #14]
 800db5e:	2b80      	cmp	r3, #128	; 0x80
 800db60:	d103      	bne.n	800db6a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	2200      	movs	r2, #0
 800db66:	601a      	str	r2, [r3, #0]
 800db68:	e00e      	b.n	800db88 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800db6a:	7bbb      	ldrb	r3, [r7, #14]
 800db6c:	4619      	mov	r1, r3
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f002 f821 	bl	800fbb6 <USBD_LL_IsStallEP>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d003      	beq.n	800db82 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	2201      	movs	r2, #1
 800db7e:	601a      	str	r2, [r3, #0]
 800db80:	e002      	b.n	800db88 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	2200      	movs	r2, #0
 800db86:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	2202      	movs	r2, #2
 800db8c:	4619      	mov	r1, r3
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 fbe1 	bl	800e356 <USBD_CtlSendData>
              break;
 800db94:	e004      	b.n	800dba0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800db96:	6839      	ldr	r1, [r7, #0]
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 fb6b 	bl	800e274 <USBD_CtlError>
              break;
 800db9e:	bf00      	nop
          }
          break;
 800dba0:	e004      	b.n	800dbac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800dba2:	6839      	ldr	r1, [r7, #0]
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 fb65 	bl	800e274 <USBD_CtlError>
          break;
 800dbaa:	bf00      	nop
      }
      break;
 800dbac:	e004      	b.n	800dbb8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800dbae:	6839      	ldr	r1, [r7, #0]
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 fb5f 	bl	800e274 <USBD_CtlError>
      break;
 800dbb6:	bf00      	nop
  }

  return ret;
 800dbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
	...

0800dbc4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	885b      	ldrh	r3, [r3, #2]
 800dbde:	0a1b      	lsrs	r3, r3, #8
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	2b0e      	cmp	r3, #14
 800dbe6:	f200 8152 	bhi.w	800de8e <USBD_GetDescriptor+0x2ca>
 800dbea:	a201      	add	r2, pc, #4	; (adr r2, 800dbf0 <USBD_GetDescriptor+0x2c>)
 800dbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf0:	0800dc61 	.word	0x0800dc61
 800dbf4:	0800dc79 	.word	0x0800dc79
 800dbf8:	0800dcb9 	.word	0x0800dcb9
 800dbfc:	0800de8f 	.word	0x0800de8f
 800dc00:	0800de8f 	.word	0x0800de8f
 800dc04:	0800de2f 	.word	0x0800de2f
 800dc08:	0800de5b 	.word	0x0800de5b
 800dc0c:	0800de8f 	.word	0x0800de8f
 800dc10:	0800de8f 	.word	0x0800de8f
 800dc14:	0800de8f 	.word	0x0800de8f
 800dc18:	0800de8f 	.word	0x0800de8f
 800dc1c:	0800de8f 	.word	0x0800de8f
 800dc20:	0800de8f 	.word	0x0800de8f
 800dc24:	0800de8f 	.word	0x0800de8f
 800dc28:	0800dc2d 	.word	0x0800dc2d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc32:	69db      	ldr	r3, [r3, #28]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d00b      	beq.n	800dc50 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc3e:	69db      	ldr	r3, [r3, #28]
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	7c12      	ldrb	r2, [r2, #16]
 800dc44:	f107 0108 	add.w	r1, r7, #8
 800dc48:	4610      	mov	r0, r2
 800dc4a:	4798      	blx	r3
 800dc4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc4e:	e126      	b.n	800de9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dc50:	6839      	ldr	r1, [r7, #0]
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 fb0e 	bl	800e274 <USBD_CtlError>
        err++;
 800dc58:	7afb      	ldrb	r3, [r7, #11]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	72fb      	strb	r3, [r7, #11]
      break;
 800dc5e:	e11e      	b.n	800de9e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	7c12      	ldrb	r2, [r2, #16]
 800dc6c:	f107 0108 	add.w	r1, r7, #8
 800dc70:	4610      	mov	r0, r2
 800dc72:	4798      	blx	r3
 800dc74:	60f8      	str	r0, [r7, #12]
      break;
 800dc76:	e112      	b.n	800de9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	7c1b      	ldrb	r3, [r3, #16]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d10d      	bne.n	800dc9c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc88:	f107 0208 	add.w	r2, r7, #8
 800dc8c:	4610      	mov	r0, r2
 800dc8e:	4798      	blx	r3
 800dc90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	3301      	adds	r3, #1
 800dc96:	2202      	movs	r2, #2
 800dc98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dc9a:	e100      	b.n	800de9e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca4:	f107 0208 	add.w	r2, r7, #8
 800dca8:	4610      	mov	r0, r2
 800dcaa:	4798      	blx	r3
 800dcac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	2202      	movs	r2, #2
 800dcb4:	701a      	strb	r2, [r3, #0]
      break;
 800dcb6:	e0f2      	b.n	800de9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	885b      	ldrh	r3, [r3, #2]
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	2b05      	cmp	r3, #5
 800dcc0:	f200 80ac 	bhi.w	800de1c <USBD_GetDescriptor+0x258>
 800dcc4:	a201      	add	r2, pc, #4	; (adr r2, 800dccc <USBD_GetDescriptor+0x108>)
 800dcc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcca:	bf00      	nop
 800dccc:	0800dce5 	.word	0x0800dce5
 800dcd0:	0800dd19 	.word	0x0800dd19
 800dcd4:	0800dd4d 	.word	0x0800dd4d
 800dcd8:	0800dd81 	.word	0x0800dd81
 800dcdc:	0800ddb5 	.word	0x0800ddb5
 800dce0:	0800dde9 	.word	0x0800dde9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00b      	beq.n	800dd08 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	7c12      	ldrb	r2, [r2, #16]
 800dcfc:	f107 0108 	add.w	r1, r7, #8
 800dd00:	4610      	mov	r0, r2
 800dd02:	4798      	blx	r3
 800dd04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd06:	e091      	b.n	800de2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dd08:	6839      	ldr	r1, [r7, #0]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fab2 	bl	800e274 <USBD_CtlError>
            err++;
 800dd10:	7afb      	ldrb	r3, [r7, #11]
 800dd12:	3301      	adds	r3, #1
 800dd14:	72fb      	strb	r3, [r7, #11]
          break;
 800dd16:	e089      	b.n	800de2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d00b      	beq.n	800dd3c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	7c12      	ldrb	r2, [r2, #16]
 800dd30:	f107 0108 	add.w	r1, r7, #8
 800dd34:	4610      	mov	r0, r2
 800dd36:	4798      	blx	r3
 800dd38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd3a:	e077      	b.n	800de2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dd3c:	6839      	ldr	r1, [r7, #0]
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 fa98 	bl	800e274 <USBD_CtlError>
            err++;
 800dd44:	7afb      	ldrb	r3, [r7, #11]
 800dd46:	3301      	adds	r3, #1
 800dd48:	72fb      	strb	r3, [r7, #11]
          break;
 800dd4a:	e06f      	b.n	800de2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d00b      	beq.n	800dd70 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	7c12      	ldrb	r2, [r2, #16]
 800dd64:	f107 0108 	add.w	r1, r7, #8
 800dd68:	4610      	mov	r0, r2
 800dd6a:	4798      	blx	r3
 800dd6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd6e:	e05d      	b.n	800de2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dd70:	6839      	ldr	r1, [r7, #0]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 fa7e 	bl	800e274 <USBD_CtlError>
            err++;
 800dd78:	7afb      	ldrb	r3, [r7, #11]
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	72fb      	strb	r3, [r7, #11]
          break;
 800dd7e:	e055      	b.n	800de2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd86:	691b      	ldr	r3, [r3, #16]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00b      	beq.n	800dda4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd92:	691b      	ldr	r3, [r3, #16]
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	7c12      	ldrb	r2, [r2, #16]
 800dd98:	f107 0108 	add.w	r1, r7, #8
 800dd9c:	4610      	mov	r0, r2
 800dd9e:	4798      	blx	r3
 800dda0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dda2:	e043      	b.n	800de2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dda4:	6839      	ldr	r1, [r7, #0]
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 fa64 	bl	800e274 <USBD_CtlError>
            err++;
 800ddac:	7afb      	ldrb	r3, [r7, #11]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	72fb      	strb	r3, [r7, #11]
          break;
 800ddb2:	e03b      	b.n	800de2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddba:	695b      	ldr	r3, [r3, #20]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d00b      	beq.n	800ddd8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddc6:	695b      	ldr	r3, [r3, #20]
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	7c12      	ldrb	r2, [r2, #16]
 800ddcc:	f107 0108 	add.w	r1, r7, #8
 800ddd0:	4610      	mov	r0, r2
 800ddd2:	4798      	blx	r3
 800ddd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddd6:	e029      	b.n	800de2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ddd8:	6839      	ldr	r1, [r7, #0]
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 fa4a 	bl	800e274 <USBD_CtlError>
            err++;
 800dde0:	7afb      	ldrb	r3, [r7, #11]
 800dde2:	3301      	adds	r3, #1
 800dde4:	72fb      	strb	r3, [r7, #11]
          break;
 800dde6:	e021      	b.n	800de2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddee:	699b      	ldr	r3, [r3, #24]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d00b      	beq.n	800de0c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddfa:	699b      	ldr	r3, [r3, #24]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	7c12      	ldrb	r2, [r2, #16]
 800de00:	f107 0108 	add.w	r1, r7, #8
 800de04:	4610      	mov	r0, r2
 800de06:	4798      	blx	r3
 800de08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de0a:	e00f      	b.n	800de2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de0c:	6839      	ldr	r1, [r7, #0]
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fa30 	bl	800e274 <USBD_CtlError>
            err++;
 800de14:	7afb      	ldrb	r3, [r7, #11]
 800de16:	3301      	adds	r3, #1
 800de18:	72fb      	strb	r3, [r7, #11]
          break;
 800de1a:	e007      	b.n	800de2c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800de1c:	6839      	ldr	r1, [r7, #0]
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 fa28 	bl	800e274 <USBD_CtlError>
          err++;
 800de24:	7afb      	ldrb	r3, [r7, #11]
 800de26:	3301      	adds	r3, #1
 800de28:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800de2a:	bf00      	nop
      }
      break;
 800de2c:	e037      	b.n	800de9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	7c1b      	ldrb	r3, [r3, #16]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d109      	bne.n	800de4a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de3e:	f107 0208 	add.w	r2, r7, #8
 800de42:	4610      	mov	r0, r2
 800de44:	4798      	blx	r3
 800de46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de48:	e029      	b.n	800de9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800de4a:	6839      	ldr	r1, [r7, #0]
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 fa11 	bl	800e274 <USBD_CtlError>
        err++;
 800de52:	7afb      	ldrb	r3, [r7, #11]
 800de54:	3301      	adds	r3, #1
 800de56:	72fb      	strb	r3, [r7, #11]
      break;
 800de58:	e021      	b.n	800de9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	7c1b      	ldrb	r3, [r3, #16]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d10d      	bne.n	800de7e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de6a:	f107 0208 	add.w	r2, r7, #8
 800de6e:	4610      	mov	r0, r2
 800de70:	4798      	blx	r3
 800de72:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	3301      	adds	r3, #1
 800de78:	2207      	movs	r2, #7
 800de7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de7c:	e00f      	b.n	800de9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f9f7 	bl	800e274 <USBD_CtlError>
        err++;
 800de86:	7afb      	ldrb	r3, [r7, #11]
 800de88:	3301      	adds	r3, #1
 800de8a:	72fb      	strb	r3, [r7, #11]
      break;
 800de8c:	e007      	b.n	800de9e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f9ef 	bl	800e274 <USBD_CtlError>
      err++;
 800de96:	7afb      	ldrb	r3, [r7, #11]
 800de98:	3301      	adds	r3, #1
 800de9a:	72fb      	strb	r3, [r7, #11]
      break;
 800de9c:	bf00      	nop
  }

  if (err != 0U)
 800de9e:	7afb      	ldrb	r3, [r7, #11]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d11e      	bne.n	800dee2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	88db      	ldrh	r3, [r3, #6]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d016      	beq.n	800deda <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800deac:	893b      	ldrh	r3, [r7, #8]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d00e      	beq.n	800ded0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	88da      	ldrh	r2, [r3, #6]
 800deb6:	893b      	ldrh	r3, [r7, #8]
 800deb8:	4293      	cmp	r3, r2
 800deba:	bf28      	it	cs
 800debc:	4613      	movcs	r3, r2
 800debe:	b29b      	uxth	r3, r3
 800dec0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dec2:	893b      	ldrh	r3, [r7, #8]
 800dec4:	461a      	mov	r2, r3
 800dec6:	68f9      	ldr	r1, [r7, #12]
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 fa44 	bl	800e356 <USBD_CtlSendData>
 800dece:	e009      	b.n	800dee4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ded0:	6839      	ldr	r1, [r7, #0]
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f9ce 	bl	800e274 <USBD_CtlError>
 800ded8:	e004      	b.n	800dee4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 fa78 	bl	800e3d0 <USBD_CtlSendStatus>
 800dee0:	e000      	b.n	800dee4 <USBD_GetDescriptor+0x320>
    return;
 800dee2:	bf00      	nop
  }
}
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop

0800deec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	889b      	ldrh	r3, [r3, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d131      	bne.n	800df62 <USBD_SetAddress+0x76>
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	88db      	ldrh	r3, [r3, #6]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d12d      	bne.n	800df62 <USBD_SetAddress+0x76>
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	885b      	ldrh	r3, [r3, #2]
 800df0a:	2b7f      	cmp	r3, #127	; 0x7f
 800df0c:	d829      	bhi.n	800df62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	885b      	ldrh	r3, [r3, #2]
 800df12:	b2db      	uxtb	r3, r3
 800df14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df20:	b2db      	uxtb	r3, r3
 800df22:	2b03      	cmp	r3, #3
 800df24:	d104      	bne.n	800df30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800df26:	6839      	ldr	r1, [r7, #0]
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f000 f9a3 	bl	800e274 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df2e:	e01d      	b.n	800df6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	7bfa      	ldrb	r2, [r7, #15]
 800df34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800df38:	7bfb      	ldrb	r3, [r7, #15]
 800df3a:	4619      	mov	r1, r3
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f001 fe66 	bl	800fc0e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fa44 	bl	800e3d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800df48:	7bfb      	ldrb	r3, [r7, #15]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d004      	beq.n	800df58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2202      	movs	r2, #2
 800df52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df56:	e009      	b.n	800df6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2201      	movs	r2, #1
 800df5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df60:	e004      	b.n	800df6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800df62:	6839      	ldr	r1, [r7, #0]
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f000 f985 	bl	800e274 <USBD_CtlError>
  }
}
 800df6a:	bf00      	nop
 800df6c:	bf00      	nop
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df7e:	2300      	movs	r3, #0
 800df80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	885b      	ldrh	r3, [r3, #2]
 800df86:	b2da      	uxtb	r2, r3
 800df88:	4b4c      	ldr	r3, [pc, #304]	; (800e0bc <USBD_SetConfig+0x148>)
 800df8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800df8c:	4b4b      	ldr	r3, [pc, #300]	; (800e0bc <USBD_SetConfig+0x148>)
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2b01      	cmp	r3, #1
 800df92:	d905      	bls.n	800dfa0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800df94:	6839      	ldr	r1, [r7, #0]
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 f96c 	bl	800e274 <USBD_CtlError>
    return USBD_FAIL;
 800df9c:	2303      	movs	r3, #3
 800df9e:	e088      	b.n	800e0b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	2b02      	cmp	r3, #2
 800dfaa:	d002      	beq.n	800dfb2 <USBD_SetConfig+0x3e>
 800dfac:	2b03      	cmp	r3, #3
 800dfae:	d025      	beq.n	800dffc <USBD_SetConfig+0x88>
 800dfb0:	e071      	b.n	800e096 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dfb2:	4b42      	ldr	r3, [pc, #264]	; (800e0bc <USBD_SetConfig+0x148>)
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d01c      	beq.n	800dff4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dfba:	4b40      	ldr	r3, [pc, #256]	; (800e0bc <USBD_SetConfig+0x148>)
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dfc4:	4b3d      	ldr	r3, [pc, #244]	; (800e0bc <USBD_SetConfig+0x148>)
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	4619      	mov	r1, r3
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f7ff f91f 	bl	800d20e <USBD_SetClassConfig>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dfd4:	7bfb      	ldrb	r3, [r7, #15]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d004      	beq.n	800dfe4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dfda:	6839      	ldr	r1, [r7, #0]
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 f949 	bl	800e274 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dfe2:	e065      	b.n	800e0b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f000 f9f3 	bl	800e3d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2203      	movs	r2, #3
 800dfee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dff2:	e05d      	b.n	800e0b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 f9eb 	bl	800e3d0 <USBD_CtlSendStatus>
      break;
 800dffa:	e059      	b.n	800e0b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dffc:	4b2f      	ldr	r3, [pc, #188]	; (800e0bc <USBD_SetConfig+0x148>)
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d112      	bne.n	800e02a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2202      	movs	r2, #2
 800e008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e00c:	4b2b      	ldr	r3, [pc, #172]	; (800e0bc <USBD_SetConfig+0x148>)
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	461a      	mov	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e016:	4b29      	ldr	r3, [pc, #164]	; (800e0bc <USBD_SetConfig+0x148>)
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	4619      	mov	r1, r3
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f7ff f912 	bl	800d246 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 f9d4 	bl	800e3d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e028:	e042      	b.n	800e0b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e02a:	4b24      	ldr	r3, [pc, #144]	; (800e0bc <USBD_SetConfig+0x148>)
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	461a      	mov	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	429a      	cmp	r2, r3
 800e036:	d02a      	beq.n	800e08e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	4619      	mov	r1, r3
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7ff f900 	bl	800d246 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e046:	4b1d      	ldr	r3, [pc, #116]	; (800e0bc <USBD_SetConfig+0x148>)
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	461a      	mov	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e050:	4b1a      	ldr	r3, [pc, #104]	; (800e0bc <USBD_SetConfig+0x148>)
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	4619      	mov	r1, r3
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff f8d9 	bl	800d20e <USBD_SetClassConfig>
 800e05c:	4603      	mov	r3, r0
 800e05e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e060:	7bfb      	ldrb	r3, [r7, #15]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d00f      	beq.n	800e086 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e066:	6839      	ldr	r1, [r7, #0]
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f903 	bl	800e274 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	b2db      	uxtb	r3, r3
 800e074:	4619      	mov	r1, r3
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7ff f8e5 	bl	800d246 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2202      	movs	r2, #2
 800e080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e084:	e014      	b.n	800e0b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 f9a2 	bl	800e3d0 <USBD_CtlSendStatus>
      break;
 800e08c:	e010      	b.n	800e0b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 f99e 	bl	800e3d0 <USBD_CtlSendStatus>
      break;
 800e094:	e00c      	b.n	800e0b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 f8eb 	bl	800e274 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e09e:	4b07      	ldr	r3, [pc, #28]	; (800e0bc <USBD_SetConfig+0x148>)
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7ff f8ce 	bl	800d246 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e0aa:	2303      	movs	r3, #3
 800e0ac:	73fb      	strb	r3, [r7, #15]
      break;
 800e0ae:	bf00      	nop
  }

  return ret;
 800e0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3710      	adds	r7, #16
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	20000198 	.word	0x20000198

0800e0c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	88db      	ldrh	r3, [r3, #6]
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d004      	beq.n	800e0dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e0d2:	6839      	ldr	r1, [r7, #0]
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 f8cd 	bl	800e274 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e0da:	e023      	b.n	800e124 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	2b02      	cmp	r3, #2
 800e0e6:	dc02      	bgt.n	800e0ee <USBD_GetConfig+0x2e>
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	dc03      	bgt.n	800e0f4 <USBD_GetConfig+0x34>
 800e0ec:	e015      	b.n	800e11a <USBD_GetConfig+0x5a>
 800e0ee:	2b03      	cmp	r3, #3
 800e0f0:	d00b      	beq.n	800e10a <USBD_GetConfig+0x4a>
 800e0f2:	e012      	b.n	800e11a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	3308      	adds	r3, #8
 800e0fe:	2201      	movs	r2, #1
 800e100:	4619      	mov	r1, r3
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 f927 	bl	800e356 <USBD_CtlSendData>
        break;
 800e108:	e00c      	b.n	800e124 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	3304      	adds	r3, #4
 800e10e:	2201      	movs	r2, #1
 800e110:	4619      	mov	r1, r3
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 f91f 	bl	800e356 <USBD_CtlSendData>
        break;
 800e118:	e004      	b.n	800e124 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e11a:	6839      	ldr	r1, [r7, #0]
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 f8a9 	bl	800e274 <USBD_CtlError>
        break;
 800e122:	bf00      	nop
}
 800e124:	bf00      	nop
 800e126:	3708      	adds	r7, #8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	3b01      	subs	r3, #1
 800e140:	2b02      	cmp	r3, #2
 800e142:	d81e      	bhi.n	800e182 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	88db      	ldrh	r3, [r3, #6]
 800e148:	2b02      	cmp	r3, #2
 800e14a:	d004      	beq.n	800e156 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e14c:	6839      	ldr	r1, [r7, #0]
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 f890 	bl	800e274 <USBD_CtlError>
        break;
 800e154:	e01a      	b.n	800e18c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e162:	2b00      	cmp	r3, #0
 800e164:	d005      	beq.n	800e172 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	f043 0202 	orr.w	r2, r3, #2
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	330c      	adds	r3, #12
 800e176:	2202      	movs	r2, #2
 800e178:	4619      	mov	r1, r3
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 f8eb 	bl	800e356 <USBD_CtlSendData>
      break;
 800e180:	e004      	b.n	800e18c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e182:	6839      	ldr	r1, [r7, #0]
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 f875 	bl	800e274 <USBD_CtlError>
      break;
 800e18a:	bf00      	nop
  }
}
 800e18c:	bf00      	nop
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	885b      	ldrh	r3, [r3, #2]
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d106      	bne.n	800e1b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f90e 	bl	800e3d0 <USBD_CtlSendStatus>
  }
}
 800e1b4:	bf00      	nop
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	2b02      	cmp	r3, #2
 800e1d2:	d80b      	bhi.n	800e1ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	885b      	ldrh	r3, [r3, #2]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d10c      	bne.n	800e1f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 f8f3 	bl	800e3d0 <USBD_CtlSendStatus>
      }
      break;
 800e1ea:	e004      	b.n	800e1f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e1ec:	6839      	ldr	r1, [r7, #0]
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 f840 	bl	800e274 <USBD_CtlError>
      break;
 800e1f4:	e000      	b.n	800e1f8 <USBD_ClrFeature+0x3c>
      break;
 800e1f6:	bf00      	nop
  }
}
 800e1f8:	bf00      	nop
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	781a      	ldrb	r2, [r3, #0]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	3301      	adds	r3, #1
 800e21a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	781a      	ldrb	r2, [r3, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	3301      	adds	r3, #1
 800e228:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f7ff fa92 	bl	800d754 <SWAPBYTE>
 800e230:	4603      	mov	r3, r0
 800e232:	461a      	mov	r2, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	3301      	adds	r3, #1
 800e23c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	3301      	adds	r3, #1
 800e242:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f7ff fa85 	bl	800d754 <SWAPBYTE>
 800e24a:	4603      	mov	r3, r0
 800e24c:	461a      	mov	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	3301      	adds	r3, #1
 800e256:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	3301      	adds	r3, #1
 800e25c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f7ff fa78 	bl	800d754 <SWAPBYTE>
 800e264:	4603      	mov	r3, r0
 800e266:	461a      	mov	r2, r3
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	80da      	strh	r2, [r3, #6]
}
 800e26c:	bf00      	nop
 800e26e:	3710      	adds	r7, #16
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e27e:	2180      	movs	r1, #128	; 0x80
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f001 fc5a 	bl	800fb3a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e286:	2100      	movs	r1, #0
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f001 fc56 	bl	800fb3a <USBD_LL_StallEP>
}
 800e28e:	bf00      	nop
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}

0800e296 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e296:	b580      	push	{r7, lr}
 800e298:	b086      	sub	sp, #24
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	60f8      	str	r0, [r7, #12]
 800e29e:	60b9      	str	r1, [r7, #8]
 800e2a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d036      	beq.n	800e31a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e2b0:	6938      	ldr	r0, [r7, #16]
 800e2b2:	f000 f836 	bl	800e322 <USBD_GetLen>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	005b      	lsls	r3, r3, #1
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e2c4:	7dfb      	ldrb	r3, [r7, #23]
 800e2c6:	68ba      	ldr	r2, [r7, #8]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	7812      	ldrb	r2, [r2, #0]
 800e2ce:	701a      	strb	r2, [r3, #0]
  idx++;
 800e2d0:	7dfb      	ldrb	r3, [r7, #23]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e2d6:	7dfb      	ldrb	r3, [r7, #23]
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	4413      	add	r3, r2
 800e2dc:	2203      	movs	r2, #3
 800e2de:	701a      	strb	r2, [r3, #0]
  idx++;
 800e2e0:	7dfb      	ldrb	r3, [r7, #23]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e2e6:	e013      	b.n	800e310 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e2e8:	7dfb      	ldrb	r3, [r7, #23]
 800e2ea:	68ba      	ldr	r2, [r7, #8]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	693a      	ldr	r2, [r7, #16]
 800e2f0:	7812      	ldrb	r2, [r2, #0]
 800e2f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	613b      	str	r3, [r7, #16]
    idx++;
 800e2fa:	7dfb      	ldrb	r3, [r7, #23]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e300:	7dfb      	ldrb	r3, [r7, #23]
 800e302:	68ba      	ldr	r2, [r7, #8]
 800e304:	4413      	add	r3, r2
 800e306:	2200      	movs	r2, #0
 800e308:	701a      	strb	r2, [r3, #0]
    idx++;
 800e30a:	7dfb      	ldrb	r3, [r7, #23]
 800e30c:	3301      	adds	r3, #1
 800e30e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d1e7      	bne.n	800e2e8 <USBD_GetString+0x52>
 800e318:	e000      	b.n	800e31c <USBD_GetString+0x86>
    return;
 800e31a:	bf00      	nop
  }
}
 800e31c:	3718      	adds	r7, #24
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}

0800e322 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e322:	b480      	push	{r7}
 800e324:	b085      	sub	sp, #20
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e32a:	2300      	movs	r3, #0
 800e32c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e332:	e005      	b.n	800e340 <USBD_GetLen+0x1e>
  {
    len++;
 800e334:	7bfb      	ldrb	r3, [r7, #15]
 800e336:	3301      	adds	r3, #1
 800e338:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	3301      	adds	r3, #1
 800e33e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1f5      	bne.n	800e334 <USBD_GetLen+0x12>
  }

  return len;
 800e348:	7bfb      	ldrb	r3, [r7, #15]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3714      	adds	r7, #20
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr

0800e356 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b084      	sub	sp, #16
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	60f8      	str	r0, [r7, #12]
 800e35e:	60b9      	str	r1, [r7, #8]
 800e360:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2202      	movs	r2, #2
 800e366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	687a      	ldr	r2, [r7, #4]
 800e36e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	68ba      	ldr	r2, [r7, #8]
 800e37a:	2100      	movs	r1, #0
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f001 fc65 	bl	800fc4c <USBD_LL_Transmit>

  return USBD_OK;
 800e382:	2300      	movs	r3, #0
}
 800e384:	4618      	mov	r0, r3
 800e386:	3710      	adds	r7, #16
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	68ba      	ldr	r2, [r7, #8]
 800e39c:	2100      	movs	r1, #0
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f001 fc54 	bl	800fc4c <USBD_LL_Transmit>

  return USBD_OK;
 800e3a4:	2300      	movs	r3, #0
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b084      	sub	sp, #16
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	60f8      	str	r0, [r7, #12]
 800e3b6:	60b9      	str	r1, [r7, #8]
 800e3b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	2100      	movs	r1, #0
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f001 fc64 	bl	800fc8e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3710      	adds	r7, #16
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2204      	movs	r2, #4
 800e3dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	2100      	movs	r1, #0
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f001 fc30 	bl	800fc4c <USBD_LL_Transmit>

  return USBD_OK;
 800e3ec:	2300      	movs	r3, #0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}

0800e3f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b082      	sub	sp, #8
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2205      	movs	r2, #5
 800e402:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e406:	2300      	movs	r3, #0
 800e408:	2200      	movs	r2, #0
 800e40a:	2100      	movs	r1, #0
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f001 fc3e 	bl	800fc8e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e412:	2300      	movs	r3, #0
}
 800e414:	4618      	mov	r0, r3
 800e416:	3708      	adds	r7, #8
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	4603      	mov	r3, r0
 800e424:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e426:	79fb      	ldrb	r3, [r7, #7]
 800e428:	4a08      	ldr	r2, [pc, #32]	; (800e44c <disk_status+0x30>)
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	4413      	add	r3, r2
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	79fa      	ldrb	r2, [r7, #7]
 800e434:	4905      	ldr	r1, [pc, #20]	; (800e44c <disk_status+0x30>)
 800e436:	440a      	add	r2, r1
 800e438:	7a12      	ldrb	r2, [r2, #8]
 800e43a:	4610      	mov	r0, r2
 800e43c:	4798      	blx	r3
 800e43e:	4603      	mov	r3, r0
 800e440:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e442:	7bfb      	ldrb	r3, [r7, #15]
}
 800e444:	4618      	mov	r0, r3
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	2000019c 	.word	0x2000019c

0800e450 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e450:	b590      	push	{r4, r7, lr}
 800e452:	b087      	sub	sp, #28
 800e454:	af00      	add	r7, sp, #0
 800e456:	60b9      	str	r1, [r7, #8]
 800e458:	607a      	str	r2, [r7, #4]
 800e45a:	603b      	str	r3, [r7, #0]
 800e45c:	4603      	mov	r3, r0
 800e45e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e460:	7bfb      	ldrb	r3, [r7, #15]
 800e462:	4a0a      	ldr	r2, [pc, #40]	; (800e48c <disk_read+0x3c>)
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	4413      	add	r3, r2
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	689c      	ldr	r4, [r3, #8]
 800e46c:	7bfb      	ldrb	r3, [r7, #15]
 800e46e:	4a07      	ldr	r2, [pc, #28]	; (800e48c <disk_read+0x3c>)
 800e470:	4413      	add	r3, r2
 800e472:	7a18      	ldrb	r0, [r3, #8]
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	68b9      	ldr	r1, [r7, #8]
 800e47a:	47a0      	blx	r4
 800e47c:	4603      	mov	r3, r0
 800e47e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e480:	7dfb      	ldrb	r3, [r7, #23]
}
 800e482:	4618      	mov	r0, r3
 800e484:	371c      	adds	r7, #28
 800e486:	46bd      	mov	sp, r7
 800e488:	bd90      	pop	{r4, r7, pc}
 800e48a:	bf00      	nop
 800e48c:	2000019c 	.word	0x2000019c

0800e490 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e490:	b590      	push	{r4, r7, lr}
 800e492:	b087      	sub	sp, #28
 800e494:	af00      	add	r7, sp, #0
 800e496:	60b9      	str	r1, [r7, #8]
 800e498:	607a      	str	r2, [r7, #4]
 800e49a:	603b      	str	r3, [r7, #0]
 800e49c:	4603      	mov	r3, r0
 800e49e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e4a0:	7bfb      	ldrb	r3, [r7, #15]
 800e4a2:	4a0a      	ldr	r2, [pc, #40]	; (800e4cc <disk_write+0x3c>)
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	4413      	add	r3, r2
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	68dc      	ldr	r4, [r3, #12]
 800e4ac:	7bfb      	ldrb	r3, [r7, #15]
 800e4ae:	4a07      	ldr	r2, [pc, #28]	; (800e4cc <disk_write+0x3c>)
 800e4b0:	4413      	add	r3, r2
 800e4b2:	7a18      	ldrb	r0, [r3, #8]
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	68b9      	ldr	r1, [r7, #8]
 800e4ba:	47a0      	blx	r4
 800e4bc:	4603      	mov	r3, r0
 800e4be:	75fb      	strb	r3, [r7, #23]
  return res;
 800e4c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	371c      	adds	r7, #28
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd90      	pop	{r4, r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	2000019c 	.word	0x2000019c

0800e4d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	603a      	str	r2, [r7, #0]
 800e4da:	71fb      	strb	r3, [r7, #7]
 800e4dc:	460b      	mov	r3, r1
 800e4de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e4e0:	79fb      	ldrb	r3, [r7, #7]
 800e4e2:	4a09      	ldr	r2, [pc, #36]	; (800e508 <disk_ioctl+0x38>)
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	4413      	add	r3, r2
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	691b      	ldr	r3, [r3, #16]
 800e4ec:	79fa      	ldrb	r2, [r7, #7]
 800e4ee:	4906      	ldr	r1, [pc, #24]	; (800e508 <disk_ioctl+0x38>)
 800e4f0:	440a      	add	r2, r1
 800e4f2:	7a10      	ldrb	r0, [r2, #8]
 800e4f4:	79b9      	ldrb	r1, [r7, #6]
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	4798      	blx	r3
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	73fb      	strb	r3, [r7, #15]
  return res;
 800e4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e500:	4618      	mov	r0, r3
 800e502:	3710      	adds	r7, #16
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	2000019c 	.word	0x2000019c

0800e50c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e50c:	b480      	push	{r7}
 800e50e:	b085      	sub	sp, #20
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	3301      	adds	r3, #1
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e51c:	89fb      	ldrh	r3, [r7, #14]
 800e51e:	021b      	lsls	r3, r3, #8
 800e520:	b21a      	sxth	r2, r3
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	b21b      	sxth	r3, r3
 800e528:	4313      	orrs	r3, r2
 800e52a:	b21b      	sxth	r3, r3
 800e52c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e52e:	89fb      	ldrh	r3, [r7, #14]
}
 800e530:	4618      	mov	r0, r3
 800e532:	3714      	adds	r7, #20
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr

0800e53c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e53c:	b480      	push	{r7}
 800e53e:	b085      	sub	sp, #20
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	3303      	adds	r3, #3
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	021b      	lsls	r3, r3, #8
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	3202      	adds	r2, #2
 800e554:	7812      	ldrb	r2, [r2, #0]
 800e556:	4313      	orrs	r3, r2
 800e558:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	021b      	lsls	r3, r3, #8
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	3201      	adds	r2, #1
 800e562:	7812      	ldrb	r2, [r2, #0]
 800e564:	4313      	orrs	r3, r2
 800e566:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	021b      	lsls	r3, r3, #8
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	7812      	ldrb	r2, [r2, #0]
 800e570:	4313      	orrs	r3, r2
 800e572:	60fb      	str	r3, [r7, #12]
	return rv;
 800e574:	68fb      	ldr	r3, [r7, #12]
}
 800e576:	4618      	mov	r0, r3
 800e578:	3714      	adds	r7, #20
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr

0800e582 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e582:	b480      	push	{r7}
 800e584:	b083      	sub	sp, #12
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
 800e58a:	460b      	mov	r3, r1
 800e58c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	1c5a      	adds	r2, r3, #1
 800e592:	607a      	str	r2, [r7, #4]
 800e594:	887a      	ldrh	r2, [r7, #2]
 800e596:	b2d2      	uxtb	r2, r2
 800e598:	701a      	strb	r2, [r3, #0]
 800e59a:	887b      	ldrh	r3, [r7, #2]
 800e59c:	0a1b      	lsrs	r3, r3, #8
 800e59e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	1c5a      	adds	r2, r3, #1
 800e5a4:	607a      	str	r2, [r7, #4]
 800e5a6:	887a      	ldrh	r2, [r7, #2]
 800e5a8:	b2d2      	uxtb	r2, r2
 800e5aa:	701a      	strb	r2, [r3, #0]
}
 800e5ac:	bf00      	nop
 800e5ae:	370c      	adds	r7, #12
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr

0800e5b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	1c5a      	adds	r2, r3, #1
 800e5c6:	607a      	str	r2, [r7, #4]
 800e5c8:	683a      	ldr	r2, [r7, #0]
 800e5ca:	b2d2      	uxtb	r2, r2
 800e5cc:	701a      	strb	r2, [r3, #0]
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	0a1b      	lsrs	r3, r3, #8
 800e5d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	1c5a      	adds	r2, r3, #1
 800e5d8:	607a      	str	r2, [r7, #4]
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	b2d2      	uxtb	r2, r2
 800e5de:	701a      	strb	r2, [r3, #0]
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	0a1b      	lsrs	r3, r3, #8
 800e5e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	1c5a      	adds	r2, r3, #1
 800e5ea:	607a      	str	r2, [r7, #4]
 800e5ec:	683a      	ldr	r2, [r7, #0]
 800e5ee:	b2d2      	uxtb	r2, r2
 800e5f0:	701a      	strb	r2, [r3, #0]
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	0a1b      	lsrs	r3, r3, #8
 800e5f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	1c5a      	adds	r2, r3, #1
 800e5fc:	607a      	str	r2, [r7, #4]
 800e5fe:	683a      	ldr	r2, [r7, #0]
 800e600:	b2d2      	uxtb	r2, r2
 800e602:	701a      	strb	r2, [r3, #0]
}
 800e604:	bf00      	nop
 800e606:	370c      	adds	r7, #12
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e610:	b480      	push	{r7}
 800e612:	b087      	sub	sp, #28
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d00d      	beq.n	800e646 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e62a:	693a      	ldr	r2, [r7, #16]
 800e62c:	1c53      	adds	r3, r2, #1
 800e62e:	613b      	str	r3, [r7, #16]
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	1c59      	adds	r1, r3, #1
 800e634:	6179      	str	r1, [r7, #20]
 800e636:	7812      	ldrb	r2, [r2, #0]
 800e638:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	3b01      	subs	r3, #1
 800e63e:	607b      	str	r3, [r7, #4]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1f1      	bne.n	800e62a <mem_cpy+0x1a>
	}
}
 800e646:	bf00      	nop
 800e648:	371c      	adds	r7, #28
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr

0800e652 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e652:	b480      	push	{r7}
 800e654:	b087      	sub	sp, #28
 800e656:	af00      	add	r7, sp, #0
 800e658:	60f8      	str	r0, [r7, #12]
 800e65a:	60b9      	str	r1, [r7, #8]
 800e65c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	1c5a      	adds	r2, r3, #1
 800e666:	617a      	str	r2, [r7, #20]
 800e668:	68ba      	ldr	r2, [r7, #8]
 800e66a:	b2d2      	uxtb	r2, r2
 800e66c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	3b01      	subs	r3, #1
 800e672:	607b      	str	r3, [r7, #4]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1f3      	bne.n	800e662 <mem_set+0x10>
}
 800e67a:	bf00      	nop
 800e67c:	bf00      	nop
 800e67e:	371c      	adds	r7, #28
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b086      	sub	sp, #24
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	78db      	ldrb	r3, [r3, #3]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d034      	beq.n	800e706 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	7858      	ldrb	r0, [r3, #1]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	f7ff feee 	bl	800e490 <disk_write>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d002      	beq.n	800e6c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	73fb      	strb	r3, [r7, #15]
 800e6be:	e022      	b.n	800e706 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ca:	697a      	ldr	r2, [r7, #20]
 800e6cc:	1ad2      	subs	r2, r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	69db      	ldr	r3, [r3, #28]
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d217      	bcs.n	800e706 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	789b      	ldrb	r3, [r3, #2]
 800e6da:	613b      	str	r3, [r7, #16]
 800e6dc:	e010      	b.n	800e700 <sync_window+0x78>
					wsect += fs->fsize;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	69db      	ldr	r3, [r3, #28]
 800e6e2:	697a      	ldr	r2, [r7, #20]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	7858      	ldrb	r0, [r3, #1]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	697a      	ldr	r2, [r7, #20]
 800e6f6:	f7ff fecb 	bl	800e490 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	3b01      	subs	r3, #1
 800e6fe:	613b      	str	r3, [r7, #16]
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	2b01      	cmp	r3, #1
 800e704:	d8eb      	bhi.n	800e6de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e706:	7bfb      	ldrb	r3, [r7, #15]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3718      	adds	r7, #24
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e71a:	2300      	movs	r3, #0
 800e71c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e722:	683a      	ldr	r2, [r7, #0]
 800e724:	429a      	cmp	r2, r3
 800e726:	d01b      	beq.n	800e760 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7ff ffad 	bl	800e688 <sync_window>
 800e72e:	4603      	mov	r3, r0
 800e730:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e732:	7bfb      	ldrb	r3, [r7, #15]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d113      	bne.n	800e760 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	7858      	ldrb	r0, [r3, #1]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e742:	2301      	movs	r3, #1
 800e744:	683a      	ldr	r2, [r7, #0]
 800e746:	f7ff fe83 	bl	800e450 <disk_read>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d004      	beq.n	800e75a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e750:	f04f 33ff 	mov.w	r3, #4294967295
 800e754:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e756:	2301      	movs	r3, #1
 800e758:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	683a      	ldr	r2, [r7, #0]
 800e75e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e760:	7bfb      	ldrb	r3, [r7, #15]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
	...

0800e76c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f7ff ff87 	bl	800e688 <sync_window>
 800e77a:	4603      	mov	r3, r0
 800e77c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e77e:	7bfb      	ldrb	r3, [r7, #15]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d159      	bne.n	800e838 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	2b03      	cmp	r3, #3
 800e78a:	d149      	bne.n	800e820 <sync_fs+0xb4>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	791b      	ldrb	r3, [r3, #4]
 800e790:	2b01      	cmp	r3, #1
 800e792:	d145      	bne.n	800e820 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	899b      	ldrh	r3, [r3, #12]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	2100      	movs	r1, #0
 800e7a2:	f7ff ff56 	bl	800e652 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	3334      	adds	r3, #52	; 0x34
 800e7aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e7ae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7ff fee5 	bl	800e582 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	3334      	adds	r3, #52	; 0x34
 800e7bc:	4921      	ldr	r1, [pc, #132]	; (800e844 <sync_fs+0xd8>)
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7ff fefa 	bl	800e5b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	3334      	adds	r3, #52	; 0x34
 800e7c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e7cc:	491e      	ldr	r1, [pc, #120]	; (800e848 <sync_fs+0xdc>)
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7ff fef2 	bl	800e5b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	3334      	adds	r3, #52	; 0x34
 800e7d8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	695b      	ldr	r3, [r3, #20]
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	4610      	mov	r0, r2
 800e7e4:	f7ff fee8 	bl	800e5b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	3334      	adds	r3, #52	; 0x34
 800e7ec:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	691b      	ldr	r3, [r3, #16]
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	4610      	mov	r0, r2
 800e7f8:	f7ff fede 	bl	800e5b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6a1b      	ldr	r3, [r3, #32]
 800e800:	1c5a      	adds	r2, r3, #1
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	7858      	ldrb	r0, [r3, #1]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e814:	2301      	movs	r3, #1
 800e816:	f7ff fe3b 	bl	800e490 <disk_write>
			fs->fsi_flag = 0;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2200      	movs	r2, #0
 800e81e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	785b      	ldrb	r3, [r3, #1]
 800e824:	2200      	movs	r2, #0
 800e826:	2100      	movs	r1, #0
 800e828:	4618      	mov	r0, r3
 800e82a:	f7ff fe51 	bl	800e4d0 <disk_ioctl>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d001      	beq.n	800e838 <sync_fs+0xcc>
 800e834:	2301      	movs	r3, #1
 800e836:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e838:	7bfb      	ldrb	r3, [r7, #15]
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	41615252 	.word	0x41615252
 800e848:	61417272 	.word	0x61417272

0800e84c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	3b02      	subs	r3, #2
 800e85a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	699b      	ldr	r3, [r3, #24]
 800e860:	3b02      	subs	r3, #2
 800e862:	683a      	ldr	r2, [r7, #0]
 800e864:	429a      	cmp	r2, r3
 800e866:	d301      	bcc.n	800e86c <clust2sect+0x20>
 800e868:	2300      	movs	r3, #0
 800e86a:	e008      	b.n	800e87e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	895b      	ldrh	r3, [r3, #10]
 800e870:	461a      	mov	r2, r3
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	fb03 f202 	mul.w	r2, r3, r2
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e87c:	4413      	add	r3, r2
}
 800e87e:	4618      	mov	r0, r3
 800e880:	370c      	adds	r7, #12
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr

0800e88a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b086      	sub	sp, #24
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
 800e892:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d904      	bls.n	800e8aa <get_fat+0x20>
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	699b      	ldr	r3, [r3, #24]
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d302      	bcc.n	800e8b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	617b      	str	r3, [r7, #20]
 800e8ae:	e0bb      	b.n	800ea28 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e8b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	2b03      	cmp	r3, #3
 800e8bc:	f000 8083 	beq.w	800e9c6 <get_fat+0x13c>
 800e8c0:	2b03      	cmp	r3, #3
 800e8c2:	f300 80a7 	bgt.w	800ea14 <get_fat+0x18a>
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d002      	beq.n	800e8d0 <get_fat+0x46>
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	d056      	beq.n	800e97c <get_fat+0xf2>
 800e8ce:	e0a1      	b.n	800ea14 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	60fb      	str	r3, [r7, #12]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	085b      	lsrs	r3, r3, #1
 800e8d8:	68fa      	ldr	r2, [r7, #12]
 800e8da:	4413      	add	r3, r2
 800e8dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	899b      	ldrh	r3, [r3, #12]
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800e8ee:	4413      	add	r3, r2
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	6938      	ldr	r0, [r7, #16]
 800e8f4:	f7ff ff0c 	bl	800e710 <move_window>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f040 808d 	bne.w	800ea1a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	60fa      	str	r2, [r7, #12]
 800e906:	693a      	ldr	r2, [r7, #16]
 800e908:	8992      	ldrh	r2, [r2, #12]
 800e90a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e90e:	fb02 f201 	mul.w	r2, r2, r1
 800e912:	1a9b      	subs	r3, r3, r2
 800e914:	693a      	ldr	r2, [r7, #16]
 800e916:	4413      	add	r3, r2
 800e918:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e91c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	899b      	ldrh	r3, [r3, #12]
 800e926:	4619      	mov	r1, r3
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e92e:	4413      	add	r3, r2
 800e930:	4619      	mov	r1, r3
 800e932:	6938      	ldr	r0, [r7, #16]
 800e934:	f7ff feec 	bl	800e710 <move_window>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d16f      	bne.n	800ea1e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	899b      	ldrh	r3, [r3, #12]
 800e942:	461a      	mov	r2, r3
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	fbb3 f1f2 	udiv	r1, r3, r2
 800e94a:	fb02 f201 	mul.w	r2, r2, r1
 800e94e:	1a9b      	subs	r3, r3, r2
 800e950:	693a      	ldr	r2, [r7, #16]
 800e952:	4413      	add	r3, r2
 800e954:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e958:	021b      	lsls	r3, r3, #8
 800e95a:	461a      	mov	r2, r3
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	4313      	orrs	r3, r2
 800e960:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	f003 0301 	and.w	r3, r3, #1
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d002      	beq.n	800e972 <get_fat+0xe8>
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	091b      	lsrs	r3, r3, #4
 800e970:	e002      	b.n	800e978 <get_fat+0xee>
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e978:	617b      	str	r3, [r7, #20]
			break;
 800e97a:	e055      	b.n	800ea28 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	899b      	ldrh	r3, [r3, #12]
 800e984:	085b      	lsrs	r3, r3, #1
 800e986:	b29b      	uxth	r3, r3
 800e988:	4619      	mov	r1, r3
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e990:	4413      	add	r3, r2
 800e992:	4619      	mov	r1, r3
 800e994:	6938      	ldr	r0, [r7, #16]
 800e996:	f7ff febb 	bl	800e710 <move_window>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d140      	bne.n	800ea22 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	005b      	lsls	r3, r3, #1
 800e9aa:	693a      	ldr	r2, [r7, #16]
 800e9ac:	8992      	ldrh	r2, [r2, #12]
 800e9ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800e9b2:	fb02 f200 	mul.w	r2, r2, r0
 800e9b6:	1a9b      	subs	r3, r3, r2
 800e9b8:	440b      	add	r3, r1
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7ff fda6 	bl	800e50c <ld_word>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	617b      	str	r3, [r7, #20]
			break;
 800e9c4:	e030      	b.n	800ea28 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	899b      	ldrh	r3, [r3, #12]
 800e9ce:	089b      	lsrs	r3, r3, #2
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9da:	4413      	add	r3, r2
 800e9dc:	4619      	mov	r1, r3
 800e9de:	6938      	ldr	r0, [r7, #16]
 800e9e0:	f7ff fe96 	bl	800e710 <move_window>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d11d      	bne.n	800ea26 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	693a      	ldr	r2, [r7, #16]
 800e9f6:	8992      	ldrh	r2, [r2, #12]
 800e9f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e9fc:	fb02 f200 	mul.w	r2, r2, r0
 800ea00:	1a9b      	subs	r3, r3, r2
 800ea02:	440b      	add	r3, r1
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7ff fd99 	bl	800e53c <ld_dword>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ea10:	617b      	str	r3, [r7, #20]
			break;
 800ea12:	e009      	b.n	800ea28 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ea14:	2301      	movs	r3, #1
 800ea16:	617b      	str	r3, [r7, #20]
 800ea18:	e006      	b.n	800ea28 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea1a:	bf00      	nop
 800ea1c:	e004      	b.n	800ea28 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea1e:	bf00      	nop
 800ea20:	e002      	b.n	800ea28 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ea22:	bf00      	nop
 800ea24:	e000      	b.n	800ea28 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ea26:	bf00      	nop
		}
	}

	return val;
 800ea28:	697b      	ldr	r3, [r7, #20]
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3718      	adds	r7, #24
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ea32:	b590      	push	{r4, r7, lr}
 800ea34:	b089      	sub	sp, #36	; 0x24
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	60f8      	str	r0, [r7, #12]
 800ea3a:	60b9      	str	r1, [r7, #8]
 800ea3c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ea3e:	2302      	movs	r3, #2
 800ea40:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	f240 8102 	bls.w	800ec4e <put_fat+0x21c>
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	699b      	ldr	r3, [r3, #24]
 800ea4e:	68ba      	ldr	r2, [r7, #8]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	f080 80fc 	bcs.w	800ec4e <put_fat+0x21c>
		switch (fs->fs_type) {
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	2b03      	cmp	r3, #3
 800ea5c:	f000 80b6 	beq.w	800ebcc <put_fat+0x19a>
 800ea60:	2b03      	cmp	r3, #3
 800ea62:	f300 80fd 	bgt.w	800ec60 <put_fat+0x22e>
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d003      	beq.n	800ea72 <put_fat+0x40>
 800ea6a:	2b02      	cmp	r3, #2
 800ea6c:	f000 8083 	beq.w	800eb76 <put_fat+0x144>
 800ea70:	e0f6      	b.n	800ec60 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	61bb      	str	r3, [r7, #24]
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	085b      	lsrs	r3, r3, #1
 800ea7a:	69ba      	ldr	r2, [r7, #24]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	899b      	ldrh	r3, [r3, #12]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea90:	4413      	add	r3, r2
 800ea92:	4619      	mov	r1, r3
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f7ff fe3b 	bl	800e710 <move_window>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea9e:	7ffb      	ldrb	r3, [r7, #31]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	f040 80d6 	bne.w	800ec52 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	1c5a      	adds	r2, r3, #1
 800eab0:	61ba      	str	r2, [r7, #24]
 800eab2:	68fa      	ldr	r2, [r7, #12]
 800eab4:	8992      	ldrh	r2, [r2, #12]
 800eab6:	fbb3 f0f2 	udiv	r0, r3, r2
 800eaba:	fb02 f200 	mul.w	r2, r2, r0
 800eabe:	1a9b      	subs	r3, r3, r2
 800eac0:	440b      	add	r3, r1
 800eac2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	f003 0301 	and.w	r3, r3, #1
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d00d      	beq.n	800eaea <put_fat+0xb8>
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	b25b      	sxtb	r3, r3
 800ead4:	f003 030f 	and.w	r3, r3, #15
 800ead8:	b25a      	sxtb	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	011b      	lsls	r3, r3, #4
 800eae0:	b25b      	sxtb	r3, r3
 800eae2:	4313      	orrs	r3, r2
 800eae4:	b25b      	sxtb	r3, r3
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	e001      	b.n	800eaee <put_fat+0xbc>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	697a      	ldr	r2, [r7, #20]
 800eaf0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	899b      	ldrh	r3, [r3, #12]
 800eb00:	4619      	mov	r1, r3
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb08:	4413      	add	r3, r2
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	68f8      	ldr	r0, [r7, #12]
 800eb0e:	f7ff fdff 	bl	800e710 <move_window>
 800eb12:	4603      	mov	r3, r0
 800eb14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb16:	7ffb      	ldrb	r3, [r7, #31]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	f040 809c 	bne.w	800ec56 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	899b      	ldrh	r3, [r3, #12]
 800eb28:	461a      	mov	r2, r3
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb30:	fb02 f200 	mul.w	r2, r2, r0
 800eb34:	1a9b      	subs	r3, r3, r2
 800eb36:	440b      	add	r3, r1
 800eb38:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	f003 0301 	and.w	r3, r3, #1
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d003      	beq.n	800eb4c <put_fat+0x11a>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	091b      	lsrs	r3, r3, #4
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	e00e      	b.n	800eb6a <put_fat+0x138>
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	b25b      	sxtb	r3, r3
 800eb52:	f023 030f 	bic.w	r3, r3, #15
 800eb56:	b25a      	sxtb	r2, r3
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	0a1b      	lsrs	r3, r3, #8
 800eb5c:	b25b      	sxtb	r3, r3
 800eb5e:	f003 030f 	and.w	r3, r3, #15
 800eb62:	b25b      	sxtb	r3, r3
 800eb64:	4313      	orrs	r3, r2
 800eb66:	b25b      	sxtb	r3, r3
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	697a      	ldr	r2, [r7, #20]
 800eb6c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2201      	movs	r2, #1
 800eb72:	70da      	strb	r2, [r3, #3]
			break;
 800eb74:	e074      	b.n	800ec60 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	899b      	ldrh	r3, [r3, #12]
 800eb7e:	085b      	lsrs	r3, r3, #1
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	4619      	mov	r1, r3
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb8a:	4413      	add	r3, r2
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	f7ff fdbe 	bl	800e710 <move_window>
 800eb94:	4603      	mov	r3, r0
 800eb96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb98:	7ffb      	ldrb	r3, [r7, #31]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d15d      	bne.n	800ec5a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	005b      	lsls	r3, r3, #1
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	8992      	ldrh	r2, [r2, #12]
 800ebac:	fbb3 f0f2 	udiv	r0, r3, r2
 800ebb0:	fb02 f200 	mul.w	r2, r2, r0
 800ebb4:	1a9b      	subs	r3, r3, r2
 800ebb6:	440b      	add	r3, r1
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	b292      	uxth	r2, r2
 800ebbc:	4611      	mov	r1, r2
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7ff fcdf 	bl	800e582 <st_word>
			fs->wflag = 1;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	70da      	strb	r2, [r3, #3]
			break;
 800ebca:	e049      	b.n	800ec60 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	899b      	ldrh	r3, [r3, #12]
 800ebd4:	089b      	lsrs	r3, r3, #2
 800ebd6:	b29b      	uxth	r3, r3
 800ebd8:	4619      	mov	r1, r3
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	fbb3 f3f1 	udiv	r3, r3, r1
 800ebe0:	4413      	add	r3, r2
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	68f8      	ldr	r0, [r7, #12]
 800ebe6:	f7ff fd93 	bl	800e710 <move_window>
 800ebea:	4603      	mov	r3, r0
 800ebec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ebee:	7ffb      	ldrb	r3, [r7, #31]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d134      	bne.n	800ec5e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	8992      	ldrh	r2, [r2, #12]
 800ec08:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec0c:	fb02 f200 	mul.w	r2, r2, r0
 800ec10:	1a9b      	subs	r3, r3, r2
 800ec12:	440b      	add	r3, r1
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7ff fc91 	bl	800e53c <ld_dword>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ec20:	4323      	orrs	r3, r4
 800ec22:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	8992      	ldrh	r2, [r2, #12]
 800ec32:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec36:	fb02 f200 	mul.w	r2, r2, r0
 800ec3a:	1a9b      	subs	r3, r3, r2
 800ec3c:	440b      	add	r3, r1
 800ec3e:	6879      	ldr	r1, [r7, #4]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7ff fcb9 	bl	800e5b8 <st_dword>
			fs->wflag = 1;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2201      	movs	r2, #1
 800ec4a:	70da      	strb	r2, [r3, #3]
			break;
 800ec4c:	e008      	b.n	800ec60 <put_fat+0x22e>
		}
	}
 800ec4e:	bf00      	nop
 800ec50:	e006      	b.n	800ec60 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ec52:	bf00      	nop
 800ec54:	e004      	b.n	800ec60 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ec56:	bf00      	nop
 800ec58:	e002      	b.n	800ec60 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ec5a:	bf00      	nop
 800ec5c:	e000      	b.n	800ec60 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ec5e:	bf00      	nop
	return res;
 800ec60:	7ffb      	ldrb	r3, [r7, #31]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3724      	adds	r7, #36	; 0x24
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd90      	pop	{r4, r7, pc}

0800ec6a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b088      	sub	sp, #32
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
 800ec72:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d10d      	bne.n	800ec9c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	691b      	ldr	r3, [r3, #16]
 800ec84:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d004      	beq.n	800ec96 <create_chain+0x2c>
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	699b      	ldr	r3, [r3, #24]
 800ec90:	69ba      	ldr	r2, [r7, #24]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d31b      	bcc.n	800ecce <create_chain+0x64>
 800ec96:	2301      	movs	r3, #1
 800ec98:	61bb      	str	r3, [r7, #24]
 800ec9a:	e018      	b.n	800ecce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ec9c:	6839      	ldr	r1, [r7, #0]
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7ff fdf3 	bl	800e88a <get_fat>
 800eca4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d801      	bhi.n	800ecb0 <create_chain+0x46>
 800ecac:	2301      	movs	r3, #1
 800ecae:	e070      	b.n	800ed92 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb6:	d101      	bne.n	800ecbc <create_chain+0x52>
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	e06a      	b.n	800ed92 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	699b      	ldr	r3, [r3, #24]
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d201      	bcs.n	800ecca <create_chain+0x60>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	e063      	b.n	800ed92 <create_chain+0x128>
		scl = clst;
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	699b      	ldr	r3, [r3, #24]
 800ecdc:	69fa      	ldr	r2, [r7, #28]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d307      	bcc.n	800ecf2 <create_chain+0x88>
				ncl = 2;
 800ece2:	2302      	movs	r3, #2
 800ece4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ece6:	69fa      	ldr	r2, [r7, #28]
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d901      	bls.n	800ecf2 <create_chain+0x88>
 800ecee:	2300      	movs	r3, #0
 800ecf0:	e04f      	b.n	800ed92 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ecf2:	69f9      	ldr	r1, [r7, #28]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7ff fdc8 	bl	800e88a <get_fat>
 800ecfa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d00e      	beq.n	800ed20 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d003      	beq.n	800ed10 <create_chain+0xa6>
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed0e:	d101      	bne.n	800ed14 <create_chain+0xaa>
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	e03e      	b.n	800ed92 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ed14:	69fa      	ldr	r2, [r7, #28]
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d1da      	bne.n	800ecd2 <create_chain+0x68>
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	e038      	b.n	800ed92 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ed20:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ed22:	f04f 32ff 	mov.w	r2, #4294967295
 800ed26:	69f9      	ldr	r1, [r7, #28]
 800ed28:	6938      	ldr	r0, [r7, #16]
 800ed2a:	f7ff fe82 	bl	800ea32 <put_fat>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ed32:	7dfb      	ldrb	r3, [r7, #23]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d109      	bne.n	800ed4c <create_chain+0xe2>
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d006      	beq.n	800ed4c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ed3e:	69fa      	ldr	r2, [r7, #28]
 800ed40:	6839      	ldr	r1, [r7, #0]
 800ed42:	6938      	ldr	r0, [r7, #16]
 800ed44:	f7ff fe75 	bl	800ea32 <put_fat>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ed4c:	7dfb      	ldrb	r3, [r7, #23]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d116      	bne.n	800ed80 <create_chain+0x116>
		fs->last_clst = ncl;
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	69fa      	ldr	r2, [r7, #28]
 800ed56:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	695a      	ldr	r2, [r3, #20]
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	699b      	ldr	r3, [r3, #24]
 800ed60:	3b02      	subs	r3, #2
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d804      	bhi.n	800ed70 <create_chain+0x106>
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	695b      	ldr	r3, [r3, #20]
 800ed6a:	1e5a      	subs	r2, r3, #1
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	791b      	ldrb	r3, [r3, #4]
 800ed74:	f043 0301 	orr.w	r3, r3, #1
 800ed78:	b2da      	uxtb	r2, r3
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	711a      	strb	r2, [r3, #4]
 800ed7e:	e007      	b.n	800ed90 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ed80:	7dfb      	ldrb	r3, [r7, #23]
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d102      	bne.n	800ed8c <create_chain+0x122>
 800ed86:	f04f 33ff 	mov.w	r3, #4294967295
 800ed8a:	e000      	b.n	800ed8e <create_chain+0x124>
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ed90:	69fb      	ldr	r3, [r7, #28]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3720      	adds	r7, #32
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ed9a:	b480      	push	{r7}
 800ed9c:	b087      	sub	sp, #28
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
 800eda2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edae:	3304      	adds	r3, #4
 800edb0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	899b      	ldrh	r3, [r3, #12]
 800edb6:	461a      	mov	r2, r3
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	fbb3 f3f2 	udiv	r3, r3, r2
 800edbe:	68fa      	ldr	r2, [r7, #12]
 800edc0:	8952      	ldrh	r2, [r2, #10]
 800edc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800edc6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	1d1a      	adds	r2, r3, #4
 800edcc:	613a      	str	r2, [r7, #16]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d101      	bne.n	800eddc <clmt_clust+0x42>
 800edd8:	2300      	movs	r3, #0
 800edda:	e010      	b.n	800edfe <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800eddc:	697a      	ldr	r2, [r7, #20]
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d307      	bcc.n	800edf4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ede4:	697a      	ldr	r2, [r7, #20]
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	617b      	str	r3, [r7, #20]
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	3304      	adds	r3, #4
 800edf0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800edf2:	e7e9      	b.n	800edc8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800edf4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	4413      	add	r3, r2
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	371c      	adds	r7, #28
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b084      	sub	sp, #16
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	60f8      	str	r0, [r7, #12]
 800ee12:	60b9      	str	r1, [r7, #8]
 800ee14:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	331a      	adds	r3, #26
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	b292      	uxth	r2, r2
 800ee1e:	4611      	mov	r1, r2
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7ff fbae 	bl	800e582 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	2b03      	cmp	r3, #3
 800ee2c:	d109      	bne.n	800ee42 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	f103 0214 	add.w	r2, r3, #20
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	0c1b      	lsrs	r3, r3, #16
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	4610      	mov	r0, r2
 800ee3e:	f7ff fba0 	bl	800e582 <st_word>
	}
}
 800ee42:	bf00      	nop
 800ee44:	3710      	adds	r7, #16
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ee4a:	b580      	push	{r7, lr}
 800ee4c:	b084      	sub	sp, #16
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
 800ee52:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ee54:	2309      	movs	r3, #9
 800ee56:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d01c      	beq.n	800ee98 <validate+0x4e>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d018      	beq.n	800ee98 <validate+0x4e>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d013      	beq.n	800ee98 <validate+0x4e>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	889a      	ldrh	r2, [r3, #4]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	88db      	ldrh	r3, [r3, #6]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d10c      	bne.n	800ee98 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	785b      	ldrb	r3, [r3, #1]
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7ff fac9 	bl	800e41c <disk_status>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	f003 0301 	and.w	r3, r3, #1
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d101      	bne.n	800ee98 <validate+0x4e>
			res = FR_OK;
 800ee94:	2300      	movs	r3, #0
 800ee96:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ee98:	7bfb      	ldrb	r3, [r7, #15]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d102      	bne.n	800eea4 <validate+0x5a>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	e000      	b.n	800eea6 <validate+0x5c>
 800eea4:	2300      	movs	r3, #0
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	6013      	str	r3, [r2, #0]
	return res;
 800eeaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b08c      	sub	sp, #48	; 0x30
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	607a      	str	r2, [r7, #4]
 800eec0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	2200      	movs	r2, #0
 800eeca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f107 0210 	add.w	r2, r7, #16
 800eed2:	4611      	mov	r1, r2
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7ff ffb8 	bl	800ee4a <validate>
 800eeda:	4603      	mov	r3, r0
 800eedc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d107      	bne.n	800eef8 <f_write+0x44>
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	7d5b      	ldrb	r3, [r3, #21]
 800eeec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eef0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d002      	beq.n	800eefe <f_write+0x4a>
 800eef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eefc:	e16a      	b.n	800f1d4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	7d1b      	ldrb	r3, [r3, #20]
 800ef02:	f003 0302 	and.w	r3, r3, #2
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d101      	bne.n	800ef0e <f_write+0x5a>
 800ef0a:	2307      	movs	r3, #7
 800ef0c:	e162      	b.n	800f1d4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	699a      	ldr	r2, [r3, #24]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	441a      	add	r2, r3
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	699b      	ldr	r3, [r3, #24]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	f080 814c 	bcs.w	800f1b8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	699b      	ldr	r3, [r3, #24]
 800ef24:	43db      	mvns	r3, r3
 800ef26:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ef28:	e146      	b.n	800f1b8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	699b      	ldr	r3, [r3, #24]
 800ef2e:	693a      	ldr	r2, [r7, #16]
 800ef30:	8992      	ldrh	r2, [r2, #12]
 800ef32:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef36:	fb02 f201 	mul.w	r2, r2, r1
 800ef3a:	1a9b      	subs	r3, r3, r2
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	f040 80f1 	bne.w	800f124 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	699b      	ldr	r3, [r3, #24]
 800ef46:	693a      	ldr	r2, [r7, #16]
 800ef48:	8992      	ldrh	r2, [r2, #12]
 800ef4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef4e:	693a      	ldr	r2, [r7, #16]
 800ef50:	8952      	ldrh	r2, [r2, #10]
 800ef52:	3a01      	subs	r2, #1
 800ef54:	4013      	ands	r3, r2
 800ef56:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ef58:	69bb      	ldr	r3, [r7, #24]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d143      	bne.n	800efe6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	699b      	ldr	r3, [r3, #24]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d10c      	bne.n	800ef80 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ef6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d11a      	bne.n	800efa8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2100      	movs	r1, #0
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7ff fe77 	bl	800ec6a <create_chain>
 800ef7c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ef7e:	e013      	b.n	800efa8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d007      	beq.n	800ef98 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	699b      	ldr	r3, [r3, #24]
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	68f8      	ldr	r0, [r7, #12]
 800ef90:	f7ff ff03 	bl	800ed9a <clmt_clust>
 800ef94:	62b8      	str	r0, [r7, #40]	; 0x28
 800ef96:	e007      	b.n	800efa8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ef98:	68fa      	ldr	r2, [r7, #12]
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	69db      	ldr	r3, [r3, #28]
 800ef9e:	4619      	mov	r1, r3
 800efa0:	4610      	mov	r0, r2
 800efa2:	f7ff fe62 	bl	800ec6a <create_chain>
 800efa6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800efa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efaa:	2b00      	cmp	r3, #0
 800efac:	f000 8109 	beq.w	800f1c2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800efb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d104      	bne.n	800efc0 <f_write+0x10c>
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2202      	movs	r2, #2
 800efba:	755a      	strb	r2, [r3, #21]
 800efbc:	2302      	movs	r3, #2
 800efbe:	e109      	b.n	800f1d4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800efc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efc6:	d104      	bne.n	800efd2 <f_write+0x11e>
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2201      	movs	r2, #1
 800efcc:	755a      	strb	r2, [r3, #21]
 800efce:	2301      	movs	r3, #1
 800efd0:	e100      	b.n	800f1d4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efd6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d102      	bne.n	800efe6 <f_write+0x132>
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efe4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	7d1b      	ldrb	r3, [r3, #20]
 800efea:	b25b      	sxtb	r3, r3
 800efec:	2b00      	cmp	r3, #0
 800efee:	da18      	bge.n	800f022 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	7858      	ldrb	r0, [r3, #1]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	6a1a      	ldr	r2, [r3, #32]
 800effe:	2301      	movs	r3, #1
 800f000:	f7ff fa46 	bl	800e490 <disk_write>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d004      	beq.n	800f014 <f_write+0x160>
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2201      	movs	r2, #1
 800f00e:	755a      	strb	r2, [r3, #21]
 800f010:	2301      	movs	r3, #1
 800f012:	e0df      	b.n	800f1d4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	7d1b      	ldrb	r3, [r3, #20]
 800f018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f01c:	b2da      	uxtb	r2, r3
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f022:	693a      	ldr	r2, [r7, #16]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	69db      	ldr	r3, [r3, #28]
 800f028:	4619      	mov	r1, r3
 800f02a:	4610      	mov	r0, r2
 800f02c:	f7ff fc0e 	bl	800e84c <clust2sect>
 800f030:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d104      	bne.n	800f042 <f_write+0x18e>
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2202      	movs	r2, #2
 800f03c:	755a      	strb	r2, [r3, #21]
 800f03e:	2302      	movs	r3, #2
 800f040:	e0c8      	b.n	800f1d4 <f_write+0x320>
			sect += csect;
 800f042:	697a      	ldr	r2, [r7, #20]
 800f044:	69bb      	ldr	r3, [r7, #24]
 800f046:	4413      	add	r3, r2
 800f048:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	899b      	ldrh	r3, [r3, #12]
 800f04e:	461a      	mov	r2, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	fbb3 f3f2 	udiv	r3, r3, r2
 800f056:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f058:	6a3b      	ldr	r3, [r7, #32]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d043      	beq.n	800f0e6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f05e:	69ba      	ldr	r2, [r7, #24]
 800f060:	6a3b      	ldr	r3, [r7, #32]
 800f062:	4413      	add	r3, r2
 800f064:	693a      	ldr	r2, [r7, #16]
 800f066:	8952      	ldrh	r2, [r2, #10]
 800f068:	4293      	cmp	r3, r2
 800f06a:	d905      	bls.n	800f078 <f_write+0x1c4>
					cc = fs->csize - csect;
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	895b      	ldrh	r3, [r3, #10]
 800f070:	461a      	mov	r2, r3
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	1ad3      	subs	r3, r2, r3
 800f076:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	7858      	ldrb	r0, [r3, #1]
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	697a      	ldr	r2, [r7, #20]
 800f080:	69f9      	ldr	r1, [r7, #28]
 800f082:	f7ff fa05 	bl	800e490 <disk_write>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d004      	beq.n	800f096 <f_write+0x1e2>
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2201      	movs	r2, #1
 800f090:	755a      	strb	r2, [r3, #21]
 800f092:	2301      	movs	r3, #1
 800f094:	e09e      	b.n	800f1d4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6a1a      	ldr	r2, [r3, #32]
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	6a3a      	ldr	r2, [r7, #32]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d918      	bls.n	800f0d6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	6a1a      	ldr	r2, [r3, #32]
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	1ad3      	subs	r3, r2, r3
 800f0b2:	693a      	ldr	r2, [r7, #16]
 800f0b4:	8992      	ldrh	r2, [r2, #12]
 800f0b6:	fb02 f303 	mul.w	r3, r2, r3
 800f0ba:	69fa      	ldr	r2, [r7, #28]
 800f0bc:	18d1      	adds	r1, r2, r3
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	899b      	ldrh	r3, [r3, #12]
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	f7ff faa4 	bl	800e610 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	7d1b      	ldrb	r3, [r3, #20]
 800f0cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0d0:	b2da      	uxtb	r2, r3
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	899b      	ldrh	r3, [r3, #12]
 800f0da:	461a      	mov	r2, r3
 800f0dc:	6a3b      	ldr	r3, [r7, #32]
 800f0de:	fb02 f303 	mul.w	r3, r2, r3
 800f0e2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f0e4:	e04b      	b.n	800f17e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	6a1b      	ldr	r3, [r3, #32]
 800f0ea:	697a      	ldr	r2, [r7, #20]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d016      	beq.n	800f11e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	699a      	ldr	r2, [r3, #24]
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d210      	bcs.n	800f11e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	7858      	ldrb	r0, [r3, #1]
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f106:	2301      	movs	r3, #1
 800f108:	697a      	ldr	r2, [r7, #20]
 800f10a:	f7ff f9a1 	bl	800e450 <disk_read>
 800f10e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f110:	2b00      	cmp	r3, #0
 800f112:	d004      	beq.n	800f11e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2201      	movs	r2, #1
 800f118:	755a      	strb	r2, [r3, #21]
 800f11a:	2301      	movs	r3, #1
 800f11c:	e05a      	b.n	800f1d4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	697a      	ldr	r2, [r7, #20]
 800f122:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	899b      	ldrh	r3, [r3, #12]
 800f128:	4618      	mov	r0, r3
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	699b      	ldr	r3, [r3, #24]
 800f12e:	693a      	ldr	r2, [r7, #16]
 800f130:	8992      	ldrh	r2, [r2, #12]
 800f132:	fbb3 f1f2 	udiv	r1, r3, r2
 800f136:	fb02 f201 	mul.w	r2, r2, r1
 800f13a:	1a9b      	subs	r3, r3, r2
 800f13c:	1ac3      	subs	r3, r0, r3
 800f13e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	429a      	cmp	r2, r3
 800f146:	d901      	bls.n	800f14c <f_write+0x298>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	699b      	ldr	r3, [r3, #24]
 800f156:	693a      	ldr	r2, [r7, #16]
 800f158:	8992      	ldrh	r2, [r2, #12]
 800f15a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f15e:	fb02 f200 	mul.w	r2, r2, r0
 800f162:	1a9b      	subs	r3, r3, r2
 800f164:	440b      	add	r3, r1
 800f166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f168:	69f9      	ldr	r1, [r7, #28]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7ff fa50 	bl	800e610 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	7d1b      	ldrb	r3, [r3, #20]
 800f174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f178:	b2da      	uxtb	r2, r3
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f17e:	69fa      	ldr	r2, [r7, #28]
 800f180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f182:	4413      	add	r3, r2
 800f184:	61fb      	str	r3, [r7, #28]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	699a      	ldr	r2, [r3, #24]
 800f18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18c:	441a      	add	r2, r3
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	619a      	str	r2, [r3, #24]
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	68da      	ldr	r2, [r3, #12]
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	699b      	ldr	r3, [r3, #24]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	bf38      	it	cc
 800f19e:	461a      	movcc	r2, r3
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	60da      	str	r2, [r3, #12]
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1aa:	441a      	add	r2, r3
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	601a      	str	r2, [r3, #0]
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b4:	1ad3      	subs	r3, r2, r3
 800f1b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	f47f aeb5 	bne.w	800ef2a <f_write+0x76>
 800f1c0:	e000      	b.n	800f1c4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f1c2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	7d1b      	ldrb	r3, [r3, #20]
 800f1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1cc:	b2da      	uxtb	r2, r3
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f1d2:	2300      	movs	r3, #0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3730      	adds	r7, #48	; 0x30
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b086      	sub	sp, #24
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f107 0208 	add.w	r2, r7, #8
 800f1ea:	4611      	mov	r1, r2
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7ff fe2c 	bl	800ee4a <validate>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f1f6:	7dfb      	ldrb	r3, [r7, #23]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d168      	bne.n	800f2ce <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	7d1b      	ldrb	r3, [r3, #20]
 800f200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f204:	2b00      	cmp	r3, #0
 800f206:	d062      	beq.n	800f2ce <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	7d1b      	ldrb	r3, [r3, #20]
 800f20c:	b25b      	sxtb	r3, r3
 800f20e:	2b00      	cmp	r3, #0
 800f210:	da15      	bge.n	800f23e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	7858      	ldrb	r0, [r3, #1]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6a1a      	ldr	r2, [r3, #32]
 800f220:	2301      	movs	r3, #1
 800f222:	f7ff f935 	bl	800e490 <disk_write>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d001      	beq.n	800f230 <f_sync+0x54>
 800f22c:	2301      	movs	r3, #1
 800f22e:	e04f      	b.n	800f2d0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	7d1b      	ldrb	r3, [r3, #20]
 800f234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f238:	b2da      	uxtb	r2, r3
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f23e:	f7fb ff45 	bl	800b0cc <get_fattime>
 800f242:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24a:	4619      	mov	r1, r3
 800f24c:	4610      	mov	r0, r2
 800f24e:	f7ff fa5f 	bl	800e710 <move_window>
 800f252:	4603      	mov	r3, r0
 800f254:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f256:	7dfb      	ldrb	r3, [r7, #23]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d138      	bne.n	800f2ce <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f260:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	330b      	adds	r3, #11
 800f266:	781a      	ldrb	r2, [r3, #0]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	330b      	adds	r3, #11
 800f26c:	f042 0220 	orr.w	r2, r2, #32
 800f270:	b2d2      	uxtb	r2, r2
 800f272:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6818      	ldr	r0, [r3, #0]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	461a      	mov	r2, r3
 800f27e:	68f9      	ldr	r1, [r7, #12]
 800f280:	f7ff fdc3 	bl	800ee0a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f103 021c 	add.w	r2, r3, #28
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	68db      	ldr	r3, [r3, #12]
 800f28e:	4619      	mov	r1, r3
 800f290:	4610      	mov	r0, r2
 800f292:	f7ff f991 	bl	800e5b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	3316      	adds	r3, #22
 800f29a:	6939      	ldr	r1, [r7, #16]
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7ff f98b 	bl	800e5b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	3312      	adds	r3, #18
 800f2a6:	2100      	movs	r1, #0
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7ff f96a 	bl	800e582 <st_word>
					fs->wflag = 1;
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7ff fa58 	bl	800e76c <sync_fs>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	7d1b      	ldrb	r3, [r3, #20]
 800f2c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2c8:	b2da      	uxtb	r2, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3718      	adds	r7, #24
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b087      	sub	sp, #28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f2ee:	4b1f      	ldr	r3, [pc, #124]	; (800f36c <FATFS_LinkDriverEx+0x94>)
 800f2f0:	7a5b      	ldrb	r3, [r3, #9]
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d131      	bne.n	800f35c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f2f8:	4b1c      	ldr	r3, [pc, #112]	; (800f36c <FATFS_LinkDriverEx+0x94>)
 800f2fa:	7a5b      	ldrb	r3, [r3, #9]
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	461a      	mov	r2, r3
 800f300:	4b1a      	ldr	r3, [pc, #104]	; (800f36c <FATFS_LinkDriverEx+0x94>)
 800f302:	2100      	movs	r1, #0
 800f304:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f306:	4b19      	ldr	r3, [pc, #100]	; (800f36c <FATFS_LinkDriverEx+0x94>)
 800f308:	7a5b      	ldrb	r3, [r3, #9]
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	4a17      	ldr	r2, [pc, #92]	; (800f36c <FATFS_LinkDriverEx+0x94>)
 800f30e:	009b      	lsls	r3, r3, #2
 800f310:	4413      	add	r3, r2
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f316:	4b15      	ldr	r3, [pc, #84]	; (800f36c <FATFS_LinkDriverEx+0x94>)
 800f318:	7a5b      	ldrb	r3, [r3, #9]
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	461a      	mov	r2, r3
 800f31e:	4b13      	ldr	r3, [pc, #76]	; (800f36c <FATFS_LinkDriverEx+0x94>)
 800f320:	4413      	add	r3, r2
 800f322:	79fa      	ldrb	r2, [r7, #7]
 800f324:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f326:	4b11      	ldr	r3, [pc, #68]	; (800f36c <FATFS_LinkDriverEx+0x94>)
 800f328:	7a5b      	ldrb	r3, [r3, #9]
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	1c5a      	adds	r2, r3, #1
 800f32e:	b2d1      	uxtb	r1, r2
 800f330:	4a0e      	ldr	r2, [pc, #56]	; (800f36c <FATFS_LinkDriverEx+0x94>)
 800f332:	7251      	strb	r1, [r2, #9]
 800f334:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f336:	7dbb      	ldrb	r3, [r7, #22]
 800f338:	3330      	adds	r3, #48	; 0x30
 800f33a:	b2da      	uxtb	r2, r3
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	3301      	adds	r3, #1
 800f344:	223a      	movs	r2, #58	; 0x3a
 800f346:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	3302      	adds	r3, #2
 800f34c:	222f      	movs	r2, #47	; 0x2f
 800f34e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	3303      	adds	r3, #3
 800f354:	2200      	movs	r2, #0
 800f356:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f358:	2300      	movs	r3, #0
 800f35a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f35e:	4618      	mov	r0, r3
 800f360:	371c      	adds	r7, #28
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	2000019c 	.word	0x2000019c

0800f370 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f37a:	2200      	movs	r2, #0
 800f37c:	6839      	ldr	r1, [r7, #0]
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7ff ffaa 	bl	800f2d8 <FATFS_LinkDriverEx>
 800f384:	4603      	mov	r3, r0
}
 800f386:	4618      	mov	r0, r3
 800f388:	3708      	adds	r7, #8
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
	...

0800f390 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f394:	2200      	movs	r2, #0
 800f396:	4912      	ldr	r1, [pc, #72]	; (800f3e0 <MX_USB_DEVICE_Init+0x50>)
 800f398:	4812      	ldr	r0, [pc, #72]	; (800f3e4 <MX_USB_DEVICE_Init+0x54>)
 800f39a:	f7fd feca 	bl	800d132 <USBD_Init>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f3a4:	f7f2 fb02 	bl	80019ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800f3a8:	490f      	ldr	r1, [pc, #60]	; (800f3e8 <MX_USB_DEVICE_Init+0x58>)
 800f3aa:	480e      	ldr	r0, [pc, #56]	; (800f3e4 <MX_USB_DEVICE_Init+0x54>)
 800f3ac:	f7fd fef1 	bl	800d192 <USBD_RegisterClass>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d001      	beq.n	800f3ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f3b6:	f7f2 faf9 	bl	80019ac <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800f3ba:	490c      	ldr	r1, [pc, #48]	; (800f3ec <MX_USB_DEVICE_Init+0x5c>)
 800f3bc:	4809      	ldr	r0, [pc, #36]	; (800f3e4 <MX_USB_DEVICE_Init+0x54>)
 800f3be:	f7fc faa1 	bl	800b904 <USBD_MSC_RegisterStorage>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d001      	beq.n	800f3cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f3c8:	f7f2 faf0 	bl	80019ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f3cc:	4805      	ldr	r0, [pc, #20]	; (800f3e4 <MX_USB_DEVICE_Init+0x54>)
 800f3ce:	f7fd ff07 	bl	800d1e0 <USBD_Start>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d001      	beq.n	800f3dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f3d8:	f7f2 fae8 	bl	80019ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f3dc:	bf00      	nop
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	200000f4 	.word	0x200000f4
 800f3e4:	20005a00 	.word	0x20005a00
 800f3e8:	2000000c 	.word	0x2000000c
 800f3ec:	20000154 	.word	0x20000154

0800f3f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	6039      	str	r1, [r7, #0]
 800f3fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	2212      	movs	r2, #18
 800f400:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f402:	4b03      	ldr	r3, [pc, #12]	; (800f410 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f404:	4618      	mov	r0, r3
 800f406:	370c      	adds	r7, #12
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr
 800f410:	20000114 	.word	0x20000114

0800f414 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	4603      	mov	r3, r0
 800f41c:	6039      	str	r1, [r7, #0]
 800f41e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	2204      	movs	r2, #4
 800f424:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f426:	4b03      	ldr	r3, [pc, #12]	; (800f434 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f428:	4618      	mov	r0, r3
 800f42a:	370c      	adds	r7, #12
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr
 800f434:	20000134 	.word	0x20000134

0800f438 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	4603      	mov	r3, r0
 800f440:	6039      	str	r1, [r7, #0]
 800f442:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f444:	79fb      	ldrb	r3, [r7, #7]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d105      	bne.n	800f456 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f44a:	683a      	ldr	r2, [r7, #0]
 800f44c:	4907      	ldr	r1, [pc, #28]	; (800f46c <USBD_FS_ProductStrDescriptor+0x34>)
 800f44e:	4808      	ldr	r0, [pc, #32]	; (800f470 <USBD_FS_ProductStrDescriptor+0x38>)
 800f450:	f7fe ff21 	bl	800e296 <USBD_GetString>
 800f454:	e004      	b.n	800f460 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f456:	683a      	ldr	r2, [r7, #0]
 800f458:	4904      	ldr	r1, [pc, #16]	; (800f46c <USBD_FS_ProductStrDescriptor+0x34>)
 800f45a:	4805      	ldr	r0, [pc, #20]	; (800f470 <USBD_FS_ProductStrDescriptor+0x38>)
 800f45c:	f7fe ff1b 	bl	800e296 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f460:	4b02      	ldr	r3, [pc, #8]	; (800f46c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f462:	4618      	mov	r0, r3
 800f464:	3708      	adds	r7, #8
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	20005cd0 	.word	0x20005cd0
 800f470:	0800fea8 	.word	0x0800fea8

0800f474 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	4603      	mov	r3, r0
 800f47c:	6039      	str	r1, [r7, #0]
 800f47e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f480:	683a      	ldr	r2, [r7, #0]
 800f482:	4904      	ldr	r1, [pc, #16]	; (800f494 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f484:	4804      	ldr	r0, [pc, #16]	; (800f498 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f486:	f7fe ff06 	bl	800e296 <USBD_GetString>
  return USBD_StrDesc;
 800f48a:	4b02      	ldr	r3, [pc, #8]	; (800f494 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3708      	adds	r7, #8
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}
 800f494:	20005cd0 	.word	0x20005cd0
 800f498:	0800febc 	.word	0x0800febc

0800f49c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	6039      	str	r1, [r7, #0]
 800f4a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	221a      	movs	r2, #26
 800f4ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f4ae:	f000 f855 	bl	800f55c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f4b2:	4b02      	ldr	r3, [pc, #8]	; (800f4bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	20000138 	.word	0x20000138

0800f4c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b082      	sub	sp, #8
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	6039      	str	r1, [r7, #0]
 800f4ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f4cc:	79fb      	ldrb	r3, [r7, #7]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d105      	bne.n	800f4de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f4d2:	683a      	ldr	r2, [r7, #0]
 800f4d4:	4907      	ldr	r1, [pc, #28]	; (800f4f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f4d6:	4808      	ldr	r0, [pc, #32]	; (800f4f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f4d8:	f7fe fedd 	bl	800e296 <USBD_GetString>
 800f4dc:	e004      	b.n	800f4e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f4de:	683a      	ldr	r2, [r7, #0]
 800f4e0:	4904      	ldr	r1, [pc, #16]	; (800f4f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f4e2:	4805      	ldr	r0, [pc, #20]	; (800f4f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f4e4:	f7fe fed7 	bl	800e296 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f4e8:	4b02      	ldr	r3, [pc, #8]	; (800f4f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3708      	adds	r7, #8
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	20005cd0 	.word	0x20005cd0
 800f4f8:	0800fed0 	.word	0x0800fed0

0800f4fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	4603      	mov	r3, r0
 800f504:	6039      	str	r1, [r7, #0]
 800f506:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f508:	79fb      	ldrb	r3, [r7, #7]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d105      	bne.n	800f51a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f50e:	683a      	ldr	r2, [r7, #0]
 800f510:	4907      	ldr	r1, [pc, #28]	; (800f530 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f512:	4808      	ldr	r0, [pc, #32]	; (800f534 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f514:	f7fe febf 	bl	800e296 <USBD_GetString>
 800f518:	e004      	b.n	800f524 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f51a:	683a      	ldr	r2, [r7, #0]
 800f51c:	4904      	ldr	r1, [pc, #16]	; (800f530 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f51e:	4805      	ldr	r0, [pc, #20]	; (800f534 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f520:	f7fe feb9 	bl	800e296 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f524:	4b02      	ldr	r3, [pc, #8]	; (800f530 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f526:	4618      	mov	r0, r3
 800f528:	3708      	adds	r7, #8
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	bf00      	nop
 800f530:	20005cd0 	.word	0x20005cd0
 800f534:	0800fedc 	.word	0x0800fedc

0800f538 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f538:	b480      	push	{r7}
 800f53a:	b083      	sub	sp, #12
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	4603      	mov	r3, r0
 800f540:	6039      	str	r1, [r7, #0]
 800f542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	220c      	movs	r2, #12
 800f548:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f54a:	4b03      	ldr	r3, [pc, #12]	; (800f558 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	370c      	adds	r7, #12
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr
 800f558:	20000128 	.word	0x20000128

0800f55c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f562:	4b0f      	ldr	r3, [pc, #60]	; (800f5a0 <Get_SerialNum+0x44>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f568:	4b0e      	ldr	r3, [pc, #56]	; (800f5a4 <Get_SerialNum+0x48>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f56e:	4b0e      	ldr	r3, [pc, #56]	; (800f5a8 <Get_SerialNum+0x4c>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	4413      	add	r3, r2
 800f57a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d009      	beq.n	800f596 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f582:	2208      	movs	r2, #8
 800f584:	4909      	ldr	r1, [pc, #36]	; (800f5ac <Get_SerialNum+0x50>)
 800f586:	68f8      	ldr	r0, [r7, #12]
 800f588:	f000 f814 	bl	800f5b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f58c:	2204      	movs	r2, #4
 800f58e:	4908      	ldr	r1, [pc, #32]	; (800f5b0 <Get_SerialNum+0x54>)
 800f590:	68b8      	ldr	r0, [r7, #8]
 800f592:	f000 f80f 	bl	800f5b4 <IntToUnicode>
  }
}
 800f596:	bf00      	nop
 800f598:	3710      	adds	r7, #16
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
 800f59e:	bf00      	nop
 800f5a0:	1fff7a10 	.word	0x1fff7a10
 800f5a4:	1fff7a14 	.word	0x1fff7a14
 800f5a8:	1fff7a18 	.word	0x1fff7a18
 800f5ac:	2000013a 	.word	0x2000013a
 800f5b0:	2000014a 	.word	0x2000014a

0800f5b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b087      	sub	sp, #28
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	4613      	mov	r3, r2
 800f5c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	75fb      	strb	r3, [r7, #23]
 800f5ca:	e027      	b.n	800f61c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	0f1b      	lsrs	r3, r3, #28
 800f5d0:	2b09      	cmp	r3, #9
 800f5d2:	d80b      	bhi.n	800f5ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	0f1b      	lsrs	r3, r3, #28
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	7dfb      	ldrb	r3, [r7, #23]
 800f5dc:	005b      	lsls	r3, r3, #1
 800f5de:	4619      	mov	r1, r3
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	440b      	add	r3, r1
 800f5e4:	3230      	adds	r2, #48	; 0x30
 800f5e6:	b2d2      	uxtb	r2, r2
 800f5e8:	701a      	strb	r2, [r3, #0]
 800f5ea:	e00a      	b.n	800f602 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	0f1b      	lsrs	r3, r3, #28
 800f5f0:	b2da      	uxtb	r2, r3
 800f5f2:	7dfb      	ldrb	r3, [r7, #23]
 800f5f4:	005b      	lsls	r3, r3, #1
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	440b      	add	r3, r1
 800f5fc:	3237      	adds	r2, #55	; 0x37
 800f5fe:	b2d2      	uxtb	r2, r2
 800f600:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	011b      	lsls	r3, r3, #4
 800f606:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f608:	7dfb      	ldrb	r3, [r7, #23]
 800f60a:	005b      	lsls	r3, r3, #1
 800f60c:	3301      	adds	r3, #1
 800f60e:	68ba      	ldr	r2, [r7, #8]
 800f610:	4413      	add	r3, r2
 800f612:	2200      	movs	r2, #0
 800f614:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	3301      	adds	r3, #1
 800f61a:	75fb      	strb	r3, [r7, #23]
 800f61c:	7dfa      	ldrb	r2, [r7, #23]
 800f61e:	79fb      	ldrb	r3, [r7, #7]
 800f620:	429a      	cmp	r2, r3
 800f622:	d3d3      	bcc.n	800f5cc <IntToUnicode+0x18>
  }
}
 800f624:	bf00      	nop
 800f626:	bf00      	nop
 800f628:	371c      	adds	r7, #28
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr

0800f632 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800f632:	b480      	push	{r7}
 800f634:	b083      	sub	sp, #12
 800f636:	af00      	add	r7, sp, #0
 800f638:	4603      	mov	r3, r0
 800f63a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800f63c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800f63e:	4618      	mov	r0, r3
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800f64a:	b480      	push	{r7}
 800f64c:	b085      	sub	sp, #20
 800f64e:	af00      	add	r7, sp, #0
 800f650:	4603      	mov	r3, r0
 800f652:	60b9      	str	r1, [r7, #8]
 800f654:	607a      	str	r2, [r7, #4]
 800f656:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f65e:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f666:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800f668:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3714      	adds	r7, #20
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr

0800f676 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800f676:	b480      	push	{r7}
 800f678:	b083      	sub	sp, #12
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	4603      	mov	r3, r0
 800f67e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f680:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f682:	4618      	mov	r0, r3
 800f684:	370c      	adds	r7, #12
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800f68e:	b480      	push	{r7}
 800f690:	b083      	sub	sp, #12
 800f692:	af00      	add	r7, sp, #0
 800f694:	4603      	mov	r3, r0
 800f696:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800f698:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	370c      	adds	r7, #12
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr

0800f6a6 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800f6a6:	b480      	push	{r7}
 800f6a8:	b085      	sub	sp, #20
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	607a      	str	r2, [r7, #4]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	73fb      	strb	r3, [r7, #15]
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800f6ba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60b9      	str	r1, [r7, #8]
 800f6d0:	607a      	str	r2, [r7, #4]
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	73fb      	strb	r3, [r7, #15]
 800f6d8:	4613      	mov	r3, r2
 800f6da:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800f6dc:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3714      	adds	r7, #20
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr

0800f6ea <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800f6ea:	b480      	push	{r7}
 800f6ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800f6ee:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f8:	4770      	bx	lr
	...

0800f6fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b08a      	sub	sp, #40	; 0x28
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f704:	f107 0314 	add.w	r3, r7, #20
 800f708:	2200      	movs	r2, #0
 800f70a:	601a      	str	r2, [r3, #0]
 800f70c:	605a      	str	r2, [r3, #4]
 800f70e:	609a      	str	r2, [r3, #8]
 800f710:	60da      	str	r2, [r3, #12]
 800f712:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f71c:	d147      	bne.n	800f7ae <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f71e:	2300      	movs	r3, #0
 800f720:	613b      	str	r3, [r7, #16]
 800f722:	4b25      	ldr	r3, [pc, #148]	; (800f7b8 <HAL_PCD_MspInit+0xbc>)
 800f724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f726:	4a24      	ldr	r2, [pc, #144]	; (800f7b8 <HAL_PCD_MspInit+0xbc>)
 800f728:	f043 0301 	orr.w	r3, r3, #1
 800f72c:	6313      	str	r3, [r2, #48]	; 0x30
 800f72e:	4b22      	ldr	r3, [pc, #136]	; (800f7b8 <HAL_PCD_MspInit+0xbc>)
 800f730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f732:	f003 0301 	and.w	r3, r3, #1
 800f736:	613b      	str	r3, [r7, #16]
 800f738:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f73a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f73e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f740:	2300      	movs	r3, #0
 800f742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f744:	2300      	movs	r3, #0
 800f746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f748:	f107 0314 	add.w	r3, r7, #20
 800f74c:	4619      	mov	r1, r3
 800f74e:	481b      	ldr	r0, [pc, #108]	; (800f7bc <HAL_PCD_MspInit+0xc0>)
 800f750:	f7f4 fd62 	bl	8004218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f754:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f75a:	2302      	movs	r3, #2
 800f75c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f75e:	2300      	movs	r3, #0
 800f760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f762:	2303      	movs	r3, #3
 800f764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f766:	230a      	movs	r3, #10
 800f768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f76a:	f107 0314 	add.w	r3, r7, #20
 800f76e:	4619      	mov	r1, r3
 800f770:	4812      	ldr	r0, [pc, #72]	; (800f7bc <HAL_PCD_MspInit+0xc0>)
 800f772:	f7f4 fd51 	bl	8004218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f776:	4b10      	ldr	r3, [pc, #64]	; (800f7b8 <HAL_PCD_MspInit+0xbc>)
 800f778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f77a:	4a0f      	ldr	r2, [pc, #60]	; (800f7b8 <HAL_PCD_MspInit+0xbc>)
 800f77c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f780:	6353      	str	r3, [r2, #52]	; 0x34
 800f782:	2300      	movs	r3, #0
 800f784:	60fb      	str	r3, [r7, #12]
 800f786:	4b0c      	ldr	r3, [pc, #48]	; (800f7b8 <HAL_PCD_MspInit+0xbc>)
 800f788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f78a:	4a0b      	ldr	r2, [pc, #44]	; (800f7b8 <HAL_PCD_MspInit+0xbc>)
 800f78c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f790:	6453      	str	r3, [r2, #68]	; 0x44
 800f792:	4b09      	ldr	r3, [pc, #36]	; (800f7b8 <HAL_PCD_MspInit+0xbc>)
 800f794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f79a:	60fb      	str	r3, [r7, #12]
 800f79c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f79e:	2200      	movs	r2, #0
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	2043      	movs	r0, #67	; 0x43
 800f7a4:	f7f4 f963 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f7a8:	2043      	movs	r0, #67	; 0x43
 800f7aa:	f7f4 f97c 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f7ae:	bf00      	nop
 800f7b0:	3728      	adds	r7, #40	; 0x28
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	40023800 	.word	0x40023800
 800f7bc:	40020000 	.word	0x40020000

0800f7c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	4610      	mov	r0, r2
 800f7d8:	f7fd fd4d 	bl	800d276 <USBD_LL_SetupStage>
}
 800f7dc:	bf00      	nop
 800f7de:	3708      	adds	r7, #8
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f7f6:	78fa      	ldrb	r2, [r7, #3]
 800f7f8:	6879      	ldr	r1, [r7, #4]
 800f7fa:	4613      	mov	r3, r2
 800f7fc:	00db      	lsls	r3, r3, #3
 800f7fe:	1a9b      	subs	r3, r3, r2
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	440b      	add	r3, r1
 800f804:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f808:	681a      	ldr	r2, [r3, #0]
 800f80a:	78fb      	ldrb	r3, [r7, #3]
 800f80c:	4619      	mov	r1, r3
 800f80e:	f7fd fd87 	bl	800d320 <USBD_LL_DataOutStage>
}
 800f812:	bf00      	nop
 800f814:	3708      	adds	r7, #8
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f81a:	b580      	push	{r7, lr}
 800f81c:	b082      	sub	sp, #8
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]
 800f822:	460b      	mov	r3, r1
 800f824:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f82c:	78fa      	ldrb	r2, [r7, #3]
 800f82e:	6879      	ldr	r1, [r7, #4]
 800f830:	4613      	mov	r3, r2
 800f832:	00db      	lsls	r3, r3, #3
 800f834:	1a9b      	subs	r3, r3, r2
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	440b      	add	r3, r1
 800f83a:	3348      	adds	r3, #72	; 0x48
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	78fb      	ldrb	r3, [r7, #3]
 800f840:	4619      	mov	r1, r3
 800f842:	f7fd fdd0 	bl	800d3e6 <USBD_LL_DataInStage>
}
 800f846:	bf00      	nop
 800f848:	3708      	adds	r7, #8
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}

0800f84e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f84e:	b580      	push	{r7, lr}
 800f850:	b082      	sub	sp, #8
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fd fee4 	bl	800d62a <USBD_LL_SOF>
}
 800f862:	bf00      	nop
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b084      	sub	sp, #16
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f872:	2301      	movs	r3, #1
 800f874:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d102      	bne.n	800f884 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f87e:	2300      	movs	r3, #0
 800f880:	73fb      	strb	r3, [r7, #15]
 800f882:	e008      	b.n	800f896 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	2b02      	cmp	r3, #2
 800f88a:	d102      	bne.n	800f892 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f88c:	2301      	movs	r3, #1
 800f88e:	73fb      	strb	r3, [r7, #15]
 800f890:	e001      	b.n	800f896 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f892:	f7f2 f88b 	bl	80019ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f89c:	7bfa      	ldrb	r2, [r7, #15]
 800f89e:	4611      	mov	r1, r2
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fd fe84 	bl	800d5ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7fd fe30 	bl	800d512 <USBD_LL_Reset>
}
 800f8b2:	bf00      	nop
 800f8b4:	3710      	adds	r7, #16
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
	...

0800f8bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7fd fe7f 	bl	800d5ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	687a      	ldr	r2, [r7, #4]
 800f8dc:	6812      	ldr	r2, [r2, #0]
 800f8de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f8e2:	f043 0301 	orr.w	r3, r3, #1
 800f8e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6a1b      	ldr	r3, [r3, #32]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d005      	beq.n	800f8fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f8f0:	4b04      	ldr	r3, [pc, #16]	; (800f904 <HAL_PCD_SuspendCallback+0x48>)
 800f8f2:	691b      	ldr	r3, [r3, #16]
 800f8f4:	4a03      	ldr	r2, [pc, #12]	; (800f904 <HAL_PCD_SuspendCallback+0x48>)
 800f8f6:	f043 0306 	orr.w	r3, r3, #6
 800f8fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f8fc:	bf00      	nop
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	e000ed00 	.word	0xe000ed00

0800f908 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f916:	4618      	mov	r0, r3
 800f918:	f7fd fe6f 	bl	800d5fa <USBD_LL_Resume>
}
 800f91c:	bf00      	nop
 800f91e:	3708      	adds	r7, #8
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	460b      	mov	r3, r1
 800f92e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f936:	78fa      	ldrb	r2, [r7, #3]
 800f938:	4611      	mov	r1, r2
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fd febd 	bl	800d6ba <USBD_LL_IsoOUTIncomplete>
}
 800f940:	bf00      	nop
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	460b      	mov	r3, r1
 800f952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f95a:	78fa      	ldrb	r2, [r7, #3]
 800f95c:	4611      	mov	r1, r2
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fd fe85 	bl	800d66e <USBD_LL_IsoINIncomplete>
}
 800f964:	bf00      	nop
 800f966:	3708      	adds	r7, #8
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}

0800f96c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b082      	sub	sp, #8
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7fd fec3 	bl	800d706 <USBD_LL_DevConnected>
}
 800f980:	bf00      	nop
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f996:	4618      	mov	r0, r3
 800f998:	f7fd fec0 	bl	800d71c <USBD_LL_DevDisconnected>
}
 800f99c:	bf00      	nop
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d13c      	bne.n	800fa2e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f9b4:	4a20      	ldr	r2, [pc, #128]	; (800fa38 <USBD_LL_Init+0x94>)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	4a1e      	ldr	r2, [pc, #120]	; (800fa38 <USBD_LL_Init+0x94>)
 800f9c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f9c4:	4b1c      	ldr	r3, [pc, #112]	; (800fa38 <USBD_LL_Init+0x94>)
 800f9c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f9ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f9cc:	4b1a      	ldr	r3, [pc, #104]	; (800fa38 <USBD_LL_Init+0x94>)
 800f9ce:	2206      	movs	r2, #6
 800f9d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f9d2:	4b19      	ldr	r3, [pc, #100]	; (800fa38 <USBD_LL_Init+0x94>)
 800f9d4:	2202      	movs	r2, #2
 800f9d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f9d8:	4b17      	ldr	r3, [pc, #92]	; (800fa38 <USBD_LL_Init+0x94>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f9de:	4b16      	ldr	r3, [pc, #88]	; (800fa38 <USBD_LL_Init+0x94>)
 800f9e0:	2202      	movs	r2, #2
 800f9e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f9e4:	4b14      	ldr	r3, [pc, #80]	; (800fa38 <USBD_LL_Init+0x94>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f9ea:	4b13      	ldr	r3, [pc, #76]	; (800fa38 <USBD_LL_Init+0x94>)
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f9f0:	4b11      	ldr	r3, [pc, #68]	; (800fa38 <USBD_LL_Init+0x94>)
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800f9f6:	4b10      	ldr	r3, [pc, #64]	; (800fa38 <USBD_LL_Init+0x94>)
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f9fc:	4b0e      	ldr	r3, [pc, #56]	; (800fa38 <USBD_LL_Init+0x94>)
 800f9fe:	2200      	movs	r2, #0
 800fa00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fa02:	480d      	ldr	r0, [pc, #52]	; (800fa38 <USBD_LL_Init+0x94>)
 800fa04:	f7f4 ff6c 	bl	80048e0 <HAL_PCD_Init>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d001      	beq.n	800fa12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fa0e:	f7f1 ffcd 	bl	80019ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fa12:	2180      	movs	r1, #128	; 0x80
 800fa14:	4808      	ldr	r0, [pc, #32]	; (800fa38 <USBD_LL_Init+0x94>)
 800fa16:	f7f6 f92a 	bl	8005c6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fa1a:	2240      	movs	r2, #64	; 0x40
 800fa1c:	2100      	movs	r1, #0
 800fa1e:	4806      	ldr	r0, [pc, #24]	; (800fa38 <USBD_LL_Init+0x94>)
 800fa20:	f7f6 f8de 	bl	8005be0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fa24:	2280      	movs	r2, #128	; 0x80
 800fa26:	2101      	movs	r1, #1
 800fa28:	4803      	ldr	r0, [pc, #12]	; (800fa38 <USBD_LL_Init+0x94>)
 800fa2a:	f7f6 f8d9 	bl	8005be0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fa2e:	2300      	movs	r3, #0
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3708      	adds	r7, #8
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	20005ed0 	.word	0x20005ed0

0800fa3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa44:	2300      	movs	r3, #0
 800fa46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7f5 f868 	bl	8004b28 <HAL_PCD_Start>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa5c:	7bfb      	ldrb	r3, [r7, #15]
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f000 f9b0 	bl	800fdc4 <USBD_Get_USB_Status>
 800fa64:	4603      	mov	r3, r0
 800fa66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa68:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b084      	sub	sp, #16
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
 800fa7a:	4608      	mov	r0, r1
 800fa7c:	4611      	mov	r1, r2
 800fa7e:	461a      	mov	r2, r3
 800fa80:	4603      	mov	r3, r0
 800fa82:	70fb      	strb	r3, [r7, #3]
 800fa84:	460b      	mov	r3, r1
 800fa86:	70bb      	strb	r3, [r7, #2]
 800fa88:	4613      	mov	r3, r2
 800fa8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa90:	2300      	movs	r3, #0
 800fa92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fa9a:	78bb      	ldrb	r3, [r7, #2]
 800fa9c:	883a      	ldrh	r2, [r7, #0]
 800fa9e:	78f9      	ldrb	r1, [r7, #3]
 800faa0:	f7f5 fc79 	bl	8005396 <HAL_PCD_EP_Open>
 800faa4:	4603      	mov	r3, r0
 800faa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800faa8:	7bfb      	ldrb	r3, [r7, #15]
 800faaa:	4618      	mov	r0, r3
 800faac:	f000 f98a 	bl	800fdc4 <USBD_Get_USB_Status>
 800fab0:	4603      	mov	r3, r0
 800fab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fab4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b084      	sub	sp, #16
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
 800fac6:	460b      	mov	r3, r1
 800fac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faca:	2300      	movs	r3, #0
 800facc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800face:	2300      	movs	r3, #0
 800fad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fad8:	78fa      	ldrb	r2, [r7, #3]
 800fada:	4611      	mov	r1, r2
 800fadc:	4618      	mov	r0, r3
 800fade:	f7f5 fcc2 	bl	8005466 <HAL_PCD_EP_Close>
 800fae2:	4603      	mov	r3, r0
 800fae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fae6:	7bfb      	ldrb	r3, [r7, #15]
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 f96b 	bl	800fdc4 <USBD_Get_USB_Status>
 800faee:	4603      	mov	r3, r0
 800faf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3710      	adds	r7, #16
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	460b      	mov	r3, r1
 800fb06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb16:	78fa      	ldrb	r2, [r7, #3]
 800fb18:	4611      	mov	r1, r2
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7f5 fe54 	bl	80057c8 <HAL_PCD_EP_Flush>
 800fb20:	4603      	mov	r3, r0
 800fb22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb24:	7bfb      	ldrb	r3, [r7, #15]
 800fb26:	4618      	mov	r0, r3
 800fb28:	f000 f94c 	bl	800fdc4 <USBD_Get_USB_Status>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb30:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3710      	adds	r7, #16
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}

0800fb3a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb3a:	b580      	push	{r7, lr}
 800fb3c:	b084      	sub	sp, #16
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	6078      	str	r0, [r7, #4]
 800fb42:	460b      	mov	r3, r1
 800fb44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb46:	2300      	movs	r3, #0
 800fb48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb54:	78fa      	ldrb	r2, [r7, #3]
 800fb56:	4611      	mov	r1, r2
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7f5 fd7b 	bl	8005654 <HAL_PCD_EP_SetStall>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb62:	7bfb      	ldrb	r3, [r7, #15]
 800fb64:	4618      	mov	r0, r3
 800fb66:	f000 f92d 	bl	800fdc4 <USBD_Get_USB_Status>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	460b      	mov	r3, r1
 800fb82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb84:	2300      	movs	r3, #0
 800fb86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb92:	78fa      	ldrb	r2, [r7, #3]
 800fb94:	4611      	mov	r1, r2
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7f5 fdc0 	bl	800571c <HAL_PCD_EP_ClrStall>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fba0:	7bfb      	ldrb	r3, [r7, #15]
 800fba2:	4618      	mov	r0, r3
 800fba4:	f000 f90e 	bl	800fdc4 <USBD_Get_USB_Status>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbac:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}

0800fbb6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbb6:	b480      	push	{r7}
 800fbb8:	b085      	sub	sp, #20
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
 800fbbe:	460b      	mov	r3, r1
 800fbc0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fbc8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fbca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	da0b      	bge.n	800fbea <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fbd2:	78fb      	ldrb	r3, [r7, #3]
 800fbd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbd8:	68f9      	ldr	r1, [r7, #12]
 800fbda:	4613      	mov	r3, r2
 800fbdc:	00db      	lsls	r3, r3, #3
 800fbde:	1a9b      	subs	r3, r3, r2
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	440b      	add	r3, r1
 800fbe4:	333e      	adds	r3, #62	; 0x3e
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	e00b      	b.n	800fc02 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fbea:	78fb      	ldrb	r3, [r7, #3]
 800fbec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbf0:	68f9      	ldr	r1, [r7, #12]
 800fbf2:	4613      	mov	r3, r2
 800fbf4:	00db      	lsls	r3, r3, #3
 800fbf6:	1a9b      	subs	r3, r3, r2
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	440b      	add	r3, r1
 800fbfc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc00:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3714      	adds	r7, #20
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr

0800fc0e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fc0e:	b580      	push	{r7, lr}
 800fc10:	b084      	sub	sp, #16
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	6078      	str	r0, [r7, #4]
 800fc16:	460b      	mov	r3, r1
 800fc18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc28:	78fa      	ldrb	r2, [r7, #3]
 800fc2a:	4611      	mov	r1, r2
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7f5 fb8d 	bl	800534c <HAL_PCD_SetAddress>
 800fc32:	4603      	mov	r3, r0
 800fc34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc36:	7bfb      	ldrb	r3, [r7, #15]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f000 f8c3 	bl	800fdc4 <USBD_Get_USB_Status>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc42:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3710      	adds	r7, #16
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b086      	sub	sp, #24
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	607a      	str	r2, [r7, #4]
 800fc56:	603b      	str	r3, [r7, #0]
 800fc58:	460b      	mov	r3, r1
 800fc5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc60:	2300      	movs	r3, #0
 800fc62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc6a:	7af9      	ldrb	r1, [r7, #11]
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	f7f5 fca6 	bl	80055c0 <HAL_PCD_EP_Transmit>
 800fc74:	4603      	mov	r3, r0
 800fc76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc78:	7dfb      	ldrb	r3, [r7, #23]
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f000 f8a2 	bl	800fdc4 <USBD_Get_USB_Status>
 800fc80:	4603      	mov	r3, r0
 800fc82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc84:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3718      	adds	r7, #24
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b086      	sub	sp, #24
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	60f8      	str	r0, [r7, #12]
 800fc96:	607a      	str	r2, [r7, #4]
 800fc98:	603b      	str	r3, [r7, #0]
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fca2:	2300      	movs	r3, #0
 800fca4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fcac:	7af9      	ldrb	r1, [r7, #11]
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	f7f5 fc22 	bl	80054fa <HAL_PCD_EP_Receive>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcba:	7dfb      	ldrb	r3, [r7, #23]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f000 f881 	bl	800fdc4 <USBD_Get_USB_Status>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fcc6:	7dbb      	ldrb	r3, [r7, #22]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3718      	adds	r7, #24
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	460b      	mov	r3, r1
 800fcda:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fce2:	78fa      	ldrb	r2, [r7, #3]
 800fce4:	4611      	mov	r1, r2
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7f5 fc52 	bl	8005590 <HAL_PCD_EP_GetRxCount>
 800fcec:	4603      	mov	r3, r0
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3708      	adds	r7, #8
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
	...

0800fcf8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	460b      	mov	r3, r1
 800fd02:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800fd04:	78fb      	ldrb	r3, [r7, #3]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d002      	beq.n	800fd10 <HAL_PCDEx_LPM_Callback+0x18>
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d01f      	beq.n	800fd4e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800fd0e:	e03b      	b.n	800fd88 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6a1b      	ldr	r3, [r3, #32]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d007      	beq.n	800fd28 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800fd18:	f7f1 fa6c 	bl	80011f4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd1c:	4b1c      	ldr	r3, [pc, #112]	; (800fd90 <HAL_PCDEx_LPM_Callback+0x98>)
 800fd1e:	691b      	ldr	r3, [r3, #16]
 800fd20:	4a1b      	ldr	r2, [pc, #108]	; (800fd90 <HAL_PCDEx_LPM_Callback+0x98>)
 800fd22:	f023 0306 	bic.w	r3, r3, #6
 800fd26:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	6812      	ldr	r2, [r2, #0]
 800fd36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fd3a:	f023 0301 	bic.w	r3, r3, #1
 800fd3e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fd fc57 	bl	800d5fa <USBD_LL_Resume>
    break;
 800fd4c:	e01c      	b.n	800fd88 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	687a      	ldr	r2, [r7, #4]
 800fd5a:	6812      	ldr	r2, [r2, #0]
 800fd5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fd60:	f043 0301 	orr.w	r3, r3, #1
 800fd64:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7fd fc2e 	bl	800d5ce <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6a1b      	ldr	r3, [r3, #32]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d005      	beq.n	800fd86 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd7a:	4b05      	ldr	r3, [pc, #20]	; (800fd90 <HAL_PCDEx_LPM_Callback+0x98>)
 800fd7c:	691b      	ldr	r3, [r3, #16]
 800fd7e:	4a04      	ldr	r2, [pc, #16]	; (800fd90 <HAL_PCDEx_LPM_Callback+0x98>)
 800fd80:	f043 0306 	orr.w	r3, r3, #6
 800fd84:	6113      	str	r3, [r2, #16]
    break;
 800fd86:	bf00      	nop
}
 800fd88:	bf00      	nop
 800fd8a:	3708      	adds	r7, #8
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	e000ed00 	.word	0xe000ed00

0800fd94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b083      	sub	sp, #12
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fd9c:	4b03      	ldr	r3, [pc, #12]	; (800fdac <USBD_static_malloc+0x18>)
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	370c      	adds	r7, #12
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	200001a8 	.word	0x200001a8

0800fdb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b083      	sub	sp, #12
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]

}
 800fdb8:	bf00      	nop
 800fdba:	370c      	adds	r7, #12
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc2:	4770      	bx	lr

0800fdc4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b085      	sub	sp, #20
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	4603      	mov	r3, r0
 800fdcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fdd2:	79fb      	ldrb	r3, [r7, #7]
 800fdd4:	2b03      	cmp	r3, #3
 800fdd6:	d817      	bhi.n	800fe08 <USBD_Get_USB_Status+0x44>
 800fdd8:	a201      	add	r2, pc, #4	; (adr r2, 800fde0 <USBD_Get_USB_Status+0x1c>)
 800fdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdde:	bf00      	nop
 800fde0:	0800fdf1 	.word	0x0800fdf1
 800fde4:	0800fdf7 	.word	0x0800fdf7
 800fde8:	0800fdfd 	.word	0x0800fdfd
 800fdec:	0800fe03 	.word	0x0800fe03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	73fb      	strb	r3, [r7, #15]
    break;
 800fdf4:	e00b      	b.n	800fe0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fdf6:	2303      	movs	r3, #3
 800fdf8:	73fb      	strb	r3, [r7, #15]
    break;
 800fdfa:	e008      	b.n	800fe0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	73fb      	strb	r3, [r7, #15]
    break;
 800fe00:	e005      	b.n	800fe0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe02:	2303      	movs	r3, #3
 800fe04:	73fb      	strb	r3, [r7, #15]
    break;
 800fe06:	e002      	b.n	800fe0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fe08:	2303      	movs	r3, #3
 800fe0a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe0c:	bf00      	nop
  }
  return usb_status;
 800fe0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3714      	adds	r7, #20
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr

0800fe1c <__libc_init_array>:
 800fe1c:	b570      	push	{r4, r5, r6, lr}
 800fe1e:	4d0d      	ldr	r5, [pc, #52]	; (800fe54 <__libc_init_array+0x38>)
 800fe20:	4c0d      	ldr	r4, [pc, #52]	; (800fe58 <__libc_init_array+0x3c>)
 800fe22:	1b64      	subs	r4, r4, r5
 800fe24:	10a4      	asrs	r4, r4, #2
 800fe26:	2600      	movs	r6, #0
 800fe28:	42a6      	cmp	r6, r4
 800fe2a:	d109      	bne.n	800fe40 <__libc_init_array+0x24>
 800fe2c:	4d0b      	ldr	r5, [pc, #44]	; (800fe5c <__libc_init_array+0x40>)
 800fe2e:	4c0c      	ldr	r4, [pc, #48]	; (800fe60 <__libc_init_array+0x44>)
 800fe30:	f000 f82e 	bl	800fe90 <_init>
 800fe34:	1b64      	subs	r4, r4, r5
 800fe36:	10a4      	asrs	r4, r4, #2
 800fe38:	2600      	movs	r6, #0
 800fe3a:	42a6      	cmp	r6, r4
 800fe3c:	d105      	bne.n	800fe4a <__libc_init_array+0x2e>
 800fe3e:	bd70      	pop	{r4, r5, r6, pc}
 800fe40:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe44:	4798      	blx	r3
 800fe46:	3601      	adds	r6, #1
 800fe48:	e7ee      	b.n	800fe28 <__libc_init_array+0xc>
 800fe4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe4e:	4798      	blx	r3
 800fe50:	3601      	adds	r6, #1
 800fe52:	e7f2      	b.n	800fe3a <__libc_init_array+0x1e>
 800fe54:	0800ff4c 	.word	0x0800ff4c
 800fe58:	0800ff4c 	.word	0x0800ff4c
 800fe5c:	0800ff4c 	.word	0x0800ff4c
 800fe60:	0800ff50 	.word	0x0800ff50

0800fe64 <memcpy>:
 800fe64:	440a      	add	r2, r1
 800fe66:	4291      	cmp	r1, r2
 800fe68:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe6c:	d100      	bne.n	800fe70 <memcpy+0xc>
 800fe6e:	4770      	bx	lr
 800fe70:	b510      	push	{r4, lr}
 800fe72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe7a:	4291      	cmp	r1, r2
 800fe7c:	d1f9      	bne.n	800fe72 <memcpy+0xe>
 800fe7e:	bd10      	pop	{r4, pc}

0800fe80 <memset>:
 800fe80:	4402      	add	r2, r0
 800fe82:	4603      	mov	r3, r0
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d100      	bne.n	800fe8a <memset+0xa>
 800fe88:	4770      	bx	lr
 800fe8a:	f803 1b01 	strb.w	r1, [r3], #1
 800fe8e:	e7f9      	b.n	800fe84 <memset+0x4>

0800fe90 <_init>:
 800fe90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe92:	bf00      	nop
 800fe94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe96:	bc08      	pop	{r3}
 800fe98:	469e      	mov	lr, r3
 800fe9a:	4770      	bx	lr

0800fe9c <_fini>:
 800fe9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe9e:	bf00      	nop
 800fea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fea2:	bc08      	pop	{r3}
 800fea4:	469e      	mov	lr, r3
 800fea6:	4770      	bx	lr
