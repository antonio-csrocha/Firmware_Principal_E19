
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000182f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  080184c4  080184c4  000284c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018a50  08018a50  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08018a50  08018a50  00028a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018a58  08018a58  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018a58  08018a58  00028a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018a5c  08018a5c  00028a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08018a60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000560c  200001d8  08018c38  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  200057e4  08018c38  000357e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041694  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075d7  00000000  00000000  0007189c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002368  00000000  00000000  00078e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002060  00000000  00000000  0007b1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb0d  00000000  00000000  0007d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035dde  00000000  00000000  000abd4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f39ae  00000000  00000000  000e1b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d54d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009698  00000000  00000000  001d552c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080184ac 	.word	0x080184ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080184ac 	.word	0x080184ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <FT_CAN_FilterConfig>:
 */

#include "ft_can.h"

HAL_StatusTypeDef FT_CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint16_t FT_Product, uint8_t filter_bank_position, uint32_t Filter_FIFO)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b090      	sub	sp, #64	; 0x40
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	817b      	strh	r3, [r7, #10]
 80005b6:	4613      	mov	r3, r2
 80005b8:	727b      	strb	r3, [r7, #9]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = FT_Product << 13, mask_id = 0x1FF80000;
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	035b      	lsls	r3, r3, #13
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <FT_CAN_FilterConfig+0x68>)
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterBank = filter_bank_position;
 80005c4:	7a7b      	ldrb	r3, [r7, #9]
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80005d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d2:	0b5b      	lsrs	r3, r3, #13
 80005d4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80005d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	b29b      	uxth	r3, r3
 80005dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80005de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e0:	0b5b      	lsrs	r3, r3, #13
 80005e2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80005e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = Filter_FIFO;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.SlaveStartFilterBank = 14 + filter_bank_position;
 80005f4:	7a7b      	ldrb	r3, [r7, #9]
 80005f6:	330e      	adds	r3, #14
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f006 ffc9 	bl	8007598 <HAL_CAN_ConfigFilter>
 8000606:	4603      	mov	r3, r0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3740      	adds	r7, #64	; 0x40
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	1ff80000 	.word	0x1ff80000

08000614 <FT_CAN_ProcessData>:

#ifndef FT_CAN_SIMPLE

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000622:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800062a:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	f040 823a 	bne.w	8000aac <FT_CAN_ProcessData+0x498>
	{
		return;
	}

	switch(id >> 1)
 8000638:	89fb      	ldrh	r3, [r7, #14]
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	2b8d      	cmp	r3, #141	; 0x8d
 8000640:	f300 8166 	bgt.w	8000910 <FT_CAN_ProcessData+0x2fc>
 8000644:	2b00      	cmp	r3, #0
 8000646:	dc41      	bgt.n	80006cc <FT_CAN_ProcessData+0xb8>
 8000648:	e229      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
 800064a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800064e:	2b1b      	cmp	r3, #27
 8000650:	f200 8225 	bhi.w	8000a9e <FT_CAN_ProcessData+0x48a>
 8000654:	a201      	add	r2, pc, #4	; (adr r2, 800065c <FT_CAN_ProcessData+0x48>)
 8000656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065a:	bf00      	nop
 800065c:	08000a63 	.word	0x08000a63
 8000660:	08000a9f 	.word	0x08000a9f
 8000664:	08000a9f 	.word	0x08000a9f
 8000668:	08000a9f 	.word	0x08000a9f
 800066c:	08000a9f 	.word	0x08000a9f
 8000670:	08000a9f 	.word	0x08000a9f
 8000674:	08000a9f 	.word	0x08000a9f
 8000678:	08000a9f 	.word	0x08000a9f
 800067c:	08000a9f 	.word	0x08000a9f
 8000680:	08000a9f 	.word	0x08000a9f
 8000684:	08000a9f 	.word	0x08000a9f
 8000688:	08000a9f 	.word	0x08000a9f
 800068c:	08000a9f 	.word	0x08000a9f
 8000690:	08000a9f 	.word	0x08000a9f
 8000694:	08000a9f 	.word	0x08000a9f
 8000698:	08000a9f 	.word	0x08000a9f
 800069c:	08000a9f 	.word	0x08000a9f
 80006a0:	08000a9f 	.word	0x08000a9f
 80006a4:	08000a6d 	.word	0x08000a6d
 80006a8:	08000a9f 	.word	0x08000a9f
 80006ac:	08000a9f 	.word	0x08000a9f
 80006b0:	08000a9f 	.word	0x08000a9f
 80006b4:	08000a9f 	.word	0x08000a9f
 80006b8:	08000a9f 	.word	0x08000a9f
 80006bc:	08000a77 	.word	0x08000a77
 80006c0:	08000a81 	.word	0x08000a81
 80006c4:	08000a8b 	.word	0x08000a8b
 80006c8:	08000a95 	.word	0x08000a95
 80006cc:	3b01      	subs	r3, #1
 80006ce:	2b8c      	cmp	r3, #140	; 0x8c
 80006d0:	f200 81e5 	bhi.w	8000a9e <FT_CAN_ProcessData+0x48a>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <FT_CAN_ProcessData+0xc8>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	08000923 	.word	0x08000923
 80006e0:	0800092f 	.word	0x0800092f
 80006e4:	08000939 	.word	0x08000939
 80006e8:	08000943 	.word	0x08000943
 80006ec:	0800094d 	.word	0x0800094d
 80006f0:	08000959 	.word	0x08000959
 80006f4:	08000963 	.word	0x08000963
 80006f8:	080009a5 	.word	0x080009a5
 80006fc:	080009af 	.word	0x080009af
 8000700:	080009b9 	.word	0x080009b9
 8000704:	080009c3 	.word	0x080009c3
 8000708:	080009cd 	.word	0x080009cd
 800070c:	080009d7 	.word	0x080009d7
 8000710:	080009e1 	.word	0x080009e1
 8000714:	080009eb 	.word	0x080009eb
 8000718:	080009f5 	.word	0x080009f5
 800071c:	0800096d 	.word	0x0800096d
 8000720:	08000a9f 	.word	0x08000a9f
 8000724:	08000a9f 	.word	0x08000a9f
 8000728:	08000a9f 	.word	0x08000a9f
 800072c:	08000a9f 	.word	0x08000a9f
 8000730:	08000a9f 	.word	0x08000a9f
 8000734:	08000a9f 	.word	0x08000a9f
 8000738:	08000a9f 	.word	0x08000a9f
 800073c:	08000a9f 	.word	0x08000a9f
 8000740:	08000a9f 	.word	0x08000a9f
 8000744:	08000a9f 	.word	0x08000a9f
 8000748:	08000a9f 	.word	0x08000a9f
 800074c:	08000a9f 	.word	0x08000a9f
 8000750:	08000a9f 	.word	0x08000a9f
 8000754:	08000a9f 	.word	0x08000a9f
 8000758:	08000a9f 	.word	0x08000a9f
 800075c:	08000a9f 	.word	0x08000a9f
 8000760:	08000a9f 	.word	0x08000a9f
 8000764:	08000a9f 	.word	0x08000a9f
 8000768:	08000a9f 	.word	0x08000a9f
 800076c:	08000a9f 	.word	0x08000a9f
 8000770:	08000a9f 	.word	0x08000a9f
 8000774:	08000977 	.word	0x08000977
 8000778:	08000a9f 	.word	0x08000a9f
 800077c:	08000a9f 	.word	0x08000a9f
 8000780:	08000a9f 	.word	0x08000a9f
 8000784:	08000a9f 	.word	0x08000a9f
 8000788:	08000a9f 	.word	0x08000a9f
 800078c:	08000a9f 	.word	0x08000a9f
 8000790:	08000a9f 	.word	0x08000a9f
 8000794:	08000a9f 	.word	0x08000a9f
 8000798:	08000a9f 	.word	0x08000a9f
 800079c:	08000a9f 	.word	0x08000a9f
 80007a0:	08000a9f 	.word	0x08000a9f
 80007a4:	08000a9f 	.word	0x08000a9f
 80007a8:	08000a9f 	.word	0x08000a9f
 80007ac:	08000a9f 	.word	0x08000a9f
 80007b0:	08000a9f 	.word	0x08000a9f
 80007b4:	08000a9f 	.word	0x08000a9f
 80007b8:	08000a9f 	.word	0x08000a9f
 80007bc:	08000a9f 	.word	0x08000a9f
 80007c0:	08000a9f 	.word	0x08000a9f
 80007c4:	08000a9f 	.word	0x08000a9f
 80007c8:	08000a9f 	.word	0x08000a9f
 80007cc:	08000a9f 	.word	0x08000a9f
 80007d0:	08000a9f 	.word	0x08000a9f
 80007d4:	08000a9f 	.word	0x08000a9f
 80007d8:	08000a9f 	.word	0x08000a9f
 80007dc:	08000a9f 	.word	0x08000a9f
 80007e0:	08000981 	.word	0x08000981
 80007e4:	08000a9f 	.word	0x08000a9f
 80007e8:	08000a9f 	.word	0x08000a9f
 80007ec:	08000a9f 	.word	0x08000a9f
 80007f0:	08000a9f 	.word	0x08000a9f
 80007f4:	08000a9f 	.word	0x08000a9f
 80007f8:	080009ff 	.word	0x080009ff
 80007fc:	08000a09 	.word	0x08000a09
 8000800:	08000a13 	.word	0x08000a13
 8000804:	08000a1d 	.word	0x08000a1d
 8000808:	08000a27 	.word	0x08000a27
 800080c:	08000a31 	.word	0x08000a31
 8000810:	08000a3b 	.word	0x08000a3b
 8000814:	08000a45 	.word	0x08000a45
 8000818:	08000a4f 	.word	0x08000a4f
 800081c:	08000a59 	.word	0x08000a59
 8000820:	08000a9f 	.word	0x08000a9f
 8000824:	08000a9f 	.word	0x08000a9f
 8000828:	08000a9f 	.word	0x08000a9f
 800082c:	08000a9f 	.word	0x08000a9f
 8000830:	08000a9f 	.word	0x08000a9f
 8000834:	08000a9f 	.word	0x08000a9f
 8000838:	08000a9f 	.word	0x08000a9f
 800083c:	08000a9f 	.word	0x08000a9f
 8000840:	08000a9f 	.word	0x08000a9f
 8000844:	08000a9f 	.word	0x08000a9f
 8000848:	08000a9f 	.word	0x08000a9f
 800084c:	08000a9f 	.word	0x08000a9f
 8000850:	08000a9f 	.word	0x08000a9f
 8000854:	08000a9f 	.word	0x08000a9f
 8000858:	08000a9f 	.word	0x08000a9f
 800085c:	08000a9f 	.word	0x08000a9f
 8000860:	08000a9f 	.word	0x08000a9f
 8000864:	08000a9f 	.word	0x08000a9f
 8000868:	08000a9f 	.word	0x08000a9f
 800086c:	08000a9f 	.word	0x08000a9f
 8000870:	08000a9f 	.word	0x08000a9f
 8000874:	08000a9f 	.word	0x08000a9f
 8000878:	08000a9f 	.word	0x08000a9f
 800087c:	08000a9f 	.word	0x08000a9f
 8000880:	08000a9f 	.word	0x08000a9f
 8000884:	08000a9f 	.word	0x08000a9f
 8000888:	08000a9f 	.word	0x08000a9f
 800088c:	08000a9f 	.word	0x08000a9f
 8000890:	08000a9f 	.word	0x08000a9f
 8000894:	08000a9f 	.word	0x08000a9f
 8000898:	08000a9f 	.word	0x08000a9f
 800089c:	08000a9f 	.word	0x08000a9f
 80008a0:	08000a9f 	.word	0x08000a9f
 80008a4:	08000a9f 	.word	0x08000a9f
 80008a8:	08000a9f 	.word	0x08000a9f
 80008ac:	08000a9f 	.word	0x08000a9f
 80008b0:	08000a9f 	.word	0x08000a9f
 80008b4:	08000a9f 	.word	0x08000a9f
 80008b8:	08000a9f 	.word	0x08000a9f
 80008bc:	08000a9f 	.word	0x08000a9f
 80008c0:	08000a9f 	.word	0x08000a9f
 80008c4:	08000a9f 	.word	0x08000a9f
 80008c8:	08000a9f 	.word	0x08000a9f
 80008cc:	08000a9f 	.word	0x08000a9f
 80008d0:	08000a9f 	.word	0x08000a9f
 80008d4:	08000a9f 	.word	0x08000a9f
 80008d8:	08000a9f 	.word	0x08000a9f
 80008dc:	08000a9f 	.word	0x08000a9f
 80008e0:	08000a9f 	.word	0x08000a9f
 80008e4:	08000a9f 	.word	0x08000a9f
 80008e8:	08000a9f 	.word	0x08000a9f
 80008ec:	08000a9f 	.word	0x08000a9f
 80008f0:	08000a9f 	.word	0x08000a9f
 80008f4:	08000a9f 	.word	0x08000a9f
 80008f8:	08000a9f 	.word	0x08000a9f
 80008fc:	08000a9f 	.word	0x08000a9f
 8000900:	08000a9f 	.word	0x08000a9f
 8000904:	08000a9f 	.word	0x08000a9f
 8000908:	0800098d 	.word	0x0800098d
 800090c:	08000999 	.word	0x08000999
 8000910:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000914:	f280 80c3 	bge.w	8000a9e <FT_CAN_ProcessData+0x48a>
 8000918:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800091c:	f6bf ae95 	bge.w	800064a <FT_CAN_ProcessData+0x36>
 8000920:	e0bd      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 8000922:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 800092c:	e0b7      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 800092e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 8000936:	e0b2      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 8000938:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8000940:	e0ad      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 8000942:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 800094a:	e0a8      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 800094c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 8000956:	e0a2      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8000958:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8000960:	e09d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 8000962:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 800096a:	e098      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 800096c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8000974:	e093      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 8000976:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800097e:	e08e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 8000980:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 800098a:	e088      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 800098c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 8000996:	e082      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 8000998:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			break;
 80009a2:	e07c      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 80009a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	831a      	strh	r2, [r3, #24]
			break;
 80009ac:	e077      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 80009ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	805a      	strh	r2, [r3, #2]
			break;
 80009b6:	e072      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 80009b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 80009c0:	e06d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 80009c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	841a      	strh	r2, [r3, #32]
			break;
 80009ca:	e068      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 80009cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 80009d4:	e063      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 80009d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 80009de:	e05e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 80009e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 80009e8:	e059      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 80009ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 80009f2:	e054      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 80009f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	821a      	strh	r2, [r3, #16]
			break;
 80009fc:	e04f      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 80009fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	839a      	strh	r2, [r3, #28]
			break;
 8000a06:	e04a      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 8000a08:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	83da      	strh	r2, [r3, #30]
			break;
 8000a10:	e045      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 8000a12:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	835a      	strh	r2, [r3, #26]
			break;
 8000a1a:	e040      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 8000a1c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	819a      	strh	r2, [r3, #12]
			break;
 8000a24:	e03b      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 8000a26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	801a      	strh	r2, [r3, #0]
			break;
 8000a2e:	e036      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 8000a30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	811a      	strh	r2, [r3, #8]
			break;
 8000a38:	e031      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 8000a3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	825a      	strh	r2, [r3, #18]
			break;
 8000a42:	e02c      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 8000a44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	829a      	strh	r2, [r3, #20]
			break;
 8000a4c:	e027      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 8000a4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	82da      	strh	r2, [r3, #22]
			break;
 8000a56:	e022      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 8000a58:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	815a      	strh	r2, [r3, #10]
			break;
 8000a60:	e01d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 8000a62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	809a      	strh	r2, [r3, #4]
			break;
 8000a6a:	e018      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 8000a6c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8000a74:	e013      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->total_fuel_flow = data;
 8000a76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	81da      	strh	r2, [r3, #14]
			break;
 8000a7e:	e00e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 8000a80:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	80da      	strh	r2, [r3, #6]
			break;
 8000a88:	e009      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 8000a8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8000a92:	e004      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 8000a94:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8000a9c:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 8000a9e:	89ba      	ldrh	r2, [r7, #12]
 8000aa0:	89fb      	ldrh	r3, [r7, #14]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f805 	bl	8000ab4 <FT_CAN_ProcessCustomData>
 8000aaa:	e000      	b.n	8000aae <FT_CAN_ProcessData+0x49a>
		return;
 8000aac:	bf00      	nop
}
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	80fb      	strh	r3, [r7, #6]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <FT_CAN_ReceiveData>:

#endif

void FT_CAN_ReceiveData(uint32_t RxID, uint32_t RxLength, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000ad0:	b5b0      	push	{r4, r5, r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	466b      	mov	r3, sp
 8000ae0:	461d      	mov	r5, r3
	uint32_t extid = (RxID & 0x1FF80000) >> 13;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	0b5a      	lsrs	r2, r3, #13
 8000ae6:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000aea:	4013      	ands	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]

	if(		   (extid != FT_Gear_Controller)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000af4:	d02d      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Knock_Meter)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	f240 1241 	movw	r2, #321	; 0x141
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d028      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Boost_Controller2)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000b06:	d024      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Injector_Driver)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000b0e:	d020      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Nano)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000b16:	d01c      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Slim)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	f240 2241 	movw	r2, #577	; 0x241
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d017      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Alcohol_O2)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	f240 2242 	movw	r2, #578	; 0x242
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d012      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FTSpark)
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	f240 2243 	movw	r2, #579	; 0x243
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d00d      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Switchpad)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000b3c:	d009      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT500)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000b44:	d005      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT600))
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	f240 2281 	movw	r2, #641	; 0x281
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	f040 8381 	bne.w	8001254 <FT_CAN_ReceiveData+0x784>
		return;

	uint8_t buffer[RxLength];
 8000b52:	68bc      	ldr	r4, [r7, #8]
 8000b54:	4623      	mov	r3, r4
 8000b56:	3b01      	subs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f04f 0100 	mov.w	r1, #0
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	00cb      	lsls	r3, r1, #3
 8000b6a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b6e:	00c2      	lsls	r2, r0, #3
 8000b70:	4620      	mov	r0, r4
 8000b72:	f04f 0100 	mov.w	r1, #0
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	00cb      	lsls	r3, r1, #3
 8000b80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b84:	00c2      	lsls	r2, r0, #3
 8000b86:	1de3      	adds	r3, r4, #7
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	ebad 0d03 	sub.w	sp, sp, r3
 8000b90:	466b      	mov	r3, sp
 8000b92:	3300      	adds	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < RxLength; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	77fb      	strb	r3, [r7, #31]
 8000b9a:	e009      	b.n	8000bb0 <FT_CAN_ReceiveData+0xe0>
		buffer[i] = pData[i];
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	441a      	add	r2, r3
 8000ba2:	7ffb      	ldrb	r3, [r7, #31]
 8000ba4:	7811      	ldrb	r1, [r2, #0]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < RxLength; i++)
 8000baa:	7ffb      	ldrb	r3, [r7, #31]
 8000bac:	3301      	adds	r3, #1
 8000bae:	77fb      	strb	r3, [r7, #31]
 8000bb0:	7ffb      	ldrb	r3, [r7, #31]
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f1      	bhi.n	8000b9c <FT_CAN_ReceiveData+0xcc>

	if((((RxID / 0x800) & 0x7) == 0x00) || (((RxID / 0x800) & 0x7) == 0x01))
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	0adb      	lsrs	r3, r3, #11
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <FT_CAN_ReceiveData+0x102>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	0adb      	lsrs	r3, r3, #11
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	f040 8139 	bne.w	8000e44 <FT_CAN_ReceiveData+0x374>
	{
		if((RxID & 0xFFF) == 0x600)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bd8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000bdc:	d142      	bne.n	8000c64 <FT_CAN_ReceiveData+0x194>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->tps |= buffer[1];
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	785b      	ldrb	r3, [r3, #1]
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->map  = buffer[2] << 8;
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	789b      	ldrb	r3, [r3, #2]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->map |= buffer[3];
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->iat  = buffer[4] << 8;
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	791b      	ldrb	r3, [r3, #4]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->iat |= buffer[5];
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	795b      	ldrb	r3, [r3, #5]
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	799b      	ldrb	r3, [r3, #6]
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->ect |= buffer[7];
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	79db      	ldrb	r3, [r3, #7]
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	865a      	strh	r2, [r3, #50]	; 0x32

			return;
 8000c62:	e2f8      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		else if((RxID & 0xFFF) == 0x601)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c6a:	f240 6201 	movw	r2, #1537	; 0x601
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d142      	bne.n	8000cf8 <FT_CAN_ReceiveData+0x228>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	789b      	ldrb	r3, [r3, #2]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	78db      	ldrb	r3, [r3, #3]
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	791b      	ldrb	r3, [r3, #4]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->coolant_pressure |= buffer[5];
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	795b      	ldrb	r3, [r3, #5]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b21a      	sxth	r2, r3
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	799b      	ldrb	r3, [r3, #6]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->gear 			 |= buffer[7];
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	79db      	ldrb	r3, [r3, #7]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	875a      	strh	r2, [r3, #58]	; 0x3a

			return;
 8000cf6:	e2ae      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		else if((RxID & 0xFFF) == 0x602)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfe:	f240 6202 	movw	r2, #1538	; 0x602
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d146      	bne.n	8000d94 <FT_CAN_ReceiveData+0x2c4>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->lambda 			|= buffer[1];
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	789b      	ldrb	r3, [r3, #2]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->rpm 			|= buffer[3];
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	78db      	ldrb	r3, [r3, #3]
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	795b      	ldrb	r3, [r3, #5]
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	799b      	ldrb	r3, [r3, #6]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	79db      	ldrb	r3, [r3, #7]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			return;
 8000d92:	e260      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}

#ifndef FT_CAN_SIMPLE
		else if((RxID & 0xFF) == 0xFF)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2bff      	cmp	r3, #255	; 0xff
 8000d9a:	f040 8258 	bne.w	800124e <FT_CAN_ReceiveData+0x77e>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[1];
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	785b      	ldrb	r3, [r3, #1]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	789b      	ldrb	r3, [r3, #2]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[3];
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	78db      	ldrb	r3, [r3, #3]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f7ff fc12 	bl	8000614 <FT_CAN_ProcessData>

			FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	791b      	ldrb	r3, [r3, #4]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[5];
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[6] << 8;
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	799b      	ldrb	r3, [r3, #6]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[7];
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	79db      	ldrb	r3, [r3, #7]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000e3c:	6838      	ldr	r0, [r7, #0]
 8000e3e:	f7ff fbe9 	bl	8000614 <FT_CAN_ProcessData>

			return;
 8000e42:	e208      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
	}

	else if(buffer[0] == 0xFF)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d129      	bne.n	8000ea0 <FT_CAN_ReceiveData+0x3d0>
	{
		FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	785b      	ldrb	r3, [r3, #1]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_id 	 |= buffer[2];
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	789b      	ldrb	r3, [r3, #2]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_content  = buffer[3] << 8;
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	78db      	ldrb	r3, [r3, #3]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		FT_Data_Struct->data_content |= buffer[4];
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

		FT_CAN_ProcessData(FT_Data_Struct);
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f7ff fbbb 	bl	8000614 <FT_CAN_ProcessData>

		return;
 8000e9e:	e1da      	b.n	8001256 <FT_CAN_ReceiveData+0x786>

	//Segmented Messages
	else
	{
		//First Message
		if(buffer[0] == 0)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d14b      	bne.n	8000f40 <FT_CAN_ReceiveData+0x470>
		{
			FT_Data_Struct->data_length   = buffer[1] << 8;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->data_length  |= buffer[2];
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	789b      	ldrb	r3, [r3, #2]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

			FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[4];
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[5] << 8;
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	795b      	ldrb	r3, [r3, #5]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[6];
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	799b      	ldrb	r3, [r3, #6]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000f1a:	6838      	ldr	r0, [r7, #0]
 8000f1c:	f7ff fb7a 	bl	8000614 <FT_CAN_ProcessData>

			if(RxLength == 8)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d107      	bne.n	8000f36 <FT_CAN_ReceiveData+0x466>
				FT_Data_Struct->data_id   = buffer[7] << 8;
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	79db      	ldrb	r3, [r3, #7]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg = 0;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000f3e:	e18a      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 1, 5, etc
		else if((buffer[0]-1)%4 == 0)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d15c      	bne.n	8001008 <FT_CAN_ReceiveData+0x538>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d120      	bne.n	8000fa2 <FT_CAN_ReceiveData+0x4d2>
			{
				FT_Data_Struct->data_id 	 |= buffer[1];
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[2] << 8;
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	789b      	ldrb	r3, [r3, #2]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[3];
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	78db      	ldrb	r3, [r3, #3]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f7ff fb39 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d128      	bne.n	8000ffa <FT_CAN_ReceiveData+0x52a>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	791b      	ldrb	r3, [r3, #4]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[5];
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	795b      	ldrb	r3, [r3, #5]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	799b      	ldrb	r3, [r3, #6]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[7];
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	79db      	ldrb	r3, [r3, #7]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f7ff fb0d 	bl	8000614 <FT_CAN_ProcessData>
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8001006:	e126      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//messages 2, 6, etc
		else if((buffer[0]-2)%4 == 0)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3b02      	subs	r3, #2
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d150      	bne.n	80010b8 <FT_CAN_ReceiveData+0x5e8>
		{
			if(RxLength >= 5)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d928      	bls.n	800106e <FT_CAN_ReceiveData+0x59e>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	b29b      	uxth	r3, r3
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b29a      	uxth	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[2];
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	789b      	ldrb	r3, [r3, #2]
 8001036:	b29b      	uxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b29a      	uxth	r2, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	78db      	ldrb	r3, [r3, #3]
 8001046:	b29b      	uxth	r3, r3
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b29a      	uxth	r2, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[4];
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b29a      	uxth	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001068:	6838      	ldr	r0, [r7, #0]
 800106a:	f7ff fad3 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d11a      	bne.n	80010aa <FT_CAN_ReceiveData+0x5da>
			{
				FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	795b      	ldrb	r3, [r3, #5]
 8001078:	b29b      	uxth	r3, r3
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b29a      	uxth	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	|= buffer[6];
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	799b      	ldrb	r3, [r3, #6]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b29a      	uxth	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content = buffer[7] << 8;
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	79db      	ldrb	r3, [r3, #7]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			}

			FT_Data_Struct->data_last_seg 	 = buffer[0];
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 80010b6:	e0ce      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 3, 7, etc
		else if((buffer[0]-3)%4 == 0)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3b03      	subs	r3, #3
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d15f      	bne.n	8001186 <FT_CAN_ReceiveData+0x6b6>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010d2:	3301      	adds	r3, #1
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d10d      	bne.n	80010f4 <FT_CAN_ReceiveData+0x624>
			{
				FT_Data_Struct->data_content |= buffer[1];
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80010ee:	6838      	ldr	r0, [r7, #0]
 80010f0:	f7ff fa90 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength >= 6)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d928      	bls.n	800114c <FT_CAN_ReceiveData+0x67c>
			{
				FT_Data_Struct->data_id  	  = buffer[2] << 8;
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	789b      	ldrb	r3, [r3, #2]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b29a      	uxth	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[3];
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	78db      	ldrb	r3, [r3, #3]
 8001114:	b29b      	uxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b29a      	uxth	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[4] << 8;
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	791b      	ldrb	r3, [r3, #4]
 8001124:	b29b      	uxth	r3, r3
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b29a      	uxth	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[5];
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	795b      	ldrb	r3, [r3, #5]
 800113a:	b29b      	uxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b29a      	uxth	r2, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001146:	6838      	ldr	r0, [r7, #0]
 8001148:	f7ff fa64 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b08      	cmp	r3, #8
 8001150:	d112      	bne.n	8001178 <FT_CAN_ReceiveData+0x6a8>
			{
				FT_Data_Struct->data_id 	  = buffer[6] << 8;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	799b      	ldrb	r3, [r3, #6]
 8001156:	b29b      	uxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b29a      	uxth	r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[7];
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	79db      	ldrb	r3, [r3, #7]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b29a      	uxth	r2, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b29a      	uxth	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8001184:	e067      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 4, 8, etc
		else if(buffer[0]%4 == 0)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d15d      	bne.n	8001250 <FT_CAN_ReceiveData+0x780>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011a0:	3301      	adds	r3, #1
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d115      	bne.n	80011d2 <FT_CAN_ReceiveData+0x702>
			{
				FT_Data_Struct->data_content  = buffer[1] << 8;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[2];
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	789b      	ldrb	r3, [r3, #2]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f7ff fa21 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength >= 7)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d928      	bls.n	800122a <FT_CAN_ReceiveData+0x75a>
			{
				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	78db      	ldrb	r3, [r3, #3]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[4];
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[5] << 8;
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	795b      	ldrb	r3, [r3, #5]
 8001202:	b29b      	uxth	r3, r3
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b29a      	uxth	r2, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[6];
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	799b      	ldrb	r3, [r3, #6]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b29a      	uxth	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7ff f9f5 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d107      	bne.n	8001240 <FT_CAN_ReceiveData+0x770>
			FT_Data_Struct->data_id 	  	  = buffer[7] << 8;
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	79db      	ldrb	r3, [r3, #7]
 8001234:	b29b      	uxth	r3, r3
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b29a      	uxth	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b29a      	uxth	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 800124c:	e003      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		if((RxID & 0xFFF) == 0x600)
 800124e:	bf00      	nop
 8001250:	46ad      	mov	sp, r5
 8001252:	e001      	b.n	8001258 <FT_CAN_ReceiveData+0x788>
		return;
 8001254:	bf00      	nop
 8001256:	46ad      	mov	sp, r5
		}
#endif
	}
}
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001264:	f005 fbe4 	bl	8006a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001268:	f000 f902 	bl	8001470 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800126c:	f000 f978 	bl	8001560 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001270:	f000 fc18 	bl	8001aa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001274:	f000 fbde 	bl	8001a34 <MX_DMA_Init>
  MX_IWDG_Init();
 8001278:	f000 fb3c 	bl	80018f4 <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 800127c:	f000 fb84 	bl	8001988 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 8001280:	f000 f996 	bl	80015b0 <MX_ADC1_Init>
  MX_RTC_Init();
 8001284:	f000 fb50 	bl	8001928 <MX_RTC_Init>
  MX_FATFS_Init();
 8001288:	f00f fe66 	bl	8010f58 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800128c:	f015 ff40 	bl	8017110 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8001290:	f000 fa34 	bl	80016fc <MX_ADC2_Init>
  MX_CAN1_Init();
 8001294:	f000 faca 	bl	800182c <MX_CAN1_Init>
  MX_I2C1_Init();
 8001298:	f000 fafe 	bl	8001898 <MX_I2C1_Init>
  MX_TIM7_Init();
 800129c:	f000 fb94 	bl	80019c8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Principal_Init(&hcan1, &hi2c1, &htim7);
 80012a0:	4a64      	ldr	r2, [pc, #400]	; (8001434 <main+0x1d4>)
 80012a2:	4965      	ldr	r1, [pc, #404]	; (8001438 <main+0x1d8>)
 80012a4:	4865      	ldr	r0, [pc, #404]	; (800143c <main+0x1dc>)
 80012a6:	f003 ff01 	bl	80050ac <Principal_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks if data is being saved and starts saving if conditions are met
	  if(flagDatalogger == DL_NO_SAVE)
 80012aa:	4b65      	ldr	r3, [pc, #404]	; (8001440 <main+0x1e0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d105      	bne.n	80012be <main+0x5e>
		  Principal_Datalogger_Start(dirString, logString, &dirStruct, &fileStruct);
 80012b2:	4b64      	ldr	r3, [pc, #400]	; (8001444 <main+0x1e4>)
 80012b4:	4a64      	ldr	r2, [pc, #400]	; (8001448 <main+0x1e8>)
 80012b6:	4965      	ldr	r1, [pc, #404]	; (800144c <main+0x1ec>)
 80012b8:	4865      	ldr	r0, [pc, #404]	; (8001450 <main+0x1f0>)
 80012ba:	f004 fc4d 	bl	8005b58 <Principal_Datalogger_Start>

	  //Checks card detect pin level change for datalogger initialization or deinitialization
	  Principal_Card_Detection(&fatfsStruct, &dirStruct, &fileStruct);
 80012be:	4a61      	ldr	r2, [pc, #388]	; (8001444 <main+0x1e4>)
 80012c0:	4961      	ldr	r1, [pc, #388]	; (8001448 <main+0x1e8>)
 80012c2:	4864      	ldr	r0, [pc, #400]	; (8001454 <main+0x1f4>)
 80012c4:	f004 fe3a 	bl	8005f3c <Principal_Card_Detection>

	  //Checks USB cable connection, if connected will disable logging
	  if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET) && (flagDatalogger == DL_SAVE))
 80012c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012cc:	4862      	ldr	r0, [pc, #392]	; (8001458 <main+0x1f8>)
 80012ce:	f007 fd43 	bl	8008d58 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d107      	bne.n	80012e8 <main+0x88>
 80012d8:	4b59      	ldr	r3, [pc, #356]	; (8001440 <main+0x1e0>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d103      	bne.n	80012e8 <main+0x88>
		  Principal_Datalogger_Finish(&dirStruct, &fileStruct);
 80012e0:	4958      	ldr	r1, [pc, #352]	; (8001444 <main+0x1e4>)
 80012e2:	4859      	ldr	r0, [pc, #356]	; (8001448 <main+0x1e8>)
 80012e4:	f004 fd26 	bl	8005d34 <Principal_Datalogger_Finish>

	  //Analog inputs 1-4 CAN message
	  if((accMsg[ANALOG_1_4] >= perMsg[ANALOG_1_4]) && (perMsg[ANALOG_1_4] != MSG_DISABLED))
 80012e8:	4b5c      	ldr	r3, [pc, #368]	; (800145c <main+0x1fc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a5c      	ldr	r2, [pc, #368]	; (8001460 <main+0x200>)
 80012ee:	8812      	ldrh	r2, [r2, #0]
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d30e      	bcc.n	8001312 <main+0xb2>
 80012f4:	4b5a      	ldr	r3, [pc, #360]	; (8001460 <main+0x200>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00a      	beq.n	8001312 <main+0xb2>
	  {
		  accMsg[ANALOG_1_4] -= perMsg[ANALOG_1_4];
 80012fc:	4b57      	ldr	r3, [pc, #348]	; (800145c <main+0x1fc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a57      	ldr	r2, [pc, #348]	; (8001460 <main+0x200>)
 8001302:	8812      	ldrh	r2, [r2, #0]
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	4a55      	ldr	r2, [pc, #340]	; (800145c <main+0x1fc>)
 8001308:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, ANALOG_1_4);
 800130a:	2100      	movs	r1, #0
 800130c:	484b      	ldr	r0, [pc, #300]	; (800143c <main+0x1dc>)
 800130e:	f002 fa2f 	bl	8003770 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((accMsg[ANALOG_5_8] >= perMsg[ANALOG_5_8]) && (perMsg[ANALOG_5_8] != MSG_DISABLED))
 8001312:	4b52      	ldr	r3, [pc, #328]	; (800145c <main+0x1fc>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a52      	ldr	r2, [pc, #328]	; (8001460 <main+0x200>)
 8001318:	8852      	ldrh	r2, [r2, #2]
 800131a:	4293      	cmp	r3, r2
 800131c:	d30e      	bcc.n	800133c <main+0xdc>
 800131e:	4b50      	ldr	r3, [pc, #320]	; (8001460 <main+0x200>)
 8001320:	885b      	ldrh	r3, [r3, #2]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00a      	beq.n	800133c <main+0xdc>
	  {
		  accMsg[ANALOG_5_8] -= perMsg[ANALOG_5_8];
 8001326:	4b4d      	ldr	r3, [pc, #308]	; (800145c <main+0x1fc>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <main+0x200>)
 800132c:	8852      	ldrh	r2, [r2, #2]
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	4a4a      	ldr	r2, [pc, #296]	; (800145c <main+0x1fc>)
 8001332:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, ANALOG_5_8);
 8001334:	2101      	movs	r1, #1
 8001336:	4841      	ldr	r0, [pc, #260]	; (800143c <main+0x1dc>)
 8001338:	f002 fa1a 	bl	8003770 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((accMsg[ANALOG_9_12] >= perMsg[ANALOG_9_12]) && (perMsg[ANALOG_9_12] != MSG_DISABLED))
 800133c:	4b47      	ldr	r3, [pc, #284]	; (800145c <main+0x1fc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4a47      	ldr	r2, [pc, #284]	; (8001460 <main+0x200>)
 8001342:	8892      	ldrh	r2, [r2, #4]
 8001344:	4293      	cmp	r3, r2
 8001346:	d30e      	bcc.n	8001366 <main+0x106>
 8001348:	4b45      	ldr	r3, [pc, #276]	; (8001460 <main+0x200>)
 800134a:	889b      	ldrh	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00a      	beq.n	8001366 <main+0x106>
	  {
		  accMsg[ANALOG_9_12] -= perMsg[ANALOG_9_12];
 8001350:	4b42      	ldr	r3, [pc, #264]	; (800145c <main+0x1fc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4a42      	ldr	r2, [pc, #264]	; (8001460 <main+0x200>)
 8001356:	8892      	ldrh	r2, [r2, #4]
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	4a40      	ldr	r2, [pc, #256]	; (800145c <main+0x1fc>)
 800135c:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, ANALOG_9_12);
 800135e:	2102      	movs	r1, #2
 8001360:	4836      	ldr	r0, [pc, #216]	; (800143c <main+0x1dc>)
 8001362:	f002 fa05 	bl	8003770 <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((accMsg[RTC_MSG] >= perMsg[RTC_MSG]) && (perMsg[RTC_MSG] != MSG_DISABLED))
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <main+0x1fc>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	4a3d      	ldr	r2, [pc, #244]	; (8001460 <main+0x200>)
 800136c:	88d2      	ldrh	r2, [r2, #6]
 800136e:	4293      	cmp	r3, r2
 8001370:	d30e      	bcc.n	8001390 <main+0x130>
 8001372:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <main+0x200>)
 8001374:	88db      	ldrh	r3, [r3, #6]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <main+0x130>
	  {
		  accMsg[RTC_MSG] -= perMsg[RTC_MSG];
 800137a:	4b38      	ldr	r3, [pc, #224]	; (800145c <main+0x1fc>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	4a38      	ldr	r2, [pc, #224]	; (8001460 <main+0x200>)
 8001380:	88d2      	ldrh	r2, [r2, #6]
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	4a35      	ldr	r2, [pc, #212]	; (800145c <main+0x1fc>)
 8001386:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_MSG);
 8001388:	2103      	movs	r1, #3
 800138a:	482c      	ldr	r0, [pc, #176]	; (800143c <main+0x1dc>)
 800138c:	f002 f9f0 	bl	8003770 <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((accMsg[VERIFY_MSG] >= perMsg[VERIFY_MSG]) && (perMsg[VERIFY_MSG] != MSG_DISABLED))
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <main+0x1fc>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	4a32      	ldr	r2, [pc, #200]	; (8001460 <main+0x200>)
 8001396:	8912      	ldrh	r2, [r2, #8]
 8001398:	4293      	cmp	r3, r2
 800139a:	d30e      	bcc.n	80013ba <main+0x15a>
 800139c:	4b30      	ldr	r3, [pc, #192]	; (8001460 <main+0x200>)
 800139e:	891b      	ldrh	r3, [r3, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00a      	beq.n	80013ba <main+0x15a>
	  {
		  accMsg[VERIFY_MSG] -= perMsg[VERIFY_MSG];
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <main+0x1fc>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a2d      	ldr	r2, [pc, #180]	; (8001460 <main+0x200>)
 80013aa:	8912      	ldrh	r2, [r2, #8]
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	4a2b      	ldr	r2, [pc, #172]	; (800145c <main+0x1fc>)
 80013b0:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, VERIFY_MSG);
 80013b2:	2104      	movs	r1, #4
 80013b4:	4821      	ldr	r0, [pc, #132]	; (800143c <main+0x1dc>)
 80013b6:	f002 f9db 	bl	8003770 <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((accMsg[ECU_SAVE] >= perMsg[ECU_SAVE]) && (perMsg[ECU_SAVE] != MSG_DISABLED))
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <main+0x1fc>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a28      	ldr	r2, [pc, #160]	; (8001460 <main+0x200>)
 80013c0:	8992      	ldrh	r2, [r2, #12]
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d30e      	bcc.n	80013e4 <main+0x184>
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <main+0x200>)
 80013c8:	899b      	ldrh	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <main+0x184>
	  {
		  accMsg[ECU_SAVE] -= perMsg[ECU_SAVE];
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <main+0x1fc>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a23      	ldr	r2, [pc, #140]	; (8001460 <main+0x200>)
 80013d4:	8992      	ldrh	r2, [r2, #12]
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	4a20      	ldr	r2, [pc, #128]	; (800145c <main+0x1fc>)
 80013da:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, ECU_SAVE);
 80013dc:	2106      	movs	r1, #6
 80013de:	4817      	ldr	r0, [pc, #92]	; (800143c <main+0x1dc>)
 80013e0:	f002 f9c6 	bl	8003770 <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((accMsg[PDM_SAVE] >= perMsg[PDM_SAVE]) && (perMsg[PDM_SAVE] != MSG_DISABLED))
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <main+0x1fc>)
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <main+0x200>)
 80013ea:	89d2      	ldrh	r2, [r2, #14]
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d30e      	bcc.n	800140e <main+0x1ae>
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <main+0x200>)
 80013f2:	89db      	ldrh	r3, [r3, #14]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00a      	beq.n	800140e <main+0x1ae>
	  {
		  accMsg[PDM_SAVE] -= perMsg[PDM_SAVE];
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <main+0x1fc>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	4a18      	ldr	r2, [pc, #96]	; (8001460 <main+0x200>)
 80013fe:	89d2      	ldrh	r2, [r2, #14]
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <main+0x1fc>)
 8001404:	61d3      	str	r3, [r2, #28]
		  Principal_Transmit_Msg(&hcan1, PDM_SAVE);
 8001406:	2107      	movs	r1, #7
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <main+0x1dc>)
 800140a:	f002 f9b1 	bl	8003770 <Principal_Transmit_Msg>
	  }

	  if((verifyADC != 0) && (verifyCAN != 0) && (flagDatalogger != DL_ERROR))
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <main+0x204>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f43f af49 	beq.w	80012aa <main+0x4a>
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <main+0x208>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f43f af44 	beq.w	80012aa <main+0x4a>
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <main+0x1e0>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b04      	cmp	r3, #4
 8001428:	f43f af3f 	beq.w	80012aa <main+0x4a>
		  HAL_IWDG_Refresh(&hiwdg);
 800142c:	480f      	ldr	r0, [pc, #60]	; (800146c <main+0x20c>)
 800142e:	f008 fcce 	bl	8009dce <HAL_IWDG_Refresh>
	  if(flagDatalogger == DL_NO_SAVE)
 8001432:	e73a      	b.n	80012aa <main+0x4a>
 8001434:	20001e04 	.word	0x20001e04
 8001438:	200007c0 	.word	0x200007c0
 800143c:	20001da0 	.word	0x20001da0
 8001440:	20002e80 	.word	0x20002e80
 8001444:	20001e54 	.word	0x20001e54
 8001448:	200018fc 	.word	0x200018fc
 800144c:	20001d00 	.word	0x20001d00
 8001450:	20001d34 	.word	0x20001d34
 8001454:	20000868 	.word	0x20000868
 8001458:	40020000 	.word	0x40020000
 800145c:	20001dcc 	.word	0x20001dcc
 8001460:	20001dec 	.word	0x20001dec
 8001464:	20000824 	.word	0x20000824
 8001468:	20000866 	.word	0x20000866
 800146c:	20000818 	.word	0x20000818

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b094      	sub	sp, #80	; 0x50
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	2234      	movs	r2, #52	; 0x34
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f016 fbde 	bl	8017c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <SystemClock_Config+0xe8>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <SystemClock_Config+0xe8>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
 80014a4:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <SystemClock_Config+0xe8>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b0:	2300      	movs	r3, #0
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <SystemClock_Config+0xec>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a28      	ldr	r2, [pc, #160]	; (800155c <SystemClock_Config+0xec>)
 80014ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <SystemClock_Config+0xec>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80014cc:	230d      	movs	r3, #13
 80014ce:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014d6:	2301      	movs	r3, #1
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014da:	2301      	movs	r3, #1
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014e8:	2308      	movs	r3, #8
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80014ec:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80014f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80014f6:	2306      	movs	r3, #6
 80014f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4618      	mov	r0, r3
 8001504:	f00a fca2 	bl	800be4c <HAL_RCC_OscConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800150e:	f000 fb6f 	bl	8001bf0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001512:	f009 fe69 	bl	800b1e8 <HAL_PWREx_EnableOverDrive>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800151c:	f000 fb68 	bl	8001bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	230f      	movs	r3, #15
 8001522:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001524:	2302      	movs	r3, #2
 8001526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800152c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001530:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	2105      	movs	r1, #5
 800153e:	4618      	mov	r0, r3
 8001540:	f009 fea2 	bl	800b288 <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800154a:	f000 fb51 	bl	8001bf0 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3750      	adds	r7, #80	; 0x50
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000

08001560 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b098      	sub	sp, #96	; 0x60
 8001564:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	225c      	movs	r2, #92	; 0x5c
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f016 fb67 	bl	8017c40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001572:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001576:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8001578:	2308      	movs	r3, #8
 800157a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800157c:	23c0      	movs	r3, #192	; 0xc0
 800157e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001580:	2302      	movs	r3, #2
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8001584:	2304      	movs	r3, #4
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001588:	2301      	movs	r3, #1
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800158c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001590:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001592:	2300      	movs	r3, #0
 8001594:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4618      	mov	r0, r3
 800159a:	f009 ff7b 	bl	800b494 <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80015a4:	f000 fb24 	bl	8001bf0 <Error_Handler>
  }
}
 80015a8:	bf00      	nop
 80015aa:	3760      	adds	r7, #96	; 0x60
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015c2:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015c4:	4a4b      	ldr	r2, [pc, #300]	; (80016f4 <MX_ADC1_Init+0x144>)
 80015c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015c8:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015d0:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015d8:	2201      	movs	r2, #1
 80015da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015dc:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015de:	2201      	movs	r2, #1
 80015e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015e2:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ea:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f0:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015f2:	4a41      	ldr	r2, [pc, #260]	; (80016f8 <MX_ADC1_Init+0x148>)
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f6:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 80015fc:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015fe:	2207      	movs	r2, #7
 8001600:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <MX_ADC1_Init+0x140>)
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <MX_ADC1_Init+0x140>)
 800160c:	2201      	movs	r2, #1
 800160e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001610:	4837      	ldr	r0, [pc, #220]	; (80016f0 <MX_ADC1_Init+0x140>)
 8001612:	f005 faa3 	bl	8006b5c <HAL_ADC_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800161c:	f000 fae8 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001620:	2306      	movs	r3, #6
 8001622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001624:	2301      	movs	r3, #1
 8001626:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001628:	2307      	movs	r3, #7
 800162a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162c:	463b      	mov	r3, r7
 800162e:	4619      	mov	r1, r3
 8001630:	482f      	ldr	r0, [pc, #188]	; (80016f0 <MX_ADC1_Init+0x140>)
 8001632:	f005 fc05 	bl	8006e40 <HAL_ADC_ConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800163c:	f000 fad8 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001640:	2307      	movs	r3, #7
 8001642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001644:	2302      	movs	r3, #2
 8001646:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	4828      	ldr	r0, [pc, #160]	; (80016f0 <MX_ADC1_Init+0x140>)
 800164e:	f005 fbf7 	bl	8006e40 <HAL_ADC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001658:	f000 faca 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800165c:	230e      	movs	r3, #14
 800165e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001660:	2303      	movs	r3, #3
 8001662:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4821      	ldr	r0, [pc, #132]	; (80016f0 <MX_ADC1_Init+0x140>)
 800166a:	f005 fbe9 	bl	8006e40 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001674:	f000 fabc 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001678:	230f      	movs	r3, #15
 800167a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800167c:	2304      	movs	r3, #4
 800167e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	481a      	ldr	r0, [pc, #104]	; (80016f0 <MX_ADC1_Init+0x140>)
 8001686:	f005 fbdb 	bl	8006e40 <HAL_ADC_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001690:	f000 faae 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001694:	2308      	movs	r3, #8
 8001696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001698:	2305      	movs	r3, #5
 800169a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169c:	463b      	mov	r3, r7
 800169e:	4619      	mov	r1, r3
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <MX_ADC1_Init+0x140>)
 80016a2:	f005 fbcd 	bl	8006e40 <HAL_ADC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80016ac:	f000 faa0 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016b0:	2309      	movs	r3, #9
 80016b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80016b4:	2306      	movs	r3, #6
 80016b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_ADC1_Init+0x140>)
 80016be:	f005 fbbf 	bl	8006e40 <HAL_ADC_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80016c8:	f000 fa92 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80016cc:	2312      	movs	r3, #18
 80016ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80016d0:	2307      	movs	r3, #7
 80016d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_ADC1_Init+0x140>)
 80016da:	f005 fbb1 	bl	8006e40 <HAL_ADC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80016e4:	f000 fa84 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200018a4 	.word	0x200018a4
 80016f4:	40012000 	.word	0x40012000
 80016f8:	0f000001 	.word	0x0f000001

080016fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800170e:	4b44      	ldr	r3, [pc, #272]	; (8001820 <MX_ADC2_Init+0x124>)
 8001710:	4a44      	ldr	r2, [pc, #272]	; (8001824 <MX_ADC2_Init+0x128>)
 8001712:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001714:	4b42      	ldr	r3, [pc, #264]	; (8001820 <MX_ADC2_Init+0x124>)
 8001716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800171a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800171c:	4b40      	ldr	r3, [pc, #256]	; (8001820 <MX_ADC2_Init+0x124>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001722:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <MX_ADC2_Init+0x124>)
 8001724:	2201      	movs	r2, #1
 8001726:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001728:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <MX_ADC2_Init+0x124>)
 800172a:	2201      	movs	r2, #1
 800172c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800172e:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <MX_ADC2_Init+0x124>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001736:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <MX_ADC2_Init+0x124>)
 8001738:	2200      	movs	r2, #0
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <MX_ADC2_Init+0x124>)
 800173e:	4a3a      	ldr	r2, [pc, #232]	; (8001828 <MX_ADC2_Init+0x12c>)
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <MX_ADC2_Init+0x124>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 8001748:	4b35      	ldr	r3, [pc, #212]	; (8001820 <MX_ADC2_Init+0x124>)
 800174a:	2206      	movs	r2, #6
 800174c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <MX_ADC2_Init+0x124>)
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <MX_ADC2_Init+0x124>)
 8001758:	2201      	movs	r2, #1
 800175a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800175c:	4830      	ldr	r0, [pc, #192]	; (8001820 <MX_ADC2_Init+0x124>)
 800175e:	f005 f9fd 	bl	8006b5c <HAL_ADC_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001768:	f000 fa42 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800176c:	2300      	movs	r3, #0
 800176e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001770:	2301      	movs	r3, #1
 8001772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001774:	2307      	movs	r3, #7
 8001776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	4619      	mov	r1, r3
 800177c:	4828      	ldr	r0, [pc, #160]	; (8001820 <MX_ADC2_Init+0x124>)
 800177e:	f005 fb5f 	bl	8006e40 <HAL_ADC_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001788:	f000 fa32 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800178c:	2301      	movs	r3, #1
 800178e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001790:	2302      	movs	r3, #2
 8001792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001794:	463b      	mov	r3, r7
 8001796:	4619      	mov	r1, r3
 8001798:	4821      	ldr	r0, [pc, #132]	; (8001820 <MX_ADC2_Init+0x124>)
 800179a:	f005 fb51 	bl	8006e40 <HAL_ADC_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80017a4:	f000 fa24 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80017ac:	2303      	movs	r3, #3
 80017ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017b0:	463b      	mov	r3, r7
 80017b2:	4619      	mov	r1, r3
 80017b4:	481a      	ldr	r0, [pc, #104]	; (8001820 <MX_ADC2_Init+0x124>)
 80017b6:	f005 fb43 	bl	8006e40 <HAL_ADC_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80017c0:	f000 fa16 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80017c4:	2303      	movs	r3, #3
 80017c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80017c8:	2304      	movs	r3, #4
 80017ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4813      	ldr	r0, [pc, #76]	; (8001820 <MX_ADC2_Init+0x124>)
 80017d2:	f005 fb35 	bl	8006e40 <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80017dc:	f000 fa08 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017e0:	2304      	movs	r3, #4
 80017e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017e4:	2305      	movs	r3, #5
 80017e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017e8:	463b      	mov	r3, r7
 80017ea:	4619      	mov	r1, r3
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <MX_ADC2_Init+0x124>)
 80017ee:	f005 fb27 	bl	8006e40 <HAL_ADC_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80017f8:	f000 f9fa 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017fc:	2305      	movs	r3, #5
 80017fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001800:	2306      	movs	r3, #6
 8001802:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_ADC2_Init+0x124>)
 800180a:	f005 fb19 	bl	8006e40 <HAL_ADC_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8001814:	f000 f9ec 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000778 	.word	0x20000778
 8001824:	40012100 	.word	0x40012100
 8001828:	0f000001 	.word	0x0f000001

0800182c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_CAN1_Init+0x64>)
 8001832:	4a18      	ldr	r2, [pc, #96]	; (8001894 <MX_CAN1_Init+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <MX_CAN1_Init+0x64>)
 8001838:	2205      	movs	r2, #5
 800183a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_CAN1_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <MX_CAN1_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_CAN1_Init+0x64>)
 800184a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800184e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_CAN1_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_CAN1_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_CAN1_Init+0x64>)
 800185e:	2200      	movs	r2, #0
 8001860:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_CAN1_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_CAN1_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_CAN1_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_CAN1_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_CAN1_Init+0x64>)
 800187c:	f005 fd90 	bl	80073a0 <HAL_CAN_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001886:	f000 f9b3 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20001da0 	.word	0x20001da0
 8001894:	40006400 	.word	0x40006400

08001898 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_I2C1_Init+0x50>)
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <MX_I2C1_Init+0x54>)
 80018a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_I2C1_Init+0x58>)
 80018a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018d6:	f007 faa3 	bl	8008e20 <HAL_I2C_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018e0:	f000 f986 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200007c0 	.word	0x200007c0
 80018ec:	40005400 	.word	0x40005400
 80018f0:	00061a80 	.word	0x00061a80

080018f4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_IWDG_Init+0x2c>)
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <MX_IWDG_Init+0x30>)
 80018fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_IWDG_Init+0x2c>)
 8001900:	2206      	movs	r2, #6
 8001902:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 59;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_IWDG_Init+0x2c>)
 8001906:	223b      	movs	r2, #59	; 0x3b
 8001908:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_IWDG_Init+0x2c>)
 800190c:	f008 fa1d 	bl	8009d4a <HAL_IWDG_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 8001916:	f000 f96b 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000818 	.word	0x20000818
 8001924:	40003000 	.word	0x40003000

08001928 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800193c:	2300      	movs	r3, #0
 800193e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_RTC_Init+0x58>)
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <MX_RTC_Init+0x5c>)
 8001944:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_RTC_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_RTC_Init+0x58>)
 800194e:	227f      	movs	r2, #127	; 0x7f
 8001950:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_RTC_Init+0x58>)
 8001954:	22ff      	movs	r2, #255	; 0xff
 8001956:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_RTC_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_RTC_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_RTC_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_RTC_Init+0x58>)
 800196c:	f00a fd0c 	bl	800c388 <HAL_RTC_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001976:	f000 f93b 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20001b8c 	.word	0x20001b8c
 8001984:	40002800 	.word	0x40002800

08001988 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 800198e:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <MX_SDIO_SD_Init+0x3c>)
 8001990:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 8001994:	2200      	movs	r2, #0
 8001996:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 80019b2:	2203      	movs	r2, #3
 80019b4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	20001c60 	.word	0x20001c60
 80019c4:	40012c00 	.word	0x40012c00

080019c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ce:	463b      	mov	r3, r7
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <MX_TIM7_Init+0x64>)
 80019d8:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <MX_TIM7_Init+0x68>)
 80019da:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MX_TIM7_Init+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <MX_TIM7_Init+0x64>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <MX_TIM7_Init+0x64>)
 80019ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_TIM7_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019f6:	480d      	ldr	r0, [pc, #52]	; (8001a2c <MX_TIM7_Init+0x64>)
 80019f8:	f00c fea7 	bl	800e74a <HAL_TIM_Base_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a02:	f000 f8f5 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a0e:	463b      	mov	r3, r7
 8001a10:	4619      	mov	r1, r3
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <MX_TIM7_Init+0x64>)
 8001a14:	f00d f928 	bl	800ec68 <HAL_TIMEx_MasterConfigSynchronization>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a1e:	f000 f8e7 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20001e04 	.word	0x20001e04
 8001a30:	40001400 	.word	0x40001400

08001a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <MX_DMA_Init+0x6c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <MX_DMA_Init+0x6c>)
 8001a44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_DMA_Init+0x6c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2102      	movs	r1, #2
 8001a5a:	2038      	movs	r0, #56	; 0x38
 8001a5c:	f006 fc13 	bl	8008286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a60:	2038      	movs	r0, #56	; 0x38
 8001a62:	f006 fc2c 	bl	80082be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2102      	movs	r1, #2
 8001a6a:	203a      	movs	r0, #58	; 0x3a
 8001a6c:	f006 fc0b 	bl	8008286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a70:	203a      	movs	r0, #58	; 0x3a
 8001a72:	f006 fc24 	bl	80082be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	203b      	movs	r0, #59	; 0x3b
 8001a7c:	f006 fc03 	bl	8008286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a80:	203b      	movs	r0, #59	; 0x3b
 8001a82:	f006 fc1c 	bl	80082be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2045      	movs	r0, #69	; 0x45
 8001a8c:	f006 fbfb 	bl	8008286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a90:	2045      	movs	r0, #69	; 0x45
 8001a92:	f006 fc14 	bl	80082be <HAL_NVIC_EnableIRQ>

}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b49      	ldr	r3, [pc, #292]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b42      	ldr	r3, [pc, #264]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a41      	ldr	r2, [pc, #260]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a3a      	ldr	r2, [pc, #232]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a33      	ldr	r2, [pc, #204]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a2c      	ldr	r2, [pc, #176]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	210f      	movs	r1, #15
 8001b4a:	4827      	ldr	r0, [pc, #156]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001b4c:	f007 f91c 	bl	8008d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001b56:	4825      	ldr	r0, [pc, #148]	; (8001bec <MX_GPIO_Init+0x148>)
 8001b58:	f007 f916 	bl	8008d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	481d      	ldr	r0, [pc, #116]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001b74:	f006 ff5c 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001b78:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4816      	ldr	r0, [pc, #88]	; (8001bec <MX_GPIO_Init+0x148>)
 8001b92:	f006 ff4d 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001b96:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	480f      	ldr	r0, [pc, #60]	; (8001bec <MX_GPIO_Init+0x148>)
 8001bae:	f006 ff3f 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4808      	ldr	r0, [pc, #32]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001bc6:	f006 ff33 	bl	8008a30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2101      	movs	r1, #1
 8001bce:	2028      	movs	r0, #40	; 0x28
 8001bd0:	f006 fb59 	bl	8008286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bd4:	2028      	movs	r0, #40	; 0x28
 8001bd6:	f006 fb72 	bl	80082be <HAL_NVIC_EnableIRQ>

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020800 	.word	0x40020800
 8001bec:	40020400 	.word	0x40020400

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <Error_Handler+0x8>
	...

08001bfc <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	603a      	str	r2, [r7, #0]
 8001c06:	80fb      	strh	r3, [r7, #6]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	2b1d      	cmp	r3, #29
 8001c16:	f200 81f9 	bhi.w	800200c <Process_Data+0x410>
 8001c1a:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <Process_Data+0x24>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001c99 	.word	0x08001c99
 8001c24:	08001cc9 	.word	0x08001cc9
 8001c28:	08001cf9 	.word	0x08001cf9
 8001c2c:	08001d29 	.word	0x08001d29
 8001c30:	08001d59 	.word	0x08001d59
 8001c34:	08001d89 	.word	0x08001d89
 8001c38:	08001db9 	.word	0x08001db9
 8001c3c:	08001de9 	.word	0x08001de9
 8001c40:	08001e19 	.word	0x08001e19
 8001c44:	08001e49 	.word	0x08001e49
 8001c48:	08001e79 	.word	0x08001e79
 8001c4c:	08001ea9 	.word	0x08001ea9
 8001c50:	08001ed9 	.word	0x08001ed9
 8001c54:	08001f09 	.word	0x08001f09
 8001c58:	08001f39 	.word	0x08001f39
 8001c5c:	08001f69 	.word	0x08001f69
 8001c60:	08001f9d 	.word	0x08001f9d
 8001c64:	08001fa5 	.word	0x08001fa5
 8001c68:	08001fad 	.word	0x08001fad
 8001c6c:	08001fb5 	.word	0x08001fb5
 8001c70:	08001fbd 	.word	0x08001fbd
 8001c74:	08001fc5 	.word	0x08001fc5
 8001c78:	08001fcd 	.word	0x08001fcd
 8001c7c:	08001fd5 	.word	0x08001fd5
 8001c80:	08001fdd 	.word	0x08001fdd
 8001c84:	08001fe5 	.word	0x08001fe5
 8001c88:	08001fed 	.word	0x08001fed
 8001c8c:	08001ff5 	.word	0x08001ff5
 8001c90:	08001ffd 	.word	0x08001ffd
 8001c94:	08002005 	.word	0x08002005
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	88ba      	ldrh	r2, [r7, #4]
 8001c9c:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	885b      	ldrh	r3, [r3, #2]
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001cb6:	e1aa      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	885b      	ldrh	r3, [r3, #2]
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	805a      	strh	r2, [r3, #2]
			break;
 8001cc6:	e1a2      	b.n	800200e <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	88ba      	ldrh	r2, [r7, #4]
 8001ccc:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	885b      	ldrh	r3, [r3, #2]
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001ce6:	e192      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	885b      	ldrh	r3, [r3, #2]
 8001cec:	f023 0302 	bic.w	r3, r3, #2
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	805a      	strh	r2, [r3, #2]
			break;
 8001cf6:	e18a      	b.n	800200e <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	88ba      	ldrh	r2, [r7, #4]
 8001cfc:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	885b      	ldrh	r3, [r3, #2]
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001d16:	e17a      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	885b      	ldrh	r3, [r3, #2]
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	805a      	strh	r2, [r3, #2]
			break;
 8001d26:	e172      	b.n	800200e <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	88ba      	ldrh	r2, [r7, #4]
 8001d2c:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	885b      	ldrh	r3, [r3, #2]
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001d46:	e162      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	885b      	ldrh	r3, [r3, #2]
 8001d4c:	f023 0308 	bic.w	r3, r3, #8
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	805a      	strh	r2, [r3, #2]
			break;
 8001d56:	e15a      	b.n	800200e <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	88ba      	ldrh	r2, [r7, #4]
 8001d5c:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	885b      	ldrh	r3, [r3, #2]
 8001d6c:	f043 0310 	orr.w	r3, r3, #16
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001d76:	e14a      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	885b      	ldrh	r3, [r3, #2]
 8001d7c:	f023 0310 	bic.w	r3, r3, #16
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	805a      	strh	r2, [r3, #2]
			break;
 8001d86:	e142      	b.n	800200e <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	88ba      	ldrh	r2, [r7, #4]
 8001d8c:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	885b      	ldrh	r3, [r3, #2]
 8001d9c:	f043 0320 	orr.w	r3, r3, #32
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001da6:	e132      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	885b      	ldrh	r3, [r3, #2]
 8001dac:	f023 0320 	bic.w	r3, r3, #32
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	805a      	strh	r2, [r3, #2]
			break;
 8001db6:	e12a      	b.n	800200e <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	88ba      	ldrh	r2, [r7, #4]
 8001dbc:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	885b      	ldrh	r3, [r3, #2]
 8001dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001dd6:	e11a      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	885b      	ldrh	r3, [r3, #2]
 8001ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	805a      	strh	r2, [r3, #2]
			break;
 8001de6:	e112      	b.n	800200e <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	88ba      	ldrh	r2, [r7, #4]
 8001dec:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	885b      	ldrh	r3, [r3, #2]
 8001dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001e06:	e102      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	885b      	ldrh	r3, [r3, #2]
 8001e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	805a      	strh	r2, [r3, #2]
			break;
 8001e16:	e0fa      	b.n	800200e <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	88ba      	ldrh	r2, [r7, #4]
 8001e1c:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	885b      	ldrh	r3, [r3, #2]
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001e36:	e0ea      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	885b      	ldrh	r3, [r3, #2]
 8001e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	805a      	strh	r2, [r3, #2]
			break;
 8001e46:	e0e2      	b.n	800200e <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	88ba      	ldrh	r2, [r7, #4]
 8001e4c:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	885b      	ldrh	r3, [r3, #2]
 8001e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001e66:	e0d2      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	885b      	ldrh	r3, [r3, #2]
 8001e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	805a      	strh	r2, [r3, #2]
			break;
 8001e76:	e0ca      	b.n	800200e <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	88ba      	ldrh	r2, [r7, #4]
 8001e7c:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	885b      	ldrh	r3, [r3, #2]
 8001e8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001e96:	e0ba      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	885b      	ldrh	r3, [r3, #2]
 8001e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	805a      	strh	r2, [r3, #2]
			break;
 8001ea6:	e0b2      	b.n	800200e <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	88ba      	ldrh	r2, [r7, #4]
 8001eac:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	885b      	ldrh	r3, [r3, #2]
 8001ebc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001ec6:	e0a2      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	885b      	ldrh	r3, [r3, #2]
 8001ecc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	805a      	strh	r2, [r3, #2]
			break;
 8001ed6:	e09a      	b.n	800200e <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	88ba      	ldrh	r2, [r7, #4]
 8001edc:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d007      	beq.n	8001ef8 <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	885b      	ldrh	r3, [r3, #2]
 8001eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001ef6:	e08a      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	885b      	ldrh	r3, [r3, #2]
 8001efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	805a      	strh	r2, [r3, #2]
			break;
 8001f06:	e082      	b.n	800200e <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	88ba      	ldrh	r2, [r7, #4]
 8001f0c:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	885b      	ldrh	r3, [r3, #2]
 8001f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001f26:	e072      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	885b      	ldrh	r3, [r3, #2]
 8001f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	805a      	strh	r2, [r3, #2]
			break;
 8001f36:	e06a      	b.n	800200e <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	88ba      	ldrh	r2, [r7, #4]
 8001f3c:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	885b      	ldrh	r3, [r3, #2]
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001f56:	e05a      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	885b      	ldrh	r3, [r3, #2]
 8001f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	805a      	strh	r2, [r3, #2]
			break;
 8001f66:	e052      	b.n	800200e <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	88ba      	ldrh	r2, [r7, #4]
 8001f6c:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	885b      	ldrh	r3, [r3, #2]
 8001f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001f8a:	e040      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	805a      	strh	r2, [r3, #2]
			break;
 8001f9a:	e038      	b.n	800200e <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	88ba      	ldrh	r2, [r7, #4]
 8001fa0:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001fa2:	e034      	b.n	800200e <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	88ba      	ldrh	r2, [r7, #4]
 8001fa8:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8001faa:	e030      	b.n	800200e <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	88ba      	ldrh	r2, [r7, #4]
 8001fb0:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8001fb2:	e02c      	b.n	800200e <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	88ba      	ldrh	r2, [r7, #4]
 8001fb8:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8001fba:	e028      	b.n	800200e <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	88ba      	ldrh	r2, [r7, #4]
 8001fc0:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8001fc2:	e024      	b.n	800200e <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	88ba      	ldrh	r2, [r7, #4]
 8001fc8:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8001fca:	e020      	b.n	800200e <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	88ba      	ldrh	r2, [r7, #4]
 8001fd0:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8001fd2:	e01c      	b.n	800200e <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	88ba      	ldrh	r2, [r7, #4]
 8001fd8:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8001fda:	e018      	b.n	800200e <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	88ba      	ldrh	r2, [r7, #4]
 8001fe0:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8001fe2:	e014      	b.n	800200e <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	88ba      	ldrh	r2, [r7, #4]
 8001fe8:	801a      	strh	r2, [r3, #0]
			break;
 8001fea:	e010      	b.n	800200e <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	88ba      	ldrh	r2, [r7, #4]
 8001ff0:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8001ff2:	e00c      	b.n	800200e <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	88ba      	ldrh	r2, [r7, #4]
 8001ff8:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8001ffa:	e008      	b.n	800200e <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	88ba      	ldrh	r2, [r7, #4]
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8002002:	e004      	b.n	800200e <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	88ba      	ldrh	r2, [r7, #4]
 8002008:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800200a:	e000      	b.n	800200e <Process_Data+0x412>

		default:
			break;
 800200c:	bf00      	nop
	}

	return;
 800200e:	bf00      	nop
}
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop

0800201c <PDM_CAN_FilterConfig>:

HAL_StatusTypeDef PDM_CAN_FilterConfig(CAN_HandleTypeDef* hcan, uint32_t bank_position, uint32_t fifo_assignment)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b090      	sub	sp, #64	; 0x40
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filterID = 0x1E35C000, filterMask = 0x1FFFF000;
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <PDM_CAN_FilterConfig+0x5c>)
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <PDM_CAN_FilterConfig+0x60>)
 800202e:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002034:	2301      	movs	r3, #1
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filterID >> 13;
 8002038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203a:	0b5b      	lsrs	r3, r3, #13
 800203c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filterID << 3) & 0xFFF8;
 800203e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	b29b      	uxth	r3, r3
 8002044:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 8002046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002048:	0b5b      	lsrs	r3, r3, #13
 800204a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (filterMask << 3) & 0xFFF8;
 800204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	b29b      	uxth	r3, r3
 8002052:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = bank_position;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = fifo_assignment;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 800205c:	2301      	movs	r3, #1
 800205e:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4619      	mov	r1, r3
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f005 fa96 	bl	8007598 <HAL_CAN_ConfigFilter>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3740      	adds	r7, #64	; 0x40
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	1e35c000 	.word	0x1e35c000
 800207c:	1ffff000 	.word	0x1ffff000

08002080 <PDM_CAN_Process_Data>:

void PDM_CAN_Process_Data(uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, PDM_Data* data_struct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	460b      	mov	r3, r1
 800208e:	72fb      	strb	r3, [r7, #11]
	uint16_t id = 0, data = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	82fb      	strh	r3, [r7, #22]
 8002094:	2300      	movs	r3, #0
 8002096:	82bb      	strh	r3, [r7, #20]

	if((data_id & 0x1FFFF000) != 0x1E35C000)
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <PDM_CAN_Process_Data+0xb4>)
 800209c:	4013      	ands	r3, r2
 800209e:	4a26      	ldr	r2, [pc, #152]	; (8002138 <PDM_CAN_Process_Data+0xb8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d142      	bne.n	800212a <PDM_CAN_Process_Data+0xaa>
		return;

	id  = data_buffer[0] << 8;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	82fb      	strh	r3, [r7, #22]
	id |= data_buffer[1] & 0xff;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3301      	adds	r3, #1
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	8afb      	ldrh	r3, [r7, #22]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	82fb      	strh	r3, [r7, #22]
	data  = data_buffer[2] << 8;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3302      	adds	r3, #2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	82bb      	strh	r3, [r7, #20]
	data |= data_buffer[3] & 0xff;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3303      	adds	r3, #3
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	8abb      	ldrh	r3, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	82bb      	strh	r3, [r7, #20]

	Process_Data(id, data, data_struct);
 80020d6:	8ab9      	ldrh	r1, [r7, #20]
 80020d8:	8afb      	ldrh	r3, [r7, #22]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fd8d 	bl	8001bfc <Process_Data>

	if(data_length == 8)
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d121      	bne.n	800212c <PDM_CAN_Process_Data+0xac>
	{
		id  = data_buffer[4] << 8;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	82fb      	strh	r3, [r7, #22]
		id |= data_buffer[5] & 0xff;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3305      	adds	r3, #5
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	8afb      	ldrh	r3, [r7, #22]
 80020fe:	4313      	orrs	r3, r2
 8002100:	82fb      	strh	r3, [r7, #22]
		data  = data_buffer[6] << 8;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3306      	adds	r3, #6
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	82bb      	strh	r3, [r7, #20]
		data |= data_buffer[7] & 0xff;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3307      	adds	r3, #7
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b29a      	uxth	r2, r3
 8002116:	8abb      	ldrh	r3, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	82bb      	strh	r3, [r7, #20]

		Process_Data(id, data, data_struct);
 800211c:	8ab9      	ldrh	r1, [r7, #20]
 800211e:	8afb      	ldrh	r3, [r7, #22]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fd6a 	bl	8001bfc <Process_Data>
 8002128:	e000      	b.n	800212c <PDM_CAN_Process_Data+0xac>
		return;
 800212a:	bf00      	nop
	}
}
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	1ffff000 	.word	0x1ffff000
 8002138:	1e35c000 	.word	0x1e35c000

0800213c <Verify_Data>:
 */

#include "principal.h"

static void Verify_Data()
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
	verifyADC = 0;
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <Verify_Data+0xb4>)
 8002144:	2200      	movs	r2, #0
 8002146:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	71fb      	strb	r3, [r7, #7]
 800214c:	e015      	b.n	800217a <Verify_Data+0x3e>
		if(adcBuffer[i] >= ADC_THRESHOLD)
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	4a28      	ldr	r2, [pc, #160]	; (80021f4 <Verify_Data+0xb8>)
 8002152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002156:	2b1d      	cmp	r3, #29
 8002158:	d90c      	bls.n	8002174 <Verify_Data+0x38>
			verifyADC |= (1 << i);
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2201      	movs	r2, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	b21a      	sxth	r2, r3
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <Verify_Data+0xb4>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	b21b      	sxth	r3, r3
 800216a:	4313      	orrs	r3, r2
 800216c:	b21b      	sxth	r3, r3
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <Verify_Data+0xb4>)
 8002172:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	3301      	adds	r3, #1
 8002178:	71fb      	strb	r3, [r7, #7]
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	2b0c      	cmp	r3, #12
 800217e:	d9e6      	bls.n	800214e <Verify_Data+0x12>

	HAL_GPIO_TogglePin(LED_OK);
 8002180:	2101      	movs	r1, #1
 8002182:	481d      	ldr	r0, [pc, #116]	; (80021f8 <Verify_Data+0xbc>)
 8002184:	f006 fe19 	bl	8008dba <HAL_GPIO_TogglePin>

	if(verifyDatalogger == 1)
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <Verify_Data+0xc0>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <Verify_Data+0x60>
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_SET);
 8002190:	2201      	movs	r2, #1
 8002192:	2102      	movs	r1, #2
 8002194:	4818      	ldr	r0, [pc, #96]	; (80021f8 <Verify_Data+0xbc>)
 8002196:	f006 fdf7 	bl	8008d88 <HAL_GPIO_WritePin>
 800219a:	e004      	b.n	80021a6 <Verify_Data+0x6a>
	else
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_RESET);
 800219c:	2200      	movs	r2, #0
 800219e:	2102      	movs	r1, #2
 80021a0:	4815      	ldr	r0, [pc, #84]	; (80021f8 <Verify_Data+0xbc>)
 80021a2:	f006 fdf1 	bl	8008d88 <HAL_GPIO_WritePin>

	if((verifyCAN & 1) == 1)
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <Verify_Data+0xc4>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <Verify_Data+0x80>
		HAL_GPIO_TogglePin(LED_CAN_TX);
 80021b2:	2104      	movs	r1, #4
 80021b4:	4810      	ldr	r0, [pc, #64]	; (80021f8 <Verify_Data+0xbc>)
 80021b6:	f006 fe00 	bl	8008dba <HAL_GPIO_TogglePin>
 80021ba:	e004      	b.n	80021c6 <Verify_Data+0x8a>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	2104      	movs	r1, #4
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <Verify_Data+0xbc>)
 80021c2:	f006 fde1 	bl	8008d88 <HAL_GPIO_WritePin>

	if((verifyCAN & 2) == 2)
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <Verify_Data+0xc4>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <Verify_Data+0xa0>
		HAL_GPIO_TogglePin(LED_CAN_RX);
 80021d2:	2108      	movs	r1, #8
 80021d4:	4808      	ldr	r0, [pc, #32]	; (80021f8 <Verify_Data+0xbc>)
 80021d6:	f006 fdf0 	bl	8008dba <HAL_GPIO_TogglePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
}
 80021da:	e004      	b.n	80021e6 <Verify_Data+0xaa>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 80021dc:	2200      	movs	r2, #0
 80021de:	2108      	movs	r1, #8
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <Verify_Data+0xbc>)
 80021e2:	f006 fdd1 	bl	8008d88 <HAL_GPIO_WritePin>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000824 	.word	0x20000824
 80021f4:	20000738 	.word	0x20000738
 80021f8:	40020800 	.word	0x40020800
 80021fc:	20000705 	.word	0x20000705
 8002200:	20000866 	.word	0x20000866

08002204 <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 800220c:	4b47      	ldr	r3, [pc, #284]	; (800232c <Tx_Analog_1_4+0x128>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <Tx_Analog_1_4+0x128>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002218:	4b44      	ldr	r3, [pc, #272]	; (800232c <Tx_Analog_1_4+0x128>)
 800221a:	2200      	movs	r2, #0
 800221c:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + ANALOG_1_4);
 800221e:	4b43      	ldr	r3, [pc, #268]	; (800232c <Tx_Analog_1_4+0x128>)
 8002220:	f240 5201 	movw	r2, #1281	; 0x501
 8002224:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 8002226:	4b41      	ldr	r3, [pc, #260]	; (800232c <Tx_Analog_1_4+0x128>)
 8002228:	2208      	movs	r2, #8
 800222a:	611a      	str	r2, [r3, #16]

	if((verifyADC & 0x000f) == 0)
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <Tx_Analog_1_4+0x12c>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	2b00      	cmp	r3, #0
 8002236:	d075      	beq.n	8002324 <Tx_Analog_1_4+0x120>
		return;

	txData[0] = adcBuffer[0] >> 8;
 8002238:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <Tx_Analog_1_4+0x130>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	b29b      	uxth	r3, r3
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <Tx_Analog_1_4+0x134>)
 8002244:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[0] & 0xff;
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <Tx_Analog_1_4+0x130>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <Tx_Analog_1_4+0x134>)
 800224e:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[1] >> 8;
 8002250:	4b38      	ldr	r3, [pc, #224]	; (8002334 <Tx_Analog_1_4+0x130>)
 8002252:	885b      	ldrh	r3, [r3, #2]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	b29b      	uxth	r3, r3
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4b37      	ldr	r3, [pc, #220]	; (8002338 <Tx_Analog_1_4+0x134>)
 800225c:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[1] & 0xff;
 800225e:	4b35      	ldr	r3, [pc, #212]	; (8002334 <Tx_Analog_1_4+0x130>)
 8002260:	885b      	ldrh	r3, [r3, #2]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	4b34      	ldr	r3, [pc, #208]	; (8002338 <Tx_Analog_1_4+0x134>)
 8002266:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[2] >> 8;
 8002268:	4b32      	ldr	r3, [pc, #200]	; (8002334 <Tx_Analog_1_4+0x130>)
 800226a:	889b      	ldrh	r3, [r3, #4]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	b29b      	uxth	r3, r3
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b31      	ldr	r3, [pc, #196]	; (8002338 <Tx_Analog_1_4+0x134>)
 8002274:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[2] & 0xff;
 8002276:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <Tx_Analog_1_4+0x130>)
 8002278:	889b      	ldrh	r3, [r3, #4]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	4b2e      	ldr	r3, [pc, #184]	; (8002338 <Tx_Analog_1_4+0x134>)
 800227e:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[3] >> 8;
 8002280:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <Tx_Analog_1_4+0x130>)
 8002282:	88db      	ldrh	r3, [r3, #6]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	b29b      	uxth	r3, r3
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <Tx_Analog_1_4+0x134>)
 800228c:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[3] & 0xff;
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <Tx_Analog_1_4+0x130>)
 8002290:	88db      	ldrh	r3, [r3, #6]
 8002292:	b2da      	uxtb	r2, r3
 8002294:	4b28      	ldr	r3, [pc, #160]	; (8002338 <Tx_Analog_1_4+0x134>)
 8002296:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002298:	4b28      	ldr	r3, [pc, #160]	; (800233c <Tx_Analog_1_4+0x138>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d108      	bne.n	80022b2 <Tx_Analog_1_4+0xae>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &fileStruct);
 80022a0:	4b22      	ldr	r3, [pc, #136]	; (800232c <Tx_Analog_1_4+0x128>)
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	4b21      	ldr	r3, [pc, #132]	; (800232c <Tx_Analog_1_4+0x128>)
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	b2d9      	uxtb	r1, r3
 80022aa:	4b25      	ldr	r3, [pc, #148]	; (8002340 <Tx_Analog_1_4+0x13c>)
 80022ac:	4a22      	ldr	r2, [pc, #136]	; (8002338 <Tx_Analog_1_4+0x134>)
 80022ae:	f003 fd73 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_1_4] >= perCAN[ANALOG_1_4]) && (perCAN[ANALOG_1_4] != MSG_DISABLED))
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <Tx_Analog_1_4+0x140>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a24      	ldr	r2, [pc, #144]	; (8002348 <Tx_Analog_1_4+0x144>)
 80022b8:	8812      	ldrh	r2, [r2, #0]
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d333      	bcc.n	8002326 <Tx_Analog_1_4+0x122>
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <Tx_Analog_1_4+0x144>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d02f      	beq.n	8002326 <Tx_Analog_1_4+0x122>
	{
		accCAN[ANALOG_1_4] -= perCAN[ANALOG_1_4];
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <Tx_Analog_1_4+0x140>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <Tx_Analog_1_4+0x144>)
 80022cc:	8812      	ldrh	r2, [r2, #0]
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <Tx_Analog_1_4+0x140>)
 80022d2:	6013      	str	r3, [r2, #0]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <Tx_Analog_1_4+0x148>)
 80022d6:	4a18      	ldr	r2, [pc, #96]	; (8002338 <Tx_Analog_1_4+0x134>)
 80022d8:	4914      	ldr	r1, [pc, #80]	; (800232c <Tx_Analog_1_4+0x128>)
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f005 fa80 	bl	80077e0 <HAL_CAN_AddTxMessage>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d107      	bne.n	80022f6 <Tx_Analog_1_4+0xf2>
			verifyCAN |= 1;
 80022e6:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <Tx_Analog_1_4+0x14c>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <Tx_Analog_1_4+0x14c>)
 80022f2:	701a      	strb	r2, [r3, #0]
 80022f4:	e006      	b.n	8002304 <Tx_Analog_1_4+0x100>
		else
			verifyCAN &= 0x02;
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <Tx_Analog_1_4+0x14c>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <Tx_Analog_1_4+0x14c>)
 8002302:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e002      	b.n	8002310 <Tx_Analog_1_4+0x10c>
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	3301      	adds	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f005 fb40 	bl	8007996 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002316:	4603      	mov	r3, r0
 8002318:	2b03      	cmp	r3, #3
 800231a:	d004      	beq.n	8002326 <Tx_Analog_1_4+0x122>
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d9f3      	bls.n	800230a <Tx_Analog_1_4+0x106>
 8002322:	e000      	b.n	8002326 <Tx_Analog_1_4+0x122>
		return;
 8002324:	bf00      	nop
	}
}
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000708 	.word	0x20000708
 8002330:	20000824 	.word	0x20000824
 8002334:	20000738 	.word	0x20000738
 8002338:	20000770 	.word	0x20000770
 800233c:	20002e80 	.word	0x20002e80
 8002340:	20001e54 	.word	0x20001e54
 8002344:	20000720 	.word	0x20000720
 8002348:	200018ec 	.word	0x200018ec
 800234c:	20001e50 	.word	0x20001e50
 8002350:	20000866 	.word	0x20000866

08002354 <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 800235c:	4b47      	ldr	r3, [pc, #284]	; (800247c <Tx_Analog_5_8+0x128>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8002362:	4b46      	ldr	r3, [pc, #280]	; (800247c <Tx_Analog_5_8+0x128>)
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002368:	4b44      	ldr	r3, [pc, #272]	; (800247c <Tx_Analog_5_8+0x128>)
 800236a:	2200      	movs	r2, #0
 800236c:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + ANALOG_5_8);
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <Tx_Analog_5_8+0x128>)
 8002370:	f240 5202 	movw	r2, #1282	; 0x502
 8002374:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 8002376:	4b41      	ldr	r3, [pc, #260]	; (800247c <Tx_Analog_5_8+0x128>)
 8002378:	2208      	movs	r2, #8
 800237a:	611a      	str	r2, [r3, #16]

	if((verifyADC & 0x00f0) == 0)
 800237c:	4b40      	ldr	r3, [pc, #256]	; (8002480 <Tx_Analog_5_8+0x12c>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d075      	beq.n	8002474 <Tx_Analog_5_8+0x120>
		return;

	txData[0] = adcBuffer[4] >> 8;
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <Tx_Analog_5_8+0x130>)
 800238a:	891b      	ldrh	r3, [r3, #8]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b29b      	uxth	r3, r3
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <Tx_Analog_5_8+0x134>)
 8002394:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[4] & 0xff;
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <Tx_Analog_5_8+0x130>)
 8002398:	891b      	ldrh	r3, [r3, #8]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <Tx_Analog_5_8+0x134>)
 800239e:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[5] >> 8;
 80023a0:	4b38      	ldr	r3, [pc, #224]	; (8002484 <Tx_Analog_5_8+0x130>)
 80023a2:	895b      	ldrh	r3, [r3, #10]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b37      	ldr	r3, [pc, #220]	; (8002488 <Tx_Analog_5_8+0x134>)
 80023ac:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[5] & 0xff;
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <Tx_Analog_5_8+0x130>)
 80023b0:	895b      	ldrh	r3, [r3, #10]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b34      	ldr	r3, [pc, #208]	; (8002488 <Tx_Analog_5_8+0x134>)
 80023b6:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[6] >> 8;
 80023b8:	4b32      	ldr	r3, [pc, #200]	; (8002484 <Tx_Analog_5_8+0x130>)
 80023ba:	899b      	ldrh	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	b29b      	uxth	r3, r3
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b31      	ldr	r3, [pc, #196]	; (8002488 <Tx_Analog_5_8+0x134>)
 80023c4:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[6] & 0xff;
 80023c6:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <Tx_Analog_5_8+0x130>)
 80023c8:	899b      	ldrh	r3, [r3, #12]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <Tx_Analog_5_8+0x134>)
 80023ce:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[7] >> 8;
 80023d0:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <Tx_Analog_5_8+0x130>)
 80023d2:	89db      	ldrh	r3, [r3, #14]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <Tx_Analog_5_8+0x134>)
 80023dc:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[7] & 0xff;
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <Tx_Analog_5_8+0x130>)
 80023e0:	89db      	ldrh	r3, [r3, #14]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b28      	ldr	r3, [pc, #160]	; (8002488 <Tx_Analog_5_8+0x134>)
 80023e6:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <Tx_Analog_5_8+0x138>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d108      	bne.n	8002402 <Tx_Analog_5_8+0xae>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &fileStruct);
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <Tx_Analog_5_8+0x128>)
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	4b21      	ldr	r3, [pc, #132]	; (800247c <Tx_Analog_5_8+0x128>)
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	b2d9      	uxtb	r1, r3
 80023fa:	4b25      	ldr	r3, [pc, #148]	; (8002490 <Tx_Analog_5_8+0x13c>)
 80023fc:	4a22      	ldr	r2, [pc, #136]	; (8002488 <Tx_Analog_5_8+0x134>)
 80023fe:	f003 fccb 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_5_8] >= perCAN[ANALOG_5_8]) && (perCAN[ANALOG_5_8] != MSG_DISABLED))
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <Tx_Analog_5_8+0x140>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a24      	ldr	r2, [pc, #144]	; (8002498 <Tx_Analog_5_8+0x144>)
 8002408:	8852      	ldrh	r2, [r2, #2]
 800240a:	4293      	cmp	r3, r2
 800240c:	d333      	bcc.n	8002476 <Tx_Analog_5_8+0x122>
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <Tx_Analog_5_8+0x144>)
 8002410:	885b      	ldrh	r3, [r3, #2]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d02f      	beq.n	8002476 <Tx_Analog_5_8+0x122>
	{
		accCAN[ANALOG_5_8] -= perCAN[ANALOG_5_8];
 8002416:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <Tx_Analog_5_8+0x140>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a1f      	ldr	r2, [pc, #124]	; (8002498 <Tx_Analog_5_8+0x144>)
 800241c:	8852      	ldrh	r2, [r2, #2]
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <Tx_Analog_5_8+0x140>)
 8002422:	6053      	str	r3, [r2, #4]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <Tx_Analog_5_8+0x148>)
 8002426:	4a18      	ldr	r2, [pc, #96]	; (8002488 <Tx_Analog_5_8+0x134>)
 8002428:	4914      	ldr	r1, [pc, #80]	; (800247c <Tx_Analog_5_8+0x128>)
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f005 f9d8 	bl	80077e0 <HAL_CAN_AddTxMessage>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d107      	bne.n	8002446 <Tx_Analog_5_8+0xf2>
			verifyCAN |= 1;
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <Tx_Analog_5_8+0x14c>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <Tx_Analog_5_8+0x14c>)
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e006      	b.n	8002454 <Tx_Analog_5_8+0x100>
		else
			verifyCAN &= 0x02;
 8002446:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <Tx_Analog_5_8+0x14c>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <Tx_Analog_5_8+0x14c>)
 8002452:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	e002      	b.n	8002460 <Tx_Analog_5_8+0x10c>
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	3301      	adds	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f005 fa98 	bl	8007996 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002466:	4603      	mov	r3, r0
 8002468:	2b03      	cmp	r3, #3
 800246a:	d004      	beq.n	8002476 <Tx_Analog_5_8+0x122>
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d9f3      	bls.n	800245a <Tx_Analog_5_8+0x106>
 8002472:	e000      	b.n	8002476 <Tx_Analog_5_8+0x122>
		return;
 8002474:	bf00      	nop
	}
}
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000708 	.word	0x20000708
 8002480:	20000824 	.word	0x20000824
 8002484:	20000738 	.word	0x20000738
 8002488:	20000770 	.word	0x20000770
 800248c:	20002e80 	.word	0x20002e80
 8002490:	20001e54 	.word	0x20001e54
 8002494:	20000720 	.word	0x20000720
 8002498:	200018ec 	.word	0x200018ec
 800249c:	20001e50 	.word	0x20001e50
 80024a0:	20000866 	.word	0x20000866

080024a4 <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 80024ac:	4b47      	ldr	r3, [pc, #284]	; (80025cc <Tx_Analog_9_12+0x128>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80024b2:	4b46      	ldr	r3, [pc, #280]	; (80025cc <Tx_Analog_9_12+0x128>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80024b8:	4b44      	ldr	r3, [pc, #272]	; (80025cc <Tx_Analog_9_12+0x128>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + ANALOG_9_12);
 80024be:	4b43      	ldr	r3, [pc, #268]	; (80025cc <Tx_Analog_9_12+0x128>)
 80024c0:	f240 5203 	movw	r2, #1283	; 0x503
 80024c4:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <Tx_Analog_9_12+0x128>)
 80024c8:	2208      	movs	r2, #8
 80024ca:	611a      	str	r2, [r3, #16]

	if((verifyADC & 0x0f00) == 0)
 80024cc:	4b40      	ldr	r3, [pc, #256]	; (80025d0 <Tx_Analog_9_12+0x12c>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d075      	beq.n	80025c4 <Tx_Analog_9_12+0x120>
		return;

	txData[0] = adcBuffer[8] >> 8;
 80024d8:	4b3e      	ldr	r3, [pc, #248]	; (80025d4 <Tx_Analog_9_12+0x130>)
 80024da:	8a1b      	ldrh	r3, [r3, #16]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <Tx_Analog_9_12+0x134>)
 80024e4:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[8] & 0xff;
 80024e6:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <Tx_Analog_9_12+0x130>)
 80024e8:	8a1b      	ldrh	r3, [r3, #16]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <Tx_Analog_9_12+0x134>)
 80024ee:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[9] >> 8;
 80024f0:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <Tx_Analog_9_12+0x130>)
 80024f2:	8a5b      	ldrh	r3, [r3, #18]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <Tx_Analog_9_12+0x134>)
 80024fc:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[9] & 0xff;
 80024fe:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <Tx_Analog_9_12+0x130>)
 8002500:	8a5b      	ldrh	r3, [r3, #18]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b34      	ldr	r3, [pc, #208]	; (80025d8 <Tx_Analog_9_12+0x134>)
 8002506:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[10] >> 8;
 8002508:	4b32      	ldr	r3, [pc, #200]	; (80025d4 <Tx_Analog_9_12+0x130>)
 800250a:	8a9b      	ldrh	r3, [r3, #20]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	b29b      	uxth	r3, r3
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <Tx_Analog_9_12+0x134>)
 8002514:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[10] & 0xff;
 8002516:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <Tx_Analog_9_12+0x130>)
 8002518:	8a9b      	ldrh	r3, [r3, #20]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <Tx_Analog_9_12+0x134>)
 800251e:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[11] >> 8;
 8002520:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <Tx_Analog_9_12+0x130>)
 8002522:	8adb      	ldrh	r3, [r3, #22]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	b29b      	uxth	r3, r3
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <Tx_Analog_9_12+0x134>)
 800252c:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[11] & 0xff;
 800252e:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <Tx_Analog_9_12+0x130>)
 8002530:	8adb      	ldrh	r3, [r3, #22]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <Tx_Analog_9_12+0x134>)
 8002536:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <Tx_Analog_9_12+0x138>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d108      	bne.n	8002552 <Tx_Analog_9_12+0xae>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &fileStruct);
 8002540:	4b22      	ldr	r3, [pc, #136]	; (80025cc <Tx_Analog_9_12+0x128>)
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <Tx_Analog_9_12+0x128>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	b2d9      	uxtb	r1, r3
 800254a:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <Tx_Analog_9_12+0x13c>)
 800254c:	4a22      	ldr	r2, [pc, #136]	; (80025d8 <Tx_Analog_9_12+0x134>)
 800254e:	f003 fc23 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_9_12] >= perCAN[ANALOG_9_12]) && (perCAN[ANALOG_9_12] != MSG_DISABLED))
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <Tx_Analog_9_12+0x140>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <Tx_Analog_9_12+0x144>)
 8002558:	8892      	ldrh	r2, [r2, #4]
 800255a:	4293      	cmp	r3, r2
 800255c:	d333      	bcc.n	80025c6 <Tx_Analog_9_12+0x122>
 800255e:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <Tx_Analog_9_12+0x144>)
 8002560:	889b      	ldrh	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d02f      	beq.n	80025c6 <Tx_Analog_9_12+0x122>
	{
		accCAN[ANALOG_9_12] -= perCAN[ANALOG_9_12];
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <Tx_Analog_9_12+0x140>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <Tx_Analog_9_12+0x144>)
 800256c:	8892      	ldrh	r2, [r2, #4]
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <Tx_Analog_9_12+0x140>)
 8002572:	6093      	str	r3, [r2, #8]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <Tx_Analog_9_12+0x148>)
 8002576:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <Tx_Analog_9_12+0x134>)
 8002578:	4914      	ldr	r1, [pc, #80]	; (80025cc <Tx_Analog_9_12+0x128>)
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f005 f930 	bl	80077e0 <HAL_CAN_AddTxMessage>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d107      	bne.n	8002596 <Tx_Analog_9_12+0xf2>
			verifyCAN |= 1;
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <Tx_Analog_9_12+0x14c>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <Tx_Analog_9_12+0x14c>)
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	e006      	b.n	80025a4 <Tx_Analog_9_12+0x100>
		else
			verifyCAN &= 0x02;
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <Tx_Analog_9_12+0x14c>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <Tx_Analog_9_12+0x14c>)
 80025a2:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	e002      	b.n	80025b0 <Tx_Analog_9_12+0x10c>
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	3301      	adds	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f005 f9f0 	bl	8007996 <HAL_CAN_GetTxMailboxesFreeLevel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d004      	beq.n	80025c6 <Tx_Analog_9_12+0x122>
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d9f3      	bls.n	80025aa <Tx_Analog_9_12+0x106>
 80025c2:	e000      	b.n	80025c6 <Tx_Analog_9_12+0x122>
		return;
 80025c4:	bf00      	nop
	}
}
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000708 	.word	0x20000708
 80025d0:	20000824 	.word	0x20000824
 80025d4:	20000738 	.word	0x20000738
 80025d8:	20000770 	.word	0x20000770
 80025dc:	20002e80 	.word	0x20002e80
 80025e0:	20001e54 	.word	0x20001e54
 80025e4:	20000720 	.word	0x20000720
 80025e8:	200018ec 	.word	0x200018ec
 80025ec:	20001e50 	.word	0x20001e50
 80025f0:	20000866 	.word	0x20000866

080025f4 <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 80025fc:	4b43      	ldr	r3, [pc, #268]	; (800270c <Tx_RTC+0x118>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8002602:	4b42      	ldr	r3, [pc, #264]	; (800270c <Tx_RTC+0x118>)
 8002604:	2200      	movs	r2, #0
 8002606:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002608:	4b40      	ldr	r3, [pc, #256]	; (800270c <Tx_RTC+0x118>)
 800260a:	2200      	movs	r2, #0
 800260c:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + RTC_MSG);
 800260e:	4b3f      	ldr	r3, [pc, #252]	; (800270c <Tx_RTC+0x118>)
 8002610:	f240 5204 	movw	r2, #1284	; 0x504
 8002614:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <Tx_RTC+0x118>)
 8002618:	2208      	movs	r2, #8
 800261a:	611a      	str	r2, [r3, #16]

	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800261c:	2200      	movs	r2, #0
 800261e:	493c      	ldr	r1, [pc, #240]	; (8002710 <Tx_RTC+0x11c>)
 8002620:	483c      	ldr	r0, [pc, #240]	; (8002714 <Tx_RTC+0x120>)
 8002622:	f009 ffff 	bl	800c624 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8002626:	2200      	movs	r2, #0
 8002628:	493b      	ldr	r1, [pc, #236]	; (8002718 <Tx_RTC+0x124>)
 800262a:	483a      	ldr	r0, [pc, #232]	; (8002714 <Tx_RTC+0x120>)
 800262c:	f00a f8ff 	bl	800c82e <HAL_RTC_GetDate>

	txData[0] = rtcDate.Year;
 8002630:	4b39      	ldr	r3, [pc, #228]	; (8002718 <Tx_RTC+0x124>)
 8002632:	78da      	ldrb	r2, [r3, #3]
 8002634:	4b39      	ldr	r3, [pc, #228]	; (800271c <Tx_RTC+0x128>)
 8002636:	701a      	strb	r2, [r3, #0]
	txData[1] = rtcDate.Month;
 8002638:	4b37      	ldr	r3, [pc, #220]	; (8002718 <Tx_RTC+0x124>)
 800263a:	785a      	ldrb	r2, [r3, #1]
 800263c:	4b37      	ldr	r3, [pc, #220]	; (800271c <Tx_RTC+0x128>)
 800263e:	705a      	strb	r2, [r3, #1]
	txData[2] = rtcDate.Date;
 8002640:	4b35      	ldr	r3, [pc, #212]	; (8002718 <Tx_RTC+0x124>)
 8002642:	789a      	ldrb	r2, [r3, #2]
 8002644:	4b35      	ldr	r3, [pc, #212]	; (800271c <Tx_RTC+0x128>)
 8002646:	709a      	strb	r2, [r3, #2]
	txData[3] = rtcTime.Hours;
 8002648:	4b31      	ldr	r3, [pc, #196]	; (8002710 <Tx_RTC+0x11c>)
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	4b33      	ldr	r3, [pc, #204]	; (800271c <Tx_RTC+0x128>)
 800264e:	70da      	strb	r2, [r3, #3]
	txData[4] = rtcTime.Minutes;
 8002650:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <Tx_RTC+0x11c>)
 8002652:	785a      	ldrb	r2, [r3, #1]
 8002654:	4b31      	ldr	r3, [pc, #196]	; (800271c <Tx_RTC+0x128>)
 8002656:	711a      	strb	r2, [r3, #4]
	txData[5] = rtcTime.Seconds;
 8002658:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <Tx_RTC+0x11c>)
 800265a:	789a      	ldrb	r2, [r3, #2]
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <Tx_RTC+0x128>)
 800265e:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[12] >> 8;
 8002660:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <Tx_RTC+0x12c>)
 8002662:	8b1b      	ldrh	r3, [r3, #24]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	b29b      	uxth	r3, r3
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b2c      	ldr	r3, [pc, #176]	; (800271c <Tx_RTC+0x128>)
 800266c:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[12] & 0xff;
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <Tx_RTC+0x12c>)
 8002670:	8b1b      	ldrh	r3, [r3, #24]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	4b29      	ldr	r3, [pc, #164]	; (800271c <Tx_RTC+0x128>)
 8002676:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002678:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <Tx_RTC+0x130>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d108      	bne.n	8002692 <Tx_RTC+0x9e>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &fileStruct);
 8002680:	4b22      	ldr	r3, [pc, #136]	; (800270c <Tx_RTC+0x118>)
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <Tx_RTC+0x118>)
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	b2d9      	uxtb	r1, r3
 800268a:	4b27      	ldr	r3, [pc, #156]	; (8002728 <Tx_RTC+0x134>)
 800268c:	4a23      	ldr	r2, [pc, #140]	; (800271c <Tx_RTC+0x128>)
 800268e:	f003 fb83 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	if((accCAN[RTC_MSG] >= perCAN[RTC_MSG]) && (perCAN[RTC_MSG] != MSG_DISABLED))
 8002692:	4b26      	ldr	r3, [pc, #152]	; (800272c <Tx_RTC+0x138>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	4a26      	ldr	r2, [pc, #152]	; (8002730 <Tx_RTC+0x13c>)
 8002698:	88d2      	ldrh	r2, [r2, #6]
 800269a:	4293      	cmp	r3, r2
 800269c:	d331      	bcc.n	8002702 <Tx_RTC+0x10e>
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <Tx_RTC+0x13c>)
 80026a0:	88db      	ldrh	r3, [r3, #6]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02d      	beq.n	8002702 <Tx_RTC+0x10e>
	{
		accCAN[RTC_MSG] -= perCAN[RTC_MSG];
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <Tx_RTC+0x138>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <Tx_RTC+0x13c>)
 80026ac:	88d2      	ldrh	r2, [r2, #6]
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	4a1e      	ldr	r2, [pc, #120]	; (800272c <Tx_RTC+0x138>)
 80026b2:	60d3      	str	r3, [r2, #12]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80026b4:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <Tx_RTC+0x140>)
 80026b6:	4a19      	ldr	r2, [pc, #100]	; (800271c <Tx_RTC+0x128>)
 80026b8:	4914      	ldr	r1, [pc, #80]	; (800270c <Tx_RTC+0x118>)
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f005 f890 	bl	80077e0 <HAL_CAN_AddTxMessage>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d107      	bne.n	80026d6 <Tx_RTC+0xe2>
			verifyCAN |= 1;
 80026c6:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <Tx_RTC+0x144>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <Tx_RTC+0x144>)
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e006      	b.n	80026e4 <Tx_RTC+0xf0>
		else
			verifyCAN &= 0x02;
 80026d6:	4b18      	ldr	r3, [pc, #96]	; (8002738 <Tx_RTC+0x144>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <Tx_RTC+0x144>)
 80026e2:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80026e4:	2300      	movs	r3, #0
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e002      	b.n	80026f0 <Tx_RTC+0xfc>
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	3301      	adds	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f005 f950 	bl	8007996 <HAL_CAN_GetTxMailboxesFreeLevel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d002      	beq.n	8002702 <Tx_RTC+0x10e>
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d9f3      	bls.n	80026ea <Tx_RTC+0xf6>
	}
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000708 	.word	0x20000708
 8002710:	20001cec 	.word	0x20001cec
 8002714:	20001b8c 	.word	0x20001b8c
 8002718:	20000814 	.word	0x20000814
 800271c:	20000770 	.word	0x20000770
 8002720:	20000738 	.word	0x20000738
 8002724:	20002e80 	.word	0x20002e80
 8002728:	20001e54 	.word	0x20001e54
 800272c:	20000720 	.word	0x20000720
 8002730:	200018ec 	.word	0x200018ec
 8002734:	20001e50 	.word	0x20001e50
 8002738:	20000866 	.word	0x20000866

0800273c <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 8002744:	4bcd      	ldr	r3, [pc, #820]	; (8002a7c <Tx_Verify+0x340>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800274a:	4bcc      	ldr	r3, [pc, #816]	; (8002a7c <Tx_Verify+0x340>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002750:	4bca      	ldr	r3, [pc, #808]	; (8002a7c <Tx_Verify+0x340>)
 8002752:	2200      	movs	r2, #0
 8002754:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + VERIFY_MSG);
 8002756:	4bc9      	ldr	r3, [pc, #804]	; (8002a7c <Tx_Verify+0x340>)
 8002758:	f240 5205 	movw	r2, #1285	; 0x505
 800275c:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 800275e:	4bc7      	ldr	r3, [pc, #796]	; (8002a7c <Tx_Verify+0x340>)
 8002760:	2208      	movs	r2, #8
 8002762:	611a      	str	r2, [r3, #16]

	Verify_Data();
 8002764:	f7ff fcea 	bl	800213c <Verify_Data>

	txData[0]  = verifyADC >> 8;
 8002768:	4bc5      	ldr	r3, [pc, #788]	; (8002a80 <Tx_Verify+0x344>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	b29b      	uxth	r3, r3
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4bc4      	ldr	r3, [pc, #784]	; (8002a84 <Tx_Verify+0x348>)
 8002774:	701a      	strb	r2, [r3, #0]
	txData[1]  = verifyADC & 0x0f;
 8002776:	4bc2      	ldr	r3, [pc, #776]	; (8002a80 <Tx_Verify+0x344>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4bc0      	ldr	r3, [pc, #768]	; (8002a84 <Tx_Verify+0x348>)
 8002784:	705a      	strb	r2, [r3, #1]
	txData[1] |= verifyDatalogger << 4;
 8002786:	4bbf      	ldr	r3, [pc, #764]	; (8002a84 <Tx_Verify+0x348>)
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	b25a      	sxtb	r2, r3
 800278c:	4bbe      	ldr	r3, [pc, #760]	; (8002a88 <Tx_Verify+0x34c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	b25b      	sxtb	r3, r3
 8002794:	4313      	orrs	r3, r2
 8002796:	b25b      	sxtb	r3, r3
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4bba      	ldr	r3, [pc, #744]	; (8002a84 <Tx_Verify+0x348>)
 800279c:	705a      	strb	r2, [r3, #1]

	if(flagRTC == RTC_OK)
 800279e:	4bbb      	ldr	r3, [pc, #748]	; (8002a8c <Tx_Verify+0x350>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <Tx_Verify+0x78>
		txData[1] |= (1 << 5);
 80027a6:	4bb7      	ldr	r3, [pc, #732]	; (8002a84 <Tx_Verify+0x348>)
 80027a8:	785b      	ldrb	r3, [r3, #1]
 80027aa:	f043 0320 	orr.w	r3, r3, #32
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	4bb4      	ldr	r3, [pc, #720]	; (8002a84 <Tx_Verify+0x348>)
 80027b2:	705a      	strb	r2, [r3, #1]

	__FREQ_TO_BUFFER(txData[2], perMsg[ANALOG_1_4]);
 80027b4:	4bb6      	ldr	r3, [pc, #728]	; (8002a90 <Tx_Verify+0x354>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027bc:	f000 8081 	beq.w	80028c2 <Tx_Verify+0x186>
 80027c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c4:	f300 80a9 	bgt.w	800291a <Tx_Verify+0x1de>
 80027c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027cc:	d07d      	beq.n	80028ca <Tx_Verify+0x18e>
 80027ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027d2:	f300 80a2 	bgt.w	800291a <Tx_Verify+0x1de>
 80027d6:	2bc8      	cmp	r3, #200	; 0xc8
 80027d8:	d07b      	beq.n	80028d2 <Tx_Verify+0x196>
 80027da:	2bc8      	cmp	r3, #200	; 0xc8
 80027dc:	f300 809d 	bgt.w	800291a <Tx_Verify+0x1de>
 80027e0:	2b32      	cmp	r3, #50	; 0x32
 80027e2:	dc6b      	bgt.n	80028bc <Tx_Verify+0x180>
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	f2c0 8098 	blt.w	800291a <Tx_Verify+0x1de>
 80027ea:	3b02      	subs	r3, #2
 80027ec:	2b30      	cmp	r3, #48	; 0x30
 80027ee:	f200 8094 	bhi.w	800291a <Tx_Verify+0x1de>
 80027f2:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <Tx_Verify+0xbc>)
 80027f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f8:	08002913 	.word	0x08002913
 80027fc:	0800290b 	.word	0x0800290b
 8002800:	0800291b 	.word	0x0800291b
 8002804:	08002903 	.word	0x08002903
 8002808:	0800291b 	.word	0x0800291b
 800280c:	0800291b 	.word	0x0800291b
 8002810:	0800291b 	.word	0x0800291b
 8002814:	0800291b 	.word	0x0800291b
 8002818:	080028fb 	.word	0x080028fb
 800281c:	0800291b 	.word	0x0800291b
 8002820:	0800291b 	.word	0x0800291b
 8002824:	0800291b 	.word	0x0800291b
 8002828:	0800291b 	.word	0x0800291b
 800282c:	0800291b 	.word	0x0800291b
 8002830:	0800291b 	.word	0x0800291b
 8002834:	0800291b 	.word	0x0800291b
 8002838:	0800291b 	.word	0x0800291b
 800283c:	0800291b 	.word	0x0800291b
 8002840:	080028f3 	.word	0x080028f3
 8002844:	0800291b 	.word	0x0800291b
 8002848:	0800291b 	.word	0x0800291b
 800284c:	0800291b 	.word	0x0800291b
 8002850:	0800291b 	.word	0x0800291b
 8002854:	0800291b 	.word	0x0800291b
 8002858:	0800291b 	.word	0x0800291b
 800285c:	0800291b 	.word	0x0800291b
 8002860:	0800291b 	.word	0x0800291b
 8002864:	0800291b 	.word	0x0800291b
 8002868:	0800291b 	.word	0x0800291b
 800286c:	0800291b 	.word	0x0800291b
 8002870:	0800291b 	.word	0x0800291b
 8002874:	0800291b 	.word	0x0800291b
 8002878:	0800291b 	.word	0x0800291b
 800287c:	0800291b 	.word	0x0800291b
 8002880:	0800291b 	.word	0x0800291b
 8002884:	0800291b 	.word	0x0800291b
 8002888:	0800291b 	.word	0x0800291b
 800288c:	0800291b 	.word	0x0800291b
 8002890:	080028eb 	.word	0x080028eb
 8002894:	0800291b 	.word	0x0800291b
 8002898:	0800291b 	.word	0x0800291b
 800289c:	0800291b 	.word	0x0800291b
 80028a0:	0800291b 	.word	0x0800291b
 80028a4:	0800291b 	.word	0x0800291b
 80028a8:	0800291b 	.word	0x0800291b
 80028ac:	0800291b 	.word	0x0800291b
 80028b0:	0800291b 	.word	0x0800291b
 80028b4:	0800291b 	.word	0x0800291b
 80028b8:	080028e3 	.word	0x080028e3
 80028bc:	2b64      	cmp	r3, #100	; 0x64
 80028be:	d00c      	beq.n	80028da <Tx_Verify+0x19e>
 80028c0:	e02b      	b.n	800291a <Tx_Verify+0x1de>
 80028c2:	4b70      	ldr	r3, [pc, #448]	; (8002a84 <Tx_Verify+0x348>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	709a      	strb	r2, [r3, #2]
 80028c8:	e02a      	b.n	8002920 <Tx_Verify+0x1e4>
 80028ca:	4b6e      	ldr	r3, [pc, #440]	; (8002a84 <Tx_Verify+0x348>)
 80028cc:	2202      	movs	r2, #2
 80028ce:	709a      	strb	r2, [r3, #2]
 80028d0:	e026      	b.n	8002920 <Tx_Verify+0x1e4>
 80028d2:	4b6c      	ldr	r3, [pc, #432]	; (8002a84 <Tx_Verify+0x348>)
 80028d4:	2203      	movs	r2, #3
 80028d6:	709a      	strb	r2, [r3, #2]
 80028d8:	e022      	b.n	8002920 <Tx_Verify+0x1e4>
 80028da:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <Tx_Verify+0x348>)
 80028dc:	2204      	movs	r2, #4
 80028de:	709a      	strb	r2, [r3, #2]
 80028e0:	e01e      	b.n	8002920 <Tx_Verify+0x1e4>
 80028e2:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <Tx_Verify+0x348>)
 80028e4:	2205      	movs	r2, #5
 80028e6:	709a      	strb	r2, [r3, #2]
 80028e8:	e01a      	b.n	8002920 <Tx_Verify+0x1e4>
 80028ea:	4b66      	ldr	r3, [pc, #408]	; (8002a84 <Tx_Verify+0x348>)
 80028ec:	2206      	movs	r2, #6
 80028ee:	709a      	strb	r2, [r3, #2]
 80028f0:	e016      	b.n	8002920 <Tx_Verify+0x1e4>
 80028f2:	4b64      	ldr	r3, [pc, #400]	; (8002a84 <Tx_Verify+0x348>)
 80028f4:	2207      	movs	r2, #7
 80028f6:	709a      	strb	r2, [r3, #2]
 80028f8:	e012      	b.n	8002920 <Tx_Verify+0x1e4>
 80028fa:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <Tx_Verify+0x348>)
 80028fc:	2208      	movs	r2, #8
 80028fe:	709a      	strb	r2, [r3, #2]
 8002900:	e00e      	b.n	8002920 <Tx_Verify+0x1e4>
 8002902:	4b60      	ldr	r3, [pc, #384]	; (8002a84 <Tx_Verify+0x348>)
 8002904:	2209      	movs	r2, #9
 8002906:	709a      	strb	r2, [r3, #2]
 8002908:	e00a      	b.n	8002920 <Tx_Verify+0x1e4>
 800290a:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <Tx_Verify+0x348>)
 800290c:	220a      	movs	r2, #10
 800290e:	709a      	strb	r2, [r3, #2]
 8002910:	e006      	b.n	8002920 <Tx_Verify+0x1e4>
 8002912:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <Tx_Verify+0x348>)
 8002914:	220b      	movs	r2, #11
 8002916:	709a      	strb	r2, [r3, #2]
 8002918:	e002      	b.n	8002920 <Tx_Verify+0x1e4>
 800291a:	4b5a      	ldr	r3, [pc, #360]	; (8002a84 <Tx_Verify+0x348>)
 800291c:	2200      	movs	r2, #0
 800291e:	709a      	strb	r2, [r3, #2]
 8002920:	bf00      	nop
	__FREQ_TO_BUFFER(txData[3], perMsg[ANALOG_5_8]);
 8002922:	4b5b      	ldr	r3, [pc, #364]	; (8002a90 <Tx_Verify+0x354>)
 8002924:	885b      	ldrh	r3, [r3, #2]
 8002926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800292a:	f000 8082 	beq.w	8002a32 <Tx_Verify+0x2f6>
 800292e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002932:	f300 80b7 	bgt.w	8002aa4 <Tx_Verify+0x368>
 8002936:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800293a:	d07e      	beq.n	8002a3a <Tx_Verify+0x2fe>
 800293c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002940:	f300 80b0 	bgt.w	8002aa4 <Tx_Verify+0x368>
 8002944:	2bc8      	cmp	r3, #200	; 0xc8
 8002946:	d07c      	beq.n	8002a42 <Tx_Verify+0x306>
 8002948:	2bc8      	cmp	r3, #200	; 0xc8
 800294a:	f300 80ab 	bgt.w	8002aa4 <Tx_Verify+0x368>
 800294e:	2b32      	cmp	r3, #50	; 0x32
 8002950:	dc6c      	bgt.n	8002a2c <Tx_Verify+0x2f0>
 8002952:	2b02      	cmp	r3, #2
 8002954:	f2c0 80a6 	blt.w	8002aa4 <Tx_Verify+0x368>
 8002958:	3b02      	subs	r3, #2
 800295a:	2b30      	cmp	r3, #48	; 0x30
 800295c:	f200 80a2 	bhi.w	8002aa4 <Tx_Verify+0x368>
 8002960:	a201      	add	r2, pc, #4	; (adr r2, 8002968 <Tx_Verify+0x22c>)
 8002962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002966:	bf00      	nop
 8002968:	08002a9d 	.word	0x08002a9d
 800296c:	08002a95 	.word	0x08002a95
 8002970:	08002aa5 	.word	0x08002aa5
 8002974:	08002a73 	.word	0x08002a73
 8002978:	08002aa5 	.word	0x08002aa5
 800297c:	08002aa5 	.word	0x08002aa5
 8002980:	08002aa5 	.word	0x08002aa5
 8002984:	08002aa5 	.word	0x08002aa5
 8002988:	08002a6b 	.word	0x08002a6b
 800298c:	08002aa5 	.word	0x08002aa5
 8002990:	08002aa5 	.word	0x08002aa5
 8002994:	08002aa5 	.word	0x08002aa5
 8002998:	08002aa5 	.word	0x08002aa5
 800299c:	08002aa5 	.word	0x08002aa5
 80029a0:	08002aa5 	.word	0x08002aa5
 80029a4:	08002aa5 	.word	0x08002aa5
 80029a8:	08002aa5 	.word	0x08002aa5
 80029ac:	08002aa5 	.word	0x08002aa5
 80029b0:	08002a63 	.word	0x08002a63
 80029b4:	08002aa5 	.word	0x08002aa5
 80029b8:	08002aa5 	.word	0x08002aa5
 80029bc:	08002aa5 	.word	0x08002aa5
 80029c0:	08002aa5 	.word	0x08002aa5
 80029c4:	08002aa5 	.word	0x08002aa5
 80029c8:	08002aa5 	.word	0x08002aa5
 80029cc:	08002aa5 	.word	0x08002aa5
 80029d0:	08002aa5 	.word	0x08002aa5
 80029d4:	08002aa5 	.word	0x08002aa5
 80029d8:	08002aa5 	.word	0x08002aa5
 80029dc:	08002aa5 	.word	0x08002aa5
 80029e0:	08002aa5 	.word	0x08002aa5
 80029e4:	08002aa5 	.word	0x08002aa5
 80029e8:	08002aa5 	.word	0x08002aa5
 80029ec:	08002aa5 	.word	0x08002aa5
 80029f0:	08002aa5 	.word	0x08002aa5
 80029f4:	08002aa5 	.word	0x08002aa5
 80029f8:	08002aa5 	.word	0x08002aa5
 80029fc:	08002aa5 	.word	0x08002aa5
 8002a00:	08002a5b 	.word	0x08002a5b
 8002a04:	08002aa5 	.word	0x08002aa5
 8002a08:	08002aa5 	.word	0x08002aa5
 8002a0c:	08002aa5 	.word	0x08002aa5
 8002a10:	08002aa5 	.word	0x08002aa5
 8002a14:	08002aa5 	.word	0x08002aa5
 8002a18:	08002aa5 	.word	0x08002aa5
 8002a1c:	08002aa5 	.word	0x08002aa5
 8002a20:	08002aa5 	.word	0x08002aa5
 8002a24:	08002aa5 	.word	0x08002aa5
 8002a28:	08002a53 	.word	0x08002a53
 8002a2c:	2b64      	cmp	r3, #100	; 0x64
 8002a2e:	d00c      	beq.n	8002a4a <Tx_Verify+0x30e>
 8002a30:	e038      	b.n	8002aa4 <Tx_Verify+0x368>
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <Tx_Verify+0x348>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	70da      	strb	r2, [r3, #3]
 8002a38:	e037      	b.n	8002aaa <Tx_Verify+0x36e>
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <Tx_Verify+0x348>)
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	70da      	strb	r2, [r3, #3]
 8002a40:	e033      	b.n	8002aaa <Tx_Verify+0x36e>
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <Tx_Verify+0x348>)
 8002a44:	2203      	movs	r2, #3
 8002a46:	70da      	strb	r2, [r3, #3]
 8002a48:	e02f      	b.n	8002aaa <Tx_Verify+0x36e>
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <Tx_Verify+0x348>)
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	70da      	strb	r2, [r3, #3]
 8002a50:	e02b      	b.n	8002aaa <Tx_Verify+0x36e>
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <Tx_Verify+0x348>)
 8002a54:	2205      	movs	r2, #5
 8002a56:	70da      	strb	r2, [r3, #3]
 8002a58:	e027      	b.n	8002aaa <Tx_Verify+0x36e>
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <Tx_Verify+0x348>)
 8002a5c:	2206      	movs	r2, #6
 8002a5e:	70da      	strb	r2, [r3, #3]
 8002a60:	e023      	b.n	8002aaa <Tx_Verify+0x36e>
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <Tx_Verify+0x348>)
 8002a64:	2207      	movs	r2, #7
 8002a66:	70da      	strb	r2, [r3, #3]
 8002a68:	e01f      	b.n	8002aaa <Tx_Verify+0x36e>
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <Tx_Verify+0x348>)
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	70da      	strb	r2, [r3, #3]
 8002a70:	e01b      	b.n	8002aaa <Tx_Verify+0x36e>
 8002a72:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <Tx_Verify+0x348>)
 8002a74:	2209      	movs	r2, #9
 8002a76:	70da      	strb	r2, [r3, #3]
 8002a78:	e017      	b.n	8002aaa <Tx_Verify+0x36e>
 8002a7a:	bf00      	nop
 8002a7c:	20000708 	.word	0x20000708
 8002a80:	20000824 	.word	0x20000824
 8002a84:	20000770 	.word	0x20000770
 8002a88:	20000705 	.word	0x20000705
 8002a8c:	200018a3 	.word	0x200018a3
 8002a90:	20001dec 	.word	0x20001dec
 8002a94:	4bbb      	ldr	r3, [pc, #748]	; (8002d84 <Tx_Verify+0x648>)
 8002a96:	220a      	movs	r2, #10
 8002a98:	70da      	strb	r2, [r3, #3]
 8002a9a:	e006      	b.n	8002aaa <Tx_Verify+0x36e>
 8002a9c:	4bb9      	ldr	r3, [pc, #740]	; (8002d84 <Tx_Verify+0x648>)
 8002a9e:	220b      	movs	r2, #11
 8002aa0:	70da      	strb	r2, [r3, #3]
 8002aa2:	e002      	b.n	8002aaa <Tx_Verify+0x36e>
 8002aa4:	4bb7      	ldr	r3, [pc, #732]	; (8002d84 <Tx_Verify+0x648>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	70da      	strb	r2, [r3, #3]
 8002aaa:	bf00      	nop
	__FREQ_TO_BUFFER(txData[4], perMsg[ANALOG_9_12]);
 8002aac:	4bb6      	ldr	r3, [pc, #728]	; (8002d88 <Tx_Verify+0x64c>)
 8002aae:	889b      	ldrh	r3, [r3, #4]
 8002ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab4:	f000 8081 	beq.w	8002bba <Tx_Verify+0x47e>
 8002ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002abc:	f300 80a9 	bgt.w	8002c12 <Tx_Verify+0x4d6>
 8002ac0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ac4:	d07d      	beq.n	8002bc2 <Tx_Verify+0x486>
 8002ac6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002aca:	f300 80a2 	bgt.w	8002c12 <Tx_Verify+0x4d6>
 8002ace:	2bc8      	cmp	r3, #200	; 0xc8
 8002ad0:	d07b      	beq.n	8002bca <Tx_Verify+0x48e>
 8002ad2:	2bc8      	cmp	r3, #200	; 0xc8
 8002ad4:	f300 809d 	bgt.w	8002c12 <Tx_Verify+0x4d6>
 8002ad8:	2b32      	cmp	r3, #50	; 0x32
 8002ada:	dc6b      	bgt.n	8002bb4 <Tx_Verify+0x478>
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	f2c0 8098 	blt.w	8002c12 <Tx_Verify+0x4d6>
 8002ae2:	3b02      	subs	r3, #2
 8002ae4:	2b30      	cmp	r3, #48	; 0x30
 8002ae6:	f200 8094 	bhi.w	8002c12 <Tx_Verify+0x4d6>
 8002aea:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <Tx_Verify+0x3b4>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002c0b 	.word	0x08002c0b
 8002af4:	08002c03 	.word	0x08002c03
 8002af8:	08002c13 	.word	0x08002c13
 8002afc:	08002bfb 	.word	0x08002bfb
 8002b00:	08002c13 	.word	0x08002c13
 8002b04:	08002c13 	.word	0x08002c13
 8002b08:	08002c13 	.word	0x08002c13
 8002b0c:	08002c13 	.word	0x08002c13
 8002b10:	08002bf3 	.word	0x08002bf3
 8002b14:	08002c13 	.word	0x08002c13
 8002b18:	08002c13 	.word	0x08002c13
 8002b1c:	08002c13 	.word	0x08002c13
 8002b20:	08002c13 	.word	0x08002c13
 8002b24:	08002c13 	.word	0x08002c13
 8002b28:	08002c13 	.word	0x08002c13
 8002b2c:	08002c13 	.word	0x08002c13
 8002b30:	08002c13 	.word	0x08002c13
 8002b34:	08002c13 	.word	0x08002c13
 8002b38:	08002beb 	.word	0x08002beb
 8002b3c:	08002c13 	.word	0x08002c13
 8002b40:	08002c13 	.word	0x08002c13
 8002b44:	08002c13 	.word	0x08002c13
 8002b48:	08002c13 	.word	0x08002c13
 8002b4c:	08002c13 	.word	0x08002c13
 8002b50:	08002c13 	.word	0x08002c13
 8002b54:	08002c13 	.word	0x08002c13
 8002b58:	08002c13 	.word	0x08002c13
 8002b5c:	08002c13 	.word	0x08002c13
 8002b60:	08002c13 	.word	0x08002c13
 8002b64:	08002c13 	.word	0x08002c13
 8002b68:	08002c13 	.word	0x08002c13
 8002b6c:	08002c13 	.word	0x08002c13
 8002b70:	08002c13 	.word	0x08002c13
 8002b74:	08002c13 	.word	0x08002c13
 8002b78:	08002c13 	.word	0x08002c13
 8002b7c:	08002c13 	.word	0x08002c13
 8002b80:	08002c13 	.word	0x08002c13
 8002b84:	08002c13 	.word	0x08002c13
 8002b88:	08002be3 	.word	0x08002be3
 8002b8c:	08002c13 	.word	0x08002c13
 8002b90:	08002c13 	.word	0x08002c13
 8002b94:	08002c13 	.word	0x08002c13
 8002b98:	08002c13 	.word	0x08002c13
 8002b9c:	08002c13 	.word	0x08002c13
 8002ba0:	08002c13 	.word	0x08002c13
 8002ba4:	08002c13 	.word	0x08002c13
 8002ba8:	08002c13 	.word	0x08002c13
 8002bac:	08002c13 	.word	0x08002c13
 8002bb0:	08002bdb 	.word	0x08002bdb
 8002bb4:	2b64      	cmp	r3, #100	; 0x64
 8002bb6:	d00c      	beq.n	8002bd2 <Tx_Verify+0x496>
 8002bb8:	e02b      	b.n	8002c12 <Tx_Verify+0x4d6>
 8002bba:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <Tx_Verify+0x648>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	711a      	strb	r2, [r3, #4]
 8002bc0:	e02a      	b.n	8002c18 <Tx_Verify+0x4dc>
 8002bc2:	4b70      	ldr	r3, [pc, #448]	; (8002d84 <Tx_Verify+0x648>)
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	711a      	strb	r2, [r3, #4]
 8002bc8:	e026      	b.n	8002c18 <Tx_Verify+0x4dc>
 8002bca:	4b6e      	ldr	r3, [pc, #440]	; (8002d84 <Tx_Verify+0x648>)
 8002bcc:	2203      	movs	r2, #3
 8002bce:	711a      	strb	r2, [r3, #4]
 8002bd0:	e022      	b.n	8002c18 <Tx_Verify+0x4dc>
 8002bd2:	4b6c      	ldr	r3, [pc, #432]	; (8002d84 <Tx_Verify+0x648>)
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	711a      	strb	r2, [r3, #4]
 8002bd8:	e01e      	b.n	8002c18 <Tx_Verify+0x4dc>
 8002bda:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <Tx_Verify+0x648>)
 8002bdc:	2205      	movs	r2, #5
 8002bde:	711a      	strb	r2, [r3, #4]
 8002be0:	e01a      	b.n	8002c18 <Tx_Verify+0x4dc>
 8002be2:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <Tx_Verify+0x648>)
 8002be4:	2206      	movs	r2, #6
 8002be6:	711a      	strb	r2, [r3, #4]
 8002be8:	e016      	b.n	8002c18 <Tx_Verify+0x4dc>
 8002bea:	4b66      	ldr	r3, [pc, #408]	; (8002d84 <Tx_Verify+0x648>)
 8002bec:	2207      	movs	r2, #7
 8002bee:	711a      	strb	r2, [r3, #4]
 8002bf0:	e012      	b.n	8002c18 <Tx_Verify+0x4dc>
 8002bf2:	4b64      	ldr	r3, [pc, #400]	; (8002d84 <Tx_Verify+0x648>)
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	711a      	strb	r2, [r3, #4]
 8002bf8:	e00e      	b.n	8002c18 <Tx_Verify+0x4dc>
 8002bfa:	4b62      	ldr	r3, [pc, #392]	; (8002d84 <Tx_Verify+0x648>)
 8002bfc:	2209      	movs	r2, #9
 8002bfe:	711a      	strb	r2, [r3, #4]
 8002c00:	e00a      	b.n	8002c18 <Tx_Verify+0x4dc>
 8002c02:	4b60      	ldr	r3, [pc, #384]	; (8002d84 <Tx_Verify+0x648>)
 8002c04:	220a      	movs	r2, #10
 8002c06:	711a      	strb	r2, [r3, #4]
 8002c08:	e006      	b.n	8002c18 <Tx_Verify+0x4dc>
 8002c0a:	4b5e      	ldr	r3, [pc, #376]	; (8002d84 <Tx_Verify+0x648>)
 8002c0c:	220b      	movs	r2, #11
 8002c0e:	711a      	strb	r2, [r3, #4]
 8002c10:	e002      	b.n	8002c18 <Tx_Verify+0x4dc>
 8002c12:	4b5c      	ldr	r3, [pc, #368]	; (8002d84 <Tx_Verify+0x648>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	711a      	strb	r2, [r3, #4]
 8002c18:	bf00      	nop
	__FREQ_TO_BUFFER(txData[5], perMsg[RTC_MSG]);
 8002c1a:	4b5b      	ldr	r3, [pc, #364]	; (8002d88 <Tx_Verify+0x64c>)
 8002c1c:	88db      	ldrh	r3, [r3, #6]
 8002c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c22:	f000 8082 	beq.w	8002d2a <Tx_Verify+0x5ee>
 8002c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c2a:	f300 80af 	bgt.w	8002d8c <Tx_Verify+0x650>
 8002c2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c32:	d07e      	beq.n	8002d32 <Tx_Verify+0x5f6>
 8002c34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c38:	f300 80a8 	bgt.w	8002d8c <Tx_Verify+0x650>
 8002c3c:	2bc8      	cmp	r3, #200	; 0xc8
 8002c3e:	d07c      	beq.n	8002d3a <Tx_Verify+0x5fe>
 8002c40:	2bc8      	cmp	r3, #200	; 0xc8
 8002c42:	f300 80a3 	bgt.w	8002d8c <Tx_Verify+0x650>
 8002c46:	2b32      	cmp	r3, #50	; 0x32
 8002c48:	dc6c      	bgt.n	8002d24 <Tx_Verify+0x5e8>
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	f2c0 809e 	blt.w	8002d8c <Tx_Verify+0x650>
 8002c50:	3b02      	subs	r3, #2
 8002c52:	2b30      	cmp	r3, #48	; 0x30
 8002c54:	f200 809a 	bhi.w	8002d8c <Tx_Verify+0x650>
 8002c58:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <Tx_Verify+0x524>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002d7b 	.word	0x08002d7b
 8002c64:	08002d73 	.word	0x08002d73
 8002c68:	08002d8d 	.word	0x08002d8d
 8002c6c:	08002d6b 	.word	0x08002d6b
 8002c70:	08002d8d 	.word	0x08002d8d
 8002c74:	08002d8d 	.word	0x08002d8d
 8002c78:	08002d8d 	.word	0x08002d8d
 8002c7c:	08002d8d 	.word	0x08002d8d
 8002c80:	08002d63 	.word	0x08002d63
 8002c84:	08002d8d 	.word	0x08002d8d
 8002c88:	08002d8d 	.word	0x08002d8d
 8002c8c:	08002d8d 	.word	0x08002d8d
 8002c90:	08002d8d 	.word	0x08002d8d
 8002c94:	08002d8d 	.word	0x08002d8d
 8002c98:	08002d8d 	.word	0x08002d8d
 8002c9c:	08002d8d 	.word	0x08002d8d
 8002ca0:	08002d8d 	.word	0x08002d8d
 8002ca4:	08002d8d 	.word	0x08002d8d
 8002ca8:	08002d5b 	.word	0x08002d5b
 8002cac:	08002d8d 	.word	0x08002d8d
 8002cb0:	08002d8d 	.word	0x08002d8d
 8002cb4:	08002d8d 	.word	0x08002d8d
 8002cb8:	08002d8d 	.word	0x08002d8d
 8002cbc:	08002d8d 	.word	0x08002d8d
 8002cc0:	08002d8d 	.word	0x08002d8d
 8002cc4:	08002d8d 	.word	0x08002d8d
 8002cc8:	08002d8d 	.word	0x08002d8d
 8002ccc:	08002d8d 	.word	0x08002d8d
 8002cd0:	08002d8d 	.word	0x08002d8d
 8002cd4:	08002d8d 	.word	0x08002d8d
 8002cd8:	08002d8d 	.word	0x08002d8d
 8002cdc:	08002d8d 	.word	0x08002d8d
 8002ce0:	08002d8d 	.word	0x08002d8d
 8002ce4:	08002d8d 	.word	0x08002d8d
 8002ce8:	08002d8d 	.word	0x08002d8d
 8002cec:	08002d8d 	.word	0x08002d8d
 8002cf0:	08002d8d 	.word	0x08002d8d
 8002cf4:	08002d8d 	.word	0x08002d8d
 8002cf8:	08002d53 	.word	0x08002d53
 8002cfc:	08002d8d 	.word	0x08002d8d
 8002d00:	08002d8d 	.word	0x08002d8d
 8002d04:	08002d8d 	.word	0x08002d8d
 8002d08:	08002d8d 	.word	0x08002d8d
 8002d0c:	08002d8d 	.word	0x08002d8d
 8002d10:	08002d8d 	.word	0x08002d8d
 8002d14:	08002d8d 	.word	0x08002d8d
 8002d18:	08002d8d 	.word	0x08002d8d
 8002d1c:	08002d8d 	.word	0x08002d8d
 8002d20:	08002d4b 	.word	0x08002d4b
 8002d24:	2b64      	cmp	r3, #100	; 0x64
 8002d26:	d00c      	beq.n	8002d42 <Tx_Verify+0x606>
 8002d28:	e030      	b.n	8002d8c <Tx_Verify+0x650>
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <Tx_Verify+0x648>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	715a      	strb	r2, [r3, #5]
 8002d30:	e02f      	b.n	8002d92 <Tx_Verify+0x656>
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <Tx_Verify+0x648>)
 8002d34:	2202      	movs	r2, #2
 8002d36:	715a      	strb	r2, [r3, #5]
 8002d38:	e02b      	b.n	8002d92 <Tx_Verify+0x656>
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <Tx_Verify+0x648>)
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	715a      	strb	r2, [r3, #5]
 8002d40:	e027      	b.n	8002d92 <Tx_Verify+0x656>
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <Tx_Verify+0x648>)
 8002d44:	2204      	movs	r2, #4
 8002d46:	715a      	strb	r2, [r3, #5]
 8002d48:	e023      	b.n	8002d92 <Tx_Verify+0x656>
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <Tx_Verify+0x648>)
 8002d4c:	2205      	movs	r2, #5
 8002d4e:	715a      	strb	r2, [r3, #5]
 8002d50:	e01f      	b.n	8002d92 <Tx_Verify+0x656>
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <Tx_Verify+0x648>)
 8002d54:	2206      	movs	r2, #6
 8002d56:	715a      	strb	r2, [r3, #5]
 8002d58:	e01b      	b.n	8002d92 <Tx_Verify+0x656>
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <Tx_Verify+0x648>)
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	715a      	strb	r2, [r3, #5]
 8002d60:	e017      	b.n	8002d92 <Tx_Verify+0x656>
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <Tx_Verify+0x648>)
 8002d64:	2208      	movs	r2, #8
 8002d66:	715a      	strb	r2, [r3, #5]
 8002d68:	e013      	b.n	8002d92 <Tx_Verify+0x656>
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <Tx_Verify+0x648>)
 8002d6c:	2209      	movs	r2, #9
 8002d6e:	715a      	strb	r2, [r3, #5]
 8002d70:	e00f      	b.n	8002d92 <Tx_Verify+0x656>
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <Tx_Verify+0x648>)
 8002d74:	220a      	movs	r2, #10
 8002d76:	715a      	strb	r2, [r3, #5]
 8002d78:	e00b      	b.n	8002d92 <Tx_Verify+0x656>
 8002d7a:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <Tx_Verify+0x648>)
 8002d7c:	220b      	movs	r2, #11
 8002d7e:	715a      	strb	r2, [r3, #5]
 8002d80:	e007      	b.n	8002d92 <Tx_Verify+0x656>
 8002d82:	bf00      	nop
 8002d84:	20000770 	.word	0x20000770
 8002d88:	20001dec 	.word	0x20001dec
 8002d8c:	4bb7      	ldr	r3, [pc, #732]	; (800306c <Tx_Verify+0x930>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	715a      	strb	r2, [r3, #5]
 8002d92:	bf00      	nop
	__FREQ_TO_BUFFER(txData[6], perMsg[PDM_SAVE]);
 8002d94:	4bb6      	ldr	r3, [pc, #728]	; (8003070 <Tx_Verify+0x934>)
 8002d96:	89db      	ldrh	r3, [r3, #14]
 8002d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9c:	f000 8081 	beq.w	8002ea2 <Tx_Verify+0x766>
 8002da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002da4:	f300 80a9 	bgt.w	8002efa <Tx_Verify+0x7be>
 8002da8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dac:	d07d      	beq.n	8002eaa <Tx_Verify+0x76e>
 8002dae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002db2:	f300 80a2 	bgt.w	8002efa <Tx_Verify+0x7be>
 8002db6:	2bc8      	cmp	r3, #200	; 0xc8
 8002db8:	d07b      	beq.n	8002eb2 <Tx_Verify+0x776>
 8002dba:	2bc8      	cmp	r3, #200	; 0xc8
 8002dbc:	f300 809d 	bgt.w	8002efa <Tx_Verify+0x7be>
 8002dc0:	2b32      	cmp	r3, #50	; 0x32
 8002dc2:	dc6b      	bgt.n	8002e9c <Tx_Verify+0x760>
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	f2c0 8098 	blt.w	8002efa <Tx_Verify+0x7be>
 8002dca:	3b02      	subs	r3, #2
 8002dcc:	2b30      	cmp	r3, #48	; 0x30
 8002dce:	f200 8094 	bhi.w	8002efa <Tx_Verify+0x7be>
 8002dd2:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <Tx_Verify+0x69c>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002ef3 	.word	0x08002ef3
 8002ddc:	08002eeb 	.word	0x08002eeb
 8002de0:	08002efb 	.word	0x08002efb
 8002de4:	08002ee3 	.word	0x08002ee3
 8002de8:	08002efb 	.word	0x08002efb
 8002dec:	08002efb 	.word	0x08002efb
 8002df0:	08002efb 	.word	0x08002efb
 8002df4:	08002efb 	.word	0x08002efb
 8002df8:	08002edb 	.word	0x08002edb
 8002dfc:	08002efb 	.word	0x08002efb
 8002e00:	08002efb 	.word	0x08002efb
 8002e04:	08002efb 	.word	0x08002efb
 8002e08:	08002efb 	.word	0x08002efb
 8002e0c:	08002efb 	.word	0x08002efb
 8002e10:	08002efb 	.word	0x08002efb
 8002e14:	08002efb 	.word	0x08002efb
 8002e18:	08002efb 	.word	0x08002efb
 8002e1c:	08002efb 	.word	0x08002efb
 8002e20:	08002ed3 	.word	0x08002ed3
 8002e24:	08002efb 	.word	0x08002efb
 8002e28:	08002efb 	.word	0x08002efb
 8002e2c:	08002efb 	.word	0x08002efb
 8002e30:	08002efb 	.word	0x08002efb
 8002e34:	08002efb 	.word	0x08002efb
 8002e38:	08002efb 	.word	0x08002efb
 8002e3c:	08002efb 	.word	0x08002efb
 8002e40:	08002efb 	.word	0x08002efb
 8002e44:	08002efb 	.word	0x08002efb
 8002e48:	08002efb 	.word	0x08002efb
 8002e4c:	08002efb 	.word	0x08002efb
 8002e50:	08002efb 	.word	0x08002efb
 8002e54:	08002efb 	.word	0x08002efb
 8002e58:	08002efb 	.word	0x08002efb
 8002e5c:	08002efb 	.word	0x08002efb
 8002e60:	08002efb 	.word	0x08002efb
 8002e64:	08002efb 	.word	0x08002efb
 8002e68:	08002efb 	.word	0x08002efb
 8002e6c:	08002efb 	.word	0x08002efb
 8002e70:	08002ecb 	.word	0x08002ecb
 8002e74:	08002efb 	.word	0x08002efb
 8002e78:	08002efb 	.word	0x08002efb
 8002e7c:	08002efb 	.word	0x08002efb
 8002e80:	08002efb 	.word	0x08002efb
 8002e84:	08002efb 	.word	0x08002efb
 8002e88:	08002efb 	.word	0x08002efb
 8002e8c:	08002efb 	.word	0x08002efb
 8002e90:	08002efb 	.word	0x08002efb
 8002e94:	08002efb 	.word	0x08002efb
 8002e98:	08002ec3 	.word	0x08002ec3
 8002e9c:	2b64      	cmp	r3, #100	; 0x64
 8002e9e:	d00c      	beq.n	8002eba <Tx_Verify+0x77e>
 8002ea0:	e02b      	b.n	8002efa <Tx_Verify+0x7be>
 8002ea2:	4b72      	ldr	r3, [pc, #456]	; (800306c <Tx_Verify+0x930>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	719a      	strb	r2, [r3, #6]
 8002ea8:	e02a      	b.n	8002f00 <Tx_Verify+0x7c4>
 8002eaa:	4b70      	ldr	r3, [pc, #448]	; (800306c <Tx_Verify+0x930>)
 8002eac:	2202      	movs	r2, #2
 8002eae:	719a      	strb	r2, [r3, #6]
 8002eb0:	e026      	b.n	8002f00 <Tx_Verify+0x7c4>
 8002eb2:	4b6e      	ldr	r3, [pc, #440]	; (800306c <Tx_Verify+0x930>)
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	719a      	strb	r2, [r3, #6]
 8002eb8:	e022      	b.n	8002f00 <Tx_Verify+0x7c4>
 8002eba:	4b6c      	ldr	r3, [pc, #432]	; (800306c <Tx_Verify+0x930>)
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	719a      	strb	r2, [r3, #6]
 8002ec0:	e01e      	b.n	8002f00 <Tx_Verify+0x7c4>
 8002ec2:	4b6a      	ldr	r3, [pc, #424]	; (800306c <Tx_Verify+0x930>)
 8002ec4:	2205      	movs	r2, #5
 8002ec6:	719a      	strb	r2, [r3, #6]
 8002ec8:	e01a      	b.n	8002f00 <Tx_Verify+0x7c4>
 8002eca:	4b68      	ldr	r3, [pc, #416]	; (800306c <Tx_Verify+0x930>)
 8002ecc:	2206      	movs	r2, #6
 8002ece:	719a      	strb	r2, [r3, #6]
 8002ed0:	e016      	b.n	8002f00 <Tx_Verify+0x7c4>
 8002ed2:	4b66      	ldr	r3, [pc, #408]	; (800306c <Tx_Verify+0x930>)
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	719a      	strb	r2, [r3, #6]
 8002ed8:	e012      	b.n	8002f00 <Tx_Verify+0x7c4>
 8002eda:	4b64      	ldr	r3, [pc, #400]	; (800306c <Tx_Verify+0x930>)
 8002edc:	2208      	movs	r2, #8
 8002ede:	719a      	strb	r2, [r3, #6]
 8002ee0:	e00e      	b.n	8002f00 <Tx_Verify+0x7c4>
 8002ee2:	4b62      	ldr	r3, [pc, #392]	; (800306c <Tx_Verify+0x930>)
 8002ee4:	2209      	movs	r2, #9
 8002ee6:	719a      	strb	r2, [r3, #6]
 8002ee8:	e00a      	b.n	8002f00 <Tx_Verify+0x7c4>
 8002eea:	4b60      	ldr	r3, [pc, #384]	; (800306c <Tx_Verify+0x930>)
 8002eec:	220a      	movs	r2, #10
 8002eee:	719a      	strb	r2, [r3, #6]
 8002ef0:	e006      	b.n	8002f00 <Tx_Verify+0x7c4>
 8002ef2:	4b5e      	ldr	r3, [pc, #376]	; (800306c <Tx_Verify+0x930>)
 8002ef4:	220b      	movs	r2, #11
 8002ef6:	719a      	strb	r2, [r3, #6]
 8002ef8:	e002      	b.n	8002f00 <Tx_Verify+0x7c4>
 8002efa:	4b5c      	ldr	r3, [pc, #368]	; (800306c <Tx_Verify+0x930>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	719a      	strb	r2, [r3, #6]
 8002f00:	bf00      	nop
	__FREQ_TO_BUFFER(txData[7], perMsg[ECU_SAVE]);
 8002f02:	4b5b      	ldr	r3, [pc, #364]	; (8003070 <Tx_Verify+0x934>)
 8002f04:	899b      	ldrh	r3, [r3, #12]
 8002f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f0a:	f000 8082 	beq.w	8003012 <Tx_Verify+0x8d6>
 8002f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f12:	f300 80af 	bgt.w	8003074 <Tx_Verify+0x938>
 8002f16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f1a:	d07e      	beq.n	800301a <Tx_Verify+0x8de>
 8002f1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f20:	f300 80a8 	bgt.w	8003074 <Tx_Verify+0x938>
 8002f24:	2bc8      	cmp	r3, #200	; 0xc8
 8002f26:	d07c      	beq.n	8003022 <Tx_Verify+0x8e6>
 8002f28:	2bc8      	cmp	r3, #200	; 0xc8
 8002f2a:	f300 80a3 	bgt.w	8003074 <Tx_Verify+0x938>
 8002f2e:	2b32      	cmp	r3, #50	; 0x32
 8002f30:	dc6c      	bgt.n	800300c <Tx_Verify+0x8d0>
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	f2c0 809e 	blt.w	8003074 <Tx_Verify+0x938>
 8002f38:	3b02      	subs	r3, #2
 8002f3a:	2b30      	cmp	r3, #48	; 0x30
 8002f3c:	f200 809a 	bhi.w	8003074 <Tx_Verify+0x938>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <Tx_Verify+0x80c>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08003063 	.word	0x08003063
 8002f4c:	0800305b 	.word	0x0800305b
 8002f50:	08003075 	.word	0x08003075
 8002f54:	08003053 	.word	0x08003053
 8002f58:	08003075 	.word	0x08003075
 8002f5c:	08003075 	.word	0x08003075
 8002f60:	08003075 	.word	0x08003075
 8002f64:	08003075 	.word	0x08003075
 8002f68:	0800304b 	.word	0x0800304b
 8002f6c:	08003075 	.word	0x08003075
 8002f70:	08003075 	.word	0x08003075
 8002f74:	08003075 	.word	0x08003075
 8002f78:	08003075 	.word	0x08003075
 8002f7c:	08003075 	.word	0x08003075
 8002f80:	08003075 	.word	0x08003075
 8002f84:	08003075 	.word	0x08003075
 8002f88:	08003075 	.word	0x08003075
 8002f8c:	08003075 	.word	0x08003075
 8002f90:	08003043 	.word	0x08003043
 8002f94:	08003075 	.word	0x08003075
 8002f98:	08003075 	.word	0x08003075
 8002f9c:	08003075 	.word	0x08003075
 8002fa0:	08003075 	.word	0x08003075
 8002fa4:	08003075 	.word	0x08003075
 8002fa8:	08003075 	.word	0x08003075
 8002fac:	08003075 	.word	0x08003075
 8002fb0:	08003075 	.word	0x08003075
 8002fb4:	08003075 	.word	0x08003075
 8002fb8:	08003075 	.word	0x08003075
 8002fbc:	08003075 	.word	0x08003075
 8002fc0:	08003075 	.word	0x08003075
 8002fc4:	08003075 	.word	0x08003075
 8002fc8:	08003075 	.word	0x08003075
 8002fcc:	08003075 	.word	0x08003075
 8002fd0:	08003075 	.word	0x08003075
 8002fd4:	08003075 	.word	0x08003075
 8002fd8:	08003075 	.word	0x08003075
 8002fdc:	08003075 	.word	0x08003075
 8002fe0:	0800303b 	.word	0x0800303b
 8002fe4:	08003075 	.word	0x08003075
 8002fe8:	08003075 	.word	0x08003075
 8002fec:	08003075 	.word	0x08003075
 8002ff0:	08003075 	.word	0x08003075
 8002ff4:	08003075 	.word	0x08003075
 8002ff8:	08003075 	.word	0x08003075
 8002ffc:	08003075 	.word	0x08003075
 8003000:	08003075 	.word	0x08003075
 8003004:	08003075 	.word	0x08003075
 8003008:	08003033 	.word	0x08003033
 800300c:	2b64      	cmp	r3, #100	; 0x64
 800300e:	d00c      	beq.n	800302a <Tx_Verify+0x8ee>
 8003010:	e030      	b.n	8003074 <Tx_Verify+0x938>
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <Tx_Verify+0x930>)
 8003014:	2201      	movs	r2, #1
 8003016:	71da      	strb	r2, [r3, #7]
 8003018:	e02f      	b.n	800307a <Tx_Verify+0x93e>
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <Tx_Verify+0x930>)
 800301c:	2202      	movs	r2, #2
 800301e:	71da      	strb	r2, [r3, #7]
 8003020:	e02b      	b.n	800307a <Tx_Verify+0x93e>
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <Tx_Verify+0x930>)
 8003024:	2203      	movs	r2, #3
 8003026:	71da      	strb	r2, [r3, #7]
 8003028:	e027      	b.n	800307a <Tx_Verify+0x93e>
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <Tx_Verify+0x930>)
 800302c:	2204      	movs	r2, #4
 800302e:	71da      	strb	r2, [r3, #7]
 8003030:	e023      	b.n	800307a <Tx_Verify+0x93e>
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <Tx_Verify+0x930>)
 8003034:	2205      	movs	r2, #5
 8003036:	71da      	strb	r2, [r3, #7]
 8003038:	e01f      	b.n	800307a <Tx_Verify+0x93e>
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <Tx_Verify+0x930>)
 800303c:	2206      	movs	r2, #6
 800303e:	71da      	strb	r2, [r3, #7]
 8003040:	e01b      	b.n	800307a <Tx_Verify+0x93e>
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <Tx_Verify+0x930>)
 8003044:	2207      	movs	r2, #7
 8003046:	71da      	strb	r2, [r3, #7]
 8003048:	e017      	b.n	800307a <Tx_Verify+0x93e>
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <Tx_Verify+0x930>)
 800304c:	2208      	movs	r2, #8
 800304e:	71da      	strb	r2, [r3, #7]
 8003050:	e013      	b.n	800307a <Tx_Verify+0x93e>
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <Tx_Verify+0x930>)
 8003054:	2209      	movs	r2, #9
 8003056:	71da      	strb	r2, [r3, #7]
 8003058:	e00f      	b.n	800307a <Tx_Verify+0x93e>
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <Tx_Verify+0x930>)
 800305c:	220a      	movs	r2, #10
 800305e:	71da      	strb	r2, [r3, #7]
 8003060:	e00b      	b.n	800307a <Tx_Verify+0x93e>
 8003062:	4b02      	ldr	r3, [pc, #8]	; (800306c <Tx_Verify+0x930>)
 8003064:	220b      	movs	r2, #11
 8003066:	71da      	strb	r2, [r3, #7]
 8003068:	e007      	b.n	800307a <Tx_Verify+0x93e>
 800306a:	bf00      	nop
 800306c:	20000770 	.word	0x20000770
 8003070:	20001dec 	.word	0x20001dec
 8003074:	4b26      	ldr	r3, [pc, #152]	; (8003110 <Tx_Verify+0x9d4>)
 8003076:	2200      	movs	r2, #0
 8003078:	71da      	strb	r2, [r3, #7]
 800307a:	bf00      	nop

	if(flagDatalogger == DL_SAVE)
 800307c:	4b25      	ldr	r3, [pc, #148]	; (8003114 <Tx_Verify+0x9d8>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d108      	bne.n	8003096 <Tx_Verify+0x95a>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &fileStruct);
 8003084:	4b24      	ldr	r3, [pc, #144]	; (8003118 <Tx_Verify+0x9dc>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	4b23      	ldr	r3, [pc, #140]	; (8003118 <Tx_Verify+0x9dc>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	b2d9      	uxtb	r1, r3
 800308e:	4b23      	ldr	r3, [pc, #140]	; (800311c <Tx_Verify+0x9e0>)
 8003090:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <Tx_Verify+0x9d4>)
 8003092:	f002 fe81 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	if((accCAN[VERIFY_MSG] >= perCAN[VERIFY_MSG]) && (perCAN[VERIFY_MSG] != MSG_DISABLED))
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <Tx_Verify+0x9e4>)
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	4a22      	ldr	r2, [pc, #136]	; (8003124 <Tx_Verify+0x9e8>)
 800309c:	8912      	ldrh	r2, [r2, #8]
 800309e:	4293      	cmp	r3, r2
 80030a0:	d331      	bcc.n	8003106 <Tx_Verify+0x9ca>
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <Tx_Verify+0x9e8>)
 80030a4:	891b      	ldrh	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d02d      	beq.n	8003106 <Tx_Verify+0x9ca>
	{
		accCAN[VERIFY_MSG] -= perCAN[VERIFY_MSG];
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <Tx_Verify+0x9e4>)
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <Tx_Verify+0x9e8>)
 80030b0:	8912      	ldrh	r2, [r2, #8]
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <Tx_Verify+0x9e4>)
 80030b6:	6113      	str	r3, [r2, #16]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80030b8:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <Tx_Verify+0x9ec>)
 80030ba:	4a15      	ldr	r2, [pc, #84]	; (8003110 <Tx_Verify+0x9d4>)
 80030bc:	4916      	ldr	r1, [pc, #88]	; (8003118 <Tx_Verify+0x9dc>)
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f004 fb8e 	bl	80077e0 <HAL_CAN_AddTxMessage>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d107      	bne.n	80030da <Tx_Verify+0x99e>
			verifyCAN |= 1;
 80030ca:	4b18      	ldr	r3, [pc, #96]	; (800312c <Tx_Verify+0x9f0>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b15      	ldr	r3, [pc, #84]	; (800312c <Tx_Verify+0x9f0>)
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e006      	b.n	80030e8 <Tx_Verify+0x9ac>
		else
			verifyCAN &= 0x02;
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <Tx_Verify+0x9f0>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <Tx_Verify+0x9f0>)
 80030e6:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80030e8:	2300      	movs	r3, #0
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	e002      	b.n	80030f4 <Tx_Verify+0x9b8>
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	3301      	adds	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f004 fc4e 	bl	8007996 <HAL_CAN_GetTxMailboxesFreeLevel>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d002      	beq.n	8003106 <Tx_Verify+0x9ca>
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d9f3      	bls.n	80030ee <Tx_Verify+0x9b2>
	}
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000770 	.word	0x20000770
 8003114:	20002e80 	.word	0x20002e80
 8003118:	20000708 	.word	0x20000708
 800311c:	20001e54 	.word	0x20001e54
 8003120:	20000720 	.word	0x20000720
 8003124:	200018ec 	.word	0x200018ec
 8003128:	20001e50 	.word	0x20001e50
 800312c:	20000866 	.word	0x20000866

08003130 <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	uint16_t buffer[3];

	txHeader.IDE = CAN_ID_STD;
 8003138:	4b47      	ldr	r3, [pc, #284]	; (8003258 <Tx_Beacon+0x128>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800313e:	4b46      	ldr	r3, [pc, #280]	; (8003258 <Tx_Beacon+0x128>)
 8003140:	2200      	movs	r2, #0
 8003142:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8003144:	4b44      	ldr	r3, [pc, #272]	; (8003258 <Tx_Beacon+0x128>)
 8003146:	2200      	movs	r2, #0
 8003148:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | BEACON_ID;
 800314a:	4b43      	ldr	r3, [pc, #268]	; (8003258 <Tx_Beacon+0x128>)
 800314c:	f240 5264 	movw	r2, #1380	; 0x564
 8003150:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 5;
 8003152:	4b41      	ldr	r3, [pc, #260]	; (8003258 <Tx_Beacon+0x128>)
 8003154:	2205      	movs	r2, #5
 8003156:	611a      	str	r2, [r3, #16]

	buffer[0] = accLap / 60000;
 8003158:	4b40      	ldr	r3, [pc, #256]	; (800325c <Tx_Beacon+0x12c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a40      	ldr	r2, [pc, #256]	; (8003260 <Tx_Beacon+0x130>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0b9b      	lsrs	r3, r3, #14
 8003164:	b29b      	uxth	r3, r3
 8003166:	813b      	strh	r3, [r7, #8]
	buffer[1] = accLap / 1000;
 8003168:	4b3c      	ldr	r3, [pc, #240]	; (800325c <Tx_Beacon+0x12c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a3d      	ldr	r2, [pc, #244]	; (8003264 <Tx_Beacon+0x134>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	099b      	lsrs	r3, r3, #6
 8003174:	b29b      	uxth	r3, r3
 8003176:	817b      	strh	r3, [r7, #10]
	buffer[2] = accLap % 1000;
 8003178:	4b38      	ldr	r3, [pc, #224]	; (800325c <Tx_Beacon+0x12c>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b39      	ldr	r3, [pc, #228]	; (8003264 <Tx_Beacon+0x134>)
 800317e:	fba3 1302 	umull	r1, r3, r3, r2
 8003182:	099b      	lsrs	r3, r3, #6
 8003184:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	b29b      	uxth	r3, r3
 8003190:	81bb      	strh	r3, [r7, #12]

	accLap = 0;
 8003192:	4b32      	ldr	r3, [pc, #200]	; (800325c <Tx_Beacon+0x12c>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

	txData[0] = lapNumber;
 8003198:	4b33      	ldr	r3, [pc, #204]	; (8003268 <Tx_Beacon+0x138>)
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	4b33      	ldr	r3, [pc, #204]	; (800326c <Tx_Beacon+0x13c>)
 800319e:	701a      	strb	r2, [r3, #0]
	txData[1] = buffer[0] & 0xff;
 80031a0:	893b      	ldrh	r3, [r7, #8]
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	4b31      	ldr	r3, [pc, #196]	; (800326c <Tx_Beacon+0x13c>)
 80031a6:	705a      	strb	r2, [r3, #1]
	txData[2] = buffer[1] & 0xff;
 80031a8:	897b      	ldrh	r3, [r7, #10]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b2f      	ldr	r3, [pc, #188]	; (800326c <Tx_Beacon+0x13c>)
 80031ae:	709a      	strb	r2, [r3, #2]
	txData[3] = buffer[2] >> 8;
 80031b0:	89bb      	ldrh	r3, [r7, #12]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	4b2c      	ldr	r3, [pc, #176]	; (800326c <Tx_Beacon+0x13c>)
 80031ba:	70da      	strb	r2, [r3, #3]
	txData[4] = buffer[2] & 0xff;
 80031bc:	89bb      	ldrh	r3, [r7, #12]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	4b2a      	ldr	r3, [pc, #168]	; (800326c <Tx_Beacon+0x13c>)
 80031c2:	711a      	strb	r2, [r3, #4]

	if(flagDatalogger == DL_SAVE)
 80031c4:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <Tx_Beacon+0x140>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d108      	bne.n	80031de <Tx_Beacon+0xae>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &fileStruct);
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <Tx_Beacon+0x128>)
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	4b21      	ldr	r3, [pc, #132]	; (8003258 <Tx_Beacon+0x128>)
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	b2d9      	uxtb	r1, r3
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <Tx_Beacon+0x144>)
 80031d8:	4a24      	ldr	r2, [pc, #144]	; (800326c <Tx_Beacon+0x13c>)
 80031da:	f002 fddd 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	if((accCAN[BEACON_MSG] >= perCAN[BEACON_MSG]) && (perCAN[BEACON_MSG] != MSG_DISABLED))
 80031de:	4b26      	ldr	r3, [pc, #152]	; (8003278 <Tx_Beacon+0x148>)
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	4a26      	ldr	r2, [pc, #152]	; (800327c <Tx_Beacon+0x14c>)
 80031e4:	8952      	ldrh	r2, [r2, #10]
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d331      	bcc.n	800324e <Tx_Beacon+0x11e>
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <Tx_Beacon+0x14c>)
 80031ec:	895b      	ldrh	r3, [r3, #10]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d02d      	beq.n	800324e <Tx_Beacon+0x11e>
	{
		accCAN[BEACON_MSG] -= perCAN[BEACON_MSG];
 80031f2:	4b21      	ldr	r3, [pc, #132]	; (8003278 <Tx_Beacon+0x148>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	4a21      	ldr	r2, [pc, #132]	; (800327c <Tx_Beacon+0x14c>)
 80031f8:	8952      	ldrh	r2, [r2, #10]
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	4a1e      	ldr	r2, [pc, #120]	; (8003278 <Tx_Beacon+0x148>)
 80031fe:	6153      	str	r3, [r2, #20]
		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8003200:	4b1f      	ldr	r3, [pc, #124]	; (8003280 <Tx_Beacon+0x150>)
 8003202:	4a1a      	ldr	r2, [pc, #104]	; (800326c <Tx_Beacon+0x13c>)
 8003204:	4914      	ldr	r1, [pc, #80]	; (8003258 <Tx_Beacon+0x128>)
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f004 faea 	bl	80077e0 <HAL_CAN_AddTxMessage>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <Tx_Beacon+0xf2>
			verifyCAN |= 1;
 8003212:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <Tx_Beacon+0x154>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	b2da      	uxtb	r2, r3
 800321c:	4b19      	ldr	r3, [pc, #100]	; (8003284 <Tx_Beacon+0x154>)
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e006      	b.n	8003230 <Tx_Beacon+0x100>
		else
			verifyCAN &= 0x02;
 8003222:	4b18      	ldr	r3, [pc, #96]	; (8003284 <Tx_Beacon+0x154>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	b2da      	uxtb	r2, r3
 800322c:	4b15      	ldr	r3, [pc, #84]	; (8003284 <Tx_Beacon+0x154>)
 800322e:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	e002      	b.n	800323c <Tx_Beacon+0x10c>
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	3301      	adds	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f004 fbaa 	bl	8007996 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003242:	4603      	mov	r3, r0
 8003244:	2b03      	cmp	r3, #3
 8003246:	d002      	beq.n	800324e <Tx_Beacon+0x11e>
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d9f3      	bls.n	8003236 <Tx_Beacon+0x106>
	}
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000708 	.word	0x20000708
 800325c:	20001e4c 	.word	0x20001e4c
 8003260:	45e7b273 	.word	0x45e7b273
 8003264:	10624dd3 	.word	0x10624dd3
 8003268:	200018f8 	.word	0x200018f8
 800326c:	20000770 	.word	0x20000770
 8003270:	20002e80 	.word	0x20002e80
 8003274:	20001e54 	.word	0x20001e54
 8003278:	20000720 	.word	0x20000720
 800327c:	200018ec 	.word	0x200018ec
 8003280:	20001e50 	.word	0x20001e50
 8003284:	20000866 	.word	0x20000866

08003288 <Save_PDM>:

static void Save_PDM()
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
	uint8_t id = 0, length = 0, buffer[8];
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
 8003292:	2300      	movs	r3, #0
 8003294:	73bb      	strb	r3, [r7, #14]

	if(flagDatalogger != DL_SAVE)
 8003296:	4b87      	ldr	r3, [pc, #540]	; (80034b4 <Save_PDM+0x22c>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b01      	cmp	r3, #1
 800329c:	f040 8105 	bne.w	80034aa <Save_PDM+0x222>
		return;

	id = PDM_FIRST_ID;
 80032a0:	2332      	movs	r3, #50	; 0x32
 80032a2:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80032a4:	2308      	movs	r3, #8
 80032a6:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[0] << 8;
 80032a8:	2300      	movs	r3, #0
 80032aa:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[0] & 0xff;
 80032ac:	4b82      	ldr	r3, [pc, #520]	; (80034b8 <Save_PDM+0x230>)
 80032ae:	889b      	ldrh	r3, [r3, #4]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[1] << 8;
 80032b4:	2300      	movs	r3, #0
 80032b6:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[1] & 0xff;
 80032b8:	4b7f      	ldr	r3, [pc, #508]	; (80034b8 <Save_PDM+0x230>)
 80032ba:	88db      	ldrh	r3, [r3, #6]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[2] << 8;
 80032c0:	2300      	movs	r3, #0
 80032c2:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[2] & 0xff;
 80032c4:	4b7c      	ldr	r3, [pc, #496]	; (80034b8 <Save_PDM+0x230>)
 80032c6:	891b      	ldrh	r3, [r3, #8]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[3] << 8;
 80032cc:	2300      	movs	r3, #0
 80032ce:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[3] & 0xff;
 80032d0:	4b79      	ldr	r3, [pc, #484]	; (80034b8 <Save_PDM+0x230>)
 80032d2:	895b      	ldrh	r3, [r3, #10]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &fileStruct);
 80032d8:	7bf8      	ldrb	r0, [r7, #15]
 80032da:	1d3a      	adds	r2, r7, #4
 80032dc:	7bb9      	ldrb	r1, [r7, #14]
 80032de:	4b77      	ldr	r3, [pc, #476]	; (80034bc <Save_PDM+0x234>)
 80032e0:	f002 fd5a 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 1;
 80032e4:	2333      	movs	r3, #51	; 0x33
 80032e6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80032e8:	2308      	movs	r3, #8
 80032ea:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[4] << 8;
 80032ec:	2300      	movs	r3, #0
 80032ee:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[4] & 0xff;
 80032f0:	4b71      	ldr	r3, [pc, #452]	; (80034b8 <Save_PDM+0x230>)
 80032f2:	899b      	ldrh	r3, [r3, #12]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[5] << 8;
 80032f8:	2300      	movs	r3, #0
 80032fa:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[5] & 0xff;
 80032fc:	4b6e      	ldr	r3, [pc, #440]	; (80034b8 <Save_PDM+0x230>)
 80032fe:	89db      	ldrh	r3, [r3, #14]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[6] << 8;
 8003304:	2300      	movs	r3, #0
 8003306:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[6] & 0xff;
 8003308:	4b6b      	ldr	r3, [pc, #428]	; (80034b8 <Save_PDM+0x230>)
 800330a:	8a1b      	ldrh	r3, [r3, #16]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[7] << 8;
 8003310:	2300      	movs	r3, #0
 8003312:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[7] & 0xff;
 8003314:	4b68      	ldr	r3, [pc, #416]	; (80034b8 <Save_PDM+0x230>)
 8003316:	8a5b      	ldrh	r3, [r3, #18]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &fileStruct);
 800331c:	7bf8      	ldrb	r0, [r7, #15]
 800331e:	1d3a      	adds	r2, r7, #4
 8003320:	7bb9      	ldrb	r1, [r7, #14]
 8003322:	4b66      	ldr	r3, [pc, #408]	; (80034bc <Save_PDM+0x234>)
 8003324:	f002 fd38 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 2;
 8003328:	2334      	movs	r3, #52	; 0x34
 800332a:	73fb      	strb	r3, [r7, #15]
	length = 8;
 800332c:	2308      	movs	r3, #8
 800332e:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[8] << 8;
 8003330:	2300      	movs	r3, #0
 8003332:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[8] & 0xff;
 8003334:	4b60      	ldr	r3, [pc, #384]	; (80034b8 <Save_PDM+0x230>)
 8003336:	8a9b      	ldrh	r3, [r3, #20]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[9] << 8;
 800333c:	2300      	movs	r3, #0
 800333e:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[9] & 0xff;
 8003340:	4b5d      	ldr	r3, [pc, #372]	; (80034b8 <Save_PDM+0x230>)
 8003342:	8adb      	ldrh	r3, [r3, #22]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[10] << 8;
 8003348:	2300      	movs	r3, #0
 800334a:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[10] & 0xff;
 800334c:	4b5a      	ldr	r3, [pc, #360]	; (80034b8 <Save_PDM+0x230>)
 800334e:	8b1b      	ldrh	r3, [r3, #24]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[11] << 8;
 8003354:	2300      	movs	r3, #0
 8003356:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[11] & 0xff;
 8003358:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <Save_PDM+0x230>)
 800335a:	8b5b      	ldrh	r3, [r3, #26]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &fileStruct);
 8003360:	7bf8      	ldrb	r0, [r7, #15]
 8003362:	1d3a      	adds	r2, r7, #4
 8003364:	7bb9      	ldrb	r1, [r7, #14]
 8003366:	4b55      	ldr	r3, [pc, #340]	; (80034bc <Save_PDM+0x234>)
 8003368:	f002 fd16 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 3;
 800336c:	2335      	movs	r3, #53	; 0x35
 800336e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003370:	2308      	movs	r3, #8
 8003372:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[12] << 8;
 8003374:	2300      	movs	r3, #0
 8003376:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[12] & 0xff;
 8003378:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <Save_PDM+0x230>)
 800337a:	8b9b      	ldrh	r3, [r3, #28]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[13] << 8;
 8003380:	2300      	movs	r3, #0
 8003382:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[13] & 0xff;
 8003384:	4b4c      	ldr	r3, [pc, #304]	; (80034b8 <Save_PDM+0x230>)
 8003386:	8bdb      	ldrh	r3, [r3, #30]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[14] << 8;
 800338c:	2300      	movs	r3, #0
 800338e:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[14] & 0xff;
 8003390:	4b49      	ldr	r3, [pc, #292]	; (80034b8 <Save_PDM+0x230>)
 8003392:	8c1b      	ldrh	r3, [r3, #32]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[15] << 8;
 8003398:	2300      	movs	r3, #0
 800339a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[15] & 0xff;
 800339c:	4b46      	ldr	r3, [pc, #280]	; (80034b8 <Save_PDM+0x230>)
 800339e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &fileStruct);
 80033a4:	7bf8      	ldrb	r0, [r7, #15]
 80033a6:	1d3a      	adds	r2, r7, #4
 80033a8:	7bb9      	ldrb	r1, [r7, #14]
 80033aa:	4b44      	ldr	r3, [pc, #272]	; (80034bc <Save_PDM+0x234>)
 80033ac:	f002 fcf4 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 4;
 80033b0:	2336      	movs	r3, #54	; 0x36
 80033b2:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80033b4:	2308      	movs	r3, #8
 80033b6:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Tempetature_Buffer[0] << 8;
 80033b8:	2300      	movs	r3, #0
 80033ba:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Tempetature_Buffer[0] & 0xff;
 80033bc:	4b3e      	ldr	r3, [pc, #248]	; (80034b8 <Save_PDM+0x230>)
 80033be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Tempetature_Buffer[1] << 8;
 80033c4:	2300      	movs	r3, #0
 80033c6:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Tempetature_Buffer[1] & 0xff;
 80033c8:	4b3b      	ldr	r3, [pc, #236]	; (80034b8 <Save_PDM+0x230>)
 80033ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Tempetature_Buffer[2] << 8;
 80033d0:	2300      	movs	r3, #0
 80033d2:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Tempetature_Buffer[2] & 0xff;
 80033d4:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <Save_PDM+0x230>)
 80033d6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Tempetature_Buffer[3] << 8;
 80033dc:	2300      	movs	r3, #0
 80033de:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Tempetature_Buffer[3] & 0xff;
 80033e0:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <Save_PDM+0x230>)
 80033e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &fileStruct);
 80033e8:	7bf8      	ldrb	r0, [r7, #15]
 80033ea:	1d3a      	adds	r2, r7, #4
 80033ec:	7bb9      	ldrb	r1, [r7, #14]
 80033ee:	4b33      	ldr	r3, [pc, #204]	; (80034bc <Save_PDM+0x234>)
 80033f0:	f002 fcd2 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 5;
 80033f4:	2337      	movs	r3, #55	; 0x37
 80033f6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80033f8:	2308      	movs	r3, #8
 80033fa:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Tempetature_Buffer[4] << 8;
 80033fc:	2300      	movs	r3, #0
 80033fe:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Tempetature_Buffer[4] & 0xff;
 8003400:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <Save_PDM+0x230>)
 8003402:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003404:	b2db      	uxtb	r3, r3
 8003406:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Tempetature_Buffer[5] << 8;
 8003408:	2300      	movs	r3, #0
 800340a:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Tempetature_Buffer[5] & 0xff;
 800340c:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <Save_PDM+0x230>)
 800340e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003410:	b2db      	uxtb	r3, r3
 8003412:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Tempetature_Buffer[6] << 8;
 8003414:	2300      	movs	r3, #0
 8003416:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Tempetature_Buffer[6] & 0xff;
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <Save_PDM+0x230>)
 800341a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800341c:	b2db      	uxtb	r3, r3
 800341e:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Tempetature_Buffer[7] << 8;
 8003420:	2300      	movs	r3, #0
 8003422:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Tempetature_Buffer[7] & 0xff;
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <Save_PDM+0x230>)
 8003426:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003428:	b2db      	uxtb	r3, r3
 800342a:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &fileStruct);
 800342c:	7bf8      	ldrb	r0, [r7, #15]
 800342e:	1d3a      	adds	r2, r7, #4
 8003430:	7bb9      	ldrb	r1, [r7, #14]
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <Save_PDM+0x234>)
 8003434:	f002 fcb0 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 6;
 8003438:	2338      	movs	r3, #56	; 0x38
 800343a:	73fb      	strb	r3, [r7, #15]
	length = 8;
 800343c:	2308      	movs	r3, #8
 800343e:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Duty_Cycle_Buffer[0] << 8;
 8003440:	2300      	movs	r3, #0
 8003442:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Duty_Cycle_Buffer[0] & 0xff;
 8003444:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <Save_PDM+0x230>)
 8003446:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003448:	b2db      	uxtb	r3, r3
 800344a:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Duty_Cycle_Buffer[1] << 8;
 800344c:	2300      	movs	r3, #0
 800344e:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Duty_Cycle_Buffer[1] & 0xff;
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <Save_PDM+0x230>)
 8003452:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003454:	b2db      	uxtb	r3, r3
 8003456:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Duty_Cycle_Buffer[2] << 8;
 8003458:	2300      	movs	r3, #0
 800345a:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Duty_Cycle_Buffer[2] & 0xff;
 800345c:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <Save_PDM+0x230>)
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	b2db      	uxtb	r3, r3
 8003462:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Duty_Cycle_Buffer[3] << 8;
 8003464:	2300      	movs	r3, #0
 8003466:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Duty_Cycle_Buffer[3] & 0xff;
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <Save_PDM+0x230>)
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b2db      	uxtb	r3, r3
 800346e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &fileStruct);
 8003470:	7bf8      	ldrb	r0, [r7, #15]
 8003472:	1d3a      	adds	r2, r7, #4
 8003474:	7bb9      	ldrb	r1, [r7, #14]
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <Save_PDM+0x234>)
 8003478:	f002 fc8e 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 7;
 800347c:	2339      	movs	r3, #57	; 0x39
 800347e:	73fb      	strb	r3, [r7, #15]
	length = 4;
 8003480:	2304      	movs	r3, #4
 8003482:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Input_Voltage << 8;
 8003484:	2300      	movs	r3, #0
 8003486:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Input_Voltage & 0xff;
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <Save_PDM+0x230>)
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Output_Verify << 8;
 8003490:	2300      	movs	r3, #0
 8003492:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Output_Verify & 0xff;
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <Save_PDM+0x230>)
 8003496:	885b      	ldrh	r3, [r3, #2]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	71fb      	strb	r3, [r7, #7]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &fileStruct);
 800349c:	7bf8      	ldrb	r0, [r7, #15]
 800349e:	1d3a      	adds	r2, r7, #4
 80034a0:	7bb9      	ldrb	r1, [r7, #14]
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <Save_PDM+0x234>)
 80034a4:	f002 fc78 	bl	8005d98 <Principal_Datalogger_Save_Buffer>
 80034a8:	e000      	b.n	80034ac <Save_PDM+0x224>
		return;
 80034aa:	bf00      	nop
}
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20002e80 	.word	0x20002e80
 80034b8:	20000828 	.word	0x20000828
 80034bc:	20001e54 	.word	0x20001e54

080034c0 <Save_ECU>:

static void Save_ECU()
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
	uint8_t id = 0, length = 0, buffer[8];
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
 80034ca:	2300      	movs	r3, #0
 80034cc:	73bb      	strb	r3, [r7, #14]

	if(flagDatalogger != DL_SAVE)
 80034ce:	4b70      	ldr	r3, [pc, #448]	; (8003690 <Save_ECU+0x1d0>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	f040 80d7 	bne.w	8003686 <Save_ECU+0x1c6>
		return;

	id = ECU_FIRST_ID;
 80034d8:	231a      	movs	r3, #26
 80034da:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80034dc:	2308      	movs	r3, #8
 80034de:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.rpm >> 8;
 80034e0:	4b6c      	ldr	r3, [pc, #432]	; (8003694 <Save_ECU+0x1d4>)
 80034e2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80034e6:	121b      	asrs	r3, r3, #8
 80034e8:	b21b      	sxth	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.rpm & 0xff;
 80034ee:	4b69      	ldr	r3, [pc, #420]	; (8003694 <Save_ECU+0x1d4>)
 80034f0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.tps >> 8;
 80034f8:	4b66      	ldr	r3, [pc, #408]	; (8003694 <Save_ECU+0x1d4>)
 80034fa:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80034fe:	121b      	asrs	r3, r3, #8
 8003500:	b21b      	sxth	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.tps & 0xff;
 8003506:	4b63      	ldr	r3, [pc, #396]	; (8003694 <Save_ECU+0x1d4>)
 8003508:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800350c:	b2db      	uxtb	r3, r3
 800350e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.iat >> 8;
 8003510:	4b60      	ldr	r3, [pc, #384]	; (8003694 <Save_ECU+0x1d4>)
 8003512:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003516:	121b      	asrs	r3, r3, #8
 8003518:	b21b      	sxth	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.iat & 0xff;
 800351e:	4b5d      	ldr	r3, [pc, #372]	; (8003694 <Save_ECU+0x1d4>)
 8003520:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003524:	b2db      	uxtb	r3, r3
 8003526:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.ect >> 8;
 8003528:	4b5a      	ldr	r3, [pc, #360]	; (8003694 <Save_ECU+0x1d4>)
 800352a:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800352e:	121b      	asrs	r3, r3, #8
 8003530:	b21b      	sxth	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.ect & 0xff;
 8003536:	4b57      	ldr	r3, [pc, #348]	; (8003694 <Save_ECU+0x1d4>)
 8003538:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800353c:	b2db      	uxtb	r3, r3
 800353e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &fileStruct);
 8003540:	7bf8      	ldrb	r0, [r7, #15]
 8003542:	1d3a      	adds	r2, r7, #4
 8003544:	7bb9      	ldrb	r1, [r7, #14]
 8003546:	4b54      	ldr	r3, [pc, #336]	; (8003698 <Save_ECU+0x1d8>)
 8003548:	f002 fc26 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 1;
 800354c:	231b      	movs	r3, #27
 800354e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003550:	2308      	movs	r3, #8
 8003552:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.map >> 8;
 8003554:	4b4f      	ldr	r3, [pc, #316]	; (8003694 <Save_ECU+0x1d4>)
 8003556:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800355a:	121b      	asrs	r3, r3, #8
 800355c:	b21b      	sxth	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.map & 0xff;
 8003562:	4b4c      	ldr	r3, [pc, #304]	; (8003694 <Save_ECU+0x1d4>)
 8003564:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8003568:	b2db      	uxtb	r3, r3
 800356a:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.fuel_pressure >> 8;
 800356c:	4b49      	ldr	r3, [pc, #292]	; (8003694 <Save_ECU+0x1d4>)
 800356e:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8003572:	121b      	asrs	r3, r3, #8
 8003574:	b21b      	sxth	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.fuel_pressure & 0xff;
 800357a:	4b46      	ldr	r3, [pc, #280]	; (8003694 <Save_ECU+0x1d4>)
 800357c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8003580:	b2db      	uxtb	r3, r3
 8003582:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.oil_pressure >> 8;
 8003584:	4b43      	ldr	r3, [pc, #268]	; (8003694 <Save_ECU+0x1d4>)
 8003586:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800358a:	121b      	asrs	r3, r3, #8
 800358c:	b21b      	sxth	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.oil_pressure & 0xff;
 8003592:	4b40      	ldr	r3, [pc, #256]	; (8003694 <Save_ECU+0x1d4>)
 8003594:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8003598:	b2db      	uxtb	r3, r3
 800359a:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.coolant_pressure >> 8;
 800359c:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <Save_ECU+0x1d4>)
 800359e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80035a2:	121b      	asrs	r3, r3, #8
 80035a4:	b21b      	sxth	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.coolant_pressure & 0xff;
 80035aa:	4b3a      	ldr	r3, [pc, #232]	; (8003694 <Save_ECU+0x1d4>)
 80035ac:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &fileStruct);
 80035b4:	7bf8      	ldrb	r0, [r7, #15]
 80035b6:	1d3a      	adds	r2, r7, #4
 80035b8:	7bb9      	ldrb	r1, [r7, #14]
 80035ba:	4b37      	ldr	r3, [pc, #220]	; (8003698 <Save_ECU+0x1d8>)
 80035bc:	f002 fbec 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 2;
 80035c0:	231c      	movs	r3, #28
 80035c2:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80035c4:	2308      	movs	r3, #8
 80035c6:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.lambda >> 8;
 80035c8:	4b32      	ldr	r3, [pc, #200]	; (8003694 <Save_ECU+0x1d4>)
 80035ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80035ce:	121b      	asrs	r3, r3, #8
 80035d0:	b21b      	sxth	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.lambda & 0xff;
 80035d6:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <Save_ECU+0x1d4>)
 80035d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.oil_temperature >> 8;
 80035e0:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <Save_ECU+0x1d4>)
 80035e2:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80035e6:	121b      	asrs	r3, r3, #8
 80035e8:	b21b      	sxth	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.oil_temperature & 0xff;
 80035ee:	4b29      	ldr	r3, [pc, #164]	; (8003694 <Save_ECU+0x1d4>)
 80035f0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.wheel_speed_fl;
 80035f8:	4b26      	ldr	r3, [pc, #152]	; (8003694 <Save_ECU+0x1d4>)
 80035fa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.wheel_speed_fr;
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <Save_ECU+0x1d4>)
 8003604:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003608:	b2db      	uxtb	r3, r3
 800360a:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.wheel_speed_rl;
 800360c:	4b21      	ldr	r3, [pc, #132]	; (8003694 <Save_ECU+0x1d4>)
 800360e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003612:	b2db      	uxtb	r3, r3
 8003614:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.wheel_speed_rr;
 8003616:	4b1f      	ldr	r3, [pc, #124]	; (8003694 <Save_ECU+0x1d4>)
 8003618:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800361c:	b2db      	uxtb	r3, r3
 800361e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &fileStruct);
 8003620:	7bf8      	ldrb	r0, [r7, #15]
 8003622:	1d3a      	adds	r2, r7, #4
 8003624:	7bb9      	ldrb	r1, [r7, #14]
 8003626:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <Save_ECU+0x1d8>)
 8003628:	f002 fbb6 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 3;
 800362c:	231d      	movs	r3, #29
 800362e:	73fb      	strb	r3, [r7, #15]
	length = 6;
 8003630:	2306      	movs	r3, #6
 8003632:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.battery_voltage >> 8;
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <Save_ECU+0x1d4>)
 8003636:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800363a:	121b      	asrs	r3, r3, #8
 800363c:	b21b      	sxth	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.battery_voltage & 0xff;
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <Save_ECU+0x1d4>)
 8003644:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.total_fuel_flow >> 8;
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <Save_ECU+0x1d4>)
 800364e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003652:	121b      	asrs	r3, r3, #8
 8003654:	b21b      	sxth	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.total_fuel_flow & 0xff;
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <Save_ECU+0x1d4>)
 800365c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.gear & 0xff;
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <Save_ECU+0x1d4>)
 8003666:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800366a:	b2db      	uxtb	r3, r3
 800366c:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.electro_fan & 0xff;
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <Save_ECU+0x1d4>)
 8003670:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	727b      	strb	r3, [r7, #9]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &fileStruct);
 8003678:	7bf8      	ldrb	r0, [r7, #15]
 800367a:	1d3a      	adds	r2, r7, #4
 800367c:	7bb9      	ldrb	r1, [r7, #14]
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <Save_ECU+0x1d8>)
 8003680:	f002 fb8a 	bl	8005d98 <Principal_Datalogger_Save_Buffer>

	return;
 8003684:	e000      	b.n	8003688 <Save_ECU+0x1c8>
		return;
 8003686:	bf00      	nop
}
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20002e80 	.word	0x20002e80
 8003694:	20001c0c 	.word	0x20001c0c
 8003698:	20001e54 	.word	0x20001e54

0800369c <Principal_CAN_Start>:

void Principal_CAN_Start(CAN_HandleTypeDef* hcan)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08e      	sub	sp, #56	; 0x38
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
 80036a8:	2300      	movs	r3, #0
 80036aa:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 80036ac:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 80036b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80036bc:	2301      	movs	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80036c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c2:	0b5b      	lsrs	r3, r3, #13
 80036c4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80036c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	0b5b      	lsrs	r3, r3, #13
 80036d2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	b29b      	uxth	r3, r3
 80036da:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80036e0:	2301      	movs	r3, #1
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 80036e8:	230e      	movs	r3, #14
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80036ec:	f107 0308 	add.w	r3, r7, #8
 80036f0:	4619      	mov	r1, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f003 ff50 	bl	8007598 <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 80036f8:	2300      	movs	r3, #0
 80036fa:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003700:	2300      	movs	r3, #0
 8003702:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003704:	2301      	movs	r3, #1
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 8003708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370a:	0b5b      	lsrs	r3, r3, #13
 800370c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	b29b      	uxth	r3, r3
 8003714:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	0b5b      	lsrs	r3, r3, #13
 800371a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	b29b      	uxth	r3, r3
 8003722:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003724:	2300      	movs	r3, #0
 8003726:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 8003728:	2301      	movs	r3, #1
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 800372c:	2301      	movs	r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 8003730:	230f      	movs	r3, #15
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8003734:	f107 0308 	add.w	r3, r7, #8
 8003738:	4619      	mov	r1, r3
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f003 ff2c 	bl	8007598 <HAL_CAN_ConfigFilter>

	FT_CAN_FilterConfig(hcan, FT600, 2, CAN_RX_FIFO0);
 8003740:	2300      	movs	r3, #0
 8003742:	2202      	movs	r2, #2
 8003744:	f240 2181 	movw	r1, #641	; 0x281
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7fc ff2d 	bl	80005a8 <FT_CAN_FilterConfig>
	PDM_CAN_FilterConfig(hcan, 3, CAN_RX_FIFO0);
 800374e:	2200      	movs	r2, #0
 8003750:	2103      	movs	r1, #3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fe fc62 	bl	800201c <PDM_CAN_FilterConfig>

	HAL_CAN_Start(hcan);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f003 fffd 	bl	8007758 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800375e:	2102      	movs	r1, #2
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f004 fa5f 	bl	8007c24 <HAL_CAN_ActivateNotification>
}
 8003766:	bf00      	nop
 8003768:	3738      	adds	r7, #56	; 0x38
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	2b07      	cmp	r3, #7
 8003780:	d830      	bhi.n	80037e4 <Principal_Transmit_Msg+0x74>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <Principal_Transmit_Msg+0x18>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	080037a9 	.word	0x080037a9
 800378c:	080037b1 	.word	0x080037b1
 8003790:	080037b9 	.word	0x080037b9
 8003794:	080037c9 	.word	0x080037c9
 8003798:	080037c1 	.word	0x080037c1
 800379c:	080037d1 	.word	0x080037d1
 80037a0:	080037d9 	.word	0x080037d9
 80037a4:	080037df 	.word	0x080037df
	{
		case ANALOG_1_4:
			Tx_Analog_1_4(hcan);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fe fd2b 	bl	8002204 <Tx_Analog_1_4>
			break;
 80037ae:	e01a      	b.n	80037e6 <Principal_Transmit_Msg+0x76>

		case ANALOG_5_8:
			Tx_Analog_5_8(hcan);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fe fdcf 	bl	8002354 <Tx_Analog_5_8>
			break;
 80037b6:	e016      	b.n	80037e6 <Principal_Transmit_Msg+0x76>

		case ANALOG_9_12:
			Tx_Analog_9_12(hcan);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7fe fe73 	bl	80024a4 <Tx_Analog_9_12>
			break;
 80037be:	e012      	b.n	80037e6 <Principal_Transmit_Msg+0x76>

		case VERIFY_MSG:
			Tx_Verify(hcan);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fe ffbb 	bl	800273c <Tx_Verify>
			break;
 80037c6:	e00e      	b.n	80037e6 <Principal_Transmit_Msg+0x76>

		case RTC_MSG:
			Tx_RTC(hcan);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7fe ff13 	bl	80025f4 <Tx_RTC>
			break;
 80037ce:	e00a      	b.n	80037e6 <Principal_Transmit_Msg+0x76>

		case BEACON_MSG:
			Tx_Beacon(hcan);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff fcad 	bl	8003130 <Tx_Beacon>
			break;
 80037d6:	e006      	b.n	80037e6 <Principal_Transmit_Msg+0x76>

		case ECU_SAVE:
			Save_ECU();
 80037d8:	f7ff fe72 	bl	80034c0 <Save_ECU>
			break;
 80037dc:	e003      	b.n	80037e6 <Principal_Transmit_Msg+0x76>

		case PDM_SAVE:
			Save_PDM();
 80037de:	f7ff fd53 	bl	8003288 <Save_PDM>
			break;
 80037e2:	e000      	b.n	80037e6 <Principal_Transmit_Msg+0x76>

		default:
			return;
 80037e4:	bf00      	nop
	}
}
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <Load_EEPROM>:
 */

#include "principal.h"

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];
	HAL_StatusTypeDef retVal;

	retVal = HAL_I2C_Master_Transmit(hi2c, 0xA0, 0x00, 1, 5);
 80037f4:	2305      	movs	r3, #5
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2301      	movs	r3, #1
 80037fa:	2200      	movs	r2, #0
 80037fc:	21a0      	movs	r1, #160	; 0xa0
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f005 fc52 	bl	80090a8 <HAL_I2C_Master_Transmit>
 8003804:	4603      	mov	r3, r0
 8003806:	77fb      	strb	r3, [r7, #31]

	if(retVal == HAL_OK)
 8003808:	7ffb      	ldrb	r3, [r7, #31]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d128      	bne.n	8003860 <Load_EEPROM+0x74>
		retVal = HAL_I2C_Master_Receive(hi2c, 0xA1, buffer, EEPROM_BUFFER_SIZE, 5);
 800380e:	f107 020c 	add.w	r2, r7, #12
 8003812:	2305      	movs	r3, #5
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2311      	movs	r3, #17
 8003818:	21a1      	movs	r1, #161	; 0xa1
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f005 fd42 	bl	80092a4 <HAL_I2C_Master_Receive>
 8003820:	4603      	mov	r3, r0
 8003822:	77fb      	strb	r3, [r7, #31]
	else
		return retVal;

	__BUFFER_TO_FREQ(buffer[0], perMsg[ANALOG_1_4]);
 8003824:	7b3b      	ldrb	r3, [r7, #12]
 8003826:	3b01      	subs	r3, #1
 8003828:	2b0a      	cmp	r3, #10
 800382a:	d849      	bhi.n	80038c0 <Load_EEPROM+0xd4>
 800382c:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <Load_EEPROM+0x48>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	08003865 	.word	0x08003865
 8003838:	0800386f 	.word	0x0800386f
 800383c:	08003879 	.word	0x08003879
 8003840:	08003881 	.word	0x08003881
 8003844:	08003889 	.word	0x08003889
 8003848:	08003891 	.word	0x08003891
 800384c:	08003899 	.word	0x08003899
 8003850:	080038a1 	.word	0x080038a1
 8003854:	080038a9 	.word	0x080038a9
 8003858:	080038b1 	.word	0x080038b1
 800385c:	080038b9 	.word	0x080038b9
		return retVal;
 8003860:	7ffb      	ldrb	r3, [r7, #31]
 8003862:	e3c7      	b.n	8003ff4 <Load_EEPROM+0x808>
	__BUFFER_TO_FREQ(buffer[0], perMsg[ANALOG_1_4]);
 8003864:	4ba8      	ldr	r3, [pc, #672]	; (8003b08 <Load_EEPROM+0x31c>)
 8003866:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800386a:	801a      	strh	r2, [r3, #0]
 800386c:	e02b      	b.n	80038c6 <Load_EEPROM+0xda>
 800386e:	4ba6      	ldr	r3, [pc, #664]	; (8003b08 <Load_EEPROM+0x31c>)
 8003870:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	e026      	b.n	80038c6 <Load_EEPROM+0xda>
 8003878:	4ba3      	ldr	r3, [pc, #652]	; (8003b08 <Load_EEPROM+0x31c>)
 800387a:	22c8      	movs	r2, #200	; 0xc8
 800387c:	801a      	strh	r2, [r3, #0]
 800387e:	e022      	b.n	80038c6 <Load_EEPROM+0xda>
 8003880:	4ba1      	ldr	r3, [pc, #644]	; (8003b08 <Load_EEPROM+0x31c>)
 8003882:	2264      	movs	r2, #100	; 0x64
 8003884:	801a      	strh	r2, [r3, #0]
 8003886:	e01e      	b.n	80038c6 <Load_EEPROM+0xda>
 8003888:	4b9f      	ldr	r3, [pc, #636]	; (8003b08 <Load_EEPROM+0x31c>)
 800388a:	2232      	movs	r2, #50	; 0x32
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	e01a      	b.n	80038c6 <Load_EEPROM+0xda>
 8003890:	4b9d      	ldr	r3, [pc, #628]	; (8003b08 <Load_EEPROM+0x31c>)
 8003892:	2228      	movs	r2, #40	; 0x28
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	e016      	b.n	80038c6 <Load_EEPROM+0xda>
 8003898:	4b9b      	ldr	r3, [pc, #620]	; (8003b08 <Load_EEPROM+0x31c>)
 800389a:	2214      	movs	r2, #20
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	e012      	b.n	80038c6 <Load_EEPROM+0xda>
 80038a0:	4b99      	ldr	r3, [pc, #612]	; (8003b08 <Load_EEPROM+0x31c>)
 80038a2:	220a      	movs	r2, #10
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	e00e      	b.n	80038c6 <Load_EEPROM+0xda>
 80038a8:	4b97      	ldr	r3, [pc, #604]	; (8003b08 <Load_EEPROM+0x31c>)
 80038aa:	2205      	movs	r2, #5
 80038ac:	801a      	strh	r2, [r3, #0]
 80038ae:	e00a      	b.n	80038c6 <Load_EEPROM+0xda>
 80038b0:	4b95      	ldr	r3, [pc, #596]	; (8003b08 <Load_EEPROM+0x31c>)
 80038b2:	2203      	movs	r2, #3
 80038b4:	801a      	strh	r2, [r3, #0]
 80038b6:	e006      	b.n	80038c6 <Load_EEPROM+0xda>
 80038b8:	4b93      	ldr	r3, [pc, #588]	; (8003b08 <Load_EEPROM+0x31c>)
 80038ba:	2202      	movs	r2, #2
 80038bc:	801a      	strh	r2, [r3, #0]
 80038be:	e002      	b.n	80038c6 <Load_EEPROM+0xda>
 80038c0:	4b91      	ldr	r3, [pc, #580]	; (8003b08 <Load_EEPROM+0x31c>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	801a      	strh	r2, [r3, #0]
 80038c6:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[1], perMsg[ANALOG_5_8]);
 80038c8:	7b7b      	ldrb	r3, [r7, #13]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	2b0a      	cmp	r3, #10
 80038ce:	d847      	bhi.n	8003960 <Load_EEPROM+0x174>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <Load_EEPROM+0xec>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	08003905 	.word	0x08003905
 80038dc:	0800390f 	.word	0x0800390f
 80038e0:	08003919 	.word	0x08003919
 80038e4:	08003921 	.word	0x08003921
 80038e8:	08003929 	.word	0x08003929
 80038ec:	08003931 	.word	0x08003931
 80038f0:	08003939 	.word	0x08003939
 80038f4:	08003941 	.word	0x08003941
 80038f8:	08003949 	.word	0x08003949
 80038fc:	08003951 	.word	0x08003951
 8003900:	08003959 	.word	0x08003959
 8003904:	4b80      	ldr	r3, [pc, #512]	; (8003b08 <Load_EEPROM+0x31c>)
 8003906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800390a:	805a      	strh	r2, [r3, #2]
 800390c:	e02b      	b.n	8003966 <Load_EEPROM+0x17a>
 800390e:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <Load_EEPROM+0x31c>)
 8003910:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003914:	805a      	strh	r2, [r3, #2]
 8003916:	e026      	b.n	8003966 <Load_EEPROM+0x17a>
 8003918:	4b7b      	ldr	r3, [pc, #492]	; (8003b08 <Load_EEPROM+0x31c>)
 800391a:	22c8      	movs	r2, #200	; 0xc8
 800391c:	805a      	strh	r2, [r3, #2]
 800391e:	e022      	b.n	8003966 <Load_EEPROM+0x17a>
 8003920:	4b79      	ldr	r3, [pc, #484]	; (8003b08 <Load_EEPROM+0x31c>)
 8003922:	2264      	movs	r2, #100	; 0x64
 8003924:	805a      	strh	r2, [r3, #2]
 8003926:	e01e      	b.n	8003966 <Load_EEPROM+0x17a>
 8003928:	4b77      	ldr	r3, [pc, #476]	; (8003b08 <Load_EEPROM+0x31c>)
 800392a:	2232      	movs	r2, #50	; 0x32
 800392c:	805a      	strh	r2, [r3, #2]
 800392e:	e01a      	b.n	8003966 <Load_EEPROM+0x17a>
 8003930:	4b75      	ldr	r3, [pc, #468]	; (8003b08 <Load_EEPROM+0x31c>)
 8003932:	2228      	movs	r2, #40	; 0x28
 8003934:	805a      	strh	r2, [r3, #2]
 8003936:	e016      	b.n	8003966 <Load_EEPROM+0x17a>
 8003938:	4b73      	ldr	r3, [pc, #460]	; (8003b08 <Load_EEPROM+0x31c>)
 800393a:	2214      	movs	r2, #20
 800393c:	805a      	strh	r2, [r3, #2]
 800393e:	e012      	b.n	8003966 <Load_EEPROM+0x17a>
 8003940:	4b71      	ldr	r3, [pc, #452]	; (8003b08 <Load_EEPROM+0x31c>)
 8003942:	220a      	movs	r2, #10
 8003944:	805a      	strh	r2, [r3, #2]
 8003946:	e00e      	b.n	8003966 <Load_EEPROM+0x17a>
 8003948:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <Load_EEPROM+0x31c>)
 800394a:	2205      	movs	r2, #5
 800394c:	805a      	strh	r2, [r3, #2]
 800394e:	e00a      	b.n	8003966 <Load_EEPROM+0x17a>
 8003950:	4b6d      	ldr	r3, [pc, #436]	; (8003b08 <Load_EEPROM+0x31c>)
 8003952:	2203      	movs	r2, #3
 8003954:	805a      	strh	r2, [r3, #2]
 8003956:	e006      	b.n	8003966 <Load_EEPROM+0x17a>
 8003958:	4b6b      	ldr	r3, [pc, #428]	; (8003b08 <Load_EEPROM+0x31c>)
 800395a:	2202      	movs	r2, #2
 800395c:	805a      	strh	r2, [r3, #2]
 800395e:	e002      	b.n	8003966 <Load_EEPROM+0x17a>
 8003960:	4b69      	ldr	r3, [pc, #420]	; (8003b08 <Load_EEPROM+0x31c>)
 8003962:	2200      	movs	r2, #0
 8003964:	805a      	strh	r2, [r3, #2]
 8003966:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[2], perMsg[ANALOG_9_12]);
 8003968:	7bbb      	ldrb	r3, [r7, #14]
 800396a:	3b01      	subs	r3, #1
 800396c:	2b0a      	cmp	r3, #10
 800396e:	d847      	bhi.n	8003a00 <Load_EEPROM+0x214>
 8003970:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <Load_EEPROM+0x18c>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	080039a5 	.word	0x080039a5
 800397c:	080039af 	.word	0x080039af
 8003980:	080039b9 	.word	0x080039b9
 8003984:	080039c1 	.word	0x080039c1
 8003988:	080039c9 	.word	0x080039c9
 800398c:	080039d1 	.word	0x080039d1
 8003990:	080039d9 	.word	0x080039d9
 8003994:	080039e1 	.word	0x080039e1
 8003998:	080039e9 	.word	0x080039e9
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	080039f9 	.word	0x080039f9
 80039a4:	4b58      	ldr	r3, [pc, #352]	; (8003b08 <Load_EEPROM+0x31c>)
 80039a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039aa:	809a      	strh	r2, [r3, #4]
 80039ac:	e02b      	b.n	8003a06 <Load_EEPROM+0x21a>
 80039ae:	4b56      	ldr	r3, [pc, #344]	; (8003b08 <Load_EEPROM+0x31c>)
 80039b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039b4:	809a      	strh	r2, [r3, #4]
 80039b6:	e026      	b.n	8003a06 <Load_EEPROM+0x21a>
 80039b8:	4b53      	ldr	r3, [pc, #332]	; (8003b08 <Load_EEPROM+0x31c>)
 80039ba:	22c8      	movs	r2, #200	; 0xc8
 80039bc:	809a      	strh	r2, [r3, #4]
 80039be:	e022      	b.n	8003a06 <Load_EEPROM+0x21a>
 80039c0:	4b51      	ldr	r3, [pc, #324]	; (8003b08 <Load_EEPROM+0x31c>)
 80039c2:	2264      	movs	r2, #100	; 0x64
 80039c4:	809a      	strh	r2, [r3, #4]
 80039c6:	e01e      	b.n	8003a06 <Load_EEPROM+0x21a>
 80039c8:	4b4f      	ldr	r3, [pc, #316]	; (8003b08 <Load_EEPROM+0x31c>)
 80039ca:	2232      	movs	r2, #50	; 0x32
 80039cc:	809a      	strh	r2, [r3, #4]
 80039ce:	e01a      	b.n	8003a06 <Load_EEPROM+0x21a>
 80039d0:	4b4d      	ldr	r3, [pc, #308]	; (8003b08 <Load_EEPROM+0x31c>)
 80039d2:	2228      	movs	r2, #40	; 0x28
 80039d4:	809a      	strh	r2, [r3, #4]
 80039d6:	e016      	b.n	8003a06 <Load_EEPROM+0x21a>
 80039d8:	4b4b      	ldr	r3, [pc, #300]	; (8003b08 <Load_EEPROM+0x31c>)
 80039da:	2214      	movs	r2, #20
 80039dc:	809a      	strh	r2, [r3, #4]
 80039de:	e012      	b.n	8003a06 <Load_EEPROM+0x21a>
 80039e0:	4b49      	ldr	r3, [pc, #292]	; (8003b08 <Load_EEPROM+0x31c>)
 80039e2:	220a      	movs	r2, #10
 80039e4:	809a      	strh	r2, [r3, #4]
 80039e6:	e00e      	b.n	8003a06 <Load_EEPROM+0x21a>
 80039e8:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <Load_EEPROM+0x31c>)
 80039ea:	2205      	movs	r2, #5
 80039ec:	809a      	strh	r2, [r3, #4]
 80039ee:	e00a      	b.n	8003a06 <Load_EEPROM+0x21a>
 80039f0:	4b45      	ldr	r3, [pc, #276]	; (8003b08 <Load_EEPROM+0x31c>)
 80039f2:	2203      	movs	r2, #3
 80039f4:	809a      	strh	r2, [r3, #4]
 80039f6:	e006      	b.n	8003a06 <Load_EEPROM+0x21a>
 80039f8:	4b43      	ldr	r3, [pc, #268]	; (8003b08 <Load_EEPROM+0x31c>)
 80039fa:	2202      	movs	r2, #2
 80039fc:	809a      	strh	r2, [r3, #4]
 80039fe:	e002      	b.n	8003a06 <Load_EEPROM+0x21a>
 8003a00:	4b41      	ldr	r3, [pc, #260]	; (8003b08 <Load_EEPROM+0x31c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	809a      	strh	r2, [r3, #4]
 8003a06:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[3], perMsg[RTC_MSG]);
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	2b0a      	cmp	r3, #10
 8003a0e:	d847      	bhi.n	8003aa0 <Load_EEPROM+0x2b4>
 8003a10:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <Load_EEPROM+0x22c>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a45 	.word	0x08003a45
 8003a1c:	08003a4f 	.word	0x08003a4f
 8003a20:	08003a59 	.word	0x08003a59
 8003a24:	08003a61 	.word	0x08003a61
 8003a28:	08003a69 	.word	0x08003a69
 8003a2c:	08003a71 	.word	0x08003a71
 8003a30:	08003a79 	.word	0x08003a79
 8003a34:	08003a81 	.word	0x08003a81
 8003a38:	08003a89 	.word	0x08003a89
 8003a3c:	08003a91 	.word	0x08003a91
 8003a40:	08003a99 	.word	0x08003a99
 8003a44:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <Load_EEPROM+0x31c>)
 8003a46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a4a:	80da      	strh	r2, [r3, #6]
 8003a4c:	e02b      	b.n	8003aa6 <Load_EEPROM+0x2ba>
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <Load_EEPROM+0x31c>)
 8003a50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a54:	80da      	strh	r2, [r3, #6]
 8003a56:	e026      	b.n	8003aa6 <Load_EEPROM+0x2ba>
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <Load_EEPROM+0x31c>)
 8003a5a:	22c8      	movs	r2, #200	; 0xc8
 8003a5c:	80da      	strh	r2, [r3, #6]
 8003a5e:	e022      	b.n	8003aa6 <Load_EEPROM+0x2ba>
 8003a60:	4b29      	ldr	r3, [pc, #164]	; (8003b08 <Load_EEPROM+0x31c>)
 8003a62:	2264      	movs	r2, #100	; 0x64
 8003a64:	80da      	strh	r2, [r3, #6]
 8003a66:	e01e      	b.n	8003aa6 <Load_EEPROM+0x2ba>
 8003a68:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <Load_EEPROM+0x31c>)
 8003a6a:	2232      	movs	r2, #50	; 0x32
 8003a6c:	80da      	strh	r2, [r3, #6]
 8003a6e:	e01a      	b.n	8003aa6 <Load_EEPROM+0x2ba>
 8003a70:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <Load_EEPROM+0x31c>)
 8003a72:	2228      	movs	r2, #40	; 0x28
 8003a74:	80da      	strh	r2, [r3, #6]
 8003a76:	e016      	b.n	8003aa6 <Load_EEPROM+0x2ba>
 8003a78:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <Load_EEPROM+0x31c>)
 8003a7a:	2214      	movs	r2, #20
 8003a7c:	80da      	strh	r2, [r3, #6]
 8003a7e:	e012      	b.n	8003aa6 <Load_EEPROM+0x2ba>
 8003a80:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <Load_EEPROM+0x31c>)
 8003a82:	220a      	movs	r2, #10
 8003a84:	80da      	strh	r2, [r3, #6]
 8003a86:	e00e      	b.n	8003aa6 <Load_EEPROM+0x2ba>
 8003a88:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <Load_EEPROM+0x31c>)
 8003a8a:	2205      	movs	r2, #5
 8003a8c:	80da      	strh	r2, [r3, #6]
 8003a8e:	e00a      	b.n	8003aa6 <Load_EEPROM+0x2ba>
 8003a90:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <Load_EEPROM+0x31c>)
 8003a92:	2203      	movs	r2, #3
 8003a94:	80da      	strh	r2, [r3, #6]
 8003a96:	e006      	b.n	8003aa6 <Load_EEPROM+0x2ba>
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <Load_EEPROM+0x31c>)
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	80da      	strh	r2, [r3, #6]
 8003a9e:	e002      	b.n	8003aa6 <Load_EEPROM+0x2ba>
 8003aa0:	4b19      	ldr	r3, [pc, #100]	; (8003b08 <Load_EEPROM+0x31c>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	80da      	strh	r2, [r3, #6]
 8003aa6:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[4], perMsg[VERIFY_MSG]);
 8003aa8:	7c3b      	ldrb	r3, [r7, #16]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	2b0a      	cmp	r3, #10
 8003aae:	d849      	bhi.n	8003b44 <Load_EEPROM+0x358>
 8003ab0:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <Load_EEPROM+0x2cc>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003ae5 	.word	0x08003ae5
 8003abc:	08003aef 	.word	0x08003aef
 8003ac0:	08003af9 	.word	0x08003af9
 8003ac4:	08003b01 	.word	0x08003b01
 8003ac8:	08003b0d 	.word	0x08003b0d
 8003acc:	08003b15 	.word	0x08003b15
 8003ad0:	08003b1d 	.word	0x08003b1d
 8003ad4:	08003b25 	.word	0x08003b25
 8003ad8:	08003b2d 	.word	0x08003b2d
 8003adc:	08003b35 	.word	0x08003b35
 8003ae0:	08003b3d 	.word	0x08003b3d
 8003ae4:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <Load_EEPROM+0x31c>)
 8003ae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aea:	811a      	strh	r2, [r3, #8]
 8003aec:	e02d      	b.n	8003b4a <Load_EEPROM+0x35e>
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <Load_EEPROM+0x31c>)
 8003af0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003af4:	811a      	strh	r2, [r3, #8]
 8003af6:	e028      	b.n	8003b4a <Load_EEPROM+0x35e>
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <Load_EEPROM+0x31c>)
 8003afa:	22c8      	movs	r2, #200	; 0xc8
 8003afc:	811a      	strh	r2, [r3, #8]
 8003afe:	e024      	b.n	8003b4a <Load_EEPROM+0x35e>
 8003b00:	4b01      	ldr	r3, [pc, #4]	; (8003b08 <Load_EEPROM+0x31c>)
 8003b02:	2264      	movs	r2, #100	; 0x64
 8003b04:	811a      	strh	r2, [r3, #8]
 8003b06:	e020      	b.n	8003b4a <Load_EEPROM+0x35e>
 8003b08:	20001dec 	.word	0x20001dec
 8003b0c:	4ba7      	ldr	r3, [pc, #668]	; (8003dac <Load_EEPROM+0x5c0>)
 8003b0e:	2232      	movs	r2, #50	; 0x32
 8003b10:	811a      	strh	r2, [r3, #8]
 8003b12:	e01a      	b.n	8003b4a <Load_EEPROM+0x35e>
 8003b14:	4ba5      	ldr	r3, [pc, #660]	; (8003dac <Load_EEPROM+0x5c0>)
 8003b16:	2228      	movs	r2, #40	; 0x28
 8003b18:	811a      	strh	r2, [r3, #8]
 8003b1a:	e016      	b.n	8003b4a <Load_EEPROM+0x35e>
 8003b1c:	4ba3      	ldr	r3, [pc, #652]	; (8003dac <Load_EEPROM+0x5c0>)
 8003b1e:	2214      	movs	r2, #20
 8003b20:	811a      	strh	r2, [r3, #8]
 8003b22:	e012      	b.n	8003b4a <Load_EEPROM+0x35e>
 8003b24:	4ba1      	ldr	r3, [pc, #644]	; (8003dac <Load_EEPROM+0x5c0>)
 8003b26:	220a      	movs	r2, #10
 8003b28:	811a      	strh	r2, [r3, #8]
 8003b2a:	e00e      	b.n	8003b4a <Load_EEPROM+0x35e>
 8003b2c:	4b9f      	ldr	r3, [pc, #636]	; (8003dac <Load_EEPROM+0x5c0>)
 8003b2e:	2205      	movs	r2, #5
 8003b30:	811a      	strh	r2, [r3, #8]
 8003b32:	e00a      	b.n	8003b4a <Load_EEPROM+0x35e>
 8003b34:	4b9d      	ldr	r3, [pc, #628]	; (8003dac <Load_EEPROM+0x5c0>)
 8003b36:	2203      	movs	r2, #3
 8003b38:	811a      	strh	r2, [r3, #8]
 8003b3a:	e006      	b.n	8003b4a <Load_EEPROM+0x35e>
 8003b3c:	4b9b      	ldr	r3, [pc, #620]	; (8003dac <Load_EEPROM+0x5c0>)
 8003b3e:	2202      	movs	r2, #2
 8003b40:	811a      	strh	r2, [r3, #8]
 8003b42:	e002      	b.n	8003b4a <Load_EEPROM+0x35e>
 8003b44:	4b99      	ldr	r3, [pc, #612]	; (8003dac <Load_EEPROM+0x5c0>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	811a      	strh	r2, [r3, #8]
 8003b4a:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[5], perMsg[ECU_SAVE]);
 8003b4c:	7c7b      	ldrb	r3, [r7, #17]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	2b0a      	cmp	r3, #10
 8003b52:	d847      	bhi.n	8003be4 <Load_EEPROM+0x3f8>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <Load_EEPROM+0x370>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b89 	.word	0x08003b89
 8003b60:	08003b93 	.word	0x08003b93
 8003b64:	08003b9d 	.word	0x08003b9d
 8003b68:	08003ba5 	.word	0x08003ba5
 8003b6c:	08003bad 	.word	0x08003bad
 8003b70:	08003bb5 	.word	0x08003bb5
 8003b74:	08003bbd 	.word	0x08003bbd
 8003b78:	08003bc5 	.word	0x08003bc5
 8003b7c:	08003bcd 	.word	0x08003bcd
 8003b80:	08003bd5 	.word	0x08003bd5
 8003b84:	08003bdd 	.word	0x08003bdd
 8003b88:	4b88      	ldr	r3, [pc, #544]	; (8003dac <Load_EEPROM+0x5c0>)
 8003b8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b8e:	819a      	strh	r2, [r3, #12]
 8003b90:	e02b      	b.n	8003bea <Load_EEPROM+0x3fe>
 8003b92:	4b86      	ldr	r3, [pc, #536]	; (8003dac <Load_EEPROM+0x5c0>)
 8003b94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b98:	819a      	strh	r2, [r3, #12]
 8003b9a:	e026      	b.n	8003bea <Load_EEPROM+0x3fe>
 8003b9c:	4b83      	ldr	r3, [pc, #524]	; (8003dac <Load_EEPROM+0x5c0>)
 8003b9e:	22c8      	movs	r2, #200	; 0xc8
 8003ba0:	819a      	strh	r2, [r3, #12]
 8003ba2:	e022      	b.n	8003bea <Load_EEPROM+0x3fe>
 8003ba4:	4b81      	ldr	r3, [pc, #516]	; (8003dac <Load_EEPROM+0x5c0>)
 8003ba6:	2264      	movs	r2, #100	; 0x64
 8003ba8:	819a      	strh	r2, [r3, #12]
 8003baa:	e01e      	b.n	8003bea <Load_EEPROM+0x3fe>
 8003bac:	4b7f      	ldr	r3, [pc, #508]	; (8003dac <Load_EEPROM+0x5c0>)
 8003bae:	2232      	movs	r2, #50	; 0x32
 8003bb0:	819a      	strh	r2, [r3, #12]
 8003bb2:	e01a      	b.n	8003bea <Load_EEPROM+0x3fe>
 8003bb4:	4b7d      	ldr	r3, [pc, #500]	; (8003dac <Load_EEPROM+0x5c0>)
 8003bb6:	2228      	movs	r2, #40	; 0x28
 8003bb8:	819a      	strh	r2, [r3, #12]
 8003bba:	e016      	b.n	8003bea <Load_EEPROM+0x3fe>
 8003bbc:	4b7b      	ldr	r3, [pc, #492]	; (8003dac <Load_EEPROM+0x5c0>)
 8003bbe:	2214      	movs	r2, #20
 8003bc0:	819a      	strh	r2, [r3, #12]
 8003bc2:	e012      	b.n	8003bea <Load_EEPROM+0x3fe>
 8003bc4:	4b79      	ldr	r3, [pc, #484]	; (8003dac <Load_EEPROM+0x5c0>)
 8003bc6:	220a      	movs	r2, #10
 8003bc8:	819a      	strh	r2, [r3, #12]
 8003bca:	e00e      	b.n	8003bea <Load_EEPROM+0x3fe>
 8003bcc:	4b77      	ldr	r3, [pc, #476]	; (8003dac <Load_EEPROM+0x5c0>)
 8003bce:	2205      	movs	r2, #5
 8003bd0:	819a      	strh	r2, [r3, #12]
 8003bd2:	e00a      	b.n	8003bea <Load_EEPROM+0x3fe>
 8003bd4:	4b75      	ldr	r3, [pc, #468]	; (8003dac <Load_EEPROM+0x5c0>)
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	819a      	strh	r2, [r3, #12]
 8003bda:	e006      	b.n	8003bea <Load_EEPROM+0x3fe>
 8003bdc:	4b73      	ldr	r3, [pc, #460]	; (8003dac <Load_EEPROM+0x5c0>)
 8003bde:	2202      	movs	r2, #2
 8003be0:	819a      	strh	r2, [r3, #12]
 8003be2:	e002      	b.n	8003bea <Load_EEPROM+0x3fe>
 8003be4:	4b71      	ldr	r3, [pc, #452]	; (8003dac <Load_EEPROM+0x5c0>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	819a      	strh	r2, [r3, #12]
 8003bea:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[6], perMsg[PDM_SAVE]);
 8003bec:	7cbb      	ldrb	r3, [r7, #18]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	2b0a      	cmp	r3, #10
 8003bf2:	d847      	bhi.n	8003c84 <Load_EEPROM+0x498>
 8003bf4:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <Load_EEPROM+0x410>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c29 	.word	0x08003c29
 8003c00:	08003c33 	.word	0x08003c33
 8003c04:	08003c3d 	.word	0x08003c3d
 8003c08:	08003c45 	.word	0x08003c45
 8003c0c:	08003c4d 	.word	0x08003c4d
 8003c10:	08003c55 	.word	0x08003c55
 8003c14:	08003c5d 	.word	0x08003c5d
 8003c18:	08003c65 	.word	0x08003c65
 8003c1c:	08003c6d 	.word	0x08003c6d
 8003c20:	08003c75 	.word	0x08003c75
 8003c24:	08003c7d 	.word	0x08003c7d
 8003c28:	4b60      	ldr	r3, [pc, #384]	; (8003dac <Load_EEPROM+0x5c0>)
 8003c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c2e:	81da      	strh	r2, [r3, #14]
 8003c30:	e02b      	b.n	8003c8a <Load_EEPROM+0x49e>
 8003c32:	4b5e      	ldr	r3, [pc, #376]	; (8003dac <Load_EEPROM+0x5c0>)
 8003c34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c38:	81da      	strh	r2, [r3, #14]
 8003c3a:	e026      	b.n	8003c8a <Load_EEPROM+0x49e>
 8003c3c:	4b5b      	ldr	r3, [pc, #364]	; (8003dac <Load_EEPROM+0x5c0>)
 8003c3e:	22c8      	movs	r2, #200	; 0xc8
 8003c40:	81da      	strh	r2, [r3, #14]
 8003c42:	e022      	b.n	8003c8a <Load_EEPROM+0x49e>
 8003c44:	4b59      	ldr	r3, [pc, #356]	; (8003dac <Load_EEPROM+0x5c0>)
 8003c46:	2264      	movs	r2, #100	; 0x64
 8003c48:	81da      	strh	r2, [r3, #14]
 8003c4a:	e01e      	b.n	8003c8a <Load_EEPROM+0x49e>
 8003c4c:	4b57      	ldr	r3, [pc, #348]	; (8003dac <Load_EEPROM+0x5c0>)
 8003c4e:	2232      	movs	r2, #50	; 0x32
 8003c50:	81da      	strh	r2, [r3, #14]
 8003c52:	e01a      	b.n	8003c8a <Load_EEPROM+0x49e>
 8003c54:	4b55      	ldr	r3, [pc, #340]	; (8003dac <Load_EEPROM+0x5c0>)
 8003c56:	2228      	movs	r2, #40	; 0x28
 8003c58:	81da      	strh	r2, [r3, #14]
 8003c5a:	e016      	b.n	8003c8a <Load_EEPROM+0x49e>
 8003c5c:	4b53      	ldr	r3, [pc, #332]	; (8003dac <Load_EEPROM+0x5c0>)
 8003c5e:	2214      	movs	r2, #20
 8003c60:	81da      	strh	r2, [r3, #14]
 8003c62:	e012      	b.n	8003c8a <Load_EEPROM+0x49e>
 8003c64:	4b51      	ldr	r3, [pc, #324]	; (8003dac <Load_EEPROM+0x5c0>)
 8003c66:	220a      	movs	r2, #10
 8003c68:	81da      	strh	r2, [r3, #14]
 8003c6a:	e00e      	b.n	8003c8a <Load_EEPROM+0x49e>
 8003c6c:	4b4f      	ldr	r3, [pc, #316]	; (8003dac <Load_EEPROM+0x5c0>)
 8003c6e:	2205      	movs	r2, #5
 8003c70:	81da      	strh	r2, [r3, #14]
 8003c72:	e00a      	b.n	8003c8a <Load_EEPROM+0x49e>
 8003c74:	4b4d      	ldr	r3, [pc, #308]	; (8003dac <Load_EEPROM+0x5c0>)
 8003c76:	2203      	movs	r2, #3
 8003c78:	81da      	strh	r2, [r3, #14]
 8003c7a:	e006      	b.n	8003c8a <Load_EEPROM+0x49e>
 8003c7c:	4b4b      	ldr	r3, [pc, #300]	; (8003dac <Load_EEPROM+0x5c0>)
 8003c7e:	2202      	movs	r2, #2
 8003c80:	81da      	strh	r2, [r3, #14]
 8003c82:	e002      	b.n	8003c8a <Load_EEPROM+0x49e>
 8003c84:	4b49      	ldr	r3, [pc, #292]	; (8003dac <Load_EEPROM+0x5c0>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	81da      	strh	r2, [r3, #14]
 8003c8a:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[7], perCAN[ANALOG_1_4]);
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	2b0a      	cmp	r3, #10
 8003c92:	d847      	bhi.n	8003d24 <Load_EEPROM+0x538>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <Load_EEPROM+0x4b0>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cc9 	.word	0x08003cc9
 8003ca0:	08003cd3 	.word	0x08003cd3
 8003ca4:	08003cdd 	.word	0x08003cdd
 8003ca8:	08003ce5 	.word	0x08003ce5
 8003cac:	08003ced 	.word	0x08003ced
 8003cb0:	08003cf5 	.word	0x08003cf5
 8003cb4:	08003cfd 	.word	0x08003cfd
 8003cb8:	08003d05 	.word	0x08003d05
 8003cbc:	08003d0d 	.word	0x08003d0d
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003d1d 	.word	0x08003d1d
 8003cc8:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cce:	801a      	strh	r2, [r3, #0]
 8003cd0:	e02b      	b.n	8003d2a <Load_EEPROM+0x53e>
 8003cd2:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003cd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003cd8:	801a      	strh	r2, [r3, #0]
 8003cda:	e026      	b.n	8003d2a <Load_EEPROM+0x53e>
 8003cdc:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003cde:	22c8      	movs	r2, #200	; 0xc8
 8003ce0:	801a      	strh	r2, [r3, #0]
 8003ce2:	e022      	b.n	8003d2a <Load_EEPROM+0x53e>
 8003ce4:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003ce6:	2264      	movs	r2, #100	; 0x64
 8003ce8:	801a      	strh	r2, [r3, #0]
 8003cea:	e01e      	b.n	8003d2a <Load_EEPROM+0x53e>
 8003cec:	4b30      	ldr	r3, [pc, #192]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003cee:	2232      	movs	r2, #50	; 0x32
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	e01a      	b.n	8003d2a <Load_EEPROM+0x53e>
 8003cf4:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003cf6:	2228      	movs	r2, #40	; 0x28
 8003cf8:	801a      	strh	r2, [r3, #0]
 8003cfa:	e016      	b.n	8003d2a <Load_EEPROM+0x53e>
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003cfe:	2214      	movs	r2, #20
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	e012      	b.n	8003d2a <Load_EEPROM+0x53e>
 8003d04:	4b2a      	ldr	r3, [pc, #168]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003d06:	220a      	movs	r2, #10
 8003d08:	801a      	strh	r2, [r3, #0]
 8003d0a:	e00e      	b.n	8003d2a <Load_EEPROM+0x53e>
 8003d0c:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003d0e:	2205      	movs	r2, #5
 8003d10:	801a      	strh	r2, [r3, #0]
 8003d12:	e00a      	b.n	8003d2a <Load_EEPROM+0x53e>
 8003d14:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003d16:	2203      	movs	r2, #3
 8003d18:	801a      	strh	r2, [r3, #0]
 8003d1a:	e006      	b.n	8003d2a <Load_EEPROM+0x53e>
 8003d1c:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003d1e:	2202      	movs	r2, #2
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	e002      	b.n	8003d2a <Load_EEPROM+0x53e>
 8003d24:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	801a      	strh	r2, [r3, #0]
 8003d2a:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[8], perCAN[ANALOG_5_8]);
 8003d2c:	7d3b      	ldrb	r3, [r7, #20]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	2b0a      	cmp	r3, #10
 8003d32:	d84b      	bhi.n	8003dcc <Load_EEPROM+0x5e0>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <Load_EEPROM+0x550>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d69 	.word	0x08003d69
 8003d40:	08003d73 	.word	0x08003d73
 8003d44:	08003d7d 	.word	0x08003d7d
 8003d48:	08003d85 	.word	0x08003d85
 8003d4c:	08003d8d 	.word	0x08003d8d
 8003d50:	08003d95 	.word	0x08003d95
 8003d54:	08003d9d 	.word	0x08003d9d
 8003d58:	08003da5 	.word	0x08003da5
 8003d5c:	08003db5 	.word	0x08003db5
 8003d60:	08003dbd 	.word	0x08003dbd
 8003d64:	08003dc5 	.word	0x08003dc5
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003d6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d6e:	805a      	strh	r2, [r3, #2]
 8003d70:	e02f      	b.n	8003dd2 <Load_EEPROM+0x5e6>
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003d74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d78:	805a      	strh	r2, [r3, #2]
 8003d7a:	e02a      	b.n	8003dd2 <Load_EEPROM+0x5e6>
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003d7e:	22c8      	movs	r2, #200	; 0xc8
 8003d80:	805a      	strh	r2, [r3, #2]
 8003d82:	e026      	b.n	8003dd2 <Load_EEPROM+0x5e6>
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003d86:	2264      	movs	r2, #100	; 0x64
 8003d88:	805a      	strh	r2, [r3, #2]
 8003d8a:	e022      	b.n	8003dd2 <Load_EEPROM+0x5e6>
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003d8e:	2232      	movs	r2, #50	; 0x32
 8003d90:	805a      	strh	r2, [r3, #2]
 8003d92:	e01e      	b.n	8003dd2 <Load_EEPROM+0x5e6>
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003d96:	2228      	movs	r2, #40	; 0x28
 8003d98:	805a      	strh	r2, [r3, #2]
 8003d9a:	e01a      	b.n	8003dd2 <Load_EEPROM+0x5e6>
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003d9e:	2214      	movs	r2, #20
 8003da0:	805a      	strh	r2, [r3, #2]
 8003da2:	e016      	b.n	8003dd2 <Load_EEPROM+0x5e6>
 8003da4:	4b02      	ldr	r3, [pc, #8]	; (8003db0 <Load_EEPROM+0x5c4>)
 8003da6:	220a      	movs	r2, #10
 8003da8:	805a      	strh	r2, [r3, #2]
 8003daa:	e012      	b.n	8003dd2 <Load_EEPROM+0x5e6>
 8003dac:	20001dec 	.word	0x20001dec
 8003db0:	200018ec 	.word	0x200018ec
 8003db4:	4b91      	ldr	r3, [pc, #580]	; (8003ffc <Load_EEPROM+0x810>)
 8003db6:	2205      	movs	r2, #5
 8003db8:	805a      	strh	r2, [r3, #2]
 8003dba:	e00a      	b.n	8003dd2 <Load_EEPROM+0x5e6>
 8003dbc:	4b8f      	ldr	r3, [pc, #572]	; (8003ffc <Load_EEPROM+0x810>)
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	805a      	strh	r2, [r3, #2]
 8003dc2:	e006      	b.n	8003dd2 <Load_EEPROM+0x5e6>
 8003dc4:	4b8d      	ldr	r3, [pc, #564]	; (8003ffc <Load_EEPROM+0x810>)
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	805a      	strh	r2, [r3, #2]
 8003dca:	e002      	b.n	8003dd2 <Load_EEPROM+0x5e6>
 8003dcc:	4b8b      	ldr	r3, [pc, #556]	; (8003ffc <Load_EEPROM+0x810>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	805a      	strh	r2, [r3, #2]
 8003dd2:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[9], perCAN[ANALOG_9_12]);
 8003dd4:	7d7b      	ldrb	r3, [r7, #21]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	2b0a      	cmp	r3, #10
 8003dda:	d847      	bhi.n	8003e6c <Load_EEPROM+0x680>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <Load_EEPROM+0x5f8>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e11 	.word	0x08003e11
 8003de8:	08003e1b 	.word	0x08003e1b
 8003dec:	08003e25 	.word	0x08003e25
 8003df0:	08003e2d 	.word	0x08003e2d
 8003df4:	08003e35 	.word	0x08003e35
 8003df8:	08003e3d 	.word	0x08003e3d
 8003dfc:	08003e45 	.word	0x08003e45
 8003e00:	08003e4d 	.word	0x08003e4d
 8003e04:	08003e55 	.word	0x08003e55
 8003e08:	08003e5d 	.word	0x08003e5d
 8003e0c:	08003e65 	.word	0x08003e65
 8003e10:	4b7a      	ldr	r3, [pc, #488]	; (8003ffc <Load_EEPROM+0x810>)
 8003e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e16:	809a      	strh	r2, [r3, #4]
 8003e18:	e02b      	b.n	8003e72 <Load_EEPROM+0x686>
 8003e1a:	4b78      	ldr	r3, [pc, #480]	; (8003ffc <Load_EEPROM+0x810>)
 8003e1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e20:	809a      	strh	r2, [r3, #4]
 8003e22:	e026      	b.n	8003e72 <Load_EEPROM+0x686>
 8003e24:	4b75      	ldr	r3, [pc, #468]	; (8003ffc <Load_EEPROM+0x810>)
 8003e26:	22c8      	movs	r2, #200	; 0xc8
 8003e28:	809a      	strh	r2, [r3, #4]
 8003e2a:	e022      	b.n	8003e72 <Load_EEPROM+0x686>
 8003e2c:	4b73      	ldr	r3, [pc, #460]	; (8003ffc <Load_EEPROM+0x810>)
 8003e2e:	2264      	movs	r2, #100	; 0x64
 8003e30:	809a      	strh	r2, [r3, #4]
 8003e32:	e01e      	b.n	8003e72 <Load_EEPROM+0x686>
 8003e34:	4b71      	ldr	r3, [pc, #452]	; (8003ffc <Load_EEPROM+0x810>)
 8003e36:	2232      	movs	r2, #50	; 0x32
 8003e38:	809a      	strh	r2, [r3, #4]
 8003e3a:	e01a      	b.n	8003e72 <Load_EEPROM+0x686>
 8003e3c:	4b6f      	ldr	r3, [pc, #444]	; (8003ffc <Load_EEPROM+0x810>)
 8003e3e:	2228      	movs	r2, #40	; 0x28
 8003e40:	809a      	strh	r2, [r3, #4]
 8003e42:	e016      	b.n	8003e72 <Load_EEPROM+0x686>
 8003e44:	4b6d      	ldr	r3, [pc, #436]	; (8003ffc <Load_EEPROM+0x810>)
 8003e46:	2214      	movs	r2, #20
 8003e48:	809a      	strh	r2, [r3, #4]
 8003e4a:	e012      	b.n	8003e72 <Load_EEPROM+0x686>
 8003e4c:	4b6b      	ldr	r3, [pc, #428]	; (8003ffc <Load_EEPROM+0x810>)
 8003e4e:	220a      	movs	r2, #10
 8003e50:	809a      	strh	r2, [r3, #4]
 8003e52:	e00e      	b.n	8003e72 <Load_EEPROM+0x686>
 8003e54:	4b69      	ldr	r3, [pc, #420]	; (8003ffc <Load_EEPROM+0x810>)
 8003e56:	2205      	movs	r2, #5
 8003e58:	809a      	strh	r2, [r3, #4]
 8003e5a:	e00a      	b.n	8003e72 <Load_EEPROM+0x686>
 8003e5c:	4b67      	ldr	r3, [pc, #412]	; (8003ffc <Load_EEPROM+0x810>)
 8003e5e:	2203      	movs	r2, #3
 8003e60:	809a      	strh	r2, [r3, #4]
 8003e62:	e006      	b.n	8003e72 <Load_EEPROM+0x686>
 8003e64:	4b65      	ldr	r3, [pc, #404]	; (8003ffc <Load_EEPROM+0x810>)
 8003e66:	2202      	movs	r2, #2
 8003e68:	809a      	strh	r2, [r3, #4]
 8003e6a:	e002      	b.n	8003e72 <Load_EEPROM+0x686>
 8003e6c:	4b63      	ldr	r3, [pc, #396]	; (8003ffc <Load_EEPROM+0x810>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	809a      	strh	r2, [r3, #4]
 8003e72:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[10], perCAN[RTC_MSG]);
 8003e74:	7dbb      	ldrb	r3, [r7, #22]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	2b0a      	cmp	r3, #10
 8003e7a:	d847      	bhi.n	8003f0c <Load_EEPROM+0x720>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <Load_EEPROM+0x698>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003eb1 	.word	0x08003eb1
 8003e88:	08003ebb 	.word	0x08003ebb
 8003e8c:	08003ec5 	.word	0x08003ec5
 8003e90:	08003ecd 	.word	0x08003ecd
 8003e94:	08003ed5 	.word	0x08003ed5
 8003e98:	08003edd 	.word	0x08003edd
 8003e9c:	08003ee5 	.word	0x08003ee5
 8003ea0:	08003eed 	.word	0x08003eed
 8003ea4:	08003ef5 	.word	0x08003ef5
 8003ea8:	08003efd 	.word	0x08003efd
 8003eac:	08003f05 	.word	0x08003f05
 8003eb0:	4b52      	ldr	r3, [pc, #328]	; (8003ffc <Load_EEPROM+0x810>)
 8003eb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eb6:	80da      	strh	r2, [r3, #6]
 8003eb8:	e02b      	b.n	8003f12 <Load_EEPROM+0x726>
 8003eba:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <Load_EEPROM+0x810>)
 8003ebc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ec0:	80da      	strh	r2, [r3, #6]
 8003ec2:	e026      	b.n	8003f12 <Load_EEPROM+0x726>
 8003ec4:	4b4d      	ldr	r3, [pc, #308]	; (8003ffc <Load_EEPROM+0x810>)
 8003ec6:	22c8      	movs	r2, #200	; 0xc8
 8003ec8:	80da      	strh	r2, [r3, #6]
 8003eca:	e022      	b.n	8003f12 <Load_EEPROM+0x726>
 8003ecc:	4b4b      	ldr	r3, [pc, #300]	; (8003ffc <Load_EEPROM+0x810>)
 8003ece:	2264      	movs	r2, #100	; 0x64
 8003ed0:	80da      	strh	r2, [r3, #6]
 8003ed2:	e01e      	b.n	8003f12 <Load_EEPROM+0x726>
 8003ed4:	4b49      	ldr	r3, [pc, #292]	; (8003ffc <Load_EEPROM+0x810>)
 8003ed6:	2232      	movs	r2, #50	; 0x32
 8003ed8:	80da      	strh	r2, [r3, #6]
 8003eda:	e01a      	b.n	8003f12 <Load_EEPROM+0x726>
 8003edc:	4b47      	ldr	r3, [pc, #284]	; (8003ffc <Load_EEPROM+0x810>)
 8003ede:	2228      	movs	r2, #40	; 0x28
 8003ee0:	80da      	strh	r2, [r3, #6]
 8003ee2:	e016      	b.n	8003f12 <Load_EEPROM+0x726>
 8003ee4:	4b45      	ldr	r3, [pc, #276]	; (8003ffc <Load_EEPROM+0x810>)
 8003ee6:	2214      	movs	r2, #20
 8003ee8:	80da      	strh	r2, [r3, #6]
 8003eea:	e012      	b.n	8003f12 <Load_EEPROM+0x726>
 8003eec:	4b43      	ldr	r3, [pc, #268]	; (8003ffc <Load_EEPROM+0x810>)
 8003eee:	220a      	movs	r2, #10
 8003ef0:	80da      	strh	r2, [r3, #6]
 8003ef2:	e00e      	b.n	8003f12 <Load_EEPROM+0x726>
 8003ef4:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <Load_EEPROM+0x810>)
 8003ef6:	2205      	movs	r2, #5
 8003ef8:	80da      	strh	r2, [r3, #6]
 8003efa:	e00a      	b.n	8003f12 <Load_EEPROM+0x726>
 8003efc:	4b3f      	ldr	r3, [pc, #252]	; (8003ffc <Load_EEPROM+0x810>)
 8003efe:	2203      	movs	r2, #3
 8003f00:	80da      	strh	r2, [r3, #6]
 8003f02:	e006      	b.n	8003f12 <Load_EEPROM+0x726>
 8003f04:	4b3d      	ldr	r3, [pc, #244]	; (8003ffc <Load_EEPROM+0x810>)
 8003f06:	2202      	movs	r2, #2
 8003f08:	80da      	strh	r2, [r3, #6]
 8003f0a:	e002      	b.n	8003f12 <Load_EEPROM+0x726>
 8003f0c:	4b3b      	ldr	r3, [pc, #236]	; (8003ffc <Load_EEPROM+0x810>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	80da      	strh	r2, [r3, #6]
 8003f12:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[10], perCAN[VERIFY_MSG]);
 8003f14:	7dbb      	ldrb	r3, [r7, #22]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	2b0a      	cmp	r3, #10
 8003f1a:	d847      	bhi.n	8003fac <Load_EEPROM+0x7c0>
 8003f1c:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <Load_EEPROM+0x738>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f51 	.word	0x08003f51
 8003f28:	08003f5b 	.word	0x08003f5b
 8003f2c:	08003f65 	.word	0x08003f65
 8003f30:	08003f6d 	.word	0x08003f6d
 8003f34:	08003f75 	.word	0x08003f75
 8003f38:	08003f7d 	.word	0x08003f7d
 8003f3c:	08003f85 	.word	0x08003f85
 8003f40:	08003f8d 	.word	0x08003f8d
 8003f44:	08003f95 	.word	0x08003f95
 8003f48:	08003f9d 	.word	0x08003f9d
 8003f4c:	08003fa5 	.word	0x08003fa5
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <Load_EEPROM+0x810>)
 8003f52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f56:	811a      	strh	r2, [r3, #8]
 8003f58:	e02b      	b.n	8003fb2 <Load_EEPROM+0x7c6>
 8003f5a:	4b28      	ldr	r3, [pc, #160]	; (8003ffc <Load_EEPROM+0x810>)
 8003f5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f60:	811a      	strh	r2, [r3, #8]
 8003f62:	e026      	b.n	8003fb2 <Load_EEPROM+0x7c6>
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <Load_EEPROM+0x810>)
 8003f66:	22c8      	movs	r2, #200	; 0xc8
 8003f68:	811a      	strh	r2, [r3, #8]
 8003f6a:	e022      	b.n	8003fb2 <Load_EEPROM+0x7c6>
 8003f6c:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <Load_EEPROM+0x810>)
 8003f6e:	2264      	movs	r2, #100	; 0x64
 8003f70:	811a      	strh	r2, [r3, #8]
 8003f72:	e01e      	b.n	8003fb2 <Load_EEPROM+0x7c6>
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <Load_EEPROM+0x810>)
 8003f76:	2232      	movs	r2, #50	; 0x32
 8003f78:	811a      	strh	r2, [r3, #8]
 8003f7a:	e01a      	b.n	8003fb2 <Load_EEPROM+0x7c6>
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <Load_EEPROM+0x810>)
 8003f7e:	2228      	movs	r2, #40	; 0x28
 8003f80:	811a      	strh	r2, [r3, #8]
 8003f82:	e016      	b.n	8003fb2 <Load_EEPROM+0x7c6>
 8003f84:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <Load_EEPROM+0x810>)
 8003f86:	2214      	movs	r2, #20
 8003f88:	811a      	strh	r2, [r3, #8]
 8003f8a:	e012      	b.n	8003fb2 <Load_EEPROM+0x7c6>
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <Load_EEPROM+0x810>)
 8003f8e:	220a      	movs	r2, #10
 8003f90:	811a      	strh	r2, [r3, #8]
 8003f92:	e00e      	b.n	8003fb2 <Load_EEPROM+0x7c6>
 8003f94:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <Load_EEPROM+0x810>)
 8003f96:	2205      	movs	r2, #5
 8003f98:	811a      	strh	r2, [r3, #8]
 8003f9a:	e00a      	b.n	8003fb2 <Load_EEPROM+0x7c6>
 8003f9c:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <Load_EEPROM+0x810>)
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	811a      	strh	r2, [r3, #8]
 8003fa2:	e006      	b.n	8003fb2 <Load_EEPROM+0x7c6>
 8003fa4:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <Load_EEPROM+0x810>)
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	811a      	strh	r2, [r3, #8]
 8003faa:	e002      	b.n	8003fb2 <Load_EEPROM+0x7c6>
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <Load_EEPROM+0x810>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	811a      	strh	r2, [r3, #8]
 8003fb2:	bf00      	nop

	inputConfig 	 = buffer[12];
 8003fb4:	7e3a      	ldrb	r2, [r7, #24]
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <Load_EEPROM+0x814>)
 8003fb8:	701a      	strb	r2, [r3, #0]
	thresholdRPM	 = buffer[13] << 8;
 8003fba:	7e7b      	ldrb	r3, [r7, #25]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	b21a      	sxth	r2, r3
 8003fc0:	4b10      	ldr	r3, [pc, #64]	; (8004004 <Load_EEPROM+0x818>)
 8003fc2:	801a      	strh	r2, [r3, #0]
	thresholdRPM	|= buffer[14] & 0xff;
 8003fc4:	7ebb      	ldrb	r3, [r7, #26]
 8003fc6:	b21a      	sxth	r2, r3
 8003fc8:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <Load_EEPROM+0x818>)
 8003fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	b21a      	sxth	r2, r3
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <Load_EEPROM+0x818>)
 8003fd4:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	 = buffer[15] << 8;
 8003fd6:	7efb      	ldrb	r3, [r7, #27]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	b21a      	sxth	r2, r3
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <Load_EEPROM+0x81c>)
 8003fde:	801a      	strh	r2, [r3, #0]
	thresholdSpeed |= buffer[16] & 0xff;
 8003fe0:	7f3b      	ldrb	r3, [r7, #28]
 8003fe2:	b21a      	sxth	r2, r3
 8003fe4:	4b08      	ldr	r3, [pc, #32]	; (8004008 <Load_EEPROM+0x81c>)
 8003fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	b21a      	sxth	r2, r3
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <Load_EEPROM+0x81c>)
 8003ff0:	801a      	strh	r2, [r3, #0]

	return retVal;
 8003ff2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	200018ec 	.word	0x200018ec
 8004000:	200018a2 	.word	0x200018a2
 8004004:	2000069a 	.word	0x2000069a
 8004008:	20001dc8 	.word	0x20001dc8

0800400c <Save_EEPROM>:

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af02      	add	r7, sp, #8
 8004012:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];

	__FREQ_TO_BUFFER(buffer[0], perMsg[ANALOG_1_4]);
 8004014:	4ba9      	ldr	r3, [pc, #676]	; (80042bc <Save_EEPROM+0x2b0>)
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800401c:	f000 8081 	beq.w	8004122 <Save_EEPROM+0x116>
 8004020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004024:	f300 809e 	bgt.w	8004164 <Save_EEPROM+0x158>
 8004028:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800402c:	d07c      	beq.n	8004128 <Save_EEPROM+0x11c>
 800402e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004032:	f300 8097 	bgt.w	8004164 <Save_EEPROM+0x158>
 8004036:	2bc8      	cmp	r3, #200	; 0xc8
 8004038:	d079      	beq.n	800412e <Save_EEPROM+0x122>
 800403a:	2bc8      	cmp	r3, #200	; 0xc8
 800403c:	f300 8092 	bgt.w	8004164 <Save_EEPROM+0x158>
 8004040:	2b32      	cmp	r3, #50	; 0x32
 8004042:	dc6b      	bgt.n	800411c <Save_EEPROM+0x110>
 8004044:	2b02      	cmp	r3, #2
 8004046:	f2c0 808d 	blt.w	8004164 <Save_EEPROM+0x158>
 800404a:	3b02      	subs	r3, #2
 800404c:	2b30      	cmp	r3, #48	; 0x30
 800404e:	f200 8089 	bhi.w	8004164 <Save_EEPROM+0x158>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <Save_EEPROM+0x4c>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	0800415f 	.word	0x0800415f
 800405c:	08004159 	.word	0x08004159
 8004060:	08004165 	.word	0x08004165
 8004064:	08004153 	.word	0x08004153
 8004068:	08004165 	.word	0x08004165
 800406c:	08004165 	.word	0x08004165
 8004070:	08004165 	.word	0x08004165
 8004074:	08004165 	.word	0x08004165
 8004078:	0800414d 	.word	0x0800414d
 800407c:	08004165 	.word	0x08004165
 8004080:	08004165 	.word	0x08004165
 8004084:	08004165 	.word	0x08004165
 8004088:	08004165 	.word	0x08004165
 800408c:	08004165 	.word	0x08004165
 8004090:	08004165 	.word	0x08004165
 8004094:	08004165 	.word	0x08004165
 8004098:	08004165 	.word	0x08004165
 800409c:	08004165 	.word	0x08004165
 80040a0:	08004147 	.word	0x08004147
 80040a4:	08004165 	.word	0x08004165
 80040a8:	08004165 	.word	0x08004165
 80040ac:	08004165 	.word	0x08004165
 80040b0:	08004165 	.word	0x08004165
 80040b4:	08004165 	.word	0x08004165
 80040b8:	08004165 	.word	0x08004165
 80040bc:	08004165 	.word	0x08004165
 80040c0:	08004165 	.word	0x08004165
 80040c4:	08004165 	.word	0x08004165
 80040c8:	08004165 	.word	0x08004165
 80040cc:	08004165 	.word	0x08004165
 80040d0:	08004165 	.word	0x08004165
 80040d4:	08004165 	.word	0x08004165
 80040d8:	08004165 	.word	0x08004165
 80040dc:	08004165 	.word	0x08004165
 80040e0:	08004165 	.word	0x08004165
 80040e4:	08004165 	.word	0x08004165
 80040e8:	08004165 	.word	0x08004165
 80040ec:	08004165 	.word	0x08004165
 80040f0:	08004141 	.word	0x08004141
 80040f4:	08004165 	.word	0x08004165
 80040f8:	08004165 	.word	0x08004165
 80040fc:	08004165 	.word	0x08004165
 8004100:	08004165 	.word	0x08004165
 8004104:	08004165 	.word	0x08004165
 8004108:	08004165 	.word	0x08004165
 800410c:	08004165 	.word	0x08004165
 8004110:	08004165 	.word	0x08004165
 8004114:	08004165 	.word	0x08004165
 8004118:	0800413b 	.word	0x0800413b
 800411c:	2b64      	cmp	r3, #100	; 0x64
 800411e:	d009      	beq.n	8004134 <Save_EEPROM+0x128>
 8004120:	e020      	b.n	8004164 <Save_EEPROM+0x158>
 8004122:	2301      	movs	r3, #1
 8004124:	733b      	strb	r3, [r7, #12]
 8004126:	e01f      	b.n	8004168 <Save_EEPROM+0x15c>
 8004128:	2302      	movs	r3, #2
 800412a:	733b      	strb	r3, [r7, #12]
 800412c:	e01c      	b.n	8004168 <Save_EEPROM+0x15c>
 800412e:	2303      	movs	r3, #3
 8004130:	733b      	strb	r3, [r7, #12]
 8004132:	e019      	b.n	8004168 <Save_EEPROM+0x15c>
 8004134:	2304      	movs	r3, #4
 8004136:	733b      	strb	r3, [r7, #12]
 8004138:	e016      	b.n	8004168 <Save_EEPROM+0x15c>
 800413a:	2305      	movs	r3, #5
 800413c:	733b      	strb	r3, [r7, #12]
 800413e:	e013      	b.n	8004168 <Save_EEPROM+0x15c>
 8004140:	2306      	movs	r3, #6
 8004142:	733b      	strb	r3, [r7, #12]
 8004144:	e010      	b.n	8004168 <Save_EEPROM+0x15c>
 8004146:	2307      	movs	r3, #7
 8004148:	733b      	strb	r3, [r7, #12]
 800414a:	e00d      	b.n	8004168 <Save_EEPROM+0x15c>
 800414c:	2308      	movs	r3, #8
 800414e:	733b      	strb	r3, [r7, #12]
 8004150:	e00a      	b.n	8004168 <Save_EEPROM+0x15c>
 8004152:	2309      	movs	r3, #9
 8004154:	733b      	strb	r3, [r7, #12]
 8004156:	e007      	b.n	8004168 <Save_EEPROM+0x15c>
 8004158:	230a      	movs	r3, #10
 800415a:	733b      	strb	r3, [r7, #12]
 800415c:	e004      	b.n	8004168 <Save_EEPROM+0x15c>
 800415e:	230b      	movs	r3, #11
 8004160:	733b      	strb	r3, [r7, #12]
 8004162:	e001      	b.n	8004168 <Save_EEPROM+0x15c>
 8004164:	2300      	movs	r3, #0
 8004166:	733b      	strb	r3, [r7, #12]
 8004168:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[1], perMsg[ANALOG_5_8]);
 800416a:	4b54      	ldr	r3, [pc, #336]	; (80042bc <Save_EEPROM+0x2b0>)
 800416c:	885b      	ldrh	r3, [r3, #2]
 800416e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004172:	f000 8082 	beq.w	800427a <Save_EEPROM+0x26e>
 8004176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800417a:	f300 80a1 	bgt.w	80042c0 <Save_EEPROM+0x2b4>
 800417e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004182:	d07d      	beq.n	8004280 <Save_EEPROM+0x274>
 8004184:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004188:	f300 809a 	bgt.w	80042c0 <Save_EEPROM+0x2b4>
 800418c:	2bc8      	cmp	r3, #200	; 0xc8
 800418e:	d07a      	beq.n	8004286 <Save_EEPROM+0x27a>
 8004190:	2bc8      	cmp	r3, #200	; 0xc8
 8004192:	f300 8095 	bgt.w	80042c0 <Save_EEPROM+0x2b4>
 8004196:	2b32      	cmp	r3, #50	; 0x32
 8004198:	dc6c      	bgt.n	8004274 <Save_EEPROM+0x268>
 800419a:	2b02      	cmp	r3, #2
 800419c:	f2c0 8090 	blt.w	80042c0 <Save_EEPROM+0x2b4>
 80041a0:	3b02      	subs	r3, #2
 80041a2:	2b30      	cmp	r3, #48	; 0x30
 80041a4:	f200 808c 	bhi.w	80042c0 <Save_EEPROM+0x2b4>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <Save_EEPROM+0x1a4>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080042b7 	.word	0x080042b7
 80041b4:	080042b1 	.word	0x080042b1
 80041b8:	080042c1 	.word	0x080042c1
 80041bc:	080042ab 	.word	0x080042ab
 80041c0:	080042c1 	.word	0x080042c1
 80041c4:	080042c1 	.word	0x080042c1
 80041c8:	080042c1 	.word	0x080042c1
 80041cc:	080042c1 	.word	0x080042c1
 80041d0:	080042a5 	.word	0x080042a5
 80041d4:	080042c1 	.word	0x080042c1
 80041d8:	080042c1 	.word	0x080042c1
 80041dc:	080042c1 	.word	0x080042c1
 80041e0:	080042c1 	.word	0x080042c1
 80041e4:	080042c1 	.word	0x080042c1
 80041e8:	080042c1 	.word	0x080042c1
 80041ec:	080042c1 	.word	0x080042c1
 80041f0:	080042c1 	.word	0x080042c1
 80041f4:	080042c1 	.word	0x080042c1
 80041f8:	0800429f 	.word	0x0800429f
 80041fc:	080042c1 	.word	0x080042c1
 8004200:	080042c1 	.word	0x080042c1
 8004204:	080042c1 	.word	0x080042c1
 8004208:	080042c1 	.word	0x080042c1
 800420c:	080042c1 	.word	0x080042c1
 8004210:	080042c1 	.word	0x080042c1
 8004214:	080042c1 	.word	0x080042c1
 8004218:	080042c1 	.word	0x080042c1
 800421c:	080042c1 	.word	0x080042c1
 8004220:	080042c1 	.word	0x080042c1
 8004224:	080042c1 	.word	0x080042c1
 8004228:	080042c1 	.word	0x080042c1
 800422c:	080042c1 	.word	0x080042c1
 8004230:	080042c1 	.word	0x080042c1
 8004234:	080042c1 	.word	0x080042c1
 8004238:	080042c1 	.word	0x080042c1
 800423c:	080042c1 	.word	0x080042c1
 8004240:	080042c1 	.word	0x080042c1
 8004244:	080042c1 	.word	0x080042c1
 8004248:	08004299 	.word	0x08004299
 800424c:	080042c1 	.word	0x080042c1
 8004250:	080042c1 	.word	0x080042c1
 8004254:	080042c1 	.word	0x080042c1
 8004258:	080042c1 	.word	0x080042c1
 800425c:	080042c1 	.word	0x080042c1
 8004260:	080042c1 	.word	0x080042c1
 8004264:	080042c1 	.word	0x080042c1
 8004268:	080042c1 	.word	0x080042c1
 800426c:	080042c1 	.word	0x080042c1
 8004270:	08004293 	.word	0x08004293
 8004274:	2b64      	cmp	r3, #100	; 0x64
 8004276:	d009      	beq.n	800428c <Save_EEPROM+0x280>
 8004278:	e022      	b.n	80042c0 <Save_EEPROM+0x2b4>
 800427a:	2301      	movs	r3, #1
 800427c:	737b      	strb	r3, [r7, #13]
 800427e:	e021      	b.n	80042c4 <Save_EEPROM+0x2b8>
 8004280:	2302      	movs	r3, #2
 8004282:	737b      	strb	r3, [r7, #13]
 8004284:	e01e      	b.n	80042c4 <Save_EEPROM+0x2b8>
 8004286:	2303      	movs	r3, #3
 8004288:	737b      	strb	r3, [r7, #13]
 800428a:	e01b      	b.n	80042c4 <Save_EEPROM+0x2b8>
 800428c:	2304      	movs	r3, #4
 800428e:	737b      	strb	r3, [r7, #13]
 8004290:	e018      	b.n	80042c4 <Save_EEPROM+0x2b8>
 8004292:	2305      	movs	r3, #5
 8004294:	737b      	strb	r3, [r7, #13]
 8004296:	e015      	b.n	80042c4 <Save_EEPROM+0x2b8>
 8004298:	2306      	movs	r3, #6
 800429a:	737b      	strb	r3, [r7, #13]
 800429c:	e012      	b.n	80042c4 <Save_EEPROM+0x2b8>
 800429e:	2307      	movs	r3, #7
 80042a0:	737b      	strb	r3, [r7, #13]
 80042a2:	e00f      	b.n	80042c4 <Save_EEPROM+0x2b8>
 80042a4:	2308      	movs	r3, #8
 80042a6:	737b      	strb	r3, [r7, #13]
 80042a8:	e00c      	b.n	80042c4 <Save_EEPROM+0x2b8>
 80042aa:	2309      	movs	r3, #9
 80042ac:	737b      	strb	r3, [r7, #13]
 80042ae:	e009      	b.n	80042c4 <Save_EEPROM+0x2b8>
 80042b0:	230a      	movs	r3, #10
 80042b2:	737b      	strb	r3, [r7, #13]
 80042b4:	e006      	b.n	80042c4 <Save_EEPROM+0x2b8>
 80042b6:	230b      	movs	r3, #11
 80042b8:	737b      	strb	r3, [r7, #13]
 80042ba:	e003      	b.n	80042c4 <Save_EEPROM+0x2b8>
 80042bc:	20001dec 	.word	0x20001dec
 80042c0:	2300      	movs	r3, #0
 80042c2:	737b      	strb	r3, [r7, #13]
 80042c4:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[2], perMsg[ANALOG_9_12]);
 80042c6:	4baa      	ldr	r3, [pc, #680]	; (8004570 <Save_EEPROM+0x564>)
 80042c8:	889b      	ldrh	r3, [r3, #4]
 80042ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ce:	f000 8082 	beq.w	80043d6 <Save_EEPROM+0x3ca>
 80042d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042d6:	f300 809f 	bgt.w	8004418 <Save_EEPROM+0x40c>
 80042da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80042de:	d07d      	beq.n	80043dc <Save_EEPROM+0x3d0>
 80042e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80042e4:	f300 8098 	bgt.w	8004418 <Save_EEPROM+0x40c>
 80042e8:	2bc8      	cmp	r3, #200	; 0xc8
 80042ea:	d07a      	beq.n	80043e2 <Save_EEPROM+0x3d6>
 80042ec:	2bc8      	cmp	r3, #200	; 0xc8
 80042ee:	f300 8093 	bgt.w	8004418 <Save_EEPROM+0x40c>
 80042f2:	2b32      	cmp	r3, #50	; 0x32
 80042f4:	dc6c      	bgt.n	80043d0 <Save_EEPROM+0x3c4>
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	f2c0 808e 	blt.w	8004418 <Save_EEPROM+0x40c>
 80042fc:	3b02      	subs	r3, #2
 80042fe:	2b30      	cmp	r3, #48	; 0x30
 8004300:	f200 808a 	bhi.w	8004418 <Save_EEPROM+0x40c>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <Save_EEPROM+0x300>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	08004413 	.word	0x08004413
 8004310:	0800440d 	.word	0x0800440d
 8004314:	08004419 	.word	0x08004419
 8004318:	08004407 	.word	0x08004407
 800431c:	08004419 	.word	0x08004419
 8004320:	08004419 	.word	0x08004419
 8004324:	08004419 	.word	0x08004419
 8004328:	08004419 	.word	0x08004419
 800432c:	08004401 	.word	0x08004401
 8004330:	08004419 	.word	0x08004419
 8004334:	08004419 	.word	0x08004419
 8004338:	08004419 	.word	0x08004419
 800433c:	08004419 	.word	0x08004419
 8004340:	08004419 	.word	0x08004419
 8004344:	08004419 	.word	0x08004419
 8004348:	08004419 	.word	0x08004419
 800434c:	08004419 	.word	0x08004419
 8004350:	08004419 	.word	0x08004419
 8004354:	080043fb 	.word	0x080043fb
 8004358:	08004419 	.word	0x08004419
 800435c:	08004419 	.word	0x08004419
 8004360:	08004419 	.word	0x08004419
 8004364:	08004419 	.word	0x08004419
 8004368:	08004419 	.word	0x08004419
 800436c:	08004419 	.word	0x08004419
 8004370:	08004419 	.word	0x08004419
 8004374:	08004419 	.word	0x08004419
 8004378:	08004419 	.word	0x08004419
 800437c:	08004419 	.word	0x08004419
 8004380:	08004419 	.word	0x08004419
 8004384:	08004419 	.word	0x08004419
 8004388:	08004419 	.word	0x08004419
 800438c:	08004419 	.word	0x08004419
 8004390:	08004419 	.word	0x08004419
 8004394:	08004419 	.word	0x08004419
 8004398:	08004419 	.word	0x08004419
 800439c:	08004419 	.word	0x08004419
 80043a0:	08004419 	.word	0x08004419
 80043a4:	080043f5 	.word	0x080043f5
 80043a8:	08004419 	.word	0x08004419
 80043ac:	08004419 	.word	0x08004419
 80043b0:	08004419 	.word	0x08004419
 80043b4:	08004419 	.word	0x08004419
 80043b8:	08004419 	.word	0x08004419
 80043bc:	08004419 	.word	0x08004419
 80043c0:	08004419 	.word	0x08004419
 80043c4:	08004419 	.word	0x08004419
 80043c8:	08004419 	.word	0x08004419
 80043cc:	080043ef 	.word	0x080043ef
 80043d0:	2b64      	cmp	r3, #100	; 0x64
 80043d2:	d009      	beq.n	80043e8 <Save_EEPROM+0x3dc>
 80043d4:	e020      	b.n	8004418 <Save_EEPROM+0x40c>
 80043d6:	2301      	movs	r3, #1
 80043d8:	73bb      	strb	r3, [r7, #14]
 80043da:	e01f      	b.n	800441c <Save_EEPROM+0x410>
 80043dc:	2302      	movs	r3, #2
 80043de:	73bb      	strb	r3, [r7, #14]
 80043e0:	e01c      	b.n	800441c <Save_EEPROM+0x410>
 80043e2:	2303      	movs	r3, #3
 80043e4:	73bb      	strb	r3, [r7, #14]
 80043e6:	e019      	b.n	800441c <Save_EEPROM+0x410>
 80043e8:	2304      	movs	r3, #4
 80043ea:	73bb      	strb	r3, [r7, #14]
 80043ec:	e016      	b.n	800441c <Save_EEPROM+0x410>
 80043ee:	2305      	movs	r3, #5
 80043f0:	73bb      	strb	r3, [r7, #14]
 80043f2:	e013      	b.n	800441c <Save_EEPROM+0x410>
 80043f4:	2306      	movs	r3, #6
 80043f6:	73bb      	strb	r3, [r7, #14]
 80043f8:	e010      	b.n	800441c <Save_EEPROM+0x410>
 80043fa:	2307      	movs	r3, #7
 80043fc:	73bb      	strb	r3, [r7, #14]
 80043fe:	e00d      	b.n	800441c <Save_EEPROM+0x410>
 8004400:	2308      	movs	r3, #8
 8004402:	73bb      	strb	r3, [r7, #14]
 8004404:	e00a      	b.n	800441c <Save_EEPROM+0x410>
 8004406:	2309      	movs	r3, #9
 8004408:	73bb      	strb	r3, [r7, #14]
 800440a:	e007      	b.n	800441c <Save_EEPROM+0x410>
 800440c:	230a      	movs	r3, #10
 800440e:	73bb      	strb	r3, [r7, #14]
 8004410:	e004      	b.n	800441c <Save_EEPROM+0x410>
 8004412:	230b      	movs	r3, #11
 8004414:	73bb      	strb	r3, [r7, #14]
 8004416:	e001      	b.n	800441c <Save_EEPROM+0x410>
 8004418:	2300      	movs	r3, #0
 800441a:	73bb      	strb	r3, [r7, #14]
 800441c:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[3], perMsg[RTC_MSG]);
 800441e:	4b54      	ldr	r3, [pc, #336]	; (8004570 <Save_EEPROM+0x564>)
 8004420:	88db      	ldrh	r3, [r3, #6]
 8004422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004426:	f000 8082 	beq.w	800452e <Save_EEPROM+0x522>
 800442a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800442e:	f300 80a1 	bgt.w	8004574 <Save_EEPROM+0x568>
 8004432:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004436:	d07d      	beq.n	8004534 <Save_EEPROM+0x528>
 8004438:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800443c:	f300 809a 	bgt.w	8004574 <Save_EEPROM+0x568>
 8004440:	2bc8      	cmp	r3, #200	; 0xc8
 8004442:	d07a      	beq.n	800453a <Save_EEPROM+0x52e>
 8004444:	2bc8      	cmp	r3, #200	; 0xc8
 8004446:	f300 8095 	bgt.w	8004574 <Save_EEPROM+0x568>
 800444a:	2b32      	cmp	r3, #50	; 0x32
 800444c:	dc6c      	bgt.n	8004528 <Save_EEPROM+0x51c>
 800444e:	2b02      	cmp	r3, #2
 8004450:	f2c0 8090 	blt.w	8004574 <Save_EEPROM+0x568>
 8004454:	3b02      	subs	r3, #2
 8004456:	2b30      	cmp	r3, #48	; 0x30
 8004458:	f200 808c 	bhi.w	8004574 <Save_EEPROM+0x568>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <Save_EEPROM+0x458>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	0800456b 	.word	0x0800456b
 8004468:	08004565 	.word	0x08004565
 800446c:	08004575 	.word	0x08004575
 8004470:	0800455f 	.word	0x0800455f
 8004474:	08004575 	.word	0x08004575
 8004478:	08004575 	.word	0x08004575
 800447c:	08004575 	.word	0x08004575
 8004480:	08004575 	.word	0x08004575
 8004484:	08004559 	.word	0x08004559
 8004488:	08004575 	.word	0x08004575
 800448c:	08004575 	.word	0x08004575
 8004490:	08004575 	.word	0x08004575
 8004494:	08004575 	.word	0x08004575
 8004498:	08004575 	.word	0x08004575
 800449c:	08004575 	.word	0x08004575
 80044a0:	08004575 	.word	0x08004575
 80044a4:	08004575 	.word	0x08004575
 80044a8:	08004575 	.word	0x08004575
 80044ac:	08004553 	.word	0x08004553
 80044b0:	08004575 	.word	0x08004575
 80044b4:	08004575 	.word	0x08004575
 80044b8:	08004575 	.word	0x08004575
 80044bc:	08004575 	.word	0x08004575
 80044c0:	08004575 	.word	0x08004575
 80044c4:	08004575 	.word	0x08004575
 80044c8:	08004575 	.word	0x08004575
 80044cc:	08004575 	.word	0x08004575
 80044d0:	08004575 	.word	0x08004575
 80044d4:	08004575 	.word	0x08004575
 80044d8:	08004575 	.word	0x08004575
 80044dc:	08004575 	.word	0x08004575
 80044e0:	08004575 	.word	0x08004575
 80044e4:	08004575 	.word	0x08004575
 80044e8:	08004575 	.word	0x08004575
 80044ec:	08004575 	.word	0x08004575
 80044f0:	08004575 	.word	0x08004575
 80044f4:	08004575 	.word	0x08004575
 80044f8:	08004575 	.word	0x08004575
 80044fc:	0800454d 	.word	0x0800454d
 8004500:	08004575 	.word	0x08004575
 8004504:	08004575 	.word	0x08004575
 8004508:	08004575 	.word	0x08004575
 800450c:	08004575 	.word	0x08004575
 8004510:	08004575 	.word	0x08004575
 8004514:	08004575 	.word	0x08004575
 8004518:	08004575 	.word	0x08004575
 800451c:	08004575 	.word	0x08004575
 8004520:	08004575 	.word	0x08004575
 8004524:	08004547 	.word	0x08004547
 8004528:	2b64      	cmp	r3, #100	; 0x64
 800452a:	d009      	beq.n	8004540 <Save_EEPROM+0x534>
 800452c:	e022      	b.n	8004574 <Save_EEPROM+0x568>
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
 8004532:	e021      	b.n	8004578 <Save_EEPROM+0x56c>
 8004534:	2302      	movs	r3, #2
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	e01e      	b.n	8004578 <Save_EEPROM+0x56c>
 800453a:	2303      	movs	r3, #3
 800453c:	73fb      	strb	r3, [r7, #15]
 800453e:	e01b      	b.n	8004578 <Save_EEPROM+0x56c>
 8004540:	2304      	movs	r3, #4
 8004542:	73fb      	strb	r3, [r7, #15]
 8004544:	e018      	b.n	8004578 <Save_EEPROM+0x56c>
 8004546:	2305      	movs	r3, #5
 8004548:	73fb      	strb	r3, [r7, #15]
 800454a:	e015      	b.n	8004578 <Save_EEPROM+0x56c>
 800454c:	2306      	movs	r3, #6
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	e012      	b.n	8004578 <Save_EEPROM+0x56c>
 8004552:	2307      	movs	r3, #7
 8004554:	73fb      	strb	r3, [r7, #15]
 8004556:	e00f      	b.n	8004578 <Save_EEPROM+0x56c>
 8004558:	2308      	movs	r3, #8
 800455a:	73fb      	strb	r3, [r7, #15]
 800455c:	e00c      	b.n	8004578 <Save_EEPROM+0x56c>
 800455e:	2309      	movs	r3, #9
 8004560:	73fb      	strb	r3, [r7, #15]
 8004562:	e009      	b.n	8004578 <Save_EEPROM+0x56c>
 8004564:	230a      	movs	r3, #10
 8004566:	73fb      	strb	r3, [r7, #15]
 8004568:	e006      	b.n	8004578 <Save_EEPROM+0x56c>
 800456a:	230b      	movs	r3, #11
 800456c:	73fb      	strb	r3, [r7, #15]
 800456e:	e003      	b.n	8004578 <Save_EEPROM+0x56c>
 8004570:	20001dec 	.word	0x20001dec
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]
 8004578:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[4], perMsg[VERIFY_MSG]);
 800457a:	4baa      	ldr	r3, [pc, #680]	; (8004824 <Save_EEPROM+0x818>)
 800457c:	891b      	ldrh	r3, [r3, #8]
 800457e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004582:	f000 8082 	beq.w	800468a <Save_EEPROM+0x67e>
 8004586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800458a:	f300 809f 	bgt.w	80046cc <Save_EEPROM+0x6c0>
 800458e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004592:	d07d      	beq.n	8004690 <Save_EEPROM+0x684>
 8004594:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004598:	f300 8098 	bgt.w	80046cc <Save_EEPROM+0x6c0>
 800459c:	2bc8      	cmp	r3, #200	; 0xc8
 800459e:	d07a      	beq.n	8004696 <Save_EEPROM+0x68a>
 80045a0:	2bc8      	cmp	r3, #200	; 0xc8
 80045a2:	f300 8093 	bgt.w	80046cc <Save_EEPROM+0x6c0>
 80045a6:	2b32      	cmp	r3, #50	; 0x32
 80045a8:	dc6c      	bgt.n	8004684 <Save_EEPROM+0x678>
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	f2c0 808e 	blt.w	80046cc <Save_EEPROM+0x6c0>
 80045b0:	3b02      	subs	r3, #2
 80045b2:	2b30      	cmp	r3, #48	; 0x30
 80045b4:	f200 808a 	bhi.w	80046cc <Save_EEPROM+0x6c0>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <Save_EEPROM+0x5b4>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080046c7 	.word	0x080046c7
 80045c4:	080046c1 	.word	0x080046c1
 80045c8:	080046cd 	.word	0x080046cd
 80045cc:	080046bb 	.word	0x080046bb
 80045d0:	080046cd 	.word	0x080046cd
 80045d4:	080046cd 	.word	0x080046cd
 80045d8:	080046cd 	.word	0x080046cd
 80045dc:	080046cd 	.word	0x080046cd
 80045e0:	080046b5 	.word	0x080046b5
 80045e4:	080046cd 	.word	0x080046cd
 80045e8:	080046cd 	.word	0x080046cd
 80045ec:	080046cd 	.word	0x080046cd
 80045f0:	080046cd 	.word	0x080046cd
 80045f4:	080046cd 	.word	0x080046cd
 80045f8:	080046cd 	.word	0x080046cd
 80045fc:	080046cd 	.word	0x080046cd
 8004600:	080046cd 	.word	0x080046cd
 8004604:	080046cd 	.word	0x080046cd
 8004608:	080046af 	.word	0x080046af
 800460c:	080046cd 	.word	0x080046cd
 8004610:	080046cd 	.word	0x080046cd
 8004614:	080046cd 	.word	0x080046cd
 8004618:	080046cd 	.word	0x080046cd
 800461c:	080046cd 	.word	0x080046cd
 8004620:	080046cd 	.word	0x080046cd
 8004624:	080046cd 	.word	0x080046cd
 8004628:	080046cd 	.word	0x080046cd
 800462c:	080046cd 	.word	0x080046cd
 8004630:	080046cd 	.word	0x080046cd
 8004634:	080046cd 	.word	0x080046cd
 8004638:	080046cd 	.word	0x080046cd
 800463c:	080046cd 	.word	0x080046cd
 8004640:	080046cd 	.word	0x080046cd
 8004644:	080046cd 	.word	0x080046cd
 8004648:	080046cd 	.word	0x080046cd
 800464c:	080046cd 	.word	0x080046cd
 8004650:	080046cd 	.word	0x080046cd
 8004654:	080046cd 	.word	0x080046cd
 8004658:	080046a9 	.word	0x080046a9
 800465c:	080046cd 	.word	0x080046cd
 8004660:	080046cd 	.word	0x080046cd
 8004664:	080046cd 	.word	0x080046cd
 8004668:	080046cd 	.word	0x080046cd
 800466c:	080046cd 	.word	0x080046cd
 8004670:	080046cd 	.word	0x080046cd
 8004674:	080046cd 	.word	0x080046cd
 8004678:	080046cd 	.word	0x080046cd
 800467c:	080046cd 	.word	0x080046cd
 8004680:	080046a3 	.word	0x080046a3
 8004684:	2b64      	cmp	r3, #100	; 0x64
 8004686:	d009      	beq.n	800469c <Save_EEPROM+0x690>
 8004688:	e020      	b.n	80046cc <Save_EEPROM+0x6c0>
 800468a:	2301      	movs	r3, #1
 800468c:	743b      	strb	r3, [r7, #16]
 800468e:	e01f      	b.n	80046d0 <Save_EEPROM+0x6c4>
 8004690:	2302      	movs	r3, #2
 8004692:	743b      	strb	r3, [r7, #16]
 8004694:	e01c      	b.n	80046d0 <Save_EEPROM+0x6c4>
 8004696:	2303      	movs	r3, #3
 8004698:	743b      	strb	r3, [r7, #16]
 800469a:	e019      	b.n	80046d0 <Save_EEPROM+0x6c4>
 800469c:	2304      	movs	r3, #4
 800469e:	743b      	strb	r3, [r7, #16]
 80046a0:	e016      	b.n	80046d0 <Save_EEPROM+0x6c4>
 80046a2:	2305      	movs	r3, #5
 80046a4:	743b      	strb	r3, [r7, #16]
 80046a6:	e013      	b.n	80046d0 <Save_EEPROM+0x6c4>
 80046a8:	2306      	movs	r3, #6
 80046aa:	743b      	strb	r3, [r7, #16]
 80046ac:	e010      	b.n	80046d0 <Save_EEPROM+0x6c4>
 80046ae:	2307      	movs	r3, #7
 80046b0:	743b      	strb	r3, [r7, #16]
 80046b2:	e00d      	b.n	80046d0 <Save_EEPROM+0x6c4>
 80046b4:	2308      	movs	r3, #8
 80046b6:	743b      	strb	r3, [r7, #16]
 80046b8:	e00a      	b.n	80046d0 <Save_EEPROM+0x6c4>
 80046ba:	2309      	movs	r3, #9
 80046bc:	743b      	strb	r3, [r7, #16]
 80046be:	e007      	b.n	80046d0 <Save_EEPROM+0x6c4>
 80046c0:	230a      	movs	r3, #10
 80046c2:	743b      	strb	r3, [r7, #16]
 80046c4:	e004      	b.n	80046d0 <Save_EEPROM+0x6c4>
 80046c6:	230b      	movs	r3, #11
 80046c8:	743b      	strb	r3, [r7, #16]
 80046ca:	e001      	b.n	80046d0 <Save_EEPROM+0x6c4>
 80046cc:	2300      	movs	r3, #0
 80046ce:	743b      	strb	r3, [r7, #16]
 80046d0:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[5], perMsg[ECU_SAVE]);
 80046d2:	4b54      	ldr	r3, [pc, #336]	; (8004824 <Save_EEPROM+0x818>)
 80046d4:	899b      	ldrh	r3, [r3, #12]
 80046d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046da:	f000 8082 	beq.w	80047e2 <Save_EEPROM+0x7d6>
 80046de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046e2:	f300 80a1 	bgt.w	8004828 <Save_EEPROM+0x81c>
 80046e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046ea:	d07d      	beq.n	80047e8 <Save_EEPROM+0x7dc>
 80046ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046f0:	f300 809a 	bgt.w	8004828 <Save_EEPROM+0x81c>
 80046f4:	2bc8      	cmp	r3, #200	; 0xc8
 80046f6:	d07a      	beq.n	80047ee <Save_EEPROM+0x7e2>
 80046f8:	2bc8      	cmp	r3, #200	; 0xc8
 80046fa:	f300 8095 	bgt.w	8004828 <Save_EEPROM+0x81c>
 80046fe:	2b32      	cmp	r3, #50	; 0x32
 8004700:	dc6c      	bgt.n	80047dc <Save_EEPROM+0x7d0>
 8004702:	2b02      	cmp	r3, #2
 8004704:	f2c0 8090 	blt.w	8004828 <Save_EEPROM+0x81c>
 8004708:	3b02      	subs	r3, #2
 800470a:	2b30      	cmp	r3, #48	; 0x30
 800470c:	f200 808c 	bhi.w	8004828 <Save_EEPROM+0x81c>
 8004710:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <Save_EEPROM+0x70c>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	0800481f 	.word	0x0800481f
 800471c:	08004819 	.word	0x08004819
 8004720:	08004829 	.word	0x08004829
 8004724:	08004813 	.word	0x08004813
 8004728:	08004829 	.word	0x08004829
 800472c:	08004829 	.word	0x08004829
 8004730:	08004829 	.word	0x08004829
 8004734:	08004829 	.word	0x08004829
 8004738:	0800480d 	.word	0x0800480d
 800473c:	08004829 	.word	0x08004829
 8004740:	08004829 	.word	0x08004829
 8004744:	08004829 	.word	0x08004829
 8004748:	08004829 	.word	0x08004829
 800474c:	08004829 	.word	0x08004829
 8004750:	08004829 	.word	0x08004829
 8004754:	08004829 	.word	0x08004829
 8004758:	08004829 	.word	0x08004829
 800475c:	08004829 	.word	0x08004829
 8004760:	08004807 	.word	0x08004807
 8004764:	08004829 	.word	0x08004829
 8004768:	08004829 	.word	0x08004829
 800476c:	08004829 	.word	0x08004829
 8004770:	08004829 	.word	0x08004829
 8004774:	08004829 	.word	0x08004829
 8004778:	08004829 	.word	0x08004829
 800477c:	08004829 	.word	0x08004829
 8004780:	08004829 	.word	0x08004829
 8004784:	08004829 	.word	0x08004829
 8004788:	08004829 	.word	0x08004829
 800478c:	08004829 	.word	0x08004829
 8004790:	08004829 	.word	0x08004829
 8004794:	08004829 	.word	0x08004829
 8004798:	08004829 	.word	0x08004829
 800479c:	08004829 	.word	0x08004829
 80047a0:	08004829 	.word	0x08004829
 80047a4:	08004829 	.word	0x08004829
 80047a8:	08004829 	.word	0x08004829
 80047ac:	08004829 	.word	0x08004829
 80047b0:	08004801 	.word	0x08004801
 80047b4:	08004829 	.word	0x08004829
 80047b8:	08004829 	.word	0x08004829
 80047bc:	08004829 	.word	0x08004829
 80047c0:	08004829 	.word	0x08004829
 80047c4:	08004829 	.word	0x08004829
 80047c8:	08004829 	.word	0x08004829
 80047cc:	08004829 	.word	0x08004829
 80047d0:	08004829 	.word	0x08004829
 80047d4:	08004829 	.word	0x08004829
 80047d8:	080047fb 	.word	0x080047fb
 80047dc:	2b64      	cmp	r3, #100	; 0x64
 80047de:	d009      	beq.n	80047f4 <Save_EEPROM+0x7e8>
 80047e0:	e022      	b.n	8004828 <Save_EEPROM+0x81c>
 80047e2:	2301      	movs	r3, #1
 80047e4:	747b      	strb	r3, [r7, #17]
 80047e6:	e021      	b.n	800482c <Save_EEPROM+0x820>
 80047e8:	2302      	movs	r3, #2
 80047ea:	747b      	strb	r3, [r7, #17]
 80047ec:	e01e      	b.n	800482c <Save_EEPROM+0x820>
 80047ee:	2303      	movs	r3, #3
 80047f0:	747b      	strb	r3, [r7, #17]
 80047f2:	e01b      	b.n	800482c <Save_EEPROM+0x820>
 80047f4:	2304      	movs	r3, #4
 80047f6:	747b      	strb	r3, [r7, #17]
 80047f8:	e018      	b.n	800482c <Save_EEPROM+0x820>
 80047fa:	2305      	movs	r3, #5
 80047fc:	747b      	strb	r3, [r7, #17]
 80047fe:	e015      	b.n	800482c <Save_EEPROM+0x820>
 8004800:	2306      	movs	r3, #6
 8004802:	747b      	strb	r3, [r7, #17]
 8004804:	e012      	b.n	800482c <Save_EEPROM+0x820>
 8004806:	2307      	movs	r3, #7
 8004808:	747b      	strb	r3, [r7, #17]
 800480a:	e00f      	b.n	800482c <Save_EEPROM+0x820>
 800480c:	2308      	movs	r3, #8
 800480e:	747b      	strb	r3, [r7, #17]
 8004810:	e00c      	b.n	800482c <Save_EEPROM+0x820>
 8004812:	2309      	movs	r3, #9
 8004814:	747b      	strb	r3, [r7, #17]
 8004816:	e009      	b.n	800482c <Save_EEPROM+0x820>
 8004818:	230a      	movs	r3, #10
 800481a:	747b      	strb	r3, [r7, #17]
 800481c:	e006      	b.n	800482c <Save_EEPROM+0x820>
 800481e:	230b      	movs	r3, #11
 8004820:	747b      	strb	r3, [r7, #17]
 8004822:	e003      	b.n	800482c <Save_EEPROM+0x820>
 8004824:	20001dec 	.word	0x20001dec
 8004828:	2300      	movs	r3, #0
 800482a:	747b      	strb	r3, [r7, #17]
 800482c:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[6], perMsg[PDM_SAVE]);
 800482e:	4baa      	ldr	r3, [pc, #680]	; (8004ad8 <Save_EEPROM+0xacc>)
 8004830:	89db      	ldrh	r3, [r3, #14]
 8004832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004836:	f000 8082 	beq.w	800493e <Save_EEPROM+0x932>
 800483a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800483e:	f300 809f 	bgt.w	8004980 <Save_EEPROM+0x974>
 8004842:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004846:	d07d      	beq.n	8004944 <Save_EEPROM+0x938>
 8004848:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800484c:	f300 8098 	bgt.w	8004980 <Save_EEPROM+0x974>
 8004850:	2bc8      	cmp	r3, #200	; 0xc8
 8004852:	d07a      	beq.n	800494a <Save_EEPROM+0x93e>
 8004854:	2bc8      	cmp	r3, #200	; 0xc8
 8004856:	f300 8093 	bgt.w	8004980 <Save_EEPROM+0x974>
 800485a:	2b32      	cmp	r3, #50	; 0x32
 800485c:	dc6c      	bgt.n	8004938 <Save_EEPROM+0x92c>
 800485e:	2b02      	cmp	r3, #2
 8004860:	f2c0 808e 	blt.w	8004980 <Save_EEPROM+0x974>
 8004864:	3b02      	subs	r3, #2
 8004866:	2b30      	cmp	r3, #48	; 0x30
 8004868:	f200 808a 	bhi.w	8004980 <Save_EEPROM+0x974>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <Save_EEPROM+0x868>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	0800497b 	.word	0x0800497b
 8004878:	08004975 	.word	0x08004975
 800487c:	08004981 	.word	0x08004981
 8004880:	0800496f 	.word	0x0800496f
 8004884:	08004981 	.word	0x08004981
 8004888:	08004981 	.word	0x08004981
 800488c:	08004981 	.word	0x08004981
 8004890:	08004981 	.word	0x08004981
 8004894:	08004969 	.word	0x08004969
 8004898:	08004981 	.word	0x08004981
 800489c:	08004981 	.word	0x08004981
 80048a0:	08004981 	.word	0x08004981
 80048a4:	08004981 	.word	0x08004981
 80048a8:	08004981 	.word	0x08004981
 80048ac:	08004981 	.word	0x08004981
 80048b0:	08004981 	.word	0x08004981
 80048b4:	08004981 	.word	0x08004981
 80048b8:	08004981 	.word	0x08004981
 80048bc:	08004963 	.word	0x08004963
 80048c0:	08004981 	.word	0x08004981
 80048c4:	08004981 	.word	0x08004981
 80048c8:	08004981 	.word	0x08004981
 80048cc:	08004981 	.word	0x08004981
 80048d0:	08004981 	.word	0x08004981
 80048d4:	08004981 	.word	0x08004981
 80048d8:	08004981 	.word	0x08004981
 80048dc:	08004981 	.word	0x08004981
 80048e0:	08004981 	.word	0x08004981
 80048e4:	08004981 	.word	0x08004981
 80048e8:	08004981 	.word	0x08004981
 80048ec:	08004981 	.word	0x08004981
 80048f0:	08004981 	.word	0x08004981
 80048f4:	08004981 	.word	0x08004981
 80048f8:	08004981 	.word	0x08004981
 80048fc:	08004981 	.word	0x08004981
 8004900:	08004981 	.word	0x08004981
 8004904:	08004981 	.word	0x08004981
 8004908:	08004981 	.word	0x08004981
 800490c:	0800495d 	.word	0x0800495d
 8004910:	08004981 	.word	0x08004981
 8004914:	08004981 	.word	0x08004981
 8004918:	08004981 	.word	0x08004981
 800491c:	08004981 	.word	0x08004981
 8004920:	08004981 	.word	0x08004981
 8004924:	08004981 	.word	0x08004981
 8004928:	08004981 	.word	0x08004981
 800492c:	08004981 	.word	0x08004981
 8004930:	08004981 	.word	0x08004981
 8004934:	08004957 	.word	0x08004957
 8004938:	2b64      	cmp	r3, #100	; 0x64
 800493a:	d009      	beq.n	8004950 <Save_EEPROM+0x944>
 800493c:	e020      	b.n	8004980 <Save_EEPROM+0x974>
 800493e:	2301      	movs	r3, #1
 8004940:	74bb      	strb	r3, [r7, #18]
 8004942:	e01f      	b.n	8004984 <Save_EEPROM+0x978>
 8004944:	2302      	movs	r3, #2
 8004946:	74bb      	strb	r3, [r7, #18]
 8004948:	e01c      	b.n	8004984 <Save_EEPROM+0x978>
 800494a:	2303      	movs	r3, #3
 800494c:	74bb      	strb	r3, [r7, #18]
 800494e:	e019      	b.n	8004984 <Save_EEPROM+0x978>
 8004950:	2304      	movs	r3, #4
 8004952:	74bb      	strb	r3, [r7, #18]
 8004954:	e016      	b.n	8004984 <Save_EEPROM+0x978>
 8004956:	2305      	movs	r3, #5
 8004958:	74bb      	strb	r3, [r7, #18]
 800495a:	e013      	b.n	8004984 <Save_EEPROM+0x978>
 800495c:	2306      	movs	r3, #6
 800495e:	74bb      	strb	r3, [r7, #18]
 8004960:	e010      	b.n	8004984 <Save_EEPROM+0x978>
 8004962:	2307      	movs	r3, #7
 8004964:	74bb      	strb	r3, [r7, #18]
 8004966:	e00d      	b.n	8004984 <Save_EEPROM+0x978>
 8004968:	2308      	movs	r3, #8
 800496a:	74bb      	strb	r3, [r7, #18]
 800496c:	e00a      	b.n	8004984 <Save_EEPROM+0x978>
 800496e:	2309      	movs	r3, #9
 8004970:	74bb      	strb	r3, [r7, #18]
 8004972:	e007      	b.n	8004984 <Save_EEPROM+0x978>
 8004974:	230a      	movs	r3, #10
 8004976:	74bb      	strb	r3, [r7, #18]
 8004978:	e004      	b.n	8004984 <Save_EEPROM+0x978>
 800497a:	230b      	movs	r3, #11
 800497c:	74bb      	strb	r3, [r7, #18]
 800497e:	e001      	b.n	8004984 <Save_EEPROM+0x978>
 8004980:	2300      	movs	r3, #0
 8004982:	74bb      	strb	r3, [r7, #18]
 8004984:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[7], perCAN[ANALOG_1_4]);
 8004986:	4b55      	ldr	r3, [pc, #340]	; (8004adc <Save_EEPROM+0xad0>)
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800498e:	f000 8082 	beq.w	8004a96 <Save_EEPROM+0xa8a>
 8004992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004996:	f300 80a3 	bgt.w	8004ae0 <Save_EEPROM+0xad4>
 800499a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800499e:	d07d      	beq.n	8004a9c <Save_EEPROM+0xa90>
 80049a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049a4:	f300 809c 	bgt.w	8004ae0 <Save_EEPROM+0xad4>
 80049a8:	2bc8      	cmp	r3, #200	; 0xc8
 80049aa:	d07a      	beq.n	8004aa2 <Save_EEPROM+0xa96>
 80049ac:	2bc8      	cmp	r3, #200	; 0xc8
 80049ae:	f300 8097 	bgt.w	8004ae0 <Save_EEPROM+0xad4>
 80049b2:	2b32      	cmp	r3, #50	; 0x32
 80049b4:	dc6c      	bgt.n	8004a90 <Save_EEPROM+0xa84>
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	f2c0 8092 	blt.w	8004ae0 <Save_EEPROM+0xad4>
 80049bc:	3b02      	subs	r3, #2
 80049be:	2b30      	cmp	r3, #48	; 0x30
 80049c0:	f200 808e 	bhi.w	8004ae0 <Save_EEPROM+0xad4>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <Save_EEPROM+0x9c0>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004ad3 	.word	0x08004ad3
 80049d0:	08004acd 	.word	0x08004acd
 80049d4:	08004ae1 	.word	0x08004ae1
 80049d8:	08004ac7 	.word	0x08004ac7
 80049dc:	08004ae1 	.word	0x08004ae1
 80049e0:	08004ae1 	.word	0x08004ae1
 80049e4:	08004ae1 	.word	0x08004ae1
 80049e8:	08004ae1 	.word	0x08004ae1
 80049ec:	08004ac1 	.word	0x08004ac1
 80049f0:	08004ae1 	.word	0x08004ae1
 80049f4:	08004ae1 	.word	0x08004ae1
 80049f8:	08004ae1 	.word	0x08004ae1
 80049fc:	08004ae1 	.word	0x08004ae1
 8004a00:	08004ae1 	.word	0x08004ae1
 8004a04:	08004ae1 	.word	0x08004ae1
 8004a08:	08004ae1 	.word	0x08004ae1
 8004a0c:	08004ae1 	.word	0x08004ae1
 8004a10:	08004ae1 	.word	0x08004ae1
 8004a14:	08004abb 	.word	0x08004abb
 8004a18:	08004ae1 	.word	0x08004ae1
 8004a1c:	08004ae1 	.word	0x08004ae1
 8004a20:	08004ae1 	.word	0x08004ae1
 8004a24:	08004ae1 	.word	0x08004ae1
 8004a28:	08004ae1 	.word	0x08004ae1
 8004a2c:	08004ae1 	.word	0x08004ae1
 8004a30:	08004ae1 	.word	0x08004ae1
 8004a34:	08004ae1 	.word	0x08004ae1
 8004a38:	08004ae1 	.word	0x08004ae1
 8004a3c:	08004ae1 	.word	0x08004ae1
 8004a40:	08004ae1 	.word	0x08004ae1
 8004a44:	08004ae1 	.word	0x08004ae1
 8004a48:	08004ae1 	.word	0x08004ae1
 8004a4c:	08004ae1 	.word	0x08004ae1
 8004a50:	08004ae1 	.word	0x08004ae1
 8004a54:	08004ae1 	.word	0x08004ae1
 8004a58:	08004ae1 	.word	0x08004ae1
 8004a5c:	08004ae1 	.word	0x08004ae1
 8004a60:	08004ae1 	.word	0x08004ae1
 8004a64:	08004ab5 	.word	0x08004ab5
 8004a68:	08004ae1 	.word	0x08004ae1
 8004a6c:	08004ae1 	.word	0x08004ae1
 8004a70:	08004ae1 	.word	0x08004ae1
 8004a74:	08004ae1 	.word	0x08004ae1
 8004a78:	08004ae1 	.word	0x08004ae1
 8004a7c:	08004ae1 	.word	0x08004ae1
 8004a80:	08004ae1 	.word	0x08004ae1
 8004a84:	08004ae1 	.word	0x08004ae1
 8004a88:	08004ae1 	.word	0x08004ae1
 8004a8c:	08004aaf 	.word	0x08004aaf
 8004a90:	2b64      	cmp	r3, #100	; 0x64
 8004a92:	d009      	beq.n	8004aa8 <Save_EEPROM+0xa9c>
 8004a94:	e024      	b.n	8004ae0 <Save_EEPROM+0xad4>
 8004a96:	2301      	movs	r3, #1
 8004a98:	74fb      	strb	r3, [r7, #19]
 8004a9a:	e023      	b.n	8004ae4 <Save_EEPROM+0xad8>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	74fb      	strb	r3, [r7, #19]
 8004aa0:	e020      	b.n	8004ae4 <Save_EEPROM+0xad8>
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	74fb      	strb	r3, [r7, #19]
 8004aa6:	e01d      	b.n	8004ae4 <Save_EEPROM+0xad8>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	74fb      	strb	r3, [r7, #19]
 8004aac:	e01a      	b.n	8004ae4 <Save_EEPROM+0xad8>
 8004aae:	2305      	movs	r3, #5
 8004ab0:	74fb      	strb	r3, [r7, #19]
 8004ab2:	e017      	b.n	8004ae4 <Save_EEPROM+0xad8>
 8004ab4:	2306      	movs	r3, #6
 8004ab6:	74fb      	strb	r3, [r7, #19]
 8004ab8:	e014      	b.n	8004ae4 <Save_EEPROM+0xad8>
 8004aba:	2307      	movs	r3, #7
 8004abc:	74fb      	strb	r3, [r7, #19]
 8004abe:	e011      	b.n	8004ae4 <Save_EEPROM+0xad8>
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	74fb      	strb	r3, [r7, #19]
 8004ac4:	e00e      	b.n	8004ae4 <Save_EEPROM+0xad8>
 8004ac6:	2309      	movs	r3, #9
 8004ac8:	74fb      	strb	r3, [r7, #19]
 8004aca:	e00b      	b.n	8004ae4 <Save_EEPROM+0xad8>
 8004acc:	230a      	movs	r3, #10
 8004ace:	74fb      	strb	r3, [r7, #19]
 8004ad0:	e008      	b.n	8004ae4 <Save_EEPROM+0xad8>
 8004ad2:	230b      	movs	r3, #11
 8004ad4:	74fb      	strb	r3, [r7, #19]
 8004ad6:	e005      	b.n	8004ae4 <Save_EEPROM+0xad8>
 8004ad8:	20001dec 	.word	0x20001dec
 8004adc:	200018ec 	.word	0x200018ec
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	74fb      	strb	r3, [r7, #19]
 8004ae4:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[8], perCAN[ANALOG_5_8]);
 8004ae6:	4baa      	ldr	r3, [pc, #680]	; (8004d90 <Save_EEPROM+0xd84>)
 8004ae8:	885b      	ldrh	r3, [r3, #2]
 8004aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aee:	f000 8082 	beq.w	8004bf6 <Save_EEPROM+0xbea>
 8004af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004af6:	f300 809f 	bgt.w	8004c38 <Save_EEPROM+0xc2c>
 8004afa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004afe:	d07d      	beq.n	8004bfc <Save_EEPROM+0xbf0>
 8004b00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b04:	f300 8098 	bgt.w	8004c38 <Save_EEPROM+0xc2c>
 8004b08:	2bc8      	cmp	r3, #200	; 0xc8
 8004b0a:	d07a      	beq.n	8004c02 <Save_EEPROM+0xbf6>
 8004b0c:	2bc8      	cmp	r3, #200	; 0xc8
 8004b0e:	f300 8093 	bgt.w	8004c38 <Save_EEPROM+0xc2c>
 8004b12:	2b32      	cmp	r3, #50	; 0x32
 8004b14:	dc6c      	bgt.n	8004bf0 <Save_EEPROM+0xbe4>
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	f2c0 808e 	blt.w	8004c38 <Save_EEPROM+0xc2c>
 8004b1c:	3b02      	subs	r3, #2
 8004b1e:	2b30      	cmp	r3, #48	; 0x30
 8004b20:	f200 808a 	bhi.w	8004c38 <Save_EEPROM+0xc2c>
 8004b24:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <Save_EEPROM+0xb20>)
 8004b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2a:	bf00      	nop
 8004b2c:	08004c33 	.word	0x08004c33
 8004b30:	08004c2d 	.word	0x08004c2d
 8004b34:	08004c39 	.word	0x08004c39
 8004b38:	08004c27 	.word	0x08004c27
 8004b3c:	08004c39 	.word	0x08004c39
 8004b40:	08004c39 	.word	0x08004c39
 8004b44:	08004c39 	.word	0x08004c39
 8004b48:	08004c39 	.word	0x08004c39
 8004b4c:	08004c21 	.word	0x08004c21
 8004b50:	08004c39 	.word	0x08004c39
 8004b54:	08004c39 	.word	0x08004c39
 8004b58:	08004c39 	.word	0x08004c39
 8004b5c:	08004c39 	.word	0x08004c39
 8004b60:	08004c39 	.word	0x08004c39
 8004b64:	08004c39 	.word	0x08004c39
 8004b68:	08004c39 	.word	0x08004c39
 8004b6c:	08004c39 	.word	0x08004c39
 8004b70:	08004c39 	.word	0x08004c39
 8004b74:	08004c1b 	.word	0x08004c1b
 8004b78:	08004c39 	.word	0x08004c39
 8004b7c:	08004c39 	.word	0x08004c39
 8004b80:	08004c39 	.word	0x08004c39
 8004b84:	08004c39 	.word	0x08004c39
 8004b88:	08004c39 	.word	0x08004c39
 8004b8c:	08004c39 	.word	0x08004c39
 8004b90:	08004c39 	.word	0x08004c39
 8004b94:	08004c39 	.word	0x08004c39
 8004b98:	08004c39 	.word	0x08004c39
 8004b9c:	08004c39 	.word	0x08004c39
 8004ba0:	08004c39 	.word	0x08004c39
 8004ba4:	08004c39 	.word	0x08004c39
 8004ba8:	08004c39 	.word	0x08004c39
 8004bac:	08004c39 	.word	0x08004c39
 8004bb0:	08004c39 	.word	0x08004c39
 8004bb4:	08004c39 	.word	0x08004c39
 8004bb8:	08004c39 	.word	0x08004c39
 8004bbc:	08004c39 	.word	0x08004c39
 8004bc0:	08004c39 	.word	0x08004c39
 8004bc4:	08004c15 	.word	0x08004c15
 8004bc8:	08004c39 	.word	0x08004c39
 8004bcc:	08004c39 	.word	0x08004c39
 8004bd0:	08004c39 	.word	0x08004c39
 8004bd4:	08004c39 	.word	0x08004c39
 8004bd8:	08004c39 	.word	0x08004c39
 8004bdc:	08004c39 	.word	0x08004c39
 8004be0:	08004c39 	.word	0x08004c39
 8004be4:	08004c39 	.word	0x08004c39
 8004be8:	08004c39 	.word	0x08004c39
 8004bec:	08004c0f 	.word	0x08004c0f
 8004bf0:	2b64      	cmp	r3, #100	; 0x64
 8004bf2:	d009      	beq.n	8004c08 <Save_EEPROM+0xbfc>
 8004bf4:	e020      	b.n	8004c38 <Save_EEPROM+0xc2c>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	753b      	strb	r3, [r7, #20]
 8004bfa:	e01f      	b.n	8004c3c <Save_EEPROM+0xc30>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	753b      	strb	r3, [r7, #20]
 8004c00:	e01c      	b.n	8004c3c <Save_EEPROM+0xc30>
 8004c02:	2303      	movs	r3, #3
 8004c04:	753b      	strb	r3, [r7, #20]
 8004c06:	e019      	b.n	8004c3c <Save_EEPROM+0xc30>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	753b      	strb	r3, [r7, #20]
 8004c0c:	e016      	b.n	8004c3c <Save_EEPROM+0xc30>
 8004c0e:	2305      	movs	r3, #5
 8004c10:	753b      	strb	r3, [r7, #20]
 8004c12:	e013      	b.n	8004c3c <Save_EEPROM+0xc30>
 8004c14:	2306      	movs	r3, #6
 8004c16:	753b      	strb	r3, [r7, #20]
 8004c18:	e010      	b.n	8004c3c <Save_EEPROM+0xc30>
 8004c1a:	2307      	movs	r3, #7
 8004c1c:	753b      	strb	r3, [r7, #20]
 8004c1e:	e00d      	b.n	8004c3c <Save_EEPROM+0xc30>
 8004c20:	2308      	movs	r3, #8
 8004c22:	753b      	strb	r3, [r7, #20]
 8004c24:	e00a      	b.n	8004c3c <Save_EEPROM+0xc30>
 8004c26:	2309      	movs	r3, #9
 8004c28:	753b      	strb	r3, [r7, #20]
 8004c2a:	e007      	b.n	8004c3c <Save_EEPROM+0xc30>
 8004c2c:	230a      	movs	r3, #10
 8004c2e:	753b      	strb	r3, [r7, #20]
 8004c30:	e004      	b.n	8004c3c <Save_EEPROM+0xc30>
 8004c32:	230b      	movs	r3, #11
 8004c34:	753b      	strb	r3, [r7, #20]
 8004c36:	e001      	b.n	8004c3c <Save_EEPROM+0xc30>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	753b      	strb	r3, [r7, #20]
 8004c3c:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[9], perCAN[ANALOG_9_12]);
 8004c3e:	4b54      	ldr	r3, [pc, #336]	; (8004d90 <Save_EEPROM+0xd84>)
 8004c40:	889b      	ldrh	r3, [r3, #4]
 8004c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c46:	f000 8082 	beq.w	8004d4e <Save_EEPROM+0xd42>
 8004c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c4e:	f300 80a1 	bgt.w	8004d94 <Save_EEPROM+0xd88>
 8004c52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c56:	d07d      	beq.n	8004d54 <Save_EEPROM+0xd48>
 8004c58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c5c:	f300 809a 	bgt.w	8004d94 <Save_EEPROM+0xd88>
 8004c60:	2bc8      	cmp	r3, #200	; 0xc8
 8004c62:	d07a      	beq.n	8004d5a <Save_EEPROM+0xd4e>
 8004c64:	2bc8      	cmp	r3, #200	; 0xc8
 8004c66:	f300 8095 	bgt.w	8004d94 <Save_EEPROM+0xd88>
 8004c6a:	2b32      	cmp	r3, #50	; 0x32
 8004c6c:	dc6c      	bgt.n	8004d48 <Save_EEPROM+0xd3c>
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	f2c0 8090 	blt.w	8004d94 <Save_EEPROM+0xd88>
 8004c74:	3b02      	subs	r3, #2
 8004c76:	2b30      	cmp	r3, #48	; 0x30
 8004c78:	f200 808c 	bhi.w	8004d94 <Save_EEPROM+0xd88>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <Save_EEPROM+0xc78>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004d8b 	.word	0x08004d8b
 8004c88:	08004d85 	.word	0x08004d85
 8004c8c:	08004d95 	.word	0x08004d95
 8004c90:	08004d7f 	.word	0x08004d7f
 8004c94:	08004d95 	.word	0x08004d95
 8004c98:	08004d95 	.word	0x08004d95
 8004c9c:	08004d95 	.word	0x08004d95
 8004ca0:	08004d95 	.word	0x08004d95
 8004ca4:	08004d79 	.word	0x08004d79
 8004ca8:	08004d95 	.word	0x08004d95
 8004cac:	08004d95 	.word	0x08004d95
 8004cb0:	08004d95 	.word	0x08004d95
 8004cb4:	08004d95 	.word	0x08004d95
 8004cb8:	08004d95 	.word	0x08004d95
 8004cbc:	08004d95 	.word	0x08004d95
 8004cc0:	08004d95 	.word	0x08004d95
 8004cc4:	08004d95 	.word	0x08004d95
 8004cc8:	08004d95 	.word	0x08004d95
 8004ccc:	08004d73 	.word	0x08004d73
 8004cd0:	08004d95 	.word	0x08004d95
 8004cd4:	08004d95 	.word	0x08004d95
 8004cd8:	08004d95 	.word	0x08004d95
 8004cdc:	08004d95 	.word	0x08004d95
 8004ce0:	08004d95 	.word	0x08004d95
 8004ce4:	08004d95 	.word	0x08004d95
 8004ce8:	08004d95 	.word	0x08004d95
 8004cec:	08004d95 	.word	0x08004d95
 8004cf0:	08004d95 	.word	0x08004d95
 8004cf4:	08004d95 	.word	0x08004d95
 8004cf8:	08004d95 	.word	0x08004d95
 8004cfc:	08004d95 	.word	0x08004d95
 8004d00:	08004d95 	.word	0x08004d95
 8004d04:	08004d95 	.word	0x08004d95
 8004d08:	08004d95 	.word	0x08004d95
 8004d0c:	08004d95 	.word	0x08004d95
 8004d10:	08004d95 	.word	0x08004d95
 8004d14:	08004d95 	.word	0x08004d95
 8004d18:	08004d95 	.word	0x08004d95
 8004d1c:	08004d6d 	.word	0x08004d6d
 8004d20:	08004d95 	.word	0x08004d95
 8004d24:	08004d95 	.word	0x08004d95
 8004d28:	08004d95 	.word	0x08004d95
 8004d2c:	08004d95 	.word	0x08004d95
 8004d30:	08004d95 	.word	0x08004d95
 8004d34:	08004d95 	.word	0x08004d95
 8004d38:	08004d95 	.word	0x08004d95
 8004d3c:	08004d95 	.word	0x08004d95
 8004d40:	08004d95 	.word	0x08004d95
 8004d44:	08004d67 	.word	0x08004d67
 8004d48:	2b64      	cmp	r3, #100	; 0x64
 8004d4a:	d009      	beq.n	8004d60 <Save_EEPROM+0xd54>
 8004d4c:	e022      	b.n	8004d94 <Save_EEPROM+0xd88>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	757b      	strb	r3, [r7, #21]
 8004d52:	e021      	b.n	8004d98 <Save_EEPROM+0xd8c>
 8004d54:	2302      	movs	r3, #2
 8004d56:	757b      	strb	r3, [r7, #21]
 8004d58:	e01e      	b.n	8004d98 <Save_EEPROM+0xd8c>
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	757b      	strb	r3, [r7, #21]
 8004d5e:	e01b      	b.n	8004d98 <Save_EEPROM+0xd8c>
 8004d60:	2304      	movs	r3, #4
 8004d62:	757b      	strb	r3, [r7, #21]
 8004d64:	e018      	b.n	8004d98 <Save_EEPROM+0xd8c>
 8004d66:	2305      	movs	r3, #5
 8004d68:	757b      	strb	r3, [r7, #21]
 8004d6a:	e015      	b.n	8004d98 <Save_EEPROM+0xd8c>
 8004d6c:	2306      	movs	r3, #6
 8004d6e:	757b      	strb	r3, [r7, #21]
 8004d70:	e012      	b.n	8004d98 <Save_EEPROM+0xd8c>
 8004d72:	2307      	movs	r3, #7
 8004d74:	757b      	strb	r3, [r7, #21]
 8004d76:	e00f      	b.n	8004d98 <Save_EEPROM+0xd8c>
 8004d78:	2308      	movs	r3, #8
 8004d7a:	757b      	strb	r3, [r7, #21]
 8004d7c:	e00c      	b.n	8004d98 <Save_EEPROM+0xd8c>
 8004d7e:	2309      	movs	r3, #9
 8004d80:	757b      	strb	r3, [r7, #21]
 8004d82:	e009      	b.n	8004d98 <Save_EEPROM+0xd8c>
 8004d84:	230a      	movs	r3, #10
 8004d86:	757b      	strb	r3, [r7, #21]
 8004d88:	e006      	b.n	8004d98 <Save_EEPROM+0xd8c>
 8004d8a:	230b      	movs	r3, #11
 8004d8c:	757b      	strb	r3, [r7, #21]
 8004d8e:	e003      	b.n	8004d98 <Save_EEPROM+0xd8c>
 8004d90:	200018ec 	.word	0x200018ec
 8004d94:	2300      	movs	r3, #0
 8004d96:	757b      	strb	r3, [r7, #21]
 8004d98:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[10], perCAN[RTC_MSG]);
 8004d9a:	4bc0      	ldr	r3, [pc, #768]	; (800509c <Save_EEPROM+0x1090>)
 8004d9c:	88db      	ldrh	r3, [r3, #6]
 8004d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004da2:	f000 8082 	beq.w	8004eaa <Save_EEPROM+0xe9e>
 8004da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004daa:	f300 809f 	bgt.w	8004eec <Save_EEPROM+0xee0>
 8004dae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004db2:	d07d      	beq.n	8004eb0 <Save_EEPROM+0xea4>
 8004db4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004db8:	f300 8098 	bgt.w	8004eec <Save_EEPROM+0xee0>
 8004dbc:	2bc8      	cmp	r3, #200	; 0xc8
 8004dbe:	d07a      	beq.n	8004eb6 <Save_EEPROM+0xeaa>
 8004dc0:	2bc8      	cmp	r3, #200	; 0xc8
 8004dc2:	f300 8093 	bgt.w	8004eec <Save_EEPROM+0xee0>
 8004dc6:	2b32      	cmp	r3, #50	; 0x32
 8004dc8:	dc6c      	bgt.n	8004ea4 <Save_EEPROM+0xe98>
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	f2c0 808e 	blt.w	8004eec <Save_EEPROM+0xee0>
 8004dd0:	3b02      	subs	r3, #2
 8004dd2:	2b30      	cmp	r3, #48	; 0x30
 8004dd4:	f200 808a 	bhi.w	8004eec <Save_EEPROM+0xee0>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <Save_EEPROM+0xdd4>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004ee7 	.word	0x08004ee7
 8004de4:	08004ee1 	.word	0x08004ee1
 8004de8:	08004eed 	.word	0x08004eed
 8004dec:	08004edb 	.word	0x08004edb
 8004df0:	08004eed 	.word	0x08004eed
 8004df4:	08004eed 	.word	0x08004eed
 8004df8:	08004eed 	.word	0x08004eed
 8004dfc:	08004eed 	.word	0x08004eed
 8004e00:	08004ed5 	.word	0x08004ed5
 8004e04:	08004eed 	.word	0x08004eed
 8004e08:	08004eed 	.word	0x08004eed
 8004e0c:	08004eed 	.word	0x08004eed
 8004e10:	08004eed 	.word	0x08004eed
 8004e14:	08004eed 	.word	0x08004eed
 8004e18:	08004eed 	.word	0x08004eed
 8004e1c:	08004eed 	.word	0x08004eed
 8004e20:	08004eed 	.word	0x08004eed
 8004e24:	08004eed 	.word	0x08004eed
 8004e28:	08004ecf 	.word	0x08004ecf
 8004e2c:	08004eed 	.word	0x08004eed
 8004e30:	08004eed 	.word	0x08004eed
 8004e34:	08004eed 	.word	0x08004eed
 8004e38:	08004eed 	.word	0x08004eed
 8004e3c:	08004eed 	.word	0x08004eed
 8004e40:	08004eed 	.word	0x08004eed
 8004e44:	08004eed 	.word	0x08004eed
 8004e48:	08004eed 	.word	0x08004eed
 8004e4c:	08004eed 	.word	0x08004eed
 8004e50:	08004eed 	.word	0x08004eed
 8004e54:	08004eed 	.word	0x08004eed
 8004e58:	08004eed 	.word	0x08004eed
 8004e5c:	08004eed 	.word	0x08004eed
 8004e60:	08004eed 	.word	0x08004eed
 8004e64:	08004eed 	.word	0x08004eed
 8004e68:	08004eed 	.word	0x08004eed
 8004e6c:	08004eed 	.word	0x08004eed
 8004e70:	08004eed 	.word	0x08004eed
 8004e74:	08004eed 	.word	0x08004eed
 8004e78:	08004ec9 	.word	0x08004ec9
 8004e7c:	08004eed 	.word	0x08004eed
 8004e80:	08004eed 	.word	0x08004eed
 8004e84:	08004eed 	.word	0x08004eed
 8004e88:	08004eed 	.word	0x08004eed
 8004e8c:	08004eed 	.word	0x08004eed
 8004e90:	08004eed 	.word	0x08004eed
 8004e94:	08004eed 	.word	0x08004eed
 8004e98:	08004eed 	.word	0x08004eed
 8004e9c:	08004eed 	.word	0x08004eed
 8004ea0:	08004ec3 	.word	0x08004ec3
 8004ea4:	2b64      	cmp	r3, #100	; 0x64
 8004ea6:	d009      	beq.n	8004ebc <Save_EEPROM+0xeb0>
 8004ea8:	e020      	b.n	8004eec <Save_EEPROM+0xee0>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	75bb      	strb	r3, [r7, #22]
 8004eae:	e01f      	b.n	8004ef0 <Save_EEPROM+0xee4>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	75bb      	strb	r3, [r7, #22]
 8004eb4:	e01c      	b.n	8004ef0 <Save_EEPROM+0xee4>
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	75bb      	strb	r3, [r7, #22]
 8004eba:	e019      	b.n	8004ef0 <Save_EEPROM+0xee4>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	75bb      	strb	r3, [r7, #22]
 8004ec0:	e016      	b.n	8004ef0 <Save_EEPROM+0xee4>
 8004ec2:	2305      	movs	r3, #5
 8004ec4:	75bb      	strb	r3, [r7, #22]
 8004ec6:	e013      	b.n	8004ef0 <Save_EEPROM+0xee4>
 8004ec8:	2306      	movs	r3, #6
 8004eca:	75bb      	strb	r3, [r7, #22]
 8004ecc:	e010      	b.n	8004ef0 <Save_EEPROM+0xee4>
 8004ece:	2307      	movs	r3, #7
 8004ed0:	75bb      	strb	r3, [r7, #22]
 8004ed2:	e00d      	b.n	8004ef0 <Save_EEPROM+0xee4>
 8004ed4:	2308      	movs	r3, #8
 8004ed6:	75bb      	strb	r3, [r7, #22]
 8004ed8:	e00a      	b.n	8004ef0 <Save_EEPROM+0xee4>
 8004eda:	2309      	movs	r3, #9
 8004edc:	75bb      	strb	r3, [r7, #22]
 8004ede:	e007      	b.n	8004ef0 <Save_EEPROM+0xee4>
 8004ee0:	230a      	movs	r3, #10
 8004ee2:	75bb      	strb	r3, [r7, #22]
 8004ee4:	e004      	b.n	8004ef0 <Save_EEPROM+0xee4>
 8004ee6:	230b      	movs	r3, #11
 8004ee8:	75bb      	strb	r3, [r7, #22]
 8004eea:	e001      	b.n	8004ef0 <Save_EEPROM+0xee4>
 8004eec:	2300      	movs	r3, #0
 8004eee:	75bb      	strb	r3, [r7, #22]
 8004ef0:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[10], perCAN[VERIFY_MSG]);
 8004ef2:	4b6a      	ldr	r3, [pc, #424]	; (800509c <Save_EEPROM+0x1090>)
 8004ef4:	891b      	ldrh	r3, [r3, #8]
 8004ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004efa:	f000 8082 	beq.w	8005002 <Save_EEPROM+0xff6>
 8004efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f02:	f300 809f 	bgt.w	8005044 <Save_EEPROM+0x1038>
 8004f06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f0a:	d07d      	beq.n	8005008 <Save_EEPROM+0xffc>
 8004f0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f10:	f300 8098 	bgt.w	8005044 <Save_EEPROM+0x1038>
 8004f14:	2bc8      	cmp	r3, #200	; 0xc8
 8004f16:	d07a      	beq.n	800500e <Save_EEPROM+0x1002>
 8004f18:	2bc8      	cmp	r3, #200	; 0xc8
 8004f1a:	f300 8093 	bgt.w	8005044 <Save_EEPROM+0x1038>
 8004f1e:	2b32      	cmp	r3, #50	; 0x32
 8004f20:	dc6c      	bgt.n	8004ffc <Save_EEPROM+0xff0>
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	f2c0 808e 	blt.w	8005044 <Save_EEPROM+0x1038>
 8004f28:	3b02      	subs	r3, #2
 8004f2a:	2b30      	cmp	r3, #48	; 0x30
 8004f2c:	f200 808a 	bhi.w	8005044 <Save_EEPROM+0x1038>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <Save_EEPROM+0xf2c>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	0800503f 	.word	0x0800503f
 8004f3c:	08005039 	.word	0x08005039
 8004f40:	08005045 	.word	0x08005045
 8004f44:	08005033 	.word	0x08005033
 8004f48:	08005045 	.word	0x08005045
 8004f4c:	08005045 	.word	0x08005045
 8004f50:	08005045 	.word	0x08005045
 8004f54:	08005045 	.word	0x08005045
 8004f58:	0800502d 	.word	0x0800502d
 8004f5c:	08005045 	.word	0x08005045
 8004f60:	08005045 	.word	0x08005045
 8004f64:	08005045 	.word	0x08005045
 8004f68:	08005045 	.word	0x08005045
 8004f6c:	08005045 	.word	0x08005045
 8004f70:	08005045 	.word	0x08005045
 8004f74:	08005045 	.word	0x08005045
 8004f78:	08005045 	.word	0x08005045
 8004f7c:	08005045 	.word	0x08005045
 8004f80:	08005027 	.word	0x08005027
 8004f84:	08005045 	.word	0x08005045
 8004f88:	08005045 	.word	0x08005045
 8004f8c:	08005045 	.word	0x08005045
 8004f90:	08005045 	.word	0x08005045
 8004f94:	08005045 	.word	0x08005045
 8004f98:	08005045 	.word	0x08005045
 8004f9c:	08005045 	.word	0x08005045
 8004fa0:	08005045 	.word	0x08005045
 8004fa4:	08005045 	.word	0x08005045
 8004fa8:	08005045 	.word	0x08005045
 8004fac:	08005045 	.word	0x08005045
 8004fb0:	08005045 	.word	0x08005045
 8004fb4:	08005045 	.word	0x08005045
 8004fb8:	08005045 	.word	0x08005045
 8004fbc:	08005045 	.word	0x08005045
 8004fc0:	08005045 	.word	0x08005045
 8004fc4:	08005045 	.word	0x08005045
 8004fc8:	08005045 	.word	0x08005045
 8004fcc:	08005045 	.word	0x08005045
 8004fd0:	08005021 	.word	0x08005021
 8004fd4:	08005045 	.word	0x08005045
 8004fd8:	08005045 	.word	0x08005045
 8004fdc:	08005045 	.word	0x08005045
 8004fe0:	08005045 	.word	0x08005045
 8004fe4:	08005045 	.word	0x08005045
 8004fe8:	08005045 	.word	0x08005045
 8004fec:	08005045 	.word	0x08005045
 8004ff0:	08005045 	.word	0x08005045
 8004ff4:	08005045 	.word	0x08005045
 8004ff8:	0800501b 	.word	0x0800501b
 8004ffc:	2b64      	cmp	r3, #100	; 0x64
 8004ffe:	d009      	beq.n	8005014 <Save_EEPROM+0x1008>
 8005000:	e020      	b.n	8005044 <Save_EEPROM+0x1038>
 8005002:	2301      	movs	r3, #1
 8005004:	75bb      	strb	r3, [r7, #22]
 8005006:	e01f      	b.n	8005048 <Save_EEPROM+0x103c>
 8005008:	2302      	movs	r3, #2
 800500a:	75bb      	strb	r3, [r7, #22]
 800500c:	e01c      	b.n	8005048 <Save_EEPROM+0x103c>
 800500e:	2303      	movs	r3, #3
 8005010:	75bb      	strb	r3, [r7, #22]
 8005012:	e019      	b.n	8005048 <Save_EEPROM+0x103c>
 8005014:	2304      	movs	r3, #4
 8005016:	75bb      	strb	r3, [r7, #22]
 8005018:	e016      	b.n	8005048 <Save_EEPROM+0x103c>
 800501a:	2305      	movs	r3, #5
 800501c:	75bb      	strb	r3, [r7, #22]
 800501e:	e013      	b.n	8005048 <Save_EEPROM+0x103c>
 8005020:	2306      	movs	r3, #6
 8005022:	75bb      	strb	r3, [r7, #22]
 8005024:	e010      	b.n	8005048 <Save_EEPROM+0x103c>
 8005026:	2307      	movs	r3, #7
 8005028:	75bb      	strb	r3, [r7, #22]
 800502a:	e00d      	b.n	8005048 <Save_EEPROM+0x103c>
 800502c:	2308      	movs	r3, #8
 800502e:	75bb      	strb	r3, [r7, #22]
 8005030:	e00a      	b.n	8005048 <Save_EEPROM+0x103c>
 8005032:	2309      	movs	r3, #9
 8005034:	75bb      	strb	r3, [r7, #22]
 8005036:	e007      	b.n	8005048 <Save_EEPROM+0x103c>
 8005038:	230a      	movs	r3, #10
 800503a:	75bb      	strb	r3, [r7, #22]
 800503c:	e004      	b.n	8005048 <Save_EEPROM+0x103c>
 800503e:	230b      	movs	r3, #11
 8005040:	75bb      	strb	r3, [r7, #22]
 8005042:	e001      	b.n	8005048 <Save_EEPROM+0x103c>
 8005044:	2300      	movs	r3, #0
 8005046:	75bb      	strb	r3, [r7, #22]
 8005048:	bf00      	nop

	buffer[12] = inputConfig;
 800504a:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <Save_EEPROM+0x1094>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	763b      	strb	r3, [r7, #24]
	buffer[13] = thresholdRPM >> 8;
 8005050:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <Save_EEPROM+0x1098>)
 8005052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005056:	121b      	asrs	r3, r3, #8
 8005058:	b21b      	sxth	r3, r3
 800505a:	b2db      	uxtb	r3, r3
 800505c:	767b      	strb	r3, [r7, #25]
	buffer[14] = thresholdRPM & 0xff;
 800505e:	4b11      	ldr	r3, [pc, #68]	; (80050a4 <Save_EEPROM+0x1098>)
 8005060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	76bb      	strb	r3, [r7, #26]
	buffer[15] = thresholdSpeed >> 8;
 8005068:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <Save_EEPROM+0x109c>)
 800506a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800506e:	121b      	asrs	r3, r3, #8
 8005070:	b21b      	sxth	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	76fb      	strb	r3, [r7, #27]
	buffer[16] = thresholdSpeed & 0xff;
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <Save_EEPROM+0x109c>)
 8005078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	773b      	strb	r3, [r7, #28]

	return HAL_I2C_Master_Transmit(hi2c, 0xA0, buffer, EEPROM_BUFFER_SIZE, 5);
 8005080:	f107 020c 	add.w	r2, r7, #12
 8005084:	2305      	movs	r3, #5
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2311      	movs	r3, #17
 800508a:	21a0      	movs	r1, #160	; 0xa0
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f004 f80b 	bl	80090a8 <HAL_I2C_Master_Transmit>
 8005092:	4603      	mov	r3, r0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3720      	adds	r7, #32
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	200018ec 	.word	0x200018ec
 80050a0:	200018a2 	.word	0x200018a2
 80050a4:	2000069a 	.word	0x2000069a
 80050a8:	20001dc8 	.word	0x20001dc8

080050ac <Principal_Init>:

void Principal_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
	if(Load_EEPROM(hi2c) != HAL_OK)
 80050b8:	68b8      	ldr	r0, [r7, #8]
 80050ba:	f7fe fb97 	bl	80037ec <Load_EEPROM>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <Principal_Init+0x1c>
		Principal_Hard_Code_Config();
 80050c4:	f000 fcca 	bl	8005a5c <Principal_Hard_Code_Config>

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_STORE_DATA)
 80050c8:	2101      	movs	r1, #1
 80050ca:	4813      	ldr	r0, [pc, #76]	; (8005118 <Principal_Init+0x6c>)
 80050cc:	f007 fca8 	bl	800ca20 <HAL_RTCEx_BKUPRead>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f24e 325c 	movw	r2, #58204	; 0xe35c
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d103      	bne.n	80050e2 <Principal_Init+0x36>
		flagRTC = RTC_OK;
 80050da:	4b10      	ldr	r3, [pc, #64]	; (800511c <Principal_Init+0x70>)
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	e002      	b.n	80050e8 <Principal_Init+0x3c>
	else
		flagRTC = RTC_LOST;
 80050e2:	4b0e      	ldr	r3, [pc, #56]	; (800511c <Principal_Init+0x70>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	701a      	strb	r2, [r3, #0]

	Principal_Datalogger_Init(&fatfsStruct);
 80050e8:	480d      	ldr	r0, [pc, #52]	; (8005120 <Principal_Init+0x74>)
 80050ea:	f000 fd01 	bl	8005af0 <Principal_Datalogger_Init>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[6], 7);
 80050ee:	2207      	movs	r2, #7
 80050f0:	490c      	ldr	r1, [pc, #48]	; (8005124 <Principal_Init+0x78>)
 80050f2:	480d      	ldr	r0, [pc, #52]	; (8005128 <Principal_Init+0x7c>)
 80050f4:	f001 fd76 	bl	8006be4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 6);
 80050f8:	2206      	movs	r2, #6
 80050fa:	490c      	ldr	r1, [pc, #48]	; (800512c <Principal_Init+0x80>)
 80050fc:	480c      	ldr	r0, [pc, #48]	; (8005130 <Principal_Init+0x84>)
 80050fe:	f001 fd71 	bl	8006be4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f009 fb70 	bl	800e7e8 <HAL_TIM_Base_Start_IT>

	Principal_CAN_Start(hcan);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7fe fac7 	bl	800369c <Principal_CAN_Start>
}
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20001b8c 	.word	0x20001b8c
 800511c:	200018a3 	.word	0x200018a3
 8005120:	20000868 	.word	0x20000868
 8005124:	20000744 	.word	0x20000744
 8005128:	200018a4 	.word	0x200018a4
 800512c:	20000738 	.word	0x20000738
 8005130:	20000778 	.word	0x20000778

08005134 <Principal_Receive_Config>:

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data, uint32_t length)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
	HAL_SD_StateTypeDef retVal = HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	75fb      	strb	r3, [r7, #23]

	switch(data[0])
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b03      	cmp	r3, #3
 800514a:	f200 846c 	bhi.w	8005a26 <Principal_Receive_Config+0x8f2>
 800514e:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <Principal_Receive_Config+0x20>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	08005165 	.word	0x08005165
 8005158:	080055f9 	.word	0x080055f9
 800515c:	08005959 	.word	0x08005959
 8005160:	080059b3 	.word	0x080059b3
	{
		case 0:
			if(length != 8)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b08      	cmp	r3, #8
 8005168:	f040 845f 	bne.w	8005a2a <Principal_Receive_Config+0x8f6>
				break;

			__BUFFER_TO_FREQ(data[1], perMsg[ANALOG_1_4]);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	3301      	adds	r3, #1
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	3b01      	subs	r3, #1
 8005174:	2b0a      	cmp	r3, #10
 8005176:	d847      	bhi.n	8005208 <Principal_Receive_Config+0xd4>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <Principal_Receive_Config+0x4c>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	080051ad 	.word	0x080051ad
 8005184:	080051b7 	.word	0x080051b7
 8005188:	080051c1 	.word	0x080051c1
 800518c:	080051c9 	.word	0x080051c9
 8005190:	080051d1 	.word	0x080051d1
 8005194:	080051d9 	.word	0x080051d9
 8005198:	080051e1 	.word	0x080051e1
 800519c:	080051e9 	.word	0x080051e9
 80051a0:	080051f1 	.word	0x080051f1
 80051a4:	080051f9 	.word	0x080051f9
 80051a8:	08005201 	.word	0x08005201
 80051ac:	4ba8      	ldr	r3, [pc, #672]	; (8005450 <Principal_Receive_Config+0x31c>)
 80051ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051b2:	801a      	strh	r2, [r3, #0]
 80051b4:	e02b      	b.n	800520e <Principal_Receive_Config+0xda>
 80051b6:	4ba6      	ldr	r3, [pc, #664]	; (8005450 <Principal_Receive_Config+0x31c>)
 80051b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80051bc:	801a      	strh	r2, [r3, #0]
 80051be:	e026      	b.n	800520e <Principal_Receive_Config+0xda>
 80051c0:	4ba3      	ldr	r3, [pc, #652]	; (8005450 <Principal_Receive_Config+0x31c>)
 80051c2:	22c8      	movs	r2, #200	; 0xc8
 80051c4:	801a      	strh	r2, [r3, #0]
 80051c6:	e022      	b.n	800520e <Principal_Receive_Config+0xda>
 80051c8:	4ba1      	ldr	r3, [pc, #644]	; (8005450 <Principal_Receive_Config+0x31c>)
 80051ca:	2264      	movs	r2, #100	; 0x64
 80051cc:	801a      	strh	r2, [r3, #0]
 80051ce:	e01e      	b.n	800520e <Principal_Receive_Config+0xda>
 80051d0:	4b9f      	ldr	r3, [pc, #636]	; (8005450 <Principal_Receive_Config+0x31c>)
 80051d2:	2232      	movs	r2, #50	; 0x32
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	e01a      	b.n	800520e <Principal_Receive_Config+0xda>
 80051d8:	4b9d      	ldr	r3, [pc, #628]	; (8005450 <Principal_Receive_Config+0x31c>)
 80051da:	2228      	movs	r2, #40	; 0x28
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	e016      	b.n	800520e <Principal_Receive_Config+0xda>
 80051e0:	4b9b      	ldr	r3, [pc, #620]	; (8005450 <Principal_Receive_Config+0x31c>)
 80051e2:	2214      	movs	r2, #20
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	e012      	b.n	800520e <Principal_Receive_Config+0xda>
 80051e8:	4b99      	ldr	r3, [pc, #612]	; (8005450 <Principal_Receive_Config+0x31c>)
 80051ea:	220a      	movs	r2, #10
 80051ec:	801a      	strh	r2, [r3, #0]
 80051ee:	e00e      	b.n	800520e <Principal_Receive_Config+0xda>
 80051f0:	4b97      	ldr	r3, [pc, #604]	; (8005450 <Principal_Receive_Config+0x31c>)
 80051f2:	2205      	movs	r2, #5
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	e00a      	b.n	800520e <Principal_Receive_Config+0xda>
 80051f8:	4b95      	ldr	r3, [pc, #596]	; (8005450 <Principal_Receive_Config+0x31c>)
 80051fa:	2203      	movs	r2, #3
 80051fc:	801a      	strh	r2, [r3, #0]
 80051fe:	e006      	b.n	800520e <Principal_Receive_Config+0xda>
 8005200:	4b93      	ldr	r3, [pc, #588]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005202:	2202      	movs	r2, #2
 8005204:	801a      	strh	r2, [r3, #0]
 8005206:	e002      	b.n	800520e <Principal_Receive_Config+0xda>
 8005208:	4b91      	ldr	r3, [pc, #580]	; (8005450 <Principal_Receive_Config+0x31c>)
 800520a:	2200      	movs	r2, #0
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perMsg[ANALOG_5_8]);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	3302      	adds	r3, #2
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	3b01      	subs	r3, #1
 8005218:	2b0a      	cmp	r3, #10
 800521a:	d847      	bhi.n	80052ac <Principal_Receive_Config+0x178>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <Principal_Receive_Config+0xf0>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005251 	.word	0x08005251
 8005228:	0800525b 	.word	0x0800525b
 800522c:	08005265 	.word	0x08005265
 8005230:	0800526d 	.word	0x0800526d
 8005234:	08005275 	.word	0x08005275
 8005238:	0800527d 	.word	0x0800527d
 800523c:	08005285 	.word	0x08005285
 8005240:	0800528d 	.word	0x0800528d
 8005244:	08005295 	.word	0x08005295
 8005248:	0800529d 	.word	0x0800529d
 800524c:	080052a5 	.word	0x080052a5
 8005250:	4b7f      	ldr	r3, [pc, #508]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005256:	805a      	strh	r2, [r3, #2]
 8005258:	e02b      	b.n	80052b2 <Principal_Receive_Config+0x17e>
 800525a:	4b7d      	ldr	r3, [pc, #500]	; (8005450 <Principal_Receive_Config+0x31c>)
 800525c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005260:	805a      	strh	r2, [r3, #2]
 8005262:	e026      	b.n	80052b2 <Principal_Receive_Config+0x17e>
 8005264:	4b7a      	ldr	r3, [pc, #488]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005266:	22c8      	movs	r2, #200	; 0xc8
 8005268:	805a      	strh	r2, [r3, #2]
 800526a:	e022      	b.n	80052b2 <Principal_Receive_Config+0x17e>
 800526c:	4b78      	ldr	r3, [pc, #480]	; (8005450 <Principal_Receive_Config+0x31c>)
 800526e:	2264      	movs	r2, #100	; 0x64
 8005270:	805a      	strh	r2, [r3, #2]
 8005272:	e01e      	b.n	80052b2 <Principal_Receive_Config+0x17e>
 8005274:	4b76      	ldr	r3, [pc, #472]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005276:	2232      	movs	r2, #50	; 0x32
 8005278:	805a      	strh	r2, [r3, #2]
 800527a:	e01a      	b.n	80052b2 <Principal_Receive_Config+0x17e>
 800527c:	4b74      	ldr	r3, [pc, #464]	; (8005450 <Principal_Receive_Config+0x31c>)
 800527e:	2228      	movs	r2, #40	; 0x28
 8005280:	805a      	strh	r2, [r3, #2]
 8005282:	e016      	b.n	80052b2 <Principal_Receive_Config+0x17e>
 8005284:	4b72      	ldr	r3, [pc, #456]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005286:	2214      	movs	r2, #20
 8005288:	805a      	strh	r2, [r3, #2]
 800528a:	e012      	b.n	80052b2 <Principal_Receive_Config+0x17e>
 800528c:	4b70      	ldr	r3, [pc, #448]	; (8005450 <Principal_Receive_Config+0x31c>)
 800528e:	220a      	movs	r2, #10
 8005290:	805a      	strh	r2, [r3, #2]
 8005292:	e00e      	b.n	80052b2 <Principal_Receive_Config+0x17e>
 8005294:	4b6e      	ldr	r3, [pc, #440]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005296:	2205      	movs	r2, #5
 8005298:	805a      	strh	r2, [r3, #2]
 800529a:	e00a      	b.n	80052b2 <Principal_Receive_Config+0x17e>
 800529c:	4b6c      	ldr	r3, [pc, #432]	; (8005450 <Principal_Receive_Config+0x31c>)
 800529e:	2203      	movs	r2, #3
 80052a0:	805a      	strh	r2, [r3, #2]
 80052a2:	e006      	b.n	80052b2 <Principal_Receive_Config+0x17e>
 80052a4:	4b6a      	ldr	r3, [pc, #424]	; (8005450 <Principal_Receive_Config+0x31c>)
 80052a6:	2202      	movs	r2, #2
 80052a8:	805a      	strh	r2, [r3, #2]
 80052aa:	e002      	b.n	80052b2 <Principal_Receive_Config+0x17e>
 80052ac:	4b68      	ldr	r3, [pc, #416]	; (8005450 <Principal_Receive_Config+0x31c>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	805a      	strh	r2, [r3, #2]
 80052b2:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perMsg[ANALOG_9_12]);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	3303      	adds	r3, #3
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	2b0a      	cmp	r3, #10
 80052be:	d847      	bhi.n	8005350 <Principal_Receive_Config+0x21c>
 80052c0:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <Principal_Receive_Config+0x194>)
 80052c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c6:	bf00      	nop
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	080052ff 	.word	0x080052ff
 80052d0:	08005309 	.word	0x08005309
 80052d4:	08005311 	.word	0x08005311
 80052d8:	08005319 	.word	0x08005319
 80052dc:	08005321 	.word	0x08005321
 80052e0:	08005329 	.word	0x08005329
 80052e4:	08005331 	.word	0x08005331
 80052e8:	08005339 	.word	0x08005339
 80052ec:	08005341 	.word	0x08005341
 80052f0:	08005349 	.word	0x08005349
 80052f4:	4b56      	ldr	r3, [pc, #344]	; (8005450 <Principal_Receive_Config+0x31c>)
 80052f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052fa:	809a      	strh	r2, [r3, #4]
 80052fc:	e02b      	b.n	8005356 <Principal_Receive_Config+0x222>
 80052fe:	4b54      	ldr	r3, [pc, #336]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005300:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005304:	809a      	strh	r2, [r3, #4]
 8005306:	e026      	b.n	8005356 <Principal_Receive_Config+0x222>
 8005308:	4b51      	ldr	r3, [pc, #324]	; (8005450 <Principal_Receive_Config+0x31c>)
 800530a:	22c8      	movs	r2, #200	; 0xc8
 800530c:	809a      	strh	r2, [r3, #4]
 800530e:	e022      	b.n	8005356 <Principal_Receive_Config+0x222>
 8005310:	4b4f      	ldr	r3, [pc, #316]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005312:	2264      	movs	r2, #100	; 0x64
 8005314:	809a      	strh	r2, [r3, #4]
 8005316:	e01e      	b.n	8005356 <Principal_Receive_Config+0x222>
 8005318:	4b4d      	ldr	r3, [pc, #308]	; (8005450 <Principal_Receive_Config+0x31c>)
 800531a:	2232      	movs	r2, #50	; 0x32
 800531c:	809a      	strh	r2, [r3, #4]
 800531e:	e01a      	b.n	8005356 <Principal_Receive_Config+0x222>
 8005320:	4b4b      	ldr	r3, [pc, #300]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005322:	2228      	movs	r2, #40	; 0x28
 8005324:	809a      	strh	r2, [r3, #4]
 8005326:	e016      	b.n	8005356 <Principal_Receive_Config+0x222>
 8005328:	4b49      	ldr	r3, [pc, #292]	; (8005450 <Principal_Receive_Config+0x31c>)
 800532a:	2214      	movs	r2, #20
 800532c:	809a      	strh	r2, [r3, #4]
 800532e:	e012      	b.n	8005356 <Principal_Receive_Config+0x222>
 8005330:	4b47      	ldr	r3, [pc, #284]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005332:	220a      	movs	r2, #10
 8005334:	809a      	strh	r2, [r3, #4]
 8005336:	e00e      	b.n	8005356 <Principal_Receive_Config+0x222>
 8005338:	4b45      	ldr	r3, [pc, #276]	; (8005450 <Principal_Receive_Config+0x31c>)
 800533a:	2205      	movs	r2, #5
 800533c:	809a      	strh	r2, [r3, #4]
 800533e:	e00a      	b.n	8005356 <Principal_Receive_Config+0x222>
 8005340:	4b43      	ldr	r3, [pc, #268]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005342:	2203      	movs	r2, #3
 8005344:	809a      	strh	r2, [r3, #4]
 8005346:	e006      	b.n	8005356 <Principal_Receive_Config+0x222>
 8005348:	4b41      	ldr	r3, [pc, #260]	; (8005450 <Principal_Receive_Config+0x31c>)
 800534a:	2202      	movs	r2, #2
 800534c:	809a      	strh	r2, [r3, #4]
 800534e:	e002      	b.n	8005356 <Principal_Receive_Config+0x222>
 8005350:	4b3f      	ldr	r3, [pc, #252]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005352:	2200      	movs	r2, #0
 8005354:	809a      	strh	r2, [r3, #4]
 8005356:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perMsg[RTC_MSG]);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	3304      	adds	r3, #4
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	3b01      	subs	r3, #1
 8005360:	2b0a      	cmp	r3, #10
 8005362:	d847      	bhi.n	80053f4 <Principal_Receive_Config+0x2c0>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <Principal_Receive_Config+0x238>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	08005399 	.word	0x08005399
 8005370:	080053a3 	.word	0x080053a3
 8005374:	080053ad 	.word	0x080053ad
 8005378:	080053b5 	.word	0x080053b5
 800537c:	080053bd 	.word	0x080053bd
 8005380:	080053c5 	.word	0x080053c5
 8005384:	080053cd 	.word	0x080053cd
 8005388:	080053d5 	.word	0x080053d5
 800538c:	080053dd 	.word	0x080053dd
 8005390:	080053e5 	.word	0x080053e5
 8005394:	080053ed 	.word	0x080053ed
 8005398:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <Principal_Receive_Config+0x31c>)
 800539a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800539e:	80da      	strh	r2, [r3, #6]
 80053a0:	e02b      	b.n	80053fa <Principal_Receive_Config+0x2c6>
 80053a2:	4b2b      	ldr	r3, [pc, #172]	; (8005450 <Principal_Receive_Config+0x31c>)
 80053a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80053a8:	80da      	strh	r2, [r3, #6]
 80053aa:	e026      	b.n	80053fa <Principal_Receive_Config+0x2c6>
 80053ac:	4b28      	ldr	r3, [pc, #160]	; (8005450 <Principal_Receive_Config+0x31c>)
 80053ae:	22c8      	movs	r2, #200	; 0xc8
 80053b0:	80da      	strh	r2, [r3, #6]
 80053b2:	e022      	b.n	80053fa <Principal_Receive_Config+0x2c6>
 80053b4:	4b26      	ldr	r3, [pc, #152]	; (8005450 <Principal_Receive_Config+0x31c>)
 80053b6:	2264      	movs	r2, #100	; 0x64
 80053b8:	80da      	strh	r2, [r3, #6]
 80053ba:	e01e      	b.n	80053fa <Principal_Receive_Config+0x2c6>
 80053bc:	4b24      	ldr	r3, [pc, #144]	; (8005450 <Principal_Receive_Config+0x31c>)
 80053be:	2232      	movs	r2, #50	; 0x32
 80053c0:	80da      	strh	r2, [r3, #6]
 80053c2:	e01a      	b.n	80053fa <Principal_Receive_Config+0x2c6>
 80053c4:	4b22      	ldr	r3, [pc, #136]	; (8005450 <Principal_Receive_Config+0x31c>)
 80053c6:	2228      	movs	r2, #40	; 0x28
 80053c8:	80da      	strh	r2, [r3, #6]
 80053ca:	e016      	b.n	80053fa <Principal_Receive_Config+0x2c6>
 80053cc:	4b20      	ldr	r3, [pc, #128]	; (8005450 <Principal_Receive_Config+0x31c>)
 80053ce:	2214      	movs	r2, #20
 80053d0:	80da      	strh	r2, [r3, #6]
 80053d2:	e012      	b.n	80053fa <Principal_Receive_Config+0x2c6>
 80053d4:	4b1e      	ldr	r3, [pc, #120]	; (8005450 <Principal_Receive_Config+0x31c>)
 80053d6:	220a      	movs	r2, #10
 80053d8:	80da      	strh	r2, [r3, #6]
 80053da:	e00e      	b.n	80053fa <Principal_Receive_Config+0x2c6>
 80053dc:	4b1c      	ldr	r3, [pc, #112]	; (8005450 <Principal_Receive_Config+0x31c>)
 80053de:	2205      	movs	r2, #5
 80053e0:	80da      	strh	r2, [r3, #6]
 80053e2:	e00a      	b.n	80053fa <Principal_Receive_Config+0x2c6>
 80053e4:	4b1a      	ldr	r3, [pc, #104]	; (8005450 <Principal_Receive_Config+0x31c>)
 80053e6:	2203      	movs	r2, #3
 80053e8:	80da      	strh	r2, [r3, #6]
 80053ea:	e006      	b.n	80053fa <Principal_Receive_Config+0x2c6>
 80053ec:	4b18      	ldr	r3, [pc, #96]	; (8005450 <Principal_Receive_Config+0x31c>)
 80053ee:	2202      	movs	r2, #2
 80053f0:	80da      	strh	r2, [r3, #6]
 80053f2:	e002      	b.n	80053fa <Principal_Receive_Config+0x2c6>
 80053f4:	4b16      	ldr	r3, [pc, #88]	; (8005450 <Principal_Receive_Config+0x31c>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	80da      	strh	r2, [r3, #6]
 80053fa:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perMsg[VERIFY_MSG]);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	3305      	adds	r3, #5
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	3b01      	subs	r3, #1
 8005404:	2b0a      	cmp	r3, #10
 8005406:	d849      	bhi.n	800549c <Principal_Receive_Config+0x368>
 8005408:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <Principal_Receive_Config+0x2dc>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	0800543d 	.word	0x0800543d
 8005414:	08005447 	.word	0x08005447
 8005418:	08005455 	.word	0x08005455
 800541c:	0800545d 	.word	0x0800545d
 8005420:	08005465 	.word	0x08005465
 8005424:	0800546d 	.word	0x0800546d
 8005428:	08005475 	.word	0x08005475
 800542c:	0800547d 	.word	0x0800547d
 8005430:	08005485 	.word	0x08005485
 8005434:	0800548d 	.word	0x0800548d
 8005438:	08005495 	.word	0x08005495
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <Principal_Receive_Config+0x31c>)
 800543e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005442:	811a      	strh	r2, [r3, #8]
 8005444:	e02d      	b.n	80054a2 <Principal_Receive_Config+0x36e>
 8005446:	4b02      	ldr	r3, [pc, #8]	; (8005450 <Principal_Receive_Config+0x31c>)
 8005448:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800544c:	811a      	strh	r2, [r3, #8]
 800544e:	e028      	b.n	80054a2 <Principal_Receive_Config+0x36e>
 8005450:	20001dec 	.word	0x20001dec
 8005454:	4baa      	ldr	r3, [pc, #680]	; (8005700 <Principal_Receive_Config+0x5cc>)
 8005456:	22c8      	movs	r2, #200	; 0xc8
 8005458:	811a      	strh	r2, [r3, #8]
 800545a:	e022      	b.n	80054a2 <Principal_Receive_Config+0x36e>
 800545c:	4ba8      	ldr	r3, [pc, #672]	; (8005700 <Principal_Receive_Config+0x5cc>)
 800545e:	2264      	movs	r2, #100	; 0x64
 8005460:	811a      	strh	r2, [r3, #8]
 8005462:	e01e      	b.n	80054a2 <Principal_Receive_Config+0x36e>
 8005464:	4ba6      	ldr	r3, [pc, #664]	; (8005700 <Principal_Receive_Config+0x5cc>)
 8005466:	2232      	movs	r2, #50	; 0x32
 8005468:	811a      	strh	r2, [r3, #8]
 800546a:	e01a      	b.n	80054a2 <Principal_Receive_Config+0x36e>
 800546c:	4ba4      	ldr	r3, [pc, #656]	; (8005700 <Principal_Receive_Config+0x5cc>)
 800546e:	2228      	movs	r2, #40	; 0x28
 8005470:	811a      	strh	r2, [r3, #8]
 8005472:	e016      	b.n	80054a2 <Principal_Receive_Config+0x36e>
 8005474:	4ba2      	ldr	r3, [pc, #648]	; (8005700 <Principal_Receive_Config+0x5cc>)
 8005476:	2214      	movs	r2, #20
 8005478:	811a      	strh	r2, [r3, #8]
 800547a:	e012      	b.n	80054a2 <Principal_Receive_Config+0x36e>
 800547c:	4ba0      	ldr	r3, [pc, #640]	; (8005700 <Principal_Receive_Config+0x5cc>)
 800547e:	220a      	movs	r2, #10
 8005480:	811a      	strh	r2, [r3, #8]
 8005482:	e00e      	b.n	80054a2 <Principal_Receive_Config+0x36e>
 8005484:	4b9e      	ldr	r3, [pc, #632]	; (8005700 <Principal_Receive_Config+0x5cc>)
 8005486:	2205      	movs	r2, #5
 8005488:	811a      	strh	r2, [r3, #8]
 800548a:	e00a      	b.n	80054a2 <Principal_Receive_Config+0x36e>
 800548c:	4b9c      	ldr	r3, [pc, #624]	; (8005700 <Principal_Receive_Config+0x5cc>)
 800548e:	2203      	movs	r2, #3
 8005490:	811a      	strh	r2, [r3, #8]
 8005492:	e006      	b.n	80054a2 <Principal_Receive_Config+0x36e>
 8005494:	4b9a      	ldr	r3, [pc, #616]	; (8005700 <Principal_Receive_Config+0x5cc>)
 8005496:	2202      	movs	r2, #2
 8005498:	811a      	strh	r2, [r3, #8]
 800549a:	e002      	b.n	80054a2 <Principal_Receive_Config+0x36e>
 800549c:	4b98      	ldr	r3, [pc, #608]	; (8005700 <Principal_Receive_Config+0x5cc>)
 800549e:	2200      	movs	r2, #0
 80054a0:	811a      	strh	r2, [r3, #8]
 80054a2:	bf00      	nop
			__BUFFER_TO_FREQ(data[6], perMsg[ECU_SAVE]);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	3306      	adds	r3, #6
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	2b0a      	cmp	r3, #10
 80054ae:	d847      	bhi.n	8005540 <Principal_Receive_Config+0x40c>
 80054b0:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <Principal_Receive_Config+0x384>)
 80054b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b6:	bf00      	nop
 80054b8:	080054e5 	.word	0x080054e5
 80054bc:	080054ef 	.word	0x080054ef
 80054c0:	080054f9 	.word	0x080054f9
 80054c4:	08005501 	.word	0x08005501
 80054c8:	08005509 	.word	0x08005509
 80054cc:	08005511 	.word	0x08005511
 80054d0:	08005519 	.word	0x08005519
 80054d4:	08005521 	.word	0x08005521
 80054d8:	08005529 	.word	0x08005529
 80054dc:	08005531 	.word	0x08005531
 80054e0:	08005539 	.word	0x08005539
 80054e4:	4b86      	ldr	r3, [pc, #536]	; (8005700 <Principal_Receive_Config+0x5cc>)
 80054e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054ea:	819a      	strh	r2, [r3, #12]
 80054ec:	e02b      	b.n	8005546 <Principal_Receive_Config+0x412>
 80054ee:	4b84      	ldr	r3, [pc, #528]	; (8005700 <Principal_Receive_Config+0x5cc>)
 80054f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80054f4:	819a      	strh	r2, [r3, #12]
 80054f6:	e026      	b.n	8005546 <Principal_Receive_Config+0x412>
 80054f8:	4b81      	ldr	r3, [pc, #516]	; (8005700 <Principal_Receive_Config+0x5cc>)
 80054fa:	22c8      	movs	r2, #200	; 0xc8
 80054fc:	819a      	strh	r2, [r3, #12]
 80054fe:	e022      	b.n	8005546 <Principal_Receive_Config+0x412>
 8005500:	4b7f      	ldr	r3, [pc, #508]	; (8005700 <Principal_Receive_Config+0x5cc>)
 8005502:	2264      	movs	r2, #100	; 0x64
 8005504:	819a      	strh	r2, [r3, #12]
 8005506:	e01e      	b.n	8005546 <Principal_Receive_Config+0x412>
 8005508:	4b7d      	ldr	r3, [pc, #500]	; (8005700 <Principal_Receive_Config+0x5cc>)
 800550a:	2232      	movs	r2, #50	; 0x32
 800550c:	819a      	strh	r2, [r3, #12]
 800550e:	e01a      	b.n	8005546 <Principal_Receive_Config+0x412>
 8005510:	4b7b      	ldr	r3, [pc, #492]	; (8005700 <Principal_Receive_Config+0x5cc>)
 8005512:	2228      	movs	r2, #40	; 0x28
 8005514:	819a      	strh	r2, [r3, #12]
 8005516:	e016      	b.n	8005546 <Principal_Receive_Config+0x412>
 8005518:	4b79      	ldr	r3, [pc, #484]	; (8005700 <Principal_Receive_Config+0x5cc>)
 800551a:	2214      	movs	r2, #20
 800551c:	819a      	strh	r2, [r3, #12]
 800551e:	e012      	b.n	8005546 <Principal_Receive_Config+0x412>
 8005520:	4b77      	ldr	r3, [pc, #476]	; (8005700 <Principal_Receive_Config+0x5cc>)
 8005522:	220a      	movs	r2, #10
 8005524:	819a      	strh	r2, [r3, #12]
 8005526:	e00e      	b.n	8005546 <Principal_Receive_Config+0x412>
 8005528:	4b75      	ldr	r3, [pc, #468]	; (8005700 <Principal_Receive_Config+0x5cc>)
 800552a:	2205      	movs	r2, #5
 800552c:	819a      	strh	r2, [r3, #12]
 800552e:	e00a      	b.n	8005546 <Principal_Receive_Config+0x412>
 8005530:	4b73      	ldr	r3, [pc, #460]	; (8005700 <Principal_Receive_Config+0x5cc>)
 8005532:	2203      	movs	r2, #3
 8005534:	819a      	strh	r2, [r3, #12]
 8005536:	e006      	b.n	8005546 <Principal_Receive_Config+0x412>
 8005538:	4b71      	ldr	r3, [pc, #452]	; (8005700 <Principal_Receive_Config+0x5cc>)
 800553a:	2202      	movs	r2, #2
 800553c:	819a      	strh	r2, [r3, #12]
 800553e:	e002      	b.n	8005546 <Principal_Receive_Config+0x412>
 8005540:	4b6f      	ldr	r3, [pc, #444]	; (8005700 <Principal_Receive_Config+0x5cc>)
 8005542:	2200      	movs	r2, #0
 8005544:	819a      	strh	r2, [r3, #12]
 8005546:	bf00      	nop
			__BUFFER_TO_FREQ(data[7], perMsg[PDM_SAVE]);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	3307      	adds	r3, #7
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	3b01      	subs	r3, #1
 8005550:	2b0a      	cmp	r3, #10
 8005552:	d847      	bhi.n	80055e4 <Principal_Receive_Config+0x4b0>
 8005554:	a201      	add	r2, pc, #4	; (adr r2, 800555c <Principal_Receive_Config+0x428>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005589 	.word	0x08005589
 8005560:	08005593 	.word	0x08005593
 8005564:	0800559d 	.word	0x0800559d
 8005568:	080055a5 	.word	0x080055a5
 800556c:	080055ad 	.word	0x080055ad
 8005570:	080055b5 	.word	0x080055b5
 8005574:	080055bd 	.word	0x080055bd
 8005578:	080055c5 	.word	0x080055c5
 800557c:	080055cd 	.word	0x080055cd
 8005580:	080055d5 	.word	0x080055d5
 8005584:	080055dd 	.word	0x080055dd
 8005588:	4b5d      	ldr	r3, [pc, #372]	; (8005700 <Principal_Receive_Config+0x5cc>)
 800558a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800558e:	81da      	strh	r2, [r3, #14]
 8005590:	e02b      	b.n	80055ea <Principal_Receive_Config+0x4b6>
 8005592:	4b5b      	ldr	r3, [pc, #364]	; (8005700 <Principal_Receive_Config+0x5cc>)
 8005594:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005598:	81da      	strh	r2, [r3, #14]
 800559a:	e026      	b.n	80055ea <Principal_Receive_Config+0x4b6>
 800559c:	4b58      	ldr	r3, [pc, #352]	; (8005700 <Principal_Receive_Config+0x5cc>)
 800559e:	22c8      	movs	r2, #200	; 0xc8
 80055a0:	81da      	strh	r2, [r3, #14]
 80055a2:	e022      	b.n	80055ea <Principal_Receive_Config+0x4b6>
 80055a4:	4b56      	ldr	r3, [pc, #344]	; (8005700 <Principal_Receive_Config+0x5cc>)
 80055a6:	2264      	movs	r2, #100	; 0x64
 80055a8:	81da      	strh	r2, [r3, #14]
 80055aa:	e01e      	b.n	80055ea <Principal_Receive_Config+0x4b6>
 80055ac:	4b54      	ldr	r3, [pc, #336]	; (8005700 <Principal_Receive_Config+0x5cc>)
 80055ae:	2232      	movs	r2, #50	; 0x32
 80055b0:	81da      	strh	r2, [r3, #14]
 80055b2:	e01a      	b.n	80055ea <Principal_Receive_Config+0x4b6>
 80055b4:	4b52      	ldr	r3, [pc, #328]	; (8005700 <Principal_Receive_Config+0x5cc>)
 80055b6:	2228      	movs	r2, #40	; 0x28
 80055b8:	81da      	strh	r2, [r3, #14]
 80055ba:	e016      	b.n	80055ea <Principal_Receive_Config+0x4b6>
 80055bc:	4b50      	ldr	r3, [pc, #320]	; (8005700 <Principal_Receive_Config+0x5cc>)
 80055be:	2214      	movs	r2, #20
 80055c0:	81da      	strh	r2, [r3, #14]
 80055c2:	e012      	b.n	80055ea <Principal_Receive_Config+0x4b6>
 80055c4:	4b4e      	ldr	r3, [pc, #312]	; (8005700 <Principal_Receive_Config+0x5cc>)
 80055c6:	220a      	movs	r2, #10
 80055c8:	81da      	strh	r2, [r3, #14]
 80055ca:	e00e      	b.n	80055ea <Principal_Receive_Config+0x4b6>
 80055cc:	4b4c      	ldr	r3, [pc, #304]	; (8005700 <Principal_Receive_Config+0x5cc>)
 80055ce:	2205      	movs	r2, #5
 80055d0:	81da      	strh	r2, [r3, #14]
 80055d2:	e00a      	b.n	80055ea <Principal_Receive_Config+0x4b6>
 80055d4:	4b4a      	ldr	r3, [pc, #296]	; (8005700 <Principal_Receive_Config+0x5cc>)
 80055d6:	2203      	movs	r2, #3
 80055d8:	81da      	strh	r2, [r3, #14]
 80055da:	e006      	b.n	80055ea <Principal_Receive_Config+0x4b6>
 80055dc:	4b48      	ldr	r3, [pc, #288]	; (8005700 <Principal_Receive_Config+0x5cc>)
 80055de:	2202      	movs	r2, #2
 80055e0:	81da      	strh	r2, [r3, #14]
 80055e2:	e002      	b.n	80055ea <Principal_Receive_Config+0x4b6>
 80055e4:	4b46      	ldr	r3, [pc, #280]	; (8005700 <Principal_Receive_Config+0x5cc>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	81da      	strh	r2, [r3, #14]
 80055ea:	bf00      	nop

			retVal = Save_EEPROM(hi2c);
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7fe fd0d 	bl	800400c <Save_EEPROM>
 80055f2:	4603      	mov	r3, r0
 80055f4:	75fb      	strb	r3, [r7, #23]
			break;
 80055f6:	e21f      	b.n	8005a38 <Principal_Receive_Config+0x904>

		case 1:
			if(length != 7)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b07      	cmp	r3, #7
 80055fc:	f040 8217 	bne.w	8005a2e <Principal_Receive_Config+0x8fa>
				break;

			__BUFFER_TO_FREQ(data[1], perCAN[ANALOG_1_4]);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	3301      	adds	r3, #1
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	3b01      	subs	r3, #1
 8005608:	2b0a      	cmp	r3, #10
 800560a:	d847      	bhi.n	800569c <Principal_Receive_Config+0x568>
 800560c:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <Principal_Receive_Config+0x4e0>)
 800560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005612:	bf00      	nop
 8005614:	08005641 	.word	0x08005641
 8005618:	0800564b 	.word	0x0800564b
 800561c:	08005655 	.word	0x08005655
 8005620:	0800565d 	.word	0x0800565d
 8005624:	08005665 	.word	0x08005665
 8005628:	0800566d 	.word	0x0800566d
 800562c:	08005675 	.word	0x08005675
 8005630:	0800567d 	.word	0x0800567d
 8005634:	08005685 	.word	0x08005685
 8005638:	0800568d 	.word	0x0800568d
 800563c:	08005695 	.word	0x08005695
 8005640:	4b30      	ldr	r3, [pc, #192]	; (8005704 <Principal_Receive_Config+0x5d0>)
 8005642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	e02b      	b.n	80056a2 <Principal_Receive_Config+0x56e>
 800564a:	4b2e      	ldr	r3, [pc, #184]	; (8005704 <Principal_Receive_Config+0x5d0>)
 800564c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005650:	801a      	strh	r2, [r3, #0]
 8005652:	e026      	b.n	80056a2 <Principal_Receive_Config+0x56e>
 8005654:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <Principal_Receive_Config+0x5d0>)
 8005656:	22c8      	movs	r2, #200	; 0xc8
 8005658:	801a      	strh	r2, [r3, #0]
 800565a:	e022      	b.n	80056a2 <Principal_Receive_Config+0x56e>
 800565c:	4b29      	ldr	r3, [pc, #164]	; (8005704 <Principal_Receive_Config+0x5d0>)
 800565e:	2264      	movs	r2, #100	; 0x64
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	e01e      	b.n	80056a2 <Principal_Receive_Config+0x56e>
 8005664:	4b27      	ldr	r3, [pc, #156]	; (8005704 <Principal_Receive_Config+0x5d0>)
 8005666:	2232      	movs	r2, #50	; 0x32
 8005668:	801a      	strh	r2, [r3, #0]
 800566a:	e01a      	b.n	80056a2 <Principal_Receive_Config+0x56e>
 800566c:	4b25      	ldr	r3, [pc, #148]	; (8005704 <Principal_Receive_Config+0x5d0>)
 800566e:	2228      	movs	r2, #40	; 0x28
 8005670:	801a      	strh	r2, [r3, #0]
 8005672:	e016      	b.n	80056a2 <Principal_Receive_Config+0x56e>
 8005674:	4b23      	ldr	r3, [pc, #140]	; (8005704 <Principal_Receive_Config+0x5d0>)
 8005676:	2214      	movs	r2, #20
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	e012      	b.n	80056a2 <Principal_Receive_Config+0x56e>
 800567c:	4b21      	ldr	r3, [pc, #132]	; (8005704 <Principal_Receive_Config+0x5d0>)
 800567e:	220a      	movs	r2, #10
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e00e      	b.n	80056a2 <Principal_Receive_Config+0x56e>
 8005684:	4b1f      	ldr	r3, [pc, #124]	; (8005704 <Principal_Receive_Config+0x5d0>)
 8005686:	2205      	movs	r2, #5
 8005688:	801a      	strh	r2, [r3, #0]
 800568a:	e00a      	b.n	80056a2 <Principal_Receive_Config+0x56e>
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <Principal_Receive_Config+0x5d0>)
 800568e:	2203      	movs	r2, #3
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	e006      	b.n	80056a2 <Principal_Receive_Config+0x56e>
 8005694:	4b1b      	ldr	r3, [pc, #108]	; (8005704 <Principal_Receive_Config+0x5d0>)
 8005696:	2202      	movs	r2, #2
 8005698:	801a      	strh	r2, [r3, #0]
 800569a:	e002      	b.n	80056a2 <Principal_Receive_Config+0x56e>
 800569c:	4b19      	ldr	r3, [pc, #100]	; (8005704 <Principal_Receive_Config+0x5d0>)
 800569e:	2200      	movs	r2, #0
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perCAN[ANALOG_5_8]);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	3302      	adds	r3, #2
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	2b0a      	cmp	r3, #10
 80056ae:	d84b      	bhi.n	8005748 <Principal_Receive_Config+0x614>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <Principal_Receive_Config+0x584>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	080056ef 	.word	0x080056ef
 80056c0:	080056f9 	.word	0x080056f9
 80056c4:	08005709 	.word	0x08005709
 80056c8:	08005711 	.word	0x08005711
 80056cc:	08005719 	.word	0x08005719
 80056d0:	08005721 	.word	0x08005721
 80056d4:	08005729 	.word	0x08005729
 80056d8:	08005731 	.word	0x08005731
 80056dc:	08005739 	.word	0x08005739
 80056e0:	08005741 	.word	0x08005741
 80056e4:	4b07      	ldr	r3, [pc, #28]	; (8005704 <Principal_Receive_Config+0x5d0>)
 80056e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056ea:	805a      	strh	r2, [r3, #2]
 80056ec:	e02f      	b.n	800574e <Principal_Receive_Config+0x61a>
 80056ee:	4b05      	ldr	r3, [pc, #20]	; (8005704 <Principal_Receive_Config+0x5d0>)
 80056f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056f4:	805a      	strh	r2, [r3, #2]
 80056f6:	e02a      	b.n	800574e <Principal_Receive_Config+0x61a>
 80056f8:	4b02      	ldr	r3, [pc, #8]	; (8005704 <Principal_Receive_Config+0x5d0>)
 80056fa:	22c8      	movs	r2, #200	; 0xc8
 80056fc:	805a      	strh	r2, [r3, #2]
 80056fe:	e026      	b.n	800574e <Principal_Receive_Config+0x61a>
 8005700:	20001dec 	.word	0x20001dec
 8005704:	200018ec 	.word	0x200018ec
 8005708:	4b91      	ldr	r3, [pc, #580]	; (8005950 <Principal_Receive_Config+0x81c>)
 800570a:	2264      	movs	r2, #100	; 0x64
 800570c:	805a      	strh	r2, [r3, #2]
 800570e:	e01e      	b.n	800574e <Principal_Receive_Config+0x61a>
 8005710:	4b8f      	ldr	r3, [pc, #572]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005712:	2232      	movs	r2, #50	; 0x32
 8005714:	805a      	strh	r2, [r3, #2]
 8005716:	e01a      	b.n	800574e <Principal_Receive_Config+0x61a>
 8005718:	4b8d      	ldr	r3, [pc, #564]	; (8005950 <Principal_Receive_Config+0x81c>)
 800571a:	2228      	movs	r2, #40	; 0x28
 800571c:	805a      	strh	r2, [r3, #2]
 800571e:	e016      	b.n	800574e <Principal_Receive_Config+0x61a>
 8005720:	4b8b      	ldr	r3, [pc, #556]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005722:	2214      	movs	r2, #20
 8005724:	805a      	strh	r2, [r3, #2]
 8005726:	e012      	b.n	800574e <Principal_Receive_Config+0x61a>
 8005728:	4b89      	ldr	r3, [pc, #548]	; (8005950 <Principal_Receive_Config+0x81c>)
 800572a:	220a      	movs	r2, #10
 800572c:	805a      	strh	r2, [r3, #2]
 800572e:	e00e      	b.n	800574e <Principal_Receive_Config+0x61a>
 8005730:	4b87      	ldr	r3, [pc, #540]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005732:	2205      	movs	r2, #5
 8005734:	805a      	strh	r2, [r3, #2]
 8005736:	e00a      	b.n	800574e <Principal_Receive_Config+0x61a>
 8005738:	4b85      	ldr	r3, [pc, #532]	; (8005950 <Principal_Receive_Config+0x81c>)
 800573a:	2203      	movs	r2, #3
 800573c:	805a      	strh	r2, [r3, #2]
 800573e:	e006      	b.n	800574e <Principal_Receive_Config+0x61a>
 8005740:	4b83      	ldr	r3, [pc, #524]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005742:	2202      	movs	r2, #2
 8005744:	805a      	strh	r2, [r3, #2]
 8005746:	e002      	b.n	800574e <Principal_Receive_Config+0x61a>
 8005748:	4b81      	ldr	r3, [pc, #516]	; (8005950 <Principal_Receive_Config+0x81c>)
 800574a:	2200      	movs	r2, #0
 800574c:	805a      	strh	r2, [r3, #2]
 800574e:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perCAN[ANALOG_9_12]);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	3303      	adds	r3, #3
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	3b01      	subs	r3, #1
 8005758:	2b0a      	cmp	r3, #10
 800575a:	d847      	bhi.n	80057ec <Principal_Receive_Config+0x6b8>
 800575c:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <Principal_Receive_Config+0x630>)
 800575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005762:	bf00      	nop
 8005764:	08005791 	.word	0x08005791
 8005768:	0800579b 	.word	0x0800579b
 800576c:	080057a5 	.word	0x080057a5
 8005770:	080057ad 	.word	0x080057ad
 8005774:	080057b5 	.word	0x080057b5
 8005778:	080057bd 	.word	0x080057bd
 800577c:	080057c5 	.word	0x080057c5
 8005780:	080057cd 	.word	0x080057cd
 8005784:	080057d5 	.word	0x080057d5
 8005788:	080057dd 	.word	0x080057dd
 800578c:	080057e5 	.word	0x080057e5
 8005790:	4b6f      	ldr	r3, [pc, #444]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005796:	809a      	strh	r2, [r3, #4]
 8005798:	e02b      	b.n	80057f2 <Principal_Receive_Config+0x6be>
 800579a:	4b6d      	ldr	r3, [pc, #436]	; (8005950 <Principal_Receive_Config+0x81c>)
 800579c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80057a0:	809a      	strh	r2, [r3, #4]
 80057a2:	e026      	b.n	80057f2 <Principal_Receive_Config+0x6be>
 80057a4:	4b6a      	ldr	r3, [pc, #424]	; (8005950 <Principal_Receive_Config+0x81c>)
 80057a6:	22c8      	movs	r2, #200	; 0xc8
 80057a8:	809a      	strh	r2, [r3, #4]
 80057aa:	e022      	b.n	80057f2 <Principal_Receive_Config+0x6be>
 80057ac:	4b68      	ldr	r3, [pc, #416]	; (8005950 <Principal_Receive_Config+0x81c>)
 80057ae:	2264      	movs	r2, #100	; 0x64
 80057b0:	809a      	strh	r2, [r3, #4]
 80057b2:	e01e      	b.n	80057f2 <Principal_Receive_Config+0x6be>
 80057b4:	4b66      	ldr	r3, [pc, #408]	; (8005950 <Principal_Receive_Config+0x81c>)
 80057b6:	2232      	movs	r2, #50	; 0x32
 80057b8:	809a      	strh	r2, [r3, #4]
 80057ba:	e01a      	b.n	80057f2 <Principal_Receive_Config+0x6be>
 80057bc:	4b64      	ldr	r3, [pc, #400]	; (8005950 <Principal_Receive_Config+0x81c>)
 80057be:	2228      	movs	r2, #40	; 0x28
 80057c0:	809a      	strh	r2, [r3, #4]
 80057c2:	e016      	b.n	80057f2 <Principal_Receive_Config+0x6be>
 80057c4:	4b62      	ldr	r3, [pc, #392]	; (8005950 <Principal_Receive_Config+0x81c>)
 80057c6:	2214      	movs	r2, #20
 80057c8:	809a      	strh	r2, [r3, #4]
 80057ca:	e012      	b.n	80057f2 <Principal_Receive_Config+0x6be>
 80057cc:	4b60      	ldr	r3, [pc, #384]	; (8005950 <Principal_Receive_Config+0x81c>)
 80057ce:	220a      	movs	r2, #10
 80057d0:	809a      	strh	r2, [r3, #4]
 80057d2:	e00e      	b.n	80057f2 <Principal_Receive_Config+0x6be>
 80057d4:	4b5e      	ldr	r3, [pc, #376]	; (8005950 <Principal_Receive_Config+0x81c>)
 80057d6:	2205      	movs	r2, #5
 80057d8:	809a      	strh	r2, [r3, #4]
 80057da:	e00a      	b.n	80057f2 <Principal_Receive_Config+0x6be>
 80057dc:	4b5c      	ldr	r3, [pc, #368]	; (8005950 <Principal_Receive_Config+0x81c>)
 80057de:	2203      	movs	r2, #3
 80057e0:	809a      	strh	r2, [r3, #4]
 80057e2:	e006      	b.n	80057f2 <Principal_Receive_Config+0x6be>
 80057e4:	4b5a      	ldr	r3, [pc, #360]	; (8005950 <Principal_Receive_Config+0x81c>)
 80057e6:	2202      	movs	r2, #2
 80057e8:	809a      	strh	r2, [r3, #4]
 80057ea:	e002      	b.n	80057f2 <Principal_Receive_Config+0x6be>
 80057ec:	4b58      	ldr	r3, [pc, #352]	; (8005950 <Principal_Receive_Config+0x81c>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	809a      	strh	r2, [r3, #4]
 80057f2:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perCAN[RTC_MSG]);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	3304      	adds	r3, #4
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	2b0a      	cmp	r3, #10
 80057fe:	d847      	bhi.n	8005890 <Principal_Receive_Config+0x75c>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <Principal_Receive_Config+0x6d4>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	08005835 	.word	0x08005835
 800580c:	0800583f 	.word	0x0800583f
 8005810:	08005849 	.word	0x08005849
 8005814:	08005851 	.word	0x08005851
 8005818:	08005859 	.word	0x08005859
 800581c:	08005861 	.word	0x08005861
 8005820:	08005869 	.word	0x08005869
 8005824:	08005871 	.word	0x08005871
 8005828:	08005879 	.word	0x08005879
 800582c:	08005881 	.word	0x08005881
 8005830:	08005889 	.word	0x08005889
 8005834:	4b46      	ldr	r3, [pc, #280]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005836:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800583a:	80da      	strh	r2, [r3, #6]
 800583c:	e02b      	b.n	8005896 <Principal_Receive_Config+0x762>
 800583e:	4b44      	ldr	r3, [pc, #272]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005840:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005844:	80da      	strh	r2, [r3, #6]
 8005846:	e026      	b.n	8005896 <Principal_Receive_Config+0x762>
 8005848:	4b41      	ldr	r3, [pc, #260]	; (8005950 <Principal_Receive_Config+0x81c>)
 800584a:	22c8      	movs	r2, #200	; 0xc8
 800584c:	80da      	strh	r2, [r3, #6]
 800584e:	e022      	b.n	8005896 <Principal_Receive_Config+0x762>
 8005850:	4b3f      	ldr	r3, [pc, #252]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005852:	2264      	movs	r2, #100	; 0x64
 8005854:	80da      	strh	r2, [r3, #6]
 8005856:	e01e      	b.n	8005896 <Principal_Receive_Config+0x762>
 8005858:	4b3d      	ldr	r3, [pc, #244]	; (8005950 <Principal_Receive_Config+0x81c>)
 800585a:	2232      	movs	r2, #50	; 0x32
 800585c:	80da      	strh	r2, [r3, #6]
 800585e:	e01a      	b.n	8005896 <Principal_Receive_Config+0x762>
 8005860:	4b3b      	ldr	r3, [pc, #236]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005862:	2228      	movs	r2, #40	; 0x28
 8005864:	80da      	strh	r2, [r3, #6]
 8005866:	e016      	b.n	8005896 <Principal_Receive_Config+0x762>
 8005868:	4b39      	ldr	r3, [pc, #228]	; (8005950 <Principal_Receive_Config+0x81c>)
 800586a:	2214      	movs	r2, #20
 800586c:	80da      	strh	r2, [r3, #6]
 800586e:	e012      	b.n	8005896 <Principal_Receive_Config+0x762>
 8005870:	4b37      	ldr	r3, [pc, #220]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005872:	220a      	movs	r2, #10
 8005874:	80da      	strh	r2, [r3, #6]
 8005876:	e00e      	b.n	8005896 <Principal_Receive_Config+0x762>
 8005878:	4b35      	ldr	r3, [pc, #212]	; (8005950 <Principal_Receive_Config+0x81c>)
 800587a:	2205      	movs	r2, #5
 800587c:	80da      	strh	r2, [r3, #6]
 800587e:	e00a      	b.n	8005896 <Principal_Receive_Config+0x762>
 8005880:	4b33      	ldr	r3, [pc, #204]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005882:	2203      	movs	r2, #3
 8005884:	80da      	strh	r2, [r3, #6]
 8005886:	e006      	b.n	8005896 <Principal_Receive_Config+0x762>
 8005888:	4b31      	ldr	r3, [pc, #196]	; (8005950 <Principal_Receive_Config+0x81c>)
 800588a:	2202      	movs	r2, #2
 800588c:	80da      	strh	r2, [r3, #6]
 800588e:	e002      	b.n	8005896 <Principal_Receive_Config+0x762>
 8005890:	4b2f      	ldr	r3, [pc, #188]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005892:	2200      	movs	r2, #0
 8005894:	80da      	strh	r2, [r3, #6]
 8005896:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perCAN[VERIFY_MSG]);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	3305      	adds	r3, #5
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	3b01      	subs	r3, #1
 80058a0:	2b0a      	cmp	r3, #10
 80058a2:	d847      	bhi.n	8005934 <Principal_Receive_Config+0x800>
 80058a4:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <Principal_Receive_Config+0x778>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	080058d9 	.word	0x080058d9
 80058b0:	080058e3 	.word	0x080058e3
 80058b4:	080058ed 	.word	0x080058ed
 80058b8:	080058f5 	.word	0x080058f5
 80058bc:	080058fd 	.word	0x080058fd
 80058c0:	08005905 	.word	0x08005905
 80058c4:	0800590d 	.word	0x0800590d
 80058c8:	08005915 	.word	0x08005915
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	08005925 	.word	0x08005925
 80058d4:	0800592d 	.word	0x0800592d
 80058d8:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <Principal_Receive_Config+0x81c>)
 80058da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058de:	811a      	strh	r2, [r3, #8]
 80058e0:	e02b      	b.n	800593a <Principal_Receive_Config+0x806>
 80058e2:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <Principal_Receive_Config+0x81c>)
 80058e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80058e8:	811a      	strh	r2, [r3, #8]
 80058ea:	e026      	b.n	800593a <Principal_Receive_Config+0x806>
 80058ec:	4b18      	ldr	r3, [pc, #96]	; (8005950 <Principal_Receive_Config+0x81c>)
 80058ee:	22c8      	movs	r2, #200	; 0xc8
 80058f0:	811a      	strh	r2, [r3, #8]
 80058f2:	e022      	b.n	800593a <Principal_Receive_Config+0x806>
 80058f4:	4b16      	ldr	r3, [pc, #88]	; (8005950 <Principal_Receive_Config+0x81c>)
 80058f6:	2264      	movs	r2, #100	; 0x64
 80058f8:	811a      	strh	r2, [r3, #8]
 80058fa:	e01e      	b.n	800593a <Principal_Receive_Config+0x806>
 80058fc:	4b14      	ldr	r3, [pc, #80]	; (8005950 <Principal_Receive_Config+0x81c>)
 80058fe:	2232      	movs	r2, #50	; 0x32
 8005900:	811a      	strh	r2, [r3, #8]
 8005902:	e01a      	b.n	800593a <Principal_Receive_Config+0x806>
 8005904:	4b12      	ldr	r3, [pc, #72]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005906:	2228      	movs	r2, #40	; 0x28
 8005908:	811a      	strh	r2, [r3, #8]
 800590a:	e016      	b.n	800593a <Principal_Receive_Config+0x806>
 800590c:	4b10      	ldr	r3, [pc, #64]	; (8005950 <Principal_Receive_Config+0x81c>)
 800590e:	2214      	movs	r2, #20
 8005910:	811a      	strh	r2, [r3, #8]
 8005912:	e012      	b.n	800593a <Principal_Receive_Config+0x806>
 8005914:	4b0e      	ldr	r3, [pc, #56]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005916:	220a      	movs	r2, #10
 8005918:	811a      	strh	r2, [r3, #8]
 800591a:	e00e      	b.n	800593a <Principal_Receive_Config+0x806>
 800591c:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <Principal_Receive_Config+0x81c>)
 800591e:	2205      	movs	r2, #5
 8005920:	811a      	strh	r2, [r3, #8]
 8005922:	e00a      	b.n	800593a <Principal_Receive_Config+0x806>
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005926:	2203      	movs	r2, #3
 8005928:	811a      	strh	r2, [r3, #8]
 800592a:	e006      	b.n	800593a <Principal_Receive_Config+0x806>
 800592c:	4b08      	ldr	r3, [pc, #32]	; (8005950 <Principal_Receive_Config+0x81c>)
 800592e:	2202      	movs	r2, #2
 8005930:	811a      	strh	r2, [r3, #8]
 8005932:	e002      	b.n	800593a <Principal_Receive_Config+0x806>
 8005934:	4b06      	ldr	r3, [pc, #24]	; (8005950 <Principal_Receive_Config+0x81c>)
 8005936:	2200      	movs	r2, #0
 8005938:	811a      	strh	r2, [r3, #8]
 800593a:	bf00      	nop
			inputConfig = data[6];
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	799a      	ldrb	r2, [r3, #6]
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <Principal_Receive_Config+0x820>)
 8005942:	701a      	strb	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f7fe fb61 	bl	800400c <Save_EEPROM>
 800594a:	4603      	mov	r3, r0
 800594c:	75fb      	strb	r3, [r7, #23]
			break;
 800594e:	e073      	b.n	8005a38 <Principal_Receive_Config+0x904>
 8005950:	200018ec 	.word	0x200018ec
 8005954:	200018a2 	.word	0x200018a2

		case 2:
			if(length != 5)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b05      	cmp	r3, #5
 800595c:	d169      	bne.n	8005a32 <Principal_Receive_Config+0x8fe>
				break;

			thresholdRPM	 = data[1] << 8;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	3301      	adds	r3, #1
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	b21a      	sxth	r2, r3
 8005968:	4b36      	ldr	r3, [pc, #216]	; (8005a44 <Principal_Receive_Config+0x910>)
 800596a:	801a      	strh	r2, [r3, #0]
			thresholdRPM	|= data[2] & 0xff;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	3302      	adds	r3, #2
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	b21a      	sxth	r2, r3
 8005974:	4b33      	ldr	r3, [pc, #204]	; (8005a44 <Principal_Receive_Config+0x910>)
 8005976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800597a:	4313      	orrs	r3, r2
 800597c:	b21a      	sxth	r2, r3
 800597e:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <Principal_Receive_Config+0x910>)
 8005980:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	 = data[3] << 8;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	3303      	adds	r3, #3
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	b21a      	sxth	r2, r3
 800598c:	4b2e      	ldr	r3, [pc, #184]	; (8005a48 <Principal_Receive_Config+0x914>)
 800598e:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	|= data[4] & 0xff;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	3304      	adds	r3, #4
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	b21a      	sxth	r2, r3
 8005998:	4b2b      	ldr	r3, [pc, #172]	; (8005a48 <Principal_Receive_Config+0x914>)
 800599a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800599e:	4313      	orrs	r3, r2
 80059a0:	b21a      	sxth	r2, r3
 80059a2:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <Principal_Receive_Config+0x914>)
 80059a4:	801a      	strh	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f7fe fb30 	bl	800400c <Save_EEPROM>
 80059ac:	4603      	mov	r3, r0
 80059ae:	75fb      	strb	r3, [r7, #23]
			break;
 80059b0:	e042      	b.n	8005a38 <Principal_Receive_Config+0x904>

		case 3:
			if(length != 7)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b07      	cmp	r3, #7
 80059b6:	d13e      	bne.n	8005a36 <Principal_Receive_Config+0x902>
				break;

			rtcDate.Year	= data[1];
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	785a      	ldrb	r2, [r3, #1]
 80059bc:	4b23      	ldr	r3, [pc, #140]	; (8005a4c <Principal_Receive_Config+0x918>)
 80059be:	70da      	strb	r2, [r3, #3]
			rtcDate.Month	= data[2];
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	789a      	ldrb	r2, [r3, #2]
 80059c4:	4b21      	ldr	r3, [pc, #132]	; (8005a4c <Principal_Receive_Config+0x918>)
 80059c6:	705a      	strb	r2, [r3, #1]
			rtcDate.Date	= data[3];
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	78da      	ldrb	r2, [r3, #3]
 80059cc:	4b1f      	ldr	r3, [pc, #124]	; (8005a4c <Principal_Receive_Config+0x918>)
 80059ce:	709a      	strb	r2, [r3, #2]
			rtcTime.Hours	= data[4];
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	791a      	ldrb	r2, [r3, #4]
 80059d4:	4b1e      	ldr	r3, [pc, #120]	; (8005a50 <Principal_Receive_Config+0x91c>)
 80059d6:	701a      	strb	r2, [r3, #0]
			rtcTime.Minutes = data[5];
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	795a      	ldrb	r2, [r3, #5]
 80059dc:	4b1c      	ldr	r3, [pc, #112]	; (8005a50 <Principal_Receive_Config+0x91c>)
 80059de:	705a      	strb	r2, [r3, #1]
			rtcTime.Seconds = data[6];
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	799a      	ldrb	r2, [r3, #6]
 80059e4:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <Principal_Receive_Config+0x91c>)
 80059e6:	709a      	strb	r2, [r3, #2]

			if((HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN) == HAL_OK)
 80059e8:	2200      	movs	r2, #0
 80059ea:	4918      	ldr	r1, [pc, #96]	; (8005a4c <Principal_Receive_Config+0x918>)
 80059ec:	4819      	ldr	r0, [pc, #100]	; (8005a54 <Principal_Receive_Config+0x920>)
 80059ee:	f006 fe77 	bl	800c6e0 <HAL_RTC_SetDate>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d113      	bne.n	8005a20 <Principal_Receive_Config+0x8ec>
				&& (HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN) == HAL_OK))
 80059f8:	2200      	movs	r2, #0
 80059fa:	4915      	ldr	r1, [pc, #84]	; (8005a50 <Principal_Receive_Config+0x91c>)
 80059fc:	4815      	ldr	r0, [pc, #84]	; (8005a54 <Principal_Receive_Config+0x920>)
 80059fe:	f006 fd54 	bl	800c4aa <HAL_RTC_SetTime>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <Principal_Receive_Config+0x8ec>
			{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);
 8005a08:	f24e 325c 	movw	r2, #58204	; 0xe35c
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	4811      	ldr	r0, [pc, #68]	; (8005a54 <Principal_Receive_Config+0x920>)
 8005a10:	f006 ffec 	bl	800c9ec <HAL_RTCEx_BKUPWrite>
				flagRTC = RTC_OK;
 8005a14:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <Principal_Receive_Config+0x924>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	701a      	strb	r2, [r3, #0]
				retVal = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	75fb      	strb	r3, [r7, #23]
			}
			else
				retVal = HAL_ERROR;

			break;
 8005a1e:	e00b      	b.n	8005a38 <Principal_Receive_Config+0x904>
				retVal = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	75fb      	strb	r3, [r7, #23]
			break;
 8005a24:	e008      	b.n	8005a38 <Principal_Receive_Config+0x904>

		default:
			break;
 8005a26:	bf00      	nop
 8005a28:	e006      	b.n	8005a38 <Principal_Receive_Config+0x904>
				break;
 8005a2a:	bf00      	nop
 8005a2c:	e004      	b.n	8005a38 <Principal_Receive_Config+0x904>
				break;
 8005a2e:	bf00      	nop
 8005a30:	e002      	b.n	8005a38 <Principal_Receive_Config+0x904>
				break;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <Principal_Receive_Config+0x904>
				break;
 8005a36:	bf00      	nop
	}

	return retVal;
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	2000069a 	.word	0x2000069a
 8005a48:	20001dc8 	.word	0x20001dc8
 8005a4c:	20000814 	.word	0x20000814
 8005a50:	20001cec 	.word	0x20001cec
 8005a54:	20001b8c 	.word	0x20001b8c
 8005a58:	200018a3 	.word	0x200018a3

08005a5c <Principal_Hard_Code_Config>:

__weak void Principal_Hard_Code_Config(){
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
	perMsg[ANALOG_1_4] = MSG_FREQ_250HZ;
 8005a60:	4b1d      	ldr	r3, [pc, #116]	; (8005ad8 <Principal_Hard_Code_Config+0x7c>)
 8005a62:	2203      	movs	r2, #3
 8005a64:	801a      	strh	r2, [r3, #0]
	perMsg[ANALOG_5_8] = MSG_FREQ_500HZ;
 8005a66:	4b1c      	ldr	r3, [pc, #112]	; (8005ad8 <Principal_Hard_Code_Config+0x7c>)
 8005a68:	2202      	movs	r2, #2
 8005a6a:	805a      	strh	r2, [r3, #2]
	perMsg[ANALOG_9_12] = MSG_DISABLED;
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <Principal_Hard_Code_Config+0x7c>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	809a      	strh	r2, [r3, #4]
	perMsg[RTC_MSG] = MSG_FREQ_2HZ;
 8005a72:	4b19      	ldr	r3, [pc, #100]	; (8005ad8 <Principal_Hard_Code_Config+0x7c>)
 8005a74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005a78:	80da      	strh	r2, [r3, #6]
	perMsg[VERIFY_MSG] = MSG_FREQ_5HZ;
 8005a7a:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <Principal_Hard_Code_Config+0x7c>)
 8005a7c:	22c8      	movs	r2, #200	; 0xc8
 8005a7e:	811a      	strh	r2, [r3, #8]
	perMsg[BEACON_MSG] = MSG_FREQ_10HZ;
 8005a80:	4b15      	ldr	r3, [pc, #84]	; (8005ad8 <Principal_Hard_Code_Config+0x7c>)
 8005a82:	2264      	movs	r2, #100	; 0x64
 8005a84:	815a      	strh	r2, [r3, #10]
	perMsg[ECU_SAVE] = MSG_FREQ_100HZ;
 8005a86:	4b14      	ldr	r3, [pc, #80]	; (8005ad8 <Principal_Hard_Code_Config+0x7c>)
 8005a88:	220a      	movs	r2, #10
 8005a8a:	819a      	strh	r2, [r3, #12]
	perMsg[PDM_SAVE] = MSG_FREQ_100HZ;
 8005a8c:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <Principal_Hard_Code_Config+0x7c>)
 8005a8e:	220a      	movs	r2, #10
 8005a90:	81da      	strh	r2, [r3, #14]

	perCAN[ANALOG_1_4] = MSG_FREQ_10HZ;
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <Principal_Hard_Code_Config+0x80>)
 8005a94:	2264      	movs	r2, #100	; 0x64
 8005a96:	801a      	strh	r2, [r3, #0]
	perCAN[ANALOG_5_8] = MSG_FREQ_10HZ;
 8005a98:	4b10      	ldr	r3, [pc, #64]	; (8005adc <Principal_Hard_Code_Config+0x80>)
 8005a9a:	2264      	movs	r2, #100	; 0x64
 8005a9c:	805a      	strh	r2, [r3, #2]
	perCAN[ANALOG_9_12] = MSG_DISABLED;
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <Principal_Hard_Code_Config+0x80>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	809a      	strh	r2, [r3, #4]
	perCAN[RTC_MSG] = MSG_FREQ_2HZ;
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <Principal_Hard_Code_Config+0x80>)
 8005aa6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005aaa:	80da      	strh	r2, [r3, #6]
	perCAN[VERIFY_MSG] = MSG_FREQ_5HZ;
 8005aac:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <Principal_Hard_Code_Config+0x80>)
 8005aae:	22c8      	movs	r2, #200	; 0xc8
 8005ab0:	811a      	strh	r2, [r3, #8]
	perCAN[BEACON_MSG] = MSG_FREQ_5HZ;
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <Principal_Hard_Code_Config+0x80>)
 8005ab4:	22c8      	movs	r2, #200	; 0xc8
 8005ab6:	815a      	strh	r2, [r3, #10]

	inputConfig = INPUT_BEACON_PIN_0 | INPUT_DATALOGGER_PIN_1;
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <Principal_Hard_Code_Config+0x84>)
 8005aba:	2202      	movs	r2, #2
 8005abc:	701a      	strb	r2, [r3, #0]

	thresholdRPM = 7000;
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <Principal_Hard_Code_Config+0x88>)
 8005ac0:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005ac4:	801a      	strh	r2, [r3, #0]
	thresholdSpeed = 1;
 8005ac6:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <Principal_Hard_Code_Config+0x8c>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	801a      	strh	r2, [r3, #0]

	Save_EEPROM(&hi2c1);
 8005acc:	4807      	ldr	r0, [pc, #28]	; (8005aec <Principal_Hard_Code_Config+0x90>)
 8005ace:	f7fe fa9d 	bl	800400c <Save_EEPROM>
}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20001dec 	.word	0x20001dec
 8005adc:	200018ec 	.word	0x200018ec
 8005ae0:	200018a2 	.word	0x200018a2
 8005ae4:	2000069a 	.word	0x2000069a
 8005ae8:	20001dc8 	.word	0x20001dc8
 8005aec:	200007c0 	.word	0x200007c0

08005af0 <Principal_Datalogger_Init>:
#include "string.h"

FRESULT res[5];

FRESULT Principal_Datalogger_Init(FATFS* fatfs_struct)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	FRESULT retVal = FR_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005afc:	2180      	movs	r1, #128	; 0x80
 8005afe:	4813      	ldr	r0, [pc, #76]	; (8005b4c <Principal_Datalogger_Init+0x5c>)
 8005b00:	f003 f92a 	bl	8008d58 <HAL_GPIO_ReadPin>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d104      	bne.n	8005b14 <Principal_Datalogger_Init+0x24>
	{
		flagDatalogger = DL_NO_CARD;
 8005b0a:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <Principal_Datalogger_Init+0x60>)
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e017      	b.n	8005b44 <Principal_Datalogger_Init+0x54>
	}

	BSP_SD_Init();
 8005b14:	f00b fa3a 	bl	8010f8c <BSP_SD_Init>

	retVal = f_mount(fatfs_struct, SDPath, 1);
 8005b18:	2201      	movs	r2, #1
 8005b1a:	490e      	ldr	r1, [pc, #56]	; (8005b54 <Principal_Datalogger_Init+0x64>)
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f010 fc45 	bl	80163ac <f_mount>
 8005b22:	4603      	mov	r3, r0
 8005b24:	73fb      	strb	r3, [r7, #15]

	flagDatalogger = DL_NO_SAVE;
 8005b26:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <Principal_Datalogger_Init+0x60>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]

	if(retVal != FR_OK)
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <Principal_Datalogger_Init+0x52>
	{
		flagDatalogger = DL_ERROR;
 8005b32:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <Principal_Datalogger_Init+0x60>)
 8005b34:	2204      	movs	r2, #4
 8005b36:	701a      	strb	r2, [r3, #0]
		f_mount(0, SDPath, 0);
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4906      	ldr	r1, [pc, #24]	; (8005b54 <Principal_Datalogger_Init+0x64>)
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	f010 fc35 	bl	80163ac <f_mount>
	}

	return retVal;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40020800 	.word	0x40020800
 8005b50:	20002e80 	.word	0x20002e80
 8005b54:	20002e94 	.word	0x20002e94

08005b58 <Principal_Datalogger_Start>:

FRESULT Principal_Datalogger_Start(char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 8005b58:	b5b0      	push	{r4, r5, r7, lr}
 8005b5a:	b092      	sub	sp, #72	; 0x48
 8005b5c:	af06      	add	r7, sp, #24
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
	FRESULT retVal = FR_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005b6c:	2180      	movs	r1, #128	; 0x80
 8005b6e:	4864      	ldr	r0, [pc, #400]	; (8005d00 <Principal_Datalogger_Start+0x1a8>)
 8005b70:	f003 f8f2 	bl	8008d58 <HAL_GPIO_ReadPin>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d104      	bne.n	8005b84 <Principal_Datalogger_Start+0x2c>
	{
		flagDatalogger = DL_NO_CARD;
 8005b7a:	4b62      	ldr	r3, [pc, #392]	; (8005d04 <Principal_Datalogger_Start+0x1ac>)
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e0b9      	b.n	8005cf8 <Principal_Datalogger_Start+0x1a0>
	}

	if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8005b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b88:	485f      	ldr	r0, [pc, #380]	; (8005d08 <Principal_Datalogger_Start+0x1b0>)
 8005b8a:	f003 f8e5 	bl	8008d58 <HAL_GPIO_ReadPin>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d02f      	beq.n	8005bf4 <Principal_Datalogger_Start+0x9c>
			|| (flagRTC != RTC_OK)
 8005b94:	4b5d      	ldr	r3, [pc, #372]	; (8005d0c <Principal_Datalogger_Start+0x1b4>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d12b      	bne.n	8005bf4 <Principal_Datalogger_Start+0x9c>
			|| ((flagDatalogger != DL_BUT_PRESS)
 8005b9c:	4b59      	ldr	r3, [pc, #356]	; (8005d04 <Principal_Datalogger_Start+0x1ac>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d029      	beq.n	8005bf8 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.rpm < thresholdRPM)
 8005ba4:	4b5a      	ldr	r3, [pc, #360]	; (8005d10 <Principal_Datalogger_Start+0x1b8>)
 8005ba6:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8005baa:	4b5a      	ldr	r3, [pc, #360]	; (8005d14 <Principal_Datalogger_Start+0x1bc>)
 8005bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	da21      	bge.n	8005bf8 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.wheel_speed_fl < thresholdSpeed)
 8005bb4:	4b56      	ldr	r3, [pc, #344]	; (8005d10 <Principal_Datalogger_Start+0x1b8>)
 8005bb6:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8005bba:	4b57      	ldr	r3, [pc, #348]	; (8005d18 <Principal_Datalogger_Start+0x1c0>)
 8005bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	da19      	bge.n	8005bf8 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.wheel_speed_fr < thresholdSpeed)
 8005bc4:	4b52      	ldr	r3, [pc, #328]	; (8005d10 <Principal_Datalogger_Start+0x1b8>)
 8005bc6:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8005bca:	4b53      	ldr	r3, [pc, #332]	; (8005d18 <Principal_Datalogger_Start+0x1c0>)
 8005bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	da11      	bge.n	8005bf8 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.wheel_speed_rl < thresholdSpeed)
 8005bd4:	4b4e      	ldr	r3, [pc, #312]	; (8005d10 <Principal_Datalogger_Start+0x1b8>)
 8005bd6:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8005bda:	4b4f      	ldr	r3, [pc, #316]	; (8005d18 <Principal_Datalogger_Start+0x1c0>)
 8005bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	da09      	bge.n	8005bf8 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.wheel_speed_rr < thresholdSpeed)))
 8005be4:	4b4a      	ldr	r3, [pc, #296]	; (8005d10 <Principal_Datalogger_Start+0x1b8>)
 8005be6:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 8005bea:	4b4b      	ldr	r3, [pc, #300]	; (8005d18 <Principal_Datalogger_Start+0x1c0>)
 8005bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	da01      	bge.n	8005bf8 <Principal_Datalogger_Start+0xa0>
		return FR_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e07f      	b.n	8005cf8 <Principal_Datalogger_Start+0x1a0>

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	dataloggerBufferPosition = 0;
 8005bf8:	4b48      	ldr	r3, [pc, #288]	; (8005d1c <Principal_Datalogger_Start+0x1c4>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	801a      	strh	r2, [r3, #0]
	memset(dataloggerBuffer, '\0', DATALOGGER_BUFFER_SIZE);
 8005bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c02:	2100      	movs	r1, #0
 8005c04:	4846      	ldr	r0, [pc, #280]	; (8005d20 <Principal_Datalogger_Start+0x1c8>)
 8005c06:	f012 f81b 	bl	8017c40 <memset>

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005c0a:	f107 0314 	add.w	r3, r7, #20
 8005c0e:	2200      	movs	r2, #0
 8005c10:	4619      	mov	r1, r3
 8005c12:	4844      	ldr	r0, [pc, #272]	; (8005d24 <Principal_Datalogger_Start+0x1cc>)
 8005c14:	f006 fd06 	bl	800c624 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8005c18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4840      	ldr	r0, [pc, #256]	; (8005d24 <Principal_Datalogger_Start+0x1cc>)
 8005c22:	f006 fe04 	bl	800c82e <HAL_RTC_GetDate>

	sprintf(dir, "%02d_%02d_%02d", sDate.Year, sDate.Month, sDate.Date);
 8005c26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005c30:	4619      	mov	r1, r3
 8005c32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	493b      	ldr	r1, [pc, #236]	; (8005d28 <Principal_Datalogger_Start+0x1d0>)
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f012 f807 	bl	8017c50 <siprintf>

	sprintf(file, "%s/%02d_%02d_%02d_%02d_%02d_%02d.sd", dir, sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8005c42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c46:	461d      	mov	r5, r3
 8005c48:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005c4c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8005c50:	7d39      	ldrb	r1, [r7, #20]
 8005c52:	7d78      	ldrb	r0, [r7, #21]
 8005c54:	7dbc      	ldrb	r4, [r7, #22]
 8005c56:	9404      	str	r4, [sp, #16]
 8005c58:	9003      	str	r0, [sp, #12]
 8005c5a:	9102      	str	r1, [sp, #8]
 8005c5c:	9201      	str	r2, [sp, #4]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	462b      	mov	r3, r5
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4931      	ldr	r1, [pc, #196]	; (8005d2c <Principal_Datalogger_Start+0x1d4>)
 8005c66:	68b8      	ldr	r0, [r7, #8]
 8005c68:	f011 fff2 	bl	8017c50 <siprintf>

	retVal = f_mkdir(dir);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f011 f81f 	bl	8016cb0 <f_mkdir>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	res[0] = retVal;
 8005c78:	4a2d      	ldr	r2, [pc, #180]	; (8005d30 <Principal_Datalogger_Start+0x1d8>)
 8005c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c7e:	7013      	strb	r3, [r2, #0]

	if((retVal != FR_OK) && (retVal != FR_EXIST))
 8005c80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d009      	beq.n	8005c9c <Principal_Datalogger_Start+0x144>
 8005c88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d005      	beq.n	8005c9c <Principal_Datalogger_Start+0x144>
	{
		flagDatalogger = DL_ERROR;
 8005c90:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <Principal_Datalogger_Start+0x1ac>)
 8005c92:	2204      	movs	r2, #4
 8005c94:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c9a:	e02d      	b.n	8005cf8 <Principal_Datalogger_Start+0x1a0>
	}

	retVal = f_opendir(dir_struct, dir);
 8005c9c:	68f9      	ldr	r1, [r7, #12]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f010 ff93 	bl	8016bca <f_opendir>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	res[1] = retVal;
 8005caa:	4a21      	ldr	r2, [pc, #132]	; (8005d30 <Principal_Datalogger_Start+0x1d8>)
 8005cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cb0:	7053      	strb	r3, [r2, #1]

	if(retVal != FR_OK)
 8005cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <Principal_Datalogger_Start+0x16e>
	{
		flagDatalogger = DL_ERROR;
 8005cba:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <Principal_Datalogger_Start+0x1ac>)
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cc4:	e018      	b.n	8005cf8 <Principal_Datalogger_Start+0x1a0>
	}

	retVal = f_open(file_struct, file, FA_WRITE | FA_CREATE_ALWAYS);
 8005cc6:	220a      	movs	r2, #10
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	6838      	ldr	r0, [r7, #0]
 8005ccc:	f010 fbb2 	bl	8016434 <f_open>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	res[2] = retVal;
 8005cd6:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <Principal_Datalogger_Start+0x1d8>)
 8005cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cdc:	7093      	strb	r3, [r2, #2]

	if(retVal == FR_OK)
 8005cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <Principal_Datalogger_Start+0x196>
		flagDatalogger = DL_SAVE;
 8005ce6:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <Principal_Datalogger_Start+0x1ac>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	e002      	b.n	8005cf4 <Principal_Datalogger_Start+0x19c>
	else
		flagDatalogger = DL_ERROR;
 8005cee:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <Principal_Datalogger_Start+0x1ac>)
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	701a      	strb	r2, [r3, #0]

	return retVal;
 8005cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3730      	adds	r7, #48	; 0x30
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8005d00:	40020800 	.word	0x40020800
 8005d04:	20002e80 	.word	0x20002e80
 8005d08:	40020000 	.word	0x40020000
 8005d0c:	200018a3 	.word	0x200018a3
 8005d10:	20001c0c 	.word	0x20001c0c
 8005d14:	2000069a 	.word	0x2000069a
 8005d18:	20001dc8 	.word	0x20001dc8
 8005d1c:	200018a0 	.word	0x200018a0
 8005d20:	2000198c 	.word	0x2000198c
 8005d24:	20001b8c 	.word	0x20001b8c
 8005d28:	080184c4 	.word	0x080184c4
 8005d2c:	080184d4 	.word	0x080184d4
 8005d30:	20002e84 	.word	0x20002e84

08005d34 <Principal_Datalogger_Finish>:

FRESULT Principal_Datalogger_Finish(DIR* dir_struct, FIL* file_struct)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	FRESULT retVal = FR_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	73fb      	strb	r3, [r7, #15]

	retVal = f_close(file_struct);
 8005d42:	6838      	ldr	r0, [r7, #0]
 8005d44:	f010 ff21 	bl	8016b8a <f_close>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]
	f_closedir(dir_struct);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f010 ff97 	bl	8016c80 <f_closedir>

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005d52:	2180      	movs	r1, #128	; 0x80
 8005d54:	480c      	ldr	r0, [pc, #48]	; (8005d88 <Principal_Datalogger_Finish+0x54>)
 8005d56:	f002 ffff 	bl	8008d58 <HAL_GPIO_ReadPin>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d108      	bne.n	8005d72 <Principal_Datalogger_Finish+0x3e>
	{
		f_mount(0, SDPath, 0);
 8005d60:	2200      	movs	r2, #0
 8005d62:	490a      	ldr	r1, [pc, #40]	; (8005d8c <Principal_Datalogger_Finish+0x58>)
 8005d64:	2000      	movs	r0, #0
 8005d66:	f010 fb21 	bl	80163ac <f_mount>
		flagDatalogger = DL_NO_CARD;
 8005d6a:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <Principal_Datalogger_Finish+0x5c>)
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	e002      	b.n	8005d78 <Principal_Datalogger_Finish+0x44>
	}

	else
		flagDatalogger = DL_NO_SAVE;
 8005d72:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <Principal_Datalogger_Finish+0x5c>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]

	verifyDatalogger = 0;
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <Principal_Datalogger_Finish+0x60>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]

	return retVal;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40020800 	.word	0x40020800
 8005d8c:	20002e94 	.word	0x20002e94
 8005d90:	20002e80 	.word	0x20002e80
 8005d94:	20000705 	.word	0x20000705

08005d98 <Principal_Datalogger_Save_Buffer>:

void Principal_Datalogger_Save_Buffer(uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, FIL* file_struct)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	460b      	mov	r3, r1
 8005da6:	72fb      	strb	r3, [r7, #11]
//	uint8_t buffer[5 + data_length];
	UINT byte;
	FRESULT verify[2];

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005da8:	2180      	movs	r1, #128	; 0x80
 8005daa:	484c      	ldr	r0, [pc, #304]	; (8005edc <Principal_Datalogger_Save_Buffer+0x144>)
 8005dac:	f002 ffd4 	bl	8008d58 <HAL_GPIO_ReadPin>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	f000 808b 	beq.w	8005ece <Principal_Datalogger_Save_Buffer+0x136>
		return;

	else if(HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8005db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dbc:	4848      	ldr	r0, [pc, #288]	; (8005ee0 <Principal_Datalogger_Save_Buffer+0x148>)
 8005dbe:	f002 ffcb 	bl	8008d58 <HAL_GPIO_ReadPin>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	f000 8084 	beq.w	8005ed2 <Principal_Datalogger_Save_Buffer+0x13a>
//	buffer[1] = 'L';
//	buffer[2] = data_id & 0xff;
//	buffer[3] = data_length;
//	buffer[4] = accDatalogger[0];

	dataloggerBuffer[dataloggerBufferPosition++] = 'D';
 8005dca:	4b46      	ldr	r3, [pc, #280]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	b291      	uxth	r1, r2
 8005dd2:	4a44      	ldr	r2, [pc, #272]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005dd4:	8011      	strh	r1, [r2, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	4b43      	ldr	r3, [pc, #268]	; (8005ee8 <Principal_Datalogger_Save_Buffer+0x150>)
 8005dda:	2144      	movs	r1, #68	; 0x44
 8005ddc:	5499      	strb	r1, [r3, r2]
	dataloggerBuffer[dataloggerBufferPosition++] = 'L';
 8005dde:	4b41      	ldr	r3, [pc, #260]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	b291      	uxth	r1, r2
 8005de6:	4a3f      	ldr	r2, [pc, #252]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005de8:	8011      	strh	r1, [r2, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	4b3e      	ldr	r3, [pc, #248]	; (8005ee8 <Principal_Datalogger_Save_Buffer+0x150>)
 8005dee:	214c      	movs	r1, #76	; 0x4c
 8005df0:	5499      	strb	r1, [r3, r2]
	dataloggerBuffer[dataloggerBufferPosition++] = data_id & 0xff;
 8005df2:	4b3c      	ldr	r3, [pc, #240]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	b291      	uxth	r1, r2
 8005dfa:	4a3a      	ldr	r2, [pc, #232]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005dfc:	8011      	strh	r1, [r2, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	b2d9      	uxtb	r1, r3
 8005e04:	4b38      	ldr	r3, [pc, #224]	; (8005ee8 <Principal_Datalogger_Save_Buffer+0x150>)
 8005e06:	5499      	strb	r1, [r3, r2]
	dataloggerBuffer[dataloggerBufferPosition++] = data_length;
 8005e08:	4b36      	ldr	r3, [pc, #216]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	b291      	uxth	r1, r2
 8005e10:	4a34      	ldr	r2, [pc, #208]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005e12:	8011      	strh	r1, [r2, #0]
 8005e14:	4619      	mov	r1, r3
 8005e16:	4a34      	ldr	r2, [pc, #208]	; (8005ee8 <Principal_Datalogger_Save_Buffer+0x150>)
 8005e18:	7afb      	ldrb	r3, [r7, #11]
 8005e1a:	5453      	strb	r3, [r2, r1]
	dataloggerBuffer[dataloggerBufferPosition++] = accDatalogger[0];
 8005e1c:	4b33      	ldr	r3, [pc, #204]	; (8005eec <Principal_Datalogger_Save_Buffer+0x154>)
 8005e1e:	6819      	ldr	r1, [r3, #0]
 8005e20:	4b30      	ldr	r3, [pc, #192]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	b290      	uxth	r0, r2
 8005e28:	4a2e      	ldr	r2, [pc, #184]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005e2a:	8010      	strh	r0, [r2, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	b2c9      	uxtb	r1, r1
 8005e30:	4b2d      	ldr	r3, [pc, #180]	; (8005ee8 <Principal_Datalogger_Save_Buffer+0x150>)
 8005e32:	5499      	strb	r1, [r3, r2]

	accDatalogger[0] = 0;
 8005e34:	4b2d      	ldr	r3, [pc, #180]	; (8005eec <Principal_Datalogger_Save_Buffer+0x154>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
//
//	memcpy(dataloggerBuffer + dataloggerBufferPosition, buffer, 5 + data_length);
//
//	dataloggerBufferPosition += (5 + data_length);

	for(uint8_t i = 0; i < data_length; i++, dataloggerBufferPosition++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	77fb      	strb	r3, [r7, #31]
 8005e3e:	e010      	b.n	8005e62 <Principal_Datalogger_Save_Buffer+0xca>
		dataloggerBuffer[dataloggerBufferPosition] = data_buffer[i];
 8005e40:	7ffb      	ldrb	r3, [r7, #31]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	4413      	add	r3, r2
 8005e46:	4a27      	ldr	r2, [pc, #156]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005e48:	8812      	ldrh	r2, [r2, #0]
 8005e4a:	7819      	ldrb	r1, [r3, #0]
 8005e4c:	4b26      	ldr	r3, [pc, #152]	; (8005ee8 <Principal_Datalogger_Save_Buffer+0x150>)
 8005e4e:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < data_length; i++, dataloggerBufferPosition++)
 8005e50:	7ffb      	ldrb	r3, [r7, #31]
 8005e52:	3301      	adds	r3, #1
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	4b21      	ldr	r3, [pc, #132]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005e60:	801a      	strh	r2, [r3, #0]
 8005e62:	7ffa      	ldrb	r2, [r7, #31]
 8005e64:	7afb      	ldrb	r3, [r7, #11]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d3ea      	bcc.n	8005e40 <Principal_Datalogger_Save_Buffer+0xa8>

	if(dataloggerBufferPosition > DATALOGGER_SAVE_THR)
 8005e6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005e72:	d32f      	bcc.n	8005ed4 <Principal_Datalogger_Save_Buffer+0x13c>
	{
		verify[0] = f_write(file_struct, dataloggerBuffer, dataloggerBufferPosition, &byte);
 8005e74:	4b1b      	ldr	r3, [pc, #108]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f107 0318 	add.w	r3, r7, #24
 8005e7e:	491a      	ldr	r1, [pc, #104]	; (8005ee8 <Principal_Datalogger_Save_Buffer+0x150>)
 8005e80:	6838      	ldr	r0, [r7, #0]
 8005e82:	f010 fc70 	bl	8016766 <f_write>
 8005e86:	4603      	mov	r3, r0
 8005e88:	753b      	strb	r3, [r7, #20]
		verify[1] = f_sync(file_struct);
 8005e8a:	6838      	ldr	r0, [r7, #0]
 8005e8c:	f010 fdff 	bl	8016a8e <f_sync>
 8005e90:	4603      	mov	r3, r0
 8005e92:	757b      	strb	r3, [r7, #21]

		res[3] = verify[0];
 8005e94:	7d3a      	ldrb	r2, [r7, #20]
 8005e96:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <Principal_Datalogger_Save_Buffer+0x158>)
 8005e98:	70da      	strb	r2, [r3, #3]
		res[4] = verify[1];
 8005e9a:	7d7a      	ldrb	r2, [r7, #21]
 8005e9c:	4b14      	ldr	r3, [pc, #80]	; (8005ef0 <Principal_Datalogger_Save_Buffer+0x158>)
 8005e9e:	711a      	strb	r2, [r3, #4]

		if((verify[0] == FR_OK) && (verify[1] == FR_OK) && (dataloggerBufferPosition == byte))
 8005ea0:	7d3b      	ldrb	r3, [r7, #20]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10c      	bne.n	8005ec0 <Principal_Datalogger_Save_Buffer+0x128>
 8005ea6:	7d7b      	ldrb	r3, [r7, #21]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <Principal_Datalogger_Save_Buffer+0x128>
 8005eac:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d103      	bne.n	8005ec0 <Principal_Datalogger_Save_Buffer+0x128>
			verifyDatalogger = 1;
 8005eb8:	4b0e      	ldr	r3, [pc, #56]	; (8005ef4 <Principal_Datalogger_Save_Buffer+0x15c>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	e002      	b.n	8005ec6 <Principal_Datalogger_Save_Buffer+0x12e>
		else
			verifyDatalogger = 0;
 8005ec0:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <Principal_Datalogger_Save_Buffer+0x15c>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]

		dataloggerBufferPosition = 0;
 8005ec6:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <Principal_Datalogger_Save_Buffer+0x14c>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e002      	b.n	8005ed4 <Principal_Datalogger_Save_Buffer+0x13c>
		return;
 8005ece:	bf00      	nop
 8005ed0:	e000      	b.n	8005ed4 <Principal_Datalogger_Save_Buffer+0x13c>
		return;
 8005ed2:	bf00      	nop
	}
}
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40020800 	.word	0x40020800
 8005ee0:	40020000 	.word	0x40020000
 8005ee4:	200018a0 	.word	0x200018a0
 8005ee8:	2000198c 	.word	0x2000198c
 8005eec:	20001ce4 	.word	0x20001ce4
 8005ef0:	20002e84 	.word	0x20002e84
 8005ef4:	20000705 	.word	0x20000705

08005ef8 <Principal_Datalogger_Button>:

void Principal_Datalogger_Button(DIR* dir_struct, FIL* file_struct)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
	if(accDatalogger[1] == 0)
 8005f02:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <Principal_Datalogger_Button+0x3c>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10f      	bne.n	8005f2a <Principal_Datalogger_Button+0x32>
	{
		accDatalogger[1] = BUTTON_COOLDOWN;
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <Principal_Datalogger_Button+0x3c>)
 8005f0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005f10:	605a      	str	r2, [r3, #4]

		if(flagDatalogger == DL_NO_SAVE)
 8005f12:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <Principal_Datalogger_Button+0x40>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <Principal_Datalogger_Button+0x2a>
			flagDatalogger = DL_BUT_PRESS;
 8005f1a:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <Principal_Datalogger_Button+0x40>)
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	701a      	strb	r2, [r3, #0]

		else
			Principal_Datalogger_Finish(dir_struct, file_struct);
	}
}
 8005f20:	e003      	b.n	8005f2a <Principal_Datalogger_Button+0x32>
			Principal_Datalogger_Finish(dir_struct, file_struct);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff ff05 	bl	8005d34 <Principal_Datalogger_Finish>
}
 8005f2a:	bf00      	nop
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20001ce4 	.word	0x20001ce4
 8005f38:	20002e80 	.word	0x20002e80

08005f3c <Principal_Card_Detection>:

void Principal_Card_Detection(FATFS* fatfs_struct, DIR* dir_struct, FIL* file_struct)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
	GPIO_PinState cd_pin = HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin);
 8005f48:	2180      	movs	r1, #128	; 0x80
 8005f4a:	4811      	ldr	r0, [pc, #68]	; (8005f90 <Principal_Card_Detection+0x54>)
 8005f4c:	f002 ff04 	bl	8008d58 <HAL_GPIO_ReadPin>
 8005f50:	4603      	mov	r3, r0
 8005f52:	75fb      	strb	r3, [r7, #23]

	if((cd_pin == GPIO_PIN_SET) && ((flagDatalogger == DL_SAVE) || (flagDatalogger == DL_ERROR)))
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d10c      	bne.n	8005f74 <Principal_Card_Detection+0x38>
 8005f5a:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <Principal_Card_Detection+0x58>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d003      	beq.n	8005f6a <Principal_Card_Detection+0x2e>
 8005f62:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <Principal_Card_Detection+0x58>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d104      	bne.n	8005f74 <Principal_Card_Detection+0x38>
		Principal_Datalogger_Finish(dir_struct, file_struct);
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	68b8      	ldr	r0, [r7, #8]
 8005f6e:	f7ff fee1 	bl	8005d34 <Principal_Datalogger_Finish>

	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
		Principal_Datalogger_Init(fatfs_struct);
}
 8005f72:	e009      	b.n	8005f88 <Principal_Card_Detection+0x4c>
	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <Principal_Card_Detection+0x4c>
 8005f7a:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <Principal_Card_Detection+0x58>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d102      	bne.n	8005f88 <Principal_Card_Detection+0x4c>
		Principal_Datalogger_Init(fatfs_struct);
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fdb4 	bl	8005af0 <Principal_Datalogger_Init>
}
 8005f88:	bf00      	nop
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40020800 	.word	0x40020800
 8005f94:	20002e80 	.word	0x20002e80

08005f98 <Principal_Beacon_Detect>:

void Principal_Beacon_Detect()
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
	lapNumber++;
 8005f9c:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <Principal_Beacon_Detect+0x1c>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	4b03      	ldr	r3, [pc, #12]	; (8005fb4 <Principal_Beacon_Detect+0x1c>)
 8005fa6:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, BEACON_MSG);
 8005fa8:	2105      	movs	r1, #5
 8005faa:	4803      	ldr	r0, [pc, #12]	; (8005fb8 <Principal_Beacon_Detect+0x20>)
 8005fac:	f7fd fbe0 	bl	8003770 <Principal_Transmit_Msg>
}
 8005fb0:	bf00      	nop
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	200018f8 	.word	0x200018f8
 8005fb8:	20001da0 	.word	0x20001da0

08005fbc <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 8005fc4:	4b31      	ldr	r3, [pc, #196]	; (800608c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8005fc6:	4a32      	ldr	r2, [pc, #200]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8005fc8:	2100      	movs	r1, #0
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 fd18 	bl	8007a00 <HAL_CAN_GetRxMessage>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d14d      	bne.n	8006072 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
	{
		verifyCAN |= 2;
 8005fd6:	4b2f      	ldr	r3, [pc, #188]	; (8006094 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	f043 0302 	orr.w	r3, r3, #2
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	4b2c      	ldr	r3, [pc, #176]	; (8006094 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8005fe2:	701a      	strb	r2, [r3, #0]

		if((rxHeader.IDE == CAN_ID_STD) && ((rxHeader.StdId & CAN_DAQ_MASK) == CAN_DAQ_FILTER) && (flagDatalogger == DL_SAVE))
 8005fe4:	4b2a      	ldr	r3, [pc, #168]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d114      	bne.n	8006016 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 8005fec:	4b28      	ldr	r3, [pc, #160]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ff4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005ff8:	d10d      	bne.n	8006016 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 8005ffa:	4b27      	ldr	r3, [pc, #156]	; (8006098 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d109      	bne.n	8006016 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			Principal_Datalogger_Save_Buffer(rxHeader.StdId, rxHeader.DLC, rxData, &fileStruct);
 8006002:	4b23      	ldr	r3, [pc, #140]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	4b22      	ldr	r3, [pc, #136]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	b2d9      	uxtb	r1, r3
 800600c:	4b23      	ldr	r3, [pc, #140]	; (800609c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 800600e:	4a1f      	ldr	r2, [pc, #124]	; (800608c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8006010:	f7ff fec2 	bl	8005d98 <Principal_Datalogger_Save_Buffer>
 8006014:	e035      	b.n	8006082 <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>

		else if(((rxHeader.ExtId & 0x1FFFF000) == 0x1E35C000) && (rxHeader.IDE == CAN_ID_EXT))
 8006016:	4b1e      	ldr	r3, [pc, #120]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	4b21      	ldr	r3, [pc, #132]	; (80060a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800601c:	4013      	ands	r3, r2
 800601e:	4a21      	ldr	r2, [pc, #132]	; (80060a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d10d      	bne.n	8006040 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
 8006024:	4b1a      	ldr	r3, [pc, #104]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	2b04      	cmp	r3, #4
 800602a:	d109      	bne.n	8006040 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			PDM_CAN_Process_Data(rxHeader.ExtId, rxHeader.DLC, rxData, &pdmReadings);
 800602c:	4b18      	ldr	r3, [pc, #96]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800602e:	6858      	ldr	r0, [r3, #4]
 8006030:	4b17      	ldr	r3, [pc, #92]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	b2d9      	uxtb	r1, r3
 8006036:	4b1c      	ldr	r3, [pc, #112]	; (80060a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8006038:	4a14      	ldr	r2, [pc, #80]	; (800608c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 800603a:	f7fc f821 	bl	8002080 <PDM_CAN_Process_Data>
 800603e:	e020      	b.n	8006082 <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>

		else if((rxHeader.ExtId == CONFIG_ID) && (rxHeader.IDE == CAN_ID_EXT))
 8006040:	4b13      	ldr	r3, [pc, #76]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10b      	bne.n	8006060 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
 8006048:	4b11      	ldr	r3, [pc, #68]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b04      	cmp	r3, #4
 800604e:	d107      	bne.n	8006060 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
			Principal_Receive_Config(&hi2c1, rxData, rxHeader.DLC);
 8006050:	4b0f      	ldr	r3, [pc, #60]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	461a      	mov	r2, r3
 8006056:	490d      	ldr	r1, [pc, #52]	; (800608c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8006058:	4814      	ldr	r0, [pc, #80]	; (80060ac <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800605a:	f7ff f86b 	bl	8005134 <Principal_Receive_Config>
 800605e:	e010      	b.n	8006082 <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>

		else
			FT_CAN_ReceiveData(rxHeader.ExtId, rxHeader.DLC, rxData, &ecuData);
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8006062:	6858      	ldr	r0, [r3, #4]
 8006064:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8006066:	6919      	ldr	r1, [r3, #16]
 8006068:	4b11      	ldr	r3, [pc, #68]	; (80060b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800606a:	4a08      	ldr	r2, [pc, #32]	; (800608c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 800606c:	f7fa fd30 	bl	8000ad0 <FT_CAN_ReceiveData>
	}

	else
		verifyCAN &= 1;
}
 8006070:	e007      	b.n	8006082 <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>
		verifyCAN &= 1;
 8006072:	4b08      	ldr	r3, [pc, #32]	; (8006094 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	b2da      	uxtb	r2, r3
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800607e:	701a      	strb	r2, [r3, #0]
}
 8006080:	e7ff      	b.n	8006082 <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>
 8006082:	bf00      	nop
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	200006fc 	.word	0x200006fc
 8006090:	20000754 	.word	0x20000754
 8006094:	20000866 	.word	0x20000866
 8006098:	20002e80 	.word	0x20002e80
 800609c:	20001e54 	.word	0x20001e54
 80060a0:	1ffff000 	.word	0x1ffff000
 80060a4:	1e35c000 	.word	0x1e35c000
 80060a8:	20000828 	.word	0x20000828
 80060ac:	200007c0 	.word	0x200007c0
 80060b0:	20001c0c 	.word	0x20001c0c

080060b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXTI0_Pin)
 80060be:	88fb      	ldrh	r3, [r7, #6]
 80060c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060c4:	d111      	bne.n	80060ea <HAL_GPIO_EXTI_Callback+0x36>
	{
		if((inputConfig & 0x01) == 0)
 80060c6:	4b16      	ldr	r3, [pc, #88]	; (8006120 <HAL_GPIO_EXTI_Callback+0x6c>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_GPIO_EXTI_Callback+0x22>
			Principal_Beacon_Detect();
 80060d2:	f7ff ff61 	bl	8005f98 <Principal_Beacon_Detect>

		if((inputConfig & 0x02) == 0)
 80060d6:	4b12      	ldr	r3, [pc, #72]	; (8006120 <HAL_GPIO_EXTI_Callback+0x6c>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <HAL_GPIO_EXTI_Callback+0x36>
			Principal_Datalogger_Button(&dirStruct, &fileStruct);
 80060e2:	4910      	ldr	r1, [pc, #64]	; (8006124 <HAL_GPIO_EXTI_Callback+0x70>)
 80060e4:	4810      	ldr	r0, [pc, #64]	; (8006128 <HAL_GPIO_EXTI_Callback+0x74>)
 80060e6:	f7ff ff07 	bl	8005ef8 <Principal_Datalogger_Button>
	}

	if(GPIO_Pin == EXTI1_Pin)
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f0:	d111      	bne.n	8006116 <HAL_GPIO_EXTI_Callback+0x62>
	{
		if((inputConfig & 0x01) == 1)
 80060f2:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <HAL_GPIO_EXTI_Callback+0x6c>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_GPIO_EXTI_Callback+0x4e>
			Principal_Beacon_Detect();
 80060fe:	f7ff ff4b 	bl	8005f98 <Principal_Beacon_Detect>

		if((inputConfig & 0x02) == 2)
 8006102:	4b07      	ldr	r3, [pc, #28]	; (8006120 <HAL_GPIO_EXTI_Callback+0x6c>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_GPIO_EXTI_Callback+0x62>
			Principal_Datalogger_Button(&dirStruct, &fileStruct);
 800610e:	4905      	ldr	r1, [pc, #20]	; (8006124 <HAL_GPIO_EXTI_Callback+0x70>)
 8006110:	4805      	ldr	r0, [pc, #20]	; (8006128 <HAL_GPIO_EXTI_Callback+0x74>)
 8006112:	f7ff fef1 	bl	8005ef8 <Principal_Datalogger_Button>
	}
}
 8006116:	bf00      	nop
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	200018a2 	.word	0x200018a2
 8006124:	20001e54 	.word	0x20001e54
 8006128:	200018fc 	.word	0x200018fc

0800612c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a30      	ldr	r2, [pc, #192]	; (80061fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d158      	bne.n	80061f0 <HAL_TIM_PeriodElapsedCallback+0xc4>
	{
		accDatalogger[0]++;
 800613e:	4b30      	ldr	r3, [pc, #192]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	4a2e      	ldr	r2, [pc, #184]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8006146:	6013      	str	r3, [r2, #0]
		if(accDatalogger[1] > 0) accDatalogger[1]--;
 8006148:	4b2d      	ldr	r3, [pc, #180]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d004      	beq.n	800615a <HAL_TIM_PeriodElapsedCallback+0x2e>
 8006150:	4b2b      	ldr	r3, [pc, #172]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	3b01      	subs	r3, #1
 8006156:	4a2a      	ldr	r2, [pc, #168]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8006158:	6053      	str	r3, [r2, #4]

		accCAN[ANALOG_1_4]++;
 800615a:	4b2a      	ldr	r3, [pc, #168]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3301      	adds	r3, #1
 8006160:	4a28      	ldr	r2, [pc, #160]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006162:	6013      	str	r3, [r2, #0]
		accCAN[ANALOG_5_8]++;
 8006164:	4b27      	ldr	r3, [pc, #156]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	3301      	adds	r3, #1
 800616a:	4a26      	ldr	r2, [pc, #152]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800616c:	6053      	str	r3, [r2, #4]
		accCAN[ANALOG_9_12]++;
 800616e:	4b25      	ldr	r3, [pc, #148]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	3301      	adds	r3, #1
 8006174:	4a23      	ldr	r2, [pc, #140]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006176:	6093      	str	r3, [r2, #8]
		accCAN[RTC_MSG]++;
 8006178:	4b22      	ldr	r3, [pc, #136]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	4a21      	ldr	r2, [pc, #132]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006180:	60d3      	str	r3, [r2, #12]
		accCAN[VERIFY_MSG]++;
 8006182:	4b20      	ldr	r3, [pc, #128]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	3301      	adds	r3, #1
 8006188:	4a1e      	ldr	r2, [pc, #120]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800618a:	6113      	str	r3, [r2, #16]
		accCAN[BEACON_MSG]++;
 800618c:	4b1d      	ldr	r3, [pc, #116]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	3301      	adds	r3, #1
 8006192:	4a1c      	ldr	r2, [pc, #112]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006194:	6153      	str	r3, [r2, #20]

		accMsg[ANALOG_1_4]++;
 8006196:	4b1c      	ldr	r3, [pc, #112]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3301      	adds	r3, #1
 800619c:	4a1a      	ldr	r2, [pc, #104]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800619e:	6013      	str	r3, [r2, #0]
		accMsg[ANALOG_5_8]++;
 80061a0:	4b19      	ldr	r3, [pc, #100]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	3301      	adds	r3, #1
 80061a6:	4a18      	ldr	r2, [pc, #96]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061a8:	6053      	str	r3, [r2, #4]
		accMsg[ANALOG_9_12]++;
 80061aa:	4b17      	ldr	r3, [pc, #92]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	3301      	adds	r3, #1
 80061b0:	4a15      	ldr	r2, [pc, #84]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061b2:	6093      	str	r3, [r2, #8]
		accMsg[RTC_MSG]++;
 80061b4:	4b14      	ldr	r3, [pc, #80]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	4a13      	ldr	r2, [pc, #76]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061bc:	60d3      	str	r3, [r2, #12]
		accMsg[VERIFY_MSG]++;
 80061be:	4b12      	ldr	r3, [pc, #72]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	3301      	adds	r3, #1
 80061c4:	4a10      	ldr	r2, [pc, #64]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061c6:	6113      	str	r3, [r2, #16]
		accMsg[BEACON_MSG]++;
 80061c8:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	3301      	adds	r3, #1
 80061ce:	4a0e      	ldr	r2, [pc, #56]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061d0:	6153      	str	r3, [r2, #20]
		accMsg[ECU_SAVE]++;
 80061d2:	4b0d      	ldr	r3, [pc, #52]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	3301      	adds	r3, #1
 80061d8:	4a0b      	ldr	r2, [pc, #44]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061da:	6193      	str	r3, [r2, #24]
		accMsg[PDM_SAVE]++;
 80061dc:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	3301      	adds	r3, #1
 80061e2:	4a09      	ldr	r2, [pc, #36]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80061e4:	61d3      	str	r3, [r2, #28]

		accLap++;
 80061e6:	4b09      	ldr	r3, [pc, #36]	; (800620c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3301      	adds	r3, #1
 80061ec:	4a07      	ldr	r2, [pc, #28]	; (800620c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80061ee:	6013      	str	r3, [r2, #0]
	}
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	40001400 	.word	0x40001400
 8006200:	20001ce4 	.word	0x20001ce4
 8006204:	20000720 	.word	0x20000720
 8006208:	20001dcc 	.word	0x20001dcc
 800620c:	20001e4c 	.word	0x20001e4c

08006210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006216:	2300      	movs	r3, #0
 8006218:	607b      	str	r3, [r7, #4]
 800621a:	4b10      	ldr	r3, [pc, #64]	; (800625c <HAL_MspInit+0x4c>)
 800621c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621e:	4a0f      	ldr	r2, [pc, #60]	; (800625c <HAL_MspInit+0x4c>)
 8006220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006224:	6453      	str	r3, [r2, #68]	; 0x44
 8006226:	4b0d      	ldr	r3, [pc, #52]	; (800625c <HAL_MspInit+0x4c>)
 8006228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800622e:	607b      	str	r3, [r7, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006232:	2300      	movs	r3, #0
 8006234:	603b      	str	r3, [r7, #0]
 8006236:	4b09      	ldr	r3, [pc, #36]	; (800625c <HAL_MspInit+0x4c>)
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	4a08      	ldr	r2, [pc, #32]	; (800625c <HAL_MspInit+0x4c>)
 800623c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006240:	6413      	str	r3, [r2, #64]	; 0x40
 8006242:	4b06      	ldr	r3, [pc, #24]	; (800625c <HAL_MspInit+0x4c>)
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40023800 	.word	0x40023800

08006260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08e      	sub	sp, #56	; 0x38
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	605a      	str	r2, [r3, #4]
 8006272:	609a      	str	r2, [r3, #8]
 8006274:	60da      	str	r2, [r3, #12]
 8006276:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a79      	ldr	r2, [pc, #484]	; (8006464 <HAL_ADC_MspInit+0x204>)
 800627e:	4293      	cmp	r3, r2
 8006280:	f040 808d 	bne.w	800639e <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006284:	2300      	movs	r3, #0
 8006286:	623b      	str	r3, [r7, #32]
 8006288:	4b77      	ldr	r3, [pc, #476]	; (8006468 <HAL_ADC_MspInit+0x208>)
 800628a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628c:	4a76      	ldr	r2, [pc, #472]	; (8006468 <HAL_ADC_MspInit+0x208>)
 800628e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006292:	6453      	str	r3, [r2, #68]	; 0x44
 8006294:	4b74      	ldr	r3, [pc, #464]	; (8006468 <HAL_ADC_MspInit+0x208>)
 8006296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062a0:	2300      	movs	r3, #0
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	4b70      	ldr	r3, [pc, #448]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	4a6f      	ldr	r2, [pc, #444]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	6313      	str	r3, [r2, #48]	; 0x30
 80062b0:	4b6d      	ldr	r3, [pc, #436]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	61fb      	str	r3, [r7, #28]
 80062ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062bc:	2300      	movs	r3, #0
 80062be:	61bb      	str	r3, [r7, #24]
 80062c0:	4b69      	ldr	r3, [pc, #420]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	4a68      	ldr	r2, [pc, #416]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80062c6:	f043 0304 	orr.w	r3, r3, #4
 80062ca:	6313      	str	r3, [r2, #48]	; 0x30
 80062cc:	4b66      	ldr	r3, [pc, #408]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	4b62      	ldr	r3, [pc, #392]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	4a61      	ldr	r2, [pc, #388]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80062e2:	f043 0302 	orr.w	r3, r3, #2
 80062e6:	6313      	str	r3, [r2, #48]	; 0x30
 80062e8:	4b5f      	ldr	r3, [pc, #380]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80062ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80062f4:	23c0      	movs	r3, #192	; 0xc0
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062f8:	2303      	movs	r3, #3
 80062fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006304:	4619      	mov	r1, r3
 8006306:	4859      	ldr	r0, [pc, #356]	; (800646c <HAL_ADC_MspInit+0x20c>)
 8006308:	f002 fb92 	bl	8008a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800630c:	2330      	movs	r3, #48	; 0x30
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006310:	2303      	movs	r3, #3
 8006312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006314:	2300      	movs	r3, #0
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800631c:	4619      	mov	r1, r3
 800631e:	4854      	ldr	r0, [pc, #336]	; (8006470 <HAL_ADC_MspInit+0x210>)
 8006320:	f002 fb86 	bl	8008a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006324:	2303      	movs	r3, #3
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006328:	2303      	movs	r3, #3
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800632c:	2300      	movs	r3, #0
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006334:	4619      	mov	r1, r3
 8006336:	484f      	ldr	r0, [pc, #316]	; (8006474 <HAL_ADC_MspInit+0x214>)
 8006338:	f002 fb7a 	bl	8008a30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800633c:	4b4e      	ldr	r3, [pc, #312]	; (8006478 <HAL_ADC_MspInit+0x218>)
 800633e:	4a4f      	ldr	r2, [pc, #316]	; (800647c <HAL_ADC_MspInit+0x21c>)
 8006340:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006342:	4b4d      	ldr	r3, [pc, #308]	; (8006478 <HAL_ADC_MspInit+0x218>)
 8006344:	2200      	movs	r2, #0
 8006346:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006348:	4b4b      	ldr	r3, [pc, #300]	; (8006478 <HAL_ADC_MspInit+0x218>)
 800634a:	2200      	movs	r2, #0
 800634c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800634e:	4b4a      	ldr	r3, [pc, #296]	; (8006478 <HAL_ADC_MspInit+0x218>)
 8006350:	2200      	movs	r2, #0
 8006352:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006354:	4b48      	ldr	r3, [pc, #288]	; (8006478 <HAL_ADC_MspInit+0x218>)
 8006356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800635a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800635c:	4b46      	ldr	r3, [pc, #280]	; (8006478 <HAL_ADC_MspInit+0x218>)
 800635e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006362:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006364:	4b44      	ldr	r3, [pc, #272]	; (8006478 <HAL_ADC_MspInit+0x218>)
 8006366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800636a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800636c:	4b42      	ldr	r3, [pc, #264]	; (8006478 <HAL_ADC_MspInit+0x218>)
 800636e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006372:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006374:	4b40      	ldr	r3, [pc, #256]	; (8006478 <HAL_ADC_MspInit+0x218>)
 8006376:	2200      	movs	r2, #0
 8006378:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800637a:	4b3f      	ldr	r3, [pc, #252]	; (8006478 <HAL_ADC_MspInit+0x218>)
 800637c:	2200      	movs	r2, #0
 800637e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006380:	483d      	ldr	r0, [pc, #244]	; (8006478 <HAL_ADC_MspInit+0x218>)
 8006382:	f001 ffb7 	bl	80082f4 <HAL_DMA_Init>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800638c:	f7fb fc30 	bl	8001bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a39      	ldr	r2, [pc, #228]	; (8006478 <HAL_ADC_MspInit+0x218>)
 8006394:	639a      	str	r2, [r3, #56]	; 0x38
 8006396:	4a38      	ldr	r2, [pc, #224]	; (8006478 <HAL_ADC_MspInit+0x218>)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800639c:	e05d      	b.n	800645a <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a37      	ldr	r2, [pc, #220]	; (8006480 <HAL_ADC_MspInit+0x220>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d158      	bne.n	800645a <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80063a8:	2300      	movs	r3, #0
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	4b2e      	ldr	r3, [pc, #184]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80063ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b0:	4a2d      	ldr	r2, [pc, #180]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80063b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063b6:	6453      	str	r3, [r2, #68]	; 0x44
 80063b8:	4b2b      	ldr	r3, [pc, #172]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80063ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	4b27      	ldr	r3, [pc, #156]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	4a26      	ldr	r2, [pc, #152]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80063ce:	f043 0301 	orr.w	r3, r3, #1
 80063d2:	6313      	str	r3, [r2, #48]	; 0x30
 80063d4:	4b24      	ldr	r3, [pc, #144]	; (8006468 <HAL_ADC_MspInit+0x208>)
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80063e0:	233f      	movs	r3, #63	; 0x3f
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063e4:	2303      	movs	r3, #3
 80063e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f0:	4619      	mov	r1, r3
 80063f2:	481e      	ldr	r0, [pc, #120]	; (800646c <HAL_ADC_MspInit+0x20c>)
 80063f4:	f002 fb1c 	bl	8008a30 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80063f8:	4b22      	ldr	r3, [pc, #136]	; (8006484 <HAL_ADC_MspInit+0x224>)
 80063fa:	4a23      	ldr	r2, [pc, #140]	; (8006488 <HAL_ADC_MspInit+0x228>)
 80063fc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80063fe:	4b21      	ldr	r3, [pc, #132]	; (8006484 <HAL_ADC_MspInit+0x224>)
 8006400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006404:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006406:	4b1f      	ldr	r3, [pc, #124]	; (8006484 <HAL_ADC_MspInit+0x224>)
 8006408:	2200      	movs	r2, #0
 800640a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800640c:	4b1d      	ldr	r3, [pc, #116]	; (8006484 <HAL_ADC_MspInit+0x224>)
 800640e:	2200      	movs	r2, #0
 8006410:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006412:	4b1c      	ldr	r3, [pc, #112]	; (8006484 <HAL_ADC_MspInit+0x224>)
 8006414:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006418:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800641a:	4b1a      	ldr	r3, [pc, #104]	; (8006484 <HAL_ADC_MspInit+0x224>)
 800641c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006420:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006422:	4b18      	ldr	r3, [pc, #96]	; (8006484 <HAL_ADC_MspInit+0x224>)
 8006424:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006428:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800642a:	4b16      	ldr	r3, [pc, #88]	; (8006484 <HAL_ADC_MspInit+0x224>)
 800642c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006430:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006432:	4b14      	ldr	r3, [pc, #80]	; (8006484 <HAL_ADC_MspInit+0x224>)
 8006434:	2200      	movs	r2, #0
 8006436:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006438:	4b12      	ldr	r3, [pc, #72]	; (8006484 <HAL_ADC_MspInit+0x224>)
 800643a:	2200      	movs	r2, #0
 800643c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800643e:	4811      	ldr	r0, [pc, #68]	; (8006484 <HAL_ADC_MspInit+0x224>)
 8006440:	f001 ff58 	bl	80082f4 <HAL_DMA_Init>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 800644a:	f7fb fbd1 	bl	8001bf0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a0c      	ldr	r2, [pc, #48]	; (8006484 <HAL_ADC_MspInit+0x224>)
 8006452:	639a      	str	r2, [r3, #56]	; 0x38
 8006454:	4a0b      	ldr	r2, [pc, #44]	; (8006484 <HAL_ADC_MspInit+0x224>)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6393      	str	r3, [r2, #56]	; 0x38
}
 800645a:	bf00      	nop
 800645c:	3738      	adds	r7, #56	; 0x38
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40012000 	.word	0x40012000
 8006468:	40023800 	.word	0x40023800
 800646c:	40020000 	.word	0x40020000
 8006470:	40020800 	.word	0x40020800
 8006474:	40020400 	.word	0x40020400
 8006478:	2000192c 	.word	0x2000192c
 800647c:	40026410 	.word	0x40026410
 8006480:	40012100 	.word	0x40012100
 8006484:	20001d40 	.word	0x20001d40
 8006488:	40026440 	.word	0x40026440

0800648c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	; 0x28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006494:	f107 0314 	add.w	r3, r7, #20
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	605a      	str	r2, [r3, #4]
 800649e:	609a      	str	r2, [r3, #8]
 80064a0:	60da      	str	r2, [r3, #12]
 80064a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1d      	ldr	r2, [pc, #116]	; (8006520 <HAL_CAN_MspInit+0x94>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d134      	bne.n	8006518 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80064ae:	2300      	movs	r3, #0
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	4b1c      	ldr	r3, [pc, #112]	; (8006524 <HAL_CAN_MspInit+0x98>)
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	4a1b      	ldr	r2, [pc, #108]	; (8006524 <HAL_CAN_MspInit+0x98>)
 80064b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064bc:	6413      	str	r3, [r2, #64]	; 0x40
 80064be:	4b19      	ldr	r3, [pc, #100]	; (8006524 <HAL_CAN_MspInit+0x98>)
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c6:	613b      	str	r3, [r7, #16]
 80064c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	4b15      	ldr	r3, [pc, #84]	; (8006524 <HAL_CAN_MspInit+0x98>)
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	4a14      	ldr	r2, [pc, #80]	; (8006524 <HAL_CAN_MspInit+0x98>)
 80064d4:	f043 0302 	orr.w	r3, r3, #2
 80064d8:	6313      	str	r3, [r2, #48]	; 0x30
 80064da:	4b12      	ldr	r3, [pc, #72]	; (8006524 <HAL_CAN_MspInit+0x98>)
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80064e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ec:	2302      	movs	r3, #2
 80064ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064f4:	2303      	movs	r3, #3
 80064f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80064f8:	2309      	movs	r3, #9
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064fc:	f107 0314 	add.w	r3, r7, #20
 8006500:	4619      	mov	r1, r3
 8006502:	4809      	ldr	r0, [pc, #36]	; (8006528 <HAL_CAN_MspInit+0x9c>)
 8006504:	f002 fa94 	bl	8008a30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8006508:	2200      	movs	r2, #0
 800650a:	2102      	movs	r1, #2
 800650c:	2014      	movs	r0, #20
 800650e:	f001 feba 	bl	8008286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006512:	2014      	movs	r0, #20
 8006514:	f001 fed3 	bl	80082be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006518:	bf00      	nop
 800651a:	3728      	adds	r7, #40	; 0x28
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40006400 	.word	0x40006400
 8006524:	40023800 	.word	0x40023800
 8006528:	40020400 	.word	0x40020400

0800652c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	; 0x28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006534:	f107 0314 	add.w	r3, r7, #20
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	605a      	str	r2, [r3, #4]
 800653e:	609a      	str	r2, [r3, #8]
 8006540:	60da      	str	r2, [r3, #12]
 8006542:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a19      	ldr	r2, [pc, #100]	; (80065b0 <HAL_I2C_MspInit+0x84>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d12b      	bne.n	80065a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800654e:	2300      	movs	r3, #0
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	4b18      	ldr	r3, [pc, #96]	; (80065b4 <HAL_I2C_MspInit+0x88>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	4a17      	ldr	r2, [pc, #92]	; (80065b4 <HAL_I2C_MspInit+0x88>)
 8006558:	f043 0302 	orr.w	r3, r3, #2
 800655c:	6313      	str	r3, [r2, #48]	; 0x30
 800655e:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <HAL_I2C_MspInit+0x88>)
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	613b      	str	r3, [r7, #16]
 8006568:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800656a:	23c0      	movs	r3, #192	; 0xc0
 800656c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800656e:	2312      	movs	r3, #18
 8006570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006572:	2300      	movs	r3, #0
 8006574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006576:	2303      	movs	r3, #3
 8006578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800657a:	2304      	movs	r3, #4
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800657e:	f107 0314 	add.w	r3, r7, #20
 8006582:	4619      	mov	r1, r3
 8006584:	480c      	ldr	r0, [pc, #48]	; (80065b8 <HAL_I2C_MspInit+0x8c>)
 8006586:	f002 fa53 	bl	8008a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <HAL_I2C_MspInit+0x88>)
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	4a08      	ldr	r2, [pc, #32]	; (80065b4 <HAL_I2C_MspInit+0x88>)
 8006594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006598:	6413      	str	r3, [r2, #64]	; 0x40
 800659a:	4b06      	ldr	r3, [pc, #24]	; (80065b4 <HAL_I2C_MspInit+0x88>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80065a6:	bf00      	nop
 80065a8:	3728      	adds	r7, #40	; 0x28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40005400 	.word	0x40005400
 80065b4:	40023800 	.word	0x40023800
 80065b8:	40020400 	.word	0x40020400

080065bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b09a      	sub	sp, #104	; 0x68
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80065c4:	f107 030c 	add.w	r3, r7, #12
 80065c8:	225c      	movs	r2, #92	; 0x5c
 80065ca:	2100      	movs	r1, #0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f011 fb37 	bl	8017c40 <memset>
  if(hrtc->Instance==RTC)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a0c      	ldr	r2, [pc, #48]	; (8006608 <HAL_RTC_MspInit+0x4c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d111      	bne.n	8006600 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80065dc:	2320      	movs	r3, #32
 80065de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80065e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065e6:	f107 030c 	add.w	r3, r7, #12
 80065ea:	4618      	mov	r0, r3
 80065ec:	f004 ff52 	bl	800b494 <HAL_RCCEx_PeriphCLKConfig>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80065f6:	f7fb fafb 	bl	8001bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80065fa:	4b04      	ldr	r3, [pc, #16]	; (800660c <HAL_RTC_MspInit+0x50>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006600:	bf00      	nop
 8006602:	3768      	adds	r7, #104	; 0x68
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40002800 	.word	0x40002800
 800660c:	42470e3c 	.word	0x42470e3c

08006610 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08a      	sub	sp, #40	; 0x28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006618:	f107 0314 	add.w	r3, r7, #20
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	605a      	str	r2, [r3, #4]
 8006622:	609a      	str	r2, [r3, #8]
 8006624:	60da      	str	r2, [r3, #12]
 8006626:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a68      	ldr	r2, [pc, #416]	; (80067d0 <HAL_SD_MspInit+0x1c0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	f040 80c9 	bne.w	80067c6 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	4b66      	ldr	r3, [pc, #408]	; (80067d4 <HAL_SD_MspInit+0x1c4>)
 800663a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663c:	4a65      	ldr	r2, [pc, #404]	; (80067d4 <HAL_SD_MspInit+0x1c4>)
 800663e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006642:	6453      	str	r3, [r2, #68]	; 0x44
 8006644:	4b63      	ldr	r3, [pc, #396]	; (80067d4 <HAL_SD_MspInit+0x1c4>)
 8006646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	4b5f      	ldr	r3, [pc, #380]	; (80067d4 <HAL_SD_MspInit+0x1c4>)
 8006656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006658:	4a5e      	ldr	r2, [pc, #376]	; (80067d4 <HAL_SD_MspInit+0x1c4>)
 800665a:	f043 0304 	orr.w	r3, r3, #4
 800665e:	6313      	str	r3, [r2, #48]	; 0x30
 8006660:	4b5c      	ldr	r3, [pc, #368]	; (80067d4 <HAL_SD_MspInit+0x1c4>)
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800666c:	2300      	movs	r3, #0
 800666e:	60bb      	str	r3, [r7, #8]
 8006670:	4b58      	ldr	r3, [pc, #352]	; (80067d4 <HAL_SD_MspInit+0x1c4>)
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	4a57      	ldr	r2, [pc, #348]	; (80067d4 <HAL_SD_MspInit+0x1c4>)
 8006676:	f043 0308 	orr.w	r3, r3, #8
 800667a:	6313      	str	r3, [r2, #48]	; 0x30
 800667c:	4b55      	ldr	r3, [pc, #340]	; (80067d4 <HAL_SD_MspInit+0x1c4>)
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	60bb      	str	r3, [r7, #8]
 8006686:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006688:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800668c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800668e:	2302      	movs	r3, #2
 8006690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006696:	2303      	movs	r3, #3
 8006698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800669a:	230c      	movs	r3, #12
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800669e:	f107 0314 	add.w	r3, r7, #20
 80066a2:	4619      	mov	r1, r3
 80066a4:	484c      	ldr	r0, [pc, #304]	; (80067d8 <HAL_SD_MspInit+0x1c8>)
 80066a6:	f002 f9c3 	bl	8008a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80066aa:	2304      	movs	r3, #4
 80066ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ae:	2302      	movs	r3, #2
 80066b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066b6:	2303      	movs	r3, #3
 80066b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80066ba:	230c      	movs	r3, #12
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066be:	f107 0314 	add.w	r3, r7, #20
 80066c2:	4619      	mov	r1, r3
 80066c4:	4845      	ldr	r0, [pc, #276]	; (80067dc <HAL_SD_MspInit+0x1cc>)
 80066c6:	f002 f9b3 	bl	8008a30 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80066ca:	4b45      	ldr	r3, [pc, #276]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 80066cc:	4a45      	ldr	r2, [pc, #276]	; (80067e4 <HAL_SD_MspInit+0x1d4>)
 80066ce:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80066d0:	4b43      	ldr	r3, [pc, #268]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 80066d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80066d6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066d8:	4b41      	ldr	r3, [pc, #260]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 80066da:	2200      	movs	r2, #0
 80066dc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066de:	4b40      	ldr	r3, [pc, #256]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066e4:	4b3e      	ldr	r3, [pc, #248]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 80066e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066ea:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80066ec:	4b3c      	ldr	r3, [pc, #240]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 80066ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066f2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80066f4:	4b3a      	ldr	r3, [pc, #232]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 80066f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80066fa:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80066fc:	4b38      	ldr	r3, [pc, #224]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 80066fe:	2220      	movs	r2, #32
 8006700:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006702:	4b37      	ldr	r3, [pc, #220]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 8006704:	2200      	movs	r2, #0
 8006706:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006708:	4b35      	ldr	r3, [pc, #212]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 800670a:	2204      	movs	r2, #4
 800670c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800670e:	4b34      	ldr	r3, [pc, #208]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 8006710:	2203      	movs	r2, #3
 8006712:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006714:	4b32      	ldr	r3, [pc, #200]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 8006716:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800671a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800671c:	4b30      	ldr	r3, [pc, #192]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 800671e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006724:	482e      	ldr	r0, [pc, #184]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 8006726:	f001 fde5 	bl	80082f4 <HAL_DMA_Init>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8006730:	f7fb fa5e 	bl	8001bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a2a      	ldr	r2, [pc, #168]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 8006738:	641a      	str	r2, [r3, #64]	; 0x40
 800673a:	4a29      	ldr	r2, [pc, #164]	; (80067e0 <HAL_SD_MspInit+0x1d0>)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006740:	4b29      	ldr	r3, [pc, #164]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 8006742:	4a2a      	ldr	r2, [pc, #168]	; (80067ec <HAL_SD_MspInit+0x1dc>)
 8006744:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006746:	4b28      	ldr	r3, [pc, #160]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 8006748:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800674c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800674e:	4b26      	ldr	r3, [pc, #152]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 8006750:	2240      	movs	r2, #64	; 0x40
 8006752:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006754:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 8006756:	2200      	movs	r2, #0
 8006758:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800675a:	4b23      	ldr	r3, [pc, #140]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 800675c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006760:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006762:	4b21      	ldr	r3, [pc, #132]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 8006764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006768:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800676a:	4b1f      	ldr	r3, [pc, #124]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 800676c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006770:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006772:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 8006774:	2220      	movs	r2, #32
 8006776:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006778:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 800677a:	2200      	movs	r2, #0
 800677c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800677e:	4b1a      	ldr	r3, [pc, #104]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 8006780:	2204      	movs	r2, #4
 8006782:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006784:	4b18      	ldr	r3, [pc, #96]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 8006786:	2203      	movs	r2, #3
 8006788:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800678a:	4b17      	ldr	r3, [pc, #92]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 800678c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006790:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 8006794:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006798:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800679a:	4813      	ldr	r0, [pc, #76]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 800679c:	f001 fdaa 	bl	80082f4 <HAL_DMA_Init>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80067a6:	f7fb fa23 	bl	8001bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a0e      	ldr	r2, [pc, #56]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 80067ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80067b0:	4a0d      	ldr	r2, [pc, #52]	; (80067e8 <HAL_SD_MspInit+0x1d8>)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80067b6:	2200      	movs	r2, #0
 80067b8:	2100      	movs	r1, #0
 80067ba:	2031      	movs	r0, #49	; 0x31
 80067bc:	f001 fd63 	bl	8008286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80067c0:	2031      	movs	r0, #49	; 0x31
 80067c2:	f001 fd7c 	bl	80082be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80067c6:	bf00      	nop
 80067c8:	3728      	adds	r7, #40	; 0x28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	40012c00 	.word	0x40012c00
 80067d4:	40023800 	.word	0x40023800
 80067d8:	40020800 	.word	0x40020800
 80067dc:	40020c00 	.word	0x40020c00
 80067e0:	2000069c 	.word	0x2000069c
 80067e4:	40026458 	.word	0x40026458
 80067e8:	20001bac 	.word	0x20001bac
 80067ec:	400264a0 	.word	0x400264a0

080067f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a0e      	ldr	r2, [pc, #56]	; (8006838 <HAL_TIM_Base_MspInit+0x48>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d115      	bne.n	800682e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	4b0d      	ldr	r3, [pc, #52]	; (800683c <HAL_TIM_Base_MspInit+0x4c>)
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	4a0c      	ldr	r2, [pc, #48]	; (800683c <HAL_TIM_Base_MspInit+0x4c>)
 800680c:	f043 0320 	orr.w	r3, r3, #32
 8006810:	6413      	str	r3, [r2, #64]	; 0x40
 8006812:	4b0a      	ldr	r3, [pc, #40]	; (800683c <HAL_TIM_Base_MspInit+0x4c>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800681e:	2200      	movs	r2, #0
 8006820:	2100      	movs	r1, #0
 8006822:	2037      	movs	r0, #55	; 0x37
 8006824:	f001 fd2f 	bl	8008286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006828:	2037      	movs	r0, #55	; 0x37
 800682a:	f001 fd48 	bl	80082be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40001400 	.word	0x40001400
 800683c:	40023800 	.word	0x40023800

08006840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006844:	e7fe      	b.n	8006844 <NMI_Handler+0x4>

08006846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006846:	b480      	push	{r7}
 8006848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800684a:	e7fe      	b.n	800684a <HardFault_Handler+0x4>

0800684c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006850:	e7fe      	b.n	8006850 <MemManage_Handler+0x4>

08006852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006852:	b480      	push	{r7}
 8006854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006856:	e7fe      	b.n	8006856 <BusFault_Handler+0x4>

08006858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800685c:	e7fe      	b.n	800685c <UsageFault_Handler+0x4>

0800685e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800685e:	b480      	push	{r7}
 8006860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006862:	bf00      	nop
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800687a:	b480      	push	{r7}
 800687c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800687e:	bf00      	nop
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800688c:	f000 f922 	bl	8006ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006890:	bf00      	nop
 8006892:	bd80      	pop	{r7, pc}

08006894 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006898:	4802      	ldr	r0, [pc, #8]	; (80068a4 <CAN1_RX0_IRQHandler+0x10>)
 800689a:	f001 f9e9 	bl	8007c70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800689e:	bf00      	nop
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20001da0 	.word	0x20001da0

080068a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 80068ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80068b0:	f002 fa9e 	bl	8008df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 80068b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80068b8:	f002 fa9a 	bl	8008df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80068bc:	bf00      	nop
 80068be:	bd80      	pop	{r7, pc}

080068c0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80068c4:	4802      	ldr	r0, [pc, #8]	; (80068d0 <SDIO_IRQHandler+0x10>)
 80068c6:	f006 fe97 	bl	800d5f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80068ca:	bf00      	nop
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20001c60 	.word	0x20001c60

080068d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80068d8:	4802      	ldr	r0, [pc, #8]	; (80068e4 <TIM7_IRQHandler+0x10>)
 80068da:	f007 fff5 	bl	800e8c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80068de:	bf00      	nop
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20001e04 	.word	0x20001e04

080068e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80068ec:	4802      	ldr	r0, [pc, #8]	; (80068f8 <DMA2_Stream0_IRQHandler+0x10>)
 80068ee:	f001 fe29 	bl	8008544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80068f2:	bf00      	nop
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	2000192c 	.word	0x2000192c

080068fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006900:	4802      	ldr	r0, [pc, #8]	; (800690c <DMA2_Stream2_IRQHandler+0x10>)
 8006902:	f001 fe1f 	bl	8008544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006906:	bf00      	nop
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20001d40 	.word	0x20001d40

08006910 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006914:	4802      	ldr	r0, [pc, #8]	; (8006920 <DMA2_Stream3_IRQHandler+0x10>)
 8006916:	f001 fe15 	bl	8008544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800691a:	bf00      	nop
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	2000069c 	.word	0x2000069c

08006924 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006928:	4802      	ldr	r0, [pc, #8]	; (8006934 <OTG_FS_IRQHandler+0x10>)
 800692a:	f003 fbb7 	bl	800a09c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800692e:	bf00      	nop
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	200053cc 	.word	0x200053cc

08006938 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800693c:	4802      	ldr	r0, [pc, #8]	; (8006948 <DMA2_Stream6_IRQHandler+0x10>)
 800693e:	f001 fe01 	bl	8008544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006942:	bf00      	nop
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20001bac 	.word	0x20001bac

0800694c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006954:	4a14      	ldr	r2, [pc, #80]	; (80069a8 <_sbrk+0x5c>)
 8006956:	4b15      	ldr	r3, [pc, #84]	; (80069ac <_sbrk+0x60>)
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006960:	4b13      	ldr	r3, [pc, #76]	; (80069b0 <_sbrk+0x64>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d102      	bne.n	800696e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006968:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <_sbrk+0x64>)
 800696a:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <_sbrk+0x68>)
 800696c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800696e:	4b10      	ldr	r3, [pc, #64]	; (80069b0 <_sbrk+0x64>)
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4413      	add	r3, r2
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	429a      	cmp	r2, r3
 800697a:	d207      	bcs.n	800698c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800697c:	f011 f936 	bl	8017bec <__errno>
 8006980:	4603      	mov	r3, r0
 8006982:	220c      	movs	r2, #12
 8006984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006986:	f04f 33ff 	mov.w	r3, #4294967295
 800698a:	e009      	b.n	80069a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800698c:	4b08      	ldr	r3, [pc, #32]	; (80069b0 <_sbrk+0x64>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006992:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <_sbrk+0x64>)
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4413      	add	r3, r2
 800699a:	4a05      	ldr	r2, [pc, #20]	; (80069b0 <_sbrk+0x64>)
 800699c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800699e:	68fb      	ldr	r3, [r7, #12]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20020000 	.word	0x20020000
 80069ac:	00006000 	.word	0x00006000
 80069b0:	200001f4 	.word	0x200001f4
 80069b4:	200057e8 	.word	0x200057e8

080069b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <SystemInit+0x20>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c2:	4a05      	ldr	r2, [pc, #20]	; (80069d8 <SystemInit+0x20>)
 80069c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80069cc:	bf00      	nop
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	e000ed00 	.word	0xe000ed00

080069dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80069dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80069e0:	480d      	ldr	r0, [pc, #52]	; (8006a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80069e2:	490e      	ldr	r1, [pc, #56]	; (8006a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80069e4:	4a0e      	ldr	r2, [pc, #56]	; (8006a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80069e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069e8:	e002      	b.n	80069f0 <LoopCopyDataInit>

080069ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069ee:	3304      	adds	r3, #4

080069f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069f4:	d3f9      	bcc.n	80069ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069f6:	4a0b      	ldr	r2, [pc, #44]	; (8006a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80069f8:	4c0b      	ldr	r4, [pc, #44]	; (8006a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80069fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069fc:	e001      	b.n	8006a02 <LoopFillZerobss>

080069fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a00:	3204      	adds	r2, #4

08006a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a04:	d3fb      	bcc.n	80069fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006a06:	f7ff ffd7 	bl	80069b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a0a:	f011 f8f5 	bl	8017bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a0e:	f7fa fc27 	bl	8001260 <main>
  bx  lr    
 8006a12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a1c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006a20:	08018a60 	.word	0x08018a60
  ldr r2, =_sbss
 8006a24:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006a28:	200057e4 	.word	0x200057e4

08006a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a2c:	e7fe      	b.n	8006a2c <ADC_IRQHandler>
	...

08006a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a34:	4b0e      	ldr	r3, [pc, #56]	; (8006a70 <HAL_Init+0x40>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a0d      	ldr	r2, [pc, #52]	; (8006a70 <HAL_Init+0x40>)
 8006a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006a40:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <HAL_Init+0x40>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a0a      	ldr	r2, [pc, #40]	; (8006a70 <HAL_Init+0x40>)
 8006a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a4c:	4b08      	ldr	r3, [pc, #32]	; (8006a70 <HAL_Init+0x40>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a07      	ldr	r2, [pc, #28]	; (8006a70 <HAL_Init+0x40>)
 8006a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a58:	2003      	movs	r0, #3
 8006a5a:	f001 fc09 	bl	8008270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a5e:	200f      	movs	r0, #15
 8006a60:	f000 f808 	bl	8006a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a64:	f7ff fbd4 	bl	8006210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40023c00 	.word	0x40023c00

08006a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006a7c:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <HAL_InitTick+0x54>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	4b12      	ldr	r3, [pc, #72]	; (8006acc <HAL_InitTick+0x58>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	4619      	mov	r1, r3
 8006a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 fc21 	bl	80082da <HAL_SYSTICK_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e00e      	b.n	8006ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b0f      	cmp	r3, #15
 8006aa6:	d80a      	bhi.n	8006abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	f001 fbe9 	bl	8008286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ab4:	4a06      	ldr	r2, [pc, #24]	; (8006ad0 <HAL_InitTick+0x5c>)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	e000      	b.n	8006ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20000000 	.word	0x20000000
 8006acc:	20000008 	.word	0x20000008
 8006ad0:	20000004 	.word	0x20000004

08006ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ad8:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <HAL_IncTick+0x20>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <HAL_IncTick+0x24>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	4a04      	ldr	r2, [pc, #16]	; (8006af8 <HAL_IncTick+0x24>)
 8006ae6:	6013      	str	r3, [r2, #0]
}
 8006ae8:	bf00      	nop
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000008 	.word	0x20000008
 8006af8:	20002e8c 	.word	0x20002e8c

08006afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  return uwTick;
 8006b00:	4b03      	ldr	r3, [pc, #12]	; (8006b10 <HAL_GetTick+0x14>)
 8006b02:	681b      	ldr	r3, [r3, #0]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	20002e8c 	.word	0x20002e8c

08006b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b1c:	f7ff ffee 	bl	8006afc <HAL_GetTick>
 8006b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d005      	beq.n	8006b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <HAL_Delay+0x44>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006b3a:	bf00      	nop
 8006b3c:	f7ff ffde 	bl	8006afc <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d8f7      	bhi.n	8006b3c <HAL_Delay+0x28>
  {
  }
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000008 	.word	0x20000008

08006b5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e033      	b.n	8006bda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7ff fb70 	bl	8006260 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	f003 0310 	and.w	r3, r3, #16
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d118      	bne.n	8006bcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ba2:	f023 0302 	bic.w	r3, r3, #2
 8006ba6:	f043 0202 	orr.w	r2, r3, #2
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa78 	bl	80070a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f023 0303 	bic.w	r3, r3, #3
 8006bc2:	f043 0201 	orr.w	r2, r3, #1
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8006bca:	e001      	b.n	8006bd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <HAL_ADC_Start_DMA+0x1e>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e0e9      	b.n	8006dd6 <HAL_ADC_Start_DMA+0x1f2>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d018      	beq.n	8006c4a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006c28:	4b6d      	ldr	r3, [pc, #436]	; (8006de0 <HAL_ADC_Start_DMA+0x1fc>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a6d      	ldr	r2, [pc, #436]	; (8006de4 <HAL_ADC_Start_DMA+0x200>)
 8006c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c32:	0c9a      	lsrs	r2, r3, #18
 8006c34:	4613      	mov	r3, r2
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	4413      	add	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006c3c:	e002      	b.n	8006c44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f9      	bne.n	8006c3e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c58:	d107      	bne.n	8006c6a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c68:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	f040 80a1 	bne.w	8006dbc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d007      	beq.n	8006cac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006ca4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb8:	d106      	bne.n	8006cc8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	f023 0206 	bic.w	r2, r3, #6
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8006cc6:	e002      	b.n	8006cce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006cd6:	4b44      	ldr	r3, [pc, #272]	; (8006de8 <HAL_ADC_Start_DMA+0x204>)
 8006cd8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	4a43      	ldr	r2, [pc, #268]	; (8006dec <HAL_ADC_Start_DMA+0x208>)
 8006ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	4a42      	ldr	r2, [pc, #264]	; (8006df0 <HAL_ADC_Start_DMA+0x20c>)
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	4a41      	ldr	r2, [pc, #260]	; (8006df4 <HAL_ADC_Start_DMA+0x210>)
 8006cf0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006cfa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006d0a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d1a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	334c      	adds	r3, #76	; 0x4c
 8006d26:	4619      	mov	r1, r3
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f001 fb90 	bl	8008450 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d12a      	bne.n	8006d92 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a2d      	ldr	r2, [pc, #180]	; (8006df8 <HAL_ADC_Start_DMA+0x214>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d015      	beq.n	8006d72 <HAL_ADC_Start_DMA+0x18e>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a2c      	ldr	r2, [pc, #176]	; (8006dfc <HAL_ADC_Start_DMA+0x218>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d105      	bne.n	8006d5c <HAL_ADC_Start_DMA+0x178>
 8006d50:	4b25      	ldr	r3, [pc, #148]	; (8006de8 <HAL_ADC_Start_DMA+0x204>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a27      	ldr	r2, [pc, #156]	; (8006e00 <HAL_ADC_Start_DMA+0x21c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d136      	bne.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
 8006d66:	4b20      	ldr	r3, [pc, #128]	; (8006de8 <HAL_ADC_Start_DMA+0x204>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f003 0310 	and.w	r3, r3, #16
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d130      	bne.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d129      	bne.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d8e:	609a      	str	r2, [r3, #8]
 8006d90:	e020      	b.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <HAL_ADC_Start_DMA+0x214>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d11b      	bne.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d114      	bne.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006db8:	609a      	str	r2, [r3, #8]
 8006dba:	e00b      	b.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	f043 0210 	orr.w	r2, r3, #16
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dcc:	f043 0201 	orr.w	r2, r3, #1
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000000 	.word	0x20000000
 8006de4:	431bde83 	.word	0x431bde83
 8006de8:	40012300 	.word	0x40012300
 8006dec:	0800729d 	.word	0x0800729d
 8006df0:	08007357 	.word	0x08007357
 8006df4:	08007373 	.word	0x08007373
 8006df8:	40012000 	.word	0x40012000
 8006dfc:	40012100 	.word	0x40012100
 8006e00:	40012200 	.word	0x40012200

08006e04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <HAL_ADC_ConfigChannel+0x1c>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e113      	b.n	8007084 <HAL_ADC_ConfigChannel+0x244>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b09      	cmp	r3, #9
 8006e6a:	d925      	bls.n	8006eb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68d9      	ldr	r1, [r3, #12]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	4413      	add	r3, r2
 8006e80:	3b1e      	subs	r3, #30
 8006e82:	2207      	movs	r2, #7
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	43da      	mvns	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	400a      	ands	r2, r1
 8006e90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68d9      	ldr	r1, [r3, #12]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	4403      	add	r3, r0
 8006eaa:	3b1e      	subs	r3, #30
 8006eac:	409a      	lsls	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	60da      	str	r2, [r3, #12]
 8006eb6:	e022      	b.n	8006efe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6919      	ldr	r1, [r3, #16]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	4413      	add	r3, r2
 8006ecc:	2207      	movs	r2, #7
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	43da      	mvns	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	400a      	ands	r2, r1
 8006eda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6919      	ldr	r1, [r3, #16]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	4618      	mov	r0, r3
 8006eee:	4603      	mov	r3, r0
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	4403      	add	r3, r0
 8006ef4:	409a      	lsls	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b06      	cmp	r3, #6
 8006f04:	d824      	bhi.n	8006f50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	3b05      	subs	r3, #5
 8006f18:	221f      	movs	r2, #31
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	43da      	mvns	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	400a      	ands	r2, r1
 8006f26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	4618      	mov	r0, r3
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	3b05      	subs	r3, #5
 8006f42:	fa00 f203 	lsl.w	r2, r0, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8006f4e:	e04c      	b.n	8006fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2b0c      	cmp	r3, #12
 8006f56:	d824      	bhi.n	8006fa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	3b23      	subs	r3, #35	; 0x23
 8006f6a:	221f      	movs	r2, #31
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	43da      	mvns	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	400a      	ands	r2, r1
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	4618      	mov	r0, r3
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	3b23      	subs	r3, #35	; 0x23
 8006f94:	fa00 f203 	lsl.w	r2, r0, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8006fa0:	e023      	b.n	8006fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	3b41      	subs	r3, #65	; 0x41
 8006fb4:	221f      	movs	r2, #31
 8006fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fba:	43da      	mvns	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	400a      	ands	r2, r1
 8006fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	3b41      	subs	r3, #65	; 0x41
 8006fde:	fa00 f203 	lsl.w	r2, r0, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006fea:	4b29      	ldr	r3, [pc, #164]	; (8007090 <HAL_ADC_ConfigChannel+0x250>)
 8006fec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a28      	ldr	r2, [pc, #160]	; (8007094 <HAL_ADC_ConfigChannel+0x254>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d10f      	bne.n	8007018 <HAL_ADC_ConfigChannel+0x1d8>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b12      	cmp	r3, #18
 8006ffe:	d10b      	bne.n	8007018 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <HAL_ADC_ConfigChannel+0x254>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d12b      	bne.n	800707a <HAL_ADC_ConfigChannel+0x23a>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1c      	ldr	r2, [pc, #112]	; (8007098 <HAL_ADC_ConfigChannel+0x258>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <HAL_ADC_ConfigChannel+0x1f4>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b11      	cmp	r3, #17
 8007032:	d122      	bne.n	800707a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a11      	ldr	r2, [pc, #68]	; (8007098 <HAL_ADC_ConfigChannel+0x258>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d111      	bne.n	800707a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007056:	4b11      	ldr	r3, [pc, #68]	; (800709c <HAL_ADC_ConfigChannel+0x25c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a11      	ldr	r2, [pc, #68]	; (80070a0 <HAL_ADC_ConfigChannel+0x260>)
 800705c:	fba2 2303 	umull	r2, r3, r2, r3
 8007060:	0c9a      	lsrs	r2, r3, #18
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800706c:	e002      	b.n	8007074 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	3b01      	subs	r3, #1
 8007072:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f9      	bne.n	800706e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	40012300 	.word	0x40012300
 8007094:	40012000 	.word	0x40012000
 8007098:	10000012 	.word	0x10000012
 800709c:	20000000 	.word	0x20000000
 80070a0:	431bde83 	.word	0x431bde83

080070a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80070ac:	4b79      	ldr	r3, [pc, #484]	; (8007294 <ADC_Init+0x1f0>)
 80070ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	431a      	orrs	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6859      	ldr	r1, [r3, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	021a      	lsls	r2, r3, #8
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80070fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6859      	ldr	r1, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800711e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6899      	ldr	r1, [r3, #8]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	4a58      	ldr	r2, [pc, #352]	; (8007298 <ADC_Init+0x1f4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d022      	beq.n	8007182 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689a      	ldr	r2, [r3, #8]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800714a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6899      	ldr	r1, [r3, #8]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800716c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6899      	ldr	r1, [r3, #8]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	609a      	str	r2, [r3, #8]
 8007180:	e00f      	b.n	80071a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80071a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0202 	bic.w	r2, r2, #2
 80071b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6899      	ldr	r1, [r3, #8]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	7e1b      	ldrb	r3, [r3, #24]
 80071bc:	005a      	lsls	r2, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d01b      	beq.n	8007208 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80071ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6859      	ldr	r1, [r3, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	3b01      	subs	r3, #1
 80071fc:	035a      	lsls	r2, r3, #13
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
 8007206:	e007      	b.n	8007218 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007216:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007226:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	3b01      	subs	r3, #1
 8007234:	051a      	lsls	r2, r3, #20
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800724c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6899      	ldr	r1, [r3, #8]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800725a:	025a      	lsls	r2, r3, #9
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007272:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6899      	ldr	r1, [r3, #8]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	029a      	lsls	r2, r3, #10
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	609a      	str	r2, [r3, #8]
}
 8007288:	bf00      	nop
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	40012300 	.word	0x40012300
 8007298:	0f000001 	.word	0x0f000001

0800729c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d13c      	bne.n	8007330 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d12b      	bne.n	8007328 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d127      	bne.n	8007328 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d006      	beq.n	80072f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d119      	bne.n	8007328 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0220 	bic.w	r2, r2, #32
 8007302:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	f043 0201 	orr.w	r2, r3, #1
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff fd6b 	bl	8006e04 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800732e:	e00e      	b.n	800734e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	f003 0310 	and.w	r3, r3, #16
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff fd75 	bl	8006e2c <HAL_ADC_ErrorCallback>
}
 8007342:	e004      	b.n	800734e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	4798      	blx	r3
}
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007362:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f7ff fd57 	bl	8006e18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2240      	movs	r2, #64	; 0x40
 8007384:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	f043 0204 	orr.w	r2, r3, #4
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f7ff fd4a 	bl	8006e2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007398:	bf00      	nop
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e0ed      	b.n	800758e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d102      	bne.n	80073c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff f864 	bl	800648c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0201 	orr.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073d4:	f7ff fb92 	bl	8006afc <HAL_GetTick>
 80073d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80073da:	e012      	b.n	8007402 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80073dc:	f7ff fb8e 	bl	8006afc <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	2b0a      	cmp	r3, #10
 80073e8:	d90b      	bls.n	8007402 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2205      	movs	r2, #5
 80073fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e0c5      	b.n	800758e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0e5      	beq.n	80073dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0202 	bic.w	r2, r2, #2
 800741e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007420:	f7ff fb6c 	bl	8006afc <HAL_GetTick>
 8007424:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007426:	e012      	b.n	800744e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007428:	f7ff fb68 	bl	8006afc <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b0a      	cmp	r3, #10
 8007434:	d90b      	bls.n	800744e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2205      	movs	r2, #5
 8007446:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e09f      	b.n	800758e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e5      	bne.n	8007428 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	7e1b      	ldrb	r3, [r3, #24]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d108      	bne.n	8007476 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	e007      	b.n	8007486 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007484:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	7e5b      	ldrb	r3, [r3, #25]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d108      	bne.n	80074a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	e007      	b.n	80074b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	7e9b      	ldrb	r3, [r3, #26]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d108      	bne.n	80074ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0220 	orr.w	r2, r2, #32
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	e007      	b.n	80074da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0220 	bic.w	r2, r2, #32
 80074d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7edb      	ldrb	r3, [r3, #27]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d108      	bne.n	80074f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0210 	bic.w	r2, r2, #16
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e007      	b.n	8007504 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f042 0210 	orr.w	r2, r2, #16
 8007502:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	7f1b      	ldrb	r3, [r3, #28]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d108      	bne.n	800751e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0208 	orr.w	r2, r2, #8
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	e007      	b.n	800752e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0208 	bic.w	r2, r2, #8
 800752c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	7f5b      	ldrb	r3, [r3, #29]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d108      	bne.n	8007548 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0204 	orr.w	r2, r2, #4
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	e007      	b.n	8007558 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0204 	bic.w	r2, r2, #4
 8007556:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	ea42 0103 	orr.w	r1, r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	1e5a      	subs	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80075b0:	7cfb      	ldrb	r3, [r7, #19]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d003      	beq.n	80075be <HAL_CAN_ConfigFilter+0x26>
 80075b6:	7cfb      	ldrb	r3, [r7, #19]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	f040 80be 	bne.w	800773a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80075be:	4b65      	ldr	r3, [pc, #404]	; (8007754 <HAL_CAN_ConfigFilter+0x1bc>)
 80075c0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075c8:	f043 0201 	orr.w	r2, r3, #1
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	431a      	orrs	r2, r3
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f003 031f 	and.w	r3, r3, #31
 80075fe:	2201      	movs	r2, #1
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	43db      	mvns	r3, r3
 8007610:	401a      	ands	r2, r3
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d123      	bne.n	8007668 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	43db      	mvns	r3, r3
 800762a:	401a      	ands	r2, r3
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007642:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	3248      	adds	r2, #72	; 0x48
 8007648:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800765c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800765e:	6979      	ldr	r1, [r7, #20]
 8007660:	3348      	adds	r3, #72	; 0x48
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	440b      	add	r3, r1
 8007666:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d122      	bne.n	80076b6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	431a      	orrs	r2, r3
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007690:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	3248      	adds	r2, #72	; 0x48
 8007696:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80076aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80076ac:	6979      	ldr	r1, [r7, #20]
 80076ae:	3348      	adds	r3, #72	; 0x48
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	440b      	add	r3, r1
 80076b4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	43db      	mvns	r3, r3
 80076c8:	401a      	ands	r2, r3
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80076d0:	e007      	b.n	80076e2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	431a      	orrs	r2, r3
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d109      	bne.n	80076fe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	43db      	mvns	r3, r3
 80076f4:	401a      	ands	r2, r3
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80076fc:	e007      	b.n	800770e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	431a      	orrs	r2, r3
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d107      	bne.n	8007726 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	431a      	orrs	r2, r3
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800772c:	f023 0201 	bic.w	r2, r3, #1
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	e006      	b.n	8007748 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
  }
}
 8007748:	4618      	mov	r0, r3
 800774a:	371c      	adds	r7, #28
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	40006400 	.word	0x40006400

08007758 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b01      	cmp	r3, #1
 800776a:	d12e      	bne.n	80077ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007784:	f7ff f9ba 	bl	8006afc <HAL_GetTick>
 8007788:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800778a:	e012      	b.n	80077b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800778c:	f7ff f9b6 	bl	8006afc <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b0a      	cmp	r3, #10
 8007798:	d90b      	bls.n	80077b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2205      	movs	r2, #5
 80077aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e012      	b.n	80077d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1e5      	bne.n	800778c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	e006      	b.n	80077d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
  }
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b089      	sub	sp, #36	; 0x24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80077fe:	7ffb      	ldrb	r3, [r7, #31]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d003      	beq.n	800780c <HAL_CAN_AddTxMessage+0x2c>
 8007804:	7ffb      	ldrb	r3, [r7, #31]
 8007806:	2b02      	cmp	r3, #2
 8007808:	f040 80b8 	bne.w	800797c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10a      	bne.n	800782c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800781c:	2b00      	cmp	r3, #0
 800781e:	d105      	bne.n	800782c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 80a0 	beq.w	800796c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	0e1b      	lsrs	r3, r3, #24
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b02      	cmp	r3, #2
 800783a:	d907      	bls.n	800784c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e09e      	b.n	800798a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800784c:	2201      	movs	r2, #1
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	409a      	lsls	r2, r3
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10d      	bne.n	800787a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007868:	68f9      	ldr	r1, [r7, #12]
 800786a:	6809      	ldr	r1, [r1, #0]
 800786c:	431a      	orrs	r2, r3
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	3318      	adds	r3, #24
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	440b      	add	r3, r1
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	e00f      	b.n	800789a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007884:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800788a:	68f9      	ldr	r1, [r7, #12]
 800788c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800788e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	3318      	adds	r3, #24
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	440b      	add	r3, r1
 8007898:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6819      	ldr	r1, [r3, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	691a      	ldr	r2, [r3, #16]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	3318      	adds	r3, #24
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	440b      	add	r3, r1
 80078aa:	3304      	adds	r3, #4
 80078ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	7d1b      	ldrb	r3, [r3, #20]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d111      	bne.n	80078da <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	3318      	adds	r3, #24
 80078be:	011b      	lsls	r3, r3, #4
 80078c0:	4413      	add	r3, r2
 80078c2:	3304      	adds	r3, #4
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	6811      	ldr	r1, [r2, #0]
 80078ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	3318      	adds	r3, #24
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	440b      	add	r3, r1
 80078d6:	3304      	adds	r3, #4
 80078d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3307      	adds	r3, #7
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	061a      	lsls	r2, r3, #24
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	3306      	adds	r3, #6
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	041b      	lsls	r3, r3, #16
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3305      	adds	r3, #5
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	4313      	orrs	r3, r2
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	3204      	adds	r2, #4
 80078fa:	7812      	ldrb	r2, [r2, #0]
 80078fc:	4610      	mov	r0, r2
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	6811      	ldr	r1, [r2, #0]
 8007902:	ea43 0200 	orr.w	r2, r3, r0
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	011b      	lsls	r3, r3, #4
 800790a:	440b      	add	r3, r1
 800790c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007910:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3303      	adds	r3, #3
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	061a      	lsls	r2, r3, #24
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3302      	adds	r3, #2
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	041b      	lsls	r3, r3, #16
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3301      	adds	r3, #1
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	021b      	lsls	r3, r3, #8
 800792c:	4313      	orrs	r3, r2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	7812      	ldrb	r2, [r2, #0]
 8007932:	4610      	mov	r0, r2
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	6811      	ldr	r1, [r2, #0]
 8007938:	ea43 0200 	orr.w	r2, r3, r0
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	440b      	add	r3, r1
 8007942:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007946:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	3318      	adds	r3, #24
 8007950:	011b      	lsls	r3, r3, #4
 8007952:	4413      	add	r3, r2
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	6811      	ldr	r1, [r2, #0]
 800795a:	f043 0201 	orr.w	r2, r3, #1
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	3318      	adds	r3, #24
 8007962:	011b      	lsls	r3, r3, #4
 8007964:	440b      	add	r3, r1
 8007966:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	e00e      	b.n	800798a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e006      	b.n	800798a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
  }
}
 800798a:	4618      	mov	r0, r3
 800798c:	3724      	adds	r7, #36	; 0x24
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079a8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80079aa:	7afb      	ldrb	r3, [r7, #11]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d002      	beq.n	80079b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80079b0:	7afb      	ldrb	r3, [r7, #11]
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d11d      	bne.n	80079f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3301      	adds	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3301      	adds	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3301      	adds	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80079f2:	68fb      	ldr	r3, [r7, #12]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a14:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d003      	beq.n	8007a24 <HAL_CAN_GetRxMessage+0x24>
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	f040 80f3 	bne.w	8007c0a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10e      	bne.n	8007a48 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d116      	bne.n	8007a66 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0e7      	b.n	8007c18 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d107      	bne.n	8007a66 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e0d8      	b.n	8007c18 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	331b      	adds	r3, #27
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	4413      	add	r3, r2
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0204 	and.w	r2, r3, #4
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10c      	bne.n	8007a9e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	331b      	adds	r3, #27
 8007a8c:	011b      	lsls	r3, r3, #4
 8007a8e:	4413      	add	r3, r2
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	0d5b      	lsrs	r3, r3, #21
 8007a94:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	e00b      	b.n	8007ab6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	331b      	adds	r3, #27
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	4413      	add	r3, r2
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	08db      	lsrs	r3, r3, #3
 8007aae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	331b      	adds	r3, #27
 8007abe:	011b      	lsls	r3, r3, #4
 8007ac0:	4413      	add	r3, r2
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0202 	and.w	r2, r3, #2
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	331b      	adds	r3, #27
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	4413      	add	r3, r2
 8007ad8:	3304      	adds	r3, #4
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 020f 	and.w	r2, r3, #15
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	331b      	adds	r3, #27
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	4413      	add	r3, r2
 8007af0:	3304      	adds	r3, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	0a1b      	lsrs	r3, r3, #8
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	331b      	adds	r3, #27
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	4413      	add	r3, r2
 8007b08:	3304      	adds	r3, #4
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	0c1b      	lsrs	r3, r3, #16
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	011b      	lsls	r3, r3, #4
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	0a1a      	lsrs	r2, r3, #8
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	0c1a      	lsrs	r2, r3, #16
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	3302      	adds	r3, #2
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	0e1a      	lsrs	r2, r3, #24
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	3303      	adds	r3, #3
 8007b74:	b2d2      	uxtb	r2, r2
 8007b76:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	011b      	lsls	r3, r3, #4
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	b2d2      	uxtb	r2, r2
 8007b8e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	0a1a      	lsrs	r2, r3, #8
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	3305      	adds	r3, #5
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	0c1a      	lsrs	r2, r3, #16
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	3306      	adds	r3, #6
 8007bc0:	b2d2      	uxtb	r2, r2
 8007bc2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	0e1a      	lsrs	r2, r3, #24
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	3307      	adds	r3, #7
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d108      	bne.n	8007bf6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0220 	orr.w	r2, r2, #32
 8007bf2:	60da      	str	r2, [r3, #12]
 8007bf4:	e007      	b.n	8007c06 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	691a      	ldr	r2, [r3, #16]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f042 0220 	orr.w	r2, r2, #32
 8007c04:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	e006      	b.n	8007c18 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
  }
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	371c      	adds	r7, #28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c34:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d002      	beq.n	8007c42 <HAL_CAN_ActivateNotification+0x1e>
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d109      	bne.n	8007c56 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6959      	ldr	r1, [r3, #20]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	e006      	b.n	8007c64 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
  }
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08a      	sub	sp, #40	; 0x28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d07c      	beq.n	8007db0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d023      	beq.n	8007d08 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f983 	bl	8007fde <HAL_CAN_TxMailbox0CompleteCallback>
 8007cd8:	e016      	b.n	8007d08 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d004      	beq.n	8007cee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
 8007cec:	e00c      	b.n	8007d08 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d004      	beq.n	8007d02 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8007d00:	e002      	b.n	8007d08 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f989 	bl	800801a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d024      	beq.n	8007d5c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f963 	bl	8007ff2 <HAL_CAN_TxMailbox1CompleteCallback>
 8007d2c:	e016      	b.n	8007d5c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d004      	beq.n	8007d42 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d40:	e00c      	b.n	8007d5c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d52:	627b      	str	r3, [r7, #36]	; 0x24
 8007d54:	e002      	b.n	8007d5c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f969 	bl	800802e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d024      	beq.n	8007db0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007d6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f943 	bl	8008006 <HAL_CAN_TxMailbox2CompleteCallback>
 8007d80:	e016      	b.n	8007db0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d004      	beq.n	8007d96 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
 8007d94:	e00c      	b.n	8007db0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d004      	beq.n	8007daa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007da6:	627b      	str	r3, [r7, #36]	; 0x24
 8007da8:	e002      	b.n	8007db0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f949 	bl	8008042 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	f003 0308 	and.w	r3, r3, #8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00c      	beq.n	8007dd4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d007      	beq.n	8007dd4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2210      	movs	r2, #16
 8007dd2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00b      	beq.n	8007df6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f003 0308 	and.w	r3, r3, #8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d006      	beq.n	8007df6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2208      	movs	r2, #8
 8007dee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f930 	bl	8008056 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d009      	beq.n	8007e14 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f003 0303 	and.w	r3, r3, #3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fe f8d4 	bl	8005fbc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00c      	beq.n	8007e38 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f003 0310 	and.w	r3, r3, #16
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d007      	beq.n	8007e38 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2210      	movs	r2, #16
 8007e36:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f003 0308 	and.w	r3, r3, #8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d006      	beq.n	8007e5a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2208      	movs	r2, #8
 8007e52:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f912 	bl	800807e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	f003 0310 	and.w	r3, r3, #16
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d009      	beq.n	8007e78 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f003 0303 	and.w	r3, r3, #3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f8f9 	bl	800806a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00b      	beq.n	8007e9a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	f003 0310 	and.w	r3, r3, #16
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d006      	beq.n	8007e9a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2210      	movs	r2, #16
 8007e92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f8fc 	bl	8008092 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d006      	beq.n	8007ebc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2208      	movs	r2, #8
 8007eb4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f8f5 	bl	80080a6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d07b      	beq.n	8007fbe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d072      	beq.n	8007fb6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	f043 0301 	orr.w	r3, r3, #1
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d008      	beq.n	8007f08 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	f043 0302 	orr.w	r3, r3, #2
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d008      	beq.n	8007f24 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	f043 0304 	orr.w	r3, r3, #4
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d043      	beq.n	8007fb6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d03e      	beq.n	8007fb6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f3e:	2b60      	cmp	r3, #96	; 0x60
 8007f40:	d02b      	beq.n	8007f9a <HAL_CAN_IRQHandler+0x32a>
 8007f42:	2b60      	cmp	r3, #96	; 0x60
 8007f44:	d82e      	bhi.n	8007fa4 <HAL_CAN_IRQHandler+0x334>
 8007f46:	2b50      	cmp	r3, #80	; 0x50
 8007f48:	d022      	beq.n	8007f90 <HAL_CAN_IRQHandler+0x320>
 8007f4a:	2b50      	cmp	r3, #80	; 0x50
 8007f4c:	d82a      	bhi.n	8007fa4 <HAL_CAN_IRQHandler+0x334>
 8007f4e:	2b40      	cmp	r3, #64	; 0x40
 8007f50:	d019      	beq.n	8007f86 <HAL_CAN_IRQHandler+0x316>
 8007f52:	2b40      	cmp	r3, #64	; 0x40
 8007f54:	d826      	bhi.n	8007fa4 <HAL_CAN_IRQHandler+0x334>
 8007f56:	2b30      	cmp	r3, #48	; 0x30
 8007f58:	d010      	beq.n	8007f7c <HAL_CAN_IRQHandler+0x30c>
 8007f5a:	2b30      	cmp	r3, #48	; 0x30
 8007f5c:	d822      	bhi.n	8007fa4 <HAL_CAN_IRQHandler+0x334>
 8007f5e:	2b10      	cmp	r3, #16
 8007f60:	d002      	beq.n	8007f68 <HAL_CAN_IRQHandler+0x2f8>
 8007f62:	2b20      	cmp	r3, #32
 8007f64:	d005      	beq.n	8007f72 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007f66:	e01d      	b.n	8007fa4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	f043 0308 	orr.w	r3, r3, #8
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007f70:	e019      	b.n	8007fa6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	f043 0310 	orr.w	r3, r3, #16
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007f7a:	e014      	b.n	8007fa6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	f043 0320 	orr.w	r3, r3, #32
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007f84:	e00f      	b.n	8007fa6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007f8e:	e00a      	b.n	8007fa6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007f98:	e005      	b.n	8007fa6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007fa2:	e000      	b.n	8007fa6 <HAL_CAN_IRQHandler+0x336>
            break;
 8007fa4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	699a      	ldr	r2, [r3, #24]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007fb4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2204      	movs	r2, #4
 8007fbc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d008      	beq.n	8007fd6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f872 	bl	80080ba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007fd6:	bf00      	nop
 8007fd8:	3728      	adds	r7, #40	; 0x28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008006:	b480      	push	{r7}
 8008008:	b083      	sub	sp, #12
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800800e:	bf00      	nop
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800805e:	bf00      	nop
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008072:	bf00      	nop
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008086:	bf00      	nop
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80080c2:	bf00      	nop
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
	...

080080d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f003 0307 	and.w	r3, r3, #7
 80080de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080e0:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <__NVIC_SetPriorityGrouping+0x44>)
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80080ec:	4013      	ands	r3, r2
 80080ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80080f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80080fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008102:	4a04      	ldr	r2, [pc, #16]	; (8008114 <__NVIC_SetPriorityGrouping+0x44>)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	60d3      	str	r3, [r2, #12]
}
 8008108:	bf00      	nop
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	e000ed00 	.word	0xe000ed00

08008118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008118:	b480      	push	{r7}
 800811a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800811c:	4b04      	ldr	r3, [pc, #16]	; (8008130 <__NVIC_GetPriorityGrouping+0x18>)
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	0a1b      	lsrs	r3, r3, #8
 8008122:	f003 0307 	and.w	r3, r3, #7
}
 8008126:	4618      	mov	r0, r3
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	e000ed00 	.word	0xe000ed00

08008134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800813e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008142:	2b00      	cmp	r3, #0
 8008144:	db0b      	blt.n	800815e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	f003 021f 	and.w	r2, r3, #31
 800814c:	4907      	ldr	r1, [pc, #28]	; (800816c <__NVIC_EnableIRQ+0x38>)
 800814e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008152:	095b      	lsrs	r3, r3, #5
 8008154:	2001      	movs	r0, #1
 8008156:	fa00 f202 	lsl.w	r2, r0, r2
 800815a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800815e:	bf00      	nop
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	e000e100 	.word	0xe000e100

08008170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	4603      	mov	r3, r0
 8008178:	6039      	str	r1, [r7, #0]
 800817a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800817c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008180:	2b00      	cmp	r3, #0
 8008182:	db0a      	blt.n	800819a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	b2da      	uxtb	r2, r3
 8008188:	490c      	ldr	r1, [pc, #48]	; (80081bc <__NVIC_SetPriority+0x4c>)
 800818a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800818e:	0112      	lsls	r2, r2, #4
 8008190:	b2d2      	uxtb	r2, r2
 8008192:	440b      	add	r3, r1
 8008194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008198:	e00a      	b.n	80081b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	b2da      	uxtb	r2, r3
 800819e:	4908      	ldr	r1, [pc, #32]	; (80081c0 <__NVIC_SetPriority+0x50>)
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	f003 030f 	and.w	r3, r3, #15
 80081a6:	3b04      	subs	r3, #4
 80081a8:	0112      	lsls	r2, r2, #4
 80081aa:	b2d2      	uxtb	r2, r2
 80081ac:	440b      	add	r3, r1
 80081ae:	761a      	strb	r2, [r3, #24]
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	e000e100 	.word	0xe000e100
 80081c0:	e000ed00 	.word	0xe000ed00

080081c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b089      	sub	sp, #36	; 0x24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	f1c3 0307 	rsb	r3, r3, #7
 80081de:	2b04      	cmp	r3, #4
 80081e0:	bf28      	it	cs
 80081e2:	2304      	movcs	r3, #4
 80081e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	3304      	adds	r3, #4
 80081ea:	2b06      	cmp	r3, #6
 80081ec:	d902      	bls.n	80081f4 <NVIC_EncodePriority+0x30>
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	3b03      	subs	r3, #3
 80081f2:	e000      	b.n	80081f6 <NVIC_EncodePriority+0x32>
 80081f4:	2300      	movs	r3, #0
 80081f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081f8:	f04f 32ff 	mov.w	r2, #4294967295
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008202:	43da      	mvns	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	401a      	ands	r2, r3
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800820c:	f04f 31ff 	mov.w	r1, #4294967295
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	fa01 f303 	lsl.w	r3, r1, r3
 8008216:	43d9      	mvns	r1, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800821c:	4313      	orrs	r3, r2
         );
}
 800821e:	4618      	mov	r0, r3
 8008220:	3724      	adds	r7, #36	; 0x24
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
	...

0800822c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3b01      	subs	r3, #1
 8008238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800823c:	d301      	bcc.n	8008242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800823e:	2301      	movs	r3, #1
 8008240:	e00f      	b.n	8008262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008242:	4a0a      	ldr	r2, [pc, #40]	; (800826c <SysTick_Config+0x40>)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3b01      	subs	r3, #1
 8008248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800824a:	210f      	movs	r1, #15
 800824c:	f04f 30ff 	mov.w	r0, #4294967295
 8008250:	f7ff ff8e 	bl	8008170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008254:	4b05      	ldr	r3, [pc, #20]	; (800826c <SysTick_Config+0x40>)
 8008256:	2200      	movs	r2, #0
 8008258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800825a:	4b04      	ldr	r3, [pc, #16]	; (800826c <SysTick_Config+0x40>)
 800825c:	2207      	movs	r2, #7
 800825e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	e000e010 	.word	0xe000e010

08008270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff ff29 	bl	80080d0 <__NVIC_SetPriorityGrouping>
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008286:	b580      	push	{r7, lr}
 8008288:	b086      	sub	sp, #24
 800828a:	af00      	add	r7, sp, #0
 800828c:	4603      	mov	r3, r0
 800828e:	60b9      	str	r1, [r7, #8]
 8008290:	607a      	str	r2, [r7, #4]
 8008292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008294:	2300      	movs	r3, #0
 8008296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008298:	f7ff ff3e 	bl	8008118 <__NVIC_GetPriorityGrouping>
 800829c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	6978      	ldr	r0, [r7, #20]
 80082a4:	f7ff ff8e 	bl	80081c4 <NVIC_EncodePriority>
 80082a8:	4602      	mov	r2, r0
 80082aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ae:	4611      	mov	r1, r2
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff ff5d 	bl	8008170 <__NVIC_SetPriority>
}
 80082b6:	bf00      	nop
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	4603      	mov	r3, r0
 80082c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80082c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff ff31 	bl	8008134 <__NVIC_EnableIRQ>
}
 80082d2:	bf00      	nop
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b082      	sub	sp, #8
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7ff ffa2 	bl	800822c <SysTick_Config>
 80082e8:	4603      	mov	r3, r0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008300:	f7fe fbfc 	bl	8006afc <HAL_GetTick>
 8008304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e099      	b.n	8008444 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0201 	bic.w	r2, r2, #1
 800832e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008330:	e00f      	b.n	8008352 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008332:	f7fe fbe3 	bl	8006afc <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b05      	cmp	r3, #5
 800833e:	d908      	bls.n	8008352 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2203      	movs	r2, #3
 800834a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e078      	b.n	8008444 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e8      	bne.n	8008332 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	4b38      	ldr	r3, [pc, #224]	; (800844c <HAL_DMA_Init+0x158>)
 800836c:	4013      	ands	r3, r2
 800836e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800837e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800838a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d107      	bne.n	80083bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b4:	4313      	orrs	r3, r2
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f023 0307 	bic.w	r3, r3, #7
 80083d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	4313      	orrs	r3, r2
 80083dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d117      	bne.n	8008416 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00e      	beq.n	8008416 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fa9d 	bl	8008938 <DMA_CheckFifoParam>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d008      	beq.n	8008416 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2240      	movs	r2, #64	; 0x40
 8008408:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008412:	2301      	movs	r3, #1
 8008414:	e016      	b.n	8008444 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fa54 	bl	80088cc <DMA_CalcBaseAndBitshift>
 8008424:	4603      	mov	r3, r0
 8008426:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842c:	223f      	movs	r2, #63	; 0x3f
 800842e:	409a      	lsls	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	f010803f 	.word	0xf010803f

08008450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
 800845c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008466:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800846e:	2b01      	cmp	r3, #1
 8008470:	d101      	bne.n	8008476 <HAL_DMA_Start_IT+0x26>
 8008472:	2302      	movs	r3, #2
 8008474:	e040      	b.n	80084f8 <HAL_DMA_Start_IT+0xa8>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b01      	cmp	r3, #1
 8008488:	d12f      	bne.n	80084ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2202      	movs	r2, #2
 800848e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 f9e6 	bl	8008870 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a8:	223f      	movs	r2, #63	; 0x3f
 80084aa:	409a      	lsls	r2, r3
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0216 	orr.w	r2, r2, #22
 80084be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0208 	orr.w	r2, r2, #8
 80084d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 0201 	orr.w	r2, r2, #1
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	e005      	b.n	80084f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80084f2:	2302      	movs	r3, #2
 80084f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b02      	cmp	r3, #2
 8008512:	d004      	beq.n	800851e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2280      	movs	r2, #128	; 0x80
 8008518:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e00c      	b.n	8008538 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2205      	movs	r2, #5
 8008522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 0201 	bic.w	r2, r2, #1
 8008534:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008550:	4b92      	ldr	r3, [pc, #584]	; (800879c <HAL_DMA_IRQHandler+0x258>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a92      	ldr	r2, [pc, #584]	; (80087a0 <HAL_DMA_IRQHandler+0x25c>)
 8008556:	fba2 2303 	umull	r2, r3, r2, r3
 800855a:	0a9b      	lsrs	r3, r3, #10
 800855c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008562:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800856e:	2208      	movs	r2, #8
 8008570:	409a      	lsls	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4013      	ands	r3, r2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d01a      	beq.n	80085b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d013      	beq.n	80085b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f022 0204 	bic.w	r2, r2, #4
 8008596:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800859c:	2208      	movs	r2, #8
 800859e:	409a      	lsls	r2, r3
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a8:	f043 0201 	orr.w	r2, r3, #1
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b4:	2201      	movs	r2, #1
 80085b6:	409a      	lsls	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4013      	ands	r3, r2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d012      	beq.n	80085e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00b      	beq.n	80085e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d2:	2201      	movs	r2, #1
 80085d4:	409a      	lsls	r2, r3
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085de:	f043 0202 	orr.w	r2, r3, #2
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ea:	2204      	movs	r2, #4
 80085ec:	409a      	lsls	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4013      	ands	r3, r2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d012      	beq.n	800861c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00b      	beq.n	800861c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008608:	2204      	movs	r2, #4
 800860a:	409a      	lsls	r2, r3
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008614:	f043 0204 	orr.w	r2, r3, #4
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008620:	2210      	movs	r2, #16
 8008622:	409a      	lsls	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4013      	ands	r3, r2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d043      	beq.n	80086b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d03c      	beq.n	80086b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800863e:	2210      	movs	r2, #16
 8008640:	409a      	lsls	r2, r3
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d018      	beq.n	8008686 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d108      	bne.n	8008674 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	d024      	beq.n	80086b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
 8008672:	e01f      	b.n	80086b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008678:	2b00      	cmp	r3, #0
 800867a:	d01b      	beq.n	80086b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	4798      	blx	r3
 8008684:	e016      	b.n	80086b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008690:	2b00      	cmp	r3, #0
 8008692:	d107      	bne.n	80086a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 0208 	bic.w	r2, r2, #8
 80086a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d003      	beq.n	80086b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b8:	2220      	movs	r2, #32
 80086ba:	409a      	lsls	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4013      	ands	r3, r2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 808e 	beq.w	80087e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 8086 	beq.w	80087e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086da:	2220      	movs	r2, #32
 80086dc:	409a      	lsls	r2, r3
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b05      	cmp	r3, #5
 80086ec:	d136      	bne.n	800875c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0216 	bic.w	r2, r2, #22
 80086fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	695a      	ldr	r2, [r3, #20]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800870c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	d103      	bne.n	800871e <HAL_DMA_IRQHandler+0x1da>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0208 	bic.w	r2, r2, #8
 800872c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008732:	223f      	movs	r2, #63	; 0x3f
 8008734:	409a      	lsls	r2, r3
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800874e:	2b00      	cmp	r3, #0
 8008750:	d07d      	beq.n	800884e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	4798      	blx	r3
        }
        return;
 800875a:	e078      	b.n	800884e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01c      	beq.n	80087a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d108      	bne.n	800878a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877c:	2b00      	cmp	r3, #0
 800877e:	d030      	beq.n	80087e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	4798      	blx	r3
 8008788:	e02b      	b.n	80087e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878e:	2b00      	cmp	r3, #0
 8008790:	d027      	beq.n	80087e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	4798      	blx	r3
 800879a:	e022      	b.n	80087e2 <HAL_DMA_IRQHandler+0x29e>
 800879c:	20000000 	.word	0x20000000
 80087a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10f      	bne.n	80087d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f022 0210 	bic.w	r2, r2, #16
 80087c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d032      	beq.n	8008850 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d022      	beq.n	800883c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2205      	movs	r2, #5
 80087fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0201 	bic.w	r2, r2, #1
 800880c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	3301      	adds	r3, #1
 8008812:	60bb      	str	r3, [r7, #8]
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	429a      	cmp	r2, r3
 8008818:	d307      	bcc.n	800882a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1f2      	bne.n	800880e <HAL_DMA_IRQHandler+0x2ca>
 8008828:	e000      	b.n	800882c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800882a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	4798      	blx	r3
 800884c:	e000      	b.n	8008850 <HAL_DMA_IRQHandler+0x30c>
        return;
 800884e:	bf00      	nop
    }
  }
}
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop

08008858 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800888c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2b40      	cmp	r3, #64	; 0x40
 800889c:	d108      	bne.n	80088b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80088ae:	e007      	b.n	80088c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	60da      	str	r2, [r3, #12]
}
 80088c0:	bf00      	nop
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	3b10      	subs	r3, #16
 80088dc:	4a14      	ldr	r2, [pc, #80]	; (8008930 <DMA_CalcBaseAndBitshift+0x64>)
 80088de:	fba2 2303 	umull	r2, r3, r2, r3
 80088e2:	091b      	lsrs	r3, r3, #4
 80088e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80088e6:	4a13      	ldr	r2, [pc, #76]	; (8008934 <DMA_CalcBaseAndBitshift+0x68>)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4413      	add	r3, r2
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d909      	bls.n	800890e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008902:	f023 0303 	bic.w	r3, r3, #3
 8008906:	1d1a      	adds	r2, r3, #4
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	659a      	str	r2, [r3, #88]	; 0x58
 800890c:	e007      	b.n	800891e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008916:	f023 0303 	bic.w	r3, r3, #3
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	aaaaaaab 	.word	0xaaaaaaab
 8008934:	0801859c 	.word	0x0801859c

08008938 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008948:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d11f      	bne.n	8008992 <DMA_CheckFifoParam+0x5a>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b03      	cmp	r3, #3
 8008956:	d856      	bhi.n	8008a06 <DMA_CheckFifoParam+0xce>
 8008958:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <DMA_CheckFifoParam+0x28>)
 800895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895e:	bf00      	nop
 8008960:	08008971 	.word	0x08008971
 8008964:	08008983 	.word	0x08008983
 8008968:	08008971 	.word	0x08008971
 800896c:	08008a07 	.word	0x08008a07
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d046      	beq.n	8008a0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008980:	e043      	b.n	8008a0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008986:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800898a:	d140      	bne.n	8008a0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008990:	e03d      	b.n	8008a0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800899a:	d121      	bne.n	80089e0 <DMA_CheckFifoParam+0xa8>
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d837      	bhi.n	8008a12 <DMA_CheckFifoParam+0xda>
 80089a2:	a201      	add	r2, pc, #4	; (adr r2, 80089a8 <DMA_CheckFifoParam+0x70>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	080089b9 	.word	0x080089b9
 80089ac:	080089bf 	.word	0x080089bf
 80089b0:	080089b9 	.word	0x080089b9
 80089b4:	080089d1 	.word	0x080089d1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	73fb      	strb	r3, [r7, #15]
      break;
 80089bc:	e030      	b.n	8008a20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d025      	beq.n	8008a16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089ce:	e022      	b.n	8008a16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80089d8:	d11f      	bne.n	8008a1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80089de:	e01c      	b.n	8008a1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d903      	bls.n	80089ee <DMA_CheckFifoParam+0xb6>
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d003      	beq.n	80089f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80089ec:	e018      	b.n	8008a20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	73fb      	strb	r3, [r7, #15]
      break;
 80089f2:	e015      	b.n	8008a20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00e      	beq.n	8008a1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	73fb      	strb	r3, [r7, #15]
      break;
 8008a04:	e00b      	b.n	8008a1e <DMA_CheckFifoParam+0xe6>
      break;
 8008a06:	bf00      	nop
 8008a08:	e00a      	b.n	8008a20 <DMA_CheckFifoParam+0xe8>
      break;
 8008a0a:	bf00      	nop
 8008a0c:	e008      	b.n	8008a20 <DMA_CheckFifoParam+0xe8>
      break;
 8008a0e:	bf00      	nop
 8008a10:	e006      	b.n	8008a20 <DMA_CheckFifoParam+0xe8>
      break;
 8008a12:	bf00      	nop
 8008a14:	e004      	b.n	8008a20 <DMA_CheckFifoParam+0xe8>
      break;
 8008a16:	bf00      	nop
 8008a18:	e002      	b.n	8008a20 <DMA_CheckFifoParam+0xe8>
      break;   
 8008a1a:	bf00      	nop
 8008a1c:	e000      	b.n	8008a20 <DMA_CheckFifoParam+0xe8>
      break;
 8008a1e:	bf00      	nop
    }
  } 
  
  return status; 
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop

08008a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b089      	sub	sp, #36	; 0x24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
 8008a4a:	e165      	b.n	8008d18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	fa02 f303 	lsl.w	r3, r2, r3
 8008a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	f040 8154 	bne.w	8008d12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d005      	beq.n	8008a82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d130      	bne.n	8008ae4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	005b      	lsls	r3, r3, #1
 8008a8c:	2203      	movs	r2, #3
 8008a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a92:	43db      	mvns	r3, r3
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	4013      	ands	r3, r2
 8008a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ab8:	2201      	movs	r2, #1
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac0:	43db      	mvns	r3, r3
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	091b      	lsrs	r3, r3, #4
 8008ace:	f003 0201 	and.w	r2, r3, #1
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f003 0303 	and.w	r3, r3, #3
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d017      	beq.n	8008b20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	2203      	movs	r2, #3
 8008afc:	fa02 f303 	lsl.w	r3, r2, r3
 8008b00:	43db      	mvns	r3, r3
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	4013      	ands	r3, r2
 8008b06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	689a      	ldr	r2, [r3, #8]
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	fa02 f303 	lsl.w	r3, r2, r3
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f003 0303 	and.w	r3, r3, #3
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d123      	bne.n	8008b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	08da      	lsrs	r2, r3, #3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	3208      	adds	r2, #8
 8008b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	f003 0307 	and.w	r3, r3, #7
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	220f      	movs	r2, #15
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	43db      	mvns	r3, r3
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	691a      	ldr	r2, [r3, #16]
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	08da      	lsrs	r2, r3, #3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3208      	adds	r2, #8
 8008b6e:	69b9      	ldr	r1, [r7, #24]
 8008b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	2203      	movs	r2, #3
 8008b80:	fa02 f303 	lsl.w	r3, r2, r3
 8008b84:	43db      	mvns	r3, r3
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	4013      	ands	r3, r2
 8008b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f003 0203 	and.w	r2, r3, #3
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f000 80ae 	beq.w	8008d12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	4b5d      	ldr	r3, [pc, #372]	; (8008d30 <HAL_GPIO_Init+0x300>)
 8008bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bbe:	4a5c      	ldr	r2, [pc, #368]	; (8008d30 <HAL_GPIO_Init+0x300>)
 8008bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8008bc6:	4b5a      	ldr	r3, [pc, #360]	; (8008d30 <HAL_GPIO_Init+0x300>)
 8008bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bd2:	4a58      	ldr	r2, [pc, #352]	; (8008d34 <HAL_GPIO_Init+0x304>)
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	089b      	lsrs	r3, r3, #2
 8008bd8:	3302      	adds	r3, #2
 8008bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	220f      	movs	r2, #15
 8008bea:	fa02 f303 	lsl.w	r3, r2, r3
 8008bee:	43db      	mvns	r3, r3
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a4f      	ldr	r2, [pc, #316]	; (8008d38 <HAL_GPIO_Init+0x308>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d025      	beq.n	8008c4a <HAL_GPIO_Init+0x21a>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a4e      	ldr	r2, [pc, #312]	; (8008d3c <HAL_GPIO_Init+0x30c>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d01f      	beq.n	8008c46 <HAL_GPIO_Init+0x216>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a4d      	ldr	r2, [pc, #308]	; (8008d40 <HAL_GPIO_Init+0x310>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d019      	beq.n	8008c42 <HAL_GPIO_Init+0x212>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a4c      	ldr	r2, [pc, #304]	; (8008d44 <HAL_GPIO_Init+0x314>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d013      	beq.n	8008c3e <HAL_GPIO_Init+0x20e>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a4b      	ldr	r2, [pc, #300]	; (8008d48 <HAL_GPIO_Init+0x318>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00d      	beq.n	8008c3a <HAL_GPIO_Init+0x20a>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a4a      	ldr	r2, [pc, #296]	; (8008d4c <HAL_GPIO_Init+0x31c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d007      	beq.n	8008c36 <HAL_GPIO_Init+0x206>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a49      	ldr	r2, [pc, #292]	; (8008d50 <HAL_GPIO_Init+0x320>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d101      	bne.n	8008c32 <HAL_GPIO_Init+0x202>
 8008c2e:	2306      	movs	r3, #6
 8008c30:	e00c      	b.n	8008c4c <HAL_GPIO_Init+0x21c>
 8008c32:	2307      	movs	r3, #7
 8008c34:	e00a      	b.n	8008c4c <HAL_GPIO_Init+0x21c>
 8008c36:	2305      	movs	r3, #5
 8008c38:	e008      	b.n	8008c4c <HAL_GPIO_Init+0x21c>
 8008c3a:	2304      	movs	r3, #4
 8008c3c:	e006      	b.n	8008c4c <HAL_GPIO_Init+0x21c>
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e004      	b.n	8008c4c <HAL_GPIO_Init+0x21c>
 8008c42:	2302      	movs	r3, #2
 8008c44:	e002      	b.n	8008c4c <HAL_GPIO_Init+0x21c>
 8008c46:	2301      	movs	r3, #1
 8008c48:	e000      	b.n	8008c4c <HAL_GPIO_Init+0x21c>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	69fa      	ldr	r2, [r7, #28]
 8008c4e:	f002 0203 	and.w	r2, r2, #3
 8008c52:	0092      	lsls	r2, r2, #2
 8008c54:	4093      	lsls	r3, r2
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c5c:	4935      	ldr	r1, [pc, #212]	; (8008d34 <HAL_GPIO_Init+0x304>)
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	089b      	lsrs	r3, r3, #2
 8008c62:	3302      	adds	r3, #2
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c6a:	4b3a      	ldr	r3, [pc, #232]	; (8008d54 <HAL_GPIO_Init+0x324>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	43db      	mvns	r3, r3
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	4013      	ands	r3, r2
 8008c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008c8e:	4a31      	ldr	r2, [pc, #196]	; (8008d54 <HAL_GPIO_Init+0x324>)
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008c94:	4b2f      	ldr	r3, [pc, #188]	; (8008d54 <HAL_GPIO_Init+0x324>)
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	43db      	mvns	r3, r3
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008cb8:	4a26      	ldr	r2, [pc, #152]	; (8008d54 <HAL_GPIO_Init+0x324>)
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008cbe:	4b25      	ldr	r3, [pc, #148]	; (8008d54 <HAL_GPIO_Init+0x324>)
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	43db      	mvns	r3, r3
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008ce2:	4a1c      	ldr	r2, [pc, #112]	; (8008d54 <HAL_GPIO_Init+0x324>)
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ce8:	4b1a      	ldr	r3, [pc, #104]	; (8008d54 <HAL_GPIO_Init+0x324>)
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	43db      	mvns	r3, r3
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d003      	beq.n	8008d0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d0c:	4a11      	ldr	r2, [pc, #68]	; (8008d54 <HAL_GPIO_Init+0x324>)
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	3301      	adds	r3, #1
 8008d16:	61fb      	str	r3, [r7, #28]
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	2b0f      	cmp	r3, #15
 8008d1c:	f67f ae96 	bls.w	8008a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	3724      	adds	r7, #36	; 0x24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	40023800 	.word	0x40023800
 8008d34:	40013800 	.word	0x40013800
 8008d38:	40020000 	.word	0x40020000
 8008d3c:	40020400 	.word	0x40020400
 8008d40:	40020800 	.word	0x40020800
 8008d44:	40020c00 	.word	0x40020c00
 8008d48:	40021000 	.word	0x40021000
 8008d4c:	40021400 	.word	0x40021400
 8008d50:	40021800 	.word	0x40021800
 8008d54:	40013c00 	.word	0x40013c00

08008d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	887b      	ldrh	r3, [r7, #2]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d70:	2301      	movs	r3, #1
 8008d72:	73fb      	strb	r3, [r7, #15]
 8008d74:	e001      	b.n	8008d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	807b      	strh	r3, [r7, #2]
 8008d94:	4613      	mov	r3, r2
 8008d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d98:	787b      	ldrb	r3, [r7, #1]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d9e:	887a      	ldrh	r2, [r7, #2]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008da4:	e003      	b.n	8008dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008da6:	887b      	ldrh	r3, [r7, #2]
 8008da8:	041a      	lsls	r2, r3, #16
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	619a      	str	r2, [r3, #24]
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008dcc:	887a      	ldrh	r2, [r7, #2]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	041a      	lsls	r2, r3, #16
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	43d9      	mvns	r1, r3
 8008dd8:	887b      	ldrh	r3, [r7, #2]
 8008dda:	400b      	ands	r3, r1
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	619a      	str	r2, [r3, #24]
}
 8008de2:	bf00      	nop
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
	...

08008df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008dfa:	4b08      	ldr	r3, [pc, #32]	; (8008e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008dfc:	695a      	ldr	r2, [r3, #20]
 8008dfe:	88fb      	ldrh	r3, [r7, #6]
 8008e00:	4013      	ands	r3, r2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d006      	beq.n	8008e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e06:	4a05      	ldr	r2, [pc, #20]	; (8008e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e08:	88fb      	ldrh	r3, [r7, #6]
 8008e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e0c:	88fb      	ldrh	r3, [r7, #6]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fd f950 	bl	80060b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	40013c00 	.word	0x40013c00

08008e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e12b      	b.n	800908a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d106      	bne.n	8008e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7fd fb70 	bl	800652c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2224      	movs	r2, #36	; 0x24
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0201 	bic.w	r2, r2, #1
 8008e62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008e84:	f002 faf2 	bl	800b46c <HAL_RCC_GetPCLK1Freq>
 8008e88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	4a81      	ldr	r2, [pc, #516]	; (8009094 <HAL_I2C_Init+0x274>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d807      	bhi.n	8008ea4 <HAL_I2C_Init+0x84>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4a80      	ldr	r2, [pc, #512]	; (8009098 <HAL_I2C_Init+0x278>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	bf94      	ite	ls
 8008e9c:	2301      	movls	r3, #1
 8008e9e:	2300      	movhi	r3, #0
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	e006      	b.n	8008eb2 <HAL_I2C_Init+0x92>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4a7d      	ldr	r2, [pc, #500]	; (800909c <HAL_I2C_Init+0x27c>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	bf94      	ite	ls
 8008eac:	2301      	movls	r3, #1
 8008eae:	2300      	movhi	r3, #0
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e0e7      	b.n	800908a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4a78      	ldr	r2, [pc, #480]	; (80090a0 <HAL_I2C_Init+0x280>)
 8008ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec2:	0c9b      	lsrs	r3, r3, #18
 8008ec4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	4a6a      	ldr	r2, [pc, #424]	; (8009094 <HAL_I2C_Init+0x274>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d802      	bhi.n	8008ef4 <HAL_I2C_Init+0xd4>
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	e009      	b.n	8008f08 <HAL_I2C_Init+0xe8>
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008efa:	fb02 f303 	mul.w	r3, r2, r3
 8008efe:	4a69      	ldr	r2, [pc, #420]	; (80090a4 <HAL_I2C_Init+0x284>)
 8008f00:	fba2 2303 	umull	r2, r3, r2, r3
 8008f04:	099b      	lsrs	r3, r3, #6
 8008f06:	3301      	adds	r3, #1
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008f1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	495c      	ldr	r1, [pc, #368]	; (8009094 <HAL_I2C_Init+0x274>)
 8008f24:	428b      	cmp	r3, r1
 8008f26:	d819      	bhi.n	8008f5c <HAL_I2C_Init+0x13c>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	1e59      	subs	r1, r3, #1
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f36:	1c59      	adds	r1, r3, #1
 8008f38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008f3c:	400b      	ands	r3, r1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00a      	beq.n	8008f58 <HAL_I2C_Init+0x138>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	1e59      	subs	r1, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f50:	3301      	adds	r3, #1
 8008f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f56:	e051      	b.n	8008ffc <HAL_I2C_Init+0x1dc>
 8008f58:	2304      	movs	r3, #4
 8008f5a:	e04f      	b.n	8008ffc <HAL_I2C_Init+0x1dc>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d111      	bne.n	8008f88 <HAL_I2C_Init+0x168>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	1e58      	subs	r0, r3, #1
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6859      	ldr	r1, [r3, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	440b      	add	r3, r1
 8008f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f76:	3301      	adds	r3, #1
 8008f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	bf0c      	ite	eq
 8008f80:	2301      	moveq	r3, #1
 8008f82:	2300      	movne	r3, #0
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	e012      	b.n	8008fae <HAL_I2C_Init+0x18e>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	1e58      	subs	r0, r3, #1
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6859      	ldr	r1, [r3, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	440b      	add	r3, r1
 8008f96:	0099      	lsls	r1, r3, #2
 8008f98:	440b      	add	r3, r1
 8008f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bf0c      	ite	eq
 8008fa8:	2301      	moveq	r3, #1
 8008faa:	2300      	movne	r3, #0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <HAL_I2C_Init+0x196>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e022      	b.n	8008ffc <HAL_I2C_Init+0x1dc>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10e      	bne.n	8008fdc <HAL_I2C_Init+0x1bc>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	1e58      	subs	r0, r3, #1
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6859      	ldr	r1, [r3, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	440b      	add	r3, r1
 8008fcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fda:	e00f      	b.n	8008ffc <HAL_I2C_Init+0x1dc>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	1e58      	subs	r0, r3, #1
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6859      	ldr	r1, [r3, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	440b      	add	r3, r1
 8008fea:	0099      	lsls	r1, r3, #2
 8008fec:	440b      	add	r3, r1
 8008fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ffc:	6879      	ldr	r1, [r7, #4]
 8008ffe:	6809      	ldr	r1, [r1, #0]
 8009000:	4313      	orrs	r3, r2
 8009002:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	69da      	ldr	r2, [r3, #28]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	430a      	orrs	r2, r1
 800901e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800902a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	6911      	ldr	r1, [r2, #16]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	68d2      	ldr	r2, [r2, #12]
 8009036:	4311      	orrs	r1, r2
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	6812      	ldr	r2, [r2, #0]
 800903c:	430b      	orrs	r3, r1
 800903e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	695a      	ldr	r2, [r3, #20]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	431a      	orrs	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	430a      	orrs	r2, r1
 800905a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f042 0201 	orr.w	r2, r2, #1
 800906a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2220      	movs	r2, #32
 8009076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	000186a0 	.word	0x000186a0
 8009098:	001e847f 	.word	0x001e847f
 800909c:	003d08ff 	.word	0x003d08ff
 80090a0:	431bde83 	.word	0x431bde83
 80090a4:	10624dd3 	.word	0x10624dd3

080090a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af02      	add	r7, sp, #8
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	607a      	str	r2, [r7, #4]
 80090b2:	461a      	mov	r2, r3
 80090b4:	460b      	mov	r3, r1
 80090b6:	817b      	strh	r3, [r7, #10]
 80090b8:	4613      	mov	r3, r2
 80090ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80090bc:	f7fd fd1e 	bl	8006afc <HAL_GetTick>
 80090c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b20      	cmp	r3, #32
 80090cc:	f040 80e0 	bne.w	8009290 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	2319      	movs	r3, #25
 80090d6:	2201      	movs	r2, #1
 80090d8:	4970      	ldr	r1, [pc, #448]	; (800929c <HAL_I2C_Master_Transmit+0x1f4>)
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 fc58 	bl	8009990 <I2C_WaitOnFlagUntilTimeout>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80090e6:	2302      	movs	r3, #2
 80090e8:	e0d3      	b.n	8009292 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d101      	bne.n	80090f8 <HAL_I2C_Master_Transmit+0x50>
 80090f4:	2302      	movs	r3, #2
 80090f6:	e0cc      	b.n	8009292 <HAL_I2C_Master_Transmit+0x1ea>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b01      	cmp	r3, #1
 800910c:	d007      	beq.n	800911e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f042 0201 	orr.w	r2, r2, #1
 800911c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800912c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2221      	movs	r2, #33	; 0x21
 8009132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2210      	movs	r2, #16
 800913a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	893a      	ldrh	r2, [r7, #8]
 800914e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009154:	b29a      	uxth	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4a50      	ldr	r2, [pc, #320]	; (80092a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800915e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009160:	8979      	ldrh	r1, [r7, #10]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	6a3a      	ldr	r2, [r7, #32]
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 fac2 	bl	80096f0 <I2C_MasterRequestWrite>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e08d      	b.n	8009292 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009176:	2300      	movs	r3, #0
 8009178:	613b      	str	r3, [r7, #16]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	613b      	str	r3, [r7, #16]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	613b      	str	r3, [r7, #16]
 800918a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800918c:	e066      	b.n	800925c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	6a39      	ldr	r1, [r7, #32]
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 fcd2 	bl	8009b3c <I2C_WaitOnTXEFlagUntilTimeout>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00d      	beq.n	80091ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d107      	bne.n	80091b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e06b      	b.n	8009292 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	781a      	ldrb	r2, [r3, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	3b01      	subs	r3, #1
 80091d8:	b29a      	uxth	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e2:	3b01      	subs	r3, #1
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	d11b      	bne.n	8009230 <HAL_I2C_Master_Transmit+0x188>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d017      	beq.n	8009230 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009204:	781a      	ldrb	r2, [r3, #0]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	1c5a      	adds	r2, r3, #1
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800921a:	b29b      	uxth	r3, r3
 800921c:	3b01      	subs	r3, #1
 800921e:	b29a      	uxth	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009228:	3b01      	subs	r3, #1
 800922a:	b29a      	uxth	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	6a39      	ldr	r1, [r7, #32]
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 fcc2 	bl	8009bbe <I2C_WaitOnBTFFlagUntilTimeout>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00d      	beq.n	800925c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009244:	2b04      	cmp	r3, #4
 8009246:	d107      	bne.n	8009258 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009256:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e01a      	b.n	8009292 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009260:	2b00      	cmp	r3, #0
 8009262:	d194      	bne.n	800918e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2220      	movs	r2, #32
 8009278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	e000      	b.n	8009292 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009290:	2302      	movs	r3, #2
  }
}
 8009292:	4618      	mov	r0, r3
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	00100002 	.word	0x00100002
 80092a0:	ffff0000 	.word	0xffff0000

080092a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08c      	sub	sp, #48	; 0x30
 80092a8:	af02      	add	r7, sp, #8
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	607a      	str	r2, [r7, #4]
 80092ae:	461a      	mov	r2, r3
 80092b0:	460b      	mov	r3, r1
 80092b2:	817b      	strh	r3, [r7, #10]
 80092b4:	4613      	mov	r3, r2
 80092b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80092b8:	f7fd fc20 	bl	8006afc <HAL_GetTick>
 80092bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b20      	cmp	r3, #32
 80092c8:	f040 820b 	bne.w	80096e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	2319      	movs	r3, #25
 80092d2:	2201      	movs	r2, #1
 80092d4:	497c      	ldr	r1, [pc, #496]	; (80094c8 <HAL_I2C_Master_Receive+0x224>)
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 fb5a 	bl	8009990 <I2C_WaitOnFlagUntilTimeout>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80092e2:	2302      	movs	r3, #2
 80092e4:	e1fe      	b.n	80096e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d101      	bne.n	80092f4 <HAL_I2C_Master_Receive+0x50>
 80092f0:	2302      	movs	r3, #2
 80092f2:	e1f7      	b.n	80096e4 <HAL_I2C_Master_Receive+0x440>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b01      	cmp	r3, #1
 8009308:	d007      	beq.n	800931a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f042 0201 	orr.w	r2, r2, #1
 8009318:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009328:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2222      	movs	r2, #34	; 0x22
 800932e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2210      	movs	r2, #16
 8009336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	893a      	ldrh	r2, [r7, #8]
 800934a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009350:	b29a      	uxth	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	4a5c      	ldr	r2, [pc, #368]	; (80094cc <HAL_I2C_Master_Receive+0x228>)
 800935a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800935c:	8979      	ldrh	r1, [r7, #10]
 800935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 fa46 	bl	80097f4 <I2C_MasterRequestRead>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e1b8      	b.n	80096e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009376:	2b00      	cmp	r3, #0
 8009378:	d113      	bne.n	80093a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800937a:	2300      	movs	r3, #0
 800937c:	623b      	str	r3, [r7, #32]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	623b      	str	r3, [r7, #32]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	623b      	str	r3, [r7, #32]
 800938e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	e18c      	b.n	80096bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d11b      	bne.n	80093e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093ba:	2300      	movs	r3, #0
 80093bc:	61fb      	str	r3, [r7, #28]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	61fb      	str	r3, [r7, #28]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	61fb      	str	r3, [r7, #28]
 80093ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	e16c      	b.n	80096bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d11b      	bne.n	8009422 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800940a:	2300      	movs	r3, #0
 800940c:	61bb      	str	r3, [r7, #24]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	61bb      	str	r3, [r7, #24]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	61bb      	str	r3, [r7, #24]
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	e14c      	b.n	80096bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009430:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009432:	2300      	movs	r3, #0
 8009434:	617b      	str	r3, [r7, #20]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	617b      	str	r3, [r7, #20]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	617b      	str	r3, [r7, #20]
 8009446:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009448:	e138      	b.n	80096bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800944e:	2b03      	cmp	r3, #3
 8009450:	f200 80f1 	bhi.w	8009636 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009458:	2b01      	cmp	r3, #1
 800945a:	d123      	bne.n	80094a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800945c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800945e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 fbed 	bl	8009c40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e139      	b.n	80096e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	691a      	ldr	r2, [r3, #16]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	b2d2      	uxtb	r2, r2
 800947c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800948c:	3b01      	subs	r3, #1
 800948e:	b29a      	uxth	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009498:	b29b      	uxth	r3, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	b29a      	uxth	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80094a2:	e10b      	b.n	80096bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d14e      	bne.n	800954a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	2200      	movs	r2, #0
 80094b4:	4906      	ldr	r1, [pc, #24]	; (80094d0 <HAL_I2C_Master_Receive+0x22c>)
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 fa6a 	bl	8009990 <I2C_WaitOnFlagUntilTimeout>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d008      	beq.n	80094d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e10e      	b.n	80096e4 <HAL_I2C_Master_Receive+0x440>
 80094c6:	bf00      	nop
 80094c8:	00100002 	.word	0x00100002
 80094cc:	ffff0000 	.word	0xffff0000
 80094d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	691a      	ldr	r2, [r3, #16]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	b2d2      	uxtb	r2, r2
 80094f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009500:	3b01      	subs	r3, #1
 8009502:	b29a      	uxth	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800950c:	b29b      	uxth	r3, r3
 800950e:	3b01      	subs	r3, #1
 8009510:	b29a      	uxth	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	691a      	ldr	r2, [r3, #16]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	b2d2      	uxtb	r2, r2
 8009522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009532:	3b01      	subs	r3, #1
 8009534:	b29a      	uxth	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800953e:	b29b      	uxth	r3, r3
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009548:	e0b8      	b.n	80096bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	2200      	movs	r2, #0
 8009552:	4966      	ldr	r1, [pc, #408]	; (80096ec <HAL_I2C_Master_Receive+0x448>)
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 fa1b 	bl	8009990 <I2C_WaitOnFlagUntilTimeout>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e0bf      	b.n	80096e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	691a      	ldr	r2, [r3, #16]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	b2d2      	uxtb	r2, r2
 8009580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009590:	3b01      	subs	r3, #1
 8009592:	b29a      	uxth	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800959c:	b29b      	uxth	r3, r3
 800959e:	3b01      	subs	r3, #1
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	2200      	movs	r2, #0
 80095ae:	494f      	ldr	r1, [pc, #316]	; (80096ec <HAL_I2C_Master_Receive+0x448>)
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 f9ed 	bl	8009990 <I2C_WaitOnFlagUntilTimeout>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e091      	b.n	80096e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	691a      	ldr	r2, [r3, #16]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	b2d2      	uxtb	r2, r2
 80095dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ec:	3b01      	subs	r3, #1
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	691a      	ldr	r2, [r3, #16]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960c:	b2d2      	uxtb	r2, r2
 800960e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	1c5a      	adds	r2, r3, #1
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800961e:	3b01      	subs	r3, #1
 8009620:	b29a      	uxth	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800962a:	b29b      	uxth	r3, r3
 800962c:	3b01      	subs	r3, #1
 800962e:	b29a      	uxth	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009634:	e042      	b.n	80096bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 fb00 	bl	8009c40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e04c      	b.n	80096e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	691a      	ldr	r2, [r3, #16]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	b2d2      	uxtb	r2, r2
 8009656:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009666:	3b01      	subs	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009672:	b29b      	uxth	r3, r3
 8009674:	3b01      	subs	r3, #1
 8009676:	b29a      	uxth	r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	f003 0304 	and.w	r3, r3, #4
 8009686:	2b04      	cmp	r3, #4
 8009688:	d118      	bne.n	80096bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	691a      	ldr	r2, [r3, #16]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009694:	b2d2      	uxtb	r2, r2
 8009696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a6:	3b01      	subs	r3, #1
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f47f aec2 	bne.w	800944a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	e000      	b.n	80096e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80096e2:	2302      	movs	r3, #2
  }
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3728      	adds	r7, #40	; 0x28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	00010004 	.word	0x00010004

080096f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	607a      	str	r2, [r7, #4]
 80096fa:	603b      	str	r3, [r7, #0]
 80096fc:	460b      	mov	r3, r1
 80096fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2b08      	cmp	r3, #8
 800970a:	d006      	beq.n	800971a <I2C_MasterRequestWrite+0x2a>
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d003      	beq.n	800971a <I2C_MasterRequestWrite+0x2a>
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009718:	d108      	bne.n	800972c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	e00b      	b.n	8009744 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009730:	2b12      	cmp	r3, #18
 8009732:	d107      	bne.n	8009744 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009742:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 f91d 	bl	8009990 <I2C_WaitOnFlagUntilTimeout>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00d      	beq.n	8009778 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800976a:	d103      	bne.n	8009774 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009772:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e035      	b.n	80097e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009780:	d108      	bne.n	8009794 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009782:	897b      	ldrh	r3, [r7, #10]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	461a      	mov	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009790:	611a      	str	r2, [r3, #16]
 8009792:	e01b      	b.n	80097cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009794:	897b      	ldrh	r3, [r7, #10]
 8009796:	11db      	asrs	r3, r3, #7
 8009798:	b2db      	uxtb	r3, r3
 800979a:	f003 0306 	and.w	r3, r3, #6
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f063 030f 	orn	r3, r3, #15
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	490e      	ldr	r1, [pc, #56]	; (80097ec <I2C_MasterRequestWrite+0xfc>)
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 f943 	bl	8009a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e010      	b.n	80097e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80097c2:	897b      	ldrh	r3, [r7, #10]
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	4907      	ldr	r1, [pc, #28]	; (80097f0 <I2C_MasterRequestWrite+0x100>)
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 f933 	bl	8009a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e000      	b.n	80097e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	00010008 	.word	0x00010008
 80097f0:	00010002 	.word	0x00010002

080097f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b088      	sub	sp, #32
 80097f8:	af02      	add	r7, sp, #8
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	607a      	str	r2, [r7, #4]
 80097fe:	603b      	str	r3, [r7, #0]
 8009800:	460b      	mov	r3, r1
 8009802:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009818:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2b08      	cmp	r3, #8
 800981e:	d006      	beq.n	800982e <I2C_MasterRequestRead+0x3a>
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d003      	beq.n	800982e <I2C_MasterRequestRead+0x3a>
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800982c:	d108      	bne.n	8009840 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	e00b      	b.n	8009858 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009844:	2b11      	cmp	r3, #17
 8009846:	d107      	bne.n	8009858 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009856:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f893 	bl	8009990 <I2C_WaitOnFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00d      	beq.n	800988c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800987e:	d103      	bne.n	8009888 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009886:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e079      	b.n	8009980 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009894:	d108      	bne.n	80098a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009896:	897b      	ldrh	r3, [r7, #10]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	f043 0301 	orr.w	r3, r3, #1
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	611a      	str	r2, [r3, #16]
 80098a6:	e05f      	b.n	8009968 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80098a8:	897b      	ldrh	r3, [r7, #10]
 80098aa:	11db      	asrs	r3, r3, #7
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 0306 	and.w	r3, r3, #6
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f063 030f 	orn	r3, r3, #15
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	4930      	ldr	r1, [pc, #192]	; (8009988 <I2C_MasterRequestRead+0x194>)
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f000 f8b9 	bl	8009a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e054      	b.n	8009980 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80098d6:	897b      	ldrh	r3, [r7, #10]
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	4929      	ldr	r1, [pc, #164]	; (800998c <I2C_MasterRequestRead+0x198>)
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 f8a9 	bl	8009a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e044      	b.n	8009980 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098f6:	2300      	movs	r3, #0
 80098f8:	613b      	str	r3, [r7, #16]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	613b      	str	r3, [r7, #16]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	613b      	str	r3, [r7, #16]
 800990a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800991a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 f831 	bl	8009990 <I2C_WaitOnFlagUntilTimeout>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00d      	beq.n	8009950 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800993e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009942:	d103      	bne.n	800994c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800994a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800994c:	2303      	movs	r3, #3
 800994e:	e017      	b.n	8009980 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009950:	897b      	ldrh	r3, [r7, #10]
 8009952:	11db      	asrs	r3, r3, #7
 8009954:	b2db      	uxtb	r3, r3
 8009956:	f003 0306 	and.w	r3, r3, #6
 800995a:	b2db      	uxtb	r3, r3
 800995c:	f063 030e 	orn	r3, r3, #14
 8009960:	b2da      	uxtb	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	4907      	ldr	r1, [pc, #28]	; (800998c <I2C_MasterRequestRead+0x198>)
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 f865 	bl	8009a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e000      	b.n	8009980 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3718      	adds	r7, #24
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	00010008 	.word	0x00010008
 800998c:	00010002 	.word	0x00010002

08009990 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	4613      	mov	r3, r2
 800999e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099a0:	e025      	b.n	80099ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a8:	d021      	beq.n	80099ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099aa:	f7fd f8a7 	bl	8006afc <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d302      	bcc.n	80099c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d116      	bne.n	80099ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	f043 0220 	orr.w	r2, r3, #32
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e023      	b.n	8009a36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	0c1b      	lsrs	r3, r3, #16
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d10d      	bne.n	8009a14 <I2C_WaitOnFlagUntilTimeout+0x84>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	43da      	mvns	r2, r3
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	4013      	ands	r3, r2
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	bf0c      	ite	eq
 8009a0a:	2301      	moveq	r3, #1
 8009a0c:	2300      	movne	r3, #0
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	461a      	mov	r2, r3
 8009a12:	e00c      	b.n	8009a2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	43da      	mvns	r2, r3
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	4013      	ands	r3, r2
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	bf0c      	ite	eq
 8009a26:	2301      	moveq	r3, #1
 8009a28:	2300      	movne	r3, #0
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d0b6      	beq.n	80099a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009a4c:	e051      	b.n	8009af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	695b      	ldr	r3, [r3, #20]
 8009a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a5c:	d123      	bne.n	8009aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2220      	movs	r2, #32
 8009a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a92:	f043 0204 	orr.w	r2, r3, #4
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e046      	b.n	8009b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aac:	d021      	beq.n	8009af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aae:	f7fd f825 	bl	8006afc <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d302      	bcc.n	8009ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d116      	bne.n	8009af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2220      	movs	r2, #32
 8009ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	f043 0220 	orr.w	r2, r3, #32
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e020      	b.n	8009b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	0c1b      	lsrs	r3, r3, #16
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d10c      	bne.n	8009b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	43da      	mvns	r2, r3
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	4013      	ands	r3, r2
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	bf14      	ite	ne
 8009b0e:	2301      	movne	r3, #1
 8009b10:	2300      	moveq	r3, #0
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	e00b      	b.n	8009b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	43da      	mvns	r2, r3
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	4013      	ands	r3, r2
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bf14      	ite	ne
 8009b28:	2301      	movne	r3, #1
 8009b2a:	2300      	moveq	r3, #0
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d18d      	bne.n	8009a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b48:	e02d      	b.n	8009ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 f8ce 	bl	8009cec <I2C_IsAcknowledgeFailed>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e02d      	b.n	8009bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b60:	d021      	beq.n	8009ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b62:	f7fc ffcb 	bl	8006afc <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d302      	bcc.n	8009b78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d116      	bne.n	8009ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	f043 0220 	orr.w	r2, r3, #32
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e007      	b.n	8009bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bb0:	2b80      	cmp	r3, #128	; 0x80
 8009bb2:	d1ca      	bne.n	8009b4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b084      	sub	sp, #16
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	60b9      	str	r1, [r7, #8]
 8009bc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009bca:	e02d      	b.n	8009c28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 f88d 	bl	8009cec <I2C_IsAcknowledgeFailed>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e02d      	b.n	8009c38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be2:	d021      	beq.n	8009c28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009be4:	f7fc ff8a 	bl	8006afc <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d302      	bcc.n	8009bfa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d116      	bne.n	8009c28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2220      	movs	r2, #32
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c14:	f043 0220 	orr.w	r2, r3, #32
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e007      	b.n	8009c38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	f003 0304 	and.w	r3, r3, #4
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	d1ca      	bne.n	8009bcc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009c4c:	e042      	b.n	8009cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	f003 0310 	and.w	r3, r3, #16
 8009c58:	2b10      	cmp	r3, #16
 8009c5a:	d119      	bne.n	8009c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f06f 0210 	mvn.w	r2, #16
 8009c64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e029      	b.n	8009ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c90:	f7fc ff34 	bl	8006afc <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d302      	bcc.n	8009ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d116      	bne.n	8009cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc0:	f043 0220 	orr.w	r2, r3, #32
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e007      	b.n	8009ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cde:	2b40      	cmp	r3, #64	; 0x40
 8009ce0:	d1b5      	bne.n	8009c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d02:	d11b      	bne.n	8009d3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2220      	movs	r2, #32
 8009d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	f043 0204 	orr.w	r2, r3, #4
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e000      	b.n	8009d3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e034      	b.n	8009dc6 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009d64:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f245 5255 	movw	r2, #21845	; 0x5555
 8009d6e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	6852      	ldr	r2, [r2, #4]
 8009d78:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	6892      	ldr	r2, [r2, #8]
 8009d82:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009d84:	f7fc feba 	bl	8006afc <HAL_GetTick>
 8009d88:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009d8a:	e00f      	b.n	8009dac <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009d8c:	f7fc feb6 	bl	8006afc <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	2b31      	cmp	r3, #49	; 0x31
 8009d98:	d908      	bls.n	8009dac <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	f003 0303 	and.w	r3, r3, #3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e00c      	b.n	8009dc6 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	f003 0303 	and.w	r3, r3, #3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1e8      	bne.n	8009d8c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009dc2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009dde:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009df0:	b08f      	sub	sp, #60	; 0x3c
 8009df2:	af0a      	add	r7, sp, #40	; 0x28
 8009df4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e116      	b.n	800a02e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d106      	bne.n	8009e20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f00d fb56 	bl	80174cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2203      	movs	r2, #3
 8009e24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f005 fe2b 	bl	800fa9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	603b      	str	r3, [r7, #0]
 8009e4a:	687e      	ldr	r6, [r7, #4]
 8009e4c:	466d      	mov	r5, sp
 8009e4e:	f106 0410 	add.w	r4, r6, #16
 8009e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009e5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009e62:	1d33      	adds	r3, r6, #4
 8009e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e66:	6838      	ldr	r0, [r7, #0]
 8009e68:	f005 fd02 	bl	800f870 <USB_CoreInit>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2202      	movs	r2, #2
 8009e76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e0d7      	b.n	800a02e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2100      	movs	r1, #0
 8009e84:	4618      	mov	r0, r3
 8009e86:	f005 fe19 	bl	800fabc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	73fb      	strb	r3, [r7, #15]
 8009e8e:	e04a      	b.n	8009f26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009e90:	7bfa      	ldrb	r2, [r7, #15]
 8009e92:	6879      	ldr	r1, [r7, #4]
 8009e94:	4613      	mov	r3, r2
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	1a9b      	subs	r3, r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	440b      	add	r3, r1
 8009e9e:	333d      	adds	r3, #61	; 0x3d
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009ea4:	7bfa      	ldrb	r2, [r7, #15]
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	00db      	lsls	r3, r3, #3
 8009eac:	1a9b      	subs	r3, r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	440b      	add	r3, r1
 8009eb2:	333c      	adds	r3, #60	; 0x3c
 8009eb4:	7bfa      	ldrb	r2, [r7, #15]
 8009eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009eb8:	7bfa      	ldrb	r2, [r7, #15]
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
 8009ebc:	b298      	uxth	r0, r3
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	1a9b      	subs	r3, r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	440b      	add	r3, r1
 8009eca:	3342      	adds	r3, #66	; 0x42
 8009ecc:	4602      	mov	r2, r0
 8009ece:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009ed0:	7bfa      	ldrb	r2, [r7, #15]
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	1a9b      	subs	r3, r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	440b      	add	r3, r1
 8009ede:	333f      	adds	r3, #63	; 0x3f
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009ee4:	7bfa      	ldrb	r2, [r7, #15]
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	00db      	lsls	r3, r3, #3
 8009eec:	1a9b      	subs	r3, r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	440b      	add	r3, r1
 8009ef2:	3344      	adds	r3, #68	; 0x44
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009ef8:	7bfa      	ldrb	r2, [r7, #15]
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	4613      	mov	r3, r2
 8009efe:	00db      	lsls	r3, r3, #3
 8009f00:	1a9b      	subs	r3, r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	440b      	add	r3, r1
 8009f06:	3348      	adds	r3, #72	; 0x48
 8009f08:	2200      	movs	r2, #0
 8009f0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009f0c:	7bfa      	ldrb	r2, [r7, #15]
 8009f0e:	6879      	ldr	r1, [r7, #4]
 8009f10:	4613      	mov	r3, r2
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	1a9b      	subs	r3, r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	440b      	add	r3, r1
 8009f1a:	3350      	adds	r3, #80	; 0x50
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
 8009f22:	3301      	adds	r3, #1
 8009f24:	73fb      	strb	r3, [r7, #15]
 8009f26:	7bfa      	ldrb	r2, [r7, #15]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d3af      	bcc.n	8009e90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f30:	2300      	movs	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
 8009f34:	e044      	b.n	8009fc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009f36:	7bfa      	ldrb	r2, [r7, #15]
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	00db      	lsls	r3, r3, #3
 8009f3e:	1a9b      	subs	r3, r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	440b      	add	r3, r1
 8009f44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009f48:	2200      	movs	r2, #0
 8009f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009f4c:	7bfa      	ldrb	r2, [r7, #15]
 8009f4e:	6879      	ldr	r1, [r7, #4]
 8009f50:	4613      	mov	r3, r2
 8009f52:	00db      	lsls	r3, r3, #3
 8009f54:	1a9b      	subs	r3, r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	440b      	add	r3, r1
 8009f5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009f5e:	7bfa      	ldrb	r2, [r7, #15]
 8009f60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009f62:	7bfa      	ldrb	r2, [r7, #15]
 8009f64:	6879      	ldr	r1, [r7, #4]
 8009f66:	4613      	mov	r3, r2
 8009f68:	00db      	lsls	r3, r3, #3
 8009f6a:	1a9b      	subs	r3, r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	440b      	add	r3, r1
 8009f70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009f74:	2200      	movs	r2, #0
 8009f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009f78:	7bfa      	ldrb	r2, [r7, #15]
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	00db      	lsls	r3, r3, #3
 8009f80:	1a9b      	subs	r3, r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	440b      	add	r3, r1
 8009f86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009f8e:	7bfa      	ldrb	r2, [r7, #15]
 8009f90:	6879      	ldr	r1, [r7, #4]
 8009f92:	4613      	mov	r3, r2
 8009f94:	00db      	lsls	r3, r3, #3
 8009f96:	1a9b      	subs	r3, r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	440b      	add	r3, r1
 8009f9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009fa4:	7bfa      	ldrb	r2, [r7, #15]
 8009fa6:	6879      	ldr	r1, [r7, #4]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	00db      	lsls	r3, r3, #3
 8009fac:	1a9b      	subs	r3, r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	440b      	add	r3, r1
 8009fb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	73fb      	strb	r3, [r7, #15]
 8009fc0:	7bfa      	ldrb	r2, [r7, #15]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d3b5      	bcc.n	8009f36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	687e      	ldr	r6, [r7, #4]
 8009fd2:	466d      	mov	r5, sp
 8009fd4:	f106 0410 	add.w	r4, r6, #16
 8009fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fe0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009fe4:	e885 0003 	stmia.w	r5, {r0, r1}
 8009fe8:	1d33      	adds	r3, r6, #4
 8009fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009fec:	6838      	ldr	r0, [r7, #0]
 8009fee:	f005 fdb1 	bl	800fb54 <USB_DevInit>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d005      	beq.n	800a004 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e014      	b.n	800a02e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d102      	bne.n	800a022 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f001 f8bf 	bl	800b1a0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4618      	mov	r0, r3
 800a028:	f006 fe20 	bl	8010c6c <USB_DevDisconnect>

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a036 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d101      	bne.n	800a052 <HAL_PCD_Start+0x1c>
 800a04e:	2302      	movs	r3, #2
 800a050:	e020      	b.n	800a094 <HAL_PCD_Start+0x5e>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d109      	bne.n	800a076 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a066:	2b01      	cmp	r3, #1
 800a068:	d005      	beq.n	800a076 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f005 fcfc 	bl	800fa78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4618      	mov	r0, r3
 800a086:	f006 fdd0 	bl	8010c2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a09c:	b590      	push	{r4, r7, lr}
 800a09e:	b08d      	sub	sp, #52	; 0x34
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f006 fe8e 	bl	8010dd4 <USB_GetMode>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f040 83ca 	bne.w	800a854 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f006 fdf2 	bl	8010cae <USB_ReadInterrupts>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 83c0 	beq.w	800a852 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f006 fde9 	bl	8010cae <USB_ReadInterrupts>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d107      	bne.n	800a0f6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	695a      	ldr	r2, [r3, #20]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f002 0202 	and.w	r2, r2, #2
 800a0f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f006 fdd7 	bl	8010cae <USB_ReadInterrupts>
 800a100:	4603      	mov	r3, r0
 800a102:	f003 0310 	and.w	r3, r3, #16
 800a106:	2b10      	cmp	r3, #16
 800a108:	d161      	bne.n	800a1ce <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	699a      	ldr	r2, [r3, #24]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f022 0210 	bic.w	r2, r2, #16
 800a118:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	f003 020f 	and.w	r2, r3, #15
 800a126:	4613      	mov	r3, r2
 800a128:	00db      	lsls	r3, r3, #3
 800a12a:	1a9b      	subs	r3, r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	4413      	add	r3, r2
 800a136:	3304      	adds	r3, #4
 800a138:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	0c5b      	lsrs	r3, r3, #17
 800a13e:	f003 030f 	and.w	r3, r3, #15
 800a142:	2b02      	cmp	r3, #2
 800a144:	d124      	bne.n	800a190 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a14c:	4013      	ands	r3, r2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d035      	beq.n	800a1be <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	091b      	lsrs	r3, r3, #4
 800a15a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a15c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a160:	b29b      	uxth	r3, r3
 800a162:	461a      	mov	r2, r3
 800a164:	6a38      	ldr	r0, [r7, #32]
 800a166:	f006 fc0e 	bl	8010986 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	091b      	lsrs	r3, r3, #4
 800a172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a176:	441a      	add	r2, r3
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	699a      	ldr	r2, [r3, #24]
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	091b      	lsrs	r3, r3, #4
 800a184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a188:	441a      	add	r2, r3
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	619a      	str	r2, [r3, #24]
 800a18e:	e016      	b.n	800a1be <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	0c5b      	lsrs	r3, r3, #17
 800a194:	f003 030f 	and.w	r3, r3, #15
 800a198:	2b06      	cmp	r3, #6
 800a19a:	d110      	bne.n	800a1be <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a1a2:	2208      	movs	r2, #8
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6a38      	ldr	r0, [r7, #32]
 800a1a8:	f006 fbed 	bl	8010986 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	699a      	ldr	r2, [r3, #24]
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	091b      	lsrs	r3, r3, #4
 800a1b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1b8:	441a      	add	r2, r3
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	699a      	ldr	r2, [r3, #24]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f042 0210 	orr.w	r2, r2, #16
 800a1cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f006 fd6b 	bl	8010cae <USB_ReadInterrupts>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a1e2:	d16e      	bne.n	800a2c2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f006 fd71 	bl	8010cd4 <USB_ReadDevAllOutEpInterrupt>
 800a1f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a1f4:	e062      	b.n	800a2bc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d057      	beq.n	800a2b0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a206:	b2d2      	uxtb	r2, r2
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f006 fd96 	bl	8010d3c <USB_ReadDevOutEPInterrupt>
 800a210:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00c      	beq.n	800a236 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	015a      	lsls	r2, r3, #5
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	4413      	add	r3, r2
 800a224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a228:	461a      	mov	r2, r3
 800a22a:	2301      	movs	r3, #1
 800a22c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a22e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fe0b 	bl	800ae4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f003 0308 	and.w	r3, r3, #8
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00c      	beq.n	800a25a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24c:	461a      	mov	r2, r3
 800a24e:	2308      	movs	r3, #8
 800a250:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 ff05 	bl	800b064 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f003 0310 	and.w	r3, r3, #16
 800a260:	2b00      	cmp	r3, #0
 800a262:	d008      	beq.n	800a276 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a270:	461a      	mov	r2, r3
 800a272:	2310      	movs	r3, #16
 800a274:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	f003 0320 	and.w	r3, r3, #32
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d008      	beq.n	800a292 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	4413      	add	r3, r2
 800a288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28c:	461a      	mov	r2, r3
 800a28e:	2320      	movs	r3, #32
 800a290:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d009      	beq.n	800a2b0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b8:	085b      	lsrs	r3, r3, #1
 800a2ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d199      	bne.n	800a1f6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f006 fcf1 	bl	8010cae <USB_ReadInterrupts>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a2d6:	f040 80c0 	bne.w	800a45a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f006 fd12 	bl	8010d08 <USB_ReadDevAllInEpInterrupt>
 800a2e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a2ea:	e0b2      	b.n	800a452 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	f003 0301 	and.w	r3, r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 80a7 	beq.w	800a446 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2fe:	b2d2      	uxtb	r2, r2
 800a300:	4611      	mov	r1, r2
 800a302:	4618      	mov	r0, r3
 800a304:	f006 fd38 	bl	8010d78 <USB_ReadDevInEPInterrupt>
 800a308:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	2b00      	cmp	r3, #0
 800a312:	d057      	beq.n	800a3c4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	f003 030f 	and.w	r3, r3, #15
 800a31a:	2201      	movs	r2, #1
 800a31c:	fa02 f303 	lsl.w	r3, r2, r3
 800a320:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	43db      	mvns	r3, r3
 800a32e:	69f9      	ldr	r1, [r7, #28]
 800a330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a334:	4013      	ands	r3, r2
 800a336:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33a:	015a      	lsls	r2, r3, #5
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	4413      	add	r3, r2
 800a340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a344:	461a      	mov	r2, r3
 800a346:	2301      	movs	r3, #1
 800a348:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d132      	bne.n	800a3b8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a356:	4613      	mov	r3, r2
 800a358:	00db      	lsls	r3, r3, #3
 800a35a:	1a9b      	subs	r3, r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	440b      	add	r3, r1
 800a360:	3348      	adds	r3, #72	; 0x48
 800a362:	6819      	ldr	r1, [r3, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a368:	4613      	mov	r3, r2
 800a36a:	00db      	lsls	r3, r3, #3
 800a36c:	1a9b      	subs	r3, r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4403      	add	r3, r0
 800a372:	3344      	adds	r3, #68	; 0x44
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4419      	add	r1, r3
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a37c:	4613      	mov	r3, r2
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	1a9b      	subs	r3, r3, r2
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4403      	add	r3, r0
 800a386:	3348      	adds	r3, #72	; 0x48
 800a388:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d113      	bne.n	800a3b8 <HAL_PCD_IRQHandler+0x31c>
 800a390:	6879      	ldr	r1, [r7, #4]
 800a392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a394:	4613      	mov	r3, r2
 800a396:	00db      	lsls	r3, r3, #3
 800a398:	1a9b      	subs	r3, r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	440b      	add	r3, r1
 800a39e:	3350      	adds	r3, #80	; 0x50
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d108      	bne.n	800a3b8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6818      	ldr	r0, [r3, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	2101      	movs	r1, #1
 800a3b4:	f006 fd40 	bl	8010e38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	4619      	mov	r1, r3
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f00d f913 	bl	80175ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f003 0308 	and.w	r3, r3, #8
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d008      	beq.n	800a3e0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	015a      	lsls	r2, r3, #5
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3da:	461a      	mov	r2, r3
 800a3dc:	2308      	movs	r3, #8
 800a3de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f003 0310 	and.w	r3, r3, #16
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d008      	beq.n	800a3fc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	015a      	lsls	r2, r3, #5
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a402:	2b00      	cmp	r3, #0
 800a404:	d008      	beq.n	800a418 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a412:	461a      	mov	r2, r3
 800a414:	2340      	movs	r3, #64	; 0x40
 800a416:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d008      	beq.n	800a434 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a424:	015a      	lsls	r2, r3, #5
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	4413      	add	r3, r2
 800a42a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a42e:	461a      	mov	r2, r3
 800a430:	2302      	movs	r3, #2
 800a432:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a43e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fc75 	bl	800ad30 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	3301      	adds	r3, #1
 800a44a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	085b      	lsrs	r3, r3, #1
 800a450:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	2b00      	cmp	r3, #0
 800a456:	f47f af49 	bne.w	800a2ec <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4618      	mov	r0, r3
 800a460:	f006 fc25 	bl	8010cae <USB_ReadInterrupts>
 800a464:	4603      	mov	r3, r0
 800a466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a46a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a46e:	d122      	bne.n	800a4b6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	69fa      	ldr	r2, [r7, #28]
 800a47a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a47e:	f023 0301 	bic.w	r3, r3, #1
 800a482:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d108      	bne.n	800a4a0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a496:	2100      	movs	r1, #0
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f00d fb15 	bl	8017ac8 <HAL_PCDEx_LPM_Callback>
 800a49e:	e002      	b.n	800a4a6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f00d f919 	bl	80176d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	695a      	ldr	r2, [r3, #20]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a4b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f006 fbf7 	bl	8010cae <USB_ReadInterrupts>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4ca:	d112      	bne.n	800a4f2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d102      	bne.n	800a4e2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f00d f8d5 	bl	801768c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	695a      	ldr	r2, [r3, #20]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a4f0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f006 fbd9 	bl	8010cae <USB_ReadInterrupts>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a506:	d121      	bne.n	800a54c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	695a      	ldr	r2, [r3, #20]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a516:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d111      	bne.n	800a546 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a530:	089b      	lsrs	r3, r3, #2
 800a532:	f003 020f 	and.w	r2, r3, #15
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a53c:	2101      	movs	r1, #1
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f00d fac2 	bl	8017ac8 <HAL_PCDEx_LPM_Callback>
 800a544:	e002      	b.n	800a54c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f00d f8a0 	bl	801768c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4618      	mov	r0, r3
 800a552:	f006 fbac 	bl	8010cae <USB_ReadInterrupts>
 800a556:	4603      	mov	r3, r0
 800a558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a55c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a560:	f040 80c7 	bne.w	800a6f2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	69fa      	ldr	r2, [r7, #28]
 800a56e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a572:	f023 0301 	bic.w	r3, r3, #1
 800a576:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2110      	movs	r1, #16
 800a57e:	4618      	mov	r0, r3
 800a580:	f005 fc46 	bl	800fe10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a584:	2300      	movs	r3, #0
 800a586:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a588:	e056      	b.n	800a638 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	015a      	lsls	r2, r3, #5
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	4413      	add	r3, r2
 800a592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a596:	461a      	mov	r2, r3
 800a598:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a59c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a0:	015a      	lsls	r2, r3, #5
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ae:	0151      	lsls	r1, r2, #5
 800a5b0:	69fa      	ldr	r2, [r7, #28]
 800a5b2:	440a      	add	r2, r1
 800a5b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5bc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c0:	015a      	lsls	r2, r3, #5
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ce:	0151      	lsls	r1, r2, #5
 800a5d0:	69fa      	ldr	r2, [r7, #28]
 800a5d2:	440a      	add	r2, r1
 800a5d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a5dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a5f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f4:	015a      	lsls	r2, r3, #5
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a602:	0151      	lsls	r1, r2, #5
 800a604:	69fa      	ldr	r2, [r7, #28]
 800a606:	440a      	add	r2, r1
 800a608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a60c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a610:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a622:	0151      	lsls	r1, r2, #5
 800a624:	69fa      	ldr	r2, [r7, #28]
 800a626:	440a      	add	r2, r1
 800a628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a62c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a630:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a634:	3301      	adds	r3, #1
 800a636:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a63e:	429a      	cmp	r2, r3
 800a640:	d3a3      	bcc.n	800a58a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	69fa      	ldr	r2, [r7, #28]
 800a64c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a650:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a654:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d016      	beq.n	800a68c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a668:	69fa      	ldr	r2, [r7, #28]
 800a66a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a66e:	f043 030b 	orr.w	r3, r3, #11
 800a672:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a67e:	69fa      	ldr	r2, [r7, #28]
 800a680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a684:	f043 030b 	orr.w	r3, r3, #11
 800a688:	6453      	str	r3, [r2, #68]	; 0x44
 800a68a:	e015      	b.n	800a6b8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a692:	695b      	ldr	r3, [r3, #20]
 800a694:	69fa      	ldr	r2, [r7, #28]
 800a696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a69a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a69e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a6a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	69fa      	ldr	r2, [r7, #28]
 800a6ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6b2:	f043 030b 	orr.w	r3, r3, #11
 800a6b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	69fa      	ldr	r2, [r7, #28]
 800a6c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a6ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6818      	ldr	r0, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a6dc:	461a      	mov	r2, r3
 800a6de:	f006 fbab 	bl	8010e38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	695a      	ldr	r2, [r3, #20]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a6f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f006 fad9 	bl	8010cae <USB_ReadInterrupts>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a706:	d124      	bne.n	800a752 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f006 fb6f 	bl	8010df0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4618      	mov	r0, r3
 800a718:	f005 fbd7 	bl	800feca <USB_GetDevSpeed>
 800a71c:	4603      	mov	r3, r0
 800a71e:	461a      	mov	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681c      	ldr	r4, [r3, #0]
 800a728:	f000 fe94 	bl	800b454 <HAL_RCC_GetHCLKFreq>
 800a72c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a732:	b2db      	uxtb	r3, r3
 800a734:	461a      	mov	r2, r3
 800a736:	4620      	mov	r0, r4
 800a738:	f005 f8fc 	bl	800f934 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f00c ff7c 	bl	801763a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	695a      	ldr	r2, [r3, #20]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a750:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4618      	mov	r0, r3
 800a758:	f006 faa9 	bl	8010cae <USB_ReadInterrupts>
 800a75c:	4603      	mov	r3, r0
 800a75e:	f003 0308 	and.w	r3, r3, #8
 800a762:	2b08      	cmp	r3, #8
 800a764:	d10a      	bne.n	800a77c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f00c ff59 	bl	801761e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	695a      	ldr	r2, [r3, #20]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f002 0208 	and.w	r2, r2, #8
 800a77a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4618      	mov	r0, r3
 800a782:	f006 fa94 	bl	8010cae <USB_ReadInterrupts>
 800a786:	4603      	mov	r3, r0
 800a788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a78c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a790:	d10f      	bne.n	800a7b2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a792:	2300      	movs	r3, #0
 800a794:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f00c ffbb 	bl	8017718 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	695a      	ldr	r2, [r3, #20]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a7b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f006 fa79 	bl	8010cae <USB_ReadInterrupts>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7c6:	d10f      	bne.n	800a7e8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f00c ff8e 	bl	80176f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	695a      	ldr	r2, [r3, #20]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a7e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f006 fa5e 	bl	8010cae <USB_ReadInterrupts>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7fc:	d10a      	bne.n	800a814 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f00c ff9c 	bl	801773c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	695a      	ldr	r2, [r3, #20]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a812:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4618      	mov	r0, r3
 800a81a:	f006 fa48 	bl	8010cae <USB_ReadInterrupts>
 800a81e:	4603      	mov	r3, r0
 800a820:	f003 0304 	and.w	r3, r3, #4
 800a824:	2b04      	cmp	r3, #4
 800a826:	d115      	bne.n	800a854 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	f003 0304 	and.w	r3, r3, #4
 800a836:	2b00      	cmp	r3, #0
 800a838:	d002      	beq.n	800a840 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f00c ff8c 	bl	8017758 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6859      	ldr	r1, [r3, #4]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	69ba      	ldr	r2, [r7, #24]
 800a84c:	430a      	orrs	r2, r1
 800a84e:	605a      	str	r2, [r3, #4]
 800a850:	e000      	b.n	800a854 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800a852:	bf00      	nop
    }
  }
}
 800a854:	3734      	adds	r7, #52	; 0x34
 800a856:	46bd      	mov	sp, r7
 800a858:	bd90      	pop	{r4, r7, pc}

0800a85a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	460b      	mov	r3, r1
 800a864:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d101      	bne.n	800a874 <HAL_PCD_SetAddress+0x1a>
 800a870:	2302      	movs	r3, #2
 800a872:	e013      	b.n	800a89c <HAL_PCD_SetAddress+0x42>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	78fa      	ldrb	r2, [r7, #3]
 800a880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	78fa      	ldrb	r2, [r7, #3]
 800a88a:	4611      	mov	r1, r2
 800a88c:	4618      	mov	r0, r3
 800a88e:	f006 f9a6 	bl	8010bde <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	70fb      	strb	r3, [r7, #3]
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	803b      	strh	r3, [r7, #0]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a8c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	da0f      	bge.n	800a8ea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8ca:	78fb      	ldrb	r3, [r7, #3]
 800a8cc:	f003 020f 	and.w	r2, r3, #15
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	00db      	lsls	r3, r3, #3
 800a8d4:	1a9b      	subs	r3, r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	3338      	adds	r3, #56	; 0x38
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	4413      	add	r3, r2
 800a8de:	3304      	adds	r3, #4
 800a8e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	705a      	strb	r2, [r3, #1]
 800a8e8:	e00f      	b.n	800a90a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a8ea:	78fb      	ldrb	r3, [r7, #3]
 800a8ec:	f003 020f 	and.w	r2, r3, #15
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	1a9b      	subs	r3, r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	4413      	add	r3, r2
 800a900:	3304      	adds	r3, #4
 800a902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a90a:	78fb      	ldrb	r3, [r7, #3]
 800a90c:	f003 030f 	and.w	r3, r3, #15
 800a910:	b2da      	uxtb	r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a916:	883a      	ldrh	r2, [r7, #0]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	78ba      	ldrb	r2, [r7, #2]
 800a920:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	785b      	ldrb	r3, [r3, #1]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d004      	beq.n	800a934 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	b29a      	uxth	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a934:	78bb      	ldrb	r3, [r7, #2]
 800a936:	2b02      	cmp	r3, #2
 800a938:	d102      	bne.n	800a940 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2200      	movs	r2, #0
 800a93e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a946:	2b01      	cmp	r3, #1
 800a948:	d101      	bne.n	800a94e <HAL_PCD_EP_Open+0xaa>
 800a94a:	2302      	movs	r3, #2
 800a94c:	e00e      	b.n	800a96c <HAL_PCD_EP_Open+0xc8>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68f9      	ldr	r1, [r7, #12]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f005 fad9 	bl	800ff14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a96a:	7afb      	ldrb	r3, [r7, #11]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a984:	2b00      	cmp	r3, #0
 800a986:	da0f      	bge.n	800a9a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	f003 020f 	and.w	r2, r3, #15
 800a98e:	4613      	mov	r3, r2
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	1a9b      	subs	r3, r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	3338      	adds	r3, #56	; 0x38
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	4413      	add	r3, r2
 800a99c:	3304      	adds	r3, #4
 800a99e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	705a      	strb	r2, [r3, #1]
 800a9a6:	e00f      	b.n	800a9c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	f003 020f 	and.w	r2, r3, #15
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	00db      	lsls	r3, r3, #3
 800a9b2:	1a9b      	subs	r3, r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	4413      	add	r3, r2
 800a9be:	3304      	adds	r3, #4
 800a9c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a9c8:	78fb      	ldrb	r3, [r7, #3]
 800a9ca:	f003 030f 	and.w	r3, r3, #15
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d101      	bne.n	800a9e2 <HAL_PCD_EP_Close+0x6e>
 800a9de:	2302      	movs	r3, #2
 800a9e0:	e00e      	b.n	800aa00 <HAL_PCD_EP_Close+0x8c>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68f9      	ldr	r1, [r7, #12]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f005 fb17 	bl	8010024 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	607a      	str	r2, [r7, #4]
 800aa12:	603b      	str	r3, [r7, #0]
 800aa14:	460b      	mov	r3, r1
 800aa16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa18:	7afb      	ldrb	r3, [r7, #11]
 800aa1a:	f003 020f 	and.w	r2, r3, #15
 800aa1e:	4613      	mov	r3, r2
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	1a9b      	subs	r3, r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	3304      	adds	r3, #4
 800aa30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2200      	movs	r2, #0
 800aa42:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	2200      	movs	r2, #0
 800aa48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aa4a:	7afb      	ldrb	r3, [r7, #11]
 800aa4c:	f003 030f 	and.w	r3, r3, #15
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d102      	bne.n	800aa64 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800aa64:	7afb      	ldrb	r3, [r7, #11]
 800aa66:	f003 030f 	and.w	r3, r3, #15
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d109      	bne.n	800aa82 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6818      	ldr	r0, [r3, #0]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6979      	ldr	r1, [r7, #20]
 800aa7c:	f005 fdf2 	bl	8010664 <USB_EP0StartXfer>
 800aa80:	e008      	b.n	800aa94 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6818      	ldr	r0, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	6979      	ldr	r1, [r7, #20]
 800aa90:	f005 fba4 	bl	80101dc <USB_EPStartXfer>
  }

  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b083      	sub	sp, #12
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800aaaa:	78fb      	ldrb	r3, [r7, #3]
 800aaac:	f003 020f 	and.w	r2, r3, #15
 800aab0:	6879      	ldr	r1, [r7, #4]
 800aab2:	4613      	mov	r3, r2
 800aab4:	00db      	lsls	r3, r3, #3
 800aab6:	1a9b      	subs	r3, r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	440b      	add	r3, r1
 800aabc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800aac0:	681b      	ldr	r3, [r3, #0]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b086      	sub	sp, #24
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	60f8      	str	r0, [r7, #12]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	603b      	str	r3, [r7, #0]
 800aada:	460b      	mov	r3, r1
 800aadc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aade:	7afb      	ldrb	r3, [r7, #11]
 800aae0:	f003 020f 	and.w	r2, r3, #15
 800aae4:	4613      	mov	r3, r2
 800aae6:	00db      	lsls	r3, r3, #3
 800aae8:	1a9b      	subs	r3, r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	3338      	adds	r3, #56	; 0x38
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2200      	movs	r2, #0
 800ab06:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab0e:	7afb      	ldrb	r3, [r7, #11]
 800ab10:	f003 030f 	and.w	r3, r3, #15
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d102      	bne.n	800ab28 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ab28:	7afb      	ldrb	r3, [r7, #11]
 800ab2a:	f003 030f 	and.w	r3, r3, #15
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d109      	bne.n	800ab46 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6818      	ldr	r0, [r3, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	6979      	ldr	r1, [r7, #20]
 800ab40:	f005 fd90 	bl	8010664 <USB_EP0StartXfer>
 800ab44:	e008      	b.n	800ab58 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6818      	ldr	r0, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	461a      	mov	r2, r3
 800ab52:	6979      	ldr	r1, [r7, #20]
 800ab54:	f005 fb42 	bl	80101dc <USB_EPStartXfer>
  }

  return HAL_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b084      	sub	sp, #16
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ab6e:	78fb      	ldrb	r3, [r7, #3]
 800ab70:	f003 020f 	and.w	r2, r3, #15
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d901      	bls.n	800ab80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e050      	b.n	800ac22 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ab80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	da0f      	bge.n	800aba8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab88:	78fb      	ldrb	r3, [r7, #3]
 800ab8a:	f003 020f 	and.w	r2, r3, #15
 800ab8e:	4613      	mov	r3, r2
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	1a9b      	subs	r3, r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	3338      	adds	r3, #56	; 0x38
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2201      	movs	r2, #1
 800aba4:	705a      	strb	r2, [r3, #1]
 800aba6:	e00d      	b.n	800abc4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800aba8:	78fa      	ldrb	r2, [r7, #3]
 800abaa:	4613      	mov	r3, r2
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	1a9b      	subs	r3, r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	4413      	add	r3, r2
 800abba:	3304      	adds	r3, #4
 800abbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2201      	movs	r2, #1
 800abc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800abca:	78fb      	ldrb	r3, [r7, #3]
 800abcc:	f003 030f 	and.w	r3, r3, #15
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d101      	bne.n	800abe4 <HAL_PCD_EP_SetStall+0x82>
 800abe0:	2302      	movs	r3, #2
 800abe2:	e01e      	b.n	800ac22 <HAL_PCD_EP_SetStall+0xc0>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68f9      	ldr	r1, [r7, #12]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f005 ff1f 	bl	8010a36 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800abf8:	78fb      	ldrb	r3, [r7, #3]
 800abfa:	f003 030f 	and.w	r3, r3, #15
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10a      	bne.n	800ac18 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	b2d9      	uxtb	r1, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ac12:	461a      	mov	r2, r3
 800ac14:	f006 f910 	bl	8010e38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	460b      	mov	r3, r1
 800ac34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ac36:	78fb      	ldrb	r3, [r7, #3]
 800ac38:	f003 020f 	and.w	r2, r3, #15
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d901      	bls.n	800ac48 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e042      	b.n	800acce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ac48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	da0f      	bge.n	800ac70 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac50:	78fb      	ldrb	r3, [r7, #3]
 800ac52:	f003 020f 	and.w	r2, r3, #15
 800ac56:	4613      	mov	r3, r2
 800ac58:	00db      	lsls	r3, r3, #3
 800ac5a:	1a9b      	subs	r3, r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	3338      	adds	r3, #56	; 0x38
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	4413      	add	r3, r2
 800ac64:	3304      	adds	r3, #4
 800ac66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	705a      	strb	r2, [r3, #1]
 800ac6e:	e00f      	b.n	800ac90 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac70:	78fb      	ldrb	r3, [r7, #3]
 800ac72:	f003 020f 	and.w	r2, r3, #15
 800ac76:	4613      	mov	r3, r2
 800ac78:	00db      	lsls	r3, r3, #3
 800ac7a:	1a9b      	subs	r3, r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	4413      	add	r3, r2
 800ac86:	3304      	adds	r3, #4
 800ac88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac96:	78fb      	ldrb	r3, [r7, #3]
 800ac98:	f003 030f 	and.w	r3, r3, #15
 800ac9c:	b2da      	uxtb	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d101      	bne.n	800acb0 <HAL_PCD_EP_ClrStall+0x86>
 800acac:	2302      	movs	r3, #2
 800acae:	e00e      	b.n	800acce <HAL_PCD_EP_ClrStall+0xa4>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68f9      	ldr	r1, [r7, #12]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f005 ff27 	bl	8010b12 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b082      	sub	sp, #8
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	460b      	mov	r3, r1
 800ace0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d101      	bne.n	800acf0 <HAL_PCD_EP_Flush+0x1a>
 800acec:	2302      	movs	r3, #2
 800acee:	e01b      	b.n	800ad28 <HAL_PCD_EP_Flush+0x52>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800acf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	da09      	bge.n	800ad14 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	78fb      	ldrb	r3, [r7, #3]
 800ad06:	f003 030f 	and.w	r3, r3, #15
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	f005 f87f 	bl	800fe10 <USB_FlushTxFifo>
 800ad12:	e004      	b.n	800ad1e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f005 f89d 	bl	800fe58 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b08a      	sub	sp, #40	; 0x28
 800ad34:	af02      	add	r7, sp, #8
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	4613      	mov	r3, r2
 800ad48:	00db      	lsls	r3, r3, #3
 800ad4a:	1a9b      	subs	r3, r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	3338      	adds	r3, #56	; 0x38
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	4413      	add	r3, r2
 800ad54:	3304      	adds	r3, #4
 800ad56:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	699a      	ldr	r2, [r3, #24]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d901      	bls.n	800ad68 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e06c      	b.n	800ae42 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	695a      	ldr	r2, [r3, #20]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	69fa      	ldr	r2, [r7, #28]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d902      	bls.n	800ad84 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	3303      	adds	r3, #3
 800ad88:	089b      	lsrs	r3, r3, #2
 800ad8a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ad8c:	e02b      	b.n	800ade6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	695a      	ldr	r2, [r3, #20]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	1ad3      	subs	r3, r2, r3
 800ad98:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	69fa      	ldr	r2, [r7, #28]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d902      	bls.n	800adaa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	3303      	adds	r3, #3
 800adae:	089b      	lsrs	r3, r3, #2
 800adb0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	68d9      	ldr	r1, [r3, #12]
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	4603      	mov	r3, r0
 800adc8:	6978      	ldr	r0, [r7, #20]
 800adca:	f005 fd9e 	bl	801090a <USB_WritePacket>

    ep->xfer_buff  += len;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	68da      	ldr	r2, [r3, #12]
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	441a      	add	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	699a      	ldr	r2, [r3, #24]
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	441a      	add	r2, r3
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	015a      	lsls	r2, r3, #5
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	4413      	add	r3, r2
 800adee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	69ba      	ldr	r2, [r7, #24]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d809      	bhi.n	800ae10 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	699a      	ldr	r2, [r3, #24]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d203      	bcs.n	800ae10 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	695b      	ldr	r3, [r3, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1be      	bne.n	800ad8e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	695a      	ldr	r2, [r3, #20]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d811      	bhi.n	800ae40 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	f003 030f 	and.w	r3, r3, #15
 800ae22:	2201      	movs	r2, #1
 800ae24:	fa02 f303 	lsl.w	r3, r2, r3
 800ae28:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	43db      	mvns	r3, r3
 800ae36:	6939      	ldr	r1, [r7, #16]
 800ae38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3720      	adds	r7, #32
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
	...

0800ae4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	333c      	adds	r3, #60	; 0x3c
 800ae64:	3304      	adds	r3, #4
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	015a      	lsls	r2, r3, #5
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	4413      	add	r3, r2
 800ae72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	f040 80a0 	bne.w	800afc4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	f003 0308 	and.w	r3, r3, #8
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d015      	beq.n	800aeba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	4a72      	ldr	r2, [pc, #456]	; (800b05c <PCD_EP_OutXfrComplete_int+0x210>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	f240 80dd 	bls.w	800b052 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 80d7 	beq.w	800b052 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	015a      	lsls	r2, r3, #5
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	4413      	add	r3, r2
 800aeac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aeb6:	6093      	str	r3, [r2, #8]
 800aeb8:	e0cb      	b.n	800b052 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	f003 0320 	and.w	r3, r3, #32
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d009      	beq.n	800aed8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	015a      	lsls	r2, r3, #5
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	4413      	add	r3, r2
 800aecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed0:	461a      	mov	r2, r3
 800aed2:	2320      	movs	r3, #32
 800aed4:	6093      	str	r3, [r2, #8]
 800aed6:	e0bc      	b.n	800b052 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f040 80b7 	bne.w	800b052 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	4a5d      	ldr	r2, [pc, #372]	; (800b05c <PCD_EP_OutXfrComplete_int+0x210>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d90f      	bls.n	800af0c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	015a      	lsls	r2, r3, #5
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	4413      	add	r3, r2
 800aefe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af02:	461a      	mov	r2, r3
 800af04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af08:	6093      	str	r3, [r2, #8]
 800af0a:	e0a2      	b.n	800b052 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	4613      	mov	r3, r2
 800af12:	00db      	lsls	r3, r3, #3
 800af14:	1a9b      	subs	r3, r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	440b      	add	r3, r1
 800af1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800af1e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	0159      	lsls	r1, r3, #5
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	440b      	add	r3, r1
 800af28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800af32:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	4613      	mov	r3, r2
 800af3a:	00db      	lsls	r3, r3, #3
 800af3c:	1a9b      	subs	r3, r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4403      	add	r3, r0
 800af42:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800af46:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800af48:	6879      	ldr	r1, [r7, #4]
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	4613      	mov	r3, r2
 800af4e:	00db      	lsls	r3, r3, #3
 800af50:	1a9b      	subs	r3, r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	440b      	add	r3, r1
 800af56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800af5a:	6819      	ldr	r1, [r3, #0]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	4613      	mov	r3, r2
 800af62:	00db      	lsls	r3, r3, #3
 800af64:	1a9b      	subs	r3, r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4403      	add	r3, r0
 800af6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4419      	add	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	4613      	mov	r3, r2
 800af78:	00db      	lsls	r3, r3, #3
 800af7a:	1a9b      	subs	r3, r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4403      	add	r3, r0
 800af80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800af84:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d114      	bne.n	800afb6 <PCD_EP_OutXfrComplete_int+0x16a>
 800af8c:	6879      	ldr	r1, [r7, #4]
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	4613      	mov	r3, r2
 800af92:	00db      	lsls	r3, r3, #3
 800af94:	1a9b      	subs	r3, r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	440b      	add	r3, r1
 800af9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d108      	bne.n	800afb6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6818      	ldr	r0, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800afae:	461a      	mov	r2, r3
 800afb0:	2101      	movs	r1, #1
 800afb2:	f005 ff41 	bl	8010e38 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f00c faf9 	bl	80175b4 <HAL_PCD_DataOutStageCallback>
 800afc2:	e046      	b.n	800b052 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4a26      	ldr	r2, [pc, #152]	; (800b060 <PCD_EP_OutXfrComplete_int+0x214>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d124      	bne.n	800b016 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00a      	beq.n	800afec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe2:	461a      	mov	r2, r3
 800afe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afe8:	6093      	str	r3, [r2, #8]
 800afea:	e032      	b.n	800b052 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	f003 0320 	and.w	r3, r3, #32
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d008      	beq.n	800b008 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	015a      	lsls	r2, r3, #5
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	4413      	add	r3, r2
 800affe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b002:	461a      	mov	r2, r3
 800b004:	2320      	movs	r3, #32
 800b006:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f00c fad0 	bl	80175b4 <HAL_PCD_DataOutStageCallback>
 800b014:	e01d      	b.n	800b052 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d114      	bne.n	800b046 <PCD_EP_OutXfrComplete_int+0x1fa>
 800b01c:	6879      	ldr	r1, [r7, #4]
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	4613      	mov	r3, r2
 800b022:	00db      	lsls	r3, r3, #3
 800b024:	1a9b      	subs	r3, r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	440b      	add	r3, r1
 800b02a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d108      	bne.n	800b046 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6818      	ldr	r0, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b03e:	461a      	mov	r2, r3
 800b040:	2100      	movs	r1, #0
 800b042:	f005 fef9 	bl	8010e38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f00c fab1 	bl	80175b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3718      	adds	r7, #24
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	4f54300a 	.word	0x4f54300a
 800b060:	4f54310a 	.word	0x4f54310a

0800b064 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	333c      	adds	r3, #60	; 0x3c
 800b07c:	3304      	adds	r3, #4
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	015a      	lsls	r2, r3, #5
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	4413      	add	r3, r2
 800b08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	4a15      	ldr	r2, [pc, #84]	; (800b0ec <PCD_EP_OutSetupPacket_int+0x88>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d90e      	bls.n	800b0b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d009      	beq.n	800b0b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	015a      	lsls	r2, r3, #5
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f00c fa69 	bl	8017590 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	4a0a      	ldr	r2, [pc, #40]	; (800b0ec <PCD_EP_OutSetupPacket_int+0x88>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d90c      	bls.n	800b0e0 <PCD_EP_OutSetupPacket_int+0x7c>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d108      	bne.n	800b0e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6818      	ldr	r0, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b0d8:	461a      	mov	r2, r3
 800b0da:	2101      	movs	r1, #1
 800b0dc:	f005 feac 	bl	8010e38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	4f54300a 	.word	0x4f54300a

0800b0f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	70fb      	strb	r3, [r7, #3]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b106:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b108:	78fb      	ldrb	r3, [r7, #3]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d107      	bne.n	800b11e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b10e:	883b      	ldrh	r3, [r7, #0]
 800b110:	0419      	lsls	r1, r3, #16
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	430a      	orrs	r2, r1
 800b11a:	629a      	str	r2, [r3, #40]	; 0x28
 800b11c:	e028      	b.n	800b170 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b124:	0c1b      	lsrs	r3, r3, #16
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	4413      	add	r3, r2
 800b12a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b12c:	2300      	movs	r3, #0
 800b12e:	73fb      	strb	r3, [r7, #15]
 800b130:	e00d      	b.n	800b14e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	7bfb      	ldrb	r3, [r7, #15]
 800b138:	3340      	adds	r3, #64	; 0x40
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4413      	add	r3, r2
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	0c1b      	lsrs	r3, r3, #16
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	4413      	add	r3, r2
 800b146:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b148:	7bfb      	ldrb	r3, [r7, #15]
 800b14a:	3301      	adds	r3, #1
 800b14c:	73fb      	strb	r3, [r7, #15]
 800b14e:	7bfa      	ldrb	r2, [r7, #15]
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	3b01      	subs	r3, #1
 800b154:	429a      	cmp	r2, r3
 800b156:	d3ec      	bcc.n	800b132 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b158:	883b      	ldrh	r3, [r7, #0]
 800b15a:	0418      	lsls	r0, r3, #16
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6819      	ldr	r1, [r3, #0]
 800b160:	78fb      	ldrb	r3, [r7, #3]
 800b162:	3b01      	subs	r3, #1
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	4302      	orrs	r2, r0
 800b168:	3340      	adds	r3, #64	; 0x40
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	440b      	add	r3, r1
 800b16e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3714      	adds	r7, #20
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	460b      	mov	r3, r1
 800b188:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	887a      	ldrh	r2, [r7, #2]
 800b190:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1d2:	f043 0303 	orr.w	r3, r3, #3
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3714      	adds	r7, #20
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	603b      	str	r3, [r7, #0]
 800b1f6:	4b20      	ldr	r3, [pc, #128]	; (800b278 <HAL_PWREx_EnableOverDrive+0x90>)
 800b1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fa:	4a1f      	ldr	r2, [pc, #124]	; (800b278 <HAL_PWREx_EnableOverDrive+0x90>)
 800b1fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b200:	6413      	str	r3, [r2, #64]	; 0x40
 800b202:	4b1d      	ldr	r3, [pc, #116]	; (800b278 <HAL_PWREx_EnableOverDrive+0x90>)
 800b204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b20a:	603b      	str	r3, [r7, #0]
 800b20c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b20e:	4b1b      	ldr	r3, [pc, #108]	; (800b27c <HAL_PWREx_EnableOverDrive+0x94>)
 800b210:	2201      	movs	r2, #1
 800b212:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b214:	f7fb fc72 	bl	8006afc <HAL_GetTick>
 800b218:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b21a:	e009      	b.n	800b230 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b21c:	f7fb fc6e 	bl	8006afc <HAL_GetTick>
 800b220:	4602      	mov	r2, r0
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b22a:	d901      	bls.n	800b230 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e01f      	b.n	800b270 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b230:	4b13      	ldr	r3, [pc, #76]	; (800b280 <HAL_PWREx_EnableOverDrive+0x98>)
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b23c:	d1ee      	bne.n	800b21c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b23e:	4b11      	ldr	r3, [pc, #68]	; (800b284 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b240:	2201      	movs	r2, #1
 800b242:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b244:	f7fb fc5a 	bl	8006afc <HAL_GetTick>
 800b248:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b24a:	e009      	b.n	800b260 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b24c:	f7fb fc56 	bl	8006afc <HAL_GetTick>
 800b250:	4602      	mov	r2, r0
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b25a:	d901      	bls.n	800b260 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b25c:	2303      	movs	r3, #3
 800b25e:	e007      	b.n	800b270 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b260:	4b07      	ldr	r3, [pc, #28]	; (800b280 <HAL_PWREx_EnableOverDrive+0x98>)
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b26c:	d1ee      	bne.n	800b24c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	40023800 	.word	0x40023800
 800b27c:	420e0040 	.word	0x420e0040
 800b280:	40007000 	.word	0x40007000
 800b284:	420e0044 	.word	0x420e0044

0800b288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	e0cc      	b.n	800b436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b29c:	4b68      	ldr	r3, [pc, #416]	; (800b440 <HAL_RCC_ClockConfig+0x1b8>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 030f 	and.w	r3, r3, #15
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d90c      	bls.n	800b2c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2aa:	4b65      	ldr	r3, [pc, #404]	; (800b440 <HAL_RCC_ClockConfig+0x1b8>)
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	b2d2      	uxtb	r2, r2
 800b2b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2b2:	4b63      	ldr	r3, [pc, #396]	; (800b440 <HAL_RCC_ClockConfig+0x1b8>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 030f 	and.w	r3, r3, #15
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d001      	beq.n	800b2c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e0b8      	b.n	800b436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 0302 	and.w	r3, r3, #2
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d020      	beq.n	800b312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0304 	and.w	r3, r3, #4
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d005      	beq.n	800b2e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b2dc:	4b59      	ldr	r3, [pc, #356]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	4a58      	ldr	r2, [pc, #352]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b2e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b2e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 0308 	and.w	r3, r3, #8
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d005      	beq.n	800b300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b2f4:	4b53      	ldr	r3, [pc, #332]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	4a52      	ldr	r2, [pc, #328]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b2fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b2fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b300:	4b50      	ldr	r3, [pc, #320]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	494d      	ldr	r1, [pc, #308]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d044      	beq.n	800b3a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d107      	bne.n	800b336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b326:	4b47      	ldr	r3, [pc, #284]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d119      	bne.n	800b366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e07f      	b.n	800b436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d003      	beq.n	800b346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b342:	2b03      	cmp	r3, #3
 800b344:	d107      	bne.n	800b356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b346:	4b3f      	ldr	r3, [pc, #252]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d109      	bne.n	800b366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e06f      	b.n	800b436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b356:	4b3b      	ldr	r3, [pc, #236]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 0302 	and.w	r3, r3, #2
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e067      	b.n	800b436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b366:	4b37      	ldr	r3, [pc, #220]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	f023 0203 	bic.w	r2, r3, #3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	4934      	ldr	r1, [pc, #208]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b374:	4313      	orrs	r3, r2
 800b376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b378:	f7fb fbc0 	bl	8006afc <HAL_GetTick>
 800b37c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b37e:	e00a      	b.n	800b396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b380:	f7fb fbbc 	bl	8006afc <HAL_GetTick>
 800b384:	4602      	mov	r2, r0
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b38e:	4293      	cmp	r3, r2
 800b390:	d901      	bls.n	800b396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b392:	2303      	movs	r3, #3
 800b394:	e04f      	b.n	800b436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b396:	4b2b      	ldr	r3, [pc, #172]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f003 020c 	and.w	r2, r3, #12
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d1eb      	bne.n	800b380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b3a8:	4b25      	ldr	r3, [pc, #148]	; (800b440 <HAL_RCC_ClockConfig+0x1b8>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 030f 	and.w	r3, r3, #15
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d20c      	bcs.n	800b3d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3b6:	4b22      	ldr	r3, [pc, #136]	; (800b440 <HAL_RCC_ClockConfig+0x1b8>)
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	b2d2      	uxtb	r2, r2
 800b3bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3be:	4b20      	ldr	r3, [pc, #128]	; (800b440 <HAL_RCC_ClockConfig+0x1b8>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 030f 	and.w	r3, r3, #15
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d001      	beq.n	800b3d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e032      	b.n	800b436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 0304 	and.w	r3, r3, #4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d008      	beq.n	800b3ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b3dc:	4b19      	ldr	r3, [pc, #100]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	4916      	ldr	r1, [pc, #88]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 0308 	and.w	r3, r3, #8
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d009      	beq.n	800b40e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b3fa:	4b12      	ldr	r3, [pc, #72]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	490e      	ldr	r1, [pc, #56]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b40a:	4313      	orrs	r3, r2
 800b40c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b40e:	f000 fb6b 	bl	800bae8 <HAL_RCC_GetSysClockFreq>
 800b412:	4602      	mov	r2, r0
 800b414:	4b0b      	ldr	r3, [pc, #44]	; (800b444 <HAL_RCC_ClockConfig+0x1bc>)
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	091b      	lsrs	r3, r3, #4
 800b41a:	f003 030f 	and.w	r3, r3, #15
 800b41e:	490a      	ldr	r1, [pc, #40]	; (800b448 <HAL_RCC_ClockConfig+0x1c0>)
 800b420:	5ccb      	ldrb	r3, [r1, r3]
 800b422:	fa22 f303 	lsr.w	r3, r2, r3
 800b426:	4a09      	ldr	r2, [pc, #36]	; (800b44c <HAL_RCC_ClockConfig+0x1c4>)
 800b428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b42a:	4b09      	ldr	r3, [pc, #36]	; (800b450 <HAL_RCC_ClockConfig+0x1c8>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fb fb20 	bl	8006a74 <HAL_InitTick>

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	40023c00 	.word	0x40023c00
 800b444:	40023800 	.word	0x40023800
 800b448:	08018584 	.word	0x08018584
 800b44c:	20000000 	.word	0x20000000
 800b450:	20000004 	.word	0x20000004

0800b454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b454:	b480      	push	{r7}
 800b456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b458:	4b03      	ldr	r3, [pc, #12]	; (800b468 <HAL_RCC_GetHCLKFreq+0x14>)
 800b45a:	681b      	ldr	r3, [r3, #0]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	20000000 	.word	0x20000000

0800b46c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b470:	f7ff fff0 	bl	800b454 <HAL_RCC_GetHCLKFreq>
 800b474:	4602      	mov	r2, r0
 800b476:	4b05      	ldr	r3, [pc, #20]	; (800b48c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	0a9b      	lsrs	r3, r3, #10
 800b47c:	f003 0307 	and.w	r3, r3, #7
 800b480:	4903      	ldr	r1, [pc, #12]	; (800b490 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b482:	5ccb      	ldrb	r3, [r1, r3]
 800b484:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b488:	4618      	mov	r0, r3
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	40023800 	.word	0x40023800
 800b490:	08018594 	.word	0x08018594

0800b494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b08c      	sub	sp, #48	; 0x30
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b49c:	2300      	movs	r3, #0
 800b49e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0301 	and.w	r3, r3, #1
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d010      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800b4cc:	4b6f      	ldr	r3, [pc, #444]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b4ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4d2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4da:	496c      	ldr	r1, [pc, #432]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d101      	bne.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0302 	and.w	r3, r3, #2
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d010      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800b4fa:	4b64      	ldr	r3, [pc, #400]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b4fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b500:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b508:	4960      	ldr	r1, [pc, #384]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b50a:	4313      	orrs	r3, r2
 800b50c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800b518:	2301      	movs	r3, #1
 800b51a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 0304 	and.w	r3, r3, #4
 800b524:	2b00      	cmp	r3, #0
 800b526:	d017      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b528:	4b58      	ldr	r3, [pc, #352]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b52a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b52e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b536:	4955      	ldr	r1, [pc, #340]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b538:	4313      	orrs	r3, r2
 800b53a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b546:	d101      	bne.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800b548:	2301      	movs	r3, #1
 800b54a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800b554:	2301      	movs	r3, #1
 800b556:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 0308 	and.w	r3, r3, #8
 800b560:	2b00      	cmp	r3, #0
 800b562:	d017      	beq.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b564:	4b49      	ldr	r3, [pc, #292]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b56a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b572:	4946      	ldr	r1, [pc, #280]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b574:	4313      	orrs	r3, r2
 800b576:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b582:	d101      	bne.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800b584:	2301      	movs	r3, #1
 800b586:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d101      	bne.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800b590:	2301      	movs	r3, #1
 800b592:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f003 0320 	and.w	r3, r3, #32
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 808a 	beq.w	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60bb      	str	r3, [r7, #8]
 800b5a6:	4b39      	ldr	r3, [pc, #228]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5aa:	4a38      	ldr	r2, [pc, #224]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b5ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5b0:	6413      	str	r3, [r2, #64]	; 0x40
 800b5b2:	4b36      	ldr	r3, [pc, #216]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5ba:	60bb      	str	r3, [r7, #8]
 800b5bc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b5be:	4b34      	ldr	r3, [pc, #208]	; (800b690 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a33      	ldr	r2, [pc, #204]	; (800b690 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b5c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b5ca:	f7fb fa97 	bl	8006afc <HAL_GetTick>
 800b5ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b5d0:	e008      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b5d2:	f7fb fa93 	bl	8006afc <HAL_GetTick>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d901      	bls.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e278      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b5e4:	4b2a      	ldr	r3, [pc, #168]	; (800b690 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d0f0      	beq.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b5f0:	4b26      	ldr	r3, [pc, #152]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b5f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5f8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b5fa:	6a3b      	ldr	r3, [r7, #32]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d02f      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b608:	6a3a      	ldr	r2, [r7, #32]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d028      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b60e:	4b1f      	ldr	r3, [pc, #124]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b616:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b618:	4b1e      	ldr	r3, [pc, #120]	; (800b694 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b61a:	2201      	movs	r2, #1
 800b61c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b61e:	4b1d      	ldr	r3, [pc, #116]	; (800b694 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b620:	2200      	movs	r2, #0
 800b622:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b624:	4a19      	ldr	r2, [pc, #100]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b62a:	4b18      	ldr	r3, [pc, #96]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b62e:	f003 0301 	and.w	r3, r3, #1
 800b632:	2b01      	cmp	r3, #1
 800b634:	d114      	bne.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b636:	f7fb fa61 	bl	8006afc <HAL_GetTick>
 800b63a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b63c:	e00a      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b63e:	f7fb fa5d 	bl	8006afc <HAL_GetTick>
 800b642:	4602      	mov	r2, r0
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	f241 3288 	movw	r2, #5000	; 0x1388
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d901      	bls.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800b650:	2303      	movs	r3, #3
 800b652:	e240      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b654:	4b0d      	ldr	r3, [pc, #52]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b658:	f003 0302 	and.w	r3, r3, #2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d0ee      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b66c:	d114      	bne.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800b66e:	4b07      	ldr	r3, [pc, #28]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b67e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b682:	4902      	ldr	r1, [pc, #8]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b684:	4313      	orrs	r3, r2
 800b686:	608b      	str	r3, [r1, #8]
 800b688:	e00c      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800b68a:	bf00      	nop
 800b68c:	40023800 	.word	0x40023800
 800b690:	40007000 	.word	0x40007000
 800b694:	42470e40 	.word	0x42470e40
 800b698:	4b4a      	ldr	r3, [pc, #296]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	4a49      	ldr	r2, [pc, #292]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b69e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b6a2:	6093      	str	r3, [r2, #8]
 800b6a4:	4b47      	ldr	r3, [pc, #284]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b6a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6b0:	4944      	ldr	r1, [pc, #272]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 0310 	and.w	r3, r3, #16
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d004      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800b6c8:	4b3f      	ldr	r3, [pc, #252]	; (800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800b6ca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00a      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800b6d8:	4b3a      	ldr	r3, [pc, #232]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b6da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6e6:	4937      	ldr	r1, [pc, #220]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00a      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b6fa:	4b32      	ldr	r3, [pc, #200]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b6fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b700:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b708:	492e      	ldr	r1, [pc, #184]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b70a:	4313      	orrs	r3, r2
 800b70c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d011      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b71c:	4b29      	ldr	r3, [pc, #164]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b71e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b722:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b72a:	4926      	ldr	r1, [pc, #152]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b72c:	4313      	orrs	r3, r2
 800b72e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b73a:	d101      	bne.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800b73c:	2301      	movs	r3, #1
 800b73e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00a      	beq.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b74c:	4b1d      	ldr	r3, [pc, #116]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b74e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b752:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b75a:	491a      	ldr	r1, [pc, #104]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b75c:	4313      	orrs	r3, r2
 800b75e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d011      	beq.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800b76e:	4b15      	ldr	r3, [pc, #84]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b774:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b77c:	4911      	ldr	r1, [pc, #68]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b77e:	4313      	orrs	r3, r2
 800b780:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b78c:	d101      	bne.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800b78e:	2301      	movs	r3, #1
 800b790:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b794:	2b01      	cmp	r3, #1
 800b796:	d005      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7a0:	f040 80ff 	bne.w	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b7a4:	4b09      	ldr	r3, [pc, #36]	; (800b7cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b7aa:	f7fb f9a7 	bl	8006afc <HAL_GetTick>
 800b7ae:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b7b0:	e00e      	b.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b7b2:	f7fb f9a3 	bl	8006afc <HAL_GetTick>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d907      	bls.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	e188      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b7c4:	40023800 	.word	0x40023800
 800b7c8:	424711e0 	.word	0x424711e0
 800b7cc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b7d0:	4b7e      	ldr	r3, [pc, #504]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1ea      	bne.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0301 	and.w	r3, r3, #1
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d003      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d009      	beq.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d028      	beq.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b800:	2b00      	cmp	r3, #0
 800b802:	d124      	bne.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b804:	4b71      	ldr	r3, [pc, #452]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b80a:	0c1b      	lsrs	r3, r3, #16
 800b80c:	f003 0303 	and.w	r3, r3, #3
 800b810:	3301      	adds	r3, #1
 800b812:	005b      	lsls	r3, r3, #1
 800b814:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b816:	4b6d      	ldr	r3, [pc, #436]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b81c:	0e1b      	lsrs	r3, r3, #24
 800b81e:	f003 030f 	and.w	r3, r3, #15
 800b822:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685a      	ldr	r2, [r3, #4]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	019b      	lsls	r3, r3, #6
 800b82e:	431a      	orrs	r2, r3
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	085b      	lsrs	r3, r3, #1
 800b834:	3b01      	subs	r3, #1
 800b836:	041b      	lsls	r3, r3, #16
 800b838:	431a      	orrs	r2, r3
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	061b      	lsls	r3, r3, #24
 800b83e:	431a      	orrs	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	071b      	lsls	r3, r3, #28
 800b846:	4961      	ldr	r1, [pc, #388]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b848:	4313      	orrs	r3, r2
 800b84a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 0304 	and.w	r3, r3, #4
 800b856:	2b00      	cmp	r3, #0
 800b858:	d004      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b85e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b862:	d00a      	beq.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d035      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b878:	d130      	bne.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b87a:	4b54      	ldr	r3, [pc, #336]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b87c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b880:	0c1b      	lsrs	r3, r3, #16
 800b882:	f003 0303 	and.w	r3, r3, #3
 800b886:	3301      	adds	r3, #1
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b88c:	4b4f      	ldr	r3, [pc, #316]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b88e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b892:	0f1b      	lsrs	r3, r3, #28
 800b894:	f003 0307 	and.w	r3, r3, #7
 800b898:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	685a      	ldr	r2, [r3, #4]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	019b      	lsls	r3, r3, #6
 800b8a4:	431a      	orrs	r2, r3
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	085b      	lsrs	r3, r3, #1
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	041b      	lsls	r3, r3, #16
 800b8ae:	431a      	orrs	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	061b      	lsls	r3, r3, #24
 800b8b6:	431a      	orrs	r2, r3
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	071b      	lsls	r3, r3, #28
 800b8bc:	4943      	ldr	r1, [pc, #268]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b8c4:	4b41      	ldr	r3, [pc, #260]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b8c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8ca:	f023 021f 	bic.w	r2, r3, #31
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	493d      	ldr	r1, [pc, #244]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d029      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8f0:	d124      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b8f2:	4b36      	ldr	r3, [pc, #216]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8f8:	0c1b      	lsrs	r3, r3, #16
 800b8fa:	f003 0303 	and.w	r3, r3, #3
 800b8fe:	3301      	adds	r3, #1
 800b900:	005b      	lsls	r3, r3, #1
 800b902:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b904:	4b31      	ldr	r3, [pc, #196]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b90a:	0f1b      	lsrs	r3, r3, #28
 800b90c:	f003 0307 	and.w	r3, r3, #7
 800b910:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	019b      	lsls	r3, r3, #6
 800b91c:	431a      	orrs	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	085b      	lsrs	r3, r3, #1
 800b924:	3b01      	subs	r3, #1
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	431a      	orrs	r2, r3
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	061b      	lsls	r3, r3, #24
 800b92e:	431a      	orrs	r2, r3
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	071b      	lsls	r3, r3, #28
 800b934:	4925      	ldr	r1, [pc, #148]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b936:	4313      	orrs	r3, r2
 800b938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b944:	2b00      	cmp	r3, #0
 800b946:	d016      	beq.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	019b      	lsls	r3, r3, #6
 800b952:	431a      	orrs	r2, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	085b      	lsrs	r3, r3, #1
 800b95a:	3b01      	subs	r3, #1
 800b95c:	041b      	lsls	r3, r3, #16
 800b95e:	431a      	orrs	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	061b      	lsls	r3, r3, #24
 800b966:	431a      	orrs	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	695b      	ldr	r3, [r3, #20]
 800b96c:	071b      	lsls	r3, r3, #28
 800b96e:	4917      	ldr	r1, [pc, #92]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b970:	4313      	orrs	r3, r2
 800b972:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b976:	4b16      	ldr	r3, [pc, #88]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800b978:	2201      	movs	r2, #1
 800b97a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b97c:	f7fb f8be 	bl	8006afc <HAL_GetTick>
 800b980:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b982:	e008      	b.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b984:	f7fb f8ba 	bl	8006afc <HAL_GetTick>
 800b988:	4602      	mov	r2, r0
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d901      	bls.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b992:	2303      	movs	r3, #3
 800b994:	e09f      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b996:	4b0d      	ldr	r3, [pc, #52]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d0f0      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800b9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	f040 8095 	bne.w	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b9aa:	4b0a      	ldr	r3, [pc, #40]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b9b0:	f7fb f8a4 	bl	8006afc <HAL_GetTick>
 800b9b4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b9b6:	e00f      	b.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b9b8:	f7fb f8a0 	bl	8006afc <HAL_GetTick>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d908      	bls.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	e085      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b9ca:	bf00      	nop
 800b9cc:	40023800 	.word	0x40023800
 800b9d0:	42470068 	.word	0x42470068
 800b9d4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b9d8:	4b41      	ldr	r3, [pc, #260]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9e4:	d0e8      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f003 0304 	and.w	r3, r3, #4
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x566>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d009      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d02b      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d127      	bne.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ba0e:	4b34      	ldr	r3, [pc, #208]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ba10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba14:	0c1b      	lsrs	r3, r3, #16
 800ba16:	f003 0303 	and.w	r3, r3, #3
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	005b      	lsls	r3, r3, #1
 800ba1e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	699a      	ldr	r2, [r3, #24]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	69db      	ldr	r3, [r3, #28]
 800ba28:	019b      	lsls	r3, r3, #6
 800ba2a:	431a      	orrs	r2, r3
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	085b      	lsrs	r3, r3, #1
 800ba30:	3b01      	subs	r3, #1
 800ba32:	041b      	lsls	r3, r3, #16
 800ba34:	431a      	orrs	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3a:	061b      	lsls	r3, r3, #24
 800ba3c:	4928      	ldr	r1, [pc, #160]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ba44:	4b26      	ldr	r3, [pc, #152]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ba46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba4a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba52:	3b01      	subs	r3, #1
 800ba54:	021b      	lsls	r3, r3, #8
 800ba56:	4922      	ldr	r1, [pc, #136]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d01d      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba72:	d118      	bne.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ba74:	4b1a      	ldr	r3, [pc, #104]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ba76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba7a:	0e1b      	lsrs	r3, r3, #24
 800ba7c:	f003 030f 	and.w	r3, r3, #15
 800ba80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	699a      	ldr	r2, [r3, #24]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	69db      	ldr	r3, [r3, #28]
 800ba8a:	019b      	lsls	r3, r3, #6
 800ba8c:	431a      	orrs	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a1b      	ldr	r3, [r3, #32]
 800ba92:	085b      	lsrs	r3, r3, #1
 800ba94:	3b01      	subs	r3, #1
 800ba96:	041b      	lsls	r3, r3, #16
 800ba98:	431a      	orrs	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	061b      	lsls	r3, r3, #24
 800ba9e:	4910      	ldr	r1, [pc, #64]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800baa0:	4313      	orrs	r3, r2
 800baa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800baa6:	4b0f      	ldr	r3, [pc, #60]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800baa8:	2201      	movs	r2, #1
 800baaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800baac:	f7fb f826 	bl	8006afc <HAL_GetTick>
 800bab0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bab2:	e008      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bab4:	f7fb f822 	bl	8006afc <HAL_GetTick>
 800bab8:	4602      	mov	r2, r0
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d901      	bls.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e007      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bac6:	4b06      	ldr	r3, [pc, #24]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bad2:	d1ef      	bne.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3730      	adds	r7, #48	; 0x30
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	40023800 	.word	0x40023800
 800bae4:	42470070 	.word	0x42470070

0800bae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800baec:	b088      	sub	sp, #32
 800baee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800baf0:	2300      	movs	r3, #0
 800baf2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800baf8:	2300      	movs	r3, #0
 800bafa:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800bafc:	2300      	movs	r3, #0
 800bafe:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800bb00:	2300      	movs	r3, #0
 800bb02:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb04:	4bce      	ldr	r3, [pc, #824]	; (800be40 <HAL_RCC_GetSysClockFreq+0x358>)
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f003 030c 	and.w	r3, r3, #12
 800bb0c:	2b0c      	cmp	r3, #12
 800bb0e:	f200 818d 	bhi.w	800be2c <HAL_RCC_GetSysClockFreq+0x344>
 800bb12:	a201      	add	r2, pc, #4	; (adr r2, 800bb18 <HAL_RCC_GetSysClockFreq+0x30>)
 800bb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb18:	0800bb4d 	.word	0x0800bb4d
 800bb1c:	0800be2d 	.word	0x0800be2d
 800bb20:	0800be2d 	.word	0x0800be2d
 800bb24:	0800be2d 	.word	0x0800be2d
 800bb28:	0800bb53 	.word	0x0800bb53
 800bb2c:	0800be2d 	.word	0x0800be2d
 800bb30:	0800be2d 	.word	0x0800be2d
 800bb34:	0800be2d 	.word	0x0800be2d
 800bb38:	0800bb59 	.word	0x0800bb59
 800bb3c:	0800be2d 	.word	0x0800be2d
 800bb40:	0800be2d 	.word	0x0800be2d
 800bb44:	0800be2d 	.word	0x0800be2d
 800bb48:	0800bccd 	.word	0x0800bccd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bb4c:	4bbd      	ldr	r3, [pc, #756]	; (800be44 <HAL_RCC_GetSysClockFreq+0x35c>)
 800bb4e:	61bb      	str	r3, [r7, #24]
       break;
 800bb50:	e16f      	b.n	800be32 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bb52:	4bbd      	ldr	r3, [pc, #756]	; (800be48 <HAL_RCC_GetSysClockFreq+0x360>)
 800bb54:	61bb      	str	r3, [r7, #24]
      break;
 800bb56:	e16c      	b.n	800be32 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bb58:	4bb9      	ldr	r3, [pc, #740]	; (800be40 <HAL_RCC_GetSysClockFreq+0x358>)
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb60:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bb62:	4bb7      	ldr	r3, [pc, #732]	; (800be40 <HAL_RCC_GetSysClockFreq+0x358>)
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d053      	beq.n	800bc16 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb6e:	4bb4      	ldr	r3, [pc, #720]	; (800be40 <HAL_RCC_GetSysClockFreq+0x358>)
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	099b      	lsrs	r3, r3, #6
 800bb74:	461a      	mov	r2, r3
 800bb76:	f04f 0300 	mov.w	r3, #0
 800bb7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bb7e:	f04f 0100 	mov.w	r1, #0
 800bb82:	ea02 0400 	and.w	r4, r2, r0
 800bb86:	603c      	str	r4, [r7, #0]
 800bb88:	400b      	ands	r3, r1
 800bb8a:	607b      	str	r3, [r7, #4]
 800bb8c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bb90:	4620      	mov	r0, r4
 800bb92:	4629      	mov	r1, r5
 800bb94:	f04f 0200 	mov.w	r2, #0
 800bb98:	f04f 0300 	mov.w	r3, #0
 800bb9c:	014b      	lsls	r3, r1, #5
 800bb9e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bba2:	0142      	lsls	r2, r0, #5
 800bba4:	4610      	mov	r0, r2
 800bba6:	4619      	mov	r1, r3
 800bba8:	4623      	mov	r3, r4
 800bbaa:	1ac0      	subs	r0, r0, r3
 800bbac:	462b      	mov	r3, r5
 800bbae:	eb61 0103 	sbc.w	r1, r1, r3
 800bbb2:	f04f 0200 	mov.w	r2, #0
 800bbb6:	f04f 0300 	mov.w	r3, #0
 800bbba:	018b      	lsls	r3, r1, #6
 800bbbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bbc0:	0182      	lsls	r2, r0, #6
 800bbc2:	1a12      	subs	r2, r2, r0
 800bbc4:	eb63 0301 	sbc.w	r3, r3, r1
 800bbc8:	f04f 0000 	mov.w	r0, #0
 800bbcc:	f04f 0100 	mov.w	r1, #0
 800bbd0:	00d9      	lsls	r1, r3, #3
 800bbd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bbd6:	00d0      	lsls	r0, r2, #3
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4621      	mov	r1, r4
 800bbde:	1852      	adds	r2, r2, r1
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	eb43 0101 	adc.w	r1, r3, r1
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	f04f 0000 	mov.w	r0, #0
 800bbec:	f04f 0100 	mov.w	r1, #0
 800bbf0:	0259      	lsls	r1, r3, #9
 800bbf2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800bbf6:	0250      	lsls	r0, r2, #9
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4619      	mov	r1, r3
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	461a      	mov	r2, r3
 800bc04:	f04f 0300 	mov.w	r3, #0
 800bc08:	f7f4 fb52 	bl	80002b0 <__aeabi_uldivmod>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	4613      	mov	r3, r2
 800bc12:	61fb      	str	r3, [r7, #28]
 800bc14:	e04c      	b.n	800bcb0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc16:	4b8a      	ldr	r3, [pc, #552]	; (800be40 <HAL_RCC_GetSysClockFreq+0x358>)
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	099b      	lsrs	r3, r3, #6
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	f04f 0300 	mov.w	r3, #0
 800bc22:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bc26:	f04f 0100 	mov.w	r1, #0
 800bc2a:	ea02 0a00 	and.w	sl, r2, r0
 800bc2e:	ea03 0b01 	and.w	fp, r3, r1
 800bc32:	4650      	mov	r0, sl
 800bc34:	4659      	mov	r1, fp
 800bc36:	f04f 0200 	mov.w	r2, #0
 800bc3a:	f04f 0300 	mov.w	r3, #0
 800bc3e:	014b      	lsls	r3, r1, #5
 800bc40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bc44:	0142      	lsls	r2, r0, #5
 800bc46:	4610      	mov	r0, r2
 800bc48:	4619      	mov	r1, r3
 800bc4a:	ebb0 000a 	subs.w	r0, r0, sl
 800bc4e:	eb61 010b 	sbc.w	r1, r1, fp
 800bc52:	f04f 0200 	mov.w	r2, #0
 800bc56:	f04f 0300 	mov.w	r3, #0
 800bc5a:	018b      	lsls	r3, r1, #6
 800bc5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bc60:	0182      	lsls	r2, r0, #6
 800bc62:	1a12      	subs	r2, r2, r0
 800bc64:	eb63 0301 	sbc.w	r3, r3, r1
 800bc68:	f04f 0000 	mov.w	r0, #0
 800bc6c:	f04f 0100 	mov.w	r1, #0
 800bc70:	00d9      	lsls	r1, r3, #3
 800bc72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc76:	00d0      	lsls	r0, r2, #3
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	eb12 020a 	adds.w	r2, r2, sl
 800bc80:	eb43 030b 	adc.w	r3, r3, fp
 800bc84:	f04f 0000 	mov.w	r0, #0
 800bc88:	f04f 0100 	mov.w	r1, #0
 800bc8c:	0299      	lsls	r1, r3, #10
 800bc8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bc92:	0290      	lsls	r0, r2, #10
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	4610      	mov	r0, r2
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	f04f 0300 	mov.w	r3, #0
 800bca4:	f7f4 fb04 	bl	80002b0 <__aeabi_uldivmod>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4613      	mov	r3, r2
 800bcae:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bcb0:	4b63      	ldr	r3, [pc, #396]	; (800be40 <HAL_RCC_GetSysClockFreq+0x358>)
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	0c1b      	lsrs	r3, r3, #16
 800bcb6:	f003 0303 	and.w	r3, r3, #3
 800bcba:	3301      	adds	r3, #1
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800bcc0:	69fa      	ldr	r2, [r7, #28]
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcc8:	61bb      	str	r3, [r7, #24]
      break;
 800bcca:	e0b2      	b.n	800be32 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bccc:	4b5c      	ldr	r3, [pc, #368]	; (800be40 <HAL_RCC_GetSysClockFreq+0x358>)
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcd4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bcd6:	4b5a      	ldr	r3, [pc, #360]	; (800be40 <HAL_RCC_GetSysClockFreq+0x358>)
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d04d      	beq.n	800bd7e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bce2:	4b57      	ldr	r3, [pc, #348]	; (800be40 <HAL_RCC_GetSysClockFreq+0x358>)
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	099b      	lsrs	r3, r3, #6
 800bce8:	461a      	mov	r2, r3
 800bcea:	f04f 0300 	mov.w	r3, #0
 800bcee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bcf2:	f04f 0100 	mov.w	r1, #0
 800bcf6:	ea02 0800 	and.w	r8, r2, r0
 800bcfa:	ea03 0901 	and.w	r9, r3, r1
 800bcfe:	4640      	mov	r0, r8
 800bd00:	4649      	mov	r1, r9
 800bd02:	f04f 0200 	mov.w	r2, #0
 800bd06:	f04f 0300 	mov.w	r3, #0
 800bd0a:	014b      	lsls	r3, r1, #5
 800bd0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bd10:	0142      	lsls	r2, r0, #5
 800bd12:	4610      	mov	r0, r2
 800bd14:	4619      	mov	r1, r3
 800bd16:	ebb0 0008 	subs.w	r0, r0, r8
 800bd1a:	eb61 0109 	sbc.w	r1, r1, r9
 800bd1e:	f04f 0200 	mov.w	r2, #0
 800bd22:	f04f 0300 	mov.w	r3, #0
 800bd26:	018b      	lsls	r3, r1, #6
 800bd28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bd2c:	0182      	lsls	r2, r0, #6
 800bd2e:	1a12      	subs	r2, r2, r0
 800bd30:	eb63 0301 	sbc.w	r3, r3, r1
 800bd34:	f04f 0000 	mov.w	r0, #0
 800bd38:	f04f 0100 	mov.w	r1, #0
 800bd3c:	00d9      	lsls	r1, r3, #3
 800bd3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bd42:	00d0      	lsls	r0, r2, #3
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	eb12 0208 	adds.w	r2, r2, r8
 800bd4c:	eb43 0309 	adc.w	r3, r3, r9
 800bd50:	f04f 0000 	mov.w	r0, #0
 800bd54:	f04f 0100 	mov.w	r1, #0
 800bd58:	0259      	lsls	r1, r3, #9
 800bd5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800bd5e:	0250      	lsls	r0, r2, #9
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	4610      	mov	r0, r2
 800bd66:	4619      	mov	r1, r3
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	f04f 0300 	mov.w	r3, #0
 800bd70:	f7f4 fa9e 	bl	80002b0 <__aeabi_uldivmod>
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	4613      	mov	r3, r2
 800bd7a:	61fb      	str	r3, [r7, #28]
 800bd7c:	e04a      	b.n	800be14 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd7e:	4b30      	ldr	r3, [pc, #192]	; (800be40 <HAL_RCC_GetSysClockFreq+0x358>)
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	099b      	lsrs	r3, r3, #6
 800bd84:	461a      	mov	r2, r3
 800bd86:	f04f 0300 	mov.w	r3, #0
 800bd8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bd8e:	f04f 0100 	mov.w	r1, #0
 800bd92:	ea02 0400 	and.w	r4, r2, r0
 800bd96:	ea03 0501 	and.w	r5, r3, r1
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	f04f 0200 	mov.w	r2, #0
 800bda2:	f04f 0300 	mov.w	r3, #0
 800bda6:	014b      	lsls	r3, r1, #5
 800bda8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bdac:	0142      	lsls	r2, r0, #5
 800bdae:	4610      	mov	r0, r2
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	1b00      	subs	r0, r0, r4
 800bdb4:	eb61 0105 	sbc.w	r1, r1, r5
 800bdb8:	f04f 0200 	mov.w	r2, #0
 800bdbc:	f04f 0300 	mov.w	r3, #0
 800bdc0:	018b      	lsls	r3, r1, #6
 800bdc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bdc6:	0182      	lsls	r2, r0, #6
 800bdc8:	1a12      	subs	r2, r2, r0
 800bdca:	eb63 0301 	sbc.w	r3, r3, r1
 800bdce:	f04f 0000 	mov.w	r0, #0
 800bdd2:	f04f 0100 	mov.w	r1, #0
 800bdd6:	00d9      	lsls	r1, r3, #3
 800bdd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bddc:	00d0      	lsls	r0, r2, #3
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	1912      	adds	r2, r2, r4
 800bde4:	eb45 0303 	adc.w	r3, r5, r3
 800bde8:	f04f 0000 	mov.w	r0, #0
 800bdec:	f04f 0100 	mov.w	r1, #0
 800bdf0:	0299      	lsls	r1, r3, #10
 800bdf2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bdf6:	0290      	lsls	r0, r2, #10
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	4619      	mov	r1, r3
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	461a      	mov	r2, r3
 800be04:	f04f 0300 	mov.w	r3, #0
 800be08:	f7f4 fa52 	bl	80002b0 <__aeabi_uldivmod>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4613      	mov	r3, r2
 800be12:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800be14:	4b0a      	ldr	r3, [pc, #40]	; (800be40 <HAL_RCC_GetSysClockFreq+0x358>)
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	0f1b      	lsrs	r3, r3, #28
 800be1a:	f003 0307 	and.w	r3, r3, #7
 800be1e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800be20:	69fa      	ldr	r2, [r7, #28]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	fbb2 f3f3 	udiv	r3, r2, r3
 800be28:	61bb      	str	r3, [r7, #24]
      break;
 800be2a:	e002      	b.n	800be32 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800be2c:	4b05      	ldr	r3, [pc, #20]	; (800be44 <HAL_RCC_GetSysClockFreq+0x35c>)
 800be2e:	61bb      	str	r3, [r7, #24]
      break;
 800be30:	bf00      	nop
    }
  }
  return sysclockfreq;
 800be32:	69bb      	ldr	r3, [r7, #24]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3720      	adds	r7, #32
 800be38:	46bd      	mov	sp, r7
 800be3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be3e:	bf00      	nop
 800be40:	40023800 	.word	0x40023800
 800be44:	00f42400 	.word	0x00f42400
 800be48:	007a1200 	.word	0x007a1200

0800be4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b086      	sub	sp, #24
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d101      	bne.n	800be5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	e28d      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f003 0301 	and.w	r3, r3, #1
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 8083 	beq.w	800bf72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800be6c:	4b94      	ldr	r3, [pc, #592]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	f003 030c 	and.w	r3, r3, #12
 800be74:	2b04      	cmp	r3, #4
 800be76:	d019      	beq.n	800beac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800be78:	4b91      	ldr	r3, [pc, #580]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800be80:	2b08      	cmp	r3, #8
 800be82:	d106      	bne.n	800be92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800be84:	4b8e      	ldr	r3, [pc, #568]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be90:	d00c      	beq.n	800beac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800be92:	4b8b      	ldr	r3, [pc, #556]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800be9a:	2b0c      	cmp	r3, #12
 800be9c:	d112      	bne.n	800bec4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800be9e:	4b88      	ldr	r3, [pc, #544]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800beaa:	d10b      	bne.n	800bec4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800beac:	4b84      	ldr	r3, [pc, #528]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d05b      	beq.n	800bf70 <HAL_RCC_OscConfig+0x124>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d157      	bne.n	800bf70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e25a      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800becc:	d106      	bne.n	800bedc <HAL_RCC_OscConfig+0x90>
 800bece:	4b7c      	ldr	r3, [pc, #496]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a7b      	ldr	r2, [pc, #492]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bed8:	6013      	str	r3, [r2, #0]
 800beda:	e01d      	b.n	800bf18 <HAL_RCC_OscConfig+0xcc>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bee4:	d10c      	bne.n	800bf00 <HAL_RCC_OscConfig+0xb4>
 800bee6:	4b76      	ldr	r3, [pc, #472]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a75      	ldr	r2, [pc, #468]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800beec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bef0:	6013      	str	r3, [r2, #0]
 800bef2:	4b73      	ldr	r3, [pc, #460]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a72      	ldr	r2, [pc, #456]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	e00b      	b.n	800bf18 <HAL_RCC_OscConfig+0xcc>
 800bf00:	4b6f      	ldr	r3, [pc, #444]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a6e      	ldr	r2, [pc, #440]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bf06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf0a:	6013      	str	r3, [r2, #0]
 800bf0c:	4b6c      	ldr	r3, [pc, #432]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a6b      	ldr	r2, [pc, #428]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bf12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d013      	beq.n	800bf48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf20:	f7fa fdec 	bl	8006afc <HAL_GetTick>
 800bf24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf26:	e008      	b.n	800bf3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bf28:	f7fa fde8 	bl	8006afc <HAL_GetTick>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	2b64      	cmp	r3, #100	; 0x64
 800bf34:	d901      	bls.n	800bf3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800bf36:	2303      	movs	r3, #3
 800bf38:	e21f      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf3a:	4b61      	ldr	r3, [pc, #388]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d0f0      	beq.n	800bf28 <HAL_RCC_OscConfig+0xdc>
 800bf46:	e014      	b.n	800bf72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf48:	f7fa fdd8 	bl	8006afc <HAL_GetTick>
 800bf4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bf4e:	e008      	b.n	800bf62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bf50:	f7fa fdd4 	bl	8006afc <HAL_GetTick>
 800bf54:	4602      	mov	r2, r0
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	2b64      	cmp	r3, #100	; 0x64
 800bf5c:	d901      	bls.n	800bf62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	e20b      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bf62:	4b57      	ldr	r3, [pc, #348]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1f0      	bne.n	800bf50 <HAL_RCC_OscConfig+0x104>
 800bf6e:	e000      	b.n	800bf72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 0302 	and.w	r3, r3, #2
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d06f      	beq.n	800c05e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bf7e:	4b50      	ldr	r3, [pc, #320]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	f003 030c 	and.w	r3, r3, #12
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d017      	beq.n	800bfba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bf8a:	4b4d      	ldr	r3, [pc, #308]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bf92:	2b08      	cmp	r3, #8
 800bf94:	d105      	bne.n	800bfa2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bf96:	4b4a      	ldr	r3, [pc, #296]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00b      	beq.n	800bfba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bfa2:	4b47      	ldr	r3, [pc, #284]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bfaa:	2b0c      	cmp	r3, #12
 800bfac:	d11c      	bne.n	800bfe8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bfae:	4b44      	ldr	r3, [pc, #272]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d116      	bne.n	800bfe8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bfba:	4b41      	ldr	r3, [pc, #260]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f003 0302 	and.w	r3, r3, #2
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d005      	beq.n	800bfd2 <HAL_RCC_OscConfig+0x186>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d001      	beq.n	800bfd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e1d3      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bfd2:	4b3b      	ldr	r3, [pc, #236]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	00db      	lsls	r3, r3, #3
 800bfe0:	4937      	ldr	r1, [pc, #220]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bfe6:	e03a      	b.n	800c05e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d020      	beq.n	800c032 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bff0:	4b34      	ldr	r3, [pc, #208]	; (800c0c4 <HAL_RCC_OscConfig+0x278>)
 800bff2:	2201      	movs	r2, #1
 800bff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bff6:	f7fa fd81 	bl	8006afc <HAL_GetTick>
 800bffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bffc:	e008      	b.n	800c010 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bffe:	f7fa fd7d 	bl	8006afc <HAL_GetTick>
 800c002:	4602      	mov	r2, r0
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	1ad3      	subs	r3, r2, r3
 800c008:	2b02      	cmp	r3, #2
 800c00a:	d901      	bls.n	800c010 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c00c:	2303      	movs	r3, #3
 800c00e:	e1b4      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c010:	4b2b      	ldr	r3, [pc, #172]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f003 0302 	and.w	r3, r3, #2
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d0f0      	beq.n	800bffe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c01c:	4b28      	ldr	r3, [pc, #160]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	00db      	lsls	r3, r3, #3
 800c02a:	4925      	ldr	r1, [pc, #148]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800c02c:	4313      	orrs	r3, r2
 800c02e:	600b      	str	r3, [r1, #0]
 800c030:	e015      	b.n	800c05e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c032:	4b24      	ldr	r3, [pc, #144]	; (800c0c4 <HAL_RCC_OscConfig+0x278>)
 800c034:	2200      	movs	r2, #0
 800c036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c038:	f7fa fd60 	bl	8006afc <HAL_GetTick>
 800c03c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c03e:	e008      	b.n	800c052 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c040:	f7fa fd5c 	bl	8006afc <HAL_GetTick>
 800c044:	4602      	mov	r2, r0
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d901      	bls.n	800c052 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e193      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c052:	4b1b      	ldr	r3, [pc, #108]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 0302 	and.w	r3, r3, #2
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1f0      	bne.n	800c040 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f003 0308 	and.w	r3, r3, #8
 800c066:	2b00      	cmp	r3, #0
 800c068:	d036      	beq.n	800c0d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	695b      	ldr	r3, [r3, #20]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d016      	beq.n	800c0a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c072:	4b15      	ldr	r3, [pc, #84]	; (800c0c8 <HAL_RCC_OscConfig+0x27c>)
 800c074:	2201      	movs	r2, #1
 800c076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c078:	f7fa fd40 	bl	8006afc <HAL_GetTick>
 800c07c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c07e:	e008      	b.n	800c092 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c080:	f7fa fd3c 	bl	8006afc <HAL_GetTick>
 800c084:	4602      	mov	r2, r0
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	1ad3      	subs	r3, r2, r3
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d901      	bls.n	800c092 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c08e:	2303      	movs	r3, #3
 800c090:	e173      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c092:	4b0b      	ldr	r3, [pc, #44]	; (800c0c0 <HAL_RCC_OscConfig+0x274>)
 800c094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c096:	f003 0302 	and.w	r3, r3, #2
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d0f0      	beq.n	800c080 <HAL_RCC_OscConfig+0x234>
 800c09e:	e01b      	b.n	800c0d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c0a0:	4b09      	ldr	r3, [pc, #36]	; (800c0c8 <HAL_RCC_OscConfig+0x27c>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0a6:	f7fa fd29 	bl	8006afc <HAL_GetTick>
 800c0aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c0ac:	e00e      	b.n	800c0cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c0ae:	f7fa fd25 	bl	8006afc <HAL_GetTick>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	d907      	bls.n	800c0cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c0bc:	2303      	movs	r3, #3
 800c0be:	e15c      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
 800c0c0:	40023800 	.word	0x40023800
 800c0c4:	42470000 	.word	0x42470000
 800c0c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c0cc:	4b8a      	ldr	r3, [pc, #552]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c0ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0d0:	f003 0302 	and.w	r3, r3, #2
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d1ea      	bne.n	800c0ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 0304 	and.w	r3, r3, #4
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f000 8097 	beq.w	800c214 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c0ea:	4b83      	ldr	r3, [pc, #524]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d10f      	bne.n	800c116 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	60bb      	str	r3, [r7, #8]
 800c0fa:	4b7f      	ldr	r3, [pc, #508]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0fe:	4a7e      	ldr	r2, [pc, #504]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c104:	6413      	str	r3, [r2, #64]	; 0x40
 800c106:	4b7c      	ldr	r3, [pc, #496]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c10a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c10e:	60bb      	str	r3, [r7, #8]
 800c110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c112:	2301      	movs	r3, #1
 800c114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c116:	4b79      	ldr	r3, [pc, #484]	; (800c2fc <HAL_RCC_OscConfig+0x4b0>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d118      	bne.n	800c154 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c122:	4b76      	ldr	r3, [pc, #472]	; (800c2fc <HAL_RCC_OscConfig+0x4b0>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a75      	ldr	r2, [pc, #468]	; (800c2fc <HAL_RCC_OscConfig+0x4b0>)
 800c128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c12c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c12e:	f7fa fce5 	bl	8006afc <HAL_GetTick>
 800c132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c134:	e008      	b.n	800c148 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c136:	f7fa fce1 	bl	8006afc <HAL_GetTick>
 800c13a:	4602      	mov	r2, r0
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	2b02      	cmp	r3, #2
 800c142:	d901      	bls.n	800c148 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800c144:	2303      	movs	r3, #3
 800c146:	e118      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c148:	4b6c      	ldr	r3, [pc, #432]	; (800c2fc <HAL_RCC_OscConfig+0x4b0>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c150:	2b00      	cmp	r3, #0
 800c152:	d0f0      	beq.n	800c136 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d106      	bne.n	800c16a <HAL_RCC_OscConfig+0x31e>
 800c15c:	4b66      	ldr	r3, [pc, #408]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c15e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c160:	4a65      	ldr	r2, [pc, #404]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c162:	f043 0301 	orr.w	r3, r3, #1
 800c166:	6713      	str	r3, [r2, #112]	; 0x70
 800c168:	e01c      	b.n	800c1a4 <HAL_RCC_OscConfig+0x358>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	2b05      	cmp	r3, #5
 800c170:	d10c      	bne.n	800c18c <HAL_RCC_OscConfig+0x340>
 800c172:	4b61      	ldr	r3, [pc, #388]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c176:	4a60      	ldr	r2, [pc, #384]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c178:	f043 0304 	orr.w	r3, r3, #4
 800c17c:	6713      	str	r3, [r2, #112]	; 0x70
 800c17e:	4b5e      	ldr	r3, [pc, #376]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c182:	4a5d      	ldr	r2, [pc, #372]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c184:	f043 0301 	orr.w	r3, r3, #1
 800c188:	6713      	str	r3, [r2, #112]	; 0x70
 800c18a:	e00b      	b.n	800c1a4 <HAL_RCC_OscConfig+0x358>
 800c18c:	4b5a      	ldr	r3, [pc, #360]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c18e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c190:	4a59      	ldr	r2, [pc, #356]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c192:	f023 0301 	bic.w	r3, r3, #1
 800c196:	6713      	str	r3, [r2, #112]	; 0x70
 800c198:	4b57      	ldr	r3, [pc, #348]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c19c:	4a56      	ldr	r2, [pc, #344]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c19e:	f023 0304 	bic.w	r3, r3, #4
 800c1a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d015      	beq.n	800c1d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1ac:	f7fa fca6 	bl	8006afc <HAL_GetTick>
 800c1b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c1b2:	e00a      	b.n	800c1ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c1b4:	f7fa fca2 	bl	8006afc <HAL_GetTick>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d901      	bls.n	800c1ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800c1c6:	2303      	movs	r3, #3
 800c1c8:	e0d7      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c1ca:	4b4b      	ldr	r3, [pc, #300]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1ce:	f003 0302 	and.w	r3, r3, #2
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d0ee      	beq.n	800c1b4 <HAL_RCC_OscConfig+0x368>
 800c1d6:	e014      	b.n	800c202 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1d8:	f7fa fc90 	bl	8006afc <HAL_GetTick>
 800c1dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c1de:	e00a      	b.n	800c1f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c1e0:	f7fa fc8c 	bl	8006afc <HAL_GetTick>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d901      	bls.n	800c1f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	e0c1      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c1f6:	4b40      	ldr	r3, [pc, #256]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1fa:	f003 0302 	and.w	r3, r3, #2
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1ee      	bne.n	800c1e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c202:	7dfb      	ldrb	r3, [r7, #23]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d105      	bne.n	800c214 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c208:	4b3b      	ldr	r3, [pc, #236]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20c:	4a3a      	ldr	r2, [pc, #232]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c20e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c212:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f000 80ad 	beq.w	800c378 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c21e:	4b36      	ldr	r3, [pc, #216]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	f003 030c 	and.w	r3, r3, #12
 800c226:	2b08      	cmp	r3, #8
 800c228:	d060      	beq.n	800c2ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	699b      	ldr	r3, [r3, #24]
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d145      	bne.n	800c2be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c232:	4b33      	ldr	r3, [pc, #204]	; (800c300 <HAL_RCC_OscConfig+0x4b4>)
 800c234:	2200      	movs	r2, #0
 800c236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c238:	f7fa fc60 	bl	8006afc <HAL_GetTick>
 800c23c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c23e:	e008      	b.n	800c252 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c240:	f7fa fc5c 	bl	8006afc <HAL_GetTick>
 800c244:	4602      	mov	r2, r0
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d901      	bls.n	800c252 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800c24e:	2303      	movs	r3, #3
 800c250:	e093      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c252:	4b29      	ldr	r3, [pc, #164]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1f0      	bne.n	800c240 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	69da      	ldr	r2, [r3, #28]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6a1b      	ldr	r3, [r3, #32]
 800c266:	431a      	orrs	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26c:	019b      	lsls	r3, r3, #6
 800c26e:	431a      	orrs	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c274:	085b      	lsrs	r3, r3, #1
 800c276:	3b01      	subs	r3, #1
 800c278:	041b      	lsls	r3, r3, #16
 800c27a:	431a      	orrs	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c280:	061b      	lsls	r3, r3, #24
 800c282:	431a      	orrs	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c288:	071b      	lsls	r3, r3, #28
 800c28a:	491b      	ldr	r1, [pc, #108]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c28c:	4313      	orrs	r3, r2
 800c28e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c290:	4b1b      	ldr	r3, [pc, #108]	; (800c300 <HAL_RCC_OscConfig+0x4b4>)
 800c292:	2201      	movs	r2, #1
 800c294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c296:	f7fa fc31 	bl	8006afc <HAL_GetTick>
 800c29a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c29c:	e008      	b.n	800c2b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c29e:	f7fa fc2d 	bl	8006afc <HAL_GetTick>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	1ad3      	subs	r3, r2, r3
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d901      	bls.n	800c2b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	e064      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c2b0:	4b11      	ldr	r3, [pc, #68]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d0f0      	beq.n	800c29e <HAL_RCC_OscConfig+0x452>
 800c2bc:	e05c      	b.n	800c378 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2be:	4b10      	ldr	r3, [pc, #64]	; (800c300 <HAL_RCC_OscConfig+0x4b4>)
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2c4:	f7fa fc1a 	bl	8006afc <HAL_GetTick>
 800c2c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c2ca:	e008      	b.n	800c2de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c2cc:	f7fa fc16 	bl	8006afc <HAL_GetTick>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	2b02      	cmp	r3, #2
 800c2d8:	d901      	bls.n	800c2de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e04d      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c2de:	4b06      	ldr	r3, [pc, #24]	; (800c2f8 <HAL_RCC_OscConfig+0x4ac>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1f0      	bne.n	800c2cc <HAL_RCC_OscConfig+0x480>
 800c2ea:	e045      	b.n	800c378 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	699b      	ldr	r3, [r3, #24]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d107      	bne.n	800c304 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e040      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
 800c2f8:	40023800 	.word	0x40023800
 800c2fc:	40007000 	.word	0x40007000
 800c300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c304:	4b1f      	ldr	r3, [pc, #124]	; (800c384 <HAL_RCC_OscConfig+0x538>)
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	699b      	ldr	r3, [r3, #24]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d030      	beq.n	800c374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d129      	bne.n	800c374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d122      	bne.n	800c374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c334:	4013      	ands	r3, r2
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c33a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d119      	bne.n	800c374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c34a:	085b      	lsrs	r3, r3, #1
 800c34c:	3b01      	subs	r3, #1
 800c34e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c350:	429a      	cmp	r2, r3
 800c352:	d10f      	bne.n	800c374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c360:	429a      	cmp	r2, r3
 800c362:	d107      	bne.n	800c374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c36e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c370:	429a      	cmp	r2, r3
 800c372:	d001      	beq.n	800c378 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	e000      	b.n	800c37a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3718      	adds	r7, #24
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	40023800 	.word	0x40023800

0800c388 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d101      	bne.n	800c39a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
 800c398:	e083      	b.n	800c4a2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	7f5b      	ldrb	r3, [r3, #29]
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d105      	bne.n	800c3b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7fa f906 	bl	80065bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	22ca      	movs	r2, #202	; 0xca
 800c3bc:	625a      	str	r2, [r3, #36]	; 0x24
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2253      	movs	r2, #83	; 0x53
 800c3c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 faa8 	bl	800c91c <RTC_EnterInitMode>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d008      	beq.n	800c3e4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	22ff      	movs	r2, #255	; 0xff
 800c3d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2204      	movs	r2, #4
 800c3de:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e05e      	b.n	800c4a2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	6812      	ldr	r2, [r2, #0]
 800c3ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c3f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	6899      	ldr	r1, [r3, #8]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685a      	ldr	r2, [r3, #4]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	431a      	orrs	r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	695b      	ldr	r3, [r3, #20]
 800c40c:	431a      	orrs	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	68d2      	ldr	r2, [r2, #12]
 800c41e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6919      	ldr	r1, [r3, #16]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	041a      	lsls	r2, r3, #16
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	430a      	orrs	r2, r1
 800c432:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68da      	ldr	r2, [r3, #12]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c442:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f003 0320 	and.w	r3, r3, #32
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10e      	bne.n	800c470 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 fa3a 	bl	800c8cc <HAL_RTC_WaitForSynchro>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d008      	beq.n	800c470 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	22ff      	movs	r2, #255	; 0xff
 800c464:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2204      	movs	r2, #4
 800c46a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	e018      	b.n	800c4a2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c47e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	699a      	ldr	r2, [r3, #24]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	430a      	orrs	r2, r1
 800c490:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	22ff      	movs	r2, #255	; 0xff
 800c498:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2201      	movs	r2, #1
 800c49e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c4a0:	2300      	movs	r3, #0
  }
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c4aa:	b590      	push	{r4, r7, lr}
 800c4ac:	b087      	sub	sp, #28
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	60f8      	str	r0, [r7, #12]
 800c4b2:	60b9      	str	r1, [r7, #8]
 800c4b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	7f1b      	ldrb	r3, [r3, #28]
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d101      	bne.n	800c4c6 <HAL_RTC_SetTime+0x1c>
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	e0aa      	b.n	800c61c <HAL_RTC_SetTime+0x172>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d126      	bne.n	800c526 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d102      	bne.n	800c4ec <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f000 fa3f 	bl	800c974 <RTC_ByteToBcd2>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	785b      	ldrb	r3, [r3, #1]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 fa38 	bl	800c974 <RTC_ByteToBcd2>
 800c504:	4603      	mov	r3, r0
 800c506:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c508:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	789b      	ldrb	r3, [r3, #2]
 800c50e:	4618      	mov	r0, r3
 800c510:	f000 fa30 	bl	800c974 <RTC_ByteToBcd2>
 800c514:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c516:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	78db      	ldrb	r3, [r3, #3]
 800c51e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c520:	4313      	orrs	r3, r2
 800c522:	617b      	str	r3, [r7, #20]
 800c524:	e018      	b.n	800c558 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c530:	2b00      	cmp	r3, #0
 800c532:	d102      	bne.n	800c53a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	2200      	movs	r2, #0
 800c538:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	785b      	ldrb	r3, [r3, #1]
 800c544:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c546:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c54c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	78db      	ldrb	r3, [r3, #3]
 800c552:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c554:	4313      	orrs	r3, r2
 800c556:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	22ca      	movs	r2, #202	; 0xca
 800c55e:	625a      	str	r2, [r3, #36]	; 0x24
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2253      	movs	r2, #83	; 0x53
 800c566:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f000 f9d7 	bl	800c91c <RTC_EnterInitMode>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00b      	beq.n	800c58c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	22ff      	movs	r2, #255	; 0xff
 800c57a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2204      	movs	r2, #4
 800c580:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	e047      	b.n	800c61c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c596:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c59a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	689a      	ldr	r2, [r3, #8]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c5aa:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6899      	ldr	r1, [r3, #8]
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	68da      	ldr	r2, [r3, #12]
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	431a      	orrs	r2, r3
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	430a      	orrs	r2, r1
 800c5c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68da      	ldr	r2, [r3, #12]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	f003 0320 	and.w	r3, r3, #32
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d111      	bne.n	800c606 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c5e2:	68f8      	ldr	r0, [r7, #12]
 800c5e4:	f000 f972 	bl	800c8cc <HAL_RTC_WaitForSynchro>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00b      	beq.n	800c606 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	22ff      	movs	r2, #255	; 0xff
 800c5f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2204      	movs	r2, #4
 800c5fa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c602:	2301      	movs	r3, #1
 800c604:	e00a      	b.n	800c61c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	22ff      	movs	r2, #255	; 0xff
 800c60c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2201      	movs	r2, #1
 800c612:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c61a:	2300      	movs	r3, #0
  }
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	371c      	adds	r7, #28
 800c620:	46bd      	mov	sp, r7
 800c622:	bd90      	pop	{r4, r7, pc}

0800c624 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c630:	2300      	movs	r3, #0
 800c632:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c656:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c65a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	0c1b      	lsrs	r3, r3, #16
 800c660:	b2db      	uxtb	r3, r3
 800c662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c666:	b2da      	uxtb	r2, r3
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	0a1b      	lsrs	r3, r3, #8
 800c670:	b2db      	uxtb	r3, r3
 800c672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c676:	b2da      	uxtb	r2, r3
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c684:	b2da      	uxtb	r2, r3
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	0c1b      	lsrs	r3, r3, #16
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c694:	b2da      	uxtb	r2, r3
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d11a      	bne.n	800c6d6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f000 f983 	bl	800c9b0 <RTC_Bcd2ToByte>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	785b      	ldrb	r3, [r3, #1]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 f97a 	bl	800c9b0 <RTC_Bcd2ToByte>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	461a      	mov	r2, r3
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	789b      	ldrb	r3, [r3, #2]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f000 f971 	bl	800c9b0 <RTC_Bcd2ToByte>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3718      	adds	r7, #24
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c6e0:	b590      	push	{r4, r7, lr}
 800c6e2:	b087      	sub	sp, #28
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	7f1b      	ldrb	r3, [r3, #28]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d101      	bne.n	800c6fc <HAL_RTC_SetDate+0x1c>
 800c6f8:	2302      	movs	r3, #2
 800c6fa:	e094      	b.n	800c826 <HAL_RTC_SetDate+0x146>
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2201      	movs	r2, #1
 800c700:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2202      	movs	r2, #2
 800c706:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d10e      	bne.n	800c72c <HAL_RTC_SetDate+0x4c>
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	785b      	ldrb	r3, [r3, #1]
 800c712:	f003 0310 	and.w	r3, r3, #16
 800c716:	2b00      	cmp	r3, #0
 800c718:	d008      	beq.n	800c72c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	785b      	ldrb	r3, [r3, #1]
 800c71e:	f023 0310 	bic.w	r3, r3, #16
 800c722:	b2db      	uxtb	r3, r3
 800c724:	330a      	adds	r3, #10
 800c726:	b2da      	uxtb	r2, r3
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d11c      	bne.n	800c76c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	78db      	ldrb	r3, [r3, #3]
 800c736:	4618      	mov	r0, r3
 800c738:	f000 f91c 	bl	800c974 <RTC_ByteToBcd2>
 800c73c:	4603      	mov	r3, r0
 800c73e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	785b      	ldrb	r3, [r3, #1]
 800c744:	4618      	mov	r0, r3
 800c746:	f000 f915 	bl	800c974 <RTC_ByteToBcd2>
 800c74a:	4603      	mov	r3, r0
 800c74c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c74e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	789b      	ldrb	r3, [r3, #2]
 800c754:	4618      	mov	r0, r3
 800c756:	f000 f90d 	bl	800c974 <RTC_ByteToBcd2>
 800c75a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c75c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c766:	4313      	orrs	r3, r2
 800c768:	617b      	str	r3, [r7, #20]
 800c76a:	e00e      	b.n	800c78a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	78db      	ldrb	r3, [r3, #3]
 800c770:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	785b      	ldrb	r3, [r3, #1]
 800c776:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c778:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c77e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c786:	4313      	orrs	r3, r2
 800c788:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	22ca      	movs	r2, #202	; 0xca
 800c790:	625a      	str	r2, [r3, #36]	; 0x24
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2253      	movs	r2, #83	; 0x53
 800c798:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f000 f8be 	bl	800c91c <RTC_EnterInitMode>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00b      	beq.n	800c7be <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	22ff      	movs	r2, #255	; 0xff
 800c7ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2204      	movs	r2, #4
 800c7b2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e033      	b.n	800c826 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c7cc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	68da      	ldr	r2, [r3, #12]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7dc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	f003 0320 	and.w	r3, r3, #32
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d111      	bne.n	800c810 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f000 f86d 	bl	800c8cc <HAL_RTC_WaitForSynchro>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00b      	beq.n	800c810 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	22ff      	movs	r2, #255	; 0xff
 800c7fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2204      	movs	r2, #4
 800c804:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2200      	movs	r2, #0
 800c80a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
 800c80e:	e00a      	b.n	800c826 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	22ff      	movs	r2, #255	; 0xff
 800c816:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2201      	movs	r2, #1
 800c81c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2200      	movs	r2, #0
 800c822:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c824:	2300      	movs	r3, #0
  }
}
 800c826:	4618      	mov	r0, r3
 800c828:	371c      	adds	r7, #28
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd90      	pop	{r4, r7, pc}

0800c82e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b086      	sub	sp, #24
 800c832:	af00      	add	r7, sp, #0
 800c834:	60f8      	str	r0, [r7, #12]
 800c836:	60b9      	str	r1, [r7, #8]
 800c838:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c83a:	2300      	movs	r3, #0
 800c83c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c848:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c84c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	0c1b      	lsrs	r3, r3, #16
 800c852:	b2da      	uxtb	r2, r3
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	0a1b      	lsrs	r3, r3, #8
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	f003 031f 	and.w	r3, r3, #31
 800c862:	b2da      	uxtb	r2, r3
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c870:	b2da      	uxtb	r2, r3
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	0b5b      	lsrs	r3, r3, #13
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	f003 0307 	and.w	r3, r3, #7
 800c880:	b2da      	uxtb	r2, r3
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d11a      	bne.n	800c8c2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	78db      	ldrb	r3, [r3, #3]
 800c890:	4618      	mov	r0, r3
 800c892:	f000 f88d 	bl	800c9b0 <RTC_Bcd2ToByte>
 800c896:	4603      	mov	r3, r0
 800c898:	461a      	mov	r2, r3
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	785b      	ldrb	r3, [r3, #1]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 f884 	bl	800c9b0 <RTC_Bcd2ToByte>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	789b      	ldrb	r3, [r3, #2]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 f87b 	bl	800c9b0 <RTC_Bcd2ToByte>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	461a      	mov	r2, r3
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68da      	ldr	r2, [r3, #12]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c8e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c8e8:	f7fa f908 	bl	8006afc <HAL_GetTick>
 800c8ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c8ee:	e009      	b.n	800c904 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c8f0:	f7fa f904 	bl	8006afc <HAL_GetTick>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8fe:	d901      	bls.n	800c904 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c900:	2303      	movs	r3, #3
 800c902:	e007      	b.n	800c914 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	f003 0320 	and.w	r3, r3, #32
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d0ee      	beq.n	800c8f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3710      	adds	r7, #16
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c924:	2300      	movs	r3, #0
 800c926:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c932:	2b00      	cmp	r3, #0
 800c934:	d119      	bne.n	800c96a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f04f 32ff 	mov.w	r2, #4294967295
 800c93e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c940:	f7fa f8dc 	bl	8006afc <HAL_GetTick>
 800c944:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c946:	e009      	b.n	800c95c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c948:	f7fa f8d8 	bl	8006afc <HAL_GetTick>
 800c94c:	4602      	mov	r2, r0
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c956:	d901      	bls.n	800c95c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c958:	2303      	movs	r3, #3
 800c95a:	e007      	b.n	800c96c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c966:	2b00      	cmp	r3, #0
 800c968:	d0ee      	beq.n	800c948 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	4603      	mov	r3, r0
 800c97c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c982:	e005      	b.n	800c990 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	3301      	adds	r3, #1
 800c988:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c98a:	79fb      	ldrb	r3, [r7, #7]
 800c98c:	3b0a      	subs	r3, #10
 800c98e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c990:	79fb      	ldrb	r3, [r7, #7]
 800c992:	2b09      	cmp	r3, #9
 800c994:	d8f6      	bhi.n	800c984 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	011b      	lsls	r3, r3, #4
 800c99c:	b2da      	uxtb	r2, r3
 800c99e:	79fb      	ldrb	r3, [r7, #7]
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	b2db      	uxtb	r3, r3
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3714      	adds	r7, #20
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c9be:	79fb      	ldrb	r3, [r7, #7]
 800c9c0:	091b      	lsrs	r3, r3, #4
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	4413      	add	r3, r2
 800c9cc:	005b      	lsls	r3, r3, #1
 800c9ce:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c9d0:	79fb      	ldrb	r3, [r7, #7]
 800c9d2:	f003 030f 	and.w	r3, r3, #15
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	4413      	add	r3, r2
 800c9de:	b2db      	uxtb	r3, r3
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3714      	adds	r7, #20
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b087      	sub	sp, #28
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	3350      	adds	r3, #80	; 0x50
 800ca02:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	697a      	ldr	r2, [r7, #20]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	601a      	str	r2, [r3, #0]
}
 800ca14:	bf00      	nop
 800ca16:	371c      	adds	r7, #28
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	3350      	adds	r3, #80	; 0x50
 800ca34:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3714      	adds	r7, #20
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e022      	b.n	800caa8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d105      	bne.n	800ca7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f7f9 fdcb 	bl	8006610 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2203      	movs	r2, #3
 800ca7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f814 	bl	800cab0 <HAL_SD_InitCard>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e00a      	b.n	800caa8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800caa6:	2300      	movs	r3, #0
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cab0:	b5b0      	push	{r4, r5, r7, lr}
 800cab2:	b08e      	sub	sp, #56	; 0x38
 800cab4:	af04      	add	r7, sp, #16
 800cab6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cab8:	2300      	movs	r3, #0
 800caba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cabc:	2300      	movs	r3, #0
 800cabe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cac0:	2300      	movs	r3, #0
 800cac2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cac4:	2300      	movs	r3, #0
 800cac6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cac8:	2300      	movs	r3, #0
 800caca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cacc:	2376      	movs	r3, #118	; 0x76
 800cace:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681d      	ldr	r5, [r3, #0]
 800cad4:	466c      	mov	r4, sp
 800cad6:	f107 0314 	add.w	r3, r7, #20
 800cada:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cade:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cae2:	f107 0308 	add.w	r3, r7, #8
 800cae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cae8:	4628      	mov	r0, r5
 800caea:	f002 f94d 	bl	800ed88 <SDIO_Init>
 800caee:	4603      	mov	r3, r0
 800caf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800caf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d001      	beq.n	800cb00 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cafc:	2301      	movs	r3, #1
 800cafe:	e04c      	b.n	800cb9a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cb00:	4b28      	ldr	r3, [pc, #160]	; (800cba4 <HAL_SD_InitCard+0xf4>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f002 f985 	bl	800ee1a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cb10:	4b24      	ldr	r3, [pc, #144]	; (800cba4 <HAL_SD_InitCard+0xf4>)
 800cb12:	2201      	movs	r2, #1
 800cb14:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f001 fb52 	bl	800e1c0 <SD_PowerON>
 800cb1c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb1e:	6a3b      	ldr	r3, [r7, #32]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00b      	beq.n	800cb3c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	431a      	orrs	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e02e      	b.n	800cb9a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f001 fa73 	bl	800e028 <SD_InitCard>
 800cb42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb44:	6a3b      	ldr	r3, [r7, #32]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00b      	beq.n	800cb62 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb56:	6a3b      	ldr	r3, [r7, #32]
 800cb58:	431a      	orrs	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e01b      	b.n	800cb9a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f002 f9e8 	bl	800ef40 <SDMMC_CmdBlockLength>
 800cb70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb72:	6a3b      	ldr	r3, [r7, #32]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d00f      	beq.n	800cb98 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a0a      	ldr	r2, [pc, #40]	; (800cba8 <HAL_SD_InitCard+0xf8>)
 800cb7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb84:	6a3b      	ldr	r3, [r7, #32]
 800cb86:	431a      	orrs	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cb94:	2301      	movs	r3, #1
 800cb96:	e000      	b.n	800cb9a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3728      	adds	r7, #40	; 0x28
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bdb0      	pop	{r4, r5, r7, pc}
 800cba2:	bf00      	nop
 800cba4:	422580a0 	.word	0x422580a0
 800cba8:	004005ff 	.word	0x004005ff

0800cbac <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b092      	sub	sp, #72	; 0x48
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
 800cbb8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cbba:	f7f9 ff9f 	bl	8006afc <HAL_GetTick>
 800cbbe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d107      	bne.n	800cbde <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e1bd      	b.n	800cf5a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	f040 81b0 	bne.w	800cf4c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cbf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	441a      	add	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d907      	bls.n	800cc10 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc04:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	e1a4      	b.n	800cf5a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2203      	movs	r2, #3
 800cc14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d002      	beq.n	800cc2e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2a:	025b      	lsls	r3, r3, #9
 800cc2c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cc2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc32:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	025b      	lsls	r3, r3, #9
 800cc38:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cc3a:	2390      	movs	r3, #144	; 0x90
 800cc3c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cc3e:	2302      	movs	r3, #2
 800cc40:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800cc46:	2301      	movs	r3, #1
 800cc48:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f107 0214 	add.w	r2, r7, #20
 800cc52:	4611      	mov	r1, r2
 800cc54:	4618      	mov	r0, r3
 800cc56:	f002 f947 	bl	800eee8 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d90a      	bls.n	800cc76 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2202      	movs	r2, #2
 800cc64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f002 f9ab 	bl	800efc8 <SDMMC_CmdReadMultiBlock>
 800cc72:	6478      	str	r0, [r7, #68]	; 0x44
 800cc74:	e009      	b.n	800cc8a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2201      	movs	r2, #1
 800cc7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc82:	4618      	mov	r0, r3
 800cc84:	f002 f97e 	bl	800ef84 <SDMMC_CmdReadSingleBlock>
 800cc88:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d012      	beq.n	800ccb6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a7a      	ldr	r2, [pc, #488]	; (800ce80 <HAL_SD_ReadBlocks+0x2d4>)
 800cc96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc9e:	431a      	orrs	r2, r3
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e151      	b.n	800cf5a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800ccba:	e061      	b.n	800cd80 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d03c      	beq.n	800cd44 <HAL_SD_ReadBlocks+0x198>
 800ccca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d039      	beq.n	800cd44 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	643b      	str	r3, [r7, #64]	; 0x40
 800ccd4:	e033      	b.n	800cd3e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f002 f87f 	bl	800edde <SDIO_ReadFIFO>
 800cce0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce4:	b2da      	uxtb	r2, r3
 800cce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ccea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccec:	3301      	adds	r3, #1
 800ccee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800ccf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800ccf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf8:	0a1b      	lsrs	r3, r3, #8
 800ccfa:	b2da      	uxtb	r2, r3
 800ccfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccfe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd02:	3301      	adds	r3, #1
 800cd04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cd06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0e:	0c1b      	lsrs	r3, r3, #16
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd14:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd18:	3301      	adds	r3, #1
 800cd1a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd24:	0e1b      	lsrs	r3, r3, #24
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd2a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd2e:	3301      	adds	r3, #1
 800cd30:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd34:	3b01      	subs	r3, #1
 800cd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800cd38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	643b      	str	r3, [r7, #64]	; 0x40
 800cd3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd40:	2b07      	cmp	r3, #7
 800cd42:	d9c8      	bls.n	800ccd6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cd44:	f7f9 feda 	bl	8006afc <HAL_GetTick>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d902      	bls.n	800cd5a <HAL_SD_ReadBlocks+0x1ae>
 800cd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d112      	bne.n	800cd80 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a48      	ldr	r2, [pc, #288]	; (800ce80 <HAL_SD_ReadBlocks+0x2d4>)
 800cd60:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800cd7c:	2303      	movs	r3, #3
 800cd7e:	e0ec      	b.n	800cf5a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd86:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d096      	beq.n	800ccbc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d022      	beq.n	800cde2 <HAL_SD_ReadBlocks+0x236>
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d91f      	bls.n	800cde2 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d01b      	beq.n	800cde2 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f002 f970 	bl	800f094 <SDMMC_CmdStopTransfer>
 800cdb4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cdb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d012      	beq.n	800cde2 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a2f      	ldr	r2, [pc, #188]	; (800ce80 <HAL_SD_ReadBlocks+0x2d4>)
 800cdc2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdca:	431a      	orrs	r2, r3
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2200      	movs	r2, #0
 800cddc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800cdde:	2301      	movs	r3, #1
 800cde0:	e0bb      	b.n	800cf5a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde8:	f003 0308 	and.w	r3, r3, #8
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d012      	beq.n	800ce16 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a22      	ldr	r2, [pc, #136]	; (800ce80 <HAL_SD_ReadBlocks+0x2d4>)
 800cdf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdfc:	f043 0208 	orr.w	r2, r3, #8
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ce12:	2301      	movs	r3, #1
 800ce14:	e0a1      	b.n	800cf5a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce1c:	f003 0302 	and.w	r3, r3, #2
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d012      	beq.n	800ce4a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a15      	ldr	r2, [pc, #84]	; (800ce80 <HAL_SD_ReadBlocks+0x2d4>)
 800ce2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce30:	f043 0202 	orr.w	r2, r3, #2
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2200      	movs	r2, #0
 800ce44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e087      	b.n	800cf5a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce50:	f003 0320 	and.w	r3, r3, #32
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d064      	beq.n	800cf22 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a08      	ldr	r2, [pc, #32]	; (800ce80 <HAL_SD_ReadBlocks+0x2d4>)
 800ce5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce64:	f043 0220 	orr.w	r2, r3, #32
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2200      	movs	r2, #0
 800ce78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e06d      	b.n	800cf5a <HAL_SD_ReadBlocks+0x3ae>
 800ce7e:	bf00      	nop
 800ce80:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f001 ffa8 	bl	800edde <SDIO_ReadFIFO>
 800ce8e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800ce90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce96:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ce98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800ce9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cea0:	3b01      	subs	r3, #1
 800cea2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea6:	0a1b      	lsrs	r3, r3, #8
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ceae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800ceb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ceba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebc:	0c1b      	lsrs	r3, r3, #16
 800cebe:	b2da      	uxtb	r2, r3
 800cec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec6:	3301      	adds	r3, #1
 800cec8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800ceca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cecc:	3b01      	subs	r3, #1
 800cece:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	0e1b      	lsrs	r3, r3, #24
 800ced4:	b2da      	uxtb	r2, r3
 800ced6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ceda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cedc:	3301      	adds	r3, #1
 800cede:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800cee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee2:	3b01      	subs	r3, #1
 800cee4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cee6:	f7f9 fe09 	bl	8006afc <HAL_GetTick>
 800ceea:	4602      	mov	r2, r0
 800ceec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d902      	bls.n	800cefc <HAL_SD_ReadBlocks+0x350>
 800cef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d112      	bne.n	800cf22 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a18      	ldr	r2, [pc, #96]	; (800cf64 <HAL_SD_ReadBlocks+0x3b8>)
 800cf02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e01b      	b.n	800cf5a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d002      	beq.n	800cf36 <HAL_SD_ReadBlocks+0x38a>
 800cf30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d1a6      	bne.n	800ce84 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f240 523a 	movw	r2, #1338	; 0x53a
 800cf3e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	e006      	b.n	800cf5a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf50:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
  }
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3748      	adds	r7, #72	; 0x48
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	004005ff 	.word	0x004005ff

0800cf68 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b092      	sub	sp, #72	; 0x48
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
 800cf74:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cf76:	f7f9 fdc1 	bl	8006afc <HAL_GetTick>
 800cf7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d107      	bne.n	800cf9a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf96:	2301      	movs	r3, #1
 800cf98:	e165      	b.n	800d266 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	f040 8158 	bne.w	800d258 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cfae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	441a      	add	r2, r3
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d907      	bls.n	800cfcc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e14c      	b.n	800d266 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2203      	movs	r2, #3
 800cfd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d002      	beq.n	800cfea <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800cfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe6:	025b      	lsls	r3, r3, #9
 800cfe8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cfea:	f04f 33ff 	mov.w	r3, #4294967295
 800cfee:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	025b      	lsls	r3, r3, #9
 800cff4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cff6:	2390      	movs	r3, #144	; 0x90
 800cff8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cffa:	2300      	movs	r3, #0
 800cffc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cffe:	2300      	movs	r3, #0
 800d000:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d002:	2301      	movs	r3, #1
 800d004:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f107 0218 	add.w	r2, r7, #24
 800d00e:	4611      	mov	r1, r2
 800d010:	4618      	mov	r0, r3
 800d012:	f001 ff69 	bl	800eee8 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d90a      	bls.n	800d032 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2220      	movs	r2, #32
 800d020:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d028:	4618      	mov	r0, r3
 800d02a:	f002 f811 	bl	800f050 <SDMMC_CmdWriteMultiBlock>
 800d02e:	6478      	str	r0, [r7, #68]	; 0x44
 800d030:	e009      	b.n	800d046 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2210      	movs	r2, #16
 800d036:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d03e:	4618      	mov	r0, r3
 800d040:	f001 ffe4 	bl	800f00c <SDMMC_CmdWriteSingleBlock>
 800d044:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d012      	beq.n	800d072 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a87      	ldr	r2, [pc, #540]	; (800d270 <HAL_SD_WriteBlocks+0x308>)
 800d052:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d05a:	431a      	orrs	r2, r3
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2200      	movs	r2, #0
 800d06c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e0f9      	b.n	800d266 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d076:	e065      	b.n	800d144 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d07e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d082:	2b00      	cmp	r3, #0
 800d084:	d040      	beq.n	800d108 <HAL_SD_WriteBlocks+0x1a0>
 800d086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d03d      	beq.n	800d108 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d08c:	2300      	movs	r3, #0
 800d08e:	643b      	str	r3, [r7, #64]	; 0x40
 800d090:	e037      	b.n	800d102 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d09a:	3301      	adds	r3, #1
 800d09c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	021a      	lsls	r2, r3, #8
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	041a      	lsls	r2, r3, #16
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	061a      	lsls	r2, r3, #24
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0e8:	3b01      	subs	r3, #1
 800d0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f107 0214 	add.w	r2, r7, #20
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f001 fe7e 	bl	800edf8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0fe:	3301      	adds	r3, #1
 800d100:	643b      	str	r3, [r7, #64]	; 0x40
 800d102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d104:	2b07      	cmp	r3, #7
 800d106:	d9c4      	bls.n	800d092 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d108:	f7f9 fcf8 	bl	8006afc <HAL_GetTick>
 800d10c:	4602      	mov	r2, r0
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d114:	429a      	cmp	r2, r3
 800d116:	d902      	bls.n	800d11e <HAL_SD_WriteBlocks+0x1b6>
 800d118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d112      	bne.n	800d144 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a53      	ldr	r2, [pc, #332]	; (800d270 <HAL_SD_WriteBlocks+0x308>)
 800d124:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d12a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d12c:	431a      	orrs	r2, r3
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2201      	movs	r2, #1
 800d136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d140:	2303      	movs	r3, #3
 800d142:	e090      	b.n	800d266 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d14a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d092      	beq.n	800d078 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d022      	beq.n	800d1a6 <HAL_SD_WriteBlocks+0x23e>
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d91f      	bls.n	800d1a6 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d01b      	beq.n	800d1a6 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4618      	mov	r0, r3
 800d174:	f001 ff8e 	bl	800f094 <SDMMC_CmdStopTransfer>
 800d178:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d17a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d012      	beq.n	800d1a6 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4a3a      	ldr	r2, [pc, #232]	; (800d270 <HAL_SD_WriteBlocks+0x308>)
 800d186:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d18c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d18e:	431a      	orrs	r2, r3
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e05f      	b.n	800d266 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ac:	f003 0308 	and.w	r3, r3, #8
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d012      	beq.n	800d1da <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a2d      	ldr	r2, [pc, #180]	; (800d270 <HAL_SD_WriteBlocks+0x308>)
 800d1ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c0:	f043 0208 	orr.w	r2, r3, #8
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e045      	b.n	800d266 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e0:	f003 0302 	and.w	r3, r3, #2
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d012      	beq.n	800d20e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a20      	ldr	r2, [pc, #128]	; (800d270 <HAL_SD_WriteBlocks+0x308>)
 800d1ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f4:	f043 0202 	orr.w	r2, r3, #2
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2201      	movs	r2, #1
 800d200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2200      	movs	r2, #0
 800d208:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	e02b      	b.n	800d266 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d214:	f003 0310 	and.w	r3, r3, #16
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d012      	beq.n	800d242 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a13      	ldr	r2, [pc, #76]	; (800d270 <HAL_SD_WriteBlocks+0x308>)
 800d222:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d228:	f043 0210 	orr.w	r2, r3, #16
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	e011      	b.n	800d266 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f240 523a 	movw	r2, #1338	; 0x53a
 800d24a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d254:	2300      	movs	r3, #0
 800d256:	e006      	b.n	800d266 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d25c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d264:	2301      	movs	r3, #1
  }
}
 800d266:	4618      	mov	r0, r3
 800d268:	3748      	adds	r7, #72	; 0x48
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	004005ff 	.word	0x004005ff

0800d274 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b08c      	sub	sp, #48	; 0x30
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
 800d280:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d107      	bne.n	800d29c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d290:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d298:	2301      	movs	r3, #1
 800d29a:	e0be      	b.n	800d41a <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	f040 80b7 	bne.w	800d418 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d2b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	441a      	add	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d907      	bls.n	800d2ce <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e0a5      	b.n	800d41a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2203      	movs	r2, #3
 800d2d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d2ec:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f2:	4a4c      	ldr	r2, [pc, #304]	; (800d424 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800d2f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fa:	4a4b      	ldr	r2, [pc, #300]	; (800d428 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800d2fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d302:	2200      	movs	r2, #0
 800d304:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30a:	2200      	movs	r2, #0
 800d30c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31e:	689a      	ldr	r2, [r3, #8]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	430a      	orrs	r2, r1
 800d328:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	3380      	adds	r3, #128	; 0x80
 800d334:	4619      	mov	r1, r3
 800d336:	68ba      	ldr	r2, [r7, #8]
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	025b      	lsls	r3, r3, #9
 800d33c:	089b      	lsrs	r3, r3, #2
 800d33e:	f7fb f887 	bl	8008450 <HAL_DMA_Start_IT>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d017      	beq.n	800d378 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d356:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a33      	ldr	r2, [pc, #204]	; (800d42c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d35e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d364:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d374:	2301      	movs	r3, #1
 800d376:	e050      	b.n	800d41a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d378:	4b2d      	ldr	r3, [pc, #180]	; (800d430 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d37a:	2201      	movs	r2, #1
 800d37c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d382:	2b01      	cmp	r3, #1
 800d384:	d002      	beq.n	800d38c <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800d386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d388:	025b      	lsls	r3, r3, #9
 800d38a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d38c:	f04f 33ff 	mov.w	r3, #4294967295
 800d390:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	025b      	lsls	r3, r3, #9
 800d396:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d398:	2390      	movs	r3, #144	; 0x90
 800d39a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d39c:	2302      	movs	r3, #2
 800d39e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f107 0210 	add.w	r2, r7, #16
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f001 fd98 	bl	800eee8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d90a      	bls.n	800d3d4 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2282      	movs	r2, #130	; 0x82
 800d3c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f001 fdfc 	bl	800efc8 <SDMMC_CmdReadMultiBlock>
 800d3d0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3d2:	e009      	b.n	800d3e8 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2281      	movs	r2, #129	; 0x81
 800d3d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f001 fdcf 	bl	800ef84 <SDMMC_CmdReadSingleBlock>
 800d3e6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d012      	beq.n	800d414 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4a0e      	ldr	r2, [pc, #56]	; (800d42c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d3f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fc:	431a      	orrs	r2, r3
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2201      	movs	r2, #1
 800d406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2200      	movs	r2, #0
 800d40e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d410:	2301      	movs	r3, #1
 800d412:	e002      	b.n	800d41a <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800d414:	2300      	movs	r3, #0
 800d416:	e000      	b.n	800d41a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d418:	2302      	movs	r3, #2
  }
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3730      	adds	r7, #48	; 0x30
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	0800de37 	.word	0x0800de37
 800d428:	0800dea9 	.word	0x0800dea9
 800d42c:	004005ff 	.word	0x004005ff
 800d430:	4225858c 	.word	0x4225858c

0800d434 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08c      	sub	sp, #48	; 0x30
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	607a      	str	r2, [r7, #4]
 800d440:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d107      	bne.n	800d45c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d450:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	e0c1      	b.n	800d5e0 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d462:	b2db      	uxtb	r3, r3
 800d464:	2b01      	cmp	r3, #1
 800d466:	f040 80ba 	bne.w	800d5de <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2200      	movs	r2, #0
 800d46e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	441a      	add	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d907      	bls.n	800d48e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d482:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d48a:	2301      	movs	r3, #1
 800d48c:	e0a8      	b.n	800d5e0 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2203      	movs	r2, #3
 800d492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2200      	movs	r2, #0
 800d49c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f042 021a 	orr.w	r2, r2, #26
 800d4ac:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4b2:	4a4d      	ldr	r2, [pc, #308]	; (800d5e8 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800d4b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ba:	4a4c      	ldr	r2, [pc, #304]	; (800d5ec <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800d4bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d002      	beq.n	800d4d4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d0:	025b      	lsls	r3, r3, #9
 800d4d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d90a      	bls.n	800d4f0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	22a0      	movs	r2, #160	; 0xa0
 800d4de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f001 fdb2 	bl	800f050 <SDMMC_CmdWriteMultiBlock>
 800d4ec:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d4ee:	e009      	b.n	800d504 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2290      	movs	r2, #144	; 0x90
 800d4f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f001 fd85 	bl	800f00c <SDMMC_CmdWriteSingleBlock>
 800d502:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d506:	2b00      	cmp	r3, #0
 800d508:	d012      	beq.n	800d530 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a38      	ldr	r2, [pc, #224]	; (800d5f0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800d510:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d518:	431a      	orrs	r2, r3
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2201      	movs	r2, #1
 800d522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2200      	movs	r2, #0
 800d52a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d52c:	2301      	movs	r3, #1
 800d52e:	e057      	b.n	800d5e0 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d530:	4b30      	ldr	r3, [pc, #192]	; (800d5f4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d532:	2201      	movs	r2, #1
 800d534:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53a:	2240      	movs	r2, #64	; 0x40
 800d53c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d54e:	689a      	ldr	r2, [r3, #8]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	430a      	orrs	r2, r1
 800d558:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d55e:	68b9      	ldr	r1, [r7, #8]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	3380      	adds	r3, #128	; 0x80
 800d566:	461a      	mov	r2, r3
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	025b      	lsls	r3, r3, #9
 800d56c:	089b      	lsrs	r3, r3, #2
 800d56e:	f7fa ff6f 	bl	8008450 <HAL_DMA_Start_IT>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d01a      	beq.n	800d5ae <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f022 021a 	bic.w	r2, r2, #26
 800d586:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a18      	ldr	r2, [pc, #96]	; (800d5f0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800d58e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d594:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e018      	b.n	800d5e0 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d5b2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	025b      	lsls	r3, r3, #9
 800d5b8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d5ba:	2390      	movs	r3, #144	; 0x90
 800d5bc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f107 0210 	add.w	r2, r7, #16
 800d5d2:	4611      	mov	r1, r2
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f001 fc87 	bl	800eee8 <SDIO_ConfigData>

      return HAL_OK;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	e000      	b.n	800d5e0 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800d5de:	2302      	movs	r3, #2
  }
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3730      	adds	r7, #48	; 0x30
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	0800de0d 	.word	0x0800de0d
 800d5ec:	0800dea9 	.word	0x0800dea9
 800d5f0:	004005ff 	.word	0x004005ff
 800d5f4:	4225858c 	.word	0x4225858c

0800d5f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d604:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d60c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d610:	2b00      	cmp	r3, #0
 800d612:	d008      	beq.n	800d626 <HAL_SD_IRQHandler+0x2e>
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f003 0308 	and.w	r3, r3, #8
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d003      	beq.n	800d626 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 ffed 	bl	800e5fe <SD_Read_IT>
 800d624:	e155      	b.n	800d8d2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d62c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d630:	2b00      	cmp	r3, #0
 800d632:	f000 808f 	beq.w	800d754 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d63e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	6812      	ldr	r2, [r2, #0]
 800d64a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d64e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d652:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f022 0201 	bic.w	r2, r2, #1
 800d662:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f003 0308 	and.w	r3, r3, #8
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d039      	beq.n	800d6e2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f003 0302 	and.w	r3, r3, #2
 800d674:	2b00      	cmp	r3, #0
 800d676:	d104      	bne.n	800d682 <HAL_SD_IRQHandler+0x8a>
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f003 0320 	and.w	r3, r3, #32
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d011      	beq.n	800d6a6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4618      	mov	r0, r3
 800d688:	f001 fd04 	bl	800f094 <SDMMC_CmdStopTransfer>
 800d68c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d008      	beq.n	800d6a6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	431a      	orrs	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 f91f 	bl	800d8e4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f240 523a 	movw	r2, #1338	; 0x53a
 800d6ae:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f003 0301 	and.w	r3, r3, #1
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d104      	bne.n	800d6d2 <HAL_SD_IRQHandler+0xda>
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f003 0302 	and.w	r3, r3, #2
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d003      	beq.n	800d6da <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f003 fce6 	bl	80110a4 <HAL_SD_RxCpltCallback>
 800d6d8:	e0fb      	b.n	800d8d2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f003 fcd8 	bl	8011090 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d6e0:	e0f7      	b.n	800d8d2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 80f2 	beq.w	800d8d2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f003 0320 	and.w	r3, r3, #32
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d011      	beq.n	800d71c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f001 fcc9 	bl	800f094 <SDMMC_CmdStopTransfer>
 800d702:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d008      	beq.n	800d71c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	431a      	orrs	r2, r3
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 f8e4 	bl	800d8e4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	2b00      	cmp	r3, #0
 800d724:	f040 80d5 	bne.w	800d8d2 <HAL_SD_IRQHandler+0x2da>
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f003 0302 	and.w	r3, r3, #2
 800d72e:	2b00      	cmp	r3, #0
 800d730:	f040 80cf 	bne.w	800d8d2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f022 0208 	bic.w	r2, r2, #8
 800d742:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2201      	movs	r2, #1
 800d748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f003 fc9f 	bl	8011090 <HAL_SD_TxCpltCallback>
}
 800d752:	e0be      	b.n	800d8d2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d008      	beq.n	800d774 <HAL_SD_IRQHandler+0x17c>
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f003 0308 	and.w	r3, r3, #8
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d003      	beq.n	800d774 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 ff97 	bl	800e6a0 <SD_Write_IT>
 800d772:	e0ae      	b.n	800d8d2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f000 80a7 	beq.w	800d8d2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78a:	f003 0302 	and.w	r3, r3, #2
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d005      	beq.n	800d79e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d796:	f043 0202 	orr.w	r2, r3, #2
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a4:	f003 0308 	and.w	r3, r3, #8
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d005      	beq.n	800d7b8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b0:	f043 0208 	orr.w	r2, r3, #8
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7be:	f003 0320 	and.w	r3, r3, #32
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d005      	beq.n	800d7d2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ca:	f043 0220 	orr.w	r2, r3, #32
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d8:	f003 0310 	and.w	r3, r3, #16
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d005      	beq.n	800d7ec <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e4:	f043 0210 	orr.w	r2, r3, #16
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f240 523a 	movw	r2, #1338	; 0x53a
 800d7f4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d804:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4618      	mov	r0, r3
 800d80c:	f001 fc42 	bl	800f094 <SDMMC_CmdStopTransfer>
 800d810:	4602      	mov	r2, r0
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d816:	431a      	orrs	r2, r3
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f003 0308 	and.w	r3, r3, #8
 800d822:	2b00      	cmp	r3, #0
 800d824:	d00a      	beq.n	800d83c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f855 	bl	800d8e4 <HAL_SD_ErrorCallback>
}
 800d83a:	e04a      	b.n	800d8d2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d842:	2b00      	cmp	r3, #0
 800d844:	d045      	beq.n	800d8d2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f003 0310 	and.w	r3, r3, #16
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d104      	bne.n	800d85a <HAL_SD_IRQHandler+0x262>
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f003 0320 	and.w	r3, r3, #32
 800d856:	2b00      	cmp	r3, #0
 800d858:	d011      	beq.n	800d87e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d85e:	4a1f      	ldr	r2, [pc, #124]	; (800d8dc <HAL_SD_IRQHandler+0x2e4>)
 800d860:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d866:	4618      	mov	r0, r3
 800d868:	f7fa fe4a 	bl	8008500 <HAL_DMA_Abort_IT>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d02f      	beq.n	800d8d2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d876:	4618      	mov	r0, r3
 800d878:	f000 fb68 	bl	800df4c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d87c:	e029      	b.n	800d8d2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f003 0301 	and.w	r3, r3, #1
 800d884:	2b00      	cmp	r3, #0
 800d886:	d104      	bne.n	800d892 <HAL_SD_IRQHandler+0x29a>
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f003 0302 	and.w	r3, r3, #2
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d011      	beq.n	800d8b6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d896:	4a12      	ldr	r2, [pc, #72]	; (800d8e0 <HAL_SD_IRQHandler+0x2e8>)
 800d898:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fa fe2e 	bl	8008500 <HAL_DMA_Abort_IT>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d013      	beq.n	800d8d2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f000 fb83 	bl	800dfba <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d8b4:	e00d      	b.n	800d8d2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f003 fbd6 	bl	801107c <HAL_SD_AbortCallback>
}
 800d8d0:	e7ff      	b.n	800d8d2 <HAL_SD_IRQHandler+0x2da>
 800d8d2:	bf00      	nop
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	0800df4d 	.word	0x0800df4d
 800d8e0:	0800dfbb 	.word	0x0800dfbb

0800d8e4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d8ec:	bf00      	nop
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d906:	0f9b      	lsrs	r3, r3, #30
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d912:	0e9b      	lsrs	r3, r3, #26
 800d914:	b2db      	uxtb	r3, r3
 800d916:	f003 030f 	and.w	r3, r3, #15
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d924:	0e1b      	lsrs	r3, r3, #24
 800d926:	b2db      	uxtb	r3, r3
 800d928:	f003 0303 	and.w	r3, r3, #3
 800d92c:	b2da      	uxtb	r2, r3
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d936:	0c1b      	lsrs	r3, r3, #16
 800d938:	b2da      	uxtb	r2, r3
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d942:	0a1b      	lsrs	r3, r3, #8
 800d944:	b2da      	uxtb	r2, r3
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d958:	0d1b      	lsrs	r3, r3, #20
 800d95a:	b29a      	uxth	r2, r3
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d964:	0c1b      	lsrs	r3, r3, #16
 800d966:	b2db      	uxtb	r3, r3
 800d968:	f003 030f 	and.w	r3, r3, #15
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d976:	0bdb      	lsrs	r3, r3, #15
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	f003 0301 	and.w	r3, r3, #1
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d988:	0b9b      	lsrs	r3, r3, #14
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	f003 0301 	and.w	r3, r3, #1
 800d990:	b2da      	uxtb	r2, r3
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d99a:	0b5b      	lsrs	r3, r3, #13
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	f003 0301 	and.w	r3, r3, #1
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9ac:	0b1b      	lsrs	r3, r3, #12
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f003 0301 	and.w	r3, r3, #1
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d163      	bne.n	800da90 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9cc:	009a      	lsls	r2, r3, #2
 800d9ce:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d9d2:	4013      	ands	r3, r2
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d9d8:	0f92      	lsrs	r2, r2, #30
 800d9da:	431a      	orrs	r2, r3
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9e4:	0edb      	lsrs	r3, r3, #27
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	f003 0307 	and.w	r3, r3, #7
 800d9ec:	b2da      	uxtb	r2, r3
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9f6:	0e1b      	lsrs	r3, r3, #24
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	f003 0307 	and.w	r3, r3, #7
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da08:	0d5b      	lsrs	r3, r3, #21
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	f003 0307 	and.w	r3, r3, #7
 800da10:	b2da      	uxtb	r2, r3
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da1a:	0c9b      	lsrs	r3, r3, #18
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	f003 0307 	and.w	r3, r3, #7
 800da22:	b2da      	uxtb	r2, r3
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da2c:	0bdb      	lsrs	r3, r3, #15
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	f003 0307 	and.w	r3, r3, #7
 800da34:	b2da      	uxtb	r2, r3
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	691b      	ldr	r3, [r3, #16]
 800da3e:	1c5a      	adds	r2, r3, #1
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	7e1b      	ldrb	r3, [r3, #24]
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	f003 0307 	and.w	r3, r3, #7
 800da4e:	3302      	adds	r3, #2
 800da50:	2201      	movs	r2, #1
 800da52:	fa02 f303 	lsl.w	r3, r2, r3
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800da5a:	fb02 f203 	mul.w	r2, r2, r3
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	7a1b      	ldrb	r3, [r3, #8]
 800da66:	b2db      	uxtb	r3, r3
 800da68:	f003 030f 	and.w	r3, r3, #15
 800da6c:	2201      	movs	r2, #1
 800da6e:	409a      	lsls	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800da7c:	0a52      	lsrs	r2, r2, #9
 800da7e:	fb02 f203 	mul.w	r2, r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da8c:	661a      	str	r2, [r3, #96]	; 0x60
 800da8e:	e031      	b.n	800daf4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da94:	2b01      	cmp	r3, #1
 800da96:	d11d      	bne.n	800dad4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da9c:	041b      	lsls	r3, r3, #16
 800da9e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daa6:	0c1b      	lsrs	r3, r3, #16
 800daa8:	431a      	orrs	r2, r3
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	3301      	adds	r3, #1
 800dab4:	029a      	lsls	r2, r3, #10
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dac8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	661a      	str	r2, [r3, #96]	; 0x60
 800dad2:	e00f      	b.n	800daf4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a58      	ldr	r2, [pc, #352]	; (800dc3c <HAL_SD_GetCardCSD+0x344>)
 800dada:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2201      	movs	r2, #1
 800daec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800daf0:	2301      	movs	r3, #1
 800daf2:	e09d      	b.n	800dc30 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daf8:	0b9b      	lsrs	r3, r3, #14
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	f003 0301 	and.w	r3, r3, #1
 800db00:	b2da      	uxtb	r2, r3
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db0a:	09db      	lsrs	r3, r3, #7
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db12:	b2da      	uxtb	r2, r3
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db22:	b2da      	uxtb	r2, r3
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db2c:	0fdb      	lsrs	r3, r3, #31
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db38:	0f5b      	lsrs	r3, r3, #29
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	f003 0303 	and.w	r3, r3, #3
 800db40:	b2da      	uxtb	r2, r3
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db4a:	0e9b      	lsrs	r3, r3, #26
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	f003 0307 	and.w	r3, r3, #7
 800db52:	b2da      	uxtb	r2, r3
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db5c:	0d9b      	lsrs	r3, r3, #22
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	f003 030f 	and.w	r3, r3, #15
 800db64:	b2da      	uxtb	r2, r3
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db6e:	0d5b      	lsrs	r3, r3, #21
 800db70:	b2db      	uxtb	r3, r3
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	b2da      	uxtb	r2, r3
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	2200      	movs	r2, #0
 800db82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db8a:	0c1b      	lsrs	r3, r3, #16
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	f003 0301 	and.w	r3, r3, #1
 800db92:	b2da      	uxtb	r2, r3
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db9e:	0bdb      	lsrs	r3, r3, #15
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	f003 0301 	and.w	r3, r3, #1
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb2:	0b9b      	lsrs	r3, r3, #14
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	b2da      	uxtb	r2, r3
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc6:	0b5b      	lsrs	r3, r3, #13
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	f003 0301 	and.w	r3, r3, #1
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbda:	0b1b      	lsrs	r3, r3, #12
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	f003 0301 	and.w	r3, r3, #1
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbee:	0a9b      	lsrs	r3, r3, #10
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	f003 0303 	and.w	r3, r3, #3
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc02:	0a1b      	lsrs	r3, r3, #8
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	f003 0303 	and.w	r3, r3, #3
 800dc0a:	b2da      	uxtb	r2, r3
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc16:	085b      	lsrs	r3, r3, #1
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc1e:	b2da      	uxtb	r2, r3
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc2e:	2300      	movs	r3, #0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	004005ff 	.word	0x004005ff

0800dc40 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	370c      	adds	r7, #12
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dc98:	b5b0      	push	{r4, r5, r7, lr}
 800dc9a:	b08e      	sub	sp, #56	; 0x38
 800dc9c:	af04      	add	r7, sp, #16
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dca2:	2300      	movs	r3, #0
 800dca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2203      	movs	r2, #3
 800dcac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcb4:	2b03      	cmp	r3, #3
 800dcb6:	d02e      	beq.n	800dd16 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcbe:	d106      	bne.n	800dcce <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	639a      	str	r2, [r3, #56]	; 0x38
 800dccc:	e029      	b.n	800dd22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcd4:	d10a      	bne.n	800dcec <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 fb28 	bl	800e32c <SD_WideBus_Enable>
 800dcdc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dce2:	6a3b      	ldr	r3, [r7, #32]
 800dce4:	431a      	orrs	r2, r3
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	639a      	str	r2, [r3, #56]	; 0x38
 800dcea:	e01a      	b.n	800dd22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10a      	bne.n	800dd08 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 fb65 	bl	800e3c2 <SD_WideBus_Disable>
 800dcf8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcfe:	6a3b      	ldr	r3, [r7, #32]
 800dd00:	431a      	orrs	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	639a      	str	r2, [r3, #56]	; 0x38
 800dd06:	e00c      	b.n	800dd22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	639a      	str	r2, [r3, #56]	; 0x38
 800dd14:	e005      	b.n	800dd22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd1a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d00b      	beq.n	800dd42 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a26      	ldr	r2, [pc, #152]	; (800ddc8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800dd30:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2201      	movs	r2, #1
 800dd36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd40:	e01f      	b.n	800dd82 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	689b      	ldr	r3, [r3, #8]
 800dd4c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	695b      	ldr	r3, [r3, #20]
 800dd5c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	699b      	ldr	r3, [r3, #24]
 800dd62:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681d      	ldr	r5, [r3, #0]
 800dd68:	466c      	mov	r4, sp
 800dd6a:	f107 0314 	add.w	r3, r7, #20
 800dd6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd76:	f107 0308 	add.w	r3, r7, #8
 800dd7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	f001 f803 	bl	800ed88 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f001 f8d8 	bl	800ef40 <SDMMC_CmdBlockLength>
 800dd90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd92:	6a3b      	ldr	r3, [r7, #32]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00c      	beq.n	800ddb2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a0a      	ldr	r2, [pc, #40]	; (800ddc8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800dd9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dda4:	6a3b      	ldr	r3, [r7, #32]
 800dda6:	431a      	orrs	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ddac:	2301      	movs	r3, #1
 800ddae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ddba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3728      	adds	r7, #40	; 0x28
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bdb0      	pop	{r4, r5, r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	004005ff 	.word	0x004005ff

0800ddcc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b086      	sub	sp, #24
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ddd8:	f107 030c 	add.w	r3, r7, #12
 800dddc:	4619      	mov	r1, r3
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 fa7c 	bl	800e2dc <SD_SendStatus>
 800dde4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d005      	beq.n	800ddf8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	431a      	orrs	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	0a5b      	lsrs	r3, r3, #9
 800ddfc:	f003 030f 	and.w	r3, r3, #15
 800de00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800de02:	693b      	ldr	r3, [r7, #16]
}
 800de04:	4618      	mov	r0, r3
 800de06:	3718      	adds	r7, #24
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de18:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de28:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800de2a:	bf00      	nop
 800de2c:	3714      	adds	r7, #20
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr

0800de36 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b084      	sub	sp, #16
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de42:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de48:	2b82      	cmp	r3, #130	; 0x82
 800de4a:	d111      	bne.n	800de70 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4618      	mov	r0, r3
 800de52:	f001 f91f 	bl	800f094 <SDMMC_CmdStopTransfer>
 800de56:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d008      	beq.n	800de70 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	431a      	orrs	r2, r3
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f7ff fd3a 	bl	800d8e4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f022 0208 	bic.w	r2, r2, #8
 800de7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f240 523a 	movw	r2, #1338	; 0x53a
 800de88:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2201      	movs	r2, #1
 800de8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2200      	movs	r2, #0
 800de96:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f003 f903 	bl	80110a4 <HAL_SD_RxCpltCallback>
#endif
}
 800de9e:	bf00      	nop
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
	...

0800dea8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b086      	sub	sp, #24
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f7fa fcce 	bl	8008858 <HAL_DMA_GetError>
 800debc:	4603      	mov	r3, r0
 800debe:	2b02      	cmp	r3, #2
 800dec0:	d03e      	beq.n	800df40 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dec8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ded0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	d002      	beq.n	800dede <SD_DMAError+0x36>
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d12d      	bne.n	800df3a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4a19      	ldr	r2, [pc, #100]	; (800df48 <SD_DMAError+0xa0>)
 800dee4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800def4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800df02:	6978      	ldr	r0, [r7, #20]
 800df04:	f7ff ff62 	bl	800ddcc <HAL_SD_GetCardState>
 800df08:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	2b06      	cmp	r3, #6
 800df0e:	d002      	beq.n	800df16 <SD_DMAError+0x6e>
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	2b05      	cmp	r3, #5
 800df14:	d10a      	bne.n	800df2c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f001 f8ba 	bl	800f094 <SDMMC_CmdStopTransfer>
 800df20:	4602      	mov	r2, r0
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df26:	431a      	orrs	r2, r3
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	2201      	movs	r2, #1
 800df30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	2200      	movs	r2, #0
 800df38:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800df3a:	6978      	ldr	r0, [r7, #20]
 800df3c:	f7ff fcd2 	bl	800d8e4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800df40:	bf00      	nop
 800df42:	3718      	adds	r7, #24
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	004005ff 	.word	0x004005ff

0800df4c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df58:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f240 523a 	movw	r2, #1338	; 0x53a
 800df62:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f7ff ff31 	bl	800ddcc <HAL_SD_GetCardState>
 800df6a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2201      	movs	r2, #1
 800df70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2200      	movs	r2, #0
 800df78:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	2b06      	cmp	r3, #6
 800df7e:	d002      	beq.n	800df86 <SD_DMATxAbort+0x3a>
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	2b05      	cmp	r3, #5
 800df84:	d10a      	bne.n	800df9c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f001 f882 	bl	800f094 <SDMMC_CmdStopTransfer>
 800df90:	4602      	mov	r2, r0
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df96:	431a      	orrs	r2, r3
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d103      	bne.n	800dfac <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f003 f869 	bl	801107c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dfaa:	e002      	b.n	800dfb2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f7ff fc99 	bl	800d8e4 <HAL_SD_ErrorCallback>
}
 800dfb2:	bf00      	nop
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b084      	sub	sp, #16
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f240 523a 	movw	r2, #1338	; 0x53a
 800dfd0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dfd2:	68f8      	ldr	r0, [r7, #12]
 800dfd4:	f7ff fefa 	bl	800ddcc <HAL_SD_GetCardState>
 800dfd8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2201      	movs	r2, #1
 800dfde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	2b06      	cmp	r3, #6
 800dfec:	d002      	beq.n	800dff4 <SD_DMARxAbort+0x3a>
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	2b05      	cmp	r3, #5
 800dff2:	d10a      	bne.n	800e00a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f001 f84b 	bl	800f094 <SDMMC_CmdStopTransfer>
 800dffe:	4602      	mov	r2, r0
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e004:	431a      	orrs	r2, r3
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d103      	bne.n	800e01a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f003 f832 	bl	801107c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e018:	e002      	b.n	800e020 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f7ff fc62 	bl	800d8e4 <HAL_SD_ErrorCallback>
}
 800e020:	bf00      	nop
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e028:	b5b0      	push	{r4, r5, r7, lr}
 800e02a:	b094      	sub	sp, #80	; 0x50
 800e02c:	af04      	add	r7, sp, #16
 800e02e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e030:	2301      	movs	r3, #1
 800e032:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 fefd 	bl	800ee38 <SDIO_GetPowerState>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b00      	cmp	r3, #0
 800e042:	d102      	bne.n	800e04a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e044:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e048:	e0b6      	b.n	800e1b8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e04e:	2b03      	cmp	r3, #3
 800e050:	d02f      	beq.n	800e0b2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4618      	mov	r0, r3
 800e058:	f001 f926 	bl	800f2a8 <SDMMC_CmdSendCID>
 800e05c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e060:	2b00      	cmp	r3, #0
 800e062:	d001      	beq.n	800e068 <SD_InitCard+0x40>
    {
      return errorstate;
 800e064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e066:	e0a7      	b.n	800e1b8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2100      	movs	r1, #0
 800e06e:	4618      	mov	r0, r3
 800e070:	f000 ff27 	bl	800eec2 <SDIO_GetResponse>
 800e074:	4602      	mov	r2, r0
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2104      	movs	r1, #4
 800e080:	4618      	mov	r0, r3
 800e082:	f000 ff1e 	bl	800eec2 <SDIO_GetResponse>
 800e086:	4602      	mov	r2, r0
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2108      	movs	r1, #8
 800e092:	4618      	mov	r0, r3
 800e094:	f000 ff15 	bl	800eec2 <SDIO_GetResponse>
 800e098:	4602      	mov	r2, r0
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	210c      	movs	r1, #12
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f000 ff0c 	bl	800eec2 <SDIO_GetResponse>
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0b6:	2b03      	cmp	r3, #3
 800e0b8:	d00d      	beq.n	800e0d6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f107 020e 	add.w	r2, r7, #14
 800e0c2:	4611      	mov	r1, r2
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f001 f92c 	bl	800f322 <SDMMC_CmdSetRelAdd>
 800e0ca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d001      	beq.n	800e0d6 <SD_InitCard+0xae>
    {
      return errorstate;
 800e0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0d4:	e070      	b.n	800e1b8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0da:	2b03      	cmp	r3, #3
 800e0dc:	d036      	beq.n	800e14c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e0de:	89fb      	ldrh	r3, [r7, #14]
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0ee:	041b      	lsls	r3, r3, #16
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	4610      	mov	r0, r2
 800e0f4:	f001 f8f6 	bl	800f2e4 <SDMMC_CmdSendCSD>
 800e0f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d001      	beq.n	800e104 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e102:	e059      	b.n	800e1b8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2100      	movs	r1, #0
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 fed9 	bl	800eec2 <SDIO_GetResponse>
 800e110:	4602      	mov	r2, r0
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2104      	movs	r1, #4
 800e11c:	4618      	mov	r0, r3
 800e11e:	f000 fed0 	bl	800eec2 <SDIO_GetResponse>
 800e122:	4602      	mov	r2, r0
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2108      	movs	r1, #8
 800e12e:	4618      	mov	r0, r3
 800e130:	f000 fec7 	bl	800eec2 <SDIO_GetResponse>
 800e134:	4602      	mov	r2, r0
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	210c      	movs	r1, #12
 800e140:	4618      	mov	r0, r3
 800e142:	f000 febe 	bl	800eec2 <SDIO_GetResponse>
 800e146:	4602      	mov	r2, r0
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2104      	movs	r1, #4
 800e152:	4618      	mov	r0, r3
 800e154:	f000 feb5 	bl	800eec2 <SDIO_GetResponse>
 800e158:	4603      	mov	r3, r0
 800e15a:	0d1a      	lsrs	r2, r3, #20
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e160:	f107 0310 	add.w	r3, r7, #16
 800e164:	4619      	mov	r1, r3
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7ff fbc6 	bl	800d8f8 <HAL_SD_GetCardCSD>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d002      	beq.n	800e178 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e172:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e176:	e01f      	b.n	800e1b8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6819      	ldr	r1, [r3, #0]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e180:	041b      	lsls	r3, r3, #16
 800e182:	461a      	mov	r2, r3
 800e184:	f04f 0300 	mov.w	r3, #0
 800e188:	4608      	mov	r0, r1
 800e18a:	f000 ffa5 	bl	800f0d8 <SDMMC_CmdSelDesel>
 800e18e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e192:	2b00      	cmp	r3, #0
 800e194:	d001      	beq.n	800e19a <SD_InitCard+0x172>
  {
    return errorstate;
 800e196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e198:	e00e      	b.n	800e1b8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681d      	ldr	r5, [r3, #0]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	466c      	mov	r4, sp
 800e1a2:	f103 0210 	add.w	r2, r3, #16
 800e1a6:	ca07      	ldmia	r2, {r0, r1, r2}
 800e1a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	f000 fde9 	bl	800ed88 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e1b6:	2300      	movs	r3, #0
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3740      	adds	r7, #64	; 0x40
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bdb0      	pop	{r4, r5, r7, pc}

0800e1c0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b086      	sub	sp, #24
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	617b      	str	r3, [r7, #20]
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f000 ffa0 	bl	800f11e <SDMMC_CmdGoIdleState>
 800e1de:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d001      	beq.n	800e1ea <SD_PowerON+0x2a>
  {
    return errorstate;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	e072      	b.n	800e2d0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f000 ffb3 	bl	800f15a <SDMMC_CmdOperCond>
 800e1f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d00d      	beq.n	800e218 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2200      	movs	r2, #0
 800e200:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4618      	mov	r0, r3
 800e208:	f000 ff89 	bl	800f11e <SDMMC_CmdGoIdleState>
 800e20c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d004      	beq.n	800e21e <SD_PowerON+0x5e>
    {
      return errorstate;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	e05b      	b.n	800e2d0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e222:	2b01      	cmp	r3, #1
 800e224:	d137      	bne.n	800e296 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2100      	movs	r1, #0
 800e22c:	4618      	mov	r0, r3
 800e22e:	f000 ffb3 	bl	800f198 <SDMMC_CmdAppCommand>
 800e232:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d02d      	beq.n	800e296 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e23a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e23e:	e047      	b.n	800e2d0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2100      	movs	r1, #0
 800e246:	4618      	mov	r0, r3
 800e248:	f000 ffa6 	bl	800f198 <SDMMC_CmdAppCommand>
 800e24c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d001      	beq.n	800e258 <SD_PowerON+0x98>
    {
      return errorstate;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	e03b      	b.n	800e2d0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	491e      	ldr	r1, [pc, #120]	; (800e2d8 <SD_PowerON+0x118>)
 800e25e:	4618      	mov	r0, r3
 800e260:	f000 ffbc 	bl	800f1dc <SDMMC_CmdAppOperCommand>
 800e264:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e26c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e270:	e02e      	b.n	800e2d0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2100      	movs	r1, #0
 800e278:	4618      	mov	r0, r3
 800e27a:	f000 fe22 	bl	800eec2 <SDIO_GetResponse>
 800e27e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	0fdb      	lsrs	r3, r3, #31
 800e284:	2b01      	cmp	r3, #1
 800e286:	d101      	bne.n	800e28c <SD_PowerON+0xcc>
 800e288:	2301      	movs	r3, #1
 800e28a:	e000      	b.n	800e28e <SD_PowerON+0xce>
 800e28c:	2300      	movs	r3, #0
 800e28e:	613b      	str	r3, [r7, #16]

    count++;
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	3301      	adds	r3, #1
 800e294:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d802      	bhi.n	800e2a6 <SD_PowerON+0xe6>
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d0cc      	beq.n	800e240 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d902      	bls.n	800e2b6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e2b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e2b4:	e00c      	b.n	800e2d0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d003      	beq.n	800e2c8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	645a      	str	r2, [r3, #68]	; 0x44
 800e2c6:	e002      	b.n	800e2ce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3718      	adds	r7, #24
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	c1100000 	.word	0xc1100000

0800e2dc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d102      	bne.n	800e2f2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e2ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e2f0:	e018      	b.n	800e324 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2fa:	041b      	lsls	r3, r3, #16
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	4610      	mov	r0, r2
 800e300:	f001 f830 	bl	800f364 <SDMMC_CmdSendStatus>
 800e304:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d001      	beq.n	800e310 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	e009      	b.n	800e324 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2100      	movs	r1, #0
 800e316:	4618      	mov	r0, r3
 800e318:	f000 fdd3 	bl	800eec2 <SDIO_GetResponse>
 800e31c:	4602      	mov	r2, r0
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3710      	adds	r7, #16
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e334:	2300      	movs	r3, #0
 800e336:	60fb      	str	r3, [r7, #12]
 800e338:	2300      	movs	r3, #0
 800e33a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2100      	movs	r1, #0
 800e342:	4618      	mov	r0, r3
 800e344:	f000 fdbd 	bl	800eec2 <SDIO_GetResponse>
 800e348:	4603      	mov	r3, r0
 800e34a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e34e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e352:	d102      	bne.n	800e35a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e354:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e358:	e02f      	b.n	800e3ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e35a:	f107 030c 	add.w	r3, r7, #12
 800e35e:	4619      	mov	r1, r3
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 f879 	bl	800e458 <SD_FindSCR>
 800e366:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d001      	beq.n	800e372 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	e023      	b.n	800e3ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d01c      	beq.n	800e3b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e384:	041b      	lsls	r3, r3, #16
 800e386:	4619      	mov	r1, r3
 800e388:	4610      	mov	r0, r2
 800e38a:	f000 ff05 	bl	800f198 <SDMMC_CmdAppCommand>
 800e38e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d001      	beq.n	800e39a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	e00f      	b.n	800e3ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2102      	movs	r1, #2
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f000 ff3e 	bl	800f222 <SDMMC_CmdBusWidth>
 800e3a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	e003      	b.n	800e3ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	e001      	b.n	800e3ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e3b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3718      	adds	r7, #24
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}

0800e3c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e3c2:	b580      	push	{r7, lr}
 800e3c4:	b086      	sub	sp, #24
 800e3c6:	af00      	add	r7, sp, #0
 800e3c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	60fb      	str	r3, [r7, #12]
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f000 fd72 	bl	800eec2 <SDIO_GetResponse>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3e8:	d102      	bne.n	800e3f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3ee:	e02f      	b.n	800e450 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e3f0:	f107 030c 	add.w	r3, r7, #12
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 f82e 	bl	800e458 <SD_FindSCR>
 800e3fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	e023      	b.n	800e450 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d01c      	beq.n	800e44c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e41a:	041b      	lsls	r3, r3, #16
 800e41c:	4619      	mov	r1, r3
 800e41e:	4610      	mov	r0, r2
 800e420:	f000 feba 	bl	800f198 <SDMMC_CmdAppCommand>
 800e424:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d001      	beq.n	800e430 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	e00f      	b.n	800e450 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2100      	movs	r1, #0
 800e436:	4618      	mov	r0, r3
 800e438:	f000 fef3 	bl	800f222 <SDMMC_CmdBusWidth>
 800e43c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d001      	beq.n	800e448 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	e003      	b.n	800e450 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e448:	2300      	movs	r3, #0
 800e44a:	e001      	b.n	800e450 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e44c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e450:	4618      	mov	r0, r3
 800e452:	3718      	adds	r7, #24
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e458:	b590      	push	{r4, r7, lr}
 800e45a:	b08f      	sub	sp, #60	; 0x3c
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e462:	f7f8 fb4b 	bl	8006afc <HAL_GetTick>
 800e466:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e468:	2300      	movs	r3, #0
 800e46a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e46c:	2300      	movs	r3, #0
 800e46e:	60bb      	str	r3, [r7, #8]
 800e470:	2300      	movs	r3, #0
 800e472:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2108      	movs	r1, #8
 800e47e:	4618      	mov	r0, r3
 800e480:	f000 fd5e 	bl	800ef40 <SDMMC_CmdBlockLength>
 800e484:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d001      	beq.n	800e490 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48e:	e0b2      	b.n	800e5f6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e498:	041b      	lsls	r3, r3, #16
 800e49a:	4619      	mov	r1, r3
 800e49c:	4610      	mov	r0, r2
 800e49e:	f000 fe7b 	bl	800f198 <SDMMC_CmdAppCommand>
 800e4a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <SD_FindSCR+0x56>
  {
    return errorstate;
 800e4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ac:	e0a3      	b.n	800e5f6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e4b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e4b4:	2308      	movs	r3, #8
 800e4b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e4b8:	2330      	movs	r3, #48	; 0x30
 800e4ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e4bc:	2302      	movs	r3, #2
 800e4be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f107 0210 	add.w	r2, r7, #16
 800e4d0:	4611      	mov	r1, r2
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f000 fd08 	bl	800eee8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 fec2 	bl	800f266 <SDMMC_CmdSendSCR>
 800e4e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d02a      	beq.n	800e540 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ec:	e083      	b.n	800e5f6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d00f      	beq.n	800e51c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6819      	ldr	r1, [r3, #0]
 800e500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	f107 0208 	add.w	r2, r7, #8
 800e508:	18d4      	adds	r4, r2, r3
 800e50a:	4608      	mov	r0, r1
 800e50c:	f000 fc67 	bl	800edde <SDIO_ReadFIFO>
 800e510:	4603      	mov	r3, r0
 800e512:	6023      	str	r3, [r4, #0]
      index++;
 800e514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e516:	3301      	adds	r3, #1
 800e518:	637b      	str	r3, [r7, #52]	; 0x34
 800e51a:	e006      	b.n	800e52a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e526:	2b00      	cmp	r3, #0
 800e528:	d012      	beq.n	800e550 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e52a:	f7f8 fae7 	bl	8006afc <HAL_GetTick>
 800e52e:	4602      	mov	r2, r0
 800e530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e532:	1ad3      	subs	r3, r2, r3
 800e534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e538:	d102      	bne.n	800e540 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e53a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e53e:	e05a      	b.n	800e5f6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e546:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d0cf      	beq.n	800e4ee <SD_FindSCR+0x96>
 800e54e:	e000      	b.n	800e552 <SD_FindSCR+0xfa>
      break;
 800e550:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e558:	f003 0308 	and.w	r3, r3, #8
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d005      	beq.n	800e56c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2208      	movs	r2, #8
 800e566:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e568:	2308      	movs	r3, #8
 800e56a:	e044      	b.n	800e5f6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e572:	f003 0302 	and.w	r3, r3, #2
 800e576:	2b00      	cmp	r3, #0
 800e578:	d005      	beq.n	800e586 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2202      	movs	r2, #2
 800e580:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e582:	2302      	movs	r3, #2
 800e584:	e037      	b.n	800e5f6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e58c:	f003 0320 	and.w	r3, r3, #32
 800e590:	2b00      	cmp	r3, #0
 800e592:	d005      	beq.n	800e5a0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2220      	movs	r2, #32
 800e59a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e59c:	2320      	movs	r3, #32
 800e59e:	e02a      	b.n	800e5f6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f240 523a 	movw	r2, #1338	; 0x53a
 800e5a8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	061a      	lsls	r2, r3, #24
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	021b      	lsls	r3, r3, #8
 800e5b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e5b6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	0a1b      	lsrs	r3, r3, #8
 800e5bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e5c0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	0e1b      	lsrs	r3, r3, #24
 800e5c6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ca:	601a      	str	r2, [r3, #0]
    scr++;
 800e5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ce:	3304      	adds	r3, #4
 800e5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	061a      	lsls	r2, r3, #24
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	021b      	lsls	r3, r3, #8
 800e5da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e5de:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	0a1b      	lsrs	r3, r3, #8
 800e5e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e5e8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	0e1b      	lsrs	r3, r3, #24
 800e5ee:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	373c      	adds	r7, #60	; 0x3c
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd90      	pop	{r4, r7, pc}

0800e5fe <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b086      	sub	sp, #24
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e60a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e610:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d03f      	beq.n	800e698 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e618:	2300      	movs	r3, #0
 800e61a:	617b      	str	r3, [r7, #20]
 800e61c:	e033      	b.n	800e686 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4618      	mov	r0, r3
 800e624:	f000 fbdb 	bl	800edde <SDIO_ReadFIFO>
 800e628:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	b2da      	uxtb	r2, r3
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	3301      	adds	r3, #1
 800e636:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	3b01      	subs	r3, #1
 800e63c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	0a1b      	lsrs	r3, r3, #8
 800e642:	b2da      	uxtb	r2, r3
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	3301      	adds	r3, #1
 800e64c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	3b01      	subs	r3, #1
 800e652:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	0c1b      	lsrs	r3, r3, #16
 800e658:	b2da      	uxtb	r2, r3
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	3301      	adds	r3, #1
 800e662:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	3b01      	subs	r3, #1
 800e668:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	0e1b      	lsrs	r3, r3, #24
 800e66e:	b2da      	uxtb	r2, r3
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	3301      	adds	r3, #1
 800e678:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	3301      	adds	r3, #1
 800e684:	617b      	str	r3, [r7, #20]
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	2b07      	cmp	r3, #7
 800e68a:	d9c8      	bls.n	800e61e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	693a      	ldr	r2, [r7, #16]
 800e696:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e698:	bf00      	nop
 800e69a:	3718      	adds	r7, #24
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6a1b      	ldr	r3, [r3, #32]
 800e6ac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d043      	beq.n	800e742 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	617b      	str	r3, [r7, #20]
 800e6be:	e037      	b.n	800e730 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	3b01      	subs	r3, #1
 800e6d0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	021a      	lsls	r2, r3, #8
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	041a      	lsls	r2, r3, #16
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	3b01      	subs	r3, #1
 800e700:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	061a      	lsls	r2, r3, #24
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	4313      	orrs	r3, r2
 800e70c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	3301      	adds	r3, #1
 800e712:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	3b01      	subs	r3, #1
 800e718:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f107 0208 	add.w	r2, r7, #8
 800e722:	4611      	mov	r1, r2
 800e724:	4618      	mov	r0, r3
 800e726:	f000 fb67 	bl	800edf8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	3301      	adds	r3, #1
 800e72e:	617b      	str	r3, [r7, #20]
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	2b07      	cmp	r3, #7
 800e734:	d9c4      	bls.n	800e6c0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	68fa      	ldr	r2, [r7, #12]
 800e73a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	693a      	ldr	r2, [r7, #16]
 800e740:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e742:	bf00      	nop
 800e744:	3718      	adds	r7, #24
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}

0800e74a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b082      	sub	sp, #8
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d101      	bne.n	800e75c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e758:	2301      	movs	r3, #1
 800e75a:	e041      	b.n	800e7e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e762:	b2db      	uxtb	r3, r3
 800e764:	2b00      	cmp	r3, #0
 800e766:	d106      	bne.n	800e776 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f7f8 f83d 	bl	80067f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2202      	movs	r2, #2
 800e77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	3304      	adds	r3, #4
 800e786:	4619      	mov	r1, r3
 800e788:	4610      	mov	r0, r2
 800e78a:	f000 f9cd 	bl	800eb28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2201      	movs	r2, #1
 800e792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2201      	movs	r2, #1
 800e79a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2201      	movs	r2, #1
 800e7da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e7de:	2300      	movs	r3, #0
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d001      	beq.n	800e800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e04e      	b.n	800e89e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2202      	movs	r2, #2
 800e804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	68da      	ldr	r2, [r3, #12]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f042 0201 	orr.w	r2, r2, #1
 800e816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a23      	ldr	r2, [pc, #140]	; (800e8ac <HAL_TIM_Base_Start_IT+0xc4>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d022      	beq.n	800e868 <HAL_TIM_Base_Start_IT+0x80>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e82a:	d01d      	beq.n	800e868 <HAL_TIM_Base_Start_IT+0x80>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a1f      	ldr	r2, [pc, #124]	; (800e8b0 <HAL_TIM_Base_Start_IT+0xc8>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d018      	beq.n	800e868 <HAL_TIM_Base_Start_IT+0x80>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4a1e      	ldr	r2, [pc, #120]	; (800e8b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d013      	beq.n	800e868 <HAL_TIM_Base_Start_IT+0x80>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4a1c      	ldr	r2, [pc, #112]	; (800e8b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d00e      	beq.n	800e868 <HAL_TIM_Base_Start_IT+0x80>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a1b      	ldr	r2, [pc, #108]	; (800e8bc <HAL_TIM_Base_Start_IT+0xd4>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d009      	beq.n	800e868 <HAL_TIM_Base_Start_IT+0x80>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a19      	ldr	r2, [pc, #100]	; (800e8c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d004      	beq.n	800e868 <HAL_TIM_Base_Start_IT+0x80>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4a18      	ldr	r2, [pc, #96]	; (800e8c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d111      	bne.n	800e88c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	f003 0307 	and.w	r3, r3, #7
 800e872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2b06      	cmp	r3, #6
 800e878:	d010      	beq.n	800e89c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f042 0201 	orr.w	r2, r2, #1
 800e888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e88a:	e007      	b.n	800e89c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f042 0201 	orr.w	r2, r2, #1
 800e89a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e89c:	2300      	movs	r3, #0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3714      	adds	r7, #20
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr
 800e8aa:	bf00      	nop
 800e8ac:	40010000 	.word	0x40010000
 800e8b0:	40000400 	.word	0x40000400
 800e8b4:	40000800 	.word	0x40000800
 800e8b8:	40000c00 	.word	0x40000c00
 800e8bc:	40010400 	.word	0x40010400
 800e8c0:	40014000 	.word	0x40014000
 800e8c4:	40001800 	.word	0x40001800

0800e8c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	f003 0302 	and.w	r3, r3, #2
 800e8da:	2b02      	cmp	r3, #2
 800e8dc:	d122      	bne.n	800e924 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	f003 0302 	and.w	r3, r3, #2
 800e8e8:	2b02      	cmp	r3, #2
 800e8ea:	d11b      	bne.n	800e924 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f06f 0202 	mvn.w	r2, #2
 800e8f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	f003 0303 	and.w	r3, r3, #3
 800e906:	2b00      	cmp	r3, #0
 800e908:	d003      	beq.n	800e912 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 f8ee 	bl	800eaec <HAL_TIM_IC_CaptureCallback>
 800e910:	e005      	b.n	800e91e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 f8e0 	bl	800ead8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f8f1 	bl	800eb00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	691b      	ldr	r3, [r3, #16]
 800e92a:	f003 0304 	and.w	r3, r3, #4
 800e92e:	2b04      	cmp	r3, #4
 800e930:	d122      	bne.n	800e978 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	f003 0304 	and.w	r3, r3, #4
 800e93c:	2b04      	cmp	r3, #4
 800e93e:	d11b      	bne.n	800e978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f06f 0204 	mvn.w	r2, #4
 800e948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2202      	movs	r2, #2
 800e94e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	699b      	ldr	r3, [r3, #24]
 800e956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 f8c4 	bl	800eaec <HAL_TIM_IC_CaptureCallback>
 800e964:	e005      	b.n	800e972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 f8b6 	bl	800ead8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 f8c7 	bl	800eb00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	691b      	ldr	r3, [r3, #16]
 800e97e:	f003 0308 	and.w	r3, r3, #8
 800e982:	2b08      	cmp	r3, #8
 800e984:	d122      	bne.n	800e9cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	f003 0308 	and.w	r3, r3, #8
 800e990:	2b08      	cmp	r3, #8
 800e992:	d11b      	bne.n	800e9cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f06f 0208 	mvn.w	r2, #8
 800e99c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2204      	movs	r2, #4
 800e9a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	69db      	ldr	r3, [r3, #28]
 800e9aa:	f003 0303 	and.w	r3, r3, #3
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d003      	beq.n	800e9ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f000 f89a 	bl	800eaec <HAL_TIM_IC_CaptureCallback>
 800e9b8:	e005      	b.n	800e9c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 f88c 	bl	800ead8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 f89d 	bl	800eb00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	691b      	ldr	r3, [r3, #16]
 800e9d2:	f003 0310 	and.w	r3, r3, #16
 800e9d6:	2b10      	cmp	r3, #16
 800e9d8:	d122      	bne.n	800ea20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	f003 0310 	and.w	r3, r3, #16
 800e9e4:	2b10      	cmp	r3, #16
 800e9e6:	d11b      	bne.n	800ea20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f06f 0210 	mvn.w	r2, #16
 800e9f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2208      	movs	r2, #8
 800e9f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	69db      	ldr	r3, [r3, #28]
 800e9fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d003      	beq.n	800ea0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 f870 	bl	800eaec <HAL_TIM_IC_CaptureCallback>
 800ea0c:	e005      	b.n	800ea1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 f862 	bl	800ead8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 f873 	bl	800eb00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	691b      	ldr	r3, [r3, #16]
 800ea26:	f003 0301 	and.w	r3, r3, #1
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d10e      	bne.n	800ea4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	f003 0301 	and.w	r3, r3, #1
 800ea38:	2b01      	cmp	r3, #1
 800ea3a:	d107      	bne.n	800ea4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f06f 0201 	mvn.w	r2, #1
 800ea44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7f7 fb70 	bl	800612c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	691b      	ldr	r3, [r3, #16]
 800ea52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea56:	2b80      	cmp	r3, #128	; 0x80
 800ea58:	d10e      	bne.n	800ea78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea64:	2b80      	cmp	r3, #128	; 0x80
 800ea66:	d107      	bne.n	800ea78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ea70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 f97e 	bl	800ed74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	691b      	ldr	r3, [r3, #16]
 800ea7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea82:	2b40      	cmp	r3, #64	; 0x40
 800ea84:	d10e      	bne.n	800eaa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea90:	2b40      	cmp	r3, #64	; 0x40
 800ea92:	d107      	bne.n	800eaa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ea9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 f838 	bl	800eb14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	691b      	ldr	r3, [r3, #16]
 800eaaa:	f003 0320 	and.w	r3, r3, #32
 800eaae:	2b20      	cmp	r3, #32
 800eab0:	d10e      	bne.n	800ead0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	68db      	ldr	r3, [r3, #12]
 800eab8:	f003 0320 	and.w	r3, r3, #32
 800eabc:	2b20      	cmp	r3, #32
 800eabe:	d107      	bne.n	800ead0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f06f 0220 	mvn.w	r2, #32
 800eac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f948 	bl	800ed60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ead0:	bf00      	nop
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eae0:	bf00      	nop
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eaf4:	bf00      	nop
 800eaf6:	370c      	adds	r7, #12
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr

0800eb00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b083      	sub	sp, #12
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eb08:	bf00      	nop
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eb1c:	bf00      	nop
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	4a40      	ldr	r2, [pc, #256]	; (800ec3c <TIM_Base_SetConfig+0x114>)
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d013      	beq.n	800eb68 <TIM_Base_SetConfig+0x40>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb46:	d00f      	beq.n	800eb68 <TIM_Base_SetConfig+0x40>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	4a3d      	ldr	r2, [pc, #244]	; (800ec40 <TIM_Base_SetConfig+0x118>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d00b      	beq.n	800eb68 <TIM_Base_SetConfig+0x40>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	4a3c      	ldr	r2, [pc, #240]	; (800ec44 <TIM_Base_SetConfig+0x11c>)
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d007      	beq.n	800eb68 <TIM_Base_SetConfig+0x40>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	4a3b      	ldr	r2, [pc, #236]	; (800ec48 <TIM_Base_SetConfig+0x120>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d003      	beq.n	800eb68 <TIM_Base_SetConfig+0x40>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	4a3a      	ldr	r2, [pc, #232]	; (800ec4c <TIM_Base_SetConfig+0x124>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d108      	bne.n	800eb7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	68fa      	ldr	r2, [r7, #12]
 800eb76:	4313      	orrs	r3, r2
 800eb78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4a2f      	ldr	r2, [pc, #188]	; (800ec3c <TIM_Base_SetConfig+0x114>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d02b      	beq.n	800ebda <TIM_Base_SetConfig+0xb2>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb88:	d027      	beq.n	800ebda <TIM_Base_SetConfig+0xb2>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4a2c      	ldr	r2, [pc, #176]	; (800ec40 <TIM_Base_SetConfig+0x118>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d023      	beq.n	800ebda <TIM_Base_SetConfig+0xb2>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4a2b      	ldr	r2, [pc, #172]	; (800ec44 <TIM_Base_SetConfig+0x11c>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d01f      	beq.n	800ebda <TIM_Base_SetConfig+0xb2>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a2a      	ldr	r2, [pc, #168]	; (800ec48 <TIM_Base_SetConfig+0x120>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d01b      	beq.n	800ebda <TIM_Base_SetConfig+0xb2>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a29      	ldr	r2, [pc, #164]	; (800ec4c <TIM_Base_SetConfig+0x124>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d017      	beq.n	800ebda <TIM_Base_SetConfig+0xb2>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4a28      	ldr	r2, [pc, #160]	; (800ec50 <TIM_Base_SetConfig+0x128>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d013      	beq.n	800ebda <TIM_Base_SetConfig+0xb2>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4a27      	ldr	r2, [pc, #156]	; (800ec54 <TIM_Base_SetConfig+0x12c>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d00f      	beq.n	800ebda <TIM_Base_SetConfig+0xb2>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4a26      	ldr	r2, [pc, #152]	; (800ec58 <TIM_Base_SetConfig+0x130>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d00b      	beq.n	800ebda <TIM_Base_SetConfig+0xb2>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4a25      	ldr	r2, [pc, #148]	; (800ec5c <TIM_Base_SetConfig+0x134>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d007      	beq.n	800ebda <TIM_Base_SetConfig+0xb2>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4a24      	ldr	r2, [pc, #144]	; (800ec60 <TIM_Base_SetConfig+0x138>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d003      	beq.n	800ebda <TIM_Base_SetConfig+0xb2>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4a23      	ldr	r2, [pc, #140]	; (800ec64 <TIM_Base_SetConfig+0x13c>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d108      	bne.n	800ebec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ebe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	68db      	ldr	r3, [r3, #12]
 800ebe6:	68fa      	ldr	r2, [r7, #12]
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	695b      	ldr	r3, [r3, #20]
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	68fa      	ldr	r2, [r7, #12]
 800ebfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	689a      	ldr	r2, [r3, #8]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4a0a      	ldr	r2, [pc, #40]	; (800ec3c <TIM_Base_SetConfig+0x114>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d003      	beq.n	800ec20 <TIM_Base_SetConfig+0xf8>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	4a0c      	ldr	r2, [pc, #48]	; (800ec4c <TIM_Base_SetConfig+0x124>)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d103      	bne.n	800ec28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	691a      	ldr	r2, [r3, #16]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	615a      	str	r2, [r3, #20]
}
 800ec2e:	bf00      	nop
 800ec30:	3714      	adds	r7, #20
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	40010000 	.word	0x40010000
 800ec40:	40000400 	.word	0x40000400
 800ec44:	40000800 	.word	0x40000800
 800ec48:	40000c00 	.word	0x40000c00
 800ec4c:	40010400 	.word	0x40010400
 800ec50:	40014000 	.word	0x40014000
 800ec54:	40014400 	.word	0x40014400
 800ec58:	40014800 	.word	0x40014800
 800ec5c:	40001800 	.word	0x40001800
 800ec60:	40001c00 	.word	0x40001c00
 800ec64:	40002000 	.word	0x40002000

0800ec68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d101      	bne.n	800ec80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ec7c:	2302      	movs	r3, #2
 800ec7e:	e05a      	b.n	800ed36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2201      	movs	r2, #1
 800ec84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2202      	movs	r2, #2
 800ec8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	689b      	ldr	r3, [r3, #8]
 800ec9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4a21      	ldr	r2, [pc, #132]	; (800ed44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d022      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eccc:	d01d      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a1d      	ldr	r2, [pc, #116]	; (800ed48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d018      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a1b      	ldr	r2, [pc, #108]	; (800ed4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d013      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4a1a      	ldr	r2, [pc, #104]	; (800ed50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d00e      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a18      	ldr	r2, [pc, #96]	; (800ed54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d009      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4a17      	ldr	r2, [pc, #92]	; (800ed58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d004      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a15      	ldr	r2, [pc, #84]	; (800ed5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d10c      	bne.n	800ed24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	4313      	orrs	r3, r2
 800ed1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2201      	movs	r2, #1
 800ed28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed34:	2300      	movs	r3, #0
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3714      	adds	r7, #20
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	40010000 	.word	0x40010000
 800ed48:	40000400 	.word	0x40000400
 800ed4c:	40000800 	.word	0x40000800
 800ed50:	40000c00 	.word	0x40000c00
 800ed54:	40010400 	.word	0x40010400
 800ed58:	40014000 	.word	0x40014000
 800ed5c:	40001800 	.word	0x40001800

0800ed60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ed68:	bf00      	nop
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ed7c:	bf00      	nop
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr

0800ed88 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ed88:	b084      	sub	sp, #16
 800ed8a:	b480      	push	{r7}
 800ed8c:	b085      	sub	sp, #20
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	f107 001c 	add.w	r0, r7, #28
 800ed96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ed9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800eda0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800eda2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800eda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800eda6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800eda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800edaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800edac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800edae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800edb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800edb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800edb4:	68fa      	ldr	r2, [r7, #12]
 800edb6:	4313      	orrs	r3, r2
 800edb8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800edc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800edc6:	68fa      	ldr	r2, [r7, #12]
 800edc8:	431a      	orrs	r2, r3
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800edce:	2300      	movs	r3, #0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3714      	adds	r7, #20
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	b004      	add	sp, #16
 800eddc:	4770      	bx	lr

0800edde <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800edde:	b480      	push	{r7}
 800ede0:	b083      	sub	sp, #12
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800edec:	4618      	mov	r0, r3
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	681a      	ldr	r2, [r3, #0]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee0c:	2300      	movs	r3, #0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	370c      	adds	r7, #12
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr

0800ee1a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ee1a:	b580      	push	{r7, lr}
 800ee1c:	b082      	sub	sp, #8
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2203      	movs	r2, #3
 800ee26:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ee28:	2002      	movs	r0, #2
 800ee2a:	f7f7 fe73 	bl	8006b14 <HAL_Delay>
  
  return HAL_OK;
 800ee2e:	2300      	movs	r3, #0
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f003 0303 	and.w	r3, r3, #3
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	370c      	adds	r7, #12
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ee72:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ee78:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ee7e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	4313      	orrs	r3, r2
 800ee84:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ee8e:	f023 030f 	bic.w	r3, r3, #15
 800ee92:	68fa      	ldr	r2, [r7, #12]
 800ee94:	431a      	orrs	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ee9a:	2300      	movs	r3, #0
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3714      	adds	r7, #20
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	691b      	ldr	r3, [r3, #16]
 800eeb4:	b2db      	uxtb	r3, r3
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	370c      	adds	r7, #12
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800eec2:	b480      	push	{r7}
 800eec4:	b085      	sub	sp, #20
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
 800eeca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	3314      	adds	r3, #20
 800eed0:	461a      	mov	r2, r3
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	4413      	add	r3, r2
 800eed6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
}  
 800eedc:	4618      	mov	r0, r3
 800eede:	3714      	adds	r7, #20
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b085      	sub	sp, #20
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	685a      	ldr	r2, [r3, #4]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ef0e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ef14:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ef1a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef26:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	431a      	orrs	r2, r3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ef32:	2300      	movs	r3, #0

}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3714      	adds	r7, #20
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr

0800ef40 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b088      	sub	sp, #32
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ef4e:	2310      	movs	r3, #16
 800ef50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ef52:	2340      	movs	r3, #64	; 0x40
 800ef54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef56:	2300      	movs	r3, #0
 800ef58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ef60:	f107 0308 	add.w	r3, r7, #8
 800ef64:	4619      	mov	r1, r3
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f7ff ff74 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ef6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef70:	2110      	movs	r1, #16
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 fa44 	bl	800f400 <SDMMC_GetCmdResp1>
 800ef78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef7a:	69fb      	ldr	r3, [r7, #28]
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3720      	adds	r7, #32
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b088      	sub	sp, #32
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ef92:	2311      	movs	r3, #17
 800ef94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ef96:	2340      	movs	r3, #64	; 0x40
 800ef98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800efa4:	f107 0308 	add.w	r3, r7, #8
 800efa8:	4619      	mov	r1, r3
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f7ff ff52 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800efb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800efb4:	2111      	movs	r1, #17
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f000 fa22 	bl	800f400 <SDMMC_GetCmdResp1>
 800efbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efbe:	69fb      	ldr	r3, [r7, #28]
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3720      	adds	r7, #32
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}

0800efc8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b088      	sub	sp, #32
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800efd6:	2312      	movs	r3, #18
 800efd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800efda:	2340      	movs	r3, #64	; 0x40
 800efdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800efde:	2300      	movs	r3, #0
 800efe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800efe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efe6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800efe8:	f107 0308 	add.w	r3, r7, #8
 800efec:	4619      	mov	r1, r3
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7ff ff30 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800eff4:	f241 3288 	movw	r2, #5000	; 0x1388
 800eff8:	2112      	movs	r1, #18
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 fa00 	bl	800f400 <SDMMC_GetCmdResp1>
 800f000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f002:	69fb      	ldr	r3, [r7, #28]
}
 800f004:	4618      	mov	r0, r3
 800f006:	3720      	adds	r7, #32
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b088      	sub	sp, #32
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f01a:	2318      	movs	r3, #24
 800f01c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f01e:	2340      	movs	r3, #64	; 0x40
 800f020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f022:	2300      	movs	r3, #0
 800f024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f02a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f02c:	f107 0308 	add.w	r3, r7, #8
 800f030:	4619      	mov	r1, r3
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f7ff ff0e 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f038:	f241 3288 	movw	r2, #5000	; 0x1388
 800f03c:	2118      	movs	r1, #24
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 f9de 	bl	800f400 <SDMMC_GetCmdResp1>
 800f044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f046:	69fb      	ldr	r3, [r7, #28]
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3720      	adds	r7, #32
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b088      	sub	sp, #32
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f05e:	2319      	movs	r3, #25
 800f060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f062:	2340      	movs	r3, #64	; 0x40
 800f064:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f066:	2300      	movs	r3, #0
 800f068:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f06a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f06e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f070:	f107 0308 	add.w	r3, r7, #8
 800f074:	4619      	mov	r1, r3
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f7ff feec 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f07c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f080:	2119      	movs	r1, #25
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 f9bc 	bl	800f400 <SDMMC_GetCmdResp1>
 800f088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f08a:	69fb      	ldr	r3, [r7, #28]
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3720      	adds	r7, #32
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b088      	sub	sp, #32
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f09c:	2300      	movs	r3, #0
 800f09e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f0a0:	230c      	movs	r3, #12
 800f0a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f0a4:	2340      	movs	r3, #64	; 0x40
 800f0a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f0ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f0b2:	f107 0308 	add.w	r3, r7, #8
 800f0b6:	4619      	mov	r1, r3
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7ff fecb 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f0be:	4a05      	ldr	r2, [pc, #20]	; (800f0d4 <SDMMC_CmdStopTransfer+0x40>)
 800f0c0:	210c      	movs	r1, #12
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f000 f99c 	bl	800f400 <SDMMC_GetCmdResp1>
 800f0c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0ca:	69fb      	ldr	r3, [r7, #28]
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3720      	adds	r7, #32
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	05f5e100 	.word	0x05f5e100

0800f0d8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b08a      	sub	sp, #40	; 0x28
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f0e8:	2307      	movs	r3, #7
 800f0ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f0ec:	2340      	movs	r3, #64	; 0x40
 800f0ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f0f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0f8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f0fa:	f107 0310 	add.w	r3, r7, #16
 800f0fe:	4619      	mov	r1, r3
 800f100:	68f8      	ldr	r0, [r7, #12]
 800f102:	f7ff fea7 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f106:	f241 3288 	movw	r2, #5000	; 0x1388
 800f10a:	2107      	movs	r1, #7
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	f000 f977 	bl	800f400 <SDMMC_GetCmdResp1>
 800f112:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f116:	4618      	mov	r0, r3
 800f118:	3728      	adds	r7, #40	; 0x28
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}

0800f11e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f11e:	b580      	push	{r7, lr}
 800f120:	b088      	sub	sp, #32
 800f122:	af00      	add	r7, sp, #0
 800f124:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f126:	2300      	movs	r3, #0
 800f128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f12a:	2300      	movs	r3, #0
 800f12c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f12e:	2300      	movs	r3, #0
 800f130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f132:	2300      	movs	r3, #0
 800f134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f13a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f13c:	f107 0308 	add.w	r3, r7, #8
 800f140:	4619      	mov	r1, r3
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f7ff fe86 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f000 f92d 	bl	800f3a8 <SDMMC_GetCmdError>
 800f14e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f150:	69fb      	ldr	r3, [r7, #28]
}
 800f152:	4618      	mov	r0, r3
 800f154:	3720      	adds	r7, #32
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}

0800f15a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f15a:	b580      	push	{r7, lr}
 800f15c:	b088      	sub	sp, #32
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f162:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f166:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f168:	2308      	movs	r3, #8
 800f16a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f16c:	2340      	movs	r3, #64	; 0x40
 800f16e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f170:	2300      	movs	r3, #0
 800f172:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f178:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f17a:	f107 0308 	add.w	r3, r7, #8
 800f17e:	4619      	mov	r1, r3
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f7ff fe67 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 fb24 	bl	800f7d4 <SDMMC_GetCmdResp7>
 800f18c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f18e:	69fb      	ldr	r3, [r7, #28]
}
 800f190:	4618      	mov	r0, r3
 800f192:	3720      	adds	r7, #32
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b088      	sub	sp, #32
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f1a6:	2337      	movs	r3, #55	; 0x37
 800f1a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f1aa:	2340      	movs	r3, #64	; 0x40
 800f1ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f1b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f1b8:	f107 0308 	add.w	r3, r7, #8
 800f1bc:	4619      	mov	r1, r3
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f7ff fe48 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800f1c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1c8:	2137      	movs	r1, #55	; 0x37
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f000 f918 	bl	800f400 <SDMMC_GetCmdResp1>
 800f1d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f1d2:	69fb      	ldr	r3, [r7, #28]
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3720      	adds	r7, #32
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b088      	sub	sp, #32
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f1ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f1f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f1f2:	2329      	movs	r3, #41	; 0x29
 800f1f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f1f6:	2340      	movs	r3, #64	; 0x40
 800f1f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f1fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f202:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f204:	f107 0308 	add.w	r3, r7, #8
 800f208:	4619      	mov	r1, r3
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f7ff fe22 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f000 fa2b 	bl	800f66c <SDMMC_GetCmdResp3>
 800f216:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f218:	69fb      	ldr	r3, [r7, #28]
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3720      	adds	r7, #32
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b088      	sub	sp, #32
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
 800f22a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f230:	2306      	movs	r3, #6
 800f232:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f234:	2340      	movs	r3, #64	; 0x40
 800f236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f238:	2300      	movs	r3, #0
 800f23a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f23c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f240:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f242:	f107 0308 	add.w	r3, r7, #8
 800f246:	4619      	mov	r1, r3
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f7ff fe03 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800f24e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f252:	2106      	movs	r1, #6
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 f8d3 	bl	800f400 <SDMMC_GetCmdResp1>
 800f25a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f25c:	69fb      	ldr	r3, [r7, #28]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3720      	adds	r7, #32
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800f266:	b580      	push	{r7, lr}
 800f268:	b088      	sub	sp, #32
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f26e:	2300      	movs	r3, #0
 800f270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f272:	2333      	movs	r3, #51	; 0x33
 800f274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f276:	2340      	movs	r3, #64	; 0x40
 800f278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f27a:	2300      	movs	r3, #0
 800f27c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f282:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f284:	f107 0308 	add.w	r3, r7, #8
 800f288:	4619      	mov	r1, r3
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f7ff fde2 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800f290:	f241 3288 	movw	r2, #5000	; 0x1388
 800f294:	2133      	movs	r1, #51	; 0x33
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f000 f8b2 	bl	800f400 <SDMMC_GetCmdResp1>
 800f29c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f29e:	69fb      	ldr	r3, [r7, #28]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3720      	adds	r7, #32
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b088      	sub	sp, #32
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f2b4:	2302      	movs	r3, #2
 800f2b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f2b8:	23c0      	movs	r3, #192	; 0xc0
 800f2ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f2c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f2c6:	f107 0308 	add.w	r3, r7, #8
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7ff fdc1 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 f982 	bl	800f5dc <SDMMC_GetCmdResp2>
 800f2d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2da:	69fb      	ldr	r3, [r7, #28]
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3720      	adds	r7, #32
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b088      	sub	sp, #32
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f2f2:	2309      	movs	r3, #9
 800f2f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f2f6:	23c0      	movs	r3, #192	; 0xc0
 800f2f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f2fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f302:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f304:	f107 0308 	add.w	r3, r7, #8
 800f308:	4619      	mov	r1, r3
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff fda2 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 f963 	bl	800f5dc <SDMMC_GetCmdResp2>
 800f316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f318:	69fb      	ldr	r3, [r7, #28]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3720      	adds	r7, #32
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b088      	sub	sp, #32
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
 800f32a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f32c:	2300      	movs	r3, #0
 800f32e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f330:	2303      	movs	r3, #3
 800f332:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f334:	2340      	movs	r3, #64	; 0x40
 800f336:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f338:	2300      	movs	r3, #0
 800f33a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f33c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f340:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f342:	f107 0308 	add.w	r3, r7, #8
 800f346:	4619      	mov	r1, r3
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f7ff fd83 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f34e:	683a      	ldr	r2, [r7, #0]
 800f350:	2103      	movs	r1, #3
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 f9c8 	bl	800f6e8 <SDMMC_GetCmdResp6>
 800f358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f35a:	69fb      	ldr	r3, [r7, #28]
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3720      	adds	r7, #32
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b088      	sub	sp, #32
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f372:	230d      	movs	r3, #13
 800f374:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f376:	2340      	movs	r3, #64	; 0x40
 800f378:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f37a:	2300      	movs	r3, #0
 800f37c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f37e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f382:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f384:	f107 0308 	add.w	r3, r7, #8
 800f388:	4619      	mov	r1, r3
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7ff fd62 	bl	800ee54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800f390:	f241 3288 	movw	r2, #5000	; 0x1388
 800f394:	210d      	movs	r1, #13
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f000 f832 	bl	800f400 <SDMMC_GetCmdResp1>
 800f39c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f39e:	69fb      	ldr	r3, [r7, #28]
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3720      	adds	r7, #32
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f3b0:	4b11      	ldr	r3, [pc, #68]	; (800f3f8 <SDMMC_GetCmdError+0x50>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	4a11      	ldr	r2, [pc, #68]	; (800f3fc <SDMMC_GetCmdError+0x54>)
 800f3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800f3ba:	0a5b      	lsrs	r3, r3, #9
 800f3bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3c0:	fb02 f303 	mul.w	r3, r2, r3
 800f3c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	1e5a      	subs	r2, r3, #1
 800f3ca:	60fa      	str	r2, [r7, #12]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d102      	bne.n	800f3d6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f3d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f3d4:	e009      	b.n	800f3ea <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d0f1      	beq.n	800f3c6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	22c5      	movs	r2, #197	; 0xc5
 800f3e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f3e8:	2300      	movs	r3, #0
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3714      	adds	r7, #20
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	20000000 	.word	0x20000000
 800f3fc:	10624dd3 	.word	0x10624dd3

0800f400 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b088      	sub	sp, #32
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	460b      	mov	r3, r1
 800f40a:	607a      	str	r2, [r7, #4]
 800f40c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f40e:	4b70      	ldr	r3, [pc, #448]	; (800f5d0 <SDMMC_GetCmdResp1+0x1d0>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4a70      	ldr	r2, [pc, #448]	; (800f5d4 <SDMMC_GetCmdResp1+0x1d4>)
 800f414:	fba2 2303 	umull	r2, r3, r2, r3
 800f418:	0a5a      	lsrs	r2, r3, #9
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	fb02 f303 	mul.w	r3, r2, r3
 800f420:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f422:	69fb      	ldr	r3, [r7, #28]
 800f424:	1e5a      	subs	r2, r3, #1
 800f426:	61fa      	str	r2, [r7, #28]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d102      	bne.n	800f432 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f42c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f430:	e0c9      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f436:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f438:	69bb      	ldr	r3, [r7, #24]
 800f43a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d0ef      	beq.n	800f422 <SDMMC_GetCmdResp1+0x22>
 800f442:	69bb      	ldr	r3, [r7, #24]
 800f444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d1ea      	bne.n	800f422 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f450:	f003 0304 	and.w	r3, r3, #4
 800f454:	2b00      	cmp	r3, #0
 800f456:	d004      	beq.n	800f462 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2204      	movs	r2, #4
 800f45c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f45e:	2304      	movs	r3, #4
 800f460:	e0b1      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f466:	f003 0301 	and.w	r3, r3, #1
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d004      	beq.n	800f478 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2201      	movs	r2, #1
 800f472:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f474:	2301      	movs	r3, #1
 800f476:	e0a6      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	22c5      	movs	r2, #197	; 0xc5
 800f47c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f47e:	68f8      	ldr	r0, [r7, #12]
 800f480:	f7ff fd12 	bl	800eea8 <SDIO_GetCommandResponse>
 800f484:	4603      	mov	r3, r0
 800f486:	461a      	mov	r2, r3
 800f488:	7afb      	ldrb	r3, [r7, #11]
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d001      	beq.n	800f492 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f48e:	2301      	movs	r3, #1
 800f490:	e099      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f492:	2100      	movs	r1, #0
 800f494:	68f8      	ldr	r0, [r7, #12]
 800f496:	f7ff fd14 	bl	800eec2 <SDIO_GetResponse>
 800f49a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f49c:	697a      	ldr	r2, [r7, #20]
 800f49e:	4b4e      	ldr	r3, [pc, #312]	; (800f5d8 <SDMMC_GetCmdResp1+0x1d8>)
 800f4a0:	4013      	ands	r3, r2
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d101      	bne.n	800f4aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	e08d      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	da02      	bge.n	800f4b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f4b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f4b4:	e087      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d001      	beq.n	800f4c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f4c0:	2340      	movs	r3, #64	; 0x40
 800f4c2:	e080      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d001      	beq.n	800f4d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f4ce:	2380      	movs	r3, #128	; 0x80
 800f4d0:	e079      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d002      	beq.n	800f4e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f4dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f4e0:	e071      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d002      	beq.n	800f4f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f4ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f4f0:	e069      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d002      	beq.n	800f502 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f4fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f500:	e061      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d002      	beq.n	800f512 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f50c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f510:	e059      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d002      	beq.n	800f522 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f51c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f520:	e051      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d002      	beq.n	800f532 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f52c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f530:	e049      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d002      	beq.n	800f542 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f53c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f540:	e041      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d002      	beq.n	800f552 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f54c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f550:	e039      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d002      	beq.n	800f562 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f55c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f560:	e031      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d002      	beq.n	800f572 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f56c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f570:	e029      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d002      	beq.n	800f582 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f57c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f580:	e021      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d002      	beq.n	800f592 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f58c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f590:	e019      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d002      	beq.n	800f5a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f59c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f5a0:	e011      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d002      	beq.n	800f5b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f5ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f5b0:	e009      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	f003 0308 	and.w	r3, r3, #8
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d002      	beq.n	800f5c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f5bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f5c0:	e001      	b.n	800f5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f5c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3720      	adds	r7, #32
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	20000000 	.word	0x20000000
 800f5d4:	10624dd3 	.word	0x10624dd3
 800f5d8:	fdffe008 	.word	0xfdffe008

0800f5dc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b085      	sub	sp, #20
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f5e4:	4b1f      	ldr	r3, [pc, #124]	; (800f664 <SDMMC_GetCmdResp2+0x88>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4a1f      	ldr	r2, [pc, #124]	; (800f668 <SDMMC_GetCmdResp2+0x8c>)
 800f5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800f5ee:	0a5b      	lsrs	r3, r3, #9
 800f5f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5f4:	fb02 f303 	mul.w	r3, r2, r3
 800f5f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	1e5a      	subs	r2, r3, #1
 800f5fe:	60fa      	str	r2, [r7, #12]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d102      	bne.n	800f60a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f608:	e026      	b.n	800f658 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f60e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f616:	2b00      	cmp	r3, #0
 800f618:	d0ef      	beq.n	800f5fa <SDMMC_GetCmdResp2+0x1e>
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1ea      	bne.n	800f5fa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f628:	f003 0304 	and.w	r3, r3, #4
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d004      	beq.n	800f63a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2204      	movs	r2, #4
 800f634:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f636:	2304      	movs	r3, #4
 800f638:	e00e      	b.n	800f658 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f63e:	f003 0301 	and.w	r3, r3, #1
 800f642:	2b00      	cmp	r3, #0
 800f644:	d004      	beq.n	800f650 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2201      	movs	r2, #1
 800f64a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f64c:	2301      	movs	r3, #1
 800f64e:	e003      	b.n	800f658 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	22c5      	movs	r2, #197	; 0xc5
 800f654:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f656:	2300      	movs	r3, #0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3714      	adds	r7, #20
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr
 800f664:	20000000 	.word	0x20000000
 800f668:	10624dd3 	.word	0x10624dd3

0800f66c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b085      	sub	sp, #20
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f674:	4b1a      	ldr	r3, [pc, #104]	; (800f6e0 <SDMMC_GetCmdResp3+0x74>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4a1a      	ldr	r2, [pc, #104]	; (800f6e4 <SDMMC_GetCmdResp3+0x78>)
 800f67a:	fba2 2303 	umull	r2, r3, r2, r3
 800f67e:	0a5b      	lsrs	r3, r3, #9
 800f680:	f241 3288 	movw	r2, #5000	; 0x1388
 800f684:	fb02 f303 	mul.w	r3, r2, r3
 800f688:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	1e5a      	subs	r2, r3, #1
 800f68e:	60fa      	str	r2, [r7, #12]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d102      	bne.n	800f69a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f694:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f698:	e01b      	b.n	800f6d2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f69e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d0ef      	beq.n	800f68a <SDMMC_GetCmdResp3+0x1e>
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1ea      	bne.n	800f68a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6b8:	f003 0304 	and.w	r3, r3, #4
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d004      	beq.n	800f6ca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2204      	movs	r2, #4
 800f6c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f6c6:	2304      	movs	r3, #4
 800f6c8:	e003      	b.n	800f6d2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	22c5      	movs	r2, #197	; 0xc5
 800f6ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f6d0:	2300      	movs	r3, #0
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3714      	adds	r7, #20
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	20000000 	.word	0x20000000
 800f6e4:	10624dd3 	.word	0x10624dd3

0800f6e8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b088      	sub	sp, #32
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	607a      	str	r2, [r7, #4]
 800f6f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f6f6:	4b35      	ldr	r3, [pc, #212]	; (800f7cc <SDMMC_GetCmdResp6+0xe4>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a35      	ldr	r2, [pc, #212]	; (800f7d0 <SDMMC_GetCmdResp6+0xe8>)
 800f6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800f700:	0a5b      	lsrs	r3, r3, #9
 800f702:	f241 3288 	movw	r2, #5000	; 0x1388
 800f706:	fb02 f303 	mul.w	r3, r2, r3
 800f70a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	1e5a      	subs	r2, r3, #1
 800f710:	61fa      	str	r2, [r7, #28]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d102      	bne.n	800f71c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f716:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f71a:	e052      	b.n	800f7c2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f720:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f722:	69bb      	ldr	r3, [r7, #24]
 800f724:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d0ef      	beq.n	800f70c <SDMMC_GetCmdResp6+0x24>
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f732:	2b00      	cmp	r3, #0
 800f734:	d1ea      	bne.n	800f70c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f73a:	f003 0304 	and.w	r3, r3, #4
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d004      	beq.n	800f74c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2204      	movs	r2, #4
 800f746:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f748:	2304      	movs	r3, #4
 800f74a:	e03a      	b.n	800f7c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f750:	f003 0301 	and.w	r3, r3, #1
 800f754:	2b00      	cmp	r3, #0
 800f756:	d004      	beq.n	800f762 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2201      	movs	r2, #1
 800f75c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f75e:	2301      	movs	r3, #1
 800f760:	e02f      	b.n	800f7c2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f762:	68f8      	ldr	r0, [r7, #12]
 800f764:	f7ff fba0 	bl	800eea8 <SDIO_GetCommandResponse>
 800f768:	4603      	mov	r3, r0
 800f76a:	461a      	mov	r2, r3
 800f76c:	7afb      	ldrb	r3, [r7, #11]
 800f76e:	4293      	cmp	r3, r2
 800f770:	d001      	beq.n	800f776 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f772:	2301      	movs	r3, #1
 800f774:	e025      	b.n	800f7c2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	22c5      	movs	r2, #197	; 0xc5
 800f77a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f77c:	2100      	movs	r1, #0
 800f77e:	68f8      	ldr	r0, [r7, #12]
 800f780:	f7ff fb9f 	bl	800eec2 <SDIO_GetResponse>
 800f784:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d106      	bne.n	800f79e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	0c1b      	lsrs	r3, r3, #16
 800f794:	b29a      	uxth	r2, r3
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f79a:	2300      	movs	r3, #0
 800f79c:	e011      	b.n	800f7c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d002      	beq.n	800f7ae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f7a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f7ac:	e009      	b.n	800f7c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d002      	beq.n	800f7be <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f7b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f7bc:	e001      	b.n	800f7c2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f7be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3720      	adds	r7, #32
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	20000000 	.word	0x20000000
 800f7d0:	10624dd3 	.word	0x10624dd3

0800f7d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b085      	sub	sp, #20
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f7dc:	4b22      	ldr	r3, [pc, #136]	; (800f868 <SDMMC_GetCmdResp7+0x94>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4a22      	ldr	r2, [pc, #136]	; (800f86c <SDMMC_GetCmdResp7+0x98>)
 800f7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f7e6:	0a5b      	lsrs	r3, r3, #9
 800f7e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7ec:	fb02 f303 	mul.w	r3, r2, r3
 800f7f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	1e5a      	subs	r2, r3, #1
 800f7f6:	60fa      	str	r2, [r7, #12]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d102      	bne.n	800f802 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f7fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f800:	e02c      	b.n	800f85c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f806:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d0ef      	beq.n	800f7f2 <SDMMC_GetCmdResp7+0x1e>
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d1ea      	bne.n	800f7f2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f820:	f003 0304 	and.w	r3, r3, #4
 800f824:	2b00      	cmp	r3, #0
 800f826:	d004      	beq.n	800f832 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2204      	movs	r2, #4
 800f82c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f82e:	2304      	movs	r3, #4
 800f830:	e014      	b.n	800f85c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f836:	f003 0301 	and.w	r3, r3, #1
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d004      	beq.n	800f848 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2201      	movs	r2, #1
 800f842:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f844:	2301      	movs	r3, #1
 800f846:	e009      	b.n	800f85c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f84c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f850:	2b00      	cmp	r3, #0
 800f852:	d002      	beq.n	800f85a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2240      	movs	r2, #64	; 0x40
 800f858:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f85a:	2300      	movs	r3, #0
  
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3714      	adds	r7, #20
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr
 800f868:	20000000 	.word	0x20000000
 800f86c:	10624dd3 	.word	0x10624dd3

0800f870 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f870:	b084      	sub	sp, #16
 800f872:	b580      	push	{r7, lr}
 800f874:	b084      	sub	sp, #16
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
 800f87a:	f107 001c 	add.w	r0, r7, #28
 800f87e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f884:	2b01      	cmp	r3, #1
 800f886:	d122      	bne.n	800f8ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f88c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f89c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8a0:	687a      	ldr	r2, [r7, #4]
 800f8a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	68db      	ldr	r3, [r3, #12]
 800f8a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	d105      	bne.n	800f8c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f001 fb16 	bl	8010ef4 <USB_CoreReset>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	73fb      	strb	r3, [r7, #15]
 800f8cc:	e01a      	b.n	800f904 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	68db      	ldr	r3, [r3, #12]
 800f8d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f001 fb0a 	bl	8010ef4 <USB_CoreReset>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f8e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d106      	bne.n	800f8f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	639a      	str	r2, [r3, #56]	; 0x38
 800f8f6:	e005      	b.n	800f904 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f906:	2b01      	cmp	r3, #1
 800f908:	d10b      	bne.n	800f922 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	689b      	ldr	r3, [r3, #8]
 800f90e:	f043 0206 	orr.w	r2, r3, #6
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	f043 0220 	orr.w	r2, r3, #32
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f922:	7bfb      	ldrb	r3, [r7, #15]
}
 800f924:	4618      	mov	r0, r3
 800f926:	3710      	adds	r7, #16
 800f928:	46bd      	mov	sp, r7
 800f92a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f92e:	b004      	add	sp, #16
 800f930:	4770      	bx	lr
	...

0800f934 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f934:	b480      	push	{r7}
 800f936:	b087      	sub	sp, #28
 800f938:	af00      	add	r7, sp, #0
 800f93a:	60f8      	str	r0, [r7, #12]
 800f93c:	60b9      	str	r1, [r7, #8]
 800f93e:	4613      	mov	r3, r2
 800f940:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f942:	79fb      	ldrb	r3, [r7, #7]
 800f944:	2b02      	cmp	r3, #2
 800f946:	d165      	bne.n	800fa14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	4a41      	ldr	r2, [pc, #260]	; (800fa50 <USB_SetTurnaroundTime+0x11c>)
 800f94c:	4293      	cmp	r3, r2
 800f94e:	d906      	bls.n	800f95e <USB_SetTurnaroundTime+0x2a>
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	4a40      	ldr	r2, [pc, #256]	; (800fa54 <USB_SetTurnaroundTime+0x120>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d202      	bcs.n	800f95e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f958:	230f      	movs	r3, #15
 800f95a:	617b      	str	r3, [r7, #20]
 800f95c:	e062      	b.n	800fa24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	4a3c      	ldr	r2, [pc, #240]	; (800fa54 <USB_SetTurnaroundTime+0x120>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d306      	bcc.n	800f974 <USB_SetTurnaroundTime+0x40>
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	4a3b      	ldr	r2, [pc, #236]	; (800fa58 <USB_SetTurnaroundTime+0x124>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d202      	bcs.n	800f974 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f96e:	230e      	movs	r3, #14
 800f970:	617b      	str	r3, [r7, #20]
 800f972:	e057      	b.n	800fa24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	4a38      	ldr	r2, [pc, #224]	; (800fa58 <USB_SetTurnaroundTime+0x124>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d306      	bcc.n	800f98a <USB_SetTurnaroundTime+0x56>
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	4a37      	ldr	r2, [pc, #220]	; (800fa5c <USB_SetTurnaroundTime+0x128>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d202      	bcs.n	800f98a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f984:	230d      	movs	r3, #13
 800f986:	617b      	str	r3, [r7, #20]
 800f988:	e04c      	b.n	800fa24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	4a33      	ldr	r2, [pc, #204]	; (800fa5c <USB_SetTurnaroundTime+0x128>)
 800f98e:	4293      	cmp	r3, r2
 800f990:	d306      	bcc.n	800f9a0 <USB_SetTurnaroundTime+0x6c>
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	4a32      	ldr	r2, [pc, #200]	; (800fa60 <USB_SetTurnaroundTime+0x12c>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d802      	bhi.n	800f9a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f99a:	230c      	movs	r3, #12
 800f99c:	617b      	str	r3, [r7, #20]
 800f99e:	e041      	b.n	800fa24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	4a2f      	ldr	r2, [pc, #188]	; (800fa60 <USB_SetTurnaroundTime+0x12c>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d906      	bls.n	800f9b6 <USB_SetTurnaroundTime+0x82>
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	4a2e      	ldr	r2, [pc, #184]	; (800fa64 <USB_SetTurnaroundTime+0x130>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d802      	bhi.n	800f9b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f9b0:	230b      	movs	r3, #11
 800f9b2:	617b      	str	r3, [r7, #20]
 800f9b4:	e036      	b.n	800fa24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	4a2a      	ldr	r2, [pc, #168]	; (800fa64 <USB_SetTurnaroundTime+0x130>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d906      	bls.n	800f9cc <USB_SetTurnaroundTime+0x98>
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	4a29      	ldr	r2, [pc, #164]	; (800fa68 <USB_SetTurnaroundTime+0x134>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d802      	bhi.n	800f9cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f9c6:	230a      	movs	r3, #10
 800f9c8:	617b      	str	r3, [r7, #20]
 800f9ca:	e02b      	b.n	800fa24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	4a26      	ldr	r2, [pc, #152]	; (800fa68 <USB_SetTurnaroundTime+0x134>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d906      	bls.n	800f9e2 <USB_SetTurnaroundTime+0xae>
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	4a25      	ldr	r2, [pc, #148]	; (800fa6c <USB_SetTurnaroundTime+0x138>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d202      	bcs.n	800f9e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f9dc:	2309      	movs	r3, #9
 800f9de:	617b      	str	r3, [r7, #20]
 800f9e0:	e020      	b.n	800fa24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	4a21      	ldr	r2, [pc, #132]	; (800fa6c <USB_SetTurnaroundTime+0x138>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d306      	bcc.n	800f9f8 <USB_SetTurnaroundTime+0xc4>
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	4a20      	ldr	r2, [pc, #128]	; (800fa70 <USB_SetTurnaroundTime+0x13c>)
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d802      	bhi.n	800f9f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f9f2:	2308      	movs	r3, #8
 800f9f4:	617b      	str	r3, [r7, #20]
 800f9f6:	e015      	b.n	800fa24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	4a1d      	ldr	r2, [pc, #116]	; (800fa70 <USB_SetTurnaroundTime+0x13c>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d906      	bls.n	800fa0e <USB_SetTurnaroundTime+0xda>
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	4a1c      	ldr	r2, [pc, #112]	; (800fa74 <USB_SetTurnaroundTime+0x140>)
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d202      	bcs.n	800fa0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fa08:	2307      	movs	r3, #7
 800fa0a:	617b      	str	r3, [r7, #20]
 800fa0c:	e00a      	b.n	800fa24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fa0e:	2306      	movs	r3, #6
 800fa10:	617b      	str	r3, [r7, #20]
 800fa12:	e007      	b.n	800fa24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fa14:	79fb      	ldrb	r3, [r7, #7]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d102      	bne.n	800fa20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fa1a:	2309      	movs	r3, #9
 800fa1c:	617b      	str	r3, [r7, #20]
 800fa1e:	e001      	b.n	800fa24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fa20:	2309      	movs	r3, #9
 800fa22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	68da      	ldr	r2, [r3, #12]
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	029b      	lsls	r3, r3, #10
 800fa38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fa3c:	431a      	orrs	r2, r3
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fa42:	2300      	movs	r3, #0
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	371c      	adds	r7, #28
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr
 800fa50:	00d8acbf 	.word	0x00d8acbf
 800fa54:	00e4e1c0 	.word	0x00e4e1c0
 800fa58:	00f42400 	.word	0x00f42400
 800fa5c:	01067380 	.word	0x01067380
 800fa60:	011a499f 	.word	0x011a499f
 800fa64:	01312cff 	.word	0x01312cff
 800fa68:	014ca43f 	.word	0x014ca43f
 800fa6c:	016e3600 	.word	0x016e3600
 800fa70:	01a6ab1f 	.word	0x01a6ab1f
 800fa74:	01e84800 	.word	0x01e84800

0800fa78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	689b      	ldr	r3, [r3, #8]
 800fa84:	f043 0201 	orr.w	r2, r3, #1
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fa8c:	2300      	movs	r3, #0
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	370c      	adds	r7, #12
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr

0800fa9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa9a:	b480      	push	{r7}
 800fa9c:	b083      	sub	sp, #12
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	689b      	ldr	r3, [r3, #8]
 800faa6:	f023 0201 	bic.w	r2, r3, #1
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800faae:	2300      	movs	r3, #0
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	370c      	adds	r7, #12
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr

0800fabc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	460b      	mov	r3, r1
 800fac6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fac8:	2300      	movs	r3, #0
 800faca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	68db      	ldr	r3, [r3, #12]
 800fad0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fad8:	78fb      	ldrb	r3, [r7, #3]
 800fada:	2b01      	cmp	r3, #1
 800fadc:	d115      	bne.n	800fb0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800faea:	2001      	movs	r0, #1
 800faec:	f7f7 f812 	bl	8006b14 <HAL_Delay>
      ms++;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	3301      	adds	r3, #1
 800faf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f001 f96c 	bl	8010dd4 <USB_GetMode>
 800fafc:	4603      	mov	r3, r0
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	d01e      	beq.n	800fb40 <USB_SetCurrentMode+0x84>
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	2b31      	cmp	r3, #49	; 0x31
 800fb06:	d9f0      	bls.n	800faea <USB_SetCurrentMode+0x2e>
 800fb08:	e01a      	b.n	800fb40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fb0a:	78fb      	ldrb	r3, [r7, #3]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d115      	bne.n	800fb3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fb1c:	2001      	movs	r0, #1
 800fb1e:	f7f6 fff9 	bl	8006b14 <HAL_Delay>
      ms++;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	3301      	adds	r3, #1
 800fb26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f001 f953 	bl	8010dd4 <USB_GetMode>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d005      	beq.n	800fb40 <USB_SetCurrentMode+0x84>
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2b31      	cmp	r3, #49	; 0x31
 800fb38:	d9f0      	bls.n	800fb1c <USB_SetCurrentMode+0x60>
 800fb3a:	e001      	b.n	800fb40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	e005      	b.n	800fb4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2b32      	cmp	r3, #50	; 0x32
 800fb44:	d101      	bne.n	800fb4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fb46:	2301      	movs	r3, #1
 800fb48:	e000      	b.n	800fb4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fb4a:	2300      	movs	r3, #0
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3710      	adds	r7, #16
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fb54:	b084      	sub	sp, #16
 800fb56:	b580      	push	{r7, lr}
 800fb58:	b086      	sub	sp, #24
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
 800fb5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fb62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fb66:	2300      	movs	r3, #0
 800fb68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fb6e:	2300      	movs	r3, #0
 800fb70:	613b      	str	r3, [r7, #16]
 800fb72:	e009      	b.n	800fb88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fb74:	687a      	ldr	r2, [r7, #4]
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	3340      	adds	r3, #64	; 0x40
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	4413      	add	r3, r2
 800fb7e:	2200      	movs	r2, #0
 800fb80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	3301      	adds	r3, #1
 800fb86:	613b      	str	r3, [r7, #16]
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	2b0e      	cmp	r3, #14
 800fb8c:	d9f2      	bls.n	800fb74 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fb8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d11c      	bne.n	800fbce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fba2:	f043 0302 	orr.w	r3, r3, #2
 800fba6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	601a      	str	r2, [r3, #0]
 800fbcc:	e005      	b.n	800fbda <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbec:	4619      	mov	r1, r3
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	680b      	ldr	r3, [r1, #0]
 800fbf8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d10c      	bne.n	800fc1a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d104      	bne.n	800fc10 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fc06:	2100      	movs	r1, #0
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 f945 	bl	800fe98 <USB_SetDevSpeed>
 800fc0e:	e008      	b.n	800fc22 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fc10:	2101      	movs	r1, #1
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f000 f940 	bl	800fe98 <USB_SetDevSpeed>
 800fc18:	e003      	b.n	800fc22 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fc1a:	2103      	movs	r1, #3
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f000 f93b 	bl	800fe98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fc22:	2110      	movs	r1, #16
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f000 f8f3 	bl	800fe10 <USB_FlushTxFifo>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d001      	beq.n	800fc34 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800fc30:	2301      	movs	r3, #1
 800fc32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f000 f90f 	bl	800fe58 <USB_FlushRxFifo>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d001      	beq.n	800fc44 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800fc40:	2301      	movs	r3, #1
 800fc42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc56:	461a      	mov	r2, r3
 800fc58:	2300      	movs	r3, #0
 800fc5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc62:	461a      	mov	r2, r3
 800fc64:	2300      	movs	r3, #0
 800fc66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc68:	2300      	movs	r3, #0
 800fc6a:	613b      	str	r3, [r7, #16]
 800fc6c:	e043      	b.n	800fcf6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	015a      	lsls	r2, r3, #5
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	4413      	add	r3, r2
 800fc76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc84:	d118      	bne.n	800fcb8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d10a      	bne.n	800fca2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	015a      	lsls	r2, r3, #5
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	4413      	add	r3, r2
 800fc94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc98:	461a      	mov	r2, r3
 800fc9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fc9e:	6013      	str	r3, [r2, #0]
 800fca0:	e013      	b.n	800fcca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	015a      	lsls	r2, r3, #5
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	4413      	add	r3, r2
 800fcaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcae:	461a      	mov	r2, r3
 800fcb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fcb4:	6013      	str	r3, [r2, #0]
 800fcb6:	e008      	b.n	800fcca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	015a      	lsls	r2, r3, #5
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	4413      	add	r3, r2
 800fcc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	015a      	lsls	r2, r3, #5
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	4413      	add	r3, r2
 800fcd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	2300      	movs	r3, #0
 800fcda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	015a      	lsls	r2, r3, #5
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	4413      	add	r3, r2
 800fce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fce8:	461a      	mov	r2, r3
 800fcea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fcee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	613b      	str	r3, [r7, #16]
 800fcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf8:	693a      	ldr	r2, [r7, #16]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d3b7      	bcc.n	800fc6e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fcfe:	2300      	movs	r3, #0
 800fd00:	613b      	str	r3, [r7, #16]
 800fd02:	e043      	b.n	800fd8c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	015a      	lsls	r2, r3, #5
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	4413      	add	r3, r2
 800fd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd1a:	d118      	bne.n	800fd4e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d10a      	bne.n	800fd38 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	015a      	lsls	r2, r3, #5
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	4413      	add	r3, r2
 800fd2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd2e:	461a      	mov	r2, r3
 800fd30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fd34:	6013      	str	r3, [r2, #0]
 800fd36:	e013      	b.n	800fd60 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	015a      	lsls	r2, r3, #5
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	4413      	add	r3, r2
 800fd40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd44:	461a      	mov	r2, r3
 800fd46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fd4a:	6013      	str	r3, [r2, #0]
 800fd4c:	e008      	b.n	800fd60 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	015a      	lsls	r2, r3, #5
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	4413      	add	r3, r2
 800fd56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	015a      	lsls	r2, r3, #5
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	4413      	add	r3, r2
 800fd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	2300      	movs	r3, #0
 800fd70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	015a      	lsls	r2, r3, #5
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	4413      	add	r3, r2
 800fd7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd7e:	461a      	mov	r2, r3
 800fd80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fd84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	3301      	adds	r3, #1
 800fd8a:	613b      	str	r3, [r7, #16]
 800fd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8e:	693a      	ldr	r2, [r7, #16]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d3b7      	bcc.n	800fd04 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd9a:	691b      	ldr	r3, [r3, #16]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fda2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fda6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fdb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d105      	bne.n	800fdc8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	699b      	ldr	r3, [r3, #24]
 800fdc0:	f043 0210 	orr.w	r2, r3, #16
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	699a      	ldr	r2, [r3, #24]
 800fdcc:	4b0f      	ldr	r3, [pc, #60]	; (800fe0c <USB_DevInit+0x2b8>)
 800fdce:	4313      	orrs	r3, r2
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d005      	beq.n	800fde6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	699b      	ldr	r3, [r3, #24]
 800fdde:	f043 0208 	orr.w	r2, r3, #8
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fde6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d107      	bne.n	800fdfc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	699b      	ldr	r3, [r3, #24]
 800fdf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fdf4:	f043 0304 	orr.w	r3, r3, #4
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fdfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3718      	adds	r7, #24
 800fe02:	46bd      	mov	sp, r7
 800fe04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe08:	b004      	add	sp, #16
 800fe0a:	4770      	bx	lr
 800fe0c:	803c3800 	.word	0x803c3800

0800fe10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b085      	sub	sp, #20
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	019b      	lsls	r3, r3, #6
 800fe22:	f043 0220 	orr.w	r2, r3, #32
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	60fb      	str	r3, [r7, #12]
 800fe30:	4a08      	ldr	r2, [pc, #32]	; (800fe54 <USB_FlushTxFifo+0x44>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d901      	bls.n	800fe3a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800fe36:	2303      	movs	r3, #3
 800fe38:	e006      	b.n	800fe48 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	691b      	ldr	r3, [r3, #16]
 800fe3e:	f003 0320 	and.w	r3, r3, #32
 800fe42:	2b20      	cmp	r3, #32
 800fe44:	d0f1      	beq.n	800fe2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fe46:	2300      	movs	r3, #0
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3714      	adds	r7, #20
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr
 800fe54:	00030d40 	.word	0x00030d40

0800fe58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b085      	sub	sp, #20
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fe60:	2300      	movs	r3, #0
 800fe62:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2210      	movs	r2, #16
 800fe68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	3301      	adds	r3, #1
 800fe6e:	60fb      	str	r3, [r7, #12]
 800fe70:	4a08      	ldr	r2, [pc, #32]	; (800fe94 <USB_FlushRxFifo+0x3c>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d901      	bls.n	800fe7a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800fe76:	2303      	movs	r3, #3
 800fe78:	e006      	b.n	800fe88 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	691b      	ldr	r3, [r3, #16]
 800fe7e:	f003 0310 	and.w	r3, r3, #16
 800fe82:	2b10      	cmp	r3, #16
 800fe84:	d0f1      	beq.n	800fe6a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fe86:	2300      	movs	r3, #0
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3714      	adds	r7, #20
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr
 800fe94:	00030d40 	.word	0x00030d40

0800fe98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	460b      	mov	r3, r1
 800fea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	78fb      	ldrb	r3, [r7, #3]
 800feb2:	68f9      	ldr	r1, [r7, #12]
 800feb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800feb8:	4313      	orrs	r3, r2
 800feba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800febc:	2300      	movs	r3, #0
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3714      	adds	r7, #20
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr

0800feca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800feca:	b480      	push	{r7}
 800fecc:	b087      	sub	sp, #28
 800fece:	af00      	add	r7, sp, #0
 800fed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fedc:	689b      	ldr	r3, [r3, #8]
 800fede:	f003 0306 	and.w	r3, r3, #6
 800fee2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d102      	bne.n	800fef0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800feea:	2300      	movs	r3, #0
 800feec:	75fb      	strb	r3, [r7, #23]
 800feee:	e00a      	b.n	800ff06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	2b02      	cmp	r3, #2
 800fef4:	d002      	beq.n	800fefc <USB_GetDevSpeed+0x32>
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2b06      	cmp	r3, #6
 800fefa:	d102      	bne.n	800ff02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fefc:	2302      	movs	r3, #2
 800fefe:	75fb      	strb	r3, [r7, #23]
 800ff00:	e001      	b.n	800ff06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ff02:	230f      	movs	r3, #15
 800ff04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ff06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	371c      	adds	r7, #28
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff14:	b480      	push	{r7}
 800ff16:	b085      	sub	sp, #20
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	785b      	ldrb	r3, [r3, #1]
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d13a      	bne.n	800ffa6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff36:	69da      	ldr	r2, [r3, #28]
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	f003 030f 	and.w	r3, r3, #15
 800ff40:	2101      	movs	r1, #1
 800ff42:	fa01 f303 	lsl.w	r3, r1, r3
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	68f9      	ldr	r1, [r7, #12]
 800ff4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff4e:	4313      	orrs	r3, r2
 800ff50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	015a      	lsls	r2, r3, #5
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	4413      	add	r3, r2
 800ff5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d155      	bne.n	8010014 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	015a      	lsls	r2, r3, #5
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	4413      	add	r3, r2
 800ff70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff74:	681a      	ldr	r2, [r3, #0]
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	689b      	ldr	r3, [r3, #8]
 800ff7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	78db      	ldrb	r3, [r3, #3]
 800ff82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ff84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	059b      	lsls	r3, r3, #22
 800ff8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	68ba      	ldr	r2, [r7, #8]
 800ff90:	0151      	lsls	r1, r2, #5
 800ff92:	68fa      	ldr	r2, [r7, #12]
 800ff94:	440a      	add	r2, r1
 800ff96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffa2:	6013      	str	r3, [r2, #0]
 800ffa4:	e036      	b.n	8010014 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffac:	69da      	ldr	r2, [r3, #28]
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	f003 030f 	and.w	r3, r3, #15
 800ffb6:	2101      	movs	r1, #1
 800ffb8:	fa01 f303 	lsl.w	r3, r1, r3
 800ffbc:	041b      	lsls	r3, r3, #16
 800ffbe:	68f9      	ldr	r1, [r7, #12]
 800ffc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	015a      	lsls	r2, r3, #5
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	4413      	add	r3, r2
 800ffd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d11a      	bne.n	8010014 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	015a      	lsls	r2, r3, #5
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	4413      	add	r3, r2
 800ffe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	689b      	ldr	r3, [r3, #8]
 800fff0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	78db      	ldrb	r3, [r3, #3]
 800fff8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fffa:	430b      	orrs	r3, r1
 800fffc:	4313      	orrs	r3, r2
 800fffe:	68ba      	ldr	r2, [r7, #8]
 8010000:	0151      	lsls	r1, r2, #5
 8010002:	68fa      	ldr	r2, [r7, #12]
 8010004:	440a      	add	r2, r1
 8010006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801000a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801000e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010012:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010014:	2300      	movs	r3, #0
}
 8010016:	4618      	mov	r0, r3
 8010018:	3714      	adds	r7, #20
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr
	...

08010024 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010024:	b480      	push	{r7}
 8010026:	b085      	sub	sp, #20
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	785b      	ldrb	r3, [r3, #1]
 801003c:	2b01      	cmp	r3, #1
 801003e:	d161      	bne.n	8010104 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	015a      	lsls	r2, r3, #5
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	4413      	add	r3, r2
 8010048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010056:	d11f      	bne.n	8010098 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	015a      	lsls	r2, r3, #5
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	4413      	add	r3, r2
 8010060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	68ba      	ldr	r2, [r7, #8]
 8010068:	0151      	lsls	r1, r2, #5
 801006a:	68fa      	ldr	r2, [r7, #12]
 801006c:	440a      	add	r2, r1
 801006e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010072:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010076:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	015a      	lsls	r2, r3, #5
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	4413      	add	r3, r2
 8010080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	68ba      	ldr	r2, [r7, #8]
 8010088:	0151      	lsls	r1, r2, #5
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	440a      	add	r2, r1
 801008e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010096:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801009e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	f003 030f 	and.w	r3, r3, #15
 80100a8:	2101      	movs	r1, #1
 80100aa:	fa01 f303 	lsl.w	r3, r1, r3
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	43db      	mvns	r3, r3
 80100b2:	68f9      	ldr	r1, [r7, #12]
 80100b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100b8:	4013      	ands	r3, r2
 80100ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100c2:	69da      	ldr	r2, [r3, #28]
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	f003 030f 	and.w	r3, r3, #15
 80100cc:	2101      	movs	r1, #1
 80100ce:	fa01 f303 	lsl.w	r3, r1, r3
 80100d2:	b29b      	uxth	r3, r3
 80100d4:	43db      	mvns	r3, r3
 80100d6:	68f9      	ldr	r1, [r7, #12]
 80100d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100dc:	4013      	ands	r3, r2
 80100de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	015a      	lsls	r2, r3, #5
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	4413      	add	r3, r2
 80100e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	0159      	lsls	r1, r3, #5
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	440b      	add	r3, r1
 80100f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100fa:	4619      	mov	r1, r3
 80100fc:	4b35      	ldr	r3, [pc, #212]	; (80101d4 <USB_DeactivateEndpoint+0x1b0>)
 80100fe:	4013      	ands	r3, r2
 8010100:	600b      	str	r3, [r1, #0]
 8010102:	e060      	b.n	80101c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	015a      	lsls	r2, r3, #5
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	4413      	add	r3, r2
 801010c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801011a:	d11f      	bne.n	801015c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	015a      	lsls	r2, r3, #5
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	4413      	add	r3, r2
 8010124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	68ba      	ldr	r2, [r7, #8]
 801012c:	0151      	lsls	r1, r2, #5
 801012e:	68fa      	ldr	r2, [r7, #12]
 8010130:	440a      	add	r2, r1
 8010132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801013a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	015a      	lsls	r2, r3, #5
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	4413      	add	r3, r2
 8010144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	68ba      	ldr	r2, [r7, #8]
 801014c:	0151      	lsls	r1, r2, #5
 801014e:	68fa      	ldr	r2, [r7, #12]
 8010150:	440a      	add	r2, r1
 8010152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801015a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	f003 030f 	and.w	r3, r3, #15
 801016c:	2101      	movs	r1, #1
 801016e:	fa01 f303 	lsl.w	r3, r1, r3
 8010172:	041b      	lsls	r3, r3, #16
 8010174:	43db      	mvns	r3, r3
 8010176:	68f9      	ldr	r1, [r7, #12]
 8010178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801017c:	4013      	ands	r3, r2
 801017e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010186:	69da      	ldr	r2, [r3, #28]
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	f003 030f 	and.w	r3, r3, #15
 8010190:	2101      	movs	r1, #1
 8010192:	fa01 f303 	lsl.w	r3, r1, r3
 8010196:	041b      	lsls	r3, r3, #16
 8010198:	43db      	mvns	r3, r3
 801019a:	68f9      	ldr	r1, [r7, #12]
 801019c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101a0:	4013      	ands	r3, r2
 80101a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	015a      	lsls	r2, r3, #5
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	4413      	add	r3, r2
 80101ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	0159      	lsls	r1, r3, #5
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	440b      	add	r3, r1
 80101ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101be:	4619      	mov	r1, r3
 80101c0:	4b05      	ldr	r3, [pc, #20]	; (80101d8 <USB_DeactivateEndpoint+0x1b4>)
 80101c2:	4013      	ands	r3, r2
 80101c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80101c6:	2300      	movs	r3, #0
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3714      	adds	r7, #20
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr
 80101d4:	ec337800 	.word	0xec337800
 80101d8:	eff37800 	.word	0xeff37800

080101dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b08a      	sub	sp, #40	; 0x28
 80101e0:	af02      	add	r7, sp, #8
 80101e2:	60f8      	str	r0, [r7, #12]
 80101e4:	60b9      	str	r1, [r7, #8]
 80101e6:	4613      	mov	r3, r2
 80101e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	785b      	ldrb	r3, [r3, #1]
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	f040 815c 	bne.w	80104b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	695b      	ldr	r3, [r3, #20]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d132      	bne.n	801026c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	015a      	lsls	r2, r3, #5
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	4413      	add	r3, r2
 801020e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010212:	691b      	ldr	r3, [r3, #16]
 8010214:	69ba      	ldr	r2, [r7, #24]
 8010216:	0151      	lsls	r1, r2, #5
 8010218:	69fa      	ldr	r2, [r7, #28]
 801021a:	440a      	add	r2, r1
 801021c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010220:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010224:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801022a:	69bb      	ldr	r3, [r7, #24]
 801022c:	015a      	lsls	r2, r3, #5
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	4413      	add	r3, r2
 8010232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010236:	691b      	ldr	r3, [r3, #16]
 8010238:	69ba      	ldr	r2, [r7, #24]
 801023a:	0151      	lsls	r1, r2, #5
 801023c:	69fa      	ldr	r2, [r7, #28]
 801023e:	440a      	add	r2, r1
 8010240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801024a:	69bb      	ldr	r3, [r7, #24]
 801024c:	015a      	lsls	r2, r3, #5
 801024e:	69fb      	ldr	r3, [r7, #28]
 8010250:	4413      	add	r3, r2
 8010252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010256:	691b      	ldr	r3, [r3, #16]
 8010258:	69ba      	ldr	r2, [r7, #24]
 801025a:	0151      	lsls	r1, r2, #5
 801025c:	69fa      	ldr	r2, [r7, #28]
 801025e:	440a      	add	r2, r1
 8010260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010264:	0cdb      	lsrs	r3, r3, #19
 8010266:	04db      	lsls	r3, r3, #19
 8010268:	6113      	str	r3, [r2, #16]
 801026a:	e074      	b.n	8010356 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	015a      	lsls	r2, r3, #5
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	4413      	add	r3, r2
 8010274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010278:	691b      	ldr	r3, [r3, #16]
 801027a:	69ba      	ldr	r2, [r7, #24]
 801027c:	0151      	lsls	r1, r2, #5
 801027e:	69fa      	ldr	r2, [r7, #28]
 8010280:	440a      	add	r2, r1
 8010282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010286:	0cdb      	lsrs	r3, r3, #19
 8010288:	04db      	lsls	r3, r3, #19
 801028a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801028c:	69bb      	ldr	r3, [r7, #24]
 801028e:	015a      	lsls	r2, r3, #5
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	4413      	add	r3, r2
 8010294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010298:	691b      	ldr	r3, [r3, #16]
 801029a:	69ba      	ldr	r2, [r7, #24]
 801029c:	0151      	lsls	r1, r2, #5
 801029e:	69fa      	ldr	r2, [r7, #28]
 80102a0:	440a      	add	r2, r1
 80102a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80102aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80102ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80102b0:	69bb      	ldr	r3, [r7, #24]
 80102b2:	015a      	lsls	r2, r3, #5
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	4413      	add	r3, r2
 80102b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	6959      	ldr	r1, [r3, #20]
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	689b      	ldr	r3, [r3, #8]
 80102c6:	440b      	add	r3, r1
 80102c8:	1e59      	subs	r1, r3, #1
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	689b      	ldr	r3, [r3, #8]
 80102ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80102d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80102d4:	4b9d      	ldr	r3, [pc, #628]	; (801054c <USB_EPStartXfer+0x370>)
 80102d6:	400b      	ands	r3, r1
 80102d8:	69b9      	ldr	r1, [r7, #24]
 80102da:	0148      	lsls	r0, r1, #5
 80102dc:	69f9      	ldr	r1, [r7, #28]
 80102de:	4401      	add	r1, r0
 80102e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80102e4:	4313      	orrs	r3, r2
 80102e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80102e8:	69bb      	ldr	r3, [r7, #24]
 80102ea:	015a      	lsls	r2, r3, #5
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	4413      	add	r3, r2
 80102f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102f4:	691a      	ldr	r2, [r3, #16]
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	695b      	ldr	r3, [r3, #20]
 80102fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102fe:	69b9      	ldr	r1, [r7, #24]
 8010300:	0148      	lsls	r0, r1, #5
 8010302:	69f9      	ldr	r1, [r7, #28]
 8010304:	4401      	add	r1, r0
 8010306:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801030a:	4313      	orrs	r3, r2
 801030c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	78db      	ldrb	r3, [r3, #3]
 8010312:	2b01      	cmp	r3, #1
 8010314:	d11f      	bne.n	8010356 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010316:	69bb      	ldr	r3, [r7, #24]
 8010318:	015a      	lsls	r2, r3, #5
 801031a:	69fb      	ldr	r3, [r7, #28]
 801031c:	4413      	add	r3, r2
 801031e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010322:	691b      	ldr	r3, [r3, #16]
 8010324:	69ba      	ldr	r2, [r7, #24]
 8010326:	0151      	lsls	r1, r2, #5
 8010328:	69fa      	ldr	r2, [r7, #28]
 801032a:	440a      	add	r2, r1
 801032c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010330:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010334:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	015a      	lsls	r2, r3, #5
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	4413      	add	r3, r2
 801033e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010342:	691b      	ldr	r3, [r3, #16]
 8010344:	69ba      	ldr	r2, [r7, #24]
 8010346:	0151      	lsls	r1, r2, #5
 8010348:	69fa      	ldr	r2, [r7, #28]
 801034a:	440a      	add	r2, r1
 801034c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010350:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010354:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010356:	79fb      	ldrb	r3, [r7, #7]
 8010358:	2b01      	cmp	r3, #1
 801035a:	d14b      	bne.n	80103f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	691b      	ldr	r3, [r3, #16]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d009      	beq.n	8010378 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	015a      	lsls	r2, r3, #5
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	4413      	add	r3, r2
 801036c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010370:	461a      	mov	r2, r3
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	691b      	ldr	r3, [r3, #16]
 8010376:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	78db      	ldrb	r3, [r3, #3]
 801037c:	2b01      	cmp	r3, #1
 801037e:	d128      	bne.n	80103d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010380:	69fb      	ldr	r3, [r7, #28]
 8010382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801038c:	2b00      	cmp	r3, #0
 801038e:	d110      	bne.n	80103b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	015a      	lsls	r2, r3, #5
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	4413      	add	r3, r2
 8010398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	69ba      	ldr	r2, [r7, #24]
 80103a0:	0151      	lsls	r1, r2, #5
 80103a2:	69fa      	ldr	r2, [r7, #28]
 80103a4:	440a      	add	r2, r1
 80103a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80103ae:	6013      	str	r3, [r2, #0]
 80103b0:	e00f      	b.n	80103d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80103b2:	69bb      	ldr	r3, [r7, #24]
 80103b4:	015a      	lsls	r2, r3, #5
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	4413      	add	r3, r2
 80103ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	69ba      	ldr	r2, [r7, #24]
 80103c2:	0151      	lsls	r1, r2, #5
 80103c4:	69fa      	ldr	r2, [r7, #28]
 80103c6:	440a      	add	r2, r1
 80103c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80103d2:	69bb      	ldr	r3, [r7, #24]
 80103d4:	015a      	lsls	r2, r3, #5
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	4413      	add	r3, r2
 80103da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	69ba      	ldr	r2, [r7, #24]
 80103e2:	0151      	lsls	r1, r2, #5
 80103e4:	69fa      	ldr	r2, [r7, #28]
 80103e6:	440a      	add	r2, r1
 80103e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80103f0:	6013      	str	r3, [r2, #0]
 80103f2:	e12f      	b.n	8010654 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	015a      	lsls	r2, r3, #5
 80103f8:	69fb      	ldr	r3, [r7, #28]
 80103fa:	4413      	add	r3, r2
 80103fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	69ba      	ldr	r2, [r7, #24]
 8010404:	0151      	lsls	r1, r2, #5
 8010406:	69fa      	ldr	r2, [r7, #28]
 8010408:	440a      	add	r2, r1
 801040a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801040e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010412:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	78db      	ldrb	r3, [r3, #3]
 8010418:	2b01      	cmp	r3, #1
 801041a:	d015      	beq.n	8010448 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	695b      	ldr	r3, [r3, #20]
 8010420:	2b00      	cmp	r3, #0
 8010422:	f000 8117 	beq.w	8010654 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010426:	69fb      	ldr	r3, [r7, #28]
 8010428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801042c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	f003 030f 	and.w	r3, r3, #15
 8010436:	2101      	movs	r1, #1
 8010438:	fa01 f303 	lsl.w	r3, r1, r3
 801043c:	69f9      	ldr	r1, [r7, #28]
 801043e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010442:	4313      	orrs	r3, r2
 8010444:	634b      	str	r3, [r1, #52]	; 0x34
 8010446:	e105      	b.n	8010654 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801044e:	689b      	ldr	r3, [r3, #8]
 8010450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010454:	2b00      	cmp	r3, #0
 8010456:	d110      	bne.n	801047a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	015a      	lsls	r2, r3, #5
 801045c:	69fb      	ldr	r3, [r7, #28]
 801045e:	4413      	add	r3, r2
 8010460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	69ba      	ldr	r2, [r7, #24]
 8010468:	0151      	lsls	r1, r2, #5
 801046a:	69fa      	ldr	r2, [r7, #28]
 801046c:	440a      	add	r2, r1
 801046e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010472:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010476:	6013      	str	r3, [r2, #0]
 8010478:	e00f      	b.n	801049a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	015a      	lsls	r2, r3, #5
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	4413      	add	r3, r2
 8010482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	69ba      	ldr	r2, [r7, #24]
 801048a:	0151      	lsls	r1, r2, #5
 801048c:	69fa      	ldr	r2, [r7, #28]
 801048e:	440a      	add	r2, r1
 8010490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010498:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	68d9      	ldr	r1, [r3, #12]
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	781a      	ldrb	r2, [r3, #0]
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	695b      	ldr	r3, [r3, #20]
 80104a6:	b298      	uxth	r0, r3
 80104a8:	79fb      	ldrb	r3, [r7, #7]
 80104aa:	9300      	str	r3, [sp, #0]
 80104ac:	4603      	mov	r3, r0
 80104ae:	68f8      	ldr	r0, [r7, #12]
 80104b0:	f000 fa2b 	bl	801090a <USB_WritePacket>
 80104b4:	e0ce      	b.n	8010654 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	015a      	lsls	r2, r3, #5
 80104ba:	69fb      	ldr	r3, [r7, #28]
 80104bc:	4413      	add	r3, r2
 80104be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104c2:	691b      	ldr	r3, [r3, #16]
 80104c4:	69ba      	ldr	r2, [r7, #24]
 80104c6:	0151      	lsls	r1, r2, #5
 80104c8:	69fa      	ldr	r2, [r7, #28]
 80104ca:	440a      	add	r2, r1
 80104cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104d0:	0cdb      	lsrs	r3, r3, #19
 80104d2:	04db      	lsls	r3, r3, #19
 80104d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80104d6:	69bb      	ldr	r3, [r7, #24]
 80104d8:	015a      	lsls	r2, r3, #5
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	4413      	add	r3, r2
 80104de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104e2:	691b      	ldr	r3, [r3, #16]
 80104e4:	69ba      	ldr	r2, [r7, #24]
 80104e6:	0151      	lsls	r1, r2, #5
 80104e8:	69fa      	ldr	r2, [r7, #28]
 80104ea:	440a      	add	r2, r1
 80104ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80104f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80104f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	695b      	ldr	r3, [r3, #20]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d126      	bne.n	8010550 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010502:	69bb      	ldr	r3, [r7, #24]
 8010504:	015a      	lsls	r2, r3, #5
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	4413      	add	r3, r2
 801050a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801050e:	691a      	ldr	r2, [r3, #16]
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	689b      	ldr	r3, [r3, #8]
 8010514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010518:	69b9      	ldr	r1, [r7, #24]
 801051a:	0148      	lsls	r0, r1, #5
 801051c:	69f9      	ldr	r1, [r7, #28]
 801051e:	4401      	add	r1, r0
 8010520:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010524:	4313      	orrs	r3, r2
 8010526:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	015a      	lsls	r2, r3, #5
 801052c:	69fb      	ldr	r3, [r7, #28]
 801052e:	4413      	add	r3, r2
 8010530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010534:	691b      	ldr	r3, [r3, #16]
 8010536:	69ba      	ldr	r2, [r7, #24]
 8010538:	0151      	lsls	r1, r2, #5
 801053a:	69fa      	ldr	r2, [r7, #28]
 801053c:	440a      	add	r2, r1
 801053e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010546:	6113      	str	r3, [r2, #16]
 8010548:	e036      	b.n	80105b8 <USB_EPStartXfer+0x3dc>
 801054a:	bf00      	nop
 801054c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	695a      	ldr	r2, [r3, #20]
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	689b      	ldr	r3, [r3, #8]
 8010558:	4413      	add	r3, r2
 801055a:	1e5a      	subs	r2, r3, #1
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	689b      	ldr	r3, [r3, #8]
 8010560:	fbb2 f3f3 	udiv	r3, r2, r3
 8010564:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	015a      	lsls	r2, r3, #5
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	4413      	add	r3, r2
 801056e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010572:	691a      	ldr	r2, [r3, #16]
 8010574:	8afb      	ldrh	r3, [r7, #22]
 8010576:	04d9      	lsls	r1, r3, #19
 8010578:	4b39      	ldr	r3, [pc, #228]	; (8010660 <USB_EPStartXfer+0x484>)
 801057a:	400b      	ands	r3, r1
 801057c:	69b9      	ldr	r1, [r7, #24]
 801057e:	0148      	lsls	r0, r1, #5
 8010580:	69f9      	ldr	r1, [r7, #28]
 8010582:	4401      	add	r1, r0
 8010584:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010588:	4313      	orrs	r3, r2
 801058a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801058c:	69bb      	ldr	r3, [r7, #24]
 801058e:	015a      	lsls	r2, r3, #5
 8010590:	69fb      	ldr	r3, [r7, #28]
 8010592:	4413      	add	r3, r2
 8010594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010598:	691a      	ldr	r2, [r3, #16]
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	689b      	ldr	r3, [r3, #8]
 801059e:	8af9      	ldrh	r1, [r7, #22]
 80105a0:	fb01 f303 	mul.w	r3, r1, r3
 80105a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105a8:	69b9      	ldr	r1, [r7, #24]
 80105aa:	0148      	lsls	r0, r1, #5
 80105ac:	69f9      	ldr	r1, [r7, #28]
 80105ae:	4401      	add	r1, r0
 80105b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80105b4:	4313      	orrs	r3, r2
 80105b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80105b8:	79fb      	ldrb	r3, [r7, #7]
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	d10d      	bne.n	80105da <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	68db      	ldr	r3, [r3, #12]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d009      	beq.n	80105da <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	68d9      	ldr	r1, [r3, #12]
 80105ca:	69bb      	ldr	r3, [r7, #24]
 80105cc:	015a      	lsls	r2, r3, #5
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	4413      	add	r3, r2
 80105d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105d6:	460a      	mov	r2, r1
 80105d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	78db      	ldrb	r3, [r3, #3]
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d128      	bne.n	8010634 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80105e2:	69fb      	ldr	r3, [r7, #28]
 80105e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105e8:	689b      	ldr	r3, [r3, #8]
 80105ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d110      	bne.n	8010614 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80105f2:	69bb      	ldr	r3, [r7, #24]
 80105f4:	015a      	lsls	r2, r3, #5
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	4413      	add	r3, r2
 80105fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	69ba      	ldr	r2, [r7, #24]
 8010602:	0151      	lsls	r1, r2, #5
 8010604:	69fa      	ldr	r2, [r7, #28]
 8010606:	440a      	add	r2, r1
 8010608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801060c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010610:	6013      	str	r3, [r2, #0]
 8010612:	e00f      	b.n	8010634 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010614:	69bb      	ldr	r3, [r7, #24]
 8010616:	015a      	lsls	r2, r3, #5
 8010618:	69fb      	ldr	r3, [r7, #28]
 801061a:	4413      	add	r3, r2
 801061c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	69ba      	ldr	r2, [r7, #24]
 8010624:	0151      	lsls	r1, r2, #5
 8010626:	69fa      	ldr	r2, [r7, #28]
 8010628:	440a      	add	r2, r1
 801062a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010632:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010634:	69bb      	ldr	r3, [r7, #24]
 8010636:	015a      	lsls	r2, r3, #5
 8010638:	69fb      	ldr	r3, [r7, #28]
 801063a:	4413      	add	r3, r2
 801063c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	69ba      	ldr	r2, [r7, #24]
 8010644:	0151      	lsls	r1, r2, #5
 8010646:	69fa      	ldr	r2, [r7, #28]
 8010648:	440a      	add	r2, r1
 801064a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801064e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010654:	2300      	movs	r3, #0
}
 8010656:	4618      	mov	r0, r3
 8010658:	3720      	adds	r7, #32
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	1ff80000 	.word	0x1ff80000

08010664 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010664:	b480      	push	{r7}
 8010666:	b087      	sub	sp, #28
 8010668:	af00      	add	r7, sp, #0
 801066a:	60f8      	str	r0, [r7, #12]
 801066c:	60b9      	str	r1, [r7, #8]
 801066e:	4613      	mov	r3, r2
 8010670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	785b      	ldrb	r3, [r3, #1]
 8010680:	2b01      	cmp	r3, #1
 8010682:	f040 80cd 	bne.w	8010820 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	695b      	ldr	r3, [r3, #20]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d132      	bne.n	80106f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	015a      	lsls	r2, r3, #5
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	4413      	add	r3, r2
 8010696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801069a:	691b      	ldr	r3, [r3, #16]
 801069c:	693a      	ldr	r2, [r7, #16]
 801069e:	0151      	lsls	r1, r2, #5
 80106a0:	697a      	ldr	r2, [r7, #20]
 80106a2:	440a      	add	r2, r1
 80106a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80106ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80106b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	015a      	lsls	r2, r3, #5
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	4413      	add	r3, r2
 80106ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106be:	691b      	ldr	r3, [r3, #16]
 80106c0:	693a      	ldr	r2, [r7, #16]
 80106c2:	0151      	lsls	r1, r2, #5
 80106c4:	697a      	ldr	r2, [r7, #20]
 80106c6:	440a      	add	r2, r1
 80106c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80106d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	015a      	lsls	r2, r3, #5
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	4413      	add	r3, r2
 80106da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106de:	691b      	ldr	r3, [r3, #16]
 80106e0:	693a      	ldr	r2, [r7, #16]
 80106e2:	0151      	lsls	r1, r2, #5
 80106e4:	697a      	ldr	r2, [r7, #20]
 80106e6:	440a      	add	r2, r1
 80106e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106ec:	0cdb      	lsrs	r3, r3, #19
 80106ee:	04db      	lsls	r3, r3, #19
 80106f0:	6113      	str	r3, [r2, #16]
 80106f2:	e04e      	b.n	8010792 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	015a      	lsls	r2, r3, #5
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	4413      	add	r3, r2
 80106fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010700:	691b      	ldr	r3, [r3, #16]
 8010702:	693a      	ldr	r2, [r7, #16]
 8010704:	0151      	lsls	r1, r2, #5
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	440a      	add	r2, r1
 801070a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801070e:	0cdb      	lsrs	r3, r3, #19
 8010710:	04db      	lsls	r3, r3, #19
 8010712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	015a      	lsls	r2, r3, #5
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	4413      	add	r3, r2
 801071c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010720:	691b      	ldr	r3, [r3, #16]
 8010722:	693a      	ldr	r2, [r7, #16]
 8010724:	0151      	lsls	r1, r2, #5
 8010726:	697a      	ldr	r2, [r7, #20]
 8010728:	440a      	add	r2, r1
 801072a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801072e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010732:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010736:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	695a      	ldr	r2, [r3, #20]
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	689b      	ldr	r3, [r3, #8]
 8010740:	429a      	cmp	r2, r3
 8010742:	d903      	bls.n	801074c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	689a      	ldr	r2, [r3, #8]
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	015a      	lsls	r2, r3, #5
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	4413      	add	r3, r2
 8010754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010758:	691b      	ldr	r3, [r3, #16]
 801075a:	693a      	ldr	r2, [r7, #16]
 801075c:	0151      	lsls	r1, r2, #5
 801075e:	697a      	ldr	r2, [r7, #20]
 8010760:	440a      	add	r2, r1
 8010762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801076a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	015a      	lsls	r2, r3, #5
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	4413      	add	r3, r2
 8010774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010778:	691a      	ldr	r2, [r3, #16]
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	695b      	ldr	r3, [r3, #20]
 801077e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010782:	6939      	ldr	r1, [r7, #16]
 8010784:	0148      	lsls	r0, r1, #5
 8010786:	6979      	ldr	r1, [r7, #20]
 8010788:	4401      	add	r1, r0
 801078a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801078e:	4313      	orrs	r3, r2
 8010790:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010792:	79fb      	ldrb	r3, [r7, #7]
 8010794:	2b01      	cmp	r3, #1
 8010796:	d11e      	bne.n	80107d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	691b      	ldr	r3, [r3, #16]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d009      	beq.n	80107b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	015a      	lsls	r2, r3, #5
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	4413      	add	r3, r2
 80107a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107ac:	461a      	mov	r2, r3
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	691b      	ldr	r3, [r3, #16]
 80107b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	015a      	lsls	r2, r3, #5
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	4413      	add	r3, r2
 80107bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	693a      	ldr	r2, [r7, #16]
 80107c4:	0151      	lsls	r1, r2, #5
 80107c6:	697a      	ldr	r2, [r7, #20]
 80107c8:	440a      	add	r2, r1
 80107ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80107d2:	6013      	str	r3, [r2, #0]
 80107d4:	e092      	b.n	80108fc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	015a      	lsls	r2, r3, #5
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	4413      	add	r3, r2
 80107de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	693a      	ldr	r2, [r7, #16]
 80107e6:	0151      	lsls	r1, r2, #5
 80107e8:	697a      	ldr	r2, [r7, #20]
 80107ea:	440a      	add	r2, r1
 80107ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80107f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	695b      	ldr	r3, [r3, #20]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d07e      	beq.n	80108fc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	f003 030f 	and.w	r3, r3, #15
 801080e:	2101      	movs	r1, #1
 8010810:	fa01 f303 	lsl.w	r3, r1, r3
 8010814:	6979      	ldr	r1, [r7, #20]
 8010816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801081a:	4313      	orrs	r3, r2
 801081c:	634b      	str	r3, [r1, #52]	; 0x34
 801081e:	e06d      	b.n	80108fc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010820:	693b      	ldr	r3, [r7, #16]
 8010822:	015a      	lsls	r2, r3, #5
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	4413      	add	r3, r2
 8010828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801082c:	691b      	ldr	r3, [r3, #16]
 801082e:	693a      	ldr	r2, [r7, #16]
 8010830:	0151      	lsls	r1, r2, #5
 8010832:	697a      	ldr	r2, [r7, #20]
 8010834:	440a      	add	r2, r1
 8010836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801083a:	0cdb      	lsrs	r3, r3, #19
 801083c:	04db      	lsls	r3, r3, #19
 801083e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	015a      	lsls	r2, r3, #5
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	4413      	add	r3, r2
 8010848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801084c:	691b      	ldr	r3, [r3, #16]
 801084e:	693a      	ldr	r2, [r7, #16]
 8010850:	0151      	lsls	r1, r2, #5
 8010852:	697a      	ldr	r2, [r7, #20]
 8010854:	440a      	add	r2, r1
 8010856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801085a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801085e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010862:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	695b      	ldr	r3, [r3, #20]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d003      	beq.n	8010874 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	689a      	ldr	r2, [r3, #8]
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	015a      	lsls	r2, r3, #5
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	4413      	add	r3, r2
 801087c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010880:	691b      	ldr	r3, [r3, #16]
 8010882:	693a      	ldr	r2, [r7, #16]
 8010884:	0151      	lsls	r1, r2, #5
 8010886:	697a      	ldr	r2, [r7, #20]
 8010888:	440a      	add	r2, r1
 801088a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801088e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010892:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	015a      	lsls	r2, r3, #5
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	4413      	add	r3, r2
 801089c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108a0:	691a      	ldr	r2, [r3, #16]
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	689b      	ldr	r3, [r3, #8]
 80108a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108aa:	6939      	ldr	r1, [r7, #16]
 80108ac:	0148      	lsls	r0, r1, #5
 80108ae:	6979      	ldr	r1, [r7, #20]
 80108b0:	4401      	add	r1, r0
 80108b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80108b6:	4313      	orrs	r3, r2
 80108b8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80108ba:	79fb      	ldrb	r3, [r7, #7]
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d10d      	bne.n	80108dc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	68db      	ldr	r3, [r3, #12]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d009      	beq.n	80108dc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	68d9      	ldr	r1, [r3, #12]
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	015a      	lsls	r2, r3, #5
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	4413      	add	r3, r2
 80108d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108d8:	460a      	mov	r2, r1
 80108da:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	015a      	lsls	r2, r3, #5
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	4413      	add	r3, r2
 80108e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	693a      	ldr	r2, [r7, #16]
 80108ec:	0151      	lsls	r1, r2, #5
 80108ee:	697a      	ldr	r2, [r7, #20]
 80108f0:	440a      	add	r2, r1
 80108f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80108fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80108fc:	2300      	movs	r3, #0
}
 80108fe:	4618      	mov	r0, r3
 8010900:	371c      	adds	r7, #28
 8010902:	46bd      	mov	sp, r7
 8010904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010908:	4770      	bx	lr

0801090a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801090a:	b480      	push	{r7}
 801090c:	b089      	sub	sp, #36	; 0x24
 801090e:	af00      	add	r7, sp, #0
 8010910:	60f8      	str	r0, [r7, #12]
 8010912:	60b9      	str	r1, [r7, #8]
 8010914:	4611      	mov	r1, r2
 8010916:	461a      	mov	r2, r3
 8010918:	460b      	mov	r3, r1
 801091a:	71fb      	strb	r3, [r7, #7]
 801091c:	4613      	mov	r3, r2
 801091e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010928:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801092c:	2b00      	cmp	r3, #0
 801092e:	d123      	bne.n	8010978 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010930:	88bb      	ldrh	r3, [r7, #4]
 8010932:	3303      	adds	r3, #3
 8010934:	089b      	lsrs	r3, r3, #2
 8010936:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010938:	2300      	movs	r3, #0
 801093a:	61bb      	str	r3, [r7, #24]
 801093c:	e018      	b.n	8010970 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801093e:	79fb      	ldrb	r3, [r7, #7]
 8010940:	031a      	lsls	r2, r3, #12
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	4413      	add	r3, r2
 8010946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801094a:	461a      	mov	r2, r3
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010952:	69fb      	ldr	r3, [r7, #28]
 8010954:	3301      	adds	r3, #1
 8010956:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010958:	69fb      	ldr	r3, [r7, #28]
 801095a:	3301      	adds	r3, #1
 801095c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801095e:	69fb      	ldr	r3, [r7, #28]
 8010960:	3301      	adds	r3, #1
 8010962:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	3301      	adds	r3, #1
 8010968:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801096a:	69bb      	ldr	r3, [r7, #24]
 801096c:	3301      	adds	r3, #1
 801096e:	61bb      	str	r3, [r7, #24]
 8010970:	69ba      	ldr	r2, [r7, #24]
 8010972:	693b      	ldr	r3, [r7, #16]
 8010974:	429a      	cmp	r2, r3
 8010976:	d3e2      	bcc.n	801093e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010978:	2300      	movs	r3, #0
}
 801097a:	4618      	mov	r0, r3
 801097c:	3724      	adds	r7, #36	; 0x24
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr

08010986 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010986:	b480      	push	{r7}
 8010988:	b08b      	sub	sp, #44	; 0x2c
 801098a:	af00      	add	r7, sp, #0
 801098c:	60f8      	str	r0, [r7, #12]
 801098e:	60b9      	str	r1, [r7, #8]
 8010990:	4613      	mov	r3, r2
 8010992:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801099c:	88fb      	ldrh	r3, [r7, #6]
 801099e:	089b      	lsrs	r3, r3, #2
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80109a4:	88fb      	ldrh	r3, [r7, #6]
 80109a6:	f003 0303 	and.w	r3, r3, #3
 80109aa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80109ac:	2300      	movs	r3, #0
 80109ae:	623b      	str	r3, [r7, #32]
 80109b0:	e014      	b.n	80109dc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80109b2:	69bb      	ldr	r3, [r7, #24]
 80109b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109b8:	681a      	ldr	r2, [r3, #0]
 80109ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109bc:	601a      	str	r2, [r3, #0]
    pDest++;
 80109be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c0:	3301      	adds	r3, #1
 80109c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80109c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c6:	3301      	adds	r3, #1
 80109c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80109ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109cc:	3301      	adds	r3, #1
 80109ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80109d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d2:	3301      	adds	r3, #1
 80109d4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80109d6:	6a3b      	ldr	r3, [r7, #32]
 80109d8:	3301      	adds	r3, #1
 80109da:	623b      	str	r3, [r7, #32]
 80109dc:	6a3a      	ldr	r2, [r7, #32]
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d3e6      	bcc.n	80109b2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80109e4:	8bfb      	ldrh	r3, [r7, #30]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d01e      	beq.n	8010a28 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80109ea:	2300      	movs	r3, #0
 80109ec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80109ee:	69bb      	ldr	r3, [r7, #24]
 80109f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109f4:	461a      	mov	r2, r3
 80109f6:	f107 0310 	add.w	r3, r7, #16
 80109fa:	6812      	ldr	r2, [r2, #0]
 80109fc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80109fe:	693a      	ldr	r2, [r7, #16]
 8010a00:	6a3b      	ldr	r3, [r7, #32]
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	00db      	lsls	r3, r3, #3
 8010a06:	fa22 f303 	lsr.w	r3, r2, r3
 8010a0a:	b2da      	uxtb	r2, r3
 8010a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0e:	701a      	strb	r2, [r3, #0]
      i++;
 8010a10:	6a3b      	ldr	r3, [r7, #32]
 8010a12:	3301      	adds	r3, #1
 8010a14:	623b      	str	r3, [r7, #32]
      pDest++;
 8010a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a18:	3301      	adds	r3, #1
 8010a1a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010a1c:	8bfb      	ldrh	r3, [r7, #30]
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010a22:	8bfb      	ldrh	r3, [r7, #30]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d1ea      	bne.n	80109fe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	372c      	adds	r7, #44	; 0x2c
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a34:	4770      	bx	lr

08010a36 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010a36:	b480      	push	{r7}
 8010a38:	b085      	sub	sp, #20
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
 8010a3e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	785b      	ldrb	r3, [r3, #1]
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d12c      	bne.n	8010aac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	015a      	lsls	r2, r3, #5
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	4413      	add	r3, r2
 8010a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	db12      	blt.n	8010a8a <USB_EPSetStall+0x54>
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d00f      	beq.n	8010a8a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	015a      	lsls	r2, r3, #5
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	4413      	add	r3, r2
 8010a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	68ba      	ldr	r2, [r7, #8]
 8010a7a:	0151      	lsls	r1, r2, #5
 8010a7c:	68fa      	ldr	r2, [r7, #12]
 8010a7e:	440a      	add	r2, r1
 8010a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010a88:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	015a      	lsls	r2, r3, #5
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	4413      	add	r3, r2
 8010a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	68ba      	ldr	r2, [r7, #8]
 8010a9a:	0151      	lsls	r1, r2, #5
 8010a9c:	68fa      	ldr	r2, [r7, #12]
 8010a9e:	440a      	add	r2, r1
 8010aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010aa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010aa8:	6013      	str	r3, [r2, #0]
 8010aaa:	e02b      	b.n	8010b04 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	015a      	lsls	r2, r3, #5
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	db12      	blt.n	8010ae4 <USB_EPSetStall+0xae>
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d00f      	beq.n	8010ae4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	015a      	lsls	r2, r3, #5
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	4413      	add	r3, r2
 8010acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	68ba      	ldr	r2, [r7, #8]
 8010ad4:	0151      	lsls	r1, r2, #5
 8010ad6:	68fa      	ldr	r2, [r7, #12]
 8010ad8:	440a      	add	r2, r1
 8010ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010ae2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	015a      	lsls	r2, r3, #5
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	4413      	add	r3, r2
 8010aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	68ba      	ldr	r2, [r7, #8]
 8010af4:	0151      	lsls	r1, r2, #5
 8010af6:	68fa      	ldr	r2, [r7, #12]
 8010af8:	440a      	add	r2, r1
 8010afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010afe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010b02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3714      	adds	r7, #20
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr

08010b12 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010b12:	b480      	push	{r7}
 8010b14:	b085      	sub	sp, #20
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	6078      	str	r0, [r7, #4]
 8010b1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	785b      	ldrb	r3, [r3, #1]
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d128      	bne.n	8010b80 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	015a      	lsls	r2, r3, #5
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	4413      	add	r3, r2
 8010b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	68ba      	ldr	r2, [r7, #8]
 8010b3e:	0151      	lsls	r1, r2, #5
 8010b40:	68fa      	ldr	r2, [r7, #12]
 8010b42:	440a      	add	r2, r1
 8010b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010b4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	78db      	ldrb	r3, [r3, #3]
 8010b52:	2b03      	cmp	r3, #3
 8010b54:	d003      	beq.n	8010b5e <USB_EPClearStall+0x4c>
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	78db      	ldrb	r3, [r3, #3]
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	d138      	bne.n	8010bd0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	015a      	lsls	r2, r3, #5
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	4413      	add	r3, r2
 8010b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	68ba      	ldr	r2, [r7, #8]
 8010b6e:	0151      	lsls	r1, r2, #5
 8010b70:	68fa      	ldr	r2, [r7, #12]
 8010b72:	440a      	add	r2, r1
 8010b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b7c:	6013      	str	r3, [r2, #0]
 8010b7e:	e027      	b.n	8010bd0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	015a      	lsls	r2, r3, #5
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	4413      	add	r3, r2
 8010b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	68ba      	ldr	r2, [r7, #8]
 8010b90:	0151      	lsls	r1, r2, #5
 8010b92:	68fa      	ldr	r2, [r7, #12]
 8010b94:	440a      	add	r2, r1
 8010b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010b9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	78db      	ldrb	r3, [r3, #3]
 8010ba4:	2b03      	cmp	r3, #3
 8010ba6:	d003      	beq.n	8010bb0 <USB_EPClearStall+0x9e>
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	78db      	ldrb	r3, [r3, #3]
 8010bac:	2b02      	cmp	r3, #2
 8010bae:	d10f      	bne.n	8010bd0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	015a      	lsls	r2, r3, #5
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	4413      	add	r3, r2
 8010bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	68ba      	ldr	r2, [r7, #8]
 8010bc0:	0151      	lsls	r1, r2, #5
 8010bc2:	68fa      	ldr	r2, [r7, #12]
 8010bc4:	440a      	add	r2, r1
 8010bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010bce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010bd0:	2300      	movs	r3, #0
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3714      	adds	r7, #20
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr

08010bde <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010bde:	b480      	push	{r7}
 8010be0:	b085      	sub	sp, #20
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
 8010be6:	460b      	mov	r3, r1
 8010be8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	68fa      	ldr	r2, [r7, #12]
 8010bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010bfc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010c00:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	78fb      	ldrb	r3, [r7, #3]
 8010c0c:	011b      	lsls	r3, r3, #4
 8010c0e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010c12:	68f9      	ldr	r1, [r7, #12]
 8010c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010c18:	4313      	orrs	r3, r2
 8010c1a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010c1c:	2300      	movs	r3, #0
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3714      	adds	r7, #20
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr

08010c2a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010c2a:	b480      	push	{r7}
 8010c2c:	b085      	sub	sp, #20
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	68fa      	ldr	r2, [r7, #12]
 8010c40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c44:	f023 0303 	bic.w	r3, r3, #3
 8010c48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	68fa      	ldr	r2, [r7, #12]
 8010c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c58:	f023 0302 	bic.w	r3, r3, #2
 8010c5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c5e:	2300      	movs	r3, #0
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3714      	adds	r7, #20
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr

08010c6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	b085      	sub	sp, #20
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	68fa      	ldr	r2, [r7, #12]
 8010c82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c86:	f023 0303 	bic.w	r3, r3, #3
 8010c8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c92:	685b      	ldr	r3, [r3, #4]
 8010c94:	68fa      	ldr	r2, [r7, #12]
 8010c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c9a:	f043 0302 	orr.w	r3, r3, #2
 8010c9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010ca0:	2300      	movs	r3, #0
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3714      	adds	r7, #20
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cac:	4770      	bx	lr

08010cae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010cae:	b480      	push	{r7}
 8010cb0:	b085      	sub	sp, #20
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	695b      	ldr	r3, [r3, #20]
 8010cba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	699b      	ldr	r3, [r3, #24]
 8010cc0:	68fa      	ldr	r2, [r7, #12]
 8010cc2:	4013      	ands	r3, r2
 8010cc4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3714      	adds	r7, #20
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd2:	4770      	bx	lr

08010cd4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	b085      	sub	sp, #20
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ce6:	699b      	ldr	r3, [r3, #24]
 8010ce8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cf0:	69db      	ldr	r3, [r3, #28]
 8010cf2:	68ba      	ldr	r2, [r7, #8]
 8010cf4:	4013      	ands	r3, r2
 8010cf6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	0c1b      	lsrs	r3, r3, #16
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3714      	adds	r7, #20
 8010d00:	46bd      	mov	sp, r7
 8010d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d06:	4770      	bx	lr

08010d08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d08:	b480      	push	{r7}
 8010d0a:	b085      	sub	sp, #20
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d1a:	699b      	ldr	r3, [r3, #24]
 8010d1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d24:	69db      	ldr	r3, [r3, #28]
 8010d26:	68ba      	ldr	r2, [r7, #8]
 8010d28:	4013      	ands	r3, r2
 8010d2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	b29b      	uxth	r3, r3
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3714      	adds	r7, #20
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr

08010d3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	b085      	sub	sp, #20
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	460b      	mov	r3, r1
 8010d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010d4c:	78fb      	ldrb	r3, [r7, #3]
 8010d4e:	015a      	lsls	r2, r3, #5
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	4413      	add	r3, r2
 8010d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d58:	689b      	ldr	r3, [r3, #8]
 8010d5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d62:	695b      	ldr	r3, [r3, #20]
 8010d64:	68ba      	ldr	r2, [r7, #8]
 8010d66:	4013      	ands	r3, r2
 8010d68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010d6a:	68bb      	ldr	r3, [r7, #8]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3714      	adds	r7, #20
 8010d70:	46bd      	mov	sp, r7
 8010d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d76:	4770      	bx	lr

08010d78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b087      	sub	sp, #28
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	460b      	mov	r3, r1
 8010d82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d8e:	691b      	ldr	r3, [r3, #16]
 8010d90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010d9c:	78fb      	ldrb	r3, [r7, #3]
 8010d9e:	f003 030f 	and.w	r3, r3, #15
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	fa22 f303 	lsr.w	r3, r2, r3
 8010da8:	01db      	lsls	r3, r3, #7
 8010daa:	b2db      	uxtb	r3, r3
 8010dac:	693a      	ldr	r2, [r7, #16]
 8010dae:	4313      	orrs	r3, r2
 8010db0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010db2:	78fb      	ldrb	r3, [r7, #3]
 8010db4:	015a      	lsls	r2, r3, #5
 8010db6:	697b      	ldr	r3, [r7, #20]
 8010db8:	4413      	add	r3, r2
 8010dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dbe:	689b      	ldr	r3, [r3, #8]
 8010dc0:	693a      	ldr	r2, [r7, #16]
 8010dc2:	4013      	ands	r3, r2
 8010dc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010dc6:	68bb      	ldr	r3, [r7, #8]
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	371c      	adds	r7, #28
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr

08010dd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	695b      	ldr	r3, [r3, #20]
 8010de0:	f003 0301 	and.w	r3, r3, #1
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	370c      	adds	r7, #12
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010df0:	b480      	push	{r7}
 8010df2:	b085      	sub	sp, #20
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	68fa      	ldr	r2, [r7, #12]
 8010e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010e0e:	f023 0307 	bic.w	r3, r3, #7
 8010e12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	68fa      	ldr	r2, [r7, #12]
 8010e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010e28:	2300      	movs	r3, #0
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3714      	adds	r7, #20
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr
	...

08010e38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b087      	sub	sp, #28
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	60f8      	str	r0, [r7, #12]
 8010e40:	460b      	mov	r3, r1
 8010e42:	607a      	str	r2, [r7, #4]
 8010e44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	333c      	adds	r3, #60	; 0x3c
 8010e4e:	3304      	adds	r3, #4
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	4a26      	ldr	r2, [pc, #152]	; (8010ef0 <USB_EP0_OutStart+0xb8>)
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d90a      	bls.n	8010e72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010e6c:	d101      	bne.n	8010e72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	e037      	b.n	8010ee2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e78:	461a      	mov	r2, r3
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e84:	691b      	ldr	r3, [r3, #16]
 8010e86:	697a      	ldr	r2, [r7, #20]
 8010e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e98:	691b      	ldr	r3, [r3, #16]
 8010e9a:	697a      	ldr	r2, [r7, #20]
 8010e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ea0:	f043 0318 	orr.w	r3, r3, #24
 8010ea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eac:	691b      	ldr	r3, [r3, #16]
 8010eae:	697a      	ldr	r2, [r7, #20]
 8010eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010eb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010eb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010eba:	7afb      	ldrb	r3, [r7, #11]
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	d10f      	bne.n	8010ee0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	697a      	ldr	r2, [r7, #20]
 8010ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010eda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010ede:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010ee0:	2300      	movs	r3, #0
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	371c      	adds	r7, #28
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr
 8010eee:	bf00      	nop
 8010ef0:	4f54300a 	.word	0x4f54300a

08010ef4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b085      	sub	sp, #20
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010efc:	2300      	movs	r3, #0
 8010efe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	3301      	adds	r3, #1
 8010f04:	60fb      	str	r3, [r7, #12]
 8010f06:	4a13      	ldr	r2, [pc, #76]	; (8010f54 <USB_CoreReset+0x60>)
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d901      	bls.n	8010f10 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8010f0c:	2303      	movs	r3, #3
 8010f0e:	e01a      	b.n	8010f46 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	691b      	ldr	r3, [r3, #16]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	daf3      	bge.n	8010f00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	691b      	ldr	r3, [r3, #16]
 8010f20:	f043 0201 	orr.w	r2, r3, #1
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	60fb      	str	r3, [r7, #12]
 8010f2e:	4a09      	ldr	r2, [pc, #36]	; (8010f54 <USB_CoreReset+0x60>)
 8010f30:	4293      	cmp	r3, r2
 8010f32:	d901      	bls.n	8010f38 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8010f34:	2303      	movs	r3, #3
 8010f36:	e006      	b.n	8010f46 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	691b      	ldr	r3, [r3, #16]
 8010f3c:	f003 0301 	and.w	r3, r3, #1
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d0f1      	beq.n	8010f28 <USB_CoreReset+0x34>

  return HAL_OK;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3714      	adds	r7, #20
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f50:	4770      	bx	lr
 8010f52:	bf00      	nop
 8010f54:	00030d40 	.word	0x00030d40

08010f58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010f5c:	4904      	ldr	r1, [pc, #16]	; (8010f70 <MX_FATFS_Init+0x18>)
 8010f5e:	4805      	ldr	r0, [pc, #20]	; (8010f74 <MX_FATFS_Init+0x1c>)
 8010f60:	f006 f800 	bl	8016f64 <FATFS_LinkDriver>
 8010f64:	4603      	mov	r3, r0
 8010f66:	461a      	mov	r2, r3
 8010f68:	4b03      	ldr	r3, [pc, #12]	; (8010f78 <MX_FATFS_Init+0x20>)
 8010f6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010f6c:	bf00      	nop
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	20002e94 	.word	0x20002e94
 8010f74:	080185a4 	.word	0x080185a4
 8010f78:	20002e90 	.word	0x20002e90

08010f7c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010f80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr

08010f8c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010f92:	2300      	movs	r3, #0
 8010f94:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010f96:	f000 f896 	bl	80110c6 <BSP_SD_IsDetected>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	d001      	beq.n	8010fa4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	e012      	b.n	8010fca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010fa4:	480b      	ldr	r0, [pc, #44]	; (8010fd4 <BSP_SD_Init+0x48>)
 8010fa6:	f7fb fd53 	bl	800ca50 <HAL_SD_Init>
 8010faa:	4603      	mov	r3, r0
 8010fac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010fae:	79fb      	ldrb	r3, [r7, #7]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d109      	bne.n	8010fc8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010fb8:	4806      	ldr	r0, [pc, #24]	; (8010fd4 <BSP_SD_Init+0x48>)
 8010fba:	f7fc fe6d 	bl	800dc98 <HAL_SD_ConfigWideBusOperation>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d001      	beq.n	8010fc8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3708      	adds	r7, #8
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	20001c60 	.word	0x20001c60

08010fd8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b086      	sub	sp, #24
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	68ba      	ldr	r2, [r7, #8]
 8010fec:	68f9      	ldr	r1, [r7, #12]
 8010fee:	4806      	ldr	r0, [pc, #24]	; (8011008 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010ff0:	f7fc f940 	bl	800d274 <HAL_SD_ReadBlocks_DMA>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d001      	beq.n	8010ffe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011000:	4618      	mov	r0, r3
 8011002:	3718      	adds	r7, #24
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}
 8011008:	20001c60 	.word	0x20001c60

0801100c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b086      	sub	sp, #24
 8011010:	af00      	add	r7, sp, #0
 8011012:	60f8      	str	r0, [r7, #12]
 8011014:	60b9      	str	r1, [r7, #8]
 8011016:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011018:	2300      	movs	r3, #0
 801101a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	68ba      	ldr	r2, [r7, #8]
 8011020:	68f9      	ldr	r1, [r7, #12]
 8011022:	4806      	ldr	r0, [pc, #24]	; (801103c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011024:	f7fc fa06 	bl	800d434 <HAL_SD_WriteBlocks_DMA>
 8011028:	4603      	mov	r3, r0
 801102a:	2b00      	cmp	r3, #0
 801102c:	d001      	beq.n	8011032 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801102e:	2301      	movs	r3, #1
 8011030:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011032:	7dfb      	ldrb	r3, [r7, #23]
}
 8011034:	4618      	mov	r0, r3
 8011036:	3718      	adds	r7, #24
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	20001c60 	.word	0x20001c60

08011040 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011044:	4805      	ldr	r0, [pc, #20]	; (801105c <BSP_SD_GetCardState+0x1c>)
 8011046:	f7fc fec1 	bl	800ddcc <HAL_SD_GetCardState>
 801104a:	4603      	mov	r3, r0
 801104c:	2b04      	cmp	r3, #4
 801104e:	bf14      	ite	ne
 8011050:	2301      	movne	r3, #1
 8011052:	2300      	moveq	r3, #0
 8011054:	b2db      	uxtb	r3, r3
}
 8011056:	4618      	mov	r0, r3
 8011058:	bd80      	pop	{r7, pc}
 801105a:	bf00      	nop
 801105c:	20001c60 	.word	0x20001c60

08011060 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011068:	6879      	ldr	r1, [r7, #4]
 801106a:	4803      	ldr	r0, [pc, #12]	; (8011078 <BSP_SD_GetCardInfo+0x18>)
 801106c:	f7fc fde8 	bl	800dc40 <HAL_SD_GetCardInfo>
}
 8011070:	bf00      	nop
 8011072:	3708      	adds	r7, #8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}
 8011078:	20001c60 	.word	0x20001c60

0801107c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011084:	f000 f818 	bl	80110b8 <BSP_SD_AbortCallback>
}
 8011088:	bf00      	nop
 801108a:	3708      	adds	r7, #8
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011098:	f000 f9a8 	bl	80113ec <BSP_SD_WriteCpltCallback>
}
 801109c:	bf00      	nop
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}

080110a4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80110ac:	f000 f9aa 	bl	8011404 <BSP_SD_ReadCpltCallback>
}
 80110b0:	bf00      	nop
 80110b2:	3708      	adds	r7, #8
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}

080110b8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80110b8:	b480      	push	{r7}
 80110ba:	af00      	add	r7, sp, #0

}
 80110bc:	bf00      	nop
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr

080110c6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80110c6:	b580      	push	{r7, lr}
 80110c8:	b082      	sub	sp, #8
 80110ca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80110cc:	2301      	movs	r3, #1
 80110ce:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80110d0:	f000 f80c 	bl	80110ec <BSP_PlatformIsDetected>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d101      	bne.n	80110de <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80110da:	2300      	movs	r3, #0
 80110dc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80110de:	79fb      	ldrb	r3, [r7, #7]
 80110e0:	b2db      	uxtb	r3, r3
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3708      	adds	r7, #8
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
	...

080110ec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80110f2:	2301      	movs	r3, #1
 80110f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80110f6:	2180      	movs	r1, #128	; 0x80
 80110f8:	4806      	ldr	r0, [pc, #24]	; (8011114 <BSP_PlatformIsDetected+0x28>)
 80110fa:	f7f7 fe2d 	bl	8008d58 <HAL_GPIO_ReadPin>
 80110fe:	4603      	mov	r3, r0
 8011100:	2b00      	cmp	r3, #0
 8011102:	d001      	beq.n	8011108 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8011104:	2300      	movs	r3, #0
 8011106:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011108:	79fb      	ldrb	r3, [r7, #7]
}
 801110a:	4618      	mov	r0, r3
 801110c:	3708      	adds	r7, #8
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	40020800 	.word	0x40020800

08011118 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b084      	sub	sp, #16
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011120:	f7f5 fcec 	bl	8006afc <HAL_GetTick>
 8011124:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011126:	e006      	b.n	8011136 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011128:	f7ff ff8a 	bl	8011040 <BSP_SD_GetCardState>
 801112c:	4603      	mov	r3, r0
 801112e:	2b00      	cmp	r3, #0
 8011130:	d101      	bne.n	8011136 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011132:	2300      	movs	r3, #0
 8011134:	e009      	b.n	801114a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011136:	f7f5 fce1 	bl	8006afc <HAL_GetTick>
 801113a:	4602      	mov	r2, r0
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	429a      	cmp	r2, r3
 8011144:	d8f0      	bhi.n	8011128 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011146:	f04f 33ff 	mov.w	r3, #4294967295
}
 801114a:	4618      	mov	r0, r3
 801114c:	3710      	adds	r7, #16
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
	...

08011154 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b082      	sub	sp, #8
 8011158:	af00      	add	r7, sp, #0
 801115a:	4603      	mov	r3, r0
 801115c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801115e:	4b0b      	ldr	r3, [pc, #44]	; (801118c <SD_CheckStatus+0x38>)
 8011160:	2201      	movs	r2, #1
 8011162:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011164:	f7ff ff6c 	bl	8011040 <BSP_SD_GetCardState>
 8011168:	4603      	mov	r3, r0
 801116a:	2b00      	cmp	r3, #0
 801116c:	d107      	bne.n	801117e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801116e:	4b07      	ldr	r3, [pc, #28]	; (801118c <SD_CheckStatus+0x38>)
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	b2db      	uxtb	r3, r3
 8011174:	f023 0301 	bic.w	r3, r3, #1
 8011178:	b2da      	uxtb	r2, r3
 801117a:	4b04      	ldr	r3, [pc, #16]	; (801118c <SD_CheckStatus+0x38>)
 801117c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801117e:	4b03      	ldr	r3, [pc, #12]	; (801118c <SD_CheckStatus+0x38>)
 8011180:	781b      	ldrb	r3, [r3, #0]
 8011182:	b2db      	uxtb	r3, r3
}
 8011184:	4618      	mov	r0, r3
 8011186:	3708      	adds	r7, #8
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}
 801118c:	20000009 	.word	0x20000009

08011190 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b082      	sub	sp, #8
 8011194:	af00      	add	r7, sp, #0
 8011196:	4603      	mov	r3, r0
 8011198:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801119a:	f7ff fef7 	bl	8010f8c <BSP_SD_Init>
 801119e:	4603      	mov	r3, r0
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d107      	bne.n	80111b4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80111a4:	79fb      	ldrb	r3, [r7, #7]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7ff ffd4 	bl	8011154 <SD_CheckStatus>
 80111ac:	4603      	mov	r3, r0
 80111ae:	461a      	mov	r2, r3
 80111b0:	4b04      	ldr	r3, [pc, #16]	; (80111c4 <SD_initialize+0x34>)
 80111b2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80111b4:	4b03      	ldr	r3, [pc, #12]	; (80111c4 <SD_initialize+0x34>)
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	b2db      	uxtb	r3, r3
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3708      	adds	r7, #8
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}
 80111c2:	bf00      	nop
 80111c4:	20000009 	.word	0x20000009

080111c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	4603      	mov	r3, r0
 80111d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80111d2:	79fb      	ldrb	r3, [r7, #7]
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7ff ffbd 	bl	8011154 <SD_CheckStatus>
 80111da:	4603      	mov	r3, r0
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b086      	sub	sp, #24
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	60b9      	str	r1, [r7, #8]
 80111ec:	607a      	str	r2, [r7, #4]
 80111ee:	603b      	str	r3, [r7, #0]
 80111f0:	4603      	mov	r3, r0
 80111f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80111f4:	2301      	movs	r3, #1
 80111f6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80111f8:	f247 5030 	movw	r0, #30000	; 0x7530
 80111fc:	f7ff ff8c 	bl	8011118 <SD_CheckStatusWithTimeout>
 8011200:	4603      	mov	r3, r0
 8011202:	2b00      	cmp	r3, #0
 8011204:	da01      	bge.n	801120a <SD_read+0x26>
  {
    return res;
 8011206:	7dfb      	ldrb	r3, [r7, #23]
 8011208:	e03b      	b.n	8011282 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801120a:	683a      	ldr	r2, [r7, #0]
 801120c:	6879      	ldr	r1, [r7, #4]
 801120e:	68b8      	ldr	r0, [r7, #8]
 8011210:	f7ff fee2 	bl	8010fd8 <BSP_SD_ReadBlocks_DMA>
 8011214:	4603      	mov	r3, r0
 8011216:	2b00      	cmp	r3, #0
 8011218:	d132      	bne.n	8011280 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801121a:	4b1c      	ldr	r3, [pc, #112]	; (801128c <SD_read+0xa8>)
 801121c:	2200      	movs	r2, #0
 801121e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011220:	f7f5 fc6c 	bl	8006afc <HAL_GetTick>
 8011224:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011226:	bf00      	nop
 8011228:	4b18      	ldr	r3, [pc, #96]	; (801128c <SD_read+0xa8>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d108      	bne.n	8011242 <SD_read+0x5e>
 8011230:	f7f5 fc64 	bl	8006afc <HAL_GetTick>
 8011234:	4602      	mov	r2, r0
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	f247 522f 	movw	r2, #29999	; 0x752f
 801123e:	4293      	cmp	r3, r2
 8011240:	d9f2      	bls.n	8011228 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8011242:	4b12      	ldr	r3, [pc, #72]	; (801128c <SD_read+0xa8>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d102      	bne.n	8011250 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801124a:	2301      	movs	r3, #1
 801124c:	75fb      	strb	r3, [r7, #23]
 801124e:	e017      	b.n	8011280 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011250:	4b0e      	ldr	r3, [pc, #56]	; (801128c <SD_read+0xa8>)
 8011252:	2200      	movs	r2, #0
 8011254:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011256:	f7f5 fc51 	bl	8006afc <HAL_GetTick>
 801125a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801125c:	e007      	b.n	801126e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801125e:	f7ff feef 	bl	8011040 <BSP_SD_GetCardState>
 8011262:	4603      	mov	r3, r0
 8011264:	2b00      	cmp	r3, #0
 8011266:	d102      	bne.n	801126e <SD_read+0x8a>
          {
            res = RES_OK;
 8011268:	2300      	movs	r3, #0
 801126a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801126c:	e008      	b.n	8011280 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801126e:	f7f5 fc45 	bl	8006afc <HAL_GetTick>
 8011272:	4602      	mov	r2, r0
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	1ad3      	subs	r3, r2, r3
 8011278:	f247 522f 	movw	r2, #29999	; 0x752f
 801127c:	4293      	cmp	r3, r2
 801127e:	d9ee      	bls.n	801125e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011280:	7dfb      	ldrb	r3, [r7, #23]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3718      	adds	r7, #24
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}
 801128a:	bf00      	nop
 801128c:	200001fc 	.word	0x200001fc

08011290 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af00      	add	r7, sp, #0
 8011296:	60b9      	str	r1, [r7, #8]
 8011298:	607a      	str	r2, [r7, #4]
 801129a:	603b      	str	r3, [r7, #0]
 801129c:	4603      	mov	r3, r0
 801129e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80112a0:	2301      	movs	r3, #1
 80112a2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80112a4:	4b24      	ldr	r3, [pc, #144]	; (8011338 <SD_write+0xa8>)
 80112a6:	2200      	movs	r2, #0
 80112a8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80112aa:	f247 5030 	movw	r0, #30000	; 0x7530
 80112ae:	f7ff ff33 	bl	8011118 <SD_CheckStatusWithTimeout>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	da01      	bge.n	80112bc <SD_write+0x2c>
  {
    return res;
 80112b8:	7dfb      	ldrb	r3, [r7, #23]
 80112ba:	e038      	b.n	801132e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80112bc:	683a      	ldr	r2, [r7, #0]
 80112be:	6879      	ldr	r1, [r7, #4]
 80112c0:	68b8      	ldr	r0, [r7, #8]
 80112c2:	f7ff fea3 	bl	801100c <BSP_SD_WriteBlocks_DMA>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d12f      	bne.n	801132c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80112cc:	f7f5 fc16 	bl	8006afc <HAL_GetTick>
 80112d0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80112d2:	bf00      	nop
 80112d4:	4b18      	ldr	r3, [pc, #96]	; (8011338 <SD_write+0xa8>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d108      	bne.n	80112ee <SD_write+0x5e>
 80112dc:	f7f5 fc0e 	bl	8006afc <HAL_GetTick>
 80112e0:	4602      	mov	r2, r0
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	f247 522f 	movw	r2, #29999	; 0x752f
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d9f2      	bls.n	80112d4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80112ee:	4b12      	ldr	r3, [pc, #72]	; (8011338 <SD_write+0xa8>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d102      	bne.n	80112fc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80112f6:	2301      	movs	r3, #1
 80112f8:	75fb      	strb	r3, [r7, #23]
 80112fa:	e017      	b.n	801132c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80112fc:	4b0e      	ldr	r3, [pc, #56]	; (8011338 <SD_write+0xa8>)
 80112fe:	2200      	movs	r2, #0
 8011300:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011302:	f7f5 fbfb 	bl	8006afc <HAL_GetTick>
 8011306:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011308:	e007      	b.n	801131a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801130a:	f7ff fe99 	bl	8011040 <BSP_SD_GetCardState>
 801130e:	4603      	mov	r3, r0
 8011310:	2b00      	cmp	r3, #0
 8011312:	d102      	bne.n	801131a <SD_write+0x8a>
          {
            res = RES_OK;
 8011314:	2300      	movs	r3, #0
 8011316:	75fb      	strb	r3, [r7, #23]
            break;
 8011318:	e008      	b.n	801132c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801131a:	f7f5 fbef 	bl	8006afc <HAL_GetTick>
 801131e:	4602      	mov	r2, r0
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	1ad3      	subs	r3, r2, r3
 8011324:	f247 522f 	movw	r2, #29999	; 0x752f
 8011328:	4293      	cmp	r3, r2
 801132a:	d9ee      	bls.n	801130a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801132c:	7dfb      	ldrb	r3, [r7, #23]
}
 801132e:	4618      	mov	r0, r3
 8011330:	3718      	adds	r7, #24
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	200001f8 	.word	0x200001f8

0801133c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b08c      	sub	sp, #48	; 0x30
 8011340:	af00      	add	r7, sp, #0
 8011342:	4603      	mov	r3, r0
 8011344:	603a      	str	r2, [r7, #0]
 8011346:	71fb      	strb	r3, [r7, #7]
 8011348:	460b      	mov	r3, r1
 801134a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801134c:	2301      	movs	r3, #1
 801134e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011352:	4b25      	ldr	r3, [pc, #148]	; (80113e8 <SD_ioctl+0xac>)
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	b2db      	uxtb	r3, r3
 8011358:	f003 0301 	and.w	r3, r3, #1
 801135c:	2b00      	cmp	r3, #0
 801135e:	d001      	beq.n	8011364 <SD_ioctl+0x28>
 8011360:	2303      	movs	r3, #3
 8011362:	e03c      	b.n	80113de <SD_ioctl+0xa2>

  switch (cmd)
 8011364:	79bb      	ldrb	r3, [r7, #6]
 8011366:	2b03      	cmp	r3, #3
 8011368:	d834      	bhi.n	80113d4 <SD_ioctl+0x98>
 801136a:	a201      	add	r2, pc, #4	; (adr r2, 8011370 <SD_ioctl+0x34>)
 801136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011370:	08011381 	.word	0x08011381
 8011374:	08011389 	.word	0x08011389
 8011378:	080113a1 	.word	0x080113a1
 801137c:	080113bb 	.word	0x080113bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011380:	2300      	movs	r3, #0
 8011382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011386:	e028      	b.n	80113da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011388:	f107 030c 	add.w	r3, r7, #12
 801138c:	4618      	mov	r0, r3
 801138e:	f7ff fe67 	bl	8011060 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011398:	2300      	movs	r3, #0
 801139a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801139e:	e01c      	b.n	80113da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80113a0:	f107 030c 	add.w	r3, r7, #12
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7ff fe5b 	bl	8011060 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80113aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ac:	b29a      	uxth	r2, r3
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80113b2:	2300      	movs	r3, #0
 80113b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113b8:	e00f      	b.n	80113da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80113ba:	f107 030c 	add.w	r3, r7, #12
 80113be:	4618      	mov	r0, r3
 80113c0:	f7ff fe4e 	bl	8011060 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80113c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c6:	0a5a      	lsrs	r2, r3, #9
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80113cc:	2300      	movs	r3, #0
 80113ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113d2:	e002      	b.n	80113da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80113d4:	2304      	movs	r3, #4
 80113d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80113da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3730      	adds	r7, #48	; 0x30
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	20000009 	.word	0x20000009

080113ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80113ec:	b480      	push	{r7}
 80113ee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80113f0:	4b03      	ldr	r3, [pc, #12]	; (8011400 <BSP_SD_WriteCpltCallback+0x14>)
 80113f2:	2201      	movs	r2, #1
 80113f4:	601a      	str	r2, [r3, #0]
}
 80113f6:	bf00      	nop
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr
 8011400:	200001f8 	.word	0x200001f8

08011404 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011404:	b480      	push	{r7}
 8011406:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011408:	4b03      	ldr	r3, [pc, #12]	; (8011418 <BSP_SD_ReadCpltCallback+0x14>)
 801140a:	2201      	movs	r2, #1
 801140c:	601a      	str	r2, [r3, #0]
}
 801140e:	bf00      	nop
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr
 8011418:	200001fc 	.word	0x200001fc

0801141c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	460b      	mov	r3, r1
 8011426:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8011428:	f44f 701d 	mov.w	r0, #628	; 0x274
 801142c:	f006 fb9a 	bl	8017b64 <USBD_static_malloc>
 8011430:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d105      	bne.n	8011444 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2200      	movs	r2, #0
 801143c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011440:	2302      	movs	r3, #2
 8011442:	e034      	b.n	80114ae <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	68fa      	ldr	r2, [r7, #12]
 8011448:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	7c1b      	ldrb	r3, [r3, #16]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d115      	bne.n	8011480 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011458:	2202      	movs	r2, #2
 801145a:	2101      	movs	r1, #1
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f006 f9f0 	bl	8017842 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2201      	movs	r2, #1
 8011466:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801146a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801146e:	2202      	movs	r2, #2
 8011470:	2181      	movs	r1, #129	; 0x81
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f006 f9e5 	bl	8017842 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2201      	movs	r2, #1
 801147c:	871a      	strh	r2, [r3, #56]	; 0x38
 801147e:	e012      	b.n	80114a6 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011480:	2340      	movs	r3, #64	; 0x40
 8011482:	2202      	movs	r2, #2
 8011484:	2101      	movs	r1, #1
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f006 f9db 	bl	8017842 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2201      	movs	r2, #1
 8011490:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011494:	2340      	movs	r3, #64	; 0x40
 8011496:	2202      	movs	r2, #2
 8011498:	2181      	movs	r1, #129	; 0x81
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f006 f9d1 	bl	8017842 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2201      	movs	r2, #1
 80114a4:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f000 f999 	bl	80117de <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80114ac:	2300      	movs	r3, #0
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3710      	adds	r7, #16
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}

080114b6 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114b6:	b580      	push	{r7, lr}
 80114b8:	b082      	sub	sp, #8
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
 80114be:	460b      	mov	r3, r1
 80114c0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80114c2:	2101      	movs	r1, #1
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f006 f9e2 	bl	801788e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2200      	movs	r2, #0
 80114ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80114d2:	2181      	movs	r1, #129	; 0x81
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f006 f9da 	bl	801788e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2200      	movs	r2, #0
 80114de:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d00c      	beq.n	8011504 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f000 f9d5 	bl	801189a <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114f6:	4618      	mov	r0, r3
 80114f8:	f006 fb42 	bl	8017b80 <USBD_static_free>
    pdev->pClassData = NULL;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2200      	movs	r2, #0
 8011500:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011504:	2300      	movs	r3, #0
}
 8011506:	4618      	mov	r0, r3
 8011508:	3708      	adds	r7, #8
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
	...

08011510 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b086      	sub	sp, #24
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011520:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8011522:	2300      	movs	r3, #0
 8011524:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8011526:	2300      	movs	r3, #0
 8011528:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d101      	bne.n	8011534 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011530:	2303      	movs	r3, #3
 8011532:	e0db      	b.n	80116ec <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	781b      	ldrb	r3, [r3, #0]
 8011538:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801153c:	2b00      	cmp	r3, #0
 801153e:	d04e      	beq.n	80115de <USBD_MSC_Setup+0xce>
 8011540:	2b20      	cmp	r3, #32
 8011542:	f040 80cb 	bne.w	80116dc <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	785b      	ldrb	r3, [r3, #1]
 801154a:	2bfe      	cmp	r3, #254	; 0xfe
 801154c:	d002      	beq.n	8011554 <USBD_MSC_Setup+0x44>
 801154e:	2bff      	cmp	r3, #255	; 0xff
 8011550:	d025      	beq.n	801159e <USBD_MSC_Setup+0x8e>
 8011552:	e03c      	b.n	80115ce <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	885b      	ldrh	r3, [r3, #2]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d119      	bne.n	8011590 <USBD_MSC_Setup+0x80>
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	88db      	ldrh	r3, [r3, #6]
 8011560:	2b01      	cmp	r3, #1
 8011562:	d115      	bne.n	8011590 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801156a:	2b00      	cmp	r3, #0
 801156c:	da10      	bge.n	8011590 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011574:	699b      	ldr	r3, [r3, #24]
 8011576:	4798      	blx	r3
 8011578:	4603      	mov	r3, r0
 801157a:	461a      	mov	r2, r3
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	2201      	movs	r2, #1
 8011584:	4619      	mov	r1, r3
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f002 fe3d 	bl	8014206 <USBD_CtlSendData>
 801158c:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801158e:	e025      	b.n	80115dc <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8011590:	6839      	ldr	r1, [r7, #0]
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f002 fdc6 	bl	8014124 <USBD_CtlError>
            ret = USBD_FAIL;
 8011598:	2303      	movs	r3, #3
 801159a:	75fb      	strb	r3, [r7, #23]
          break;
 801159c:	e01e      	b.n	80115dc <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	885b      	ldrh	r3, [r3, #2]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d10c      	bne.n	80115c0 <USBD_MSC_Setup+0xb0>
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	88db      	ldrh	r3, [r3, #6]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d108      	bne.n	80115c0 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	db03      	blt.n	80115c0 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f000 f948 	bl	801184e <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80115be:	e00d      	b.n	80115dc <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80115c0:	6839      	ldr	r1, [r7, #0]
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f002 fdae 	bl	8014124 <USBD_CtlError>
            ret = USBD_FAIL;
 80115c8:	2303      	movs	r3, #3
 80115ca:	75fb      	strb	r3, [r7, #23]
          break;
 80115cc:	e006      	b.n	80115dc <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80115ce:	6839      	ldr	r1, [r7, #0]
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f002 fda7 	bl	8014124 <USBD_CtlError>
          ret = USBD_FAIL;
 80115d6:	2303      	movs	r3, #3
 80115d8:	75fb      	strb	r3, [r7, #23]
          break;
 80115da:	bf00      	nop
      }
      break;
 80115dc:	e085      	b.n	80116ea <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	785b      	ldrb	r3, [r3, #1]
 80115e2:	2b0b      	cmp	r3, #11
 80115e4:	d871      	bhi.n	80116ca <USBD_MSC_Setup+0x1ba>
 80115e6:	a201      	add	r2, pc, #4	; (adr r2, 80115ec <USBD_MSC_Setup+0xdc>)
 80115e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ec:	0801161d 	.word	0x0801161d
 80115f0:	08011699 	.word	0x08011699
 80115f4:	080116cb 	.word	0x080116cb
 80115f8:	080116cb 	.word	0x080116cb
 80115fc:	080116cb 	.word	0x080116cb
 8011600:	080116cb 	.word	0x080116cb
 8011604:	080116cb 	.word	0x080116cb
 8011608:	080116cb 	.word	0x080116cb
 801160c:	080116cb 	.word	0x080116cb
 8011610:	080116cb 	.word	0x080116cb
 8011614:	08011647 	.word	0x08011647
 8011618:	08011671 	.word	0x08011671
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011622:	b2db      	uxtb	r3, r3
 8011624:	2b03      	cmp	r3, #3
 8011626:	d107      	bne.n	8011638 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011628:	f107 030e 	add.w	r3, r7, #14
 801162c:	2202      	movs	r2, #2
 801162e:	4619      	mov	r1, r3
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f002 fde8 	bl	8014206 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011636:	e050      	b.n	80116da <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8011638:	6839      	ldr	r1, [r7, #0]
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f002 fd72 	bl	8014124 <USBD_CtlError>
            ret = USBD_FAIL;
 8011640:	2303      	movs	r3, #3
 8011642:	75fb      	strb	r3, [r7, #23]
          break;
 8011644:	e049      	b.n	80116da <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801164c:	b2db      	uxtb	r3, r3
 801164e:	2b03      	cmp	r3, #3
 8011650:	d107      	bne.n	8011662 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	3304      	adds	r3, #4
 8011656:	2201      	movs	r2, #1
 8011658:	4619      	mov	r1, r3
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f002 fdd3 	bl	8014206 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011660:	e03b      	b.n	80116da <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8011662:	6839      	ldr	r1, [r7, #0]
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f002 fd5d 	bl	8014124 <USBD_CtlError>
            ret = USBD_FAIL;
 801166a:	2303      	movs	r3, #3
 801166c:	75fb      	strb	r3, [r7, #23]
          break;
 801166e:	e034      	b.n	80116da <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011676:	b2db      	uxtb	r3, r3
 8011678:	2b03      	cmp	r3, #3
 801167a:	d106      	bne.n	801168a <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	885b      	ldrh	r3, [r3, #2]
 8011680:	b2db      	uxtb	r3, r3
 8011682:	461a      	mov	r2, r3
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011688:	e027      	b.n	80116da <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801168a:	6839      	ldr	r1, [r7, #0]
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f002 fd49 	bl	8014124 <USBD_CtlError>
            ret = USBD_FAIL;
 8011692:	2303      	movs	r3, #3
 8011694:	75fb      	strb	r3, [r7, #23]
          break;
 8011696:	e020      	b.n	80116da <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801169e:	b2db      	uxtb	r3, r3
 80116a0:	2b03      	cmp	r3, #3
 80116a2:	d119      	bne.n	80116d8 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	885b      	ldrh	r3, [r3, #2]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d115      	bne.n	80116d8 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	889b      	ldrh	r3, [r3, #4]
 80116b0:	b2db      	uxtb	r3, r3
 80116b2:	4619      	mov	r1, r3
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f006 f909 	bl	80178cc <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	889b      	ldrh	r3, [r3, #4]
 80116be:	b2db      	uxtb	r3, r3
 80116c0:	4619      	mov	r1, r3
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f000 fa82 	bl	8011bcc <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80116c8:	e006      	b.n	80116d8 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 80116ca:	6839      	ldr	r1, [r7, #0]
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f002 fd29 	bl	8014124 <USBD_CtlError>
          ret = USBD_FAIL;
 80116d2:	2303      	movs	r3, #3
 80116d4:	75fb      	strb	r3, [r7, #23]
          break;
 80116d6:	e000      	b.n	80116da <USBD_MSC_Setup+0x1ca>
          break;
 80116d8:	bf00      	nop
      }
      break;
 80116da:	e006      	b.n	80116ea <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80116dc:	6839      	ldr	r1, [r7, #0]
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f002 fd20 	bl	8014124 <USBD_CtlError>
      ret = USBD_FAIL;
 80116e4:	2303      	movs	r3, #3
 80116e6:	75fb      	strb	r3, [r7, #23]
      break;
 80116e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80116ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3718      	adds	r7, #24
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}

080116f4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	460b      	mov	r3, r1
 80116fe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8011700:	78fb      	ldrb	r3, [r7, #3]
 8011702:	4619      	mov	r1, r3
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f000 f8dc 	bl	80118c2 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801170a:	2300      	movs	r3, #0
}
 801170c:	4618      	mov	r0, r3
 801170e:	3708      	adds	r7, #8
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	460b      	mov	r3, r1
 801171e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8011720:	78fb      	ldrb	r3, [r7, #3]
 8011722:	4619      	mov	r1, r3
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f000 f902 	bl	801192e <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801172a:	2300      	movs	r3, #0
}
 801172c:	4618      	mov	r0, r3
 801172e:	3708      	adds	r7, #8
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}

08011734 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8011734:	b480      	push	{r7}
 8011736:	b083      	sub	sp, #12
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2220      	movs	r2, #32
 8011740:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8011742:	4b03      	ldr	r3, [pc, #12]	; (8011750 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8011744:	4618      	mov	r0, r3
 8011746:	370c      	adds	r7, #12
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr
 8011750:	20000044 	.word	0x20000044

08011754 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8011754:	b480      	push	{r7}
 8011756:	b083      	sub	sp, #12
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2220      	movs	r2, #32
 8011760:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8011762:	4b03      	ldr	r3, [pc, #12]	; (8011770 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8011764:	4618      	mov	r0, r3
 8011766:	370c      	adds	r7, #12
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr
 8011770:	20000064 	.word	0x20000064

08011774 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011774:	b480      	push	{r7}
 8011776:	b083      	sub	sp, #12
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2220      	movs	r2, #32
 8011780:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8011782:	4b03      	ldr	r3, [pc, #12]	; (8011790 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011784:	4618      	mov	r0, r3
 8011786:	370c      	adds	r7, #12
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr
 8011790:	20000084 	.word	0x20000084

08011794 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011794:	b480      	push	{r7}
 8011796:	b083      	sub	sp, #12
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	220a      	movs	r2, #10
 80117a0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80117a2:	4b03      	ldr	r3, [pc, #12]	; (80117b0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	370c      	adds	r7, #12
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr
 80117b0:	200000a4 	.word	0x200000a4

080117b4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80117b4:	b480      	push	{r7}
 80117b6:	b083      	sub	sp, #12
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d101      	bne.n	80117c8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80117c4:	2303      	movs	r3, #3
 80117c6:	e004      	b.n	80117d2 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	683a      	ldr	r2, [r7, #0]
 80117cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80117d0:	2300      	movs	r3, #0
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	370c      	adds	r7, #12
 80117d6:	46bd      	mov	sp, r7
 80117d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117dc:	4770      	bx	lr

080117de <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80117de:	b580      	push	{r7, lr}
 80117e0:	b084      	sub	sp, #16
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117ec:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d028      	beq.n	8011846 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2200      	movs	r2, #0
 80117f8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	2200      	movs	r2, #0
 80117fe:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	2200      	movs	r2, #0
 8011804:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	2200      	movs	r2, #0
 801180c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	2200      	movs	r2, #0
 8011814:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	2000      	movs	r0, #0
 8011822:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8011824:	2101      	movs	r1, #1
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f006 f850 	bl	80178cc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801182c:	2181      	movs	r1, #129	; 0x81
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f006 f84c 	bl	80178cc <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801183a:	231f      	movs	r3, #31
 801183c:	2101      	movs	r1, #1
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f006 f90d 	bl	8017a5e <USBD_LL_PrepareReceive>
 8011844:	e000      	b.n	8011848 <MSC_BOT_Init+0x6a>
    return;
 8011846:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011848:	3710      	adds	r7, #16
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}

0801184e <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801184e:	b580      	push	{r7, lr}
 8011850:	b084      	sub	sp, #16
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801185c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d016      	beq.n	8011892 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2200      	movs	r2, #0
 8011868:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2201      	movs	r2, #1
 801186e:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8011870:	2181      	movs	r1, #129	; 0x81
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f006 f868 	bl	8017948 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8011878:	2101      	movs	r1, #1
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f006 f864 	bl	8017948 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011886:	231f      	movs	r3, #31
 8011888:	2101      	movs	r1, #1
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	f006 f8e7 	bl	8017a5e <USBD_LL_PrepareReceive>
 8011890:	e000      	b.n	8011894 <MSC_BOT_Reset+0x46>
    return;
 8011892:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011894:	3710      	adds	r7, #16
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}

0801189a <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801189a:	b480      	push	{r7}
 801189c:	b085      	sub	sp, #20
 801189e:	af00      	add	r7, sp, #0
 80118a0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118a8:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d002      	beq.n	80118b6 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2200      	movs	r2, #0
 80118b4:	721a      	strb	r2, [r3, #8]
  }
}
 80118b6:	bf00      	nop
 80118b8:	3714      	adds	r7, #20
 80118ba:	46bd      	mov	sp, r7
 80118bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c0:	4770      	bx	lr

080118c2 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80118c2:	b580      	push	{r7, lr}
 80118c4:	b084      	sub	sp, #16
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	6078      	str	r0, [r7, #4]
 80118ca:	460b      	mov	r3, r1
 80118cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118d4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d020      	beq.n	801191e <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	7a1b      	ldrb	r3, [r3, #8]
 80118e0:	2b02      	cmp	r3, #2
 80118e2:	d005      	beq.n	80118f0 <MSC_BOT_DataIn+0x2e>
 80118e4:	2b02      	cmp	r3, #2
 80118e6:	db1c      	blt.n	8011922 <MSC_BOT_DataIn+0x60>
 80118e8:	3b03      	subs	r3, #3
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d819      	bhi.n	8011922 <MSC_BOT_DataIn+0x60>
 80118ee:	e011      	b.n	8011914 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80118fc:	461a      	mov	r2, r3
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 f992 	bl	8011c28 <SCSI_ProcessCmd>
 8011904:	4603      	mov	r3, r0
 8011906:	2b00      	cmp	r3, #0
 8011908:	da0d      	bge.n	8011926 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801190a:	2101      	movs	r1, #1
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f000 f8fb 	bl	8011b08 <MSC_BOT_SendCSW>
      }
      break;
 8011912:	e008      	b.n	8011926 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011914:	2100      	movs	r1, #0
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f000 f8f6 	bl	8011b08 <MSC_BOT_SendCSW>
      break;
 801191c:	e004      	b.n	8011928 <MSC_BOT_DataIn+0x66>
    return;
 801191e:	bf00      	nop
 8011920:	e002      	b.n	8011928 <MSC_BOT_DataIn+0x66>

    default:
      break;
 8011922:	bf00      	nop
 8011924:	e000      	b.n	8011928 <MSC_BOT_DataIn+0x66>
      break;
 8011926:	bf00      	nop
  }
}
 8011928:	3710      	adds	r7, #16
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}

0801192e <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801192e:	b580      	push	{r7, lr}
 8011930:	b084      	sub	sp, #16
 8011932:	af00      	add	r7, sp, #0
 8011934:	6078      	str	r0, [r7, #4]
 8011936:	460b      	mov	r3, r1
 8011938:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011940:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d01c      	beq.n	8011982 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	7a1b      	ldrb	r3, [r3, #8]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d002      	beq.n	8011956 <MSC_BOT_DataOut+0x28>
 8011950:	2b01      	cmp	r3, #1
 8011952:	d004      	beq.n	801195e <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8011954:	e018      	b.n	8011988 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f000 f81a 	bl	8011990 <MSC_BOT_CBW_Decode>
      break;
 801195c:	e014      	b.n	8011988 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801196a:	461a      	mov	r2, r3
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f000 f95b 	bl	8011c28 <SCSI_ProcessCmd>
 8011972:	4603      	mov	r3, r0
 8011974:	2b00      	cmp	r3, #0
 8011976:	da06      	bge.n	8011986 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011978:	2101      	movs	r1, #1
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f000 f8c4 	bl	8011b08 <MSC_BOT_SendCSW>
      break;
 8011980:	e001      	b.n	8011986 <MSC_BOT_DataOut+0x58>
    return;
 8011982:	bf00      	nop
 8011984:	e000      	b.n	8011988 <MSC_BOT_DataOut+0x5a>
      break;
 8011986:	bf00      	nop
  }
}
 8011988:	3710      	adds	r7, #16
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}
	...

08011990 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b084      	sub	sp, #16
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801199e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d077      	beq.n	8011a96 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80119be:	2101      	movs	r1, #1
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f006 f86d 	bl	8017aa0 <USBD_LL_GetRxDataSize>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b1f      	cmp	r3, #31
 80119ca:	d114      	bne.n	80119f6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80119d2:	4a34      	ldr	r2, [pc, #208]	; (8011aa4 <MSC_BOT_CBW_Decode+0x114>)
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d10e      	bne.n	80119f6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d809      	bhi.n	80119f6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d004      	beq.n	80119f6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80119f2:	2b10      	cmp	r3, #16
 80119f4:	d90e      	bls.n	8011a14 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80119fc:	2320      	movs	r3, #32
 80119fe:	2205      	movs	r2, #5
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f000 fdbc 	bl	801257e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2202      	movs	r2, #2
 8011a0a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f000 f8ab 	bl	8011b68 <MSC_BOT_Abort>
 8011a12:	e043      	b.n	8011a9c <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011a20:	461a      	mov	r2, r3
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 f900 	bl	8011c28 <SCSI_ProcessCmd>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	da0c      	bge.n	8011a48 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	7a1b      	ldrb	r3, [r3, #8]
 8011a32:	2b05      	cmp	r3, #5
 8011a34:	d104      	bne.n	8011a40 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011a36:	2101      	movs	r1, #1
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 f865 	bl	8011b08 <MSC_BOT_SendCSW>
 8011a3e:	e02d      	b.n	8011a9c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f000 f891 	bl	8011b68 <MSC_BOT_Abort>
 8011a46:	e029      	b.n	8011a9c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	7a1b      	ldrb	r3, [r3, #8]
 8011a4c:	2b02      	cmp	r3, #2
 8011a4e:	d024      	beq.n	8011a9a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d020      	beq.n	8011a9a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8011a5c:	2b03      	cmp	r3, #3
 8011a5e:	d01c      	beq.n	8011a9a <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	68db      	ldr	r3, [r3, #12]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d009      	beq.n	8011a7c <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	f103 0110 	add.w	r1, r3, #16
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	461a      	mov	r2, r3
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f000 f817 	bl	8011aa8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8011a7a:	e00f      	b.n	8011a9c <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d104      	bne.n	8011a8e <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011a84:	2100      	movs	r1, #0
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f000 f83e 	bl	8011b08 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8011a8c:	e006      	b.n	8011a9c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f000 f86a 	bl	8011b68 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8011a94:	e002      	b.n	8011a9c <MSC_BOT_CBW_Decode+0x10c>
    return;
 8011a96:	bf00      	nop
 8011a98:	e000      	b.n	8011a9c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 8011a9a:	bf00      	nop
    }
  }
}
 8011a9c:	3710      	adds	r7, #16
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	43425355 	.word	0x43425355

08011aa8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b086      	sub	sp, #24
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011aba:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	bf28      	it	cs
 8011ac8:	4613      	movcs	r3, r2
 8011aca:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d015      	beq.n	8011afe <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	1ad2      	subs	r2, r2, r3
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	2204      	movs	r2, #4
 8011aee:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	68ba      	ldr	r2, [r7, #8]
 8011af4:	2181      	movs	r1, #129	; 0x81
 8011af6:	68f8      	ldr	r0, [r7, #12]
 8011af8:	f005 ff90 	bl	8017a1c <USBD_LL_Transmit>
 8011afc:	e000      	b.n	8011b00 <MSC_BOT_SendData+0x58>
    return;
 8011afe:	bf00      	nop
}
 8011b00:	3718      	adds	r7, #24
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
	...

08011b08 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b084      	sub	sp, #16
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	460b      	mov	r3, r1
 8011b12:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b1a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d01b      	beq.n	8011b5a <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	4a0f      	ldr	r2, [pc, #60]	; (8011b64 <MSC_BOT_SendCSW+0x5c>)
 8011b26:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	78fa      	ldrb	r2, [r7, #3]
 8011b2e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2200      	movs	r2, #0
 8011b36:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8011b3e:	230d      	movs	r3, #13
 8011b40:	2181      	movs	r1, #129	; 0x81
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f005 ff6a 	bl	8017a1c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011b4e:	231f      	movs	r3, #31
 8011b50:	2101      	movs	r1, #1
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f005 ff83 	bl	8017a5e <USBD_LL_PrepareReceive>
 8011b58:	e000      	b.n	8011b5c <MSC_BOT_SendCSW+0x54>
    return;
 8011b5a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011b5c:	3710      	adds	r7, #16
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	53425355 	.word	0x53425355

08011b68 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b084      	sub	sp, #16
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b76:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d022      	beq.n	8011bc4 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d10c      	bne.n	8011ba2 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d007      	beq.n	8011ba2 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d103      	bne.n	8011ba2 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8011b9a:	2101      	movs	r1, #1
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f005 feb4 	bl	801790a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8011ba2:	2181      	movs	r1, #129	; 0x81
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f005 feb0 	bl	801790a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	7a5b      	ldrb	r3, [r3, #9]
 8011bae:	2b02      	cmp	r3, #2
 8011bb0:	d109      	bne.n	8011bc6 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8011bb2:	2181      	movs	r1, #129	; 0x81
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f005 fea8 	bl	801790a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8011bba:	2101      	movs	r1, #1
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f005 fea4 	bl	801790a <USBD_LL_StallEP>
 8011bc2:	e000      	b.n	8011bc6 <MSC_BOT_Abort+0x5e>
    return;
 8011bc4:	bf00      	nop
  }
}
 8011bc6:	3710      	adds	r7, #16
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011bde:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d019      	beq.n	8011c1a <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	7a5b      	ldrb	r3, [r3, #9]
 8011bea:	2b02      	cmp	r3, #2
 8011bec:	d108      	bne.n	8011c00 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8011bee:	2181      	movs	r1, #129	; 0x81
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	f005 fe8a 	bl	801790a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8011bf6:	2101      	movs	r1, #1
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f005 fe86 	bl	801790a <USBD_LL_StallEP>
 8011bfe:	e00f      	b.n	8011c20 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8011c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	da0a      	bge.n	8011c1e <MSC_BOT_CplClrFeature+0x52>
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	7a5b      	ldrb	r3, [r3, #9]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d006      	beq.n	8011c1e <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011c10:	2101      	movs	r1, #1
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f7ff ff78 	bl	8011b08 <MSC_BOT_SendCSW>
 8011c18:	e002      	b.n	8011c20 <MSC_BOT_CplClrFeature+0x54>
    return;
 8011c1a:	bf00      	nop
 8011c1c:	e000      	b.n	8011c20 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8011c1e:	bf00      	nop
  }
}
 8011c20:	3710      	adds	r7, #16
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
	...

08011c28 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b086      	sub	sp, #24
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	60f8      	str	r0, [r7, #12]
 8011c30:	460b      	mov	r3, r1
 8011c32:	607a      	str	r2, [r7, #4]
 8011c34:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c3c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d102      	bne.n	8011c4a <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8011c44:	f04f 33ff 	mov.w	r3, #4294967295
 8011c48:	e168      	b.n	8011f1c <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	2baa      	cmp	r3, #170	; 0xaa
 8011c50:	f000 8144 	beq.w	8011edc <SCSI_ProcessCmd+0x2b4>
 8011c54:	2baa      	cmp	r3, #170	; 0xaa
 8011c56:	f300 8153 	bgt.w	8011f00 <SCSI_ProcessCmd+0x2d8>
 8011c5a:	2ba8      	cmp	r3, #168	; 0xa8
 8011c5c:	f000 812c 	beq.w	8011eb8 <SCSI_ProcessCmd+0x290>
 8011c60:	2ba8      	cmp	r3, #168	; 0xa8
 8011c62:	f300 814d 	bgt.w	8011f00 <SCSI_ProcessCmd+0x2d8>
 8011c66:	2b5a      	cmp	r3, #90	; 0x5a
 8011c68:	f300 80c0 	bgt.w	8011dec <SCSI_ProcessCmd+0x1c4>
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	f2c0 8147 	blt.w	8011f00 <SCSI_ProcessCmd+0x2d8>
 8011c72:	2b5a      	cmp	r3, #90	; 0x5a
 8011c74:	f200 8144 	bhi.w	8011f00 <SCSI_ProcessCmd+0x2d8>
 8011c78:	a201      	add	r2, pc, #4	; (adr r2, 8011c80 <SCSI_ProcessCmd+0x58>)
 8011c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c7e:	bf00      	nop
 8011c80:	08011df3 	.word	0x08011df3
 8011c84:	08011f01 	.word	0x08011f01
 8011c88:	08011f01 	.word	0x08011f01
 8011c8c:	08011e05 	.word	0x08011e05
 8011c90:	08011f01 	.word	0x08011f01
 8011c94:	08011f01 	.word	0x08011f01
 8011c98:	08011f01 	.word	0x08011f01
 8011c9c:	08011f01 	.word	0x08011f01
 8011ca0:	08011f01 	.word	0x08011f01
 8011ca4:	08011f01 	.word	0x08011f01
 8011ca8:	08011f01 	.word	0x08011f01
 8011cac:	08011f01 	.word	0x08011f01
 8011cb0:	08011f01 	.word	0x08011f01
 8011cb4:	08011f01 	.word	0x08011f01
 8011cb8:	08011f01 	.word	0x08011f01
 8011cbc:	08011f01 	.word	0x08011f01
 8011cc0:	08011f01 	.word	0x08011f01
 8011cc4:	08011f01 	.word	0x08011f01
 8011cc8:	08011e17 	.word	0x08011e17
 8011ccc:	08011f01 	.word	0x08011f01
 8011cd0:	08011f01 	.word	0x08011f01
 8011cd4:	08011f01 	.word	0x08011f01
 8011cd8:	08011f01 	.word	0x08011f01
 8011cdc:	08011f01 	.word	0x08011f01
 8011ce0:	08011f01 	.word	0x08011f01
 8011ce4:	08011f01 	.word	0x08011f01
 8011ce8:	08011e4d 	.word	0x08011e4d
 8011cec:	08011e29 	.word	0x08011e29
 8011cf0:	08011f01 	.word	0x08011f01
 8011cf4:	08011f01 	.word	0x08011f01
 8011cf8:	08011e3b 	.word	0x08011e3b
 8011cfc:	08011f01 	.word	0x08011f01
 8011d00:	08011f01 	.word	0x08011f01
 8011d04:	08011f01 	.word	0x08011f01
 8011d08:	08011f01 	.word	0x08011f01
 8011d0c:	08011e71 	.word	0x08011e71
 8011d10:	08011f01 	.word	0x08011f01
 8011d14:	08011e83 	.word	0x08011e83
 8011d18:	08011f01 	.word	0x08011f01
 8011d1c:	08011f01 	.word	0x08011f01
 8011d20:	08011ea7 	.word	0x08011ea7
 8011d24:	08011f01 	.word	0x08011f01
 8011d28:	08011ecb 	.word	0x08011ecb
 8011d2c:	08011f01 	.word	0x08011f01
 8011d30:	08011f01 	.word	0x08011f01
 8011d34:	08011f01 	.word	0x08011f01
 8011d38:	08011f01 	.word	0x08011f01
 8011d3c:	08011eef 	.word	0x08011eef
 8011d40:	08011f01 	.word	0x08011f01
 8011d44:	08011f01 	.word	0x08011f01
 8011d48:	08011f01 	.word	0x08011f01
 8011d4c:	08011f01 	.word	0x08011f01
 8011d50:	08011f01 	.word	0x08011f01
 8011d54:	08011f01 	.word	0x08011f01
 8011d58:	08011f01 	.word	0x08011f01
 8011d5c:	08011f01 	.word	0x08011f01
 8011d60:	08011f01 	.word	0x08011f01
 8011d64:	08011f01 	.word	0x08011f01
 8011d68:	08011f01 	.word	0x08011f01
 8011d6c:	08011f01 	.word	0x08011f01
 8011d70:	08011f01 	.word	0x08011f01
 8011d74:	08011f01 	.word	0x08011f01
 8011d78:	08011f01 	.word	0x08011f01
 8011d7c:	08011f01 	.word	0x08011f01
 8011d80:	08011f01 	.word	0x08011f01
 8011d84:	08011f01 	.word	0x08011f01
 8011d88:	08011f01 	.word	0x08011f01
 8011d8c:	08011f01 	.word	0x08011f01
 8011d90:	08011f01 	.word	0x08011f01
 8011d94:	08011f01 	.word	0x08011f01
 8011d98:	08011f01 	.word	0x08011f01
 8011d9c:	08011f01 	.word	0x08011f01
 8011da0:	08011f01 	.word	0x08011f01
 8011da4:	08011f01 	.word	0x08011f01
 8011da8:	08011f01 	.word	0x08011f01
 8011dac:	08011f01 	.word	0x08011f01
 8011db0:	08011f01 	.word	0x08011f01
 8011db4:	08011f01 	.word	0x08011f01
 8011db8:	08011f01 	.word	0x08011f01
 8011dbc:	08011f01 	.word	0x08011f01
 8011dc0:	08011f01 	.word	0x08011f01
 8011dc4:	08011f01 	.word	0x08011f01
 8011dc8:	08011f01 	.word	0x08011f01
 8011dcc:	08011f01 	.word	0x08011f01
 8011dd0:	08011f01 	.word	0x08011f01
 8011dd4:	08011f01 	.word	0x08011f01
 8011dd8:	08011f01 	.word	0x08011f01
 8011ddc:	08011f01 	.word	0x08011f01
 8011de0:	08011f01 	.word	0x08011f01
 8011de4:	08011f01 	.word	0x08011f01
 8011de8:	08011e5f 	.word	0x08011e5f
 8011dec:	2b9e      	cmp	r3, #158	; 0x9e
 8011dee:	d051      	beq.n	8011e94 <SCSI_ProcessCmd+0x26c>
 8011df0:	e086      	b.n	8011f00 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8011df2:	7afb      	ldrb	r3, [r7, #11]
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	4619      	mov	r1, r3
 8011df8:	68f8      	ldr	r0, [r7, #12]
 8011dfa:	f000 f893 	bl	8011f24 <SCSI_TestUnitReady>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	75fb      	strb	r3, [r7, #23]
      break;
 8011e02:	e089      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8011e04:	7afb      	ldrb	r3, [r7, #11]
 8011e06:	687a      	ldr	r2, [r7, #4]
 8011e08:	4619      	mov	r1, r3
 8011e0a:	68f8      	ldr	r0, [r7, #12]
 8011e0c:	f000 fb38 	bl	8012480 <SCSI_RequestSense>
 8011e10:	4603      	mov	r3, r0
 8011e12:	75fb      	strb	r3, [r7, #23]
      break;
 8011e14:	e080      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8011e16:	7afb      	ldrb	r3, [r7, #11]
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	68f8      	ldr	r0, [r7, #12]
 8011e1e:	f000 f8d1 	bl	8011fc4 <SCSI_Inquiry>
 8011e22:	4603      	mov	r3, r0
 8011e24:	75fb      	strb	r3, [r7, #23]
      break;
 8011e26:	e077      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8011e28:	7afb      	ldrb	r3, [r7, #11]
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	68f8      	ldr	r0, [r7, #12]
 8011e30:	f000 fbec 	bl	801260c <SCSI_StartStopUnit>
 8011e34:	4603      	mov	r3, r0
 8011e36:	75fb      	strb	r3, [r7, #23]
      break;
 8011e38:	e06e      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8011e3a:	7afb      	ldrb	r3, [r7, #11]
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	4619      	mov	r1, r3
 8011e40:	68f8      	ldr	r0, [r7, #12]
 8011e42:	f000 fc34 	bl	80126ae <SCSI_AllowPreventRemovable>
 8011e46:	4603      	mov	r3, r0
 8011e48:	75fb      	strb	r3, [r7, #23]
      break;
 8011e4a:	e065      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8011e4c:	7afb      	ldrb	r3, [r7, #11]
 8011e4e:	687a      	ldr	r2, [r7, #4]
 8011e50:	4619      	mov	r1, r3
 8011e52:	68f8      	ldr	r0, [r7, #12]
 8011e54:	f000 fabc 	bl	80123d0 <SCSI_ModeSense6>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8011e5c:	e05c      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8011e5e:	7afb      	ldrb	r3, [r7, #11]
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	4619      	mov	r1, r3
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	f000 fadf 	bl	8012428 <SCSI_ModeSense10>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8011e6e:	e053      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8011e70:	7afb      	ldrb	r3, [r7, #11]
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	4619      	mov	r1, r3
 8011e76:	68f8      	ldr	r0, [r7, #12]
 8011e78:	f000 fa37 	bl	80122ea <SCSI_ReadFormatCapacity>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8011e80:	e04a      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8011e82:	7afb      	ldrb	r3, [r7, #11]
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	4619      	mov	r1, r3
 8011e88:	68f8      	ldr	r0, [r7, #12]
 8011e8a:	f000 f90f 	bl	80120ac <SCSI_ReadCapacity10>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	75fb      	strb	r3, [r7, #23]
      break;
 8011e92:	e041      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8011e94:	7afb      	ldrb	r3, [r7, #11]
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	4619      	mov	r1, r3
 8011e9a:	68f8      	ldr	r0, [r7, #12]
 8011e9c:	f000 f97b 	bl	8012196 <SCSI_ReadCapacity16>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8011ea4:	e038      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8011ea6:	7afb      	ldrb	r3, [r7, #11]
 8011ea8:	687a      	ldr	r2, [r7, #4]
 8011eaa:	4619      	mov	r1, r3
 8011eac:	68f8      	ldr	r0, [r7, #12]
 8011eae:	f000 fc27 	bl	8012700 <SCSI_Read10>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8011eb6:	e02f      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8011eb8:	7afb      	ldrb	r3, [r7, #11]
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	4619      	mov	r1, r3
 8011ebe:	68f8      	ldr	r0, [r7, #12]
 8011ec0:	f000 fcbe 	bl	8012840 <SCSI_Read12>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8011ec8:	e026      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8011eca:	7afb      	ldrb	r3, [r7, #11]
 8011ecc:	687a      	ldr	r2, [r7, #4]
 8011ece:	4619      	mov	r1, r3
 8011ed0:	68f8      	ldr	r0, [r7, #12]
 8011ed2:	f000 fd60 	bl	8012996 <SCSI_Write10>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8011eda:	e01d      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8011edc:	7afb      	ldrb	r3, [r7, #11]
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	68f8      	ldr	r0, [r7, #12]
 8011ee4:	f000 fe1c 	bl	8012b20 <SCSI_Write12>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	75fb      	strb	r3, [r7, #23]
      break;
 8011eec:	e014      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8011eee:	7afb      	ldrb	r3, [r7, #11]
 8011ef0:	687a      	ldr	r2, [r7, #4]
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f000 fee8 	bl	8012cca <SCSI_Verify10>
 8011efa:	4603      	mov	r3, r0
 8011efc:	75fb      	strb	r3, [r7, #23]
      break;
 8011efe:	e00b      	b.n	8011f18 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8011f00:	7af9      	ldrb	r1, [r7, #11]
 8011f02:	2320      	movs	r3, #32
 8011f04:	2205      	movs	r2, #5
 8011f06:	68f8      	ldr	r0, [r7, #12]
 8011f08:	f000 fb39 	bl	801257e <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	2202      	movs	r2, #2
 8011f10:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8011f12:	23ff      	movs	r3, #255	; 0xff
 8011f14:	75fb      	strb	r3, [r7, #23]
      break;
 8011f16:	bf00      	nop
  }

  return ret;
 8011f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3718      	adds	r7, #24
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}

08011f24 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b086      	sub	sp, #24
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	460b      	mov	r3, r1
 8011f2e:	607a      	str	r2, [r7, #4]
 8011f30:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f38:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d102      	bne.n	8011f46 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8011f40:	f04f 33ff 	mov.w	r3, #4294967295
 8011f44:	e03a      	b.n	8011fbc <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d00a      	beq.n	8011f66 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011f56:	2320      	movs	r3, #32
 8011f58:	2205      	movs	r2, #5
 8011f5a:	68f8      	ldr	r0, [r7, #12]
 8011f5c:	f000 fb0f 	bl	801257e <SCSI_SenseCode>

    return -1;
 8011f60:	f04f 33ff 	mov.w	r3, #4294967295
 8011f64:	e02a      	b.n	8011fbc <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011f66:	697b      	ldr	r3, [r7, #20]
 8011f68:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011f6c:	2b02      	cmp	r3, #2
 8011f6e:	d10b      	bne.n	8011f88 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011f70:	7af9      	ldrb	r1, [r7, #11]
 8011f72:	233a      	movs	r3, #58	; 0x3a
 8011f74:	2202      	movs	r2, #2
 8011f76:	68f8      	ldr	r0, [r7, #12]
 8011f78:	f000 fb01 	bl	801257e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	2205      	movs	r2, #5
 8011f80:	721a      	strb	r2, [r3, #8]
    return -1;
 8011f82:	f04f 33ff 	mov.w	r3, #4294967295
 8011f86:	e019      	b.n	8011fbc <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011f8e:	689b      	ldr	r3, [r3, #8]
 8011f90:	7afa      	ldrb	r2, [r7, #11]
 8011f92:	4610      	mov	r0, r2
 8011f94:	4798      	blx	r3
 8011f96:	4603      	mov	r3, r0
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d00b      	beq.n	8011fb4 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011f9c:	7af9      	ldrb	r1, [r7, #11]
 8011f9e:	233a      	movs	r3, #58	; 0x3a
 8011fa0:	2202      	movs	r2, #2
 8011fa2:	68f8      	ldr	r0, [r7, #12]
 8011fa4:	f000 faeb 	bl	801257e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	2205      	movs	r2, #5
 8011fac:	721a      	strb	r2, [r3, #8]

    return -1;
 8011fae:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb2:	e003      	b.n	8011fbc <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	60da      	str	r2, [r3, #12]

  return 0;
 8011fba:	2300      	movs	r3, #0
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3718      	adds	r7, #24
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b088      	sub	sp, #32
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	460b      	mov	r3, r1
 8011fce:	607a      	str	r2, [r7, #4]
 8011fd0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fd8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011fda:	69bb      	ldr	r3, [r7, #24]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d102      	bne.n	8011fe6 <SCSI_Inquiry+0x22>
  {
    return -1;
 8011fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8011fe4:	e05a      	b.n	801209c <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8011fe6:	69bb      	ldr	r3, [r7, #24]
 8011fe8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d10a      	bne.n	8012006 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011ff0:	69bb      	ldr	r3, [r7, #24]
 8011ff2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011ff6:	2320      	movs	r3, #32
 8011ff8:	2205      	movs	r2, #5
 8011ffa:	68f8      	ldr	r0, [r7, #12]
 8011ffc:	f000 fabf 	bl	801257e <SCSI_SenseCode>
    return -1;
 8012000:	f04f 33ff 	mov.w	r3, #4294967295
 8012004:	e04a      	b.n	801209c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	3301      	adds	r3, #1
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	f003 0301 	and.w	r3, r3, #1
 8012010:	2b00      	cmp	r3, #0
 8012012:	d020      	beq.n	8012056 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	3302      	adds	r3, #2
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d105      	bne.n	801202a <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801201e:	2206      	movs	r2, #6
 8012020:	4920      	ldr	r1, [pc, #128]	; (80120a4 <SCSI_Inquiry+0xe0>)
 8012022:	69b8      	ldr	r0, [r7, #24]
 8012024:	f000 ffb4 	bl	8012f90 <SCSI_UpdateBotData>
 8012028:	e037      	b.n	801209a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	3302      	adds	r3, #2
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	2b80      	cmp	r3, #128	; 0x80
 8012032:	d105      	bne.n	8012040 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8012034:	2208      	movs	r2, #8
 8012036:	491c      	ldr	r1, [pc, #112]	; (80120a8 <SCSI_Inquiry+0xe4>)
 8012038:	69b8      	ldr	r0, [r7, #24]
 801203a:	f000 ffa9 	bl	8012f90 <SCSI_UpdateBotData>
 801203e:	e02c      	b.n	801209a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8012040:	69bb      	ldr	r3, [r7, #24]
 8012042:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012046:	2324      	movs	r3, #36	; 0x24
 8012048:	2205      	movs	r2, #5
 801204a:	68f8      	ldr	r0, [r7, #12]
 801204c:	f000 fa97 	bl	801257e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8012050:	f04f 33ff 	mov.w	r3, #4294967295
 8012054:	e022      	b.n	801209c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801205c:	69d9      	ldr	r1, [r3, #28]
 801205e:	7afa      	ldrb	r2, [r7, #11]
 8012060:	4613      	mov	r3, r2
 8012062:	00db      	lsls	r3, r3, #3
 8012064:	4413      	add	r3, r2
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	440b      	add	r3, r1
 801206a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	3304      	adds	r3, #4
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	b29b      	uxth	r3, r3
 8012074:	3305      	adds	r3, #5
 8012076:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	3304      	adds	r3, #4
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	b29b      	uxth	r3, r3
 8012080:	8bfa      	ldrh	r2, [r7, #30]
 8012082:	429a      	cmp	r2, r3
 8012084:	d303      	bcc.n	801208e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	3304      	adds	r3, #4
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801208e:	8bfb      	ldrh	r3, [r7, #30]
 8012090:	461a      	mov	r2, r3
 8012092:	6979      	ldr	r1, [r7, #20]
 8012094:	69b8      	ldr	r0, [r7, #24]
 8012096:	f000 ff7b 	bl	8012f90 <SCSI_UpdateBotData>
  }

  return 0;
 801209a:	2300      	movs	r3, #0
}
 801209c:	4618      	mov	r0, r3
 801209e:	3720      	adds	r7, #32
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	200000b0 	.word	0x200000b0
 80120a8:	200000b8 	.word	0x200000b8

080120ac <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b086      	sub	sp, #24
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	60f8      	str	r0, [r7, #12]
 80120b4:	460b      	mov	r3, r1
 80120b6:	607a      	str	r2, [r7, #4]
 80120b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80120c0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d102      	bne.n	80120ce <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 80120c8:	f04f 33ff 	mov.w	r3, #4294967295
 80120cc:	e05f      	b.n	801218e <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80120d4:	685b      	ldr	r3, [r3, #4]
 80120d6:	697a      	ldr	r2, [r7, #20]
 80120d8:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80120dc:	697a      	ldr	r2, [r7, #20]
 80120de:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80120e2:	7af8      	ldrb	r0, [r7, #11]
 80120e4:	4798      	blx	r3
 80120e6:	4603      	mov	r3, r0
 80120e8:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80120ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d104      	bne.n	80120fc <SCSI_ReadCapacity10+0x50>
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80120f8:	2b02      	cmp	r3, #2
 80120fa:	d108      	bne.n	801210e <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80120fc:	7af9      	ldrb	r1, [r7, #11]
 80120fe:	233a      	movs	r3, #58	; 0x3a
 8012100:	2202      	movs	r2, #2
 8012102:	68f8      	ldr	r0, [r7, #12]
 8012104:	f000 fa3b 	bl	801257e <SCSI_SenseCode>
    return -1;
 8012108:	f04f 33ff 	mov.w	r3, #4294967295
 801210c:	e03f      	b.n	801218e <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012114:	3b01      	subs	r3, #1
 8012116:	0e1b      	lsrs	r3, r3, #24
 8012118:	b2da      	uxtb	r2, r3
 801211a:	697b      	ldr	r3, [r7, #20]
 801211c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012124:	3b01      	subs	r3, #1
 8012126:	0c1b      	lsrs	r3, r3, #16
 8012128:	b2da      	uxtb	r2, r3
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012134:	3b01      	subs	r3, #1
 8012136:	0a1b      	lsrs	r3, r3, #8
 8012138:	b2da      	uxtb	r2, r3
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012144:	b2db      	uxtb	r3, r3
 8012146:	3b01      	subs	r3, #1
 8012148:	b2da      	uxtb	r2, r3
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012154:	161b      	asrs	r3, r3, #24
 8012156:	b2da      	uxtb	r2, r3
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012162:	141b      	asrs	r3, r3, #16
 8012164:	b2da      	uxtb	r2, r3
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012170:	0a1b      	lsrs	r3, r3, #8
 8012172:	b29b      	uxth	r3, r3
 8012174:	b2da      	uxtb	r2, r3
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012180:	b2da      	uxtb	r2, r3
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8012186:	697b      	ldr	r3, [r7, #20]
 8012188:	2208      	movs	r2, #8
 801218a:	60da      	str	r2, [r3, #12]

  return 0;
 801218c:	2300      	movs	r3, #0

}
 801218e:	4618      	mov	r0, r3
 8012190:	3718      	adds	r7, #24
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}

08012196 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012196:	b580      	push	{r7, lr}
 8012198:	b088      	sub	sp, #32
 801219a:	af00      	add	r7, sp, #0
 801219c:	60f8      	str	r0, [r7, #12]
 801219e:	460b      	mov	r3, r1
 80121a0:	607a      	str	r2, [r7, #4]
 80121a2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80121aa:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80121ac:	69bb      	ldr	r3, [r7, #24]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d102      	bne.n	80121b8 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 80121b2:	f04f 33ff 	mov.w	r3, #4294967295
 80121b6:	e094      	b.n	80122e2 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80121be:	685b      	ldr	r3, [r3, #4]
 80121c0:	69ba      	ldr	r2, [r7, #24]
 80121c2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80121c6:	69ba      	ldr	r2, [r7, #24]
 80121c8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80121cc:	7af8      	ldrb	r0, [r7, #11]
 80121ce:	4798      	blx	r3
 80121d0:	4603      	mov	r3, r0
 80121d2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80121d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d104      	bne.n	80121e6 <SCSI_ReadCapacity16+0x50>
 80121dc:	69bb      	ldr	r3, [r7, #24]
 80121de:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80121e2:	2b02      	cmp	r3, #2
 80121e4:	d108      	bne.n	80121f8 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80121e6:	7af9      	ldrb	r1, [r7, #11]
 80121e8:	233a      	movs	r3, #58	; 0x3a
 80121ea:	2202      	movs	r2, #2
 80121ec:	68f8      	ldr	r0, [r7, #12]
 80121ee:	f000 f9c6 	bl	801257e <SCSI_SenseCode>
    return -1;
 80121f2:	f04f 33ff 	mov.w	r3, #4294967295
 80121f6:	e074      	b.n	80122e2 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	330a      	adds	r3, #10
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	330b      	adds	r3, #11
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012208:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	330c      	adds	r3, #12
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012212:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	320d      	adds	r2, #13
 8012218:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801221a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012220:	2300      	movs	r3, #0
 8012222:	77fb      	strb	r3, [r7, #31]
 8012224:	e007      	b.n	8012236 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8012226:	7ffb      	ldrb	r3, [r7, #31]
 8012228:	69ba      	ldr	r2, [r7, #24]
 801222a:	4413      	add	r3, r2
 801222c:	2200      	movs	r2, #0
 801222e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012230:	7ffb      	ldrb	r3, [r7, #31]
 8012232:	3301      	adds	r3, #1
 8012234:	77fb      	strb	r3, [r7, #31]
 8012236:	7ffa      	ldrb	r2, [r7, #31]
 8012238:	69bb      	ldr	r3, [r7, #24]
 801223a:	68db      	ldr	r3, [r3, #12]
 801223c:	429a      	cmp	r2, r3
 801223e:	d3f2      	bcc.n	8012226 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012240:	69bb      	ldr	r3, [r7, #24]
 8012242:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012246:	3b01      	subs	r3, #1
 8012248:	0e1b      	lsrs	r3, r3, #24
 801224a:	b2da      	uxtb	r2, r3
 801224c:	69bb      	ldr	r3, [r7, #24]
 801224e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012256:	3b01      	subs	r3, #1
 8012258:	0c1b      	lsrs	r3, r3, #16
 801225a:	b2da      	uxtb	r2, r3
 801225c:	69bb      	ldr	r3, [r7, #24]
 801225e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012260:	69bb      	ldr	r3, [r7, #24]
 8012262:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012266:	3b01      	subs	r3, #1
 8012268:	0a1b      	lsrs	r3, r3, #8
 801226a:	b2da      	uxtb	r2, r3
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012270:	69bb      	ldr	r3, [r7, #24]
 8012272:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012276:	b2db      	uxtb	r3, r3
 8012278:	3b01      	subs	r3, #1
 801227a:	b2da      	uxtb	r2, r3
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012286:	161b      	asrs	r3, r3, #24
 8012288:	b2da      	uxtb	r2, r3
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801228e:	69bb      	ldr	r3, [r7, #24]
 8012290:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012294:	141b      	asrs	r3, r3, #16
 8012296:	b2da      	uxtb	r2, r3
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80122a2:	0a1b      	lsrs	r3, r3, #8
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	b2da      	uxtb	r2, r3
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80122ac:	69bb      	ldr	r3, [r7, #24]
 80122ae:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80122b2:	b2da      	uxtb	r2, r3
 80122b4:	69bb      	ldr	r3, [r7, #24]
 80122b6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	330a      	adds	r3, #10
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	330b      	adds	r3, #11
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80122c8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	330c      	adds	r3, #12
 80122ce:	781b      	ldrb	r3, [r3, #0]
 80122d0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80122d2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80122d4:	687a      	ldr	r2, [r7, #4]
 80122d6:	320d      	adds	r2, #13
 80122d8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80122da:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80122dc:	69bb      	ldr	r3, [r7, #24]
 80122de:	60da      	str	r2, [r3, #12]

  return 0;
 80122e0:	2300      	movs	r3, #0
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3720      	adds	r7, #32
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}

080122ea <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80122ea:	b580      	push	{r7, lr}
 80122ec:	b088      	sub	sp, #32
 80122ee:	af00      	add	r7, sp, #0
 80122f0:	60f8      	str	r0, [r7, #12]
 80122f2:	460b      	mov	r3, r1
 80122f4:	607a      	str	r2, [r7, #4]
 80122f6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80122fe:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012300:	69bb      	ldr	r3, [r7, #24]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d102      	bne.n	801230c <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8012306:	f04f 33ff 	mov.w	r3, #4294967295
 801230a:	e05c      	b.n	80123c6 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012312:	685b      	ldr	r3, [r3, #4]
 8012314:	f107 0214 	add.w	r2, r7, #20
 8012318:	f107 0110 	add.w	r1, r7, #16
 801231c:	7af8      	ldrb	r0, [r7, #11]
 801231e:	4798      	blx	r3
 8012320:	4603      	mov	r3, r0
 8012322:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d104      	bne.n	8012336 <SCSI_ReadFormatCapacity+0x4c>
 801232c:	69bb      	ldr	r3, [r7, #24]
 801232e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012332:	2b02      	cmp	r3, #2
 8012334:	d108      	bne.n	8012348 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012336:	7af9      	ldrb	r1, [r7, #11]
 8012338:	233a      	movs	r3, #58	; 0x3a
 801233a:	2202      	movs	r2, #2
 801233c:	68f8      	ldr	r0, [r7, #12]
 801233e:	f000 f91e 	bl	801257e <SCSI_SenseCode>
    return -1;
 8012342:	f04f 33ff 	mov.w	r3, #4294967295
 8012346:	e03e      	b.n	80123c6 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8012348:	2300      	movs	r3, #0
 801234a:	83fb      	strh	r3, [r7, #30]
 801234c:	e007      	b.n	801235e <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 801234e:	8bfb      	ldrh	r3, [r7, #30]
 8012350:	69ba      	ldr	r2, [r7, #24]
 8012352:	4413      	add	r3, r2
 8012354:	2200      	movs	r2, #0
 8012356:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8012358:	8bfb      	ldrh	r3, [r7, #30]
 801235a:	3301      	adds	r3, #1
 801235c:	83fb      	strh	r3, [r7, #30]
 801235e:	8bfb      	ldrh	r3, [r7, #30]
 8012360:	2b0b      	cmp	r3, #11
 8012362:	d9f4      	bls.n	801234e <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8012364:	69bb      	ldr	r3, [r7, #24]
 8012366:	2208      	movs	r2, #8
 8012368:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	3b01      	subs	r3, #1
 801236e:	0e1b      	lsrs	r3, r3, #24
 8012370:	b2da      	uxtb	r2, r3
 8012372:	69bb      	ldr	r3, [r7, #24]
 8012374:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	3b01      	subs	r3, #1
 801237a:	0c1b      	lsrs	r3, r3, #16
 801237c:	b2da      	uxtb	r2, r3
 801237e:	69bb      	ldr	r3, [r7, #24]
 8012380:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	3b01      	subs	r3, #1
 8012386:	0a1b      	lsrs	r3, r3, #8
 8012388:	b2da      	uxtb	r2, r3
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	b2db      	uxtb	r3, r3
 8012392:	3b01      	subs	r3, #1
 8012394:	b2da      	uxtb	r2, r3
 8012396:	69bb      	ldr	r3, [r7, #24]
 8012398:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801239a:	69bb      	ldr	r3, [r7, #24]
 801239c:	2202      	movs	r2, #2
 801239e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80123a0:	8abb      	ldrh	r3, [r7, #20]
 80123a2:	141b      	asrs	r3, r3, #16
 80123a4:	b2da      	uxtb	r2, r3
 80123a6:	69bb      	ldr	r3, [r7, #24]
 80123a8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80123aa:	8abb      	ldrh	r3, [r7, #20]
 80123ac:	0a1b      	lsrs	r3, r3, #8
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	b2da      	uxtb	r2, r3
 80123b2:	69bb      	ldr	r3, [r7, #24]
 80123b4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80123b6:	8abb      	ldrh	r3, [r7, #20]
 80123b8:	b2da      	uxtb	r2, r3
 80123ba:	69bb      	ldr	r3, [r7, #24]
 80123bc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80123be:	69bb      	ldr	r3, [r7, #24]
 80123c0:	220c      	movs	r2, #12
 80123c2:	60da      	str	r2, [r3, #12]

  return 0;
 80123c4:	2300      	movs	r3, #0
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	3720      	adds	r7, #32
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
	...

080123d0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b086      	sub	sp, #24
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	460b      	mov	r3, r1
 80123da:	607a      	str	r2, [r7, #4]
 80123dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80123e4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80123e6:	2317      	movs	r3, #23
 80123e8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d102      	bne.n	80123f6 <SCSI_ModeSense6+0x26>
  {
    return -1;
 80123f0:	f04f 33ff 	mov.w	r3, #4294967295
 80123f4:	e011      	b.n	801241a <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	3304      	adds	r3, #4
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	b29b      	uxth	r3, r3
 80123fe:	8afa      	ldrh	r2, [r7, #22]
 8012400:	429a      	cmp	r2, r3
 8012402:	d303      	bcc.n	801240c <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	3304      	adds	r3, #4
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801240c:	8afb      	ldrh	r3, [r7, #22]
 801240e:	461a      	mov	r2, r3
 8012410:	4904      	ldr	r1, [pc, #16]	; (8012424 <SCSI_ModeSense6+0x54>)
 8012412:	6938      	ldr	r0, [r7, #16]
 8012414:	f000 fdbc 	bl	8012f90 <SCSI_UpdateBotData>

  return 0;
 8012418:	2300      	movs	r3, #0
}
 801241a:	4618      	mov	r0, r3
 801241c:	3718      	adds	r7, #24
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	200000c0 	.word	0x200000c0

08012428 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b086      	sub	sp, #24
 801242c:	af00      	add	r7, sp, #0
 801242e:	60f8      	str	r0, [r7, #12]
 8012430:	460b      	mov	r3, r1
 8012432:	607a      	str	r2, [r7, #4]
 8012434:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801243c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801243e:	231b      	movs	r3, #27
 8012440:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012442:	693b      	ldr	r3, [r7, #16]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d102      	bne.n	801244e <SCSI_ModeSense10+0x26>
  {
    return -1;
 8012448:	f04f 33ff 	mov.w	r3, #4294967295
 801244c:	e011      	b.n	8012472 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	3308      	adds	r3, #8
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	b29b      	uxth	r3, r3
 8012456:	8afa      	ldrh	r2, [r7, #22]
 8012458:	429a      	cmp	r2, r3
 801245a:	d303      	bcc.n	8012464 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	3308      	adds	r3, #8
 8012460:	781b      	ldrb	r3, [r3, #0]
 8012462:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8012464:	8afb      	ldrh	r3, [r7, #22]
 8012466:	461a      	mov	r2, r3
 8012468:	4904      	ldr	r1, [pc, #16]	; (801247c <SCSI_ModeSense10+0x54>)
 801246a:	6938      	ldr	r0, [r7, #16]
 801246c:	f000 fd90 	bl	8012f90 <SCSI_UpdateBotData>

  return 0;
 8012470:	2300      	movs	r3, #0
}
 8012472:	4618      	mov	r0, r3
 8012474:	3718      	adds	r7, #24
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	200000d8 	.word	0x200000d8

08012480 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b086      	sub	sp, #24
 8012484:	af00      	add	r7, sp, #0
 8012486:	60f8      	str	r0, [r7, #12]
 8012488:	460b      	mov	r3, r1
 801248a:	607a      	str	r2, [r7, #4]
 801248c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012494:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d102      	bne.n	80124a2 <SCSI_RequestSense+0x22>
  {
    return -1;
 801249c:	f04f 33ff 	mov.w	r3, #4294967295
 80124a0:	e069      	b.n	8012576 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d10a      	bne.n	80124c2 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80124b2:	2320      	movs	r3, #32
 80124b4:	2205      	movs	r2, #5
 80124b6:	68f8      	ldr	r0, [r7, #12]
 80124b8:	f000 f861 	bl	801257e <SCSI_SenseCode>
    return -1;
 80124bc:	f04f 33ff 	mov.w	r3, #4294967295
 80124c0:	e059      	b.n	8012576 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80124c2:	2300      	movs	r3, #0
 80124c4:	75fb      	strb	r3, [r7, #23]
 80124c6:	e007      	b.n	80124d8 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 80124c8:	7dfb      	ldrb	r3, [r7, #23]
 80124ca:	693a      	ldr	r2, [r7, #16]
 80124cc:	4413      	add	r3, r2
 80124ce:	2200      	movs	r2, #0
 80124d0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80124d2:	7dfb      	ldrb	r3, [r7, #23]
 80124d4:	3301      	adds	r3, #1
 80124d6:	75fb      	strb	r3, [r7, #23]
 80124d8:	7dfb      	ldrb	r3, [r7, #23]
 80124da:	2b11      	cmp	r3, #17
 80124dc:	d9f4      	bls.n	80124c8 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	2270      	movs	r2, #112	; 0x70
 80124e2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80124e4:	693b      	ldr	r3, [r7, #16]
 80124e6:	220c      	movs	r2, #12
 80124e8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d02e      	beq.n	8012558 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012500:	461a      	mov	r2, r3
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	3248      	adds	r2, #72	; 0x48
 8012506:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012514:	693a      	ldr	r2, [r7, #16]
 8012516:	3348      	adds	r3, #72	; 0x48
 8012518:	00db      	lsls	r3, r3, #3
 801251a:	4413      	add	r3, r2
 801251c:	791a      	ldrb	r2, [r3, #4]
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012528:	693a      	ldr	r2, [r7, #16]
 801252a:	3348      	adds	r3, #72	; 0x48
 801252c:	00db      	lsls	r3, r3, #3
 801252e:	4413      	add	r3, r2
 8012530:	795a      	ldrb	r2, [r3, #5]
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801253c:	3301      	adds	r3, #1
 801253e:	b2da      	uxtb	r2, r3
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801254c:	2b04      	cmp	r3, #4
 801254e:	d103      	bne.n	8012558 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	2200      	movs	r2, #0
 8012554:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	2212      	movs	r2, #18
 801255c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	3304      	adds	r3, #4
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	2b12      	cmp	r3, #18
 8012566:	d805      	bhi.n	8012574 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	3304      	adds	r3, #4
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	461a      	mov	r2, r3
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8012574:	2300      	movs	r3, #0
}
 8012576:	4618      	mov	r0, r3
 8012578:	3718      	adds	r7, #24
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801257e:	b480      	push	{r7}
 8012580:	b085      	sub	sp, #20
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
 8012586:	4608      	mov	r0, r1
 8012588:	4611      	mov	r1, r2
 801258a:	461a      	mov	r2, r3
 801258c:	4603      	mov	r3, r0
 801258e:	70fb      	strb	r3, [r7, #3]
 8012590:	460b      	mov	r3, r1
 8012592:	70bb      	strb	r3, [r7, #2]
 8012594:	4613      	mov	r3, r2
 8012596:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801259e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d02c      	beq.n	8012600 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80125ac:	461a      	mov	r2, r3
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	3248      	adds	r2, #72	; 0x48
 80125b2:	78b9      	ldrb	r1, [r7, #2]
 80125b4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80125be:	68fa      	ldr	r2, [r7, #12]
 80125c0:	3348      	adds	r3, #72	; 0x48
 80125c2:	00db      	lsls	r3, r3, #3
 80125c4:	4413      	add	r3, r2
 80125c6:	787a      	ldrb	r2, [r7, #1]
 80125c8:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80125d0:	68fa      	ldr	r2, [r7, #12]
 80125d2:	3348      	adds	r3, #72	; 0x48
 80125d4:	00db      	lsls	r3, r3, #3
 80125d6:	4413      	add	r3, r2
 80125d8:	2200      	movs	r2, #0
 80125da:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80125e2:	3301      	adds	r3, #1
 80125e4:	b2da      	uxtb	r2, r3
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80125f2:	2b04      	cmp	r3, #4
 80125f4:	d105      	bne.n	8012602 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	2200      	movs	r2, #0
 80125fa:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80125fe:	e000      	b.n	8012602 <SCSI_SenseCode+0x84>
    return;
 8012600:	bf00      	nop
  }
}
 8012602:	3714      	adds	r7, #20
 8012604:	46bd      	mov	sp, r7
 8012606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260a:	4770      	bx	lr

0801260c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b086      	sub	sp, #24
 8012610:	af00      	add	r7, sp, #0
 8012612:	60f8      	str	r0, [r7, #12]
 8012614:	460b      	mov	r3, r1
 8012616:	607a      	str	r2, [r7, #4]
 8012618:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012620:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d102      	bne.n	801262e <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8012628:	f04f 33ff 	mov.w	r3, #4294967295
 801262c:	e03b      	b.n	80126a6 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012634:	2b01      	cmp	r3, #1
 8012636:	d10f      	bne.n	8012658 <SCSI_StartStopUnit+0x4c>
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	3304      	adds	r3, #4
 801263c:	781b      	ldrb	r3, [r3, #0]
 801263e:	f003 0303 	and.w	r3, r3, #3
 8012642:	2b02      	cmp	r3, #2
 8012644:	d108      	bne.n	8012658 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8012646:	7af9      	ldrb	r1, [r7, #11]
 8012648:	2324      	movs	r3, #36	; 0x24
 801264a:	2205      	movs	r2, #5
 801264c:	68f8      	ldr	r0, [r7, #12]
 801264e:	f7ff ff96 	bl	801257e <SCSI_SenseCode>

    return -1;
 8012652:	f04f 33ff 	mov.w	r3, #4294967295
 8012656:	e026      	b.n	80126a6 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	3304      	adds	r3, #4
 801265c:	781b      	ldrb	r3, [r3, #0]
 801265e:	f003 0303 	and.w	r3, r3, #3
 8012662:	2b01      	cmp	r3, #1
 8012664:	d104      	bne.n	8012670 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	2200      	movs	r2, #0
 801266a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801266e:	e016      	b.n	801269e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	3304      	adds	r3, #4
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	f003 0303 	and.w	r3, r3, #3
 801267a:	2b02      	cmp	r3, #2
 801267c:	d104      	bne.n	8012688 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	2202      	movs	r2, #2
 8012682:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8012686:	e00a      	b.n	801269e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	3304      	adds	r3, #4
 801268c:	781b      	ldrb	r3, [r3, #0]
 801268e:	f003 0303 	and.w	r3, r3, #3
 8012692:	2b03      	cmp	r3, #3
 8012694:	d103      	bne.n	801269e <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	2200      	movs	r2, #0
 801269a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801269e:	697b      	ldr	r3, [r7, #20]
 80126a0:	2200      	movs	r2, #0
 80126a2:	60da      	str	r2, [r3, #12]

  return 0;
 80126a4:	2300      	movs	r3, #0
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3718      	adds	r7, #24
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}

080126ae <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80126ae:	b480      	push	{r7}
 80126b0:	b087      	sub	sp, #28
 80126b2:	af00      	add	r7, sp, #0
 80126b4:	60f8      	str	r0, [r7, #12]
 80126b6:	460b      	mov	r3, r1
 80126b8:	607a      	str	r2, [r7, #4]
 80126ba:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80126c2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d102      	bne.n	80126d0 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80126ca:	f04f 33ff 	mov.w	r3, #4294967295
 80126ce:	e011      	b.n	80126f4 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	3304      	adds	r3, #4
 80126d4:	781b      	ldrb	r3, [r3, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d104      	bne.n	80126e4 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	2200      	movs	r2, #0
 80126de:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80126e2:	e003      	b.n	80126ec <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	2201      	movs	r2, #1
 80126e8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	2200      	movs	r2, #0
 80126f0:	60da      	str	r2, [r3, #12]

  return 0;
 80126f2:	2300      	movs	r3, #0
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	371c      	adds	r7, #28
 80126f8:	46bd      	mov	sp, r7
 80126fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fe:	4770      	bx	lr

08012700 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b086      	sub	sp, #24
 8012704:	af00      	add	r7, sp, #0
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	460b      	mov	r3, r1
 801270a:	607a      	str	r2, [r7, #4]
 801270c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012714:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d102      	bne.n	8012722 <SCSI_Read10+0x22>
  {
    return -1;
 801271c:	f04f 33ff 	mov.w	r3, #4294967295
 8012720:	e08a      	b.n	8012838 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	7a1b      	ldrb	r3, [r3, #8]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d17c      	bne.n	8012824 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012730:	b25b      	sxtb	r3, r3
 8012732:	2b00      	cmp	r3, #0
 8012734:	db0a      	blt.n	801274c <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801273c:	2320      	movs	r3, #32
 801273e:	2205      	movs	r2, #5
 8012740:	68f8      	ldr	r0, [r7, #12]
 8012742:	f7ff ff1c 	bl	801257e <SCSI_SenseCode>
      return -1;
 8012746:	f04f 33ff 	mov.w	r3, #4294967295
 801274a:	e075      	b.n	8012838 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012752:	2b02      	cmp	r3, #2
 8012754:	d108      	bne.n	8012768 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012756:	7af9      	ldrb	r1, [r7, #11]
 8012758:	233a      	movs	r3, #58	; 0x3a
 801275a:	2202      	movs	r2, #2
 801275c:	68f8      	ldr	r0, [r7, #12]
 801275e:	f7ff ff0e 	bl	801257e <SCSI_SenseCode>

      return -1;
 8012762:	f04f 33ff 	mov.w	r3, #4294967295
 8012766:	e067      	b.n	8012838 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801276e:	689b      	ldr	r3, [r3, #8]
 8012770:	7afa      	ldrb	r2, [r7, #11]
 8012772:	4610      	mov	r0, r2
 8012774:	4798      	blx	r3
 8012776:	4603      	mov	r3, r0
 8012778:	2b00      	cmp	r3, #0
 801277a:	d008      	beq.n	801278e <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801277c:	7af9      	ldrb	r1, [r7, #11]
 801277e:	233a      	movs	r3, #58	; 0x3a
 8012780:	2202      	movs	r2, #2
 8012782:	68f8      	ldr	r0, [r7, #12]
 8012784:	f7ff fefb 	bl	801257e <SCSI_SenseCode>
      return -1;
 8012788:	f04f 33ff 	mov.w	r3, #4294967295
 801278c:	e054      	b.n	8012838 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	3302      	adds	r3, #2
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	3303      	adds	r3, #3
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801279e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	3304      	adds	r3, #4
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80127a8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80127aa:	687a      	ldr	r2, [r7, #4]
 80127ac:	3205      	adds	r2, #5
 80127ae:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80127b0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	3307      	adds	r3, #7
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	021b      	lsls	r3, r3, #8
 80127c0:	687a      	ldr	r2, [r7, #4]
 80127c2:	3208      	adds	r2, #8
 80127c4:	7812      	ldrb	r2, [r2, #0]
 80127c6:	431a      	orrs	r2, r3
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80127da:	7af9      	ldrb	r1, [r7, #11]
 80127dc:	68f8      	ldr	r0, [r7, #12]
 80127de:	f000 faad 	bl	8012d3c <SCSI_CheckAddressRange>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	da02      	bge.n	80127ee <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80127e8:	f04f 33ff 	mov.w	r3, #4294967295
 80127ec:	e024      	b.n	8012838 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80127ee:	697b      	ldr	r3, [r7, #20]
 80127f0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80127fa:	6979      	ldr	r1, [r7, #20]
 80127fc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8012800:	fb01 f303 	mul.w	r3, r1, r3
 8012804:	429a      	cmp	r2, r3
 8012806:	d00a      	beq.n	801281e <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801280e:	2320      	movs	r3, #32
 8012810:	2205      	movs	r2, #5
 8012812:	68f8      	ldr	r0, [r7, #12]
 8012814:	f7ff feb3 	bl	801257e <SCSI_SenseCode>
      return -1;
 8012818:	f04f 33ff 	mov.w	r3, #4294967295
 801281c:	e00c      	b.n	8012838 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	2202      	movs	r2, #2
 8012822:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	f44f 7200 	mov.w	r2, #512	; 0x200
 801282a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801282c:	7afb      	ldrb	r3, [r7, #11]
 801282e:	4619      	mov	r1, r3
 8012830:	68f8      	ldr	r0, [r7, #12]
 8012832:	f000 faab 	bl	8012d8c <SCSI_ProcessRead>
 8012836:	4603      	mov	r3, r0
}
 8012838:	4618      	mov	r0, r3
 801283a:	3718      	adds	r7, #24
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}

08012840 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b086      	sub	sp, #24
 8012844:	af00      	add	r7, sp, #0
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	460b      	mov	r3, r1
 801284a:	607a      	str	r2, [r7, #4]
 801284c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012854:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d102      	bne.n	8012862 <SCSI_Read12+0x22>
  {
    return -1;
 801285c:	f04f 33ff 	mov.w	r3, #4294967295
 8012860:	e095      	b.n	801298e <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	7a1b      	ldrb	r3, [r3, #8]
 8012866:	2b00      	cmp	r3, #0
 8012868:	f040 8087 	bne.w	801297a <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012872:	b25b      	sxtb	r3, r3
 8012874:	2b00      	cmp	r3, #0
 8012876:	db0a      	blt.n	801288e <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801287e:	2320      	movs	r3, #32
 8012880:	2205      	movs	r2, #5
 8012882:	68f8      	ldr	r0, [r7, #12]
 8012884:	f7ff fe7b 	bl	801257e <SCSI_SenseCode>
      return -1;
 8012888:	f04f 33ff 	mov.w	r3, #4294967295
 801288c:	e07f      	b.n	801298e <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801288e:	697b      	ldr	r3, [r7, #20]
 8012890:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012894:	2b02      	cmp	r3, #2
 8012896:	d108      	bne.n	80128aa <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012898:	7af9      	ldrb	r1, [r7, #11]
 801289a:	233a      	movs	r3, #58	; 0x3a
 801289c:	2202      	movs	r2, #2
 801289e:	68f8      	ldr	r0, [r7, #12]
 80128a0:	f7ff fe6d 	bl	801257e <SCSI_SenseCode>
      return -1;
 80128a4:	f04f 33ff 	mov.w	r3, #4294967295
 80128a8:	e071      	b.n	801298e <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80128b0:	689b      	ldr	r3, [r3, #8]
 80128b2:	7afa      	ldrb	r2, [r7, #11]
 80128b4:	4610      	mov	r0, r2
 80128b6:	4798      	blx	r3
 80128b8:	4603      	mov	r3, r0
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d008      	beq.n	80128d0 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80128be:	7af9      	ldrb	r1, [r7, #11]
 80128c0:	233a      	movs	r3, #58	; 0x3a
 80128c2:	2202      	movs	r2, #2
 80128c4:	68f8      	ldr	r0, [r7, #12]
 80128c6:	f7ff fe5a 	bl	801257e <SCSI_SenseCode>
      return -1;
 80128ca:	f04f 33ff 	mov.w	r3, #4294967295
 80128ce:	e05e      	b.n	801298e <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	3302      	adds	r3, #2
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	3303      	adds	r3, #3
 80128dc:	781b      	ldrb	r3, [r3, #0]
 80128de:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80128e0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	3304      	adds	r3, #4
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80128ea:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80128ec:	687a      	ldr	r2, [r7, #4]
 80128ee:	3205      	adds	r2, #5
 80128f0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80128f2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	3306      	adds	r3, #6
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	3307      	adds	r3, #7
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801290a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	3308      	adds	r3, #8
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8012914:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012916:	687a      	ldr	r2, [r7, #4]
 8012918:	3209      	adds	r2, #9
 801291a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801291c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012930:	7af9      	ldrb	r1, [r7, #11]
 8012932:	68f8      	ldr	r0, [r7, #12]
 8012934:	f000 fa02 	bl	8012d3c <SCSI_CheckAddressRange>
 8012938:	4603      	mov	r3, r0
 801293a:	2b00      	cmp	r3, #0
 801293c:	da02      	bge.n	8012944 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801293e:	f04f 33ff 	mov.w	r3, #4294967295
 8012942:	e024      	b.n	801298e <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012950:	6979      	ldr	r1, [r7, #20]
 8012952:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8012956:	fb01 f303 	mul.w	r3, r1, r3
 801295a:	429a      	cmp	r2, r3
 801295c:	d00a      	beq.n	8012974 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012964:	2320      	movs	r3, #32
 8012966:	2205      	movs	r2, #5
 8012968:	68f8      	ldr	r0, [r7, #12]
 801296a:	f7ff fe08 	bl	801257e <SCSI_SenseCode>
      return -1;
 801296e:	f04f 33ff 	mov.w	r3, #4294967295
 8012972:	e00c      	b.n	801298e <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	2202      	movs	r2, #2
 8012978:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012980:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8012982:	7afb      	ldrb	r3, [r7, #11]
 8012984:	4619      	mov	r1, r3
 8012986:	68f8      	ldr	r0, [r7, #12]
 8012988:	f000 fa00 	bl	8012d8c <SCSI_ProcessRead>
 801298c:	4603      	mov	r3, r0
}
 801298e:	4618      	mov	r0, r3
 8012990:	3718      	adds	r7, #24
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}

08012996 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012996:	b580      	push	{r7, lr}
 8012998:	b086      	sub	sp, #24
 801299a:	af00      	add	r7, sp, #0
 801299c:	60f8      	str	r0, [r7, #12]
 801299e:	460b      	mov	r3, r1
 80129a0:	607a      	str	r2, [r7, #4]
 80129a2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80129aa:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d102      	bne.n	80129b8 <SCSI_Write10+0x22>
  {
    return -1;
 80129b2:	f04f 33ff 	mov.w	r3, #4294967295
 80129b6:	e0af      	b.n	8012b18 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	7a1b      	ldrb	r3, [r3, #8]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	f040 80a5 	bne.w	8012b0c <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d10a      	bne.n	80129e2 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80129d2:	2320      	movs	r3, #32
 80129d4:	2205      	movs	r2, #5
 80129d6:	68f8      	ldr	r0, [r7, #12]
 80129d8:	f7ff fdd1 	bl	801257e <SCSI_SenseCode>
      return -1;
 80129dc:	f04f 33ff 	mov.w	r3, #4294967295
 80129e0:	e09a      	b.n	8012b18 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80129e8:	b25b      	sxtb	r3, r3
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	da0a      	bge.n	8012a04 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80129f4:	2320      	movs	r3, #32
 80129f6:	2205      	movs	r2, #5
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	f7ff fdc0 	bl	801257e <SCSI_SenseCode>
      return -1;
 80129fe:	f04f 33ff 	mov.w	r3, #4294967295
 8012a02:	e089      	b.n	8012b18 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a0a:	689b      	ldr	r3, [r3, #8]
 8012a0c:	7afa      	ldrb	r2, [r7, #11]
 8012a0e:	4610      	mov	r0, r2
 8012a10:	4798      	blx	r3
 8012a12:	4603      	mov	r3, r0
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d008      	beq.n	8012a2a <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012a18:	7af9      	ldrb	r1, [r7, #11]
 8012a1a:	233a      	movs	r3, #58	; 0x3a
 8012a1c:	2202      	movs	r2, #2
 8012a1e:	68f8      	ldr	r0, [r7, #12]
 8012a20:	f7ff fdad 	bl	801257e <SCSI_SenseCode>
      return -1;
 8012a24:	f04f 33ff 	mov.w	r3, #4294967295
 8012a28:	e076      	b.n	8012b18 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a30:	68db      	ldr	r3, [r3, #12]
 8012a32:	7afa      	ldrb	r2, [r7, #11]
 8012a34:	4610      	mov	r0, r2
 8012a36:	4798      	blx	r3
 8012a38:	4603      	mov	r3, r0
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d008      	beq.n	8012a50 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012a3e:	7af9      	ldrb	r1, [r7, #11]
 8012a40:	2327      	movs	r3, #39	; 0x27
 8012a42:	2202      	movs	r2, #2
 8012a44:	68f8      	ldr	r0, [r7, #12]
 8012a46:	f7ff fd9a 	bl	801257e <SCSI_SenseCode>
      return -1;
 8012a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8012a4e:	e063      	b.n	8012b18 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	3302      	adds	r3, #2
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	3303      	adds	r3, #3
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012a60:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	3304      	adds	r3, #4
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012a6a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012a6c:	687a      	ldr	r2, [r7, #4]
 8012a6e:	3205      	adds	r2, #5
 8012a70:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8012a72:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	3307      	adds	r3, #7
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8012a82:	687a      	ldr	r2, [r7, #4]
 8012a84:	3208      	adds	r2, #8
 8012a86:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012a88:	431a      	orrs	r2, r3
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012a9c:	7af9      	ldrb	r1, [r7, #11]
 8012a9e:	68f8      	ldr	r0, [r7, #12]
 8012aa0:	f000 f94c 	bl	8012d3c <SCSI_CheckAddressRange>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	da02      	bge.n	8012ab0 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8012aae:	e033      	b.n	8012b18 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012ab6:	697a      	ldr	r2, [r7, #20]
 8012ab8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012abc:	fb02 f303 	mul.w	r3, r2, r3
 8012ac0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012ac8:	693a      	ldr	r2, [r7, #16]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d00a      	beq.n	8012ae4 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012ad4:	2320      	movs	r3, #32
 8012ad6:	2205      	movs	r2, #5
 8012ad8:	68f8      	ldr	r0, [r7, #12]
 8012ada:	f7ff fd50 	bl	801257e <SCSI_SenseCode>
      return -1;
 8012ade:	f04f 33ff 	mov.w	r3, #4294967295
 8012ae2:	e019      	b.n	8012b18 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012aea:	bf28      	it	cs
 8012aec:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012af0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	2201      	movs	r2, #1
 8012af6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	f103 0210 	add.w	r2, r3, #16
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	2101      	movs	r1, #1
 8012b02:	68f8      	ldr	r0, [r7, #12]
 8012b04:	f004 ffab 	bl	8017a5e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	e005      	b.n	8012b18 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8012b0c:	7afb      	ldrb	r3, [r7, #11]
 8012b0e:	4619      	mov	r1, r3
 8012b10:	68f8      	ldr	r0, [r7, #12]
 8012b12:	f000 f9b4 	bl	8012e7e <SCSI_ProcessWrite>
 8012b16:	4603      	mov	r3, r0
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3718      	adds	r7, #24
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}

08012b20 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b086      	sub	sp, #24
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	460b      	mov	r3, r1
 8012b2a:	607a      	str	r2, [r7, #4]
 8012b2c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b34:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d102      	bne.n	8012b42 <SCSI_Write12+0x22>
  {
    return -1;
 8012b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b40:	e0bf      	b.n	8012cc2 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	7a1b      	ldrb	r3, [r3, #8]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	f040 80b5 	bne.w	8012cb6 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d10a      	bne.n	8012b6c <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012b5c:	2320      	movs	r3, #32
 8012b5e:	2205      	movs	r2, #5
 8012b60:	68f8      	ldr	r0, [r7, #12]
 8012b62:	f7ff fd0c 	bl	801257e <SCSI_SenseCode>
      return -1;
 8012b66:	f04f 33ff 	mov.w	r3, #4294967295
 8012b6a:	e0aa      	b.n	8012cc2 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012b72:	b25b      	sxtb	r3, r3
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	da0a      	bge.n	8012b8e <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012b7e:	2320      	movs	r3, #32
 8012b80:	2205      	movs	r2, #5
 8012b82:	68f8      	ldr	r0, [r7, #12]
 8012b84:	f7ff fcfb 	bl	801257e <SCSI_SenseCode>
      return -1;
 8012b88:	f04f 33ff 	mov.w	r3, #4294967295
 8012b8c:	e099      	b.n	8012cc2 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012b94:	689b      	ldr	r3, [r3, #8]
 8012b96:	7afa      	ldrb	r2, [r7, #11]
 8012b98:	4610      	mov	r0, r2
 8012b9a:	4798      	blx	r3
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d00b      	beq.n	8012bba <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012ba2:	7af9      	ldrb	r1, [r7, #11]
 8012ba4:	233a      	movs	r3, #58	; 0x3a
 8012ba6:	2202      	movs	r2, #2
 8012ba8:	68f8      	ldr	r0, [r7, #12]
 8012baa:	f7ff fce8 	bl	801257e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	2205      	movs	r2, #5
 8012bb2:	721a      	strb	r2, [r3, #8]
      return -1;
 8012bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8012bb8:	e083      	b.n	8012cc2 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012bc0:	68db      	ldr	r3, [r3, #12]
 8012bc2:	7afa      	ldrb	r2, [r7, #11]
 8012bc4:	4610      	mov	r0, r2
 8012bc6:	4798      	blx	r3
 8012bc8:	4603      	mov	r3, r0
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d00b      	beq.n	8012be6 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012bce:	7af9      	ldrb	r1, [r7, #11]
 8012bd0:	2327      	movs	r3, #39	; 0x27
 8012bd2:	2202      	movs	r2, #2
 8012bd4:	68f8      	ldr	r0, [r7, #12]
 8012bd6:	f7ff fcd2 	bl	801257e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	2205      	movs	r2, #5
 8012bde:	721a      	strb	r2, [r3, #8]
      return -1;
 8012be0:	f04f 33ff 	mov.w	r3, #4294967295
 8012be4:	e06d      	b.n	8012cc2 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	3302      	adds	r3, #2
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	3303      	adds	r3, #3
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012bf6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	3304      	adds	r3, #4
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012c00:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012c02:	687a      	ldr	r2, [r7, #4]
 8012c04:	3205      	adds	r2, #5
 8012c06:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8012c08:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012c0a:	697b      	ldr	r3, [r7, #20]
 8012c0c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	3306      	adds	r3, #6
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	3307      	adds	r3, #7
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012c20:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	3308      	adds	r3, #8
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8012c2a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012c2c:	687a      	ldr	r2, [r7, #4]
 8012c2e:	3209      	adds	r2, #9
 8012c30:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012c32:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012c46:	7af9      	ldrb	r1, [r7, #11]
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f000 f877 	bl	8012d3c <SCSI_CheckAddressRange>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	da02      	bge.n	8012c5a <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012c54:	f04f 33ff 	mov.w	r3, #4294967295
 8012c58:	e033      	b.n	8012cc2 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012c60:	697a      	ldr	r2, [r7, #20]
 8012c62:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012c66:	fb02 f303 	mul.w	r3, r2, r3
 8012c6a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012c72:	693a      	ldr	r2, [r7, #16]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d00a      	beq.n	8012c8e <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012c78:	697b      	ldr	r3, [r7, #20]
 8012c7a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012c7e:	2320      	movs	r3, #32
 8012c80:	2205      	movs	r2, #5
 8012c82:	68f8      	ldr	r0, [r7, #12]
 8012c84:	f7ff fc7b 	bl	801257e <SCSI_SenseCode>
      return -1;
 8012c88:	f04f 33ff 	mov.w	r3, #4294967295
 8012c8c:	e019      	b.n	8012cc2 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c94:	bf28      	it	cs
 8012c96:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012c9a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	f103 0210 	add.w	r2, r3, #16
 8012ca8:	693b      	ldr	r3, [r7, #16]
 8012caa:	2101      	movs	r1, #1
 8012cac:	68f8      	ldr	r0, [r7, #12]
 8012cae:	f004 fed6 	bl	8017a5e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	e005      	b.n	8012cc2 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8012cb6:	7afb      	ldrb	r3, [r7, #11]
 8012cb8:	4619      	mov	r1, r3
 8012cba:	68f8      	ldr	r0, [r7, #12]
 8012cbc:	f000 f8df 	bl	8012e7e <SCSI_ProcessWrite>
 8012cc0:	4603      	mov	r3, r0
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3718      	adds	r7, #24
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}

08012cca <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012cca:	b580      	push	{r7, lr}
 8012ccc:	b086      	sub	sp, #24
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	60f8      	str	r0, [r7, #12]
 8012cd2:	460b      	mov	r3, r1
 8012cd4:	607a      	str	r2, [r7, #4]
 8012cd6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012cde:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d102      	bne.n	8012cec <SCSI_Verify10+0x22>
  {
    return -1;
 8012ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8012cea:	e023      	b.n	8012d34 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	3301      	adds	r3, #1
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	f003 0302 	and.w	r3, r3, #2
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d008      	beq.n	8012d0c <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8012cfa:	7af9      	ldrb	r1, [r7, #11]
 8012cfc:	2324      	movs	r3, #36	; 0x24
 8012cfe:	2205      	movs	r2, #5
 8012d00:	68f8      	ldr	r0, [r7, #12]
 8012d02:	f7ff fc3c 	bl	801257e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8012d06:	f04f 33ff 	mov.w	r3, #4294967295
 8012d0a:	e013      	b.n	8012d34 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012d12:	697b      	ldr	r3, [r7, #20]
 8012d14:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012d18:	7af9      	ldrb	r1, [r7, #11]
 8012d1a:	68f8      	ldr	r0, [r7, #12]
 8012d1c:	f000 f80e 	bl	8012d3c <SCSI_CheckAddressRange>
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	da02      	bge.n	8012d2c <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8012d26:	f04f 33ff 	mov.w	r3, #4294967295
 8012d2a:	e003      	b.n	8012d34 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	60da      	str	r2, [r3, #12]

  return 0;
 8012d32:	2300      	movs	r3, #0
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3718      	adds	r7, #24
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b086      	sub	sp, #24
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	60f8      	str	r0, [r7, #12]
 8012d44:	607a      	str	r2, [r7, #4]
 8012d46:	603b      	str	r3, [r7, #0]
 8012d48:	460b      	mov	r3, r1
 8012d4a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d52:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d102      	bne.n	8012d60 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8012d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d5e:	e011      	b.n	8012d84 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8012d60:	687a      	ldr	r2, [r7, #4]
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	441a      	add	r2, r3
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d908      	bls.n	8012d82 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8012d70:	7af9      	ldrb	r1, [r7, #11]
 8012d72:	2321      	movs	r3, #33	; 0x21
 8012d74:	2205      	movs	r2, #5
 8012d76:	68f8      	ldr	r0, [r7, #12]
 8012d78:	f7ff fc01 	bl	801257e <SCSI_SenseCode>
    return -1;
 8012d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d80:	e000      	b.n	8012d84 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8012d82:	2300      	movs	r3, #0
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	3718      	adds	r7, #24
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012d8c:	b590      	push	{r4, r7, lr}
 8012d8e:	b085      	sub	sp, #20
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	460b      	mov	r3, r1
 8012d96:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d9e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012da6:	68fa      	ldr	r2, [r7, #12]
 8012da8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012dac:	fb02 f303 	mul.w	r3, r2, r3
 8012db0:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d102      	bne.n	8012dbe <SCSI_ProcessRead+0x32>
  {
    return -1;
 8012db8:	f04f 33ff 	mov.w	r3, #4294967295
 8012dbc:	e05b      	b.n	8012e76 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012dc4:	bf28      	it	cs
 8012dc6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012dca:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012dd2:	691c      	ldr	r4, [r3, #16]
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	f103 0110 	add.w	r1, r3, #16
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012de6:	4618      	mov	r0, r3
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8012dee:	b29b      	uxth	r3, r3
 8012df0:	78f8      	ldrb	r0, [r7, #3]
 8012df2:	47a0      	blx	r4
 8012df4:	4603      	mov	r3, r0
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	da08      	bge.n	8012e0c <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8012dfa:	78f9      	ldrb	r1, [r7, #3]
 8012dfc:	2311      	movs	r3, #17
 8012dfe:	2204      	movs	r2, #4
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f7ff fbbc 	bl	801257e <SCSI_SenseCode>
    return -1;
 8012e06:	f04f 33ff 	mov.w	r3, #4294967295
 8012e0a:	e034      	b.n	8012e76 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	f103 0210 	add.w	r2, r3, #16
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	2181      	movs	r1, #129	; 0x81
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f004 fe00 	bl	8017a1c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012e28:	4619      	mov	r1, r3
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e30:	441a      	add	r2, r3
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012e44:	4619      	mov	r1, r3
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e4c:	1ad2      	subs	r2, r2, r3
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	1ad2      	subs	r2, r2, r3
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d102      	bne.n	8012e74 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	2203      	movs	r2, #3
 8012e72:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8012e74:	2300      	movs	r3, #0
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3714      	adds	r7, #20
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd90      	pop	{r4, r7, pc}

08012e7e <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012e7e:	b590      	push	{r4, r7, lr}
 8012e80:	b085      	sub	sp, #20
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
 8012e86:	460b      	mov	r3, r1
 8012e88:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e90:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012e98:	68fa      	ldr	r2, [r7, #12]
 8012e9a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012e9e:	fb02 f303 	mul.w	r3, r2, r3
 8012ea2:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d102      	bne.n	8012eb0 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8012eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8012eae:	e06b      	b.n	8012f88 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012eb6:	bf28      	it	cs
 8012eb8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012ebc:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012ec4:	695c      	ldr	r4, [r3, #20]
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	f103 0110 	add.w	r1, r3, #16
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012ed8:	4618      	mov	r0, r3
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	78f8      	ldrb	r0, [r7, #3]
 8012ee4:	47a0      	blx	r4
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	da08      	bge.n	8012efe <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8012eec:	78f9      	ldrb	r1, [r7, #3]
 8012eee:	2303      	movs	r3, #3
 8012ef0:	2204      	movs	r2, #4
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f7ff fb43 	bl	801257e <SCSI_SenseCode>
    return -1;
 8012ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8012efc:	e044      	b.n	8012f88 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012f0a:	4619      	mov	r1, r3
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f12:	441a      	add	r2, r3
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012f26:	4619      	mov	r1, r3
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f2e:	1ad2      	subs	r2, r2, r3
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	1ad2      	subs	r2, r2, r3
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d104      	bne.n	8012f5a <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012f50:	2100      	movs	r1, #0
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f7fe fdd8 	bl	8011b08 <MSC_BOT_SendCSW>
 8012f58:	e015      	b.n	8012f86 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012f60:	68fa      	ldr	r2, [r7, #12]
 8012f62:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012f66:	fb02 f303 	mul.w	r3, r2, r3
 8012f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f6e:	bf28      	it	cs
 8012f70:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012f74:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	f103 0210 	add.w	r2, r3, #16
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	2101      	movs	r1, #1
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f004 fd6c 	bl	8017a5e <USBD_LL_PrepareReceive>
  }

  return 0;
 8012f86:	2300      	movs	r3, #0
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3714      	adds	r7, #20
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd90      	pop	{r4, r7, pc}

08012f90 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8012f90:	b480      	push	{r7}
 8012f92:	b087      	sub	sp, #28
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	60f8      	str	r0, [r7, #12]
 8012f98:	60b9      	str	r1, [r7, #8]
 8012f9a:	4613      	mov	r3, r2
 8012f9c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8012f9e:	88fb      	ldrh	r3, [r7, #6]
 8012fa0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d102      	bne.n	8012fae <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8012fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8012fac:	e013      	b.n	8012fd6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8012fae:	8afa      	ldrh	r2, [r7, #22]
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8012fb4:	e00b      	b.n	8012fce <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8012fb6:	8afb      	ldrh	r3, [r7, #22]
 8012fb8:	3b01      	subs	r3, #1
 8012fba:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8012fbc:	8afb      	ldrh	r3, [r7, #22]
 8012fbe:	68ba      	ldr	r2, [r7, #8]
 8012fc0:	441a      	add	r2, r3
 8012fc2:	8afb      	ldrh	r3, [r7, #22]
 8012fc4:	7811      	ldrb	r1, [r2, #0]
 8012fc6:	68fa      	ldr	r2, [r7, #12]
 8012fc8:	4413      	add	r3, r2
 8012fca:	460a      	mov	r2, r1
 8012fcc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8012fce:	8afb      	ldrh	r3, [r7, #22]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d1f0      	bne.n	8012fb6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8012fd4:	2300      	movs	r3, #0
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	371c      	adds	r7, #28
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe0:	4770      	bx	lr

08012fe2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012fe2:	b580      	push	{r7, lr}
 8012fe4:	b086      	sub	sp, #24
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	60f8      	str	r0, [r7, #12]
 8012fea:	60b9      	str	r1, [r7, #8]
 8012fec:	4613      	mov	r3, r2
 8012fee:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d101      	bne.n	8012ffa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8012ff6:	2303      	movs	r3, #3
 8012ff8:	e01f      	b.n	801303a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	2200      	movs	r2, #0
 8013006:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	2200      	movs	r2, #0
 801300e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d003      	beq.n	8013020 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	68ba      	ldr	r2, [r7, #8]
 801301c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	2201      	movs	r2, #1
 8013024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	79fa      	ldrb	r2, [r7, #7]
 801302c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801302e:	68f8      	ldr	r0, [r7, #12]
 8013030:	f004 fba0 	bl	8017774 <USBD_LL_Init>
 8013034:	4603      	mov	r3, r0
 8013036:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013038:	7dfb      	ldrb	r3, [r7, #23]
}
 801303a:	4618      	mov	r0, r3
 801303c:	3718      	adds	r7, #24
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013042:	b580      	push	{r7, lr}
 8013044:	b084      	sub	sp, #16
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
 801304a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801304c:	2300      	movs	r3, #0
 801304e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d101      	bne.n	801305a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013056:	2303      	movs	r3, #3
 8013058:	e016      	b.n	8013088 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	683a      	ldr	r2, [r7, #0]
 801305e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801306a:	2b00      	cmp	r3, #0
 801306c:	d00b      	beq.n	8013086 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013076:	f107 020e 	add.w	r2, r7, #14
 801307a:	4610      	mov	r0, r2
 801307c:	4798      	blx	r3
 801307e:	4602      	mov	r2, r0
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013086:	2300      	movs	r3, #0
}
 8013088:	4618      	mov	r0, r3
 801308a:	3710      	adds	r7, #16
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}

08013090 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f004 fbb7 	bl	801780c <USBD_LL_Start>
 801309e:	4603      	mov	r3, r0
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3708      	adds	r7, #8
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80130a8:	b480      	push	{r7}
 80130aa:	b083      	sub	sp, #12
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80130b0:	2300      	movs	r3, #0
}
 80130b2:	4618      	mov	r0, r3
 80130b4:	370c      	adds	r7, #12
 80130b6:	46bd      	mov	sp, r7
 80130b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130bc:	4770      	bx	lr

080130be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80130be:	b580      	push	{r7, lr}
 80130c0:	b084      	sub	sp, #16
 80130c2:	af00      	add	r7, sp, #0
 80130c4:	6078      	str	r0, [r7, #4]
 80130c6:	460b      	mov	r3, r1
 80130c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80130ca:	2303      	movs	r3, #3
 80130cc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d009      	beq.n	80130ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	78fa      	ldrb	r2, [r7, #3]
 80130e2:	4611      	mov	r1, r2
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	4798      	blx	r3
 80130e8:	4603      	mov	r3, r0
 80130ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80130ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3710      	adds	r7, #16
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}

080130f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80130f6:	b580      	push	{r7, lr}
 80130f8:	b082      	sub	sp, #8
 80130fa:	af00      	add	r7, sp, #0
 80130fc:	6078      	str	r0, [r7, #4]
 80130fe:	460b      	mov	r3, r1
 8013100:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013108:	2b00      	cmp	r3, #0
 801310a:	d007      	beq.n	801311c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013112:	685b      	ldr	r3, [r3, #4]
 8013114:	78fa      	ldrb	r2, [r7, #3]
 8013116:	4611      	mov	r1, r2
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	4798      	blx	r3
  }

  return USBD_OK;
 801311c:	2300      	movs	r3, #0
}
 801311e:	4618      	mov	r0, r3
 8013120:	3708      	adds	r7, #8
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}

08013126 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013126:	b580      	push	{r7, lr}
 8013128:	b084      	sub	sp, #16
 801312a:	af00      	add	r7, sp, #0
 801312c:	6078      	str	r0, [r7, #4]
 801312e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013136:	6839      	ldr	r1, [r7, #0]
 8013138:	4618      	mov	r0, r3
 801313a:	f000 ffb9 	bl	80140b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2201      	movs	r2, #1
 8013142:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801314c:	461a      	mov	r2, r3
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801315a:	f003 031f 	and.w	r3, r3, #31
 801315e:	2b02      	cmp	r3, #2
 8013160:	d01a      	beq.n	8013198 <USBD_LL_SetupStage+0x72>
 8013162:	2b02      	cmp	r3, #2
 8013164:	d822      	bhi.n	80131ac <USBD_LL_SetupStage+0x86>
 8013166:	2b00      	cmp	r3, #0
 8013168:	d002      	beq.n	8013170 <USBD_LL_SetupStage+0x4a>
 801316a:	2b01      	cmp	r3, #1
 801316c:	d00a      	beq.n	8013184 <USBD_LL_SetupStage+0x5e>
 801316e:	e01d      	b.n	80131ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013176:	4619      	mov	r1, r3
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f000 fa61 	bl	8013640 <USBD_StdDevReq>
 801317e:	4603      	mov	r3, r0
 8013180:	73fb      	strb	r3, [r7, #15]
      break;
 8013182:	e020      	b.n	80131c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801318a:	4619      	mov	r1, r3
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f000 fac5 	bl	801371c <USBD_StdItfReq>
 8013192:	4603      	mov	r3, r0
 8013194:	73fb      	strb	r3, [r7, #15]
      break;
 8013196:	e016      	b.n	80131c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801319e:	4619      	mov	r1, r3
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f000 fb04 	bl	80137ae <USBD_StdEPReq>
 80131a6:	4603      	mov	r3, r0
 80131a8:	73fb      	strb	r3, [r7, #15]
      break;
 80131aa:	e00c      	b.n	80131c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80131b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80131b6:	b2db      	uxtb	r3, r3
 80131b8:	4619      	mov	r1, r3
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f004 fba5 	bl	801790a <USBD_LL_StallEP>
 80131c0:	4603      	mov	r3, r0
 80131c2:	73fb      	strb	r3, [r7, #15]
      break;
 80131c4:	bf00      	nop
  }

  return ret;
 80131c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3710      	adds	r7, #16
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}

080131d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b086      	sub	sp, #24
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	460b      	mov	r3, r1
 80131da:	607a      	str	r2, [r7, #4]
 80131dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80131de:	7afb      	ldrb	r3, [r7, #11]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d138      	bne.n	8013256 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80131ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80131f2:	2b03      	cmp	r3, #3
 80131f4:	d14a      	bne.n	801328c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	689a      	ldr	r2, [r3, #8]
 80131fa:	693b      	ldr	r3, [r7, #16]
 80131fc:	68db      	ldr	r3, [r3, #12]
 80131fe:	429a      	cmp	r2, r3
 8013200:	d913      	bls.n	801322a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	689a      	ldr	r2, [r3, #8]
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	1ad2      	subs	r2, r2, r3
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	68da      	ldr	r2, [r3, #12]
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	689b      	ldr	r3, [r3, #8]
 8013218:	4293      	cmp	r3, r2
 801321a:	bf28      	it	cs
 801321c:	4613      	movcs	r3, r2
 801321e:	461a      	mov	r2, r3
 8013220:	6879      	ldr	r1, [r7, #4]
 8013222:	68f8      	ldr	r0, [r7, #12]
 8013224:	f001 f81b 	bl	801425e <USBD_CtlContinueRx>
 8013228:	e030      	b.n	801328c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013230:	b2db      	uxtb	r3, r3
 8013232:	2b03      	cmp	r3, #3
 8013234:	d10b      	bne.n	801324e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801323c:	691b      	ldr	r3, [r3, #16]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d005      	beq.n	801324e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013248:	691b      	ldr	r3, [r3, #16]
 801324a:	68f8      	ldr	r0, [r7, #12]
 801324c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801324e:	68f8      	ldr	r0, [r7, #12]
 8013250:	f001 f816 	bl	8014280 <USBD_CtlSendStatus>
 8013254:	e01a      	b.n	801328c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801325c:	b2db      	uxtb	r3, r3
 801325e:	2b03      	cmp	r3, #3
 8013260:	d114      	bne.n	801328c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013268:	699b      	ldr	r3, [r3, #24]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d00e      	beq.n	801328c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013274:	699b      	ldr	r3, [r3, #24]
 8013276:	7afa      	ldrb	r2, [r7, #11]
 8013278:	4611      	mov	r1, r2
 801327a:	68f8      	ldr	r0, [r7, #12]
 801327c:	4798      	blx	r3
 801327e:	4603      	mov	r3, r0
 8013280:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013282:	7dfb      	ldrb	r3, [r7, #23]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d001      	beq.n	801328c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8013288:	7dfb      	ldrb	r3, [r7, #23]
 801328a:	e000      	b.n	801328e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801328c:	2300      	movs	r3, #0
}
 801328e:	4618      	mov	r0, r3
 8013290:	3718      	adds	r7, #24
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}

08013296 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013296:	b580      	push	{r7, lr}
 8013298:	b086      	sub	sp, #24
 801329a:	af00      	add	r7, sp, #0
 801329c:	60f8      	str	r0, [r7, #12]
 801329e:	460b      	mov	r3, r1
 80132a0:	607a      	str	r2, [r7, #4]
 80132a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80132a4:	7afb      	ldrb	r3, [r7, #11]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d16b      	bne.n	8013382 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	3314      	adds	r3, #20
 80132ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80132b6:	2b02      	cmp	r3, #2
 80132b8:	d156      	bne.n	8013368 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	689a      	ldr	r2, [r3, #8]
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	68db      	ldr	r3, [r3, #12]
 80132c2:	429a      	cmp	r2, r3
 80132c4:	d914      	bls.n	80132f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	689a      	ldr	r2, [r3, #8]
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	68db      	ldr	r3, [r3, #12]
 80132ce:	1ad2      	subs	r2, r2, r3
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	689b      	ldr	r3, [r3, #8]
 80132d8:	461a      	mov	r2, r3
 80132da:	6879      	ldr	r1, [r7, #4]
 80132dc:	68f8      	ldr	r0, [r7, #12]
 80132de:	f000 ffad 	bl	801423c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80132e2:	2300      	movs	r3, #0
 80132e4:	2200      	movs	r2, #0
 80132e6:	2100      	movs	r1, #0
 80132e8:	68f8      	ldr	r0, [r7, #12]
 80132ea:	f004 fbb8 	bl	8017a5e <USBD_LL_PrepareReceive>
 80132ee:	e03b      	b.n	8013368 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80132f0:	693b      	ldr	r3, [r7, #16]
 80132f2:	68da      	ldr	r2, [r3, #12]
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	689b      	ldr	r3, [r3, #8]
 80132f8:	429a      	cmp	r2, r3
 80132fa:	d11c      	bne.n	8013336 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	685a      	ldr	r2, [r3, #4]
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013304:	429a      	cmp	r2, r3
 8013306:	d316      	bcc.n	8013336 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	685a      	ldr	r2, [r3, #4]
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013312:	429a      	cmp	r2, r3
 8013314:	d20f      	bcs.n	8013336 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013316:	2200      	movs	r2, #0
 8013318:	2100      	movs	r1, #0
 801331a:	68f8      	ldr	r0, [r7, #12]
 801331c:	f000 ff8e 	bl	801423c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2200      	movs	r2, #0
 8013324:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013328:	2300      	movs	r3, #0
 801332a:	2200      	movs	r2, #0
 801332c:	2100      	movs	r1, #0
 801332e:	68f8      	ldr	r0, [r7, #12]
 8013330:	f004 fb95 	bl	8017a5e <USBD_LL_PrepareReceive>
 8013334:	e018      	b.n	8013368 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801333c:	b2db      	uxtb	r3, r3
 801333e:	2b03      	cmp	r3, #3
 8013340:	d10b      	bne.n	801335a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d005      	beq.n	801335a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013354:	68db      	ldr	r3, [r3, #12]
 8013356:	68f8      	ldr	r0, [r7, #12]
 8013358:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801335a:	2180      	movs	r1, #128	; 0x80
 801335c:	68f8      	ldr	r0, [r7, #12]
 801335e:	f004 fad4 	bl	801790a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013362:	68f8      	ldr	r0, [r7, #12]
 8013364:	f000 ff9f 	bl	80142a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801336e:	2b01      	cmp	r3, #1
 8013370:	d122      	bne.n	80133b8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013372:	68f8      	ldr	r0, [r7, #12]
 8013374:	f7ff fe98 	bl	80130a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2200      	movs	r2, #0
 801337c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013380:	e01a      	b.n	80133b8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013388:	b2db      	uxtb	r3, r3
 801338a:	2b03      	cmp	r3, #3
 801338c:	d114      	bne.n	80133b8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013394:	695b      	ldr	r3, [r3, #20]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d00e      	beq.n	80133b8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133a0:	695b      	ldr	r3, [r3, #20]
 80133a2:	7afa      	ldrb	r2, [r7, #11]
 80133a4:	4611      	mov	r1, r2
 80133a6:	68f8      	ldr	r0, [r7, #12]
 80133a8:	4798      	blx	r3
 80133aa:	4603      	mov	r3, r0
 80133ac:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80133ae:	7dfb      	ldrb	r3, [r7, #23]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d001      	beq.n	80133b8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80133b4:	7dfb      	ldrb	r3, [r7, #23]
 80133b6:	e000      	b.n	80133ba <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80133b8:	2300      	movs	r3, #0
}
 80133ba:	4618      	mov	r0, r3
 80133bc:	3718      	adds	r7, #24
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}

080133c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80133c2:	b580      	push	{r7, lr}
 80133c4:	b082      	sub	sp, #8
 80133c6:	af00      	add	r7, sp, #0
 80133c8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2201      	movs	r2, #1
 80133ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	2200      	movs	r2, #0
 80133d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	2200      	movs	r2, #0
 80133de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2200      	movs	r2, #0
 80133e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d101      	bne.n	80133f6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80133f2:	2303      	movs	r3, #3
 80133f4:	e02f      	b.n	8013456 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d00f      	beq.n	8013420 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d009      	beq.n	8013420 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	687a      	ldr	r2, [r7, #4]
 8013416:	6852      	ldr	r2, [r2, #4]
 8013418:	b2d2      	uxtb	r2, r2
 801341a:	4611      	mov	r1, r2
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013420:	2340      	movs	r3, #64	; 0x40
 8013422:	2200      	movs	r2, #0
 8013424:	2100      	movs	r1, #0
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f004 fa0b 	bl	8017842 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2201      	movs	r2, #1
 8013430:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2240      	movs	r2, #64	; 0x40
 8013438:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801343c:	2340      	movs	r3, #64	; 0x40
 801343e:	2200      	movs	r2, #0
 8013440:	2180      	movs	r1, #128	; 0x80
 8013442:	6878      	ldr	r0, [r7, #4]
 8013444:	f004 f9fd 	bl	8017842 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	2201      	movs	r2, #1
 801344c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	2240      	movs	r2, #64	; 0x40
 8013452:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8013454:	2300      	movs	r3, #0
}
 8013456:	4618      	mov	r0, r3
 8013458:	3708      	adds	r7, #8
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}

0801345e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801345e:	b480      	push	{r7}
 8013460:	b083      	sub	sp, #12
 8013462:	af00      	add	r7, sp, #0
 8013464:	6078      	str	r0, [r7, #4]
 8013466:	460b      	mov	r3, r1
 8013468:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	78fa      	ldrb	r2, [r7, #3]
 801346e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013470:	2300      	movs	r3, #0
}
 8013472:	4618      	mov	r0, r3
 8013474:	370c      	adds	r7, #12
 8013476:	46bd      	mov	sp, r7
 8013478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347c:	4770      	bx	lr

0801347e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801347e:	b480      	push	{r7}
 8013480:	b083      	sub	sp, #12
 8013482:	af00      	add	r7, sp, #0
 8013484:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801348c:	b2da      	uxtb	r2, r3
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	2204      	movs	r2, #4
 8013498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801349c:	2300      	movs	r3, #0
}
 801349e:	4618      	mov	r0, r3
 80134a0:	370c      	adds	r7, #12
 80134a2:	46bd      	mov	sp, r7
 80134a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a8:	4770      	bx	lr

080134aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80134aa:	b480      	push	{r7}
 80134ac:	b083      	sub	sp, #12
 80134ae:	af00      	add	r7, sp, #0
 80134b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134b8:	b2db      	uxtb	r3, r3
 80134ba:	2b04      	cmp	r3, #4
 80134bc:	d106      	bne.n	80134cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80134c4:	b2da      	uxtb	r2, r3
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80134cc:	2300      	movs	r3, #0
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	370c      	adds	r7, #12
 80134d2:	46bd      	mov	sp, r7
 80134d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d8:	4770      	bx	lr

080134da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80134da:	b580      	push	{r7, lr}
 80134dc:	b082      	sub	sp, #8
 80134de:	af00      	add	r7, sp, #0
 80134e0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d101      	bne.n	80134f0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80134ec:	2303      	movs	r3, #3
 80134ee:	e012      	b.n	8013516 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134f6:	b2db      	uxtb	r3, r3
 80134f8:	2b03      	cmp	r3, #3
 80134fa:	d10b      	bne.n	8013514 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013502:	69db      	ldr	r3, [r3, #28]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d005      	beq.n	8013514 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801350e:	69db      	ldr	r3, [r3, #28]
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013514:	2300      	movs	r3, #0
}
 8013516:	4618      	mov	r0, r3
 8013518:	3708      	adds	r7, #8
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}

0801351e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801351e:	b580      	push	{r7, lr}
 8013520:	b082      	sub	sp, #8
 8013522:	af00      	add	r7, sp, #0
 8013524:	6078      	str	r0, [r7, #4]
 8013526:	460b      	mov	r3, r1
 8013528:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013530:	2b00      	cmp	r3, #0
 8013532:	d101      	bne.n	8013538 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8013534:	2303      	movs	r3, #3
 8013536:	e014      	b.n	8013562 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801353e:	b2db      	uxtb	r3, r3
 8013540:	2b03      	cmp	r3, #3
 8013542:	d10d      	bne.n	8013560 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801354a:	6a1b      	ldr	r3, [r3, #32]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d007      	beq.n	8013560 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013556:	6a1b      	ldr	r3, [r3, #32]
 8013558:	78fa      	ldrb	r2, [r7, #3]
 801355a:	4611      	mov	r1, r2
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013560:	2300      	movs	r3, #0
}
 8013562:	4618      	mov	r0, r3
 8013564:	3708      	adds	r7, #8
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}

0801356a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801356a:	b580      	push	{r7, lr}
 801356c:	b082      	sub	sp, #8
 801356e:	af00      	add	r7, sp, #0
 8013570:	6078      	str	r0, [r7, #4]
 8013572:	460b      	mov	r3, r1
 8013574:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801357c:	2b00      	cmp	r3, #0
 801357e:	d101      	bne.n	8013584 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8013580:	2303      	movs	r3, #3
 8013582:	e014      	b.n	80135ae <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801358a:	b2db      	uxtb	r3, r3
 801358c:	2b03      	cmp	r3, #3
 801358e:	d10d      	bne.n	80135ac <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013598:	2b00      	cmp	r3, #0
 801359a:	d007      	beq.n	80135ac <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135a4:	78fa      	ldrb	r2, [r7, #3]
 80135a6:	4611      	mov	r1, r2
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80135ac:	2300      	movs	r3, #0
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	3708      	adds	r7, #8
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}

080135b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80135b6:	b480      	push	{r7}
 80135b8:	b083      	sub	sp, #12
 80135ba:	af00      	add	r7, sp, #0
 80135bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80135be:	2300      	movs	r3, #0
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	370c      	adds	r7, #12
 80135c4:	46bd      	mov	sp, r7
 80135c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ca:	4770      	bx	lr

080135cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b082      	sub	sp, #8
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2201      	movs	r2, #1
 80135d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d009      	beq.n	80135fa <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135ec:	685b      	ldr	r3, [r3, #4]
 80135ee:	687a      	ldr	r2, [r7, #4]
 80135f0:	6852      	ldr	r2, [r2, #4]
 80135f2:	b2d2      	uxtb	r2, r2
 80135f4:	4611      	mov	r1, r2
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	4798      	blx	r3
  }

  return USBD_OK;
 80135fa:	2300      	movs	r3, #0
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	3708      	adds	r7, #8
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}

08013604 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013604:	b480      	push	{r7}
 8013606:	b087      	sub	sp, #28
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	3301      	adds	r3, #1
 801361a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013622:	8a3b      	ldrh	r3, [r7, #16]
 8013624:	021b      	lsls	r3, r3, #8
 8013626:	b21a      	sxth	r2, r3
 8013628:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801362c:	4313      	orrs	r3, r2
 801362e:	b21b      	sxth	r3, r3
 8013630:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013632:	89fb      	ldrh	r3, [r7, #14]
}
 8013634:	4618      	mov	r0, r3
 8013636:	371c      	adds	r7, #28
 8013638:	46bd      	mov	sp, r7
 801363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363e:	4770      	bx	lr

08013640 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b084      	sub	sp, #16
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801364a:	2300      	movs	r3, #0
 801364c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	781b      	ldrb	r3, [r3, #0]
 8013652:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013656:	2b40      	cmp	r3, #64	; 0x40
 8013658:	d005      	beq.n	8013666 <USBD_StdDevReq+0x26>
 801365a:	2b40      	cmp	r3, #64	; 0x40
 801365c:	d853      	bhi.n	8013706 <USBD_StdDevReq+0xc6>
 801365e:	2b00      	cmp	r3, #0
 8013660:	d00b      	beq.n	801367a <USBD_StdDevReq+0x3a>
 8013662:	2b20      	cmp	r3, #32
 8013664:	d14f      	bne.n	8013706 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801366c:	689b      	ldr	r3, [r3, #8]
 801366e:	6839      	ldr	r1, [r7, #0]
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	4798      	blx	r3
 8013674:	4603      	mov	r3, r0
 8013676:	73fb      	strb	r3, [r7, #15]
      break;
 8013678:	e04a      	b.n	8013710 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	785b      	ldrb	r3, [r3, #1]
 801367e:	2b09      	cmp	r3, #9
 8013680:	d83b      	bhi.n	80136fa <USBD_StdDevReq+0xba>
 8013682:	a201      	add	r2, pc, #4	; (adr r2, 8013688 <USBD_StdDevReq+0x48>)
 8013684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013688:	080136dd 	.word	0x080136dd
 801368c:	080136f1 	.word	0x080136f1
 8013690:	080136fb 	.word	0x080136fb
 8013694:	080136e7 	.word	0x080136e7
 8013698:	080136fb 	.word	0x080136fb
 801369c:	080136bb 	.word	0x080136bb
 80136a0:	080136b1 	.word	0x080136b1
 80136a4:	080136fb 	.word	0x080136fb
 80136a8:	080136d3 	.word	0x080136d3
 80136ac:	080136c5 	.word	0x080136c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80136b0:	6839      	ldr	r1, [r7, #0]
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f000 f9de 	bl	8013a74 <USBD_GetDescriptor>
          break;
 80136b8:	e024      	b.n	8013704 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80136ba:	6839      	ldr	r1, [r7, #0]
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	f000 fb6d 	bl	8013d9c <USBD_SetAddress>
          break;
 80136c2:	e01f      	b.n	8013704 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80136c4:	6839      	ldr	r1, [r7, #0]
 80136c6:	6878      	ldr	r0, [r7, #4]
 80136c8:	f000 fbac 	bl	8013e24 <USBD_SetConfig>
 80136cc:	4603      	mov	r3, r0
 80136ce:	73fb      	strb	r3, [r7, #15]
          break;
 80136d0:	e018      	b.n	8013704 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80136d2:	6839      	ldr	r1, [r7, #0]
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	f000 fc4b 	bl	8013f70 <USBD_GetConfig>
          break;
 80136da:	e013      	b.n	8013704 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80136dc:	6839      	ldr	r1, [r7, #0]
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f000 fc7c 	bl	8013fdc <USBD_GetStatus>
          break;
 80136e4:	e00e      	b.n	8013704 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80136e6:	6839      	ldr	r1, [r7, #0]
 80136e8:	6878      	ldr	r0, [r7, #4]
 80136ea:	f000 fcab 	bl	8014044 <USBD_SetFeature>
          break;
 80136ee:	e009      	b.n	8013704 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80136f0:	6839      	ldr	r1, [r7, #0]
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f000 fcba 	bl	801406c <USBD_ClrFeature>
          break;
 80136f8:	e004      	b.n	8013704 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80136fa:	6839      	ldr	r1, [r7, #0]
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f000 fd11 	bl	8014124 <USBD_CtlError>
          break;
 8013702:	bf00      	nop
      }
      break;
 8013704:	e004      	b.n	8013710 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8013706:	6839      	ldr	r1, [r7, #0]
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	f000 fd0b 	bl	8014124 <USBD_CtlError>
      break;
 801370e:	bf00      	nop
  }

  return ret;
 8013710:	7bfb      	ldrb	r3, [r7, #15]
}
 8013712:	4618      	mov	r0, r3
 8013714:	3710      	adds	r7, #16
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop

0801371c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b084      	sub	sp, #16
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013726:	2300      	movs	r3, #0
 8013728:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013732:	2b40      	cmp	r3, #64	; 0x40
 8013734:	d005      	beq.n	8013742 <USBD_StdItfReq+0x26>
 8013736:	2b40      	cmp	r3, #64	; 0x40
 8013738:	d82f      	bhi.n	801379a <USBD_StdItfReq+0x7e>
 801373a:	2b00      	cmp	r3, #0
 801373c:	d001      	beq.n	8013742 <USBD_StdItfReq+0x26>
 801373e:	2b20      	cmp	r3, #32
 8013740:	d12b      	bne.n	801379a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013748:	b2db      	uxtb	r3, r3
 801374a:	3b01      	subs	r3, #1
 801374c:	2b02      	cmp	r3, #2
 801374e:	d81d      	bhi.n	801378c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	889b      	ldrh	r3, [r3, #4]
 8013754:	b2db      	uxtb	r3, r3
 8013756:	2b01      	cmp	r3, #1
 8013758:	d813      	bhi.n	8013782 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013760:	689b      	ldr	r3, [r3, #8]
 8013762:	6839      	ldr	r1, [r7, #0]
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	4798      	blx	r3
 8013768:	4603      	mov	r3, r0
 801376a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	88db      	ldrh	r3, [r3, #6]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d110      	bne.n	8013796 <USBD_StdItfReq+0x7a>
 8013774:	7bfb      	ldrb	r3, [r7, #15]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d10d      	bne.n	8013796 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f000 fd80 	bl	8014280 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013780:	e009      	b.n	8013796 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8013782:	6839      	ldr	r1, [r7, #0]
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f000 fccd 	bl	8014124 <USBD_CtlError>
          break;
 801378a:	e004      	b.n	8013796 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801378c:	6839      	ldr	r1, [r7, #0]
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f000 fcc8 	bl	8014124 <USBD_CtlError>
          break;
 8013794:	e000      	b.n	8013798 <USBD_StdItfReq+0x7c>
          break;
 8013796:	bf00      	nop
      }
      break;
 8013798:	e004      	b.n	80137a4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801379a:	6839      	ldr	r1, [r7, #0]
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f000 fcc1 	bl	8014124 <USBD_CtlError>
      break;
 80137a2:	bf00      	nop
  }

  return ret;
 80137a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80137a6:	4618      	mov	r0, r3
 80137a8:	3710      	adds	r7, #16
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd80      	pop	{r7, pc}

080137ae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137ae:	b580      	push	{r7, lr}
 80137b0:	b084      	sub	sp, #16
 80137b2:	af00      	add	r7, sp, #0
 80137b4:	6078      	str	r0, [r7, #4]
 80137b6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80137b8:	2300      	movs	r3, #0
 80137ba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	889b      	ldrh	r3, [r3, #4]
 80137c0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80137ca:	2b40      	cmp	r3, #64	; 0x40
 80137cc:	d007      	beq.n	80137de <USBD_StdEPReq+0x30>
 80137ce:	2b40      	cmp	r3, #64	; 0x40
 80137d0:	f200 8145 	bhi.w	8013a5e <USBD_StdEPReq+0x2b0>
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d00c      	beq.n	80137f2 <USBD_StdEPReq+0x44>
 80137d8:	2b20      	cmp	r3, #32
 80137da:	f040 8140 	bne.w	8013a5e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137e4:	689b      	ldr	r3, [r3, #8]
 80137e6:	6839      	ldr	r1, [r7, #0]
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	4798      	blx	r3
 80137ec:	4603      	mov	r3, r0
 80137ee:	73fb      	strb	r3, [r7, #15]
      break;
 80137f0:	e13a      	b.n	8013a68 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	785b      	ldrb	r3, [r3, #1]
 80137f6:	2b03      	cmp	r3, #3
 80137f8:	d007      	beq.n	801380a <USBD_StdEPReq+0x5c>
 80137fa:	2b03      	cmp	r3, #3
 80137fc:	f300 8129 	bgt.w	8013a52 <USBD_StdEPReq+0x2a4>
 8013800:	2b00      	cmp	r3, #0
 8013802:	d07f      	beq.n	8013904 <USBD_StdEPReq+0x156>
 8013804:	2b01      	cmp	r3, #1
 8013806:	d03c      	beq.n	8013882 <USBD_StdEPReq+0xd4>
 8013808:	e123      	b.n	8013a52 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013810:	b2db      	uxtb	r3, r3
 8013812:	2b02      	cmp	r3, #2
 8013814:	d002      	beq.n	801381c <USBD_StdEPReq+0x6e>
 8013816:	2b03      	cmp	r3, #3
 8013818:	d016      	beq.n	8013848 <USBD_StdEPReq+0x9a>
 801381a:	e02c      	b.n	8013876 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801381c:	7bbb      	ldrb	r3, [r7, #14]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d00d      	beq.n	801383e <USBD_StdEPReq+0x90>
 8013822:	7bbb      	ldrb	r3, [r7, #14]
 8013824:	2b80      	cmp	r3, #128	; 0x80
 8013826:	d00a      	beq.n	801383e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013828:	7bbb      	ldrb	r3, [r7, #14]
 801382a:	4619      	mov	r1, r3
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	f004 f86c 	bl	801790a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013832:	2180      	movs	r1, #128	; 0x80
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f004 f868 	bl	801790a <USBD_LL_StallEP>
 801383a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801383c:	e020      	b.n	8013880 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801383e:	6839      	ldr	r1, [r7, #0]
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f000 fc6f 	bl	8014124 <USBD_CtlError>
              break;
 8013846:	e01b      	b.n	8013880 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	885b      	ldrh	r3, [r3, #2]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d10e      	bne.n	801386e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013850:	7bbb      	ldrb	r3, [r7, #14]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d00b      	beq.n	801386e <USBD_StdEPReq+0xc0>
 8013856:	7bbb      	ldrb	r3, [r7, #14]
 8013858:	2b80      	cmp	r3, #128	; 0x80
 801385a:	d008      	beq.n	801386e <USBD_StdEPReq+0xc0>
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	88db      	ldrh	r3, [r3, #6]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d104      	bne.n	801386e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013864:	7bbb      	ldrb	r3, [r7, #14]
 8013866:	4619      	mov	r1, r3
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f004 f84e 	bl	801790a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f000 fd06 	bl	8014280 <USBD_CtlSendStatus>

              break;
 8013874:	e004      	b.n	8013880 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8013876:	6839      	ldr	r1, [r7, #0]
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f000 fc53 	bl	8014124 <USBD_CtlError>
              break;
 801387e:	bf00      	nop
          }
          break;
 8013880:	e0ec      	b.n	8013a5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013888:	b2db      	uxtb	r3, r3
 801388a:	2b02      	cmp	r3, #2
 801388c:	d002      	beq.n	8013894 <USBD_StdEPReq+0xe6>
 801388e:	2b03      	cmp	r3, #3
 8013890:	d016      	beq.n	80138c0 <USBD_StdEPReq+0x112>
 8013892:	e030      	b.n	80138f6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013894:	7bbb      	ldrb	r3, [r7, #14]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d00d      	beq.n	80138b6 <USBD_StdEPReq+0x108>
 801389a:	7bbb      	ldrb	r3, [r7, #14]
 801389c:	2b80      	cmp	r3, #128	; 0x80
 801389e:	d00a      	beq.n	80138b6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80138a0:	7bbb      	ldrb	r3, [r7, #14]
 80138a2:	4619      	mov	r1, r3
 80138a4:	6878      	ldr	r0, [r7, #4]
 80138a6:	f004 f830 	bl	801790a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80138aa:	2180      	movs	r1, #128	; 0x80
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f004 f82c 	bl	801790a <USBD_LL_StallEP>
 80138b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80138b4:	e025      	b.n	8013902 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80138b6:	6839      	ldr	r1, [r7, #0]
 80138b8:	6878      	ldr	r0, [r7, #4]
 80138ba:	f000 fc33 	bl	8014124 <USBD_CtlError>
              break;
 80138be:	e020      	b.n	8013902 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	885b      	ldrh	r3, [r3, #2]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d11b      	bne.n	8013900 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80138c8:	7bbb      	ldrb	r3, [r7, #14]
 80138ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d004      	beq.n	80138dc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80138d2:	7bbb      	ldrb	r3, [r7, #14]
 80138d4:	4619      	mov	r1, r3
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f004 f836 	bl	8017948 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f000 fccf 	bl	8014280 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138e8:	689b      	ldr	r3, [r3, #8]
 80138ea:	6839      	ldr	r1, [r7, #0]
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	4798      	blx	r3
 80138f0:	4603      	mov	r3, r0
 80138f2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80138f4:	e004      	b.n	8013900 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80138f6:	6839      	ldr	r1, [r7, #0]
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f000 fc13 	bl	8014124 <USBD_CtlError>
              break;
 80138fe:	e000      	b.n	8013902 <USBD_StdEPReq+0x154>
              break;
 8013900:	bf00      	nop
          }
          break;
 8013902:	e0ab      	b.n	8013a5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801390a:	b2db      	uxtb	r3, r3
 801390c:	2b02      	cmp	r3, #2
 801390e:	d002      	beq.n	8013916 <USBD_StdEPReq+0x168>
 8013910:	2b03      	cmp	r3, #3
 8013912:	d032      	beq.n	801397a <USBD_StdEPReq+0x1cc>
 8013914:	e097      	b.n	8013a46 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013916:	7bbb      	ldrb	r3, [r7, #14]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d007      	beq.n	801392c <USBD_StdEPReq+0x17e>
 801391c:	7bbb      	ldrb	r3, [r7, #14]
 801391e:	2b80      	cmp	r3, #128	; 0x80
 8013920:	d004      	beq.n	801392c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8013922:	6839      	ldr	r1, [r7, #0]
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f000 fbfd 	bl	8014124 <USBD_CtlError>
                break;
 801392a:	e091      	b.n	8013a50 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801392c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013930:	2b00      	cmp	r3, #0
 8013932:	da0b      	bge.n	801394c <USBD_StdEPReq+0x19e>
 8013934:	7bbb      	ldrb	r3, [r7, #14]
 8013936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801393a:	4613      	mov	r3, r2
 801393c:	009b      	lsls	r3, r3, #2
 801393e:	4413      	add	r3, r2
 8013940:	009b      	lsls	r3, r3, #2
 8013942:	3310      	adds	r3, #16
 8013944:	687a      	ldr	r2, [r7, #4]
 8013946:	4413      	add	r3, r2
 8013948:	3304      	adds	r3, #4
 801394a:	e00b      	b.n	8013964 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801394c:	7bbb      	ldrb	r3, [r7, #14]
 801394e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013952:	4613      	mov	r3, r2
 8013954:	009b      	lsls	r3, r3, #2
 8013956:	4413      	add	r3, r2
 8013958:	009b      	lsls	r3, r3, #2
 801395a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801395e:	687a      	ldr	r2, [r7, #4]
 8013960:	4413      	add	r3, r2
 8013962:	3304      	adds	r3, #4
 8013964:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	2200      	movs	r2, #0
 801396a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	2202      	movs	r2, #2
 8013970:	4619      	mov	r1, r3
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f000 fc47 	bl	8014206 <USBD_CtlSendData>
              break;
 8013978:	e06a      	b.n	8013a50 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801397a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801397e:	2b00      	cmp	r3, #0
 8013980:	da11      	bge.n	80139a6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013982:	7bbb      	ldrb	r3, [r7, #14]
 8013984:	f003 020f 	and.w	r2, r3, #15
 8013988:	6879      	ldr	r1, [r7, #4]
 801398a:	4613      	mov	r3, r2
 801398c:	009b      	lsls	r3, r3, #2
 801398e:	4413      	add	r3, r2
 8013990:	009b      	lsls	r3, r3, #2
 8013992:	440b      	add	r3, r1
 8013994:	3324      	adds	r3, #36	; 0x24
 8013996:	881b      	ldrh	r3, [r3, #0]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d117      	bne.n	80139cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801399c:	6839      	ldr	r1, [r7, #0]
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f000 fbc0 	bl	8014124 <USBD_CtlError>
                  break;
 80139a4:	e054      	b.n	8013a50 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80139a6:	7bbb      	ldrb	r3, [r7, #14]
 80139a8:	f003 020f 	and.w	r2, r3, #15
 80139ac:	6879      	ldr	r1, [r7, #4]
 80139ae:	4613      	mov	r3, r2
 80139b0:	009b      	lsls	r3, r3, #2
 80139b2:	4413      	add	r3, r2
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	440b      	add	r3, r1
 80139b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80139bc:	881b      	ldrh	r3, [r3, #0]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d104      	bne.n	80139cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80139c2:	6839      	ldr	r1, [r7, #0]
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f000 fbad 	bl	8014124 <USBD_CtlError>
                  break;
 80139ca:	e041      	b.n	8013a50 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80139cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	da0b      	bge.n	80139ec <USBD_StdEPReq+0x23e>
 80139d4:	7bbb      	ldrb	r3, [r7, #14]
 80139d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80139da:	4613      	mov	r3, r2
 80139dc:	009b      	lsls	r3, r3, #2
 80139de:	4413      	add	r3, r2
 80139e0:	009b      	lsls	r3, r3, #2
 80139e2:	3310      	adds	r3, #16
 80139e4:	687a      	ldr	r2, [r7, #4]
 80139e6:	4413      	add	r3, r2
 80139e8:	3304      	adds	r3, #4
 80139ea:	e00b      	b.n	8013a04 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80139ec:	7bbb      	ldrb	r3, [r7, #14]
 80139ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80139f2:	4613      	mov	r3, r2
 80139f4:	009b      	lsls	r3, r3, #2
 80139f6:	4413      	add	r3, r2
 80139f8:	009b      	lsls	r3, r3, #2
 80139fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80139fe:	687a      	ldr	r2, [r7, #4]
 8013a00:	4413      	add	r3, r2
 8013a02:	3304      	adds	r3, #4
 8013a04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013a06:	7bbb      	ldrb	r3, [r7, #14]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d002      	beq.n	8013a12 <USBD_StdEPReq+0x264>
 8013a0c:	7bbb      	ldrb	r3, [r7, #14]
 8013a0e:	2b80      	cmp	r3, #128	; 0x80
 8013a10:	d103      	bne.n	8013a1a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	2200      	movs	r2, #0
 8013a16:	601a      	str	r2, [r3, #0]
 8013a18:	e00e      	b.n	8013a38 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013a1a:	7bbb      	ldrb	r3, [r7, #14]
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	f003 ffb1 	bl	8017986 <USBD_LL_IsStallEP>
 8013a24:	4603      	mov	r3, r0
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d003      	beq.n	8013a32 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013a2a:	68bb      	ldr	r3, [r7, #8]
 8013a2c:	2201      	movs	r2, #1
 8013a2e:	601a      	str	r2, [r3, #0]
 8013a30:	e002      	b.n	8013a38 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	2200      	movs	r2, #0
 8013a36:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013a38:	68bb      	ldr	r3, [r7, #8]
 8013a3a:	2202      	movs	r2, #2
 8013a3c:	4619      	mov	r1, r3
 8013a3e:	6878      	ldr	r0, [r7, #4]
 8013a40:	f000 fbe1 	bl	8014206 <USBD_CtlSendData>
              break;
 8013a44:	e004      	b.n	8013a50 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8013a46:	6839      	ldr	r1, [r7, #0]
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f000 fb6b 	bl	8014124 <USBD_CtlError>
              break;
 8013a4e:	bf00      	nop
          }
          break;
 8013a50:	e004      	b.n	8013a5c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8013a52:	6839      	ldr	r1, [r7, #0]
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f000 fb65 	bl	8014124 <USBD_CtlError>
          break;
 8013a5a:	bf00      	nop
      }
      break;
 8013a5c:	e004      	b.n	8013a68 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8013a5e:	6839      	ldr	r1, [r7, #0]
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f000 fb5f 	bl	8014124 <USBD_CtlError>
      break;
 8013a66:	bf00      	nop
  }

  return ret;
 8013a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	3710      	adds	r7, #16
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}
	...

08013a74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013a82:	2300      	movs	r3, #0
 8013a84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013a86:	2300      	movs	r3, #0
 8013a88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	885b      	ldrh	r3, [r3, #2]
 8013a8e:	0a1b      	lsrs	r3, r3, #8
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	3b01      	subs	r3, #1
 8013a94:	2b0e      	cmp	r3, #14
 8013a96:	f200 8152 	bhi.w	8013d3e <USBD_GetDescriptor+0x2ca>
 8013a9a:	a201      	add	r2, pc, #4	; (adr r2, 8013aa0 <USBD_GetDescriptor+0x2c>)
 8013a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013aa0:	08013b11 	.word	0x08013b11
 8013aa4:	08013b29 	.word	0x08013b29
 8013aa8:	08013b69 	.word	0x08013b69
 8013aac:	08013d3f 	.word	0x08013d3f
 8013ab0:	08013d3f 	.word	0x08013d3f
 8013ab4:	08013cdf 	.word	0x08013cdf
 8013ab8:	08013d0b 	.word	0x08013d0b
 8013abc:	08013d3f 	.word	0x08013d3f
 8013ac0:	08013d3f 	.word	0x08013d3f
 8013ac4:	08013d3f 	.word	0x08013d3f
 8013ac8:	08013d3f 	.word	0x08013d3f
 8013acc:	08013d3f 	.word	0x08013d3f
 8013ad0:	08013d3f 	.word	0x08013d3f
 8013ad4:	08013d3f 	.word	0x08013d3f
 8013ad8:	08013add 	.word	0x08013add
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ae2:	69db      	ldr	r3, [r3, #28]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d00b      	beq.n	8013b00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013aee:	69db      	ldr	r3, [r3, #28]
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	7c12      	ldrb	r2, [r2, #16]
 8013af4:	f107 0108 	add.w	r1, r7, #8
 8013af8:	4610      	mov	r0, r2
 8013afa:	4798      	blx	r3
 8013afc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013afe:	e126      	b.n	8013d4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013b00:	6839      	ldr	r1, [r7, #0]
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f000 fb0e 	bl	8014124 <USBD_CtlError>
        err++;
 8013b08:	7afb      	ldrb	r3, [r7, #11]
 8013b0a:	3301      	adds	r3, #1
 8013b0c:	72fb      	strb	r3, [r7, #11]
      break;
 8013b0e:	e11e      	b.n	8013d4e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	687a      	ldr	r2, [r7, #4]
 8013b1a:	7c12      	ldrb	r2, [r2, #16]
 8013b1c:	f107 0108 	add.w	r1, r7, #8
 8013b20:	4610      	mov	r0, r2
 8013b22:	4798      	blx	r3
 8013b24:	60f8      	str	r0, [r7, #12]
      break;
 8013b26:	e112      	b.n	8013d4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	7c1b      	ldrb	r3, [r3, #16]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d10d      	bne.n	8013b4c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b38:	f107 0208 	add.w	r2, r7, #8
 8013b3c:	4610      	mov	r0, r2
 8013b3e:	4798      	blx	r3
 8013b40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	3301      	adds	r3, #1
 8013b46:	2202      	movs	r2, #2
 8013b48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013b4a:	e100      	b.n	8013d4e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b54:	f107 0208 	add.w	r2, r7, #8
 8013b58:	4610      	mov	r0, r2
 8013b5a:	4798      	blx	r3
 8013b5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	3301      	adds	r3, #1
 8013b62:	2202      	movs	r2, #2
 8013b64:	701a      	strb	r2, [r3, #0]
      break;
 8013b66:	e0f2      	b.n	8013d4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	885b      	ldrh	r3, [r3, #2]
 8013b6c:	b2db      	uxtb	r3, r3
 8013b6e:	2b05      	cmp	r3, #5
 8013b70:	f200 80ac 	bhi.w	8013ccc <USBD_GetDescriptor+0x258>
 8013b74:	a201      	add	r2, pc, #4	; (adr r2, 8013b7c <USBD_GetDescriptor+0x108>)
 8013b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b7a:	bf00      	nop
 8013b7c:	08013b95 	.word	0x08013b95
 8013b80:	08013bc9 	.word	0x08013bc9
 8013b84:	08013bfd 	.word	0x08013bfd
 8013b88:	08013c31 	.word	0x08013c31
 8013b8c:	08013c65 	.word	0x08013c65
 8013b90:	08013c99 	.word	0x08013c99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d00b      	beq.n	8013bb8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ba6:	685b      	ldr	r3, [r3, #4]
 8013ba8:	687a      	ldr	r2, [r7, #4]
 8013baa:	7c12      	ldrb	r2, [r2, #16]
 8013bac:	f107 0108 	add.w	r1, r7, #8
 8013bb0:	4610      	mov	r0, r2
 8013bb2:	4798      	blx	r3
 8013bb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013bb6:	e091      	b.n	8013cdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013bb8:	6839      	ldr	r1, [r7, #0]
 8013bba:	6878      	ldr	r0, [r7, #4]
 8013bbc:	f000 fab2 	bl	8014124 <USBD_CtlError>
            err++;
 8013bc0:	7afb      	ldrb	r3, [r7, #11]
 8013bc2:	3301      	adds	r3, #1
 8013bc4:	72fb      	strb	r3, [r7, #11]
          break;
 8013bc6:	e089      	b.n	8013cdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bce:	689b      	ldr	r3, [r3, #8]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d00b      	beq.n	8013bec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bda:	689b      	ldr	r3, [r3, #8]
 8013bdc:	687a      	ldr	r2, [r7, #4]
 8013bde:	7c12      	ldrb	r2, [r2, #16]
 8013be0:	f107 0108 	add.w	r1, r7, #8
 8013be4:	4610      	mov	r0, r2
 8013be6:	4798      	blx	r3
 8013be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013bea:	e077      	b.n	8013cdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013bec:	6839      	ldr	r1, [r7, #0]
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f000 fa98 	bl	8014124 <USBD_CtlError>
            err++;
 8013bf4:	7afb      	ldrb	r3, [r7, #11]
 8013bf6:	3301      	adds	r3, #1
 8013bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8013bfa:	e06f      	b.n	8013cdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c02:	68db      	ldr	r3, [r3, #12]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d00b      	beq.n	8013c20 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c0e:	68db      	ldr	r3, [r3, #12]
 8013c10:	687a      	ldr	r2, [r7, #4]
 8013c12:	7c12      	ldrb	r2, [r2, #16]
 8013c14:	f107 0108 	add.w	r1, r7, #8
 8013c18:	4610      	mov	r0, r2
 8013c1a:	4798      	blx	r3
 8013c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c1e:	e05d      	b.n	8013cdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013c20:	6839      	ldr	r1, [r7, #0]
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	f000 fa7e 	bl	8014124 <USBD_CtlError>
            err++;
 8013c28:	7afb      	ldrb	r3, [r7, #11]
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8013c2e:	e055      	b.n	8013cdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c36:	691b      	ldr	r3, [r3, #16]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d00b      	beq.n	8013c54 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c42:	691b      	ldr	r3, [r3, #16]
 8013c44:	687a      	ldr	r2, [r7, #4]
 8013c46:	7c12      	ldrb	r2, [r2, #16]
 8013c48:	f107 0108 	add.w	r1, r7, #8
 8013c4c:	4610      	mov	r0, r2
 8013c4e:	4798      	blx	r3
 8013c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c52:	e043      	b.n	8013cdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013c54:	6839      	ldr	r1, [r7, #0]
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f000 fa64 	bl	8014124 <USBD_CtlError>
            err++;
 8013c5c:	7afb      	ldrb	r3, [r7, #11]
 8013c5e:	3301      	adds	r3, #1
 8013c60:	72fb      	strb	r3, [r7, #11]
          break;
 8013c62:	e03b      	b.n	8013cdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c6a:	695b      	ldr	r3, [r3, #20]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d00b      	beq.n	8013c88 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c76:	695b      	ldr	r3, [r3, #20]
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	7c12      	ldrb	r2, [r2, #16]
 8013c7c:	f107 0108 	add.w	r1, r7, #8
 8013c80:	4610      	mov	r0, r2
 8013c82:	4798      	blx	r3
 8013c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c86:	e029      	b.n	8013cdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013c88:	6839      	ldr	r1, [r7, #0]
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f000 fa4a 	bl	8014124 <USBD_CtlError>
            err++;
 8013c90:	7afb      	ldrb	r3, [r7, #11]
 8013c92:	3301      	adds	r3, #1
 8013c94:	72fb      	strb	r3, [r7, #11]
          break;
 8013c96:	e021      	b.n	8013cdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c9e:	699b      	ldr	r3, [r3, #24]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d00b      	beq.n	8013cbc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013caa:	699b      	ldr	r3, [r3, #24]
 8013cac:	687a      	ldr	r2, [r7, #4]
 8013cae:	7c12      	ldrb	r2, [r2, #16]
 8013cb0:	f107 0108 	add.w	r1, r7, #8
 8013cb4:	4610      	mov	r0, r2
 8013cb6:	4798      	blx	r3
 8013cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013cba:	e00f      	b.n	8013cdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013cbc:	6839      	ldr	r1, [r7, #0]
 8013cbe:	6878      	ldr	r0, [r7, #4]
 8013cc0:	f000 fa30 	bl	8014124 <USBD_CtlError>
            err++;
 8013cc4:	7afb      	ldrb	r3, [r7, #11]
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8013cca:	e007      	b.n	8013cdc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013ccc:	6839      	ldr	r1, [r7, #0]
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f000 fa28 	bl	8014124 <USBD_CtlError>
          err++;
 8013cd4:	7afb      	ldrb	r3, [r7, #11]
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013cda:	bf00      	nop
      }
      break;
 8013cdc:	e037      	b.n	8013d4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	7c1b      	ldrb	r3, [r3, #16]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d109      	bne.n	8013cfa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013cee:	f107 0208 	add.w	r2, r7, #8
 8013cf2:	4610      	mov	r0, r2
 8013cf4:	4798      	blx	r3
 8013cf6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013cf8:	e029      	b.n	8013d4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013cfa:	6839      	ldr	r1, [r7, #0]
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f000 fa11 	bl	8014124 <USBD_CtlError>
        err++;
 8013d02:	7afb      	ldrb	r3, [r7, #11]
 8013d04:	3301      	adds	r3, #1
 8013d06:	72fb      	strb	r3, [r7, #11]
      break;
 8013d08:	e021      	b.n	8013d4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	7c1b      	ldrb	r3, [r3, #16]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d10d      	bne.n	8013d2e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d1a:	f107 0208 	add.w	r2, r7, #8
 8013d1e:	4610      	mov	r0, r2
 8013d20:	4798      	blx	r3
 8013d22:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	3301      	adds	r3, #1
 8013d28:	2207      	movs	r2, #7
 8013d2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013d2c:	e00f      	b.n	8013d4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013d2e:	6839      	ldr	r1, [r7, #0]
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f000 f9f7 	bl	8014124 <USBD_CtlError>
        err++;
 8013d36:	7afb      	ldrb	r3, [r7, #11]
 8013d38:	3301      	adds	r3, #1
 8013d3a:	72fb      	strb	r3, [r7, #11]
      break;
 8013d3c:	e007      	b.n	8013d4e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013d3e:	6839      	ldr	r1, [r7, #0]
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f000 f9ef 	bl	8014124 <USBD_CtlError>
      err++;
 8013d46:	7afb      	ldrb	r3, [r7, #11]
 8013d48:	3301      	adds	r3, #1
 8013d4a:	72fb      	strb	r3, [r7, #11]
      break;
 8013d4c:	bf00      	nop
  }

  if (err != 0U)
 8013d4e:	7afb      	ldrb	r3, [r7, #11]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d11e      	bne.n	8013d92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	88db      	ldrh	r3, [r3, #6]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d016      	beq.n	8013d8a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013d5c:	893b      	ldrh	r3, [r7, #8]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d00e      	beq.n	8013d80 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	88da      	ldrh	r2, [r3, #6]
 8013d66:	893b      	ldrh	r3, [r7, #8]
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	bf28      	it	cs
 8013d6c:	4613      	movcs	r3, r2
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013d72:	893b      	ldrh	r3, [r7, #8]
 8013d74:	461a      	mov	r2, r3
 8013d76:	68f9      	ldr	r1, [r7, #12]
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f000 fa44 	bl	8014206 <USBD_CtlSendData>
 8013d7e:	e009      	b.n	8013d94 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013d80:	6839      	ldr	r1, [r7, #0]
 8013d82:	6878      	ldr	r0, [r7, #4]
 8013d84:	f000 f9ce 	bl	8014124 <USBD_CtlError>
 8013d88:	e004      	b.n	8013d94 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013d8a:	6878      	ldr	r0, [r7, #4]
 8013d8c:	f000 fa78 	bl	8014280 <USBD_CtlSendStatus>
 8013d90:	e000      	b.n	8013d94 <USBD_GetDescriptor+0x320>
    return;
 8013d92:	bf00      	nop
  }
}
 8013d94:	3710      	adds	r7, #16
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	bf00      	nop

08013d9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b084      	sub	sp, #16
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	889b      	ldrh	r3, [r3, #4]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d131      	bne.n	8013e12 <USBD_SetAddress+0x76>
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	88db      	ldrh	r3, [r3, #6]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d12d      	bne.n	8013e12 <USBD_SetAddress+0x76>
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	885b      	ldrh	r3, [r3, #2]
 8013dba:	2b7f      	cmp	r3, #127	; 0x7f
 8013dbc:	d829      	bhi.n	8013e12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	885b      	ldrh	r3, [r3, #2]
 8013dc2:	b2db      	uxtb	r3, r3
 8013dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013dc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013dd0:	b2db      	uxtb	r3, r3
 8013dd2:	2b03      	cmp	r3, #3
 8013dd4:	d104      	bne.n	8013de0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013dd6:	6839      	ldr	r1, [r7, #0]
 8013dd8:	6878      	ldr	r0, [r7, #4]
 8013dda:	f000 f9a3 	bl	8014124 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dde:	e01d      	b.n	8013e1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	7bfa      	ldrb	r2, [r7, #15]
 8013de4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013de8:	7bfb      	ldrb	r3, [r7, #15]
 8013dea:	4619      	mov	r1, r3
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f003 fdf6 	bl	80179de <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013df2:	6878      	ldr	r0, [r7, #4]
 8013df4:	f000 fa44 	bl	8014280 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013df8:	7bfb      	ldrb	r3, [r7, #15]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d004      	beq.n	8013e08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	2202      	movs	r2, #2
 8013e02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e06:	e009      	b.n	8013e1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2201      	movs	r2, #1
 8013e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e10:	e004      	b.n	8013e1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013e12:	6839      	ldr	r1, [r7, #0]
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f000 f985 	bl	8014124 <USBD_CtlError>
  }
}
 8013e1a:	bf00      	nop
 8013e1c:	bf00      	nop
 8013e1e:	3710      	adds	r7, #16
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b084      	sub	sp, #16
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
 8013e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	885b      	ldrh	r3, [r3, #2]
 8013e36:	b2da      	uxtb	r2, r3
 8013e38:	4b4c      	ldr	r3, [pc, #304]	; (8013f6c <USBD_SetConfig+0x148>)
 8013e3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013e3c:	4b4b      	ldr	r3, [pc, #300]	; (8013f6c <USBD_SetConfig+0x148>)
 8013e3e:	781b      	ldrb	r3, [r3, #0]
 8013e40:	2b01      	cmp	r3, #1
 8013e42:	d905      	bls.n	8013e50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013e44:	6839      	ldr	r1, [r7, #0]
 8013e46:	6878      	ldr	r0, [r7, #4]
 8013e48:	f000 f96c 	bl	8014124 <USBD_CtlError>
    return USBD_FAIL;
 8013e4c:	2303      	movs	r3, #3
 8013e4e:	e088      	b.n	8013f62 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e56:	b2db      	uxtb	r3, r3
 8013e58:	2b02      	cmp	r3, #2
 8013e5a:	d002      	beq.n	8013e62 <USBD_SetConfig+0x3e>
 8013e5c:	2b03      	cmp	r3, #3
 8013e5e:	d025      	beq.n	8013eac <USBD_SetConfig+0x88>
 8013e60:	e071      	b.n	8013f46 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013e62:	4b42      	ldr	r3, [pc, #264]	; (8013f6c <USBD_SetConfig+0x148>)
 8013e64:	781b      	ldrb	r3, [r3, #0]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d01c      	beq.n	8013ea4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8013e6a:	4b40      	ldr	r3, [pc, #256]	; (8013f6c <USBD_SetConfig+0x148>)
 8013e6c:	781b      	ldrb	r3, [r3, #0]
 8013e6e:	461a      	mov	r2, r3
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013e74:	4b3d      	ldr	r3, [pc, #244]	; (8013f6c <USBD_SetConfig+0x148>)
 8013e76:	781b      	ldrb	r3, [r3, #0]
 8013e78:	4619      	mov	r1, r3
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f7ff f91f 	bl	80130be <USBD_SetClassConfig>
 8013e80:	4603      	mov	r3, r0
 8013e82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013e84:	7bfb      	ldrb	r3, [r7, #15]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d004      	beq.n	8013e94 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8013e8a:	6839      	ldr	r1, [r7, #0]
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f000 f949 	bl	8014124 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013e92:	e065      	b.n	8013f60 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f000 f9f3 	bl	8014280 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	2203      	movs	r2, #3
 8013e9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013ea2:	e05d      	b.n	8013f60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f000 f9eb 	bl	8014280 <USBD_CtlSendStatus>
      break;
 8013eaa:	e059      	b.n	8013f60 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013eac:	4b2f      	ldr	r3, [pc, #188]	; (8013f6c <USBD_SetConfig+0x148>)
 8013eae:	781b      	ldrb	r3, [r3, #0]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d112      	bne.n	8013eda <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2202      	movs	r2, #2
 8013eb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8013ebc:	4b2b      	ldr	r3, [pc, #172]	; (8013f6c <USBD_SetConfig+0x148>)
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	461a      	mov	r2, r3
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013ec6:	4b29      	ldr	r3, [pc, #164]	; (8013f6c <USBD_SetConfig+0x148>)
 8013ec8:	781b      	ldrb	r3, [r3, #0]
 8013eca:	4619      	mov	r1, r3
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f7ff f912 	bl	80130f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f000 f9d4 	bl	8014280 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013ed8:	e042      	b.n	8013f60 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8013eda:	4b24      	ldr	r3, [pc, #144]	; (8013f6c <USBD_SetConfig+0x148>)
 8013edc:	781b      	ldrb	r3, [r3, #0]
 8013ede:	461a      	mov	r2, r3
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d02a      	beq.n	8013f3e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	685b      	ldr	r3, [r3, #4]
 8013eec:	b2db      	uxtb	r3, r3
 8013eee:	4619      	mov	r1, r3
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f7ff f900 	bl	80130f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013ef6:	4b1d      	ldr	r3, [pc, #116]	; (8013f6c <USBD_SetConfig+0x148>)
 8013ef8:	781b      	ldrb	r3, [r3, #0]
 8013efa:	461a      	mov	r2, r3
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013f00:	4b1a      	ldr	r3, [pc, #104]	; (8013f6c <USBD_SetConfig+0x148>)
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	4619      	mov	r1, r3
 8013f06:	6878      	ldr	r0, [r7, #4]
 8013f08:	f7ff f8d9 	bl	80130be <USBD_SetClassConfig>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013f10:	7bfb      	ldrb	r3, [r7, #15]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d00f      	beq.n	8013f36 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8013f16:	6839      	ldr	r1, [r7, #0]
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f000 f903 	bl	8014124 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	685b      	ldr	r3, [r3, #4]
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	4619      	mov	r1, r3
 8013f26:	6878      	ldr	r0, [r7, #4]
 8013f28:	f7ff f8e5 	bl	80130f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2202      	movs	r2, #2
 8013f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013f34:	e014      	b.n	8013f60 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f000 f9a2 	bl	8014280 <USBD_CtlSendStatus>
      break;
 8013f3c:	e010      	b.n	8013f60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f000 f99e 	bl	8014280 <USBD_CtlSendStatus>
      break;
 8013f44:	e00c      	b.n	8013f60 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8013f46:	6839      	ldr	r1, [r7, #0]
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f000 f8eb 	bl	8014124 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013f4e:	4b07      	ldr	r3, [pc, #28]	; (8013f6c <USBD_SetConfig+0x148>)
 8013f50:	781b      	ldrb	r3, [r3, #0]
 8013f52:	4619      	mov	r1, r3
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	f7ff f8ce 	bl	80130f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013f5a:	2303      	movs	r3, #3
 8013f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8013f5e:	bf00      	nop
  }

  return ret;
 8013f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3710      	adds	r7, #16
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop
 8013f6c:	20000200 	.word	0x20000200

08013f70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	88db      	ldrh	r3, [r3, #6]
 8013f7e:	2b01      	cmp	r3, #1
 8013f80:	d004      	beq.n	8013f8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013f82:	6839      	ldr	r1, [r7, #0]
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f000 f8cd 	bl	8014124 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013f8a:	e023      	b.n	8013fd4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f92:	b2db      	uxtb	r3, r3
 8013f94:	2b02      	cmp	r3, #2
 8013f96:	dc02      	bgt.n	8013f9e <USBD_GetConfig+0x2e>
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	dc03      	bgt.n	8013fa4 <USBD_GetConfig+0x34>
 8013f9c:	e015      	b.n	8013fca <USBD_GetConfig+0x5a>
 8013f9e:	2b03      	cmp	r3, #3
 8013fa0:	d00b      	beq.n	8013fba <USBD_GetConfig+0x4a>
 8013fa2:	e012      	b.n	8013fca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	3308      	adds	r3, #8
 8013fae:	2201      	movs	r2, #1
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f000 f927 	bl	8014206 <USBD_CtlSendData>
        break;
 8013fb8:	e00c      	b.n	8013fd4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	3304      	adds	r3, #4
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	4619      	mov	r1, r3
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f000 f91f 	bl	8014206 <USBD_CtlSendData>
        break;
 8013fc8:	e004      	b.n	8013fd4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013fca:	6839      	ldr	r1, [r7, #0]
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f000 f8a9 	bl	8014124 <USBD_CtlError>
        break;
 8013fd2:	bf00      	nop
}
 8013fd4:	bf00      	nop
 8013fd6:	3708      	adds	r7, #8
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}

08013fdc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b082      	sub	sp, #8
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fec:	b2db      	uxtb	r3, r3
 8013fee:	3b01      	subs	r3, #1
 8013ff0:	2b02      	cmp	r3, #2
 8013ff2:	d81e      	bhi.n	8014032 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	88db      	ldrh	r3, [r3, #6]
 8013ff8:	2b02      	cmp	r3, #2
 8013ffa:	d004      	beq.n	8014006 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013ffc:	6839      	ldr	r1, [r7, #0]
 8013ffe:	6878      	ldr	r0, [r7, #4]
 8014000:	f000 f890 	bl	8014124 <USBD_CtlError>
        break;
 8014004:	e01a      	b.n	801403c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	2201      	movs	r2, #1
 801400a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014012:	2b00      	cmp	r3, #0
 8014014:	d005      	beq.n	8014022 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	68db      	ldr	r3, [r3, #12]
 801401a:	f043 0202 	orr.w	r2, r3, #2
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	330c      	adds	r3, #12
 8014026:	2202      	movs	r2, #2
 8014028:	4619      	mov	r1, r3
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f000 f8eb 	bl	8014206 <USBD_CtlSendData>
      break;
 8014030:	e004      	b.n	801403c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014032:	6839      	ldr	r1, [r7, #0]
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f000 f875 	bl	8014124 <USBD_CtlError>
      break;
 801403a:	bf00      	nop
  }
}
 801403c:	bf00      	nop
 801403e:	3708      	adds	r7, #8
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}

08014044 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
 801404c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	885b      	ldrh	r3, [r3, #2]
 8014052:	2b01      	cmp	r3, #1
 8014054:	d106      	bne.n	8014064 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	2201      	movs	r2, #1
 801405a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f000 f90e 	bl	8014280 <USBD_CtlSendStatus>
  }
}
 8014064:	bf00      	nop
 8014066:	3708      	adds	r7, #8
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}

0801406c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801407c:	b2db      	uxtb	r3, r3
 801407e:	3b01      	subs	r3, #1
 8014080:	2b02      	cmp	r3, #2
 8014082:	d80b      	bhi.n	801409c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	885b      	ldrh	r3, [r3, #2]
 8014088:	2b01      	cmp	r3, #1
 801408a:	d10c      	bne.n	80140a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2200      	movs	r2, #0
 8014090:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f000 f8f3 	bl	8014280 <USBD_CtlSendStatus>
      }
      break;
 801409a:	e004      	b.n	80140a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801409c:	6839      	ldr	r1, [r7, #0]
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f000 f840 	bl	8014124 <USBD_CtlError>
      break;
 80140a4:	e000      	b.n	80140a8 <USBD_ClrFeature+0x3c>
      break;
 80140a6:	bf00      	nop
  }
}
 80140a8:	bf00      	nop
 80140aa:	3708      	adds	r7, #8
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80140ba:	683b      	ldr	r3, [r7, #0]
 80140bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	781a      	ldrb	r2, [r3, #0]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	3301      	adds	r3, #1
 80140ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	781a      	ldrb	r2, [r3, #0]
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	3301      	adds	r3, #1
 80140d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80140da:	68f8      	ldr	r0, [r7, #12]
 80140dc:	f7ff fa92 	bl	8013604 <SWAPBYTE>
 80140e0:	4603      	mov	r3, r0
 80140e2:	461a      	mov	r2, r3
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	3301      	adds	r3, #1
 80140ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	3301      	adds	r3, #1
 80140f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f7ff fa85 	bl	8013604 <SWAPBYTE>
 80140fa:	4603      	mov	r3, r0
 80140fc:	461a      	mov	r2, r3
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	3301      	adds	r3, #1
 8014106:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	3301      	adds	r3, #1
 801410c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801410e:	68f8      	ldr	r0, [r7, #12]
 8014110:	f7ff fa78 	bl	8013604 <SWAPBYTE>
 8014114:	4603      	mov	r3, r0
 8014116:	461a      	mov	r2, r3
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	80da      	strh	r2, [r3, #6]
}
 801411c:	bf00      	nop
 801411e:	3710      	adds	r7, #16
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}

08014124 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801412e:	2180      	movs	r1, #128	; 0x80
 8014130:	6878      	ldr	r0, [r7, #4]
 8014132:	f003 fbea 	bl	801790a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014136:	2100      	movs	r1, #0
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f003 fbe6 	bl	801790a <USBD_LL_StallEP>
}
 801413e:	bf00      	nop
 8014140:	3708      	adds	r7, #8
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}

08014146 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014146:	b580      	push	{r7, lr}
 8014148:	b086      	sub	sp, #24
 801414a:	af00      	add	r7, sp, #0
 801414c:	60f8      	str	r0, [r7, #12]
 801414e:	60b9      	str	r1, [r7, #8]
 8014150:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014152:	2300      	movs	r3, #0
 8014154:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d036      	beq.n	80141ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014160:	6938      	ldr	r0, [r7, #16]
 8014162:	f000 f836 	bl	80141d2 <USBD_GetLen>
 8014166:	4603      	mov	r3, r0
 8014168:	3301      	adds	r3, #1
 801416a:	b29b      	uxth	r3, r3
 801416c:	005b      	lsls	r3, r3, #1
 801416e:	b29a      	uxth	r2, r3
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014174:	7dfb      	ldrb	r3, [r7, #23]
 8014176:	68ba      	ldr	r2, [r7, #8]
 8014178:	4413      	add	r3, r2
 801417a:	687a      	ldr	r2, [r7, #4]
 801417c:	7812      	ldrb	r2, [r2, #0]
 801417e:	701a      	strb	r2, [r3, #0]
  idx++;
 8014180:	7dfb      	ldrb	r3, [r7, #23]
 8014182:	3301      	adds	r3, #1
 8014184:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014186:	7dfb      	ldrb	r3, [r7, #23]
 8014188:	68ba      	ldr	r2, [r7, #8]
 801418a:	4413      	add	r3, r2
 801418c:	2203      	movs	r2, #3
 801418e:	701a      	strb	r2, [r3, #0]
  idx++;
 8014190:	7dfb      	ldrb	r3, [r7, #23]
 8014192:	3301      	adds	r3, #1
 8014194:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014196:	e013      	b.n	80141c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014198:	7dfb      	ldrb	r3, [r7, #23]
 801419a:	68ba      	ldr	r2, [r7, #8]
 801419c:	4413      	add	r3, r2
 801419e:	693a      	ldr	r2, [r7, #16]
 80141a0:	7812      	ldrb	r2, [r2, #0]
 80141a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	3301      	adds	r3, #1
 80141a8:	613b      	str	r3, [r7, #16]
    idx++;
 80141aa:	7dfb      	ldrb	r3, [r7, #23]
 80141ac:	3301      	adds	r3, #1
 80141ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80141b0:	7dfb      	ldrb	r3, [r7, #23]
 80141b2:	68ba      	ldr	r2, [r7, #8]
 80141b4:	4413      	add	r3, r2
 80141b6:	2200      	movs	r2, #0
 80141b8:	701a      	strb	r2, [r3, #0]
    idx++;
 80141ba:	7dfb      	ldrb	r3, [r7, #23]
 80141bc:	3301      	adds	r3, #1
 80141be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80141c0:	693b      	ldr	r3, [r7, #16]
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d1e7      	bne.n	8014198 <USBD_GetString+0x52>
 80141c8:	e000      	b.n	80141cc <USBD_GetString+0x86>
    return;
 80141ca:	bf00      	nop
  }
}
 80141cc:	3718      	adds	r7, #24
 80141ce:	46bd      	mov	sp, r7
 80141d0:	bd80      	pop	{r7, pc}

080141d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80141d2:	b480      	push	{r7}
 80141d4:	b085      	sub	sp, #20
 80141d6:	af00      	add	r7, sp, #0
 80141d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80141da:	2300      	movs	r3, #0
 80141dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80141e2:	e005      	b.n	80141f0 <USBD_GetLen+0x1e>
  {
    len++;
 80141e4:	7bfb      	ldrb	r3, [r7, #15]
 80141e6:	3301      	adds	r3, #1
 80141e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	3301      	adds	r3, #1
 80141ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d1f5      	bne.n	80141e4 <USBD_GetLen+0x12>
  }

  return len;
 80141f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80141fa:	4618      	mov	r0, r3
 80141fc:	3714      	adds	r7, #20
 80141fe:	46bd      	mov	sp, r7
 8014200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014204:	4770      	bx	lr

08014206 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014206:	b580      	push	{r7, lr}
 8014208:	b084      	sub	sp, #16
 801420a:	af00      	add	r7, sp, #0
 801420c:	60f8      	str	r0, [r7, #12]
 801420e:	60b9      	str	r1, [r7, #8]
 8014210:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	2202      	movs	r2, #2
 8014216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	687a      	ldr	r2, [r7, #4]
 801421e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	687a      	ldr	r2, [r7, #4]
 8014224:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	68ba      	ldr	r2, [r7, #8]
 801422a:	2100      	movs	r1, #0
 801422c:	68f8      	ldr	r0, [r7, #12]
 801422e:	f003 fbf5 	bl	8017a1c <USBD_LL_Transmit>

  return USBD_OK;
 8014232:	2300      	movs	r3, #0
}
 8014234:	4618      	mov	r0, r3
 8014236:	3710      	adds	r7, #16
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}

0801423c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	60f8      	str	r0, [r7, #12]
 8014244:	60b9      	str	r1, [r7, #8]
 8014246:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	68ba      	ldr	r2, [r7, #8]
 801424c:	2100      	movs	r1, #0
 801424e:	68f8      	ldr	r0, [r7, #12]
 8014250:	f003 fbe4 	bl	8017a1c <USBD_LL_Transmit>

  return USBD_OK;
 8014254:	2300      	movs	r3, #0
}
 8014256:	4618      	mov	r0, r3
 8014258:	3710      	adds	r7, #16
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}

0801425e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801425e:	b580      	push	{r7, lr}
 8014260:	b084      	sub	sp, #16
 8014262:	af00      	add	r7, sp, #0
 8014264:	60f8      	str	r0, [r7, #12]
 8014266:	60b9      	str	r1, [r7, #8]
 8014268:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	68ba      	ldr	r2, [r7, #8]
 801426e:	2100      	movs	r1, #0
 8014270:	68f8      	ldr	r0, [r7, #12]
 8014272:	f003 fbf4 	bl	8017a5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014276:	2300      	movs	r3, #0
}
 8014278:	4618      	mov	r0, r3
 801427a:	3710      	adds	r7, #16
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}

08014280 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2204      	movs	r2, #4
 801428c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014290:	2300      	movs	r3, #0
 8014292:	2200      	movs	r2, #0
 8014294:	2100      	movs	r1, #0
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f003 fbc0 	bl	8017a1c <USBD_LL_Transmit>

  return USBD_OK;
 801429c:	2300      	movs	r3, #0
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3708      	adds	r7, #8
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}

080142a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80142a6:	b580      	push	{r7, lr}
 80142a8:	b082      	sub	sp, #8
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2205      	movs	r2, #5
 80142b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80142b6:	2300      	movs	r3, #0
 80142b8:	2200      	movs	r2, #0
 80142ba:	2100      	movs	r1, #0
 80142bc:	6878      	ldr	r0, [r7, #4]
 80142be:	f003 fbce 	bl	8017a5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80142c2:	2300      	movs	r3, #0
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3708      	adds	r7, #8
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b084      	sub	sp, #16
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	4603      	mov	r3, r0
 80142d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80142d6:	79fb      	ldrb	r3, [r7, #7]
 80142d8:	4a08      	ldr	r2, [pc, #32]	; (80142fc <disk_status+0x30>)
 80142da:	009b      	lsls	r3, r3, #2
 80142dc:	4413      	add	r3, r2
 80142de:	685b      	ldr	r3, [r3, #4]
 80142e0:	685b      	ldr	r3, [r3, #4]
 80142e2:	79fa      	ldrb	r2, [r7, #7]
 80142e4:	4905      	ldr	r1, [pc, #20]	; (80142fc <disk_status+0x30>)
 80142e6:	440a      	add	r2, r1
 80142e8:	7a12      	ldrb	r2, [r2, #8]
 80142ea:	4610      	mov	r0, r2
 80142ec:	4798      	blx	r3
 80142ee:	4603      	mov	r3, r0
 80142f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80142f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	3710      	adds	r7, #16
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bd80      	pop	{r7, pc}
 80142fc:	2000040c 	.word	0x2000040c

08014300 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b084      	sub	sp, #16
 8014304:	af00      	add	r7, sp, #0
 8014306:	4603      	mov	r3, r0
 8014308:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801430a:	2300      	movs	r3, #0
 801430c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801430e:	79fb      	ldrb	r3, [r7, #7]
 8014310:	4a0d      	ldr	r2, [pc, #52]	; (8014348 <disk_initialize+0x48>)
 8014312:	5cd3      	ldrb	r3, [r2, r3]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d111      	bne.n	801433c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014318:	79fb      	ldrb	r3, [r7, #7]
 801431a:	4a0b      	ldr	r2, [pc, #44]	; (8014348 <disk_initialize+0x48>)
 801431c:	2101      	movs	r1, #1
 801431e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014320:	79fb      	ldrb	r3, [r7, #7]
 8014322:	4a09      	ldr	r2, [pc, #36]	; (8014348 <disk_initialize+0x48>)
 8014324:	009b      	lsls	r3, r3, #2
 8014326:	4413      	add	r3, r2
 8014328:	685b      	ldr	r3, [r3, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	79fa      	ldrb	r2, [r7, #7]
 801432e:	4906      	ldr	r1, [pc, #24]	; (8014348 <disk_initialize+0x48>)
 8014330:	440a      	add	r2, r1
 8014332:	7a12      	ldrb	r2, [r2, #8]
 8014334:	4610      	mov	r0, r2
 8014336:	4798      	blx	r3
 8014338:	4603      	mov	r3, r0
 801433a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801433c:	7bfb      	ldrb	r3, [r7, #15]
}
 801433e:	4618      	mov	r0, r3
 8014340:	3710      	adds	r7, #16
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}
 8014346:	bf00      	nop
 8014348:	2000040c 	.word	0x2000040c

0801434c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801434c:	b590      	push	{r4, r7, lr}
 801434e:	b087      	sub	sp, #28
 8014350:	af00      	add	r7, sp, #0
 8014352:	60b9      	str	r1, [r7, #8]
 8014354:	607a      	str	r2, [r7, #4]
 8014356:	603b      	str	r3, [r7, #0]
 8014358:	4603      	mov	r3, r0
 801435a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801435c:	7bfb      	ldrb	r3, [r7, #15]
 801435e:	4a0a      	ldr	r2, [pc, #40]	; (8014388 <disk_read+0x3c>)
 8014360:	009b      	lsls	r3, r3, #2
 8014362:	4413      	add	r3, r2
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	689c      	ldr	r4, [r3, #8]
 8014368:	7bfb      	ldrb	r3, [r7, #15]
 801436a:	4a07      	ldr	r2, [pc, #28]	; (8014388 <disk_read+0x3c>)
 801436c:	4413      	add	r3, r2
 801436e:	7a18      	ldrb	r0, [r3, #8]
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	687a      	ldr	r2, [r7, #4]
 8014374:	68b9      	ldr	r1, [r7, #8]
 8014376:	47a0      	blx	r4
 8014378:	4603      	mov	r3, r0
 801437a:	75fb      	strb	r3, [r7, #23]
  return res;
 801437c:	7dfb      	ldrb	r3, [r7, #23]
}
 801437e:	4618      	mov	r0, r3
 8014380:	371c      	adds	r7, #28
 8014382:	46bd      	mov	sp, r7
 8014384:	bd90      	pop	{r4, r7, pc}
 8014386:	bf00      	nop
 8014388:	2000040c 	.word	0x2000040c

0801438c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801438c:	b590      	push	{r4, r7, lr}
 801438e:	b087      	sub	sp, #28
 8014390:	af00      	add	r7, sp, #0
 8014392:	60b9      	str	r1, [r7, #8]
 8014394:	607a      	str	r2, [r7, #4]
 8014396:	603b      	str	r3, [r7, #0]
 8014398:	4603      	mov	r3, r0
 801439a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801439c:	7bfb      	ldrb	r3, [r7, #15]
 801439e:	4a0a      	ldr	r2, [pc, #40]	; (80143c8 <disk_write+0x3c>)
 80143a0:	009b      	lsls	r3, r3, #2
 80143a2:	4413      	add	r3, r2
 80143a4:	685b      	ldr	r3, [r3, #4]
 80143a6:	68dc      	ldr	r4, [r3, #12]
 80143a8:	7bfb      	ldrb	r3, [r7, #15]
 80143aa:	4a07      	ldr	r2, [pc, #28]	; (80143c8 <disk_write+0x3c>)
 80143ac:	4413      	add	r3, r2
 80143ae:	7a18      	ldrb	r0, [r3, #8]
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	687a      	ldr	r2, [r7, #4]
 80143b4:	68b9      	ldr	r1, [r7, #8]
 80143b6:	47a0      	blx	r4
 80143b8:	4603      	mov	r3, r0
 80143ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80143bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80143be:	4618      	mov	r0, r3
 80143c0:	371c      	adds	r7, #28
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd90      	pop	{r4, r7, pc}
 80143c6:	bf00      	nop
 80143c8:	2000040c 	.word	0x2000040c

080143cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b084      	sub	sp, #16
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	4603      	mov	r3, r0
 80143d4:	603a      	str	r2, [r7, #0]
 80143d6:	71fb      	strb	r3, [r7, #7]
 80143d8:	460b      	mov	r3, r1
 80143da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80143dc:	79fb      	ldrb	r3, [r7, #7]
 80143de:	4a09      	ldr	r2, [pc, #36]	; (8014404 <disk_ioctl+0x38>)
 80143e0:	009b      	lsls	r3, r3, #2
 80143e2:	4413      	add	r3, r2
 80143e4:	685b      	ldr	r3, [r3, #4]
 80143e6:	691b      	ldr	r3, [r3, #16]
 80143e8:	79fa      	ldrb	r2, [r7, #7]
 80143ea:	4906      	ldr	r1, [pc, #24]	; (8014404 <disk_ioctl+0x38>)
 80143ec:	440a      	add	r2, r1
 80143ee:	7a10      	ldrb	r0, [r2, #8]
 80143f0:	79b9      	ldrb	r1, [r7, #6]
 80143f2:	683a      	ldr	r2, [r7, #0]
 80143f4:	4798      	blx	r3
 80143f6:	4603      	mov	r3, r0
 80143f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80143fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80143fc:	4618      	mov	r0, r3
 80143fe:	3710      	adds	r7, #16
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}
 8014404:	2000040c 	.word	0x2000040c

08014408 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014408:	b480      	push	{r7}
 801440a:	b085      	sub	sp, #20
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	3301      	adds	r3, #1
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014418:	89fb      	ldrh	r3, [r7, #14]
 801441a:	021b      	lsls	r3, r3, #8
 801441c:	b21a      	sxth	r2, r3
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	b21b      	sxth	r3, r3
 8014424:	4313      	orrs	r3, r2
 8014426:	b21b      	sxth	r3, r3
 8014428:	81fb      	strh	r3, [r7, #14]
	return rv;
 801442a:	89fb      	ldrh	r3, [r7, #14]
}
 801442c:	4618      	mov	r0, r3
 801442e:	3714      	adds	r7, #20
 8014430:	46bd      	mov	sp, r7
 8014432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014436:	4770      	bx	lr

08014438 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014438:	b480      	push	{r7}
 801443a:	b085      	sub	sp, #20
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	3303      	adds	r3, #3
 8014444:	781b      	ldrb	r3, [r3, #0]
 8014446:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	021b      	lsls	r3, r3, #8
 801444c:	687a      	ldr	r2, [r7, #4]
 801444e:	3202      	adds	r2, #2
 8014450:	7812      	ldrb	r2, [r2, #0]
 8014452:	4313      	orrs	r3, r2
 8014454:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	021b      	lsls	r3, r3, #8
 801445a:	687a      	ldr	r2, [r7, #4]
 801445c:	3201      	adds	r2, #1
 801445e:	7812      	ldrb	r2, [r2, #0]
 8014460:	4313      	orrs	r3, r2
 8014462:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	021b      	lsls	r3, r3, #8
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	7812      	ldrb	r2, [r2, #0]
 801446c:	4313      	orrs	r3, r2
 801446e:	60fb      	str	r3, [r7, #12]
	return rv;
 8014470:	68fb      	ldr	r3, [r7, #12]
}
 8014472:	4618      	mov	r0, r3
 8014474:	3714      	adds	r7, #20
 8014476:	46bd      	mov	sp, r7
 8014478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447c:	4770      	bx	lr

0801447e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801447e:	b480      	push	{r7}
 8014480:	b083      	sub	sp, #12
 8014482:	af00      	add	r7, sp, #0
 8014484:	6078      	str	r0, [r7, #4]
 8014486:	460b      	mov	r3, r1
 8014488:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	1c5a      	adds	r2, r3, #1
 801448e:	607a      	str	r2, [r7, #4]
 8014490:	887a      	ldrh	r2, [r7, #2]
 8014492:	b2d2      	uxtb	r2, r2
 8014494:	701a      	strb	r2, [r3, #0]
 8014496:	887b      	ldrh	r3, [r7, #2]
 8014498:	0a1b      	lsrs	r3, r3, #8
 801449a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	1c5a      	adds	r2, r3, #1
 80144a0:	607a      	str	r2, [r7, #4]
 80144a2:	887a      	ldrh	r2, [r7, #2]
 80144a4:	b2d2      	uxtb	r2, r2
 80144a6:	701a      	strb	r2, [r3, #0]
}
 80144a8:	bf00      	nop
 80144aa:	370c      	adds	r7, #12
 80144ac:	46bd      	mov	sp, r7
 80144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b2:	4770      	bx	lr

080144b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80144b4:	b480      	push	{r7}
 80144b6:	b083      	sub	sp, #12
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	1c5a      	adds	r2, r3, #1
 80144c2:	607a      	str	r2, [r7, #4]
 80144c4:	683a      	ldr	r2, [r7, #0]
 80144c6:	b2d2      	uxtb	r2, r2
 80144c8:	701a      	strb	r2, [r3, #0]
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	0a1b      	lsrs	r3, r3, #8
 80144ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	1c5a      	adds	r2, r3, #1
 80144d4:	607a      	str	r2, [r7, #4]
 80144d6:	683a      	ldr	r2, [r7, #0]
 80144d8:	b2d2      	uxtb	r2, r2
 80144da:	701a      	strb	r2, [r3, #0]
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	0a1b      	lsrs	r3, r3, #8
 80144e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	1c5a      	adds	r2, r3, #1
 80144e6:	607a      	str	r2, [r7, #4]
 80144e8:	683a      	ldr	r2, [r7, #0]
 80144ea:	b2d2      	uxtb	r2, r2
 80144ec:	701a      	strb	r2, [r3, #0]
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	0a1b      	lsrs	r3, r3, #8
 80144f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	1c5a      	adds	r2, r3, #1
 80144f8:	607a      	str	r2, [r7, #4]
 80144fa:	683a      	ldr	r2, [r7, #0]
 80144fc:	b2d2      	uxtb	r2, r2
 80144fe:	701a      	strb	r2, [r3, #0]
}
 8014500:	bf00      	nop
 8014502:	370c      	adds	r7, #12
 8014504:	46bd      	mov	sp, r7
 8014506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450a:	4770      	bx	lr

0801450c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801450c:	b480      	push	{r7}
 801450e:	b087      	sub	sp, #28
 8014510:	af00      	add	r7, sp, #0
 8014512:	60f8      	str	r0, [r7, #12]
 8014514:	60b9      	str	r1, [r7, #8]
 8014516:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d00d      	beq.n	8014542 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014526:	693a      	ldr	r2, [r7, #16]
 8014528:	1c53      	adds	r3, r2, #1
 801452a:	613b      	str	r3, [r7, #16]
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	1c59      	adds	r1, r3, #1
 8014530:	6179      	str	r1, [r7, #20]
 8014532:	7812      	ldrb	r2, [r2, #0]
 8014534:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	3b01      	subs	r3, #1
 801453a:	607b      	str	r3, [r7, #4]
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d1f1      	bne.n	8014526 <mem_cpy+0x1a>
	}
}
 8014542:	bf00      	nop
 8014544:	371c      	adds	r7, #28
 8014546:	46bd      	mov	sp, r7
 8014548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454c:	4770      	bx	lr

0801454e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801454e:	b480      	push	{r7}
 8014550:	b087      	sub	sp, #28
 8014552:	af00      	add	r7, sp, #0
 8014554:	60f8      	str	r0, [r7, #12]
 8014556:	60b9      	str	r1, [r7, #8]
 8014558:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	1c5a      	adds	r2, r3, #1
 8014562:	617a      	str	r2, [r7, #20]
 8014564:	68ba      	ldr	r2, [r7, #8]
 8014566:	b2d2      	uxtb	r2, r2
 8014568:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	3b01      	subs	r3, #1
 801456e:	607b      	str	r3, [r7, #4]
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d1f3      	bne.n	801455e <mem_set+0x10>
}
 8014576:	bf00      	nop
 8014578:	bf00      	nop
 801457a:	371c      	adds	r7, #28
 801457c:	46bd      	mov	sp, r7
 801457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014582:	4770      	bx	lr

08014584 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014584:	b480      	push	{r7}
 8014586:	b089      	sub	sp, #36	; 0x24
 8014588:	af00      	add	r7, sp, #0
 801458a:	60f8      	str	r0, [r7, #12]
 801458c:	60b9      	str	r1, [r7, #8]
 801458e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	61fb      	str	r3, [r7, #28]
 8014594:	68bb      	ldr	r3, [r7, #8]
 8014596:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014598:	2300      	movs	r3, #0
 801459a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801459c:	69fb      	ldr	r3, [r7, #28]
 801459e:	1c5a      	adds	r2, r3, #1
 80145a0:	61fa      	str	r2, [r7, #28]
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	4619      	mov	r1, r3
 80145a6:	69bb      	ldr	r3, [r7, #24]
 80145a8:	1c5a      	adds	r2, r3, #1
 80145aa:	61ba      	str	r2, [r7, #24]
 80145ac:	781b      	ldrb	r3, [r3, #0]
 80145ae:	1acb      	subs	r3, r1, r3
 80145b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	3b01      	subs	r3, #1
 80145b6:	607b      	str	r3, [r7, #4]
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d002      	beq.n	80145c4 <mem_cmp+0x40>
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d0eb      	beq.n	801459c <mem_cmp+0x18>

	return r;
 80145c4:	697b      	ldr	r3, [r7, #20]
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3724      	adds	r7, #36	; 0x24
 80145ca:	46bd      	mov	sp, r7
 80145cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d0:	4770      	bx	lr

080145d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80145d2:	b480      	push	{r7}
 80145d4:	b083      	sub	sp, #12
 80145d6:	af00      	add	r7, sp, #0
 80145d8:	6078      	str	r0, [r7, #4]
 80145da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80145dc:	e002      	b.n	80145e4 <chk_chr+0x12>
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	3301      	adds	r3, #1
 80145e2:	607b      	str	r3, [r7, #4]
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	781b      	ldrb	r3, [r3, #0]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d005      	beq.n	80145f8 <chk_chr+0x26>
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	461a      	mov	r2, r3
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	4293      	cmp	r3, r2
 80145f6:	d1f2      	bne.n	80145de <chk_chr+0xc>
	return *str;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	781b      	ldrb	r3, [r3, #0]
}
 80145fc:	4618      	mov	r0, r3
 80145fe:	370c      	adds	r7, #12
 8014600:	46bd      	mov	sp, r7
 8014602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014606:	4770      	bx	lr

08014608 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b086      	sub	sp, #24
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8014610:	2300      	movs	r3, #0
 8014612:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	78db      	ldrb	r3, [r3, #3]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d034      	beq.n	8014686 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014620:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	7858      	ldrb	r0, [r3, #1]
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801462c:	2301      	movs	r3, #1
 801462e:	697a      	ldr	r2, [r7, #20]
 8014630:	f7ff feac 	bl	801438c <disk_write>
 8014634:	4603      	mov	r3, r0
 8014636:	2b00      	cmp	r3, #0
 8014638:	d002      	beq.n	8014640 <sync_window+0x38>
			res = FR_DISK_ERR;
 801463a:	2301      	movs	r3, #1
 801463c:	73fb      	strb	r3, [r7, #15]
 801463e:	e022      	b.n	8014686 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2200      	movs	r2, #0
 8014644:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801464a:	697a      	ldr	r2, [r7, #20]
 801464c:	1ad2      	subs	r2, r2, r3
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6a1b      	ldr	r3, [r3, #32]
 8014652:	429a      	cmp	r2, r3
 8014654:	d217      	bcs.n	8014686 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	789b      	ldrb	r3, [r3, #2]
 801465a:	613b      	str	r3, [r7, #16]
 801465c:	e010      	b.n	8014680 <sync_window+0x78>
					wsect += fs->fsize;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	6a1b      	ldr	r3, [r3, #32]
 8014662:	697a      	ldr	r2, [r7, #20]
 8014664:	4413      	add	r3, r2
 8014666:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	7858      	ldrb	r0, [r3, #1]
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014672:	2301      	movs	r3, #1
 8014674:	697a      	ldr	r2, [r7, #20]
 8014676:	f7ff fe89 	bl	801438c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	3b01      	subs	r3, #1
 801467e:	613b      	str	r3, [r7, #16]
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	2b01      	cmp	r3, #1
 8014684:	d8eb      	bhi.n	801465e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8014686:	7bfb      	ldrb	r3, [r7, #15]
}
 8014688:	4618      	mov	r0, r3
 801468a:	3718      	adds	r7, #24
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}

08014690 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b084      	sub	sp, #16
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801469a:	2300      	movs	r3, #0
 801469c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146a2:	683a      	ldr	r2, [r7, #0]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d01b      	beq.n	80146e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f7ff ffad 	bl	8014608 <sync_window>
 80146ae:	4603      	mov	r3, r0
 80146b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80146b2:	7bfb      	ldrb	r3, [r7, #15]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d113      	bne.n	80146e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	7858      	ldrb	r0, [r3, #1]
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80146c2:	2301      	movs	r3, #1
 80146c4:	683a      	ldr	r2, [r7, #0]
 80146c6:	f7ff fe41 	bl	801434c <disk_read>
 80146ca:	4603      	mov	r3, r0
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d004      	beq.n	80146da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80146d0:	f04f 33ff 	mov.w	r3, #4294967295
 80146d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80146d6:	2301      	movs	r3, #1
 80146d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	683a      	ldr	r2, [r7, #0]
 80146de:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80146e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3710      	adds	r7, #16
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
	...

080146ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b084      	sub	sp, #16
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f7ff ff87 	bl	8014608 <sync_window>
 80146fa:	4603      	mov	r3, r0
 80146fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80146fe:	7bfb      	ldrb	r3, [r7, #15]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d159      	bne.n	80147b8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	781b      	ldrb	r3, [r3, #0]
 8014708:	2b03      	cmp	r3, #3
 801470a:	d149      	bne.n	80147a0 <sync_fs+0xb4>
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	791b      	ldrb	r3, [r3, #4]
 8014710:	2b01      	cmp	r3, #1
 8014712:	d145      	bne.n	80147a0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	899b      	ldrh	r3, [r3, #12]
 801471e:	461a      	mov	r2, r3
 8014720:	2100      	movs	r1, #0
 8014722:	f7ff ff14 	bl	801454e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	3338      	adds	r3, #56	; 0x38
 801472a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801472e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014732:	4618      	mov	r0, r3
 8014734:	f7ff fea3 	bl	801447e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	3338      	adds	r3, #56	; 0x38
 801473c:	4921      	ldr	r1, [pc, #132]	; (80147c4 <sync_fs+0xd8>)
 801473e:	4618      	mov	r0, r3
 8014740:	f7ff feb8 	bl	80144b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	3338      	adds	r3, #56	; 0x38
 8014748:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801474c:	491e      	ldr	r1, [pc, #120]	; (80147c8 <sync_fs+0xdc>)
 801474e:	4618      	mov	r0, r3
 8014750:	f7ff feb0 	bl	80144b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	3338      	adds	r3, #56	; 0x38
 8014758:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	699b      	ldr	r3, [r3, #24]
 8014760:	4619      	mov	r1, r3
 8014762:	4610      	mov	r0, r2
 8014764:	f7ff fea6 	bl	80144b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	3338      	adds	r3, #56	; 0x38
 801476c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	695b      	ldr	r3, [r3, #20]
 8014774:	4619      	mov	r1, r3
 8014776:	4610      	mov	r0, r2
 8014778:	f7ff fe9c 	bl	80144b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014780:	1c5a      	adds	r2, r3, #1
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	7858      	ldrb	r0, [r3, #1]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014794:	2301      	movs	r3, #1
 8014796:	f7ff fdf9 	bl	801438c <disk_write>
			fs->fsi_flag = 0;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2200      	movs	r2, #0
 801479e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	785b      	ldrb	r3, [r3, #1]
 80147a4:	2200      	movs	r2, #0
 80147a6:	2100      	movs	r1, #0
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7ff fe0f 	bl	80143cc <disk_ioctl>
 80147ae:	4603      	mov	r3, r0
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d001      	beq.n	80147b8 <sync_fs+0xcc>
 80147b4:	2301      	movs	r3, #1
 80147b6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80147b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3710      	adds	r7, #16
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}
 80147c2:	bf00      	nop
 80147c4:	41615252 	.word	0x41615252
 80147c8:	61417272 	.word	0x61417272

080147cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80147cc:	b480      	push	{r7}
 80147ce:	b083      	sub	sp, #12
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
 80147d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	3b02      	subs	r3, #2
 80147da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	69db      	ldr	r3, [r3, #28]
 80147e0:	3b02      	subs	r3, #2
 80147e2:	683a      	ldr	r2, [r7, #0]
 80147e4:	429a      	cmp	r2, r3
 80147e6:	d301      	bcc.n	80147ec <clust2sect+0x20>
 80147e8:	2300      	movs	r3, #0
 80147ea:	e008      	b.n	80147fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	895b      	ldrh	r3, [r3, #10]
 80147f0:	461a      	mov	r2, r3
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	fb03 f202 	mul.w	r2, r3, r2
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147fc:	4413      	add	r3, r2
}
 80147fe:	4618      	mov	r0, r3
 8014800:	370c      	adds	r7, #12
 8014802:	46bd      	mov	sp, r7
 8014804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014808:	4770      	bx	lr

0801480a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801480a:	b580      	push	{r7, lr}
 801480c:	b086      	sub	sp, #24
 801480e:	af00      	add	r7, sp, #0
 8014810:	6078      	str	r0, [r7, #4]
 8014812:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	2b01      	cmp	r3, #1
 801481e:	d904      	bls.n	801482a <get_fat+0x20>
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	69db      	ldr	r3, [r3, #28]
 8014824:	683a      	ldr	r2, [r7, #0]
 8014826:	429a      	cmp	r2, r3
 8014828:	d302      	bcc.n	8014830 <get_fat+0x26>
		val = 1;	/* Internal error */
 801482a:	2301      	movs	r3, #1
 801482c:	617b      	str	r3, [r7, #20]
 801482e:	e0bb      	b.n	80149a8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014830:	f04f 33ff 	mov.w	r3, #4294967295
 8014834:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014836:	693b      	ldr	r3, [r7, #16]
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	2b03      	cmp	r3, #3
 801483c:	f000 8083 	beq.w	8014946 <get_fat+0x13c>
 8014840:	2b03      	cmp	r3, #3
 8014842:	f300 80a7 	bgt.w	8014994 <get_fat+0x18a>
 8014846:	2b01      	cmp	r3, #1
 8014848:	d002      	beq.n	8014850 <get_fat+0x46>
 801484a:	2b02      	cmp	r3, #2
 801484c:	d056      	beq.n	80148fc <get_fat+0xf2>
 801484e:	e0a1      	b.n	8014994 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	60fb      	str	r3, [r7, #12]
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	085b      	lsrs	r3, r3, #1
 8014858:	68fa      	ldr	r2, [r7, #12]
 801485a:	4413      	add	r3, r2
 801485c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	899b      	ldrh	r3, [r3, #12]
 8014866:	4619      	mov	r1, r3
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	fbb3 f3f1 	udiv	r3, r3, r1
 801486e:	4413      	add	r3, r2
 8014870:	4619      	mov	r1, r3
 8014872:	6938      	ldr	r0, [r7, #16]
 8014874:	f7ff ff0c 	bl	8014690 <move_window>
 8014878:	4603      	mov	r3, r0
 801487a:	2b00      	cmp	r3, #0
 801487c:	f040 808d 	bne.w	801499a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	1c5a      	adds	r2, r3, #1
 8014884:	60fa      	str	r2, [r7, #12]
 8014886:	693a      	ldr	r2, [r7, #16]
 8014888:	8992      	ldrh	r2, [r2, #12]
 801488a:	fbb3 f1f2 	udiv	r1, r3, r2
 801488e:	fb02 f201 	mul.w	r2, r2, r1
 8014892:	1a9b      	subs	r3, r3, r2
 8014894:	693a      	ldr	r2, [r7, #16]
 8014896:	4413      	add	r3, r2
 8014898:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801489c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80148a2:	693b      	ldr	r3, [r7, #16]
 80148a4:	899b      	ldrh	r3, [r3, #12]
 80148a6:	4619      	mov	r1, r3
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80148ae:	4413      	add	r3, r2
 80148b0:	4619      	mov	r1, r3
 80148b2:	6938      	ldr	r0, [r7, #16]
 80148b4:	f7ff feec 	bl	8014690 <move_window>
 80148b8:	4603      	mov	r3, r0
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d16f      	bne.n	801499e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	899b      	ldrh	r3, [r3, #12]
 80148c2:	461a      	mov	r2, r3
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80148ca:	fb02 f201 	mul.w	r2, r2, r1
 80148ce:	1a9b      	subs	r3, r3, r2
 80148d0:	693a      	ldr	r2, [r7, #16]
 80148d2:	4413      	add	r3, r2
 80148d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80148d8:	021b      	lsls	r3, r3, #8
 80148da:	461a      	mov	r2, r3
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	4313      	orrs	r3, r2
 80148e0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	f003 0301 	and.w	r3, r3, #1
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d002      	beq.n	80148f2 <get_fat+0xe8>
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	091b      	lsrs	r3, r3, #4
 80148f0:	e002      	b.n	80148f8 <get_fat+0xee>
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80148f8:	617b      	str	r3, [r7, #20]
			break;
 80148fa:	e055      	b.n	80149a8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80148fc:	693b      	ldr	r3, [r7, #16]
 80148fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014900:	693b      	ldr	r3, [r7, #16]
 8014902:	899b      	ldrh	r3, [r3, #12]
 8014904:	085b      	lsrs	r3, r3, #1
 8014906:	b29b      	uxth	r3, r3
 8014908:	4619      	mov	r1, r3
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014910:	4413      	add	r3, r2
 8014912:	4619      	mov	r1, r3
 8014914:	6938      	ldr	r0, [r7, #16]
 8014916:	f7ff febb 	bl	8014690 <move_window>
 801491a:	4603      	mov	r3, r0
 801491c:	2b00      	cmp	r3, #0
 801491e:	d140      	bne.n	80149a2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	005b      	lsls	r3, r3, #1
 801492a:	693a      	ldr	r2, [r7, #16]
 801492c:	8992      	ldrh	r2, [r2, #12]
 801492e:	fbb3 f0f2 	udiv	r0, r3, r2
 8014932:	fb02 f200 	mul.w	r2, r2, r0
 8014936:	1a9b      	subs	r3, r3, r2
 8014938:	440b      	add	r3, r1
 801493a:	4618      	mov	r0, r3
 801493c:	f7ff fd64 	bl	8014408 <ld_word>
 8014940:	4603      	mov	r3, r0
 8014942:	617b      	str	r3, [r7, #20]
			break;
 8014944:	e030      	b.n	80149a8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801494a:	693b      	ldr	r3, [r7, #16]
 801494c:	899b      	ldrh	r3, [r3, #12]
 801494e:	089b      	lsrs	r3, r3, #2
 8014950:	b29b      	uxth	r3, r3
 8014952:	4619      	mov	r1, r3
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	fbb3 f3f1 	udiv	r3, r3, r1
 801495a:	4413      	add	r3, r2
 801495c:	4619      	mov	r1, r3
 801495e:	6938      	ldr	r0, [r7, #16]
 8014960:	f7ff fe96 	bl	8014690 <move_window>
 8014964:	4603      	mov	r3, r0
 8014966:	2b00      	cmp	r3, #0
 8014968:	d11d      	bne.n	80149a6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801496a:	693b      	ldr	r3, [r7, #16]
 801496c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	009b      	lsls	r3, r3, #2
 8014974:	693a      	ldr	r2, [r7, #16]
 8014976:	8992      	ldrh	r2, [r2, #12]
 8014978:	fbb3 f0f2 	udiv	r0, r3, r2
 801497c:	fb02 f200 	mul.w	r2, r2, r0
 8014980:	1a9b      	subs	r3, r3, r2
 8014982:	440b      	add	r3, r1
 8014984:	4618      	mov	r0, r3
 8014986:	f7ff fd57 	bl	8014438 <ld_dword>
 801498a:	4603      	mov	r3, r0
 801498c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014990:	617b      	str	r3, [r7, #20]
			break;
 8014992:	e009      	b.n	80149a8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014994:	2301      	movs	r3, #1
 8014996:	617b      	str	r3, [r7, #20]
 8014998:	e006      	b.n	80149a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801499a:	bf00      	nop
 801499c:	e004      	b.n	80149a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801499e:	bf00      	nop
 80149a0:	e002      	b.n	80149a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80149a2:	bf00      	nop
 80149a4:	e000      	b.n	80149a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80149a6:	bf00      	nop
		}
	}

	return val;
 80149a8:	697b      	ldr	r3, [r7, #20]
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3718      	adds	r7, #24
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}

080149b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80149b2:	b590      	push	{r4, r7, lr}
 80149b4:	b089      	sub	sp, #36	; 0x24
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	60f8      	str	r0, [r7, #12]
 80149ba:	60b9      	str	r1, [r7, #8]
 80149bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80149be:	2302      	movs	r3, #2
 80149c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80149c2:	68bb      	ldr	r3, [r7, #8]
 80149c4:	2b01      	cmp	r3, #1
 80149c6:	f240 8102 	bls.w	8014bce <put_fat+0x21c>
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	69db      	ldr	r3, [r3, #28]
 80149ce:	68ba      	ldr	r2, [r7, #8]
 80149d0:	429a      	cmp	r2, r3
 80149d2:	f080 80fc 	bcs.w	8014bce <put_fat+0x21c>
		switch (fs->fs_type) {
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	781b      	ldrb	r3, [r3, #0]
 80149da:	2b03      	cmp	r3, #3
 80149dc:	f000 80b6 	beq.w	8014b4c <put_fat+0x19a>
 80149e0:	2b03      	cmp	r3, #3
 80149e2:	f300 80fd 	bgt.w	8014be0 <put_fat+0x22e>
 80149e6:	2b01      	cmp	r3, #1
 80149e8:	d003      	beq.n	80149f2 <put_fat+0x40>
 80149ea:	2b02      	cmp	r3, #2
 80149ec:	f000 8083 	beq.w	8014af6 <put_fat+0x144>
 80149f0:	e0f6      	b.n	8014be0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80149f2:	68bb      	ldr	r3, [r7, #8]
 80149f4:	61bb      	str	r3, [r7, #24]
 80149f6:	69bb      	ldr	r3, [r7, #24]
 80149f8:	085b      	lsrs	r3, r3, #1
 80149fa:	69ba      	ldr	r2, [r7, #24]
 80149fc:	4413      	add	r3, r2
 80149fe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	899b      	ldrh	r3, [r3, #12]
 8014a08:	4619      	mov	r1, r3
 8014a0a:	69bb      	ldr	r3, [r7, #24]
 8014a0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014a10:	4413      	add	r3, r2
 8014a12:	4619      	mov	r1, r3
 8014a14:	68f8      	ldr	r0, [r7, #12]
 8014a16:	f7ff fe3b 	bl	8014690 <move_window>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014a1e:	7ffb      	ldrb	r3, [r7, #31]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	f040 80d6 	bne.w	8014bd2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014a2c:	69bb      	ldr	r3, [r7, #24]
 8014a2e:	1c5a      	adds	r2, r3, #1
 8014a30:	61ba      	str	r2, [r7, #24]
 8014a32:	68fa      	ldr	r2, [r7, #12]
 8014a34:	8992      	ldrh	r2, [r2, #12]
 8014a36:	fbb3 f0f2 	udiv	r0, r3, r2
 8014a3a:	fb02 f200 	mul.w	r2, r2, r0
 8014a3e:	1a9b      	subs	r3, r3, r2
 8014a40:	440b      	add	r3, r1
 8014a42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	f003 0301 	and.w	r3, r3, #1
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d00d      	beq.n	8014a6a <put_fat+0xb8>
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	b25b      	sxtb	r3, r3
 8014a54:	f003 030f 	and.w	r3, r3, #15
 8014a58:	b25a      	sxtb	r2, r3
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	b2db      	uxtb	r3, r3
 8014a5e:	011b      	lsls	r3, r3, #4
 8014a60:	b25b      	sxtb	r3, r3
 8014a62:	4313      	orrs	r3, r2
 8014a64:	b25b      	sxtb	r3, r3
 8014a66:	b2db      	uxtb	r3, r3
 8014a68:	e001      	b.n	8014a6e <put_fat+0xbc>
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	697a      	ldr	r2, [r7, #20]
 8014a70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	2201      	movs	r2, #1
 8014a76:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	899b      	ldrh	r3, [r3, #12]
 8014a80:	4619      	mov	r1, r3
 8014a82:	69bb      	ldr	r3, [r7, #24]
 8014a84:	fbb3 f3f1 	udiv	r3, r3, r1
 8014a88:	4413      	add	r3, r2
 8014a8a:	4619      	mov	r1, r3
 8014a8c:	68f8      	ldr	r0, [r7, #12]
 8014a8e:	f7ff fdff 	bl	8014690 <move_window>
 8014a92:	4603      	mov	r3, r0
 8014a94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014a96:	7ffb      	ldrb	r3, [r7, #31]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	f040 809c 	bne.w	8014bd6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	899b      	ldrh	r3, [r3, #12]
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	69bb      	ldr	r3, [r7, #24]
 8014aac:	fbb3 f0f2 	udiv	r0, r3, r2
 8014ab0:	fb02 f200 	mul.w	r2, r2, r0
 8014ab4:	1a9b      	subs	r3, r3, r2
 8014ab6:	440b      	add	r3, r1
 8014ab8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014aba:	68bb      	ldr	r3, [r7, #8]
 8014abc:	f003 0301 	and.w	r3, r3, #1
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d003      	beq.n	8014acc <put_fat+0x11a>
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	091b      	lsrs	r3, r3, #4
 8014ac8:	b2db      	uxtb	r3, r3
 8014aca:	e00e      	b.n	8014aea <put_fat+0x138>
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	781b      	ldrb	r3, [r3, #0]
 8014ad0:	b25b      	sxtb	r3, r3
 8014ad2:	f023 030f 	bic.w	r3, r3, #15
 8014ad6:	b25a      	sxtb	r2, r3
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	0a1b      	lsrs	r3, r3, #8
 8014adc:	b25b      	sxtb	r3, r3
 8014ade:	f003 030f 	and.w	r3, r3, #15
 8014ae2:	b25b      	sxtb	r3, r3
 8014ae4:	4313      	orrs	r3, r2
 8014ae6:	b25b      	sxtb	r3, r3
 8014ae8:	b2db      	uxtb	r3, r3
 8014aea:	697a      	ldr	r2, [r7, #20]
 8014aec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	2201      	movs	r2, #1
 8014af2:	70da      	strb	r2, [r3, #3]
			break;
 8014af4:	e074      	b.n	8014be0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	899b      	ldrh	r3, [r3, #12]
 8014afe:	085b      	lsrs	r3, r3, #1
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	4619      	mov	r1, r3
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b0a:	4413      	add	r3, r2
 8014b0c:	4619      	mov	r1, r3
 8014b0e:	68f8      	ldr	r0, [r7, #12]
 8014b10:	f7ff fdbe 	bl	8014690 <move_window>
 8014b14:	4603      	mov	r3, r0
 8014b16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014b18:	7ffb      	ldrb	r3, [r7, #31]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d15d      	bne.n	8014bda <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	005b      	lsls	r3, r3, #1
 8014b28:	68fa      	ldr	r2, [r7, #12]
 8014b2a:	8992      	ldrh	r2, [r2, #12]
 8014b2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8014b30:	fb02 f200 	mul.w	r2, r2, r0
 8014b34:	1a9b      	subs	r3, r3, r2
 8014b36:	440b      	add	r3, r1
 8014b38:	687a      	ldr	r2, [r7, #4]
 8014b3a:	b292      	uxth	r2, r2
 8014b3c:	4611      	mov	r1, r2
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7ff fc9d 	bl	801447e <st_word>
			fs->wflag = 1;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	2201      	movs	r2, #1
 8014b48:	70da      	strb	r2, [r3, #3]
			break;
 8014b4a:	e049      	b.n	8014be0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	899b      	ldrh	r3, [r3, #12]
 8014b54:	089b      	lsrs	r3, r3, #2
 8014b56:	b29b      	uxth	r3, r3
 8014b58:	4619      	mov	r1, r3
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b60:	4413      	add	r3, r2
 8014b62:	4619      	mov	r1, r3
 8014b64:	68f8      	ldr	r0, [r7, #12]
 8014b66:	f7ff fd93 	bl	8014690 <move_window>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014b6e:	7ffb      	ldrb	r3, [r7, #31]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d134      	bne.n	8014bde <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	009b      	lsls	r3, r3, #2
 8014b84:	68fa      	ldr	r2, [r7, #12]
 8014b86:	8992      	ldrh	r2, [r2, #12]
 8014b88:	fbb3 f0f2 	udiv	r0, r3, r2
 8014b8c:	fb02 f200 	mul.w	r2, r2, r0
 8014b90:	1a9b      	subs	r3, r3, r2
 8014b92:	440b      	add	r3, r1
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7ff fc4f 	bl	8014438 <ld_dword>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014ba0:	4323      	orrs	r3, r4
 8014ba2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014baa:	68bb      	ldr	r3, [r7, #8]
 8014bac:	009b      	lsls	r3, r3, #2
 8014bae:	68fa      	ldr	r2, [r7, #12]
 8014bb0:	8992      	ldrh	r2, [r2, #12]
 8014bb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8014bb6:	fb02 f200 	mul.w	r2, r2, r0
 8014bba:	1a9b      	subs	r3, r3, r2
 8014bbc:	440b      	add	r3, r1
 8014bbe:	6879      	ldr	r1, [r7, #4]
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f7ff fc77 	bl	80144b4 <st_dword>
			fs->wflag = 1;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	2201      	movs	r2, #1
 8014bca:	70da      	strb	r2, [r3, #3]
			break;
 8014bcc:	e008      	b.n	8014be0 <put_fat+0x22e>
		}
	}
 8014bce:	bf00      	nop
 8014bd0:	e006      	b.n	8014be0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014bd2:	bf00      	nop
 8014bd4:	e004      	b.n	8014be0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014bd6:	bf00      	nop
 8014bd8:	e002      	b.n	8014be0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014bda:	bf00      	nop
 8014bdc:	e000      	b.n	8014be0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014bde:	bf00      	nop
	return res;
 8014be0:	7ffb      	ldrb	r3, [r7, #31]
}
 8014be2:	4618      	mov	r0, r3
 8014be4:	3724      	adds	r7, #36	; 0x24
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd90      	pop	{r4, r7, pc}

08014bea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014bea:	b580      	push	{r7, lr}
 8014bec:	b088      	sub	sp, #32
 8014bee:	af00      	add	r7, sp, #0
 8014bf0:	60f8      	str	r0, [r7, #12]
 8014bf2:	60b9      	str	r1, [r7, #8]
 8014bf4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	2b01      	cmp	r3, #1
 8014c04:	d904      	bls.n	8014c10 <remove_chain+0x26>
 8014c06:	69bb      	ldr	r3, [r7, #24]
 8014c08:	69db      	ldr	r3, [r3, #28]
 8014c0a:	68ba      	ldr	r2, [r7, #8]
 8014c0c:	429a      	cmp	r2, r3
 8014c0e:	d301      	bcc.n	8014c14 <remove_chain+0x2a>
 8014c10:	2302      	movs	r3, #2
 8014c12:	e04b      	b.n	8014cac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d00c      	beq.n	8014c34 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8014c1e:	6879      	ldr	r1, [r7, #4]
 8014c20:	69b8      	ldr	r0, [r7, #24]
 8014c22:	f7ff fec6 	bl	80149b2 <put_fat>
 8014c26:	4603      	mov	r3, r0
 8014c28:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014c2a:	7ffb      	ldrb	r3, [r7, #31]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d001      	beq.n	8014c34 <remove_chain+0x4a>
 8014c30:	7ffb      	ldrb	r3, [r7, #31]
 8014c32:	e03b      	b.n	8014cac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014c34:	68b9      	ldr	r1, [r7, #8]
 8014c36:	68f8      	ldr	r0, [r7, #12]
 8014c38:	f7ff fde7 	bl	801480a <get_fat>
 8014c3c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d031      	beq.n	8014ca8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014c44:	697b      	ldr	r3, [r7, #20]
 8014c46:	2b01      	cmp	r3, #1
 8014c48:	d101      	bne.n	8014c4e <remove_chain+0x64>
 8014c4a:	2302      	movs	r3, #2
 8014c4c:	e02e      	b.n	8014cac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c54:	d101      	bne.n	8014c5a <remove_chain+0x70>
 8014c56:	2301      	movs	r3, #1
 8014c58:	e028      	b.n	8014cac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	68b9      	ldr	r1, [r7, #8]
 8014c5e:	69b8      	ldr	r0, [r7, #24]
 8014c60:	f7ff fea7 	bl	80149b2 <put_fat>
 8014c64:	4603      	mov	r3, r0
 8014c66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014c68:	7ffb      	ldrb	r3, [r7, #31]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d001      	beq.n	8014c72 <remove_chain+0x88>
 8014c6e:	7ffb      	ldrb	r3, [r7, #31]
 8014c70:	e01c      	b.n	8014cac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014c72:	69bb      	ldr	r3, [r7, #24]
 8014c74:	699a      	ldr	r2, [r3, #24]
 8014c76:	69bb      	ldr	r3, [r7, #24]
 8014c78:	69db      	ldr	r3, [r3, #28]
 8014c7a:	3b02      	subs	r3, #2
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d20b      	bcs.n	8014c98 <remove_chain+0xae>
			fs->free_clst++;
 8014c80:	69bb      	ldr	r3, [r7, #24]
 8014c82:	699b      	ldr	r3, [r3, #24]
 8014c84:	1c5a      	adds	r2, r3, #1
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8014c8a:	69bb      	ldr	r3, [r7, #24]
 8014c8c:	791b      	ldrb	r3, [r3, #4]
 8014c8e:	f043 0301 	orr.w	r3, r3, #1
 8014c92:	b2da      	uxtb	r2, r3
 8014c94:	69bb      	ldr	r3, [r7, #24]
 8014c96:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014c98:	697b      	ldr	r3, [r7, #20]
 8014c9a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014c9c:	69bb      	ldr	r3, [r7, #24]
 8014c9e:	69db      	ldr	r3, [r3, #28]
 8014ca0:	68ba      	ldr	r2, [r7, #8]
 8014ca2:	429a      	cmp	r2, r3
 8014ca4:	d3c6      	bcc.n	8014c34 <remove_chain+0x4a>
 8014ca6:	e000      	b.n	8014caa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014ca8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014caa:	2300      	movs	r3, #0
}
 8014cac:	4618      	mov	r0, r3
 8014cae:	3720      	adds	r7, #32
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b088      	sub	sp, #32
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d10d      	bne.n	8014ce6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	695b      	ldr	r3, [r3, #20]
 8014cce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014cd0:	69bb      	ldr	r3, [r7, #24]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d004      	beq.n	8014ce0 <create_chain+0x2c>
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	69db      	ldr	r3, [r3, #28]
 8014cda:	69ba      	ldr	r2, [r7, #24]
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	d31b      	bcc.n	8014d18 <create_chain+0x64>
 8014ce0:	2301      	movs	r3, #1
 8014ce2:	61bb      	str	r3, [r7, #24]
 8014ce4:	e018      	b.n	8014d18 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014ce6:	6839      	ldr	r1, [r7, #0]
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f7ff fd8e 	bl	801480a <get_fat>
 8014cee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	2b01      	cmp	r3, #1
 8014cf4:	d801      	bhi.n	8014cfa <create_chain+0x46>
 8014cf6:	2301      	movs	r3, #1
 8014cf8:	e070      	b.n	8014ddc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d00:	d101      	bne.n	8014d06 <create_chain+0x52>
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	e06a      	b.n	8014ddc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014d06:	693b      	ldr	r3, [r7, #16]
 8014d08:	69db      	ldr	r3, [r3, #28]
 8014d0a:	68fa      	ldr	r2, [r7, #12]
 8014d0c:	429a      	cmp	r2, r3
 8014d0e:	d201      	bcs.n	8014d14 <create_chain+0x60>
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	e063      	b.n	8014ddc <create_chain+0x128>
		scl = clst;
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014d18:	69bb      	ldr	r3, [r7, #24]
 8014d1a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014d1c:	69fb      	ldr	r3, [r7, #28]
 8014d1e:	3301      	adds	r3, #1
 8014d20:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	69db      	ldr	r3, [r3, #28]
 8014d26:	69fa      	ldr	r2, [r7, #28]
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d307      	bcc.n	8014d3c <create_chain+0x88>
				ncl = 2;
 8014d2c:	2302      	movs	r3, #2
 8014d2e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014d30:	69fa      	ldr	r2, [r7, #28]
 8014d32:	69bb      	ldr	r3, [r7, #24]
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d901      	bls.n	8014d3c <create_chain+0x88>
 8014d38:	2300      	movs	r3, #0
 8014d3a:	e04f      	b.n	8014ddc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014d3c:	69f9      	ldr	r1, [r7, #28]
 8014d3e:	6878      	ldr	r0, [r7, #4]
 8014d40:	f7ff fd63 	bl	801480a <get_fat>
 8014d44:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d00e      	beq.n	8014d6a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2b01      	cmp	r3, #1
 8014d50:	d003      	beq.n	8014d5a <create_chain+0xa6>
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d58:	d101      	bne.n	8014d5e <create_chain+0xaa>
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	e03e      	b.n	8014ddc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8014d5e:	69fa      	ldr	r2, [r7, #28]
 8014d60:	69bb      	ldr	r3, [r7, #24]
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d1da      	bne.n	8014d1c <create_chain+0x68>
 8014d66:	2300      	movs	r3, #0
 8014d68:	e038      	b.n	8014ddc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014d6a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8014d70:	69f9      	ldr	r1, [r7, #28]
 8014d72:	6938      	ldr	r0, [r7, #16]
 8014d74:	f7ff fe1d 	bl	80149b2 <put_fat>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014d7c:	7dfb      	ldrb	r3, [r7, #23]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d109      	bne.n	8014d96 <create_chain+0xe2>
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d006      	beq.n	8014d96 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014d88:	69fa      	ldr	r2, [r7, #28]
 8014d8a:	6839      	ldr	r1, [r7, #0]
 8014d8c:	6938      	ldr	r0, [r7, #16]
 8014d8e:	f7ff fe10 	bl	80149b2 <put_fat>
 8014d92:	4603      	mov	r3, r0
 8014d94:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014d96:	7dfb      	ldrb	r3, [r7, #23]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d116      	bne.n	8014dca <create_chain+0x116>
		fs->last_clst = ncl;
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	69fa      	ldr	r2, [r7, #28]
 8014da0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014da2:	693b      	ldr	r3, [r7, #16]
 8014da4:	699a      	ldr	r2, [r3, #24]
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	69db      	ldr	r3, [r3, #28]
 8014daa:	3b02      	subs	r3, #2
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d804      	bhi.n	8014dba <create_chain+0x106>
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	699b      	ldr	r3, [r3, #24]
 8014db4:	1e5a      	subs	r2, r3, #1
 8014db6:	693b      	ldr	r3, [r7, #16]
 8014db8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8014dba:	693b      	ldr	r3, [r7, #16]
 8014dbc:	791b      	ldrb	r3, [r3, #4]
 8014dbe:	f043 0301 	orr.w	r3, r3, #1
 8014dc2:	b2da      	uxtb	r2, r3
 8014dc4:	693b      	ldr	r3, [r7, #16]
 8014dc6:	711a      	strb	r2, [r3, #4]
 8014dc8:	e007      	b.n	8014dda <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014dca:	7dfb      	ldrb	r3, [r7, #23]
 8014dcc:	2b01      	cmp	r3, #1
 8014dce:	d102      	bne.n	8014dd6 <create_chain+0x122>
 8014dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd4:	e000      	b.n	8014dd8 <create_chain+0x124>
 8014dd6:	2301      	movs	r3, #1
 8014dd8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8014dda:	69fb      	ldr	r3, [r7, #28]
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3720      	adds	r7, #32
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014de4:	b480      	push	{r7}
 8014de6:	b087      	sub	sp, #28
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014df8:	3304      	adds	r3, #4
 8014dfa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	899b      	ldrh	r3, [r3, #12]
 8014e00:	461a      	mov	r2, r3
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e08:	68fa      	ldr	r2, [r7, #12]
 8014e0a:	8952      	ldrh	r2, [r2, #10]
 8014e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e10:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	1d1a      	adds	r2, r3, #4
 8014e16:	613a      	str	r2, [r7, #16]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d101      	bne.n	8014e26 <clmt_clust+0x42>
 8014e22:	2300      	movs	r3, #0
 8014e24:	e010      	b.n	8014e48 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8014e26:	697a      	ldr	r2, [r7, #20]
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d307      	bcc.n	8014e3e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8014e2e:	697a      	ldr	r2, [r7, #20]
 8014e30:	68bb      	ldr	r3, [r7, #8]
 8014e32:	1ad3      	subs	r3, r2, r3
 8014e34:	617b      	str	r3, [r7, #20]
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	3304      	adds	r3, #4
 8014e3a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014e3c:	e7e9      	b.n	8014e12 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8014e3e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014e40:	693b      	ldr	r3, [r7, #16]
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	4413      	add	r3, r2
}
 8014e48:	4618      	mov	r0, r3
 8014e4a:	371c      	adds	r7, #28
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e52:	4770      	bx	lr

08014e54 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b086      	sub	sp, #24
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
 8014e5c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014e6a:	d204      	bcs.n	8014e76 <dir_sdi+0x22>
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	f003 031f 	and.w	r3, r3, #31
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d001      	beq.n	8014e7a <dir_sdi+0x26>
		return FR_INT_ERR;
 8014e76:	2302      	movs	r3, #2
 8014e78:	e071      	b.n	8014f5e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	683a      	ldr	r2, [r7, #0]
 8014e7e:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	689b      	ldr	r3, [r3, #8]
 8014e84:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d106      	bne.n	8014e9a <dir_sdi+0x46>
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	2b02      	cmp	r3, #2
 8014e92:	d902      	bls.n	8014e9a <dir_sdi+0x46>
		clst = fs->dirbase;
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e98:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d10c      	bne.n	8014eba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	095b      	lsrs	r3, r3, #5
 8014ea4:	693a      	ldr	r2, [r7, #16]
 8014ea6:	8912      	ldrh	r2, [r2, #8]
 8014ea8:	4293      	cmp	r3, r2
 8014eaa:	d301      	bcc.n	8014eb0 <dir_sdi+0x5c>
 8014eac:	2302      	movs	r3, #2
 8014eae:	e056      	b.n	8014f5e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8014eb0:	693b      	ldr	r3, [r7, #16]
 8014eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	619a      	str	r2, [r3, #24]
 8014eb8:	e02d      	b.n	8014f16 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014eba:	693b      	ldr	r3, [r7, #16]
 8014ebc:	895b      	ldrh	r3, [r3, #10]
 8014ebe:	461a      	mov	r2, r3
 8014ec0:	693b      	ldr	r3, [r7, #16]
 8014ec2:	899b      	ldrh	r3, [r3, #12]
 8014ec4:	fb03 f302 	mul.w	r3, r3, r2
 8014ec8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014eca:	e019      	b.n	8014f00 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	6979      	ldr	r1, [r7, #20]
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7ff fc9a 	bl	801480a <get_fat>
 8014ed6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014ed8:	697b      	ldr	r3, [r7, #20]
 8014eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ede:	d101      	bne.n	8014ee4 <dir_sdi+0x90>
 8014ee0:	2301      	movs	r3, #1
 8014ee2:	e03c      	b.n	8014f5e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014ee4:	697b      	ldr	r3, [r7, #20]
 8014ee6:	2b01      	cmp	r3, #1
 8014ee8:	d904      	bls.n	8014ef4 <dir_sdi+0xa0>
 8014eea:	693b      	ldr	r3, [r7, #16]
 8014eec:	69db      	ldr	r3, [r3, #28]
 8014eee:	697a      	ldr	r2, [r7, #20]
 8014ef0:	429a      	cmp	r2, r3
 8014ef2:	d301      	bcc.n	8014ef8 <dir_sdi+0xa4>
 8014ef4:	2302      	movs	r3, #2
 8014ef6:	e032      	b.n	8014f5e <dir_sdi+0x10a>
			ofs -= csz;
 8014ef8:	683a      	ldr	r2, [r7, #0]
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	1ad3      	subs	r3, r2, r3
 8014efe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014f00:	683a      	ldr	r2, [r7, #0]
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	429a      	cmp	r2, r3
 8014f06:	d2e1      	bcs.n	8014ecc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8014f08:	6979      	ldr	r1, [r7, #20]
 8014f0a:	6938      	ldr	r0, [r7, #16]
 8014f0c:	f7ff fc5e 	bl	80147cc <clust2sect>
 8014f10:	4602      	mov	r2, r0
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	697a      	ldr	r2, [r7, #20]
 8014f1a:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	699b      	ldr	r3, [r3, #24]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d101      	bne.n	8014f28 <dir_sdi+0xd4>
 8014f24:	2302      	movs	r3, #2
 8014f26:	e01a      	b.n	8014f5e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	699a      	ldr	r2, [r3, #24]
 8014f2c:	693b      	ldr	r3, [r7, #16]
 8014f2e:	899b      	ldrh	r3, [r3, #12]
 8014f30:	4619      	mov	r1, r3
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f38:	441a      	add	r2, r3
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014f3e:	693b      	ldr	r3, [r7, #16]
 8014f40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014f44:	693b      	ldr	r3, [r7, #16]
 8014f46:	899b      	ldrh	r3, [r3, #12]
 8014f48:	461a      	mov	r2, r3
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8014f50:	fb02 f200 	mul.w	r2, r2, r0
 8014f54:	1a9b      	subs	r3, r3, r2
 8014f56:	18ca      	adds	r2, r1, r3
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8014f5c:	2300      	movs	r3, #0
}
 8014f5e:	4618      	mov	r0, r3
 8014f60:	3718      	adds	r7, #24
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd80      	pop	{r7, pc}

08014f66 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8014f66:	b580      	push	{r7, lr}
 8014f68:	b086      	sub	sp, #24
 8014f6a:	af00      	add	r7, sp, #0
 8014f6c:	6078      	str	r0, [r7, #4]
 8014f6e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	691b      	ldr	r3, [r3, #16]
 8014f7a:	3320      	adds	r3, #32
 8014f7c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	699b      	ldr	r3, [r3, #24]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d003      	beq.n	8014f8e <dir_next+0x28>
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014f8c:	d301      	bcc.n	8014f92 <dir_next+0x2c>
 8014f8e:	2304      	movs	r3, #4
 8014f90:	e0bb      	b.n	801510a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	899b      	ldrh	r3, [r3, #12]
 8014f96:	461a      	mov	r2, r3
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8014f9e:	fb02 f201 	mul.w	r2, r2, r1
 8014fa2:	1a9b      	subs	r3, r3, r2
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	f040 809d 	bne.w	80150e4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	699b      	ldr	r3, [r3, #24]
 8014fae:	1c5a      	adds	r2, r3, #1
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	695b      	ldr	r3, [r3, #20]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d10b      	bne.n	8014fd4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014fbc:	68bb      	ldr	r3, [r7, #8]
 8014fbe:	095b      	lsrs	r3, r3, #5
 8014fc0:	68fa      	ldr	r2, [r7, #12]
 8014fc2:	8912      	ldrh	r2, [r2, #8]
 8014fc4:	4293      	cmp	r3, r2
 8014fc6:	f0c0 808d 	bcc.w	80150e4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	619a      	str	r2, [r3, #24]
 8014fd0:	2304      	movs	r3, #4
 8014fd2:	e09a      	b.n	801510a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	899b      	ldrh	r3, [r3, #12]
 8014fd8:	461a      	mov	r2, r3
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8014fe0:	68fa      	ldr	r2, [r7, #12]
 8014fe2:	8952      	ldrh	r2, [r2, #10]
 8014fe4:	3a01      	subs	r2, #1
 8014fe6:	4013      	ands	r3, r2
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d17b      	bne.n	80150e4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014fec:	687a      	ldr	r2, [r7, #4]
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	695b      	ldr	r3, [r3, #20]
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	4610      	mov	r0, r2
 8014ff6:	f7ff fc08 	bl	801480a <get_fat>
 8014ffa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	2b01      	cmp	r3, #1
 8015000:	d801      	bhi.n	8015006 <dir_next+0xa0>
 8015002:	2302      	movs	r3, #2
 8015004:	e081      	b.n	801510a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801500c:	d101      	bne.n	8015012 <dir_next+0xac>
 801500e:	2301      	movs	r3, #1
 8015010:	e07b      	b.n	801510a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	69db      	ldr	r3, [r3, #28]
 8015016:	697a      	ldr	r2, [r7, #20]
 8015018:	429a      	cmp	r2, r3
 801501a:	d359      	bcc.n	80150d0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d104      	bne.n	801502c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2200      	movs	r2, #0
 8015026:	619a      	str	r2, [r3, #24]
 8015028:	2304      	movs	r3, #4
 801502a:	e06e      	b.n	801510a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801502c:	687a      	ldr	r2, [r7, #4]
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	695b      	ldr	r3, [r3, #20]
 8015032:	4619      	mov	r1, r3
 8015034:	4610      	mov	r0, r2
 8015036:	f7ff fe3d 	bl	8014cb4 <create_chain>
 801503a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801503c:	697b      	ldr	r3, [r7, #20]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d101      	bne.n	8015046 <dir_next+0xe0>
 8015042:	2307      	movs	r3, #7
 8015044:	e061      	b.n	801510a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015046:	697b      	ldr	r3, [r7, #20]
 8015048:	2b01      	cmp	r3, #1
 801504a:	d101      	bne.n	8015050 <dir_next+0xea>
 801504c:	2302      	movs	r3, #2
 801504e:	e05c      	b.n	801510a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015056:	d101      	bne.n	801505c <dir_next+0xf6>
 8015058:	2301      	movs	r3, #1
 801505a:	e056      	b.n	801510a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801505c:	68f8      	ldr	r0, [r7, #12]
 801505e:	f7ff fad3 	bl	8014608 <sync_window>
 8015062:	4603      	mov	r3, r0
 8015064:	2b00      	cmp	r3, #0
 8015066:	d001      	beq.n	801506c <dir_next+0x106>
 8015068:	2301      	movs	r3, #1
 801506a:	e04e      	b.n	801510a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	899b      	ldrh	r3, [r3, #12]
 8015076:	461a      	mov	r2, r3
 8015078:	2100      	movs	r1, #0
 801507a:	f7ff fa68 	bl	801454e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801507e:	2300      	movs	r3, #0
 8015080:	613b      	str	r3, [r7, #16]
 8015082:	6979      	ldr	r1, [r7, #20]
 8015084:	68f8      	ldr	r0, [r7, #12]
 8015086:	f7ff fba1 	bl	80147cc <clust2sect>
 801508a:	4602      	mov	r2, r0
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	635a      	str	r2, [r3, #52]	; 0x34
 8015090:	e012      	b.n	80150b8 <dir_next+0x152>
						fs->wflag = 1;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	2201      	movs	r2, #1
 8015096:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015098:	68f8      	ldr	r0, [r7, #12]
 801509a:	f7ff fab5 	bl	8014608 <sync_window>
 801509e:	4603      	mov	r3, r0
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d001      	beq.n	80150a8 <dir_next+0x142>
 80150a4:	2301      	movs	r3, #1
 80150a6:	e030      	b.n	801510a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80150a8:	693b      	ldr	r3, [r7, #16]
 80150aa:	3301      	adds	r3, #1
 80150ac:	613b      	str	r3, [r7, #16]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150b2:	1c5a      	adds	r2, r3, #1
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	635a      	str	r2, [r3, #52]	; 0x34
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	895b      	ldrh	r3, [r3, #10]
 80150bc:	461a      	mov	r2, r3
 80150be:	693b      	ldr	r3, [r7, #16]
 80150c0:	4293      	cmp	r3, r2
 80150c2:	d3e6      	bcc.n	8015092 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	1ad2      	subs	r2, r2, r3
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	697a      	ldr	r2, [r7, #20]
 80150d4:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 80150d6:	6979      	ldr	r1, [r7, #20]
 80150d8:	68f8      	ldr	r0, [r7, #12]
 80150da:	f7ff fb77 	bl	80147cc <clust2sect>
 80150de:	4602      	mov	r2, r0
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	68ba      	ldr	r2, [r7, #8]
 80150e8:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	899b      	ldrh	r3, [r3, #12]
 80150f4:	461a      	mov	r2, r3
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80150fc:	fb02 f200 	mul.w	r2, r2, r0
 8015100:	1a9b      	subs	r3, r3, r2
 8015102:	18ca      	adds	r2, r1, r3
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8015108:	2300      	movs	r3, #0
}
 801510a:	4618      	mov	r0, r3
 801510c:	3718      	adds	r7, #24
 801510e:	46bd      	mov	sp, r7
 8015110:	bd80      	pop	{r7, pc}

08015112 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015112:	b580      	push	{r7, lr}
 8015114:	b086      	sub	sp, #24
 8015116:	af00      	add	r7, sp, #0
 8015118:	6078      	str	r0, [r7, #4]
 801511a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015122:	2100      	movs	r1, #0
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f7ff fe95 	bl	8014e54 <dir_sdi>
 801512a:	4603      	mov	r3, r0
 801512c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801512e:	7dfb      	ldrb	r3, [r7, #23]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d12b      	bne.n	801518c <dir_alloc+0x7a>
		n = 0;
 8015134:	2300      	movs	r3, #0
 8015136:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	699b      	ldr	r3, [r3, #24]
 801513c:	4619      	mov	r1, r3
 801513e:	68f8      	ldr	r0, [r7, #12]
 8015140:	f7ff faa6 	bl	8014690 <move_window>
 8015144:	4603      	mov	r3, r0
 8015146:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015148:	7dfb      	ldrb	r3, [r7, #23]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d11d      	bne.n	801518a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	69db      	ldr	r3, [r3, #28]
 8015152:	781b      	ldrb	r3, [r3, #0]
 8015154:	2be5      	cmp	r3, #229	; 0xe5
 8015156:	d004      	beq.n	8015162 <dir_alloc+0x50>
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	69db      	ldr	r3, [r3, #28]
 801515c:	781b      	ldrb	r3, [r3, #0]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d107      	bne.n	8015172 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015162:	693b      	ldr	r3, [r7, #16]
 8015164:	3301      	adds	r3, #1
 8015166:	613b      	str	r3, [r7, #16]
 8015168:	693a      	ldr	r2, [r7, #16]
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	429a      	cmp	r2, r3
 801516e:	d102      	bne.n	8015176 <dir_alloc+0x64>
 8015170:	e00c      	b.n	801518c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015172:	2300      	movs	r3, #0
 8015174:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015176:	2101      	movs	r1, #1
 8015178:	6878      	ldr	r0, [r7, #4]
 801517a:	f7ff fef4 	bl	8014f66 <dir_next>
 801517e:	4603      	mov	r3, r0
 8015180:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015182:	7dfb      	ldrb	r3, [r7, #23]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d0d7      	beq.n	8015138 <dir_alloc+0x26>
 8015188:	e000      	b.n	801518c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801518a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801518c:	7dfb      	ldrb	r3, [r7, #23]
 801518e:	2b04      	cmp	r3, #4
 8015190:	d101      	bne.n	8015196 <dir_alloc+0x84>
 8015192:	2307      	movs	r3, #7
 8015194:	75fb      	strb	r3, [r7, #23]
	return res;
 8015196:	7dfb      	ldrb	r3, [r7, #23]
}
 8015198:	4618      	mov	r0, r3
 801519a:	3718      	adds	r7, #24
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}

080151a0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b084      	sub	sp, #16
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80151aa:	683b      	ldr	r3, [r7, #0]
 80151ac:	331a      	adds	r3, #26
 80151ae:	4618      	mov	r0, r3
 80151b0:	f7ff f92a 	bl	8014408 <ld_word>
 80151b4:	4603      	mov	r3, r0
 80151b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	781b      	ldrb	r3, [r3, #0]
 80151bc:	2b03      	cmp	r3, #3
 80151be:	d109      	bne.n	80151d4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	3314      	adds	r3, #20
 80151c4:	4618      	mov	r0, r3
 80151c6:	f7ff f91f 	bl	8014408 <ld_word>
 80151ca:	4603      	mov	r3, r0
 80151cc:	041b      	lsls	r3, r3, #16
 80151ce:	68fa      	ldr	r2, [r7, #12]
 80151d0:	4313      	orrs	r3, r2
 80151d2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80151d4:	68fb      	ldr	r3, [r7, #12]
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	3710      	adds	r7, #16
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}

080151de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80151de:	b580      	push	{r7, lr}
 80151e0:	b084      	sub	sp, #16
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	60f8      	str	r0, [r7, #12]
 80151e6:	60b9      	str	r1, [r7, #8]
 80151e8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80151ea:	68bb      	ldr	r3, [r7, #8]
 80151ec:	331a      	adds	r3, #26
 80151ee:	687a      	ldr	r2, [r7, #4]
 80151f0:	b292      	uxth	r2, r2
 80151f2:	4611      	mov	r1, r2
 80151f4:	4618      	mov	r0, r3
 80151f6:	f7ff f942 	bl	801447e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	781b      	ldrb	r3, [r3, #0]
 80151fe:	2b03      	cmp	r3, #3
 8015200:	d109      	bne.n	8015216 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015202:	68bb      	ldr	r3, [r7, #8]
 8015204:	f103 0214 	add.w	r2, r3, #20
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	0c1b      	lsrs	r3, r3, #16
 801520c:	b29b      	uxth	r3, r3
 801520e:	4619      	mov	r1, r3
 8015210:	4610      	mov	r0, r2
 8015212:	f7ff f934 	bl	801447e <st_word>
	}
}
 8015216:	bf00      	nop
 8015218:	3710      	adds	r7, #16
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}
	...

08015220 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8015220:	b590      	push	{r4, r7, lr}
 8015222:	b087      	sub	sp, #28
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
 8015228:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	331a      	adds	r3, #26
 801522e:	4618      	mov	r0, r3
 8015230:	f7ff f8ea 	bl	8014408 <ld_word>
 8015234:	4603      	mov	r3, r0
 8015236:	2b00      	cmp	r3, #0
 8015238:	d001      	beq.n	801523e <cmp_lfn+0x1e>
 801523a:	2300      	movs	r3, #0
 801523c:	e059      	b.n	80152f2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801523e:	683b      	ldr	r3, [r7, #0]
 8015240:	781b      	ldrb	r3, [r3, #0]
 8015242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015246:	1e5a      	subs	r2, r3, #1
 8015248:	4613      	mov	r3, r2
 801524a:	005b      	lsls	r3, r3, #1
 801524c:	4413      	add	r3, r2
 801524e:	009b      	lsls	r3, r3, #2
 8015250:	4413      	add	r3, r2
 8015252:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015254:	2301      	movs	r3, #1
 8015256:	81fb      	strh	r3, [r7, #14]
 8015258:	2300      	movs	r3, #0
 801525a:	613b      	str	r3, [r7, #16]
 801525c:	e033      	b.n	80152c6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801525e:	4a27      	ldr	r2, [pc, #156]	; (80152fc <cmp_lfn+0xdc>)
 8015260:	693b      	ldr	r3, [r7, #16]
 8015262:	4413      	add	r3, r2
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	461a      	mov	r2, r3
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	4413      	add	r3, r2
 801526c:	4618      	mov	r0, r3
 801526e:	f7ff f8cb 	bl	8014408 <ld_word>
 8015272:	4603      	mov	r3, r0
 8015274:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8015276:	89fb      	ldrh	r3, [r7, #14]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d01a      	beq.n	80152b2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801527c:	697b      	ldr	r3, [r7, #20]
 801527e:	2bfe      	cmp	r3, #254	; 0xfe
 8015280:	d812      	bhi.n	80152a8 <cmp_lfn+0x88>
 8015282:	89bb      	ldrh	r3, [r7, #12]
 8015284:	4618      	mov	r0, r3
 8015286:	f001 feb9 	bl	8016ffc <ff_wtoupper>
 801528a:	4603      	mov	r3, r0
 801528c:	461c      	mov	r4, r3
 801528e:	697b      	ldr	r3, [r7, #20]
 8015290:	1c5a      	adds	r2, r3, #1
 8015292:	617a      	str	r2, [r7, #20]
 8015294:	005b      	lsls	r3, r3, #1
 8015296:	687a      	ldr	r2, [r7, #4]
 8015298:	4413      	add	r3, r2
 801529a:	881b      	ldrh	r3, [r3, #0]
 801529c:	4618      	mov	r0, r3
 801529e:	f001 fead 	bl	8016ffc <ff_wtoupper>
 80152a2:	4603      	mov	r3, r0
 80152a4:	429c      	cmp	r4, r3
 80152a6:	d001      	beq.n	80152ac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80152a8:	2300      	movs	r3, #0
 80152aa:	e022      	b.n	80152f2 <cmp_lfn+0xd2>
			}
			wc = uc;
 80152ac:	89bb      	ldrh	r3, [r7, #12]
 80152ae:	81fb      	strh	r3, [r7, #14]
 80152b0:	e006      	b.n	80152c0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80152b2:	89bb      	ldrh	r3, [r7, #12]
 80152b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80152b8:	4293      	cmp	r3, r2
 80152ba:	d001      	beq.n	80152c0 <cmp_lfn+0xa0>
 80152bc:	2300      	movs	r3, #0
 80152be:	e018      	b.n	80152f2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80152c0:	693b      	ldr	r3, [r7, #16]
 80152c2:	3301      	adds	r3, #1
 80152c4:	613b      	str	r3, [r7, #16]
 80152c6:	693b      	ldr	r3, [r7, #16]
 80152c8:	2b0c      	cmp	r3, #12
 80152ca:	d9c8      	bls.n	801525e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	781b      	ldrb	r3, [r3, #0]
 80152d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d00b      	beq.n	80152f0 <cmp_lfn+0xd0>
 80152d8:	89fb      	ldrh	r3, [r7, #14]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d008      	beq.n	80152f0 <cmp_lfn+0xd0>
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	005b      	lsls	r3, r3, #1
 80152e2:	687a      	ldr	r2, [r7, #4]
 80152e4:	4413      	add	r3, r2
 80152e6:	881b      	ldrh	r3, [r3, #0]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d001      	beq.n	80152f0 <cmp_lfn+0xd0>
 80152ec:	2300      	movs	r3, #0
 80152ee:	e000      	b.n	80152f2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80152f0:	2301      	movs	r3, #1
}
 80152f2:	4618      	mov	r0, r3
 80152f4:	371c      	adds	r7, #28
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd90      	pop	{r4, r7, pc}
 80152fa:	bf00      	nop
 80152fc:	08018638 	.word	0x08018638

08015300 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b088      	sub	sp, #32
 8015304:	af00      	add	r7, sp, #0
 8015306:	60f8      	str	r0, [r7, #12]
 8015308:	60b9      	str	r1, [r7, #8]
 801530a:	4611      	mov	r1, r2
 801530c:	461a      	mov	r2, r3
 801530e:	460b      	mov	r3, r1
 8015310:	71fb      	strb	r3, [r7, #7]
 8015312:	4613      	mov	r3, r2
 8015314:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	330d      	adds	r3, #13
 801531a:	79ba      	ldrb	r2, [r7, #6]
 801531c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801531e:	68bb      	ldr	r3, [r7, #8]
 8015320:	330b      	adds	r3, #11
 8015322:	220f      	movs	r2, #15
 8015324:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	330c      	adds	r3, #12
 801532a:	2200      	movs	r2, #0
 801532c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	331a      	adds	r3, #26
 8015332:	2100      	movs	r1, #0
 8015334:	4618      	mov	r0, r3
 8015336:	f7ff f8a2 	bl	801447e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801533a:	79fb      	ldrb	r3, [r7, #7]
 801533c:	1e5a      	subs	r2, r3, #1
 801533e:	4613      	mov	r3, r2
 8015340:	005b      	lsls	r3, r3, #1
 8015342:	4413      	add	r3, r2
 8015344:	009b      	lsls	r3, r3, #2
 8015346:	4413      	add	r3, r2
 8015348:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801534a:	2300      	movs	r3, #0
 801534c:	82fb      	strh	r3, [r7, #22]
 801534e:	2300      	movs	r3, #0
 8015350:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015352:	8afb      	ldrh	r3, [r7, #22]
 8015354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015358:	4293      	cmp	r3, r2
 801535a:	d007      	beq.n	801536c <put_lfn+0x6c>
 801535c:	69fb      	ldr	r3, [r7, #28]
 801535e:	1c5a      	adds	r2, r3, #1
 8015360:	61fa      	str	r2, [r7, #28]
 8015362:	005b      	lsls	r3, r3, #1
 8015364:	68fa      	ldr	r2, [r7, #12]
 8015366:	4413      	add	r3, r2
 8015368:	881b      	ldrh	r3, [r3, #0]
 801536a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801536c:	4a17      	ldr	r2, [pc, #92]	; (80153cc <put_lfn+0xcc>)
 801536e:	69bb      	ldr	r3, [r7, #24]
 8015370:	4413      	add	r3, r2
 8015372:	781b      	ldrb	r3, [r3, #0]
 8015374:	461a      	mov	r2, r3
 8015376:	68bb      	ldr	r3, [r7, #8]
 8015378:	4413      	add	r3, r2
 801537a:	8afa      	ldrh	r2, [r7, #22]
 801537c:	4611      	mov	r1, r2
 801537e:	4618      	mov	r0, r3
 8015380:	f7ff f87d 	bl	801447e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015384:	8afb      	ldrh	r3, [r7, #22]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d102      	bne.n	8015390 <put_lfn+0x90>
 801538a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801538e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8015390:	69bb      	ldr	r3, [r7, #24]
 8015392:	3301      	adds	r3, #1
 8015394:	61bb      	str	r3, [r7, #24]
 8015396:	69bb      	ldr	r3, [r7, #24]
 8015398:	2b0c      	cmp	r3, #12
 801539a:	d9da      	bls.n	8015352 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801539c:	8afb      	ldrh	r3, [r7, #22]
 801539e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80153a2:	4293      	cmp	r3, r2
 80153a4:	d006      	beq.n	80153b4 <put_lfn+0xb4>
 80153a6:	69fb      	ldr	r3, [r7, #28]
 80153a8:	005b      	lsls	r3, r3, #1
 80153aa:	68fa      	ldr	r2, [r7, #12]
 80153ac:	4413      	add	r3, r2
 80153ae:	881b      	ldrh	r3, [r3, #0]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d103      	bne.n	80153bc <put_lfn+0xbc>
 80153b4:	79fb      	ldrb	r3, [r7, #7]
 80153b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153ba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80153bc:	68bb      	ldr	r3, [r7, #8]
 80153be:	79fa      	ldrb	r2, [r7, #7]
 80153c0:	701a      	strb	r2, [r3, #0]
}
 80153c2:	bf00      	nop
 80153c4:	3720      	adds	r7, #32
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bd80      	pop	{r7, pc}
 80153ca:	bf00      	nop
 80153cc:	08018638 	.word	0x08018638

080153d0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b08c      	sub	sp, #48	; 0x30
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	60f8      	str	r0, [r7, #12]
 80153d8:	60b9      	str	r1, [r7, #8]
 80153da:	607a      	str	r2, [r7, #4]
 80153dc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80153de:	220b      	movs	r2, #11
 80153e0:	68b9      	ldr	r1, [r7, #8]
 80153e2:	68f8      	ldr	r0, [r7, #12]
 80153e4:	f7ff f892 	bl	801450c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80153e8:	683b      	ldr	r3, [r7, #0]
 80153ea:	2b05      	cmp	r3, #5
 80153ec:	d92b      	bls.n	8015446 <gen_numname+0x76>
		sr = seq;
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80153f2:	e022      	b.n	801543a <gen_numname+0x6a>
			wc = *lfn++;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	1c9a      	adds	r2, r3, #2
 80153f8:	607a      	str	r2, [r7, #4]
 80153fa:	881b      	ldrh	r3, [r3, #0]
 80153fc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80153fe:	2300      	movs	r3, #0
 8015400:	62bb      	str	r3, [r7, #40]	; 0x28
 8015402:	e017      	b.n	8015434 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8015404:	69fb      	ldr	r3, [r7, #28]
 8015406:	005a      	lsls	r2, r3, #1
 8015408:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801540a:	f003 0301 	and.w	r3, r3, #1
 801540e:	4413      	add	r3, r2
 8015410:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8015412:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015414:	085b      	lsrs	r3, r3, #1
 8015416:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801541e:	2b00      	cmp	r3, #0
 8015420:	d005      	beq.n	801542e <gen_numname+0x5e>
 8015422:	69fb      	ldr	r3, [r7, #28]
 8015424:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8015428:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 801542c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015430:	3301      	adds	r3, #1
 8015432:	62bb      	str	r3, [r7, #40]	; 0x28
 8015434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015436:	2b0f      	cmp	r3, #15
 8015438:	d9e4      	bls.n	8015404 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	881b      	ldrh	r3, [r3, #0]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d1d8      	bne.n	80153f4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8015442:	69fb      	ldr	r3, [r7, #28]
 8015444:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8015446:	2307      	movs	r3, #7
 8015448:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801544a:	683b      	ldr	r3, [r7, #0]
 801544c:	b2db      	uxtb	r3, r3
 801544e:	f003 030f 	and.w	r3, r3, #15
 8015452:	b2db      	uxtb	r3, r3
 8015454:	3330      	adds	r3, #48	; 0x30
 8015456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801545a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801545e:	2b39      	cmp	r3, #57	; 0x39
 8015460:	d904      	bls.n	801546c <gen_numname+0x9c>
 8015462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015466:	3307      	adds	r3, #7
 8015468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801546e:	1e5a      	subs	r2, r3, #1
 8015470:	62ba      	str	r2, [r7, #40]	; 0x28
 8015472:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015476:	4413      	add	r3, r2
 8015478:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801547c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	091b      	lsrs	r3, r3, #4
 8015484:	603b      	str	r3, [r7, #0]
	} while (seq);
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d1de      	bne.n	801544a <gen_numname+0x7a>
	ns[i] = '~';
 801548c:	f107 0214 	add.w	r2, r7, #20
 8015490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015492:	4413      	add	r3, r2
 8015494:	227e      	movs	r2, #126	; 0x7e
 8015496:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015498:	2300      	movs	r3, #0
 801549a:	627b      	str	r3, [r7, #36]	; 0x24
 801549c:	e002      	b.n	80154a4 <gen_numname+0xd4>
 801549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154a0:	3301      	adds	r3, #1
 80154a2:	627b      	str	r3, [r7, #36]	; 0x24
 80154a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80154a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d205      	bcs.n	80154b8 <gen_numname+0xe8>
 80154ac:	68fa      	ldr	r2, [r7, #12]
 80154ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b0:	4413      	add	r3, r2
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	2b20      	cmp	r3, #32
 80154b6:	d1f2      	bne.n	801549e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80154b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ba:	2b07      	cmp	r3, #7
 80154bc:	d808      	bhi.n	80154d0 <gen_numname+0x100>
 80154be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154c0:	1c5a      	adds	r2, r3, #1
 80154c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80154c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80154c8:	4413      	add	r3, r2
 80154ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80154ce:	e000      	b.n	80154d2 <gen_numname+0x102>
 80154d0:	2120      	movs	r1, #32
 80154d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d4:	1c5a      	adds	r2, r3, #1
 80154d6:	627a      	str	r2, [r7, #36]	; 0x24
 80154d8:	68fa      	ldr	r2, [r7, #12]
 80154da:	4413      	add	r3, r2
 80154dc:	460a      	mov	r2, r1
 80154de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80154e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154e2:	2b07      	cmp	r3, #7
 80154e4:	d9e8      	bls.n	80154b8 <gen_numname+0xe8>
}
 80154e6:	bf00      	nop
 80154e8:	bf00      	nop
 80154ea:	3730      	adds	r7, #48	; 0x30
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}

080154f0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b085      	sub	sp, #20
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80154f8:	2300      	movs	r3, #0
 80154fa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80154fc:	230b      	movs	r3, #11
 80154fe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015500:	7bfb      	ldrb	r3, [r7, #15]
 8015502:	b2da      	uxtb	r2, r3
 8015504:	0852      	lsrs	r2, r2, #1
 8015506:	01db      	lsls	r3, r3, #7
 8015508:	4313      	orrs	r3, r2
 801550a:	b2da      	uxtb	r2, r3
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	1c59      	adds	r1, r3, #1
 8015510:	6079      	str	r1, [r7, #4]
 8015512:	781b      	ldrb	r3, [r3, #0]
 8015514:	4413      	add	r3, r2
 8015516:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8015518:	68bb      	ldr	r3, [r7, #8]
 801551a:	3b01      	subs	r3, #1
 801551c:	60bb      	str	r3, [r7, #8]
 801551e:	68bb      	ldr	r3, [r7, #8]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d1ed      	bne.n	8015500 <sum_sfn+0x10>
	return sum;
 8015524:	7bfb      	ldrb	r3, [r7, #15]
}
 8015526:	4618      	mov	r0, r3
 8015528:	3714      	adds	r7, #20
 801552a:	46bd      	mov	sp, r7
 801552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015530:	4770      	bx	lr

08015532 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015532:	b580      	push	{r7, lr}
 8015534:	b086      	sub	sp, #24
 8015536:	af00      	add	r7, sp, #0
 8015538:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015540:	2100      	movs	r1, #0
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	f7ff fc86 	bl	8014e54 <dir_sdi>
 8015548:	4603      	mov	r3, r0
 801554a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801554c:	7dfb      	ldrb	r3, [r7, #23]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d001      	beq.n	8015556 <dir_find+0x24>
 8015552:	7dfb      	ldrb	r3, [r7, #23]
 8015554:	e0a9      	b.n	80156aa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015556:	23ff      	movs	r3, #255	; 0xff
 8015558:	753b      	strb	r3, [r7, #20]
 801555a:	7d3b      	ldrb	r3, [r7, #20]
 801555c:	757b      	strb	r3, [r7, #21]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f04f 32ff 	mov.w	r2, #4294967295
 8015564:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	699b      	ldr	r3, [r3, #24]
 801556a:	4619      	mov	r1, r3
 801556c:	6938      	ldr	r0, [r7, #16]
 801556e:	f7ff f88f 	bl	8014690 <move_window>
 8015572:	4603      	mov	r3, r0
 8015574:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015576:	7dfb      	ldrb	r3, [r7, #23]
 8015578:	2b00      	cmp	r3, #0
 801557a:	f040 8090 	bne.w	801569e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	69db      	ldr	r3, [r3, #28]
 8015582:	781b      	ldrb	r3, [r3, #0]
 8015584:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015586:	7dbb      	ldrb	r3, [r7, #22]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d102      	bne.n	8015592 <dir_find+0x60>
 801558c:	2304      	movs	r3, #4
 801558e:	75fb      	strb	r3, [r7, #23]
 8015590:	e08a      	b.n	80156a8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	69db      	ldr	r3, [r3, #28]
 8015596:	330b      	adds	r3, #11
 8015598:	781b      	ldrb	r3, [r3, #0]
 801559a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801559e:	73fb      	strb	r3, [r7, #15]
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	7bfa      	ldrb	r2, [r7, #15]
 80155a4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80155a6:	7dbb      	ldrb	r3, [r7, #22]
 80155a8:	2be5      	cmp	r3, #229	; 0xe5
 80155aa:	d007      	beq.n	80155bc <dir_find+0x8a>
 80155ac:	7bfb      	ldrb	r3, [r7, #15]
 80155ae:	f003 0308 	and.w	r3, r3, #8
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d009      	beq.n	80155ca <dir_find+0x98>
 80155b6:	7bfb      	ldrb	r3, [r7, #15]
 80155b8:	2b0f      	cmp	r3, #15
 80155ba:	d006      	beq.n	80155ca <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80155bc:	23ff      	movs	r3, #255	; 0xff
 80155be:	757b      	strb	r3, [r7, #21]
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	f04f 32ff 	mov.w	r2, #4294967295
 80155c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80155c8:	e05e      	b.n	8015688 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80155ca:	7bfb      	ldrb	r3, [r7, #15]
 80155cc:	2b0f      	cmp	r3, #15
 80155ce:	d136      	bne.n	801563e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80155d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d154      	bne.n	8015688 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80155de:	7dbb      	ldrb	r3, [r7, #22]
 80155e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d00d      	beq.n	8015604 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	69db      	ldr	r3, [r3, #28]
 80155ec:	7b5b      	ldrb	r3, [r3, #13]
 80155ee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80155f0:	7dbb      	ldrb	r3, [r7, #22]
 80155f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80155f6:	75bb      	strb	r3, [r7, #22]
 80155f8:	7dbb      	ldrb	r3, [r7, #22]
 80155fa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	691a      	ldr	r2, [r3, #16]
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015604:	7dba      	ldrb	r2, [r7, #22]
 8015606:	7d7b      	ldrb	r3, [r7, #21]
 8015608:	429a      	cmp	r2, r3
 801560a:	d115      	bne.n	8015638 <dir_find+0x106>
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	69db      	ldr	r3, [r3, #28]
 8015610:	330d      	adds	r3, #13
 8015612:	781b      	ldrb	r3, [r3, #0]
 8015614:	7d3a      	ldrb	r2, [r7, #20]
 8015616:	429a      	cmp	r2, r3
 8015618:	d10e      	bne.n	8015638 <dir_find+0x106>
 801561a:	693b      	ldr	r3, [r7, #16]
 801561c:	691a      	ldr	r2, [r3, #16]
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	69db      	ldr	r3, [r3, #28]
 8015622:	4619      	mov	r1, r3
 8015624:	4610      	mov	r0, r2
 8015626:	f7ff fdfb 	bl	8015220 <cmp_lfn>
 801562a:	4603      	mov	r3, r0
 801562c:	2b00      	cmp	r3, #0
 801562e:	d003      	beq.n	8015638 <dir_find+0x106>
 8015630:	7d7b      	ldrb	r3, [r7, #21]
 8015632:	3b01      	subs	r3, #1
 8015634:	b2db      	uxtb	r3, r3
 8015636:	e000      	b.n	801563a <dir_find+0x108>
 8015638:	23ff      	movs	r3, #255	; 0xff
 801563a:	757b      	strb	r3, [r7, #21]
 801563c:	e024      	b.n	8015688 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801563e:	7d7b      	ldrb	r3, [r7, #21]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d109      	bne.n	8015658 <dir_find+0x126>
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	69db      	ldr	r3, [r3, #28]
 8015648:	4618      	mov	r0, r3
 801564a:	f7ff ff51 	bl	80154f0 <sum_sfn>
 801564e:	4603      	mov	r3, r0
 8015650:	461a      	mov	r2, r3
 8015652:	7d3b      	ldrb	r3, [r7, #20]
 8015654:	4293      	cmp	r3, r2
 8015656:	d024      	beq.n	80156a2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801565e:	f003 0301 	and.w	r3, r3, #1
 8015662:	2b00      	cmp	r3, #0
 8015664:	d10a      	bne.n	801567c <dir_find+0x14a>
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	69d8      	ldr	r0, [r3, #28]
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	3320      	adds	r3, #32
 801566e:	220b      	movs	r2, #11
 8015670:	4619      	mov	r1, r3
 8015672:	f7fe ff87 	bl	8014584 <mem_cmp>
 8015676:	4603      	mov	r3, r0
 8015678:	2b00      	cmp	r3, #0
 801567a:	d014      	beq.n	80156a6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801567c:	23ff      	movs	r3, #255	; 0xff
 801567e:	757b      	strb	r3, [r7, #21]
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f04f 32ff 	mov.w	r2, #4294967295
 8015686:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015688:	2100      	movs	r1, #0
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f7ff fc6b 	bl	8014f66 <dir_next>
 8015690:	4603      	mov	r3, r0
 8015692:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015694:	7dfb      	ldrb	r3, [r7, #23]
 8015696:	2b00      	cmp	r3, #0
 8015698:	f43f af65 	beq.w	8015566 <dir_find+0x34>
 801569c:	e004      	b.n	80156a8 <dir_find+0x176>
		if (res != FR_OK) break;
 801569e:	bf00      	nop
 80156a0:	e002      	b.n	80156a8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80156a2:	bf00      	nop
 80156a4:	e000      	b.n	80156a8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80156a6:	bf00      	nop

	return res;
 80156a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3718      	adds	r7, #24
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}
	...

080156b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b08c      	sub	sp, #48	; 0x30
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80156c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d001      	beq.n	80156d4 <dir_register+0x20>
 80156d0:	2306      	movs	r3, #6
 80156d2:	e0e0      	b.n	8015896 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80156d4:	2300      	movs	r3, #0
 80156d6:	627b      	str	r3, [r7, #36]	; 0x24
 80156d8:	e002      	b.n	80156e0 <dir_register+0x2c>
 80156da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156dc:	3301      	adds	r3, #1
 80156de:	627b      	str	r3, [r7, #36]	; 0x24
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	691a      	ldr	r2, [r3, #16]
 80156e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156e6:	005b      	lsls	r3, r3, #1
 80156e8:	4413      	add	r3, r2
 80156ea:	881b      	ldrh	r3, [r3, #0]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d1f4      	bne.n	80156da <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f103 0120 	add.w	r1, r3, #32
 80156f6:	f107 030c 	add.w	r3, r7, #12
 80156fa:	220c      	movs	r2, #12
 80156fc:	4618      	mov	r0, r3
 80156fe:	f7fe ff05 	bl	801450c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8015702:	7dfb      	ldrb	r3, [r7, #23]
 8015704:	f003 0301 	and.w	r3, r3, #1
 8015708:	2b00      	cmp	r3, #0
 801570a:	d032      	beq.n	8015772 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2240      	movs	r2, #64	; 0x40
 8015710:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 8015714:	2301      	movs	r3, #1
 8015716:	62bb      	str	r3, [r7, #40]	; 0x28
 8015718:	e016      	b.n	8015748 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f103 0020 	add.w	r0, r3, #32
 8015720:	69fb      	ldr	r3, [r7, #28]
 8015722:	691a      	ldr	r2, [r3, #16]
 8015724:	f107 010c 	add.w	r1, r7, #12
 8015728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801572a:	f7ff fe51 	bl	80153d0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f7ff feff 	bl	8015532 <dir_find>
 8015734:	4603      	mov	r3, r0
 8015736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801573a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801573e:	2b00      	cmp	r3, #0
 8015740:	d106      	bne.n	8015750 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8015742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015744:	3301      	adds	r3, #1
 8015746:	62bb      	str	r3, [r7, #40]	; 0x28
 8015748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801574a:	2b63      	cmp	r3, #99	; 0x63
 801574c:	d9e5      	bls.n	801571a <dir_register+0x66>
 801574e:	e000      	b.n	8015752 <dir_register+0x9e>
			if (res != FR_OK) break;
 8015750:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8015752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015754:	2b64      	cmp	r3, #100	; 0x64
 8015756:	d101      	bne.n	801575c <dir_register+0xa8>
 8015758:	2307      	movs	r3, #7
 801575a:	e09c      	b.n	8015896 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801575c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015760:	2b04      	cmp	r3, #4
 8015762:	d002      	beq.n	801576a <dir_register+0xb6>
 8015764:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015768:	e095      	b.n	8015896 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801576a:	7dfa      	ldrb	r2, [r7, #23]
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015772:	7dfb      	ldrb	r3, [r7, #23]
 8015774:	f003 0302 	and.w	r3, r3, #2
 8015778:	2b00      	cmp	r3, #0
 801577a:	d007      	beq.n	801578c <dir_register+0xd8>
 801577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801577e:	330c      	adds	r3, #12
 8015780:	4a47      	ldr	r2, [pc, #284]	; (80158a0 <dir_register+0x1ec>)
 8015782:	fba2 2303 	umull	r2, r3, r2, r3
 8015786:	089b      	lsrs	r3, r3, #2
 8015788:	3301      	adds	r3, #1
 801578a:	e000      	b.n	801578e <dir_register+0xda>
 801578c:	2301      	movs	r3, #1
 801578e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015790:	6a39      	ldr	r1, [r7, #32]
 8015792:	6878      	ldr	r0, [r7, #4]
 8015794:	f7ff fcbd 	bl	8015112 <dir_alloc>
 8015798:	4603      	mov	r3, r0
 801579a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801579e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d148      	bne.n	8015838 <dir_register+0x184>
 80157a6:	6a3b      	ldr	r3, [r7, #32]
 80157a8:	3b01      	subs	r3, #1
 80157aa:	623b      	str	r3, [r7, #32]
 80157ac:	6a3b      	ldr	r3, [r7, #32]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d042      	beq.n	8015838 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	691a      	ldr	r2, [r3, #16]
 80157b6:	6a3b      	ldr	r3, [r7, #32]
 80157b8:	015b      	lsls	r3, r3, #5
 80157ba:	1ad3      	subs	r3, r2, r3
 80157bc:	4619      	mov	r1, r3
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f7ff fb48 	bl	8014e54 <dir_sdi>
 80157c4:	4603      	mov	r3, r0
 80157c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80157ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d132      	bne.n	8015838 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	3320      	adds	r3, #32
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7ff fe8a 	bl	80154f0 <sum_sfn>
 80157dc:	4603      	mov	r3, r0
 80157de:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	699b      	ldr	r3, [r3, #24]
 80157e4:	4619      	mov	r1, r3
 80157e6:	69f8      	ldr	r0, [r7, #28]
 80157e8:	f7fe ff52 	bl	8014690 <move_window>
 80157ec:	4603      	mov	r3, r0
 80157ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80157f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d11d      	bne.n	8015836 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80157fa:	69fb      	ldr	r3, [r7, #28]
 80157fc:	6918      	ldr	r0, [r3, #16]
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	69d9      	ldr	r1, [r3, #28]
 8015802:	6a3b      	ldr	r3, [r7, #32]
 8015804:	b2da      	uxtb	r2, r3
 8015806:	7efb      	ldrb	r3, [r7, #27]
 8015808:	f7ff fd7a 	bl	8015300 <put_lfn>
				fs->wflag = 1;
 801580c:	69fb      	ldr	r3, [r7, #28]
 801580e:	2201      	movs	r2, #1
 8015810:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8015812:	2100      	movs	r1, #0
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f7ff fba6 	bl	8014f66 <dir_next>
 801581a:	4603      	mov	r3, r0
 801581c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015824:	2b00      	cmp	r3, #0
 8015826:	d107      	bne.n	8015838 <dir_register+0x184>
 8015828:	6a3b      	ldr	r3, [r7, #32]
 801582a:	3b01      	subs	r3, #1
 801582c:	623b      	str	r3, [r7, #32]
 801582e:	6a3b      	ldr	r3, [r7, #32]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d1d5      	bne.n	80157e0 <dir_register+0x12c>
 8015834:	e000      	b.n	8015838 <dir_register+0x184>
				if (res != FR_OK) break;
 8015836:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801583c:	2b00      	cmp	r3, #0
 801583e:	d128      	bne.n	8015892 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	699b      	ldr	r3, [r3, #24]
 8015844:	4619      	mov	r1, r3
 8015846:	69f8      	ldr	r0, [r7, #28]
 8015848:	f7fe ff22 	bl	8014690 <move_window>
 801584c:	4603      	mov	r3, r0
 801584e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015856:	2b00      	cmp	r3, #0
 8015858:	d11b      	bne.n	8015892 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	69db      	ldr	r3, [r3, #28]
 801585e:	2220      	movs	r2, #32
 8015860:	2100      	movs	r1, #0
 8015862:	4618      	mov	r0, r3
 8015864:	f7fe fe73 	bl	801454e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	69d8      	ldr	r0, [r3, #28]
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	3320      	adds	r3, #32
 8015870:	220b      	movs	r2, #11
 8015872:	4619      	mov	r1, r3
 8015874:	f7fe fe4a 	bl	801450c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	69db      	ldr	r3, [r3, #28]
 8015882:	330c      	adds	r3, #12
 8015884:	f002 0218 	and.w	r2, r2, #24
 8015888:	b2d2      	uxtb	r2, r2
 801588a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801588c:	69fb      	ldr	r3, [r7, #28]
 801588e:	2201      	movs	r2, #1
 8015890:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015896:	4618      	mov	r0, r3
 8015898:	3730      	adds	r7, #48	; 0x30
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}
 801589e:	bf00      	nop
 80158a0:	4ec4ec4f 	.word	0x4ec4ec4f

080158a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b08a      	sub	sp, #40	; 0x28
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
 80158ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	613b      	str	r3, [r7, #16]
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	691b      	ldr	r3, [r3, #16]
 80158ba:	60fb      	str	r3, [r7, #12]
 80158bc:	2300      	movs	r3, #0
 80158be:	617b      	str	r3, [r7, #20]
 80158c0:	697b      	ldr	r3, [r7, #20]
 80158c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80158c4:	69bb      	ldr	r3, [r7, #24]
 80158c6:	1c5a      	adds	r2, r3, #1
 80158c8:	61ba      	str	r2, [r7, #24]
 80158ca:	693a      	ldr	r2, [r7, #16]
 80158cc:	4413      	add	r3, r2
 80158ce:	781b      	ldrb	r3, [r3, #0]
 80158d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80158d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158d4:	2b1f      	cmp	r3, #31
 80158d6:	d940      	bls.n	801595a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80158d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158da:	2b2f      	cmp	r3, #47	; 0x2f
 80158dc:	d006      	beq.n	80158ec <create_name+0x48>
 80158de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158e0:	2b5c      	cmp	r3, #92	; 0x5c
 80158e2:	d110      	bne.n	8015906 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80158e4:	e002      	b.n	80158ec <create_name+0x48>
 80158e6:	69bb      	ldr	r3, [r7, #24]
 80158e8:	3301      	adds	r3, #1
 80158ea:	61bb      	str	r3, [r7, #24]
 80158ec:	693a      	ldr	r2, [r7, #16]
 80158ee:	69bb      	ldr	r3, [r7, #24]
 80158f0:	4413      	add	r3, r2
 80158f2:	781b      	ldrb	r3, [r3, #0]
 80158f4:	2b2f      	cmp	r3, #47	; 0x2f
 80158f6:	d0f6      	beq.n	80158e6 <create_name+0x42>
 80158f8:	693a      	ldr	r2, [r7, #16]
 80158fa:	69bb      	ldr	r3, [r7, #24]
 80158fc:	4413      	add	r3, r2
 80158fe:	781b      	ldrb	r3, [r3, #0]
 8015900:	2b5c      	cmp	r3, #92	; 0x5c
 8015902:	d0f0      	beq.n	80158e6 <create_name+0x42>
			break;
 8015904:	e02a      	b.n	801595c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8015906:	697b      	ldr	r3, [r7, #20]
 8015908:	2bfe      	cmp	r3, #254	; 0xfe
 801590a:	d901      	bls.n	8015910 <create_name+0x6c>
 801590c:	2306      	movs	r3, #6
 801590e:	e177      	b.n	8015c00 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8015910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015912:	b2db      	uxtb	r3, r3
 8015914:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8015916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015918:	2101      	movs	r1, #1
 801591a:	4618      	mov	r0, r3
 801591c:	f001 fb32 	bl	8016f84 <ff_convert>
 8015920:	4603      	mov	r3, r0
 8015922:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015926:	2b00      	cmp	r3, #0
 8015928:	d101      	bne.n	801592e <create_name+0x8a>
 801592a:	2306      	movs	r3, #6
 801592c:	e168      	b.n	8015c00 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801592e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015930:	2b7f      	cmp	r3, #127	; 0x7f
 8015932:	d809      	bhi.n	8015948 <create_name+0xa4>
 8015934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015936:	4619      	mov	r1, r3
 8015938:	48b3      	ldr	r0, [pc, #716]	; (8015c08 <create_name+0x364>)
 801593a:	f7fe fe4a 	bl	80145d2 <chk_chr>
 801593e:	4603      	mov	r3, r0
 8015940:	2b00      	cmp	r3, #0
 8015942:	d001      	beq.n	8015948 <create_name+0xa4>
 8015944:	2306      	movs	r3, #6
 8015946:	e15b      	b.n	8015c00 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8015948:	697b      	ldr	r3, [r7, #20]
 801594a:	1c5a      	adds	r2, r3, #1
 801594c:	617a      	str	r2, [r7, #20]
 801594e:	005b      	lsls	r3, r3, #1
 8015950:	68fa      	ldr	r2, [r7, #12]
 8015952:	4413      	add	r3, r2
 8015954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015956:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8015958:	e7b4      	b.n	80158c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801595a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801595c:	693a      	ldr	r2, [r7, #16]
 801595e:	69bb      	ldr	r3, [r7, #24]
 8015960:	441a      	add	r2, r3
 8015962:	683b      	ldr	r3, [r7, #0]
 8015964:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015966:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015968:	2b1f      	cmp	r3, #31
 801596a:	d801      	bhi.n	8015970 <create_name+0xcc>
 801596c:	2304      	movs	r3, #4
 801596e:	e000      	b.n	8015972 <create_name+0xce>
 8015970:	2300      	movs	r3, #0
 8015972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015976:	e011      	b.n	801599c <create_name+0xf8>
		w = lfn[di - 1];
 8015978:	697b      	ldr	r3, [r7, #20]
 801597a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801597e:	3b01      	subs	r3, #1
 8015980:	005b      	lsls	r3, r3, #1
 8015982:	68fa      	ldr	r2, [r7, #12]
 8015984:	4413      	add	r3, r2
 8015986:	881b      	ldrh	r3, [r3, #0]
 8015988:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801598a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801598c:	2b20      	cmp	r3, #32
 801598e:	d002      	beq.n	8015996 <create_name+0xf2>
 8015990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015992:	2b2e      	cmp	r3, #46	; 0x2e
 8015994:	d106      	bne.n	80159a4 <create_name+0x100>
		di--;
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	3b01      	subs	r3, #1
 801599a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801599c:	697b      	ldr	r3, [r7, #20]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d1ea      	bne.n	8015978 <create_name+0xd4>
 80159a2:	e000      	b.n	80159a6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80159a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	005b      	lsls	r3, r3, #1
 80159aa:	68fa      	ldr	r2, [r7, #12]
 80159ac:	4413      	add	r3, r2
 80159ae:	2200      	movs	r2, #0
 80159b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d101      	bne.n	80159bc <create_name+0x118>
 80159b8:	2306      	movs	r3, #6
 80159ba:	e121      	b.n	8015c00 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	3320      	adds	r3, #32
 80159c0:	220b      	movs	r2, #11
 80159c2:	2120      	movs	r1, #32
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7fe fdc2 	bl	801454e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80159ca:	2300      	movs	r3, #0
 80159cc:	61bb      	str	r3, [r7, #24]
 80159ce:	e002      	b.n	80159d6 <create_name+0x132>
 80159d0:	69bb      	ldr	r3, [r7, #24]
 80159d2:	3301      	adds	r3, #1
 80159d4:	61bb      	str	r3, [r7, #24]
 80159d6:	69bb      	ldr	r3, [r7, #24]
 80159d8:	005b      	lsls	r3, r3, #1
 80159da:	68fa      	ldr	r2, [r7, #12]
 80159dc:	4413      	add	r3, r2
 80159de:	881b      	ldrh	r3, [r3, #0]
 80159e0:	2b20      	cmp	r3, #32
 80159e2:	d0f5      	beq.n	80159d0 <create_name+0x12c>
 80159e4:	69bb      	ldr	r3, [r7, #24]
 80159e6:	005b      	lsls	r3, r3, #1
 80159e8:	68fa      	ldr	r2, [r7, #12]
 80159ea:	4413      	add	r3, r2
 80159ec:	881b      	ldrh	r3, [r3, #0]
 80159ee:	2b2e      	cmp	r3, #46	; 0x2e
 80159f0:	d0ee      	beq.n	80159d0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80159f2:	69bb      	ldr	r3, [r7, #24]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d009      	beq.n	8015a0c <create_name+0x168>
 80159f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159fc:	f043 0303 	orr.w	r3, r3, #3
 8015a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015a04:	e002      	b.n	8015a0c <create_name+0x168>
 8015a06:	697b      	ldr	r3, [r7, #20]
 8015a08:	3b01      	subs	r3, #1
 8015a0a:	617b      	str	r3, [r7, #20]
 8015a0c:	697b      	ldr	r3, [r7, #20]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d009      	beq.n	8015a26 <create_name+0x182>
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015a18:	3b01      	subs	r3, #1
 8015a1a:	005b      	lsls	r3, r3, #1
 8015a1c:	68fa      	ldr	r2, [r7, #12]
 8015a1e:	4413      	add	r3, r2
 8015a20:	881b      	ldrh	r3, [r3, #0]
 8015a22:	2b2e      	cmp	r3, #46	; 0x2e
 8015a24:	d1ef      	bne.n	8015a06 <create_name+0x162>

	i = b = 0; ni = 8;
 8015a26:	2300      	movs	r3, #0
 8015a28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	623b      	str	r3, [r7, #32]
 8015a30:	2308      	movs	r3, #8
 8015a32:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8015a34:	69bb      	ldr	r3, [r7, #24]
 8015a36:	1c5a      	adds	r2, r3, #1
 8015a38:	61ba      	str	r2, [r7, #24]
 8015a3a:	005b      	lsls	r3, r3, #1
 8015a3c:	68fa      	ldr	r2, [r7, #12]
 8015a3e:	4413      	add	r3, r2
 8015a40:	881b      	ldrh	r3, [r3, #0]
 8015a42:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8015a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	f000 8090 	beq.w	8015b6c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8015a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a4e:	2b20      	cmp	r3, #32
 8015a50:	d006      	beq.n	8015a60 <create_name+0x1bc>
 8015a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a54:	2b2e      	cmp	r3, #46	; 0x2e
 8015a56:	d10a      	bne.n	8015a6e <create_name+0x1ca>
 8015a58:	69ba      	ldr	r2, [r7, #24]
 8015a5a:	697b      	ldr	r3, [r7, #20]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d006      	beq.n	8015a6e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8015a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a64:	f043 0303 	orr.w	r3, r3, #3
 8015a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a6c:	e07d      	b.n	8015b6a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8015a6e:	6a3a      	ldr	r2, [r7, #32]
 8015a70:	69fb      	ldr	r3, [r7, #28]
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d203      	bcs.n	8015a7e <create_name+0x1da>
 8015a76:	69ba      	ldr	r2, [r7, #24]
 8015a78:	697b      	ldr	r3, [r7, #20]
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d123      	bne.n	8015ac6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8015a7e:	69fb      	ldr	r3, [r7, #28]
 8015a80:	2b0b      	cmp	r3, #11
 8015a82:	d106      	bne.n	8015a92 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8015a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a88:	f043 0303 	orr.w	r3, r3, #3
 8015a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a90:	e06f      	b.n	8015b72 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8015a92:	69ba      	ldr	r2, [r7, #24]
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d005      	beq.n	8015aa6 <create_name+0x202>
 8015a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a9e:	f043 0303 	orr.w	r3, r3, #3
 8015aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8015aa6:	69ba      	ldr	r2, [r7, #24]
 8015aa8:	697b      	ldr	r3, [r7, #20]
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	d860      	bhi.n	8015b70 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8015aae:	697b      	ldr	r3, [r7, #20]
 8015ab0:	61bb      	str	r3, [r7, #24]
 8015ab2:	2308      	movs	r3, #8
 8015ab4:	623b      	str	r3, [r7, #32]
 8015ab6:	230b      	movs	r3, #11
 8015ab8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8015aba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015abe:	009b      	lsls	r3, r3, #2
 8015ac0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015ac4:	e051      	b.n	8015b6a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8015ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8015aca:	d914      	bls.n	8015af6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8015acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ace:	2100      	movs	r1, #0
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f001 fa57 	bl	8016f84 <ff_convert>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d004      	beq.n	8015aea <create_name+0x246>
 8015ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ae2:	3b80      	subs	r3, #128	; 0x80
 8015ae4:	4a49      	ldr	r2, [pc, #292]	; (8015c0c <create_name+0x368>)
 8015ae6:	5cd3      	ldrb	r3, [r2, r3]
 8015ae8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8015aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015aee:	f043 0302 	orr.w	r3, r3, #2
 8015af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d007      	beq.n	8015b0c <create_name+0x268>
 8015afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015afe:	4619      	mov	r1, r3
 8015b00:	4843      	ldr	r0, [pc, #268]	; (8015c10 <create_name+0x36c>)
 8015b02:	f7fe fd66 	bl	80145d2 <chk_chr>
 8015b06:	4603      	mov	r3, r0
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d008      	beq.n	8015b1e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8015b0c:	235f      	movs	r3, #95	; 0x5f
 8015b0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8015b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b14:	f043 0303 	orr.w	r3, r3, #3
 8015b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015b1c:	e01b      	b.n	8015b56 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8015b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b20:	2b40      	cmp	r3, #64	; 0x40
 8015b22:	d909      	bls.n	8015b38 <create_name+0x294>
 8015b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b26:	2b5a      	cmp	r3, #90	; 0x5a
 8015b28:	d806      	bhi.n	8015b38 <create_name+0x294>
					b |= 2;
 8015b2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b2e:	f043 0302 	orr.w	r3, r3, #2
 8015b32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015b36:	e00e      	b.n	8015b56 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8015b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b3a:	2b60      	cmp	r3, #96	; 0x60
 8015b3c:	d90b      	bls.n	8015b56 <create_name+0x2b2>
 8015b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b40:	2b7a      	cmp	r3, #122	; 0x7a
 8015b42:	d808      	bhi.n	8015b56 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8015b44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b48:	f043 0301 	orr.w	r3, r3, #1
 8015b4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015b50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b52:	3b20      	subs	r3, #32
 8015b54:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8015b56:	6a3b      	ldr	r3, [r7, #32]
 8015b58:	1c5a      	adds	r2, r3, #1
 8015b5a:	623a      	str	r2, [r7, #32]
 8015b5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015b5e:	b2d1      	uxtb	r1, r2
 8015b60:	687a      	ldr	r2, [r7, #4]
 8015b62:	4413      	add	r3, r2
 8015b64:	460a      	mov	r2, r1
 8015b66:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 8015b6a:	e763      	b.n	8015a34 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8015b6c:	bf00      	nop
 8015b6e:	e000      	b.n	8015b72 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8015b70:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b78:	2be5      	cmp	r3, #229	; 0xe5
 8015b7a:	d103      	bne.n	8015b84 <create_name+0x2e0>
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2205      	movs	r2, #5
 8015b80:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 8015b84:	69fb      	ldr	r3, [r7, #28]
 8015b86:	2b08      	cmp	r3, #8
 8015b88:	d104      	bne.n	8015b94 <create_name+0x2f0>
 8015b8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b8e:	009b      	lsls	r3, r3, #2
 8015b90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015b94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b98:	f003 030c 	and.w	r3, r3, #12
 8015b9c:	2b0c      	cmp	r3, #12
 8015b9e:	d005      	beq.n	8015bac <create_name+0x308>
 8015ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ba4:	f003 0303 	and.w	r3, r3, #3
 8015ba8:	2b03      	cmp	r3, #3
 8015baa:	d105      	bne.n	8015bb8 <create_name+0x314>
 8015bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bb0:	f043 0302 	orr.w	r3, r3, #2
 8015bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bbc:	f003 0302 	and.w	r3, r3, #2
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d117      	bne.n	8015bf4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8015bc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015bc8:	f003 0303 	and.w	r3, r3, #3
 8015bcc:	2b01      	cmp	r3, #1
 8015bce:	d105      	bne.n	8015bdc <create_name+0x338>
 8015bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bd4:	f043 0310 	orr.w	r3, r3, #16
 8015bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8015bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015be0:	f003 030c 	and.w	r3, r3, #12
 8015be4:	2b04      	cmp	r3, #4
 8015be6:	d105      	bne.n	8015bf4 <create_name+0x350>
 8015be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bec:	f043 0308 	orr.w	r3, r3, #8
 8015bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015bfa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 8015bfe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3728      	adds	r7, #40	; 0x28
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}
 8015c08:	080184f8 	.word	0x080184f8
 8015c0c:	080185b8 	.word	0x080185b8
 8015c10:	08018504 	.word	0x08018504

08015c14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b086      	sub	sp, #24
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
 8015c1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8015c22:	693b      	ldr	r3, [r7, #16]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015c28:	e002      	b.n	8015c30 <follow_path+0x1c>
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	3301      	adds	r3, #1
 8015c2e:	603b      	str	r3, [r7, #0]
 8015c30:	683b      	ldr	r3, [r7, #0]
 8015c32:	781b      	ldrb	r3, [r3, #0]
 8015c34:	2b2f      	cmp	r3, #47	; 0x2f
 8015c36:	d0f8      	beq.n	8015c2a <follow_path+0x16>
 8015c38:	683b      	ldr	r3, [r7, #0]
 8015c3a:	781b      	ldrb	r3, [r3, #0]
 8015c3c:	2b5c      	cmp	r3, #92	; 0x5c
 8015c3e:	d0f4      	beq.n	8015c2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	2200      	movs	r2, #0
 8015c44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	781b      	ldrb	r3, [r3, #0]
 8015c4a:	2b1f      	cmp	r3, #31
 8015c4c:	d80a      	bhi.n	8015c64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	2280      	movs	r2, #128	; 0x80
 8015c52:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8015c56:	2100      	movs	r1, #0
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f7ff f8fb 	bl	8014e54 <dir_sdi>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	75fb      	strb	r3, [r7, #23]
 8015c62:	e048      	b.n	8015cf6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015c64:	463b      	mov	r3, r7
 8015c66:	4619      	mov	r1, r3
 8015c68:	6878      	ldr	r0, [r7, #4]
 8015c6a:	f7ff fe1b 	bl	80158a4 <create_name>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015c72:	7dfb      	ldrb	r3, [r7, #23]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d139      	bne.n	8015cec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015c78:	6878      	ldr	r0, [r7, #4]
 8015c7a:	f7ff fc5a 	bl	8015532 <dir_find>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015c88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8015c8a:	7dfb      	ldrb	r3, [r7, #23]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d00a      	beq.n	8015ca6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015c90:	7dfb      	ldrb	r3, [r7, #23]
 8015c92:	2b04      	cmp	r3, #4
 8015c94:	d12c      	bne.n	8015cf0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015c96:	7afb      	ldrb	r3, [r7, #11]
 8015c98:	f003 0304 	and.w	r3, r3, #4
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d127      	bne.n	8015cf0 <follow_path+0xdc>
 8015ca0:	2305      	movs	r3, #5
 8015ca2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015ca4:	e024      	b.n	8015cf0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015ca6:	7afb      	ldrb	r3, [r7, #11]
 8015ca8:	f003 0304 	and.w	r3, r3, #4
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d121      	bne.n	8015cf4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015cb0:	693b      	ldr	r3, [r7, #16]
 8015cb2:	799b      	ldrb	r3, [r3, #6]
 8015cb4:	f003 0310 	and.w	r3, r3, #16
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d102      	bne.n	8015cc2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015cbc:	2305      	movs	r3, #5
 8015cbe:	75fb      	strb	r3, [r7, #23]
 8015cc0:	e019      	b.n	8015cf6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	691b      	ldr	r3, [r3, #16]
 8015ccc:	68fa      	ldr	r2, [r7, #12]
 8015cce:	8992      	ldrh	r2, [r2, #12]
 8015cd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8015cd4:	fb02 f200 	mul.w	r2, r2, r0
 8015cd8:	1a9b      	subs	r3, r3, r2
 8015cda:	440b      	add	r3, r1
 8015cdc:	4619      	mov	r1, r3
 8015cde:	68f8      	ldr	r0, [r7, #12]
 8015ce0:	f7ff fa5e 	bl	80151a0 <ld_clust>
 8015ce4:	4602      	mov	r2, r0
 8015ce6:	693b      	ldr	r3, [r7, #16]
 8015ce8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015cea:	e7bb      	b.n	8015c64 <follow_path+0x50>
			if (res != FR_OK) break;
 8015cec:	bf00      	nop
 8015cee:	e002      	b.n	8015cf6 <follow_path+0xe2>
				break;
 8015cf0:	bf00      	nop
 8015cf2:	e000      	b.n	8015cf6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015cf4:	bf00      	nop
			}
		}
	}

	return res;
 8015cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	3718      	adds	r7, #24
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}

08015d00 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015d00:	b480      	push	{r7}
 8015d02:	b087      	sub	sp, #28
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8015d08:	f04f 33ff 	mov.w	r3, #4294967295
 8015d0c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d031      	beq.n	8015d7a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	617b      	str	r3, [r7, #20]
 8015d1c:	e002      	b.n	8015d24 <get_ldnumber+0x24>
 8015d1e:	697b      	ldr	r3, [r7, #20]
 8015d20:	3301      	adds	r3, #1
 8015d22:	617b      	str	r3, [r7, #20]
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	781b      	ldrb	r3, [r3, #0]
 8015d28:	2b1f      	cmp	r3, #31
 8015d2a:	d903      	bls.n	8015d34 <get_ldnumber+0x34>
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	781b      	ldrb	r3, [r3, #0]
 8015d30:	2b3a      	cmp	r3, #58	; 0x3a
 8015d32:	d1f4      	bne.n	8015d1e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8015d34:	697b      	ldr	r3, [r7, #20]
 8015d36:	781b      	ldrb	r3, [r3, #0]
 8015d38:	2b3a      	cmp	r3, #58	; 0x3a
 8015d3a:	d11c      	bne.n	8015d76 <get_ldnumber+0x76>
			tp = *path;
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	1c5a      	adds	r2, r3, #1
 8015d46:	60fa      	str	r2, [r7, #12]
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	3b30      	subs	r3, #48	; 0x30
 8015d4c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8015d4e:	68bb      	ldr	r3, [r7, #8]
 8015d50:	2b09      	cmp	r3, #9
 8015d52:	d80e      	bhi.n	8015d72 <get_ldnumber+0x72>
 8015d54:	68fa      	ldr	r2, [r7, #12]
 8015d56:	697b      	ldr	r3, [r7, #20]
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d10a      	bne.n	8015d72 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8015d5c:	68bb      	ldr	r3, [r7, #8]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d107      	bne.n	8015d72 <get_ldnumber+0x72>
					vol = (int)i;
 8015d62:	68bb      	ldr	r3, [r7, #8]
 8015d64:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8015d66:	697b      	ldr	r3, [r7, #20]
 8015d68:	3301      	adds	r3, #1
 8015d6a:	617b      	str	r3, [r7, #20]
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	697a      	ldr	r2, [r7, #20]
 8015d70:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	e002      	b.n	8015d7c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8015d76:	2300      	movs	r3, #0
 8015d78:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8015d7a:	693b      	ldr	r3, [r7, #16]
}
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	371c      	adds	r7, #28
 8015d80:	46bd      	mov	sp, r7
 8015d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d86:	4770      	bx	lr

08015d88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
 8015d90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	2200      	movs	r2, #0
 8015d96:	70da      	strb	r2, [r3, #3]
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8015d9e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015da0:	6839      	ldr	r1, [r7, #0]
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	f7fe fc74 	bl	8014690 <move_window>
 8015da8:	4603      	mov	r3, r0
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d001      	beq.n	8015db2 <check_fs+0x2a>
 8015dae:	2304      	movs	r3, #4
 8015db0:	e038      	b.n	8015e24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	3338      	adds	r3, #56	; 0x38
 8015db6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f7fe fb24 	bl	8014408 <ld_word>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	461a      	mov	r2, r3
 8015dc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015dc8:	429a      	cmp	r2, r3
 8015dca:	d001      	beq.n	8015dd0 <check_fs+0x48>
 8015dcc:	2303      	movs	r3, #3
 8015dce:	e029      	b.n	8015e24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015dd6:	2be9      	cmp	r3, #233	; 0xe9
 8015dd8:	d009      	beq.n	8015dee <check_fs+0x66>
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015de0:	2beb      	cmp	r3, #235	; 0xeb
 8015de2:	d11e      	bne.n	8015e22 <check_fs+0x9a>
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8015dea:	2b90      	cmp	r3, #144	; 0x90
 8015dec:	d119      	bne.n	8015e22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	3338      	adds	r3, #56	; 0x38
 8015df2:	3336      	adds	r3, #54	; 0x36
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7fe fb1f 	bl	8014438 <ld_dword>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015e00:	4a0a      	ldr	r2, [pc, #40]	; (8015e2c <check_fs+0xa4>)
 8015e02:	4293      	cmp	r3, r2
 8015e04:	d101      	bne.n	8015e0a <check_fs+0x82>
 8015e06:	2300      	movs	r3, #0
 8015e08:	e00c      	b.n	8015e24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	3338      	adds	r3, #56	; 0x38
 8015e0e:	3352      	adds	r3, #82	; 0x52
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7fe fb11 	bl	8014438 <ld_dword>
 8015e16:	4603      	mov	r3, r0
 8015e18:	4a05      	ldr	r2, [pc, #20]	; (8015e30 <check_fs+0xa8>)
 8015e1a:	4293      	cmp	r3, r2
 8015e1c:	d101      	bne.n	8015e22 <check_fs+0x9a>
 8015e1e:	2300      	movs	r3, #0
 8015e20:	e000      	b.n	8015e24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8015e22:	2302      	movs	r3, #2
}
 8015e24:	4618      	mov	r0, r3
 8015e26:	3708      	adds	r7, #8
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	00544146 	.word	0x00544146
 8015e30:	33544146 	.word	0x33544146

08015e34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b096      	sub	sp, #88	; 0x58
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	60f8      	str	r0, [r7, #12]
 8015e3c:	60b9      	str	r1, [r7, #8]
 8015e3e:	4613      	mov	r3, r2
 8015e40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8015e42:	68bb      	ldr	r3, [r7, #8]
 8015e44:	2200      	movs	r2, #0
 8015e46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8015e48:	68f8      	ldr	r0, [r7, #12]
 8015e4a:	f7ff ff59 	bl	8015d00 <get_ldnumber>
 8015e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8015e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	da01      	bge.n	8015e5a <find_volume+0x26>
 8015e56:	230b      	movs	r3, #11
 8015e58:	e265      	b.n	8016326 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8015e5a:	4ab0      	ldr	r2, [pc, #704]	; (801611c <find_volume+0x2e8>)
 8015e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d101      	bne.n	8015e6e <find_volume+0x3a>
 8015e6a:	230c      	movs	r3, #12
 8015e6c:	e25b      	b.n	8016326 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8015e6e:	68bb      	ldr	r3, [r7, #8]
 8015e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015e72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015e74:	79fb      	ldrb	r3, [r7, #7]
 8015e76:	f023 0301 	bic.w	r3, r3, #1
 8015e7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e7e:	781b      	ldrb	r3, [r3, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d01a      	beq.n	8015eba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8015e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e86:	785b      	ldrb	r3, [r3, #1]
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f7fe fa1f 	bl	80142cc <disk_status>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015e94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015e98:	f003 0301 	and.w	r3, r3, #1
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d10c      	bne.n	8015eba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015ea0:	79fb      	ldrb	r3, [r7, #7]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d007      	beq.n	8015eb6 <find_volume+0x82>
 8015ea6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015eaa:	f003 0304 	and.w	r3, r3, #4
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d001      	beq.n	8015eb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8015eb2:	230a      	movs	r3, #10
 8015eb4:	e237      	b.n	8016326 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	e235      	b.n	8016326 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8015eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8015ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ec2:	b2da      	uxtb	r2, r3
 8015ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ec6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8015ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eca:	785b      	ldrb	r3, [r3, #1]
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f7fe fa17 	bl	8014300 <disk_initialize>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8015ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015edc:	f003 0301 	and.w	r3, r3, #1
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d001      	beq.n	8015ee8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015ee4:	2303      	movs	r3, #3
 8015ee6:	e21e      	b.n	8016326 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8015ee8:	79fb      	ldrb	r3, [r7, #7]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d007      	beq.n	8015efe <find_volume+0xca>
 8015eee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015ef2:	f003 0304 	and.w	r3, r3, #4
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d001      	beq.n	8015efe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8015efa:	230a      	movs	r3, #10
 8015efc:	e213      	b.n	8016326 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8015efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f00:	7858      	ldrb	r0, [r3, #1]
 8015f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f04:	330c      	adds	r3, #12
 8015f06:	461a      	mov	r2, r3
 8015f08:	2102      	movs	r1, #2
 8015f0a:	f7fe fa5f 	bl	80143cc <disk_ioctl>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d001      	beq.n	8015f18 <find_volume+0xe4>
 8015f14:	2301      	movs	r3, #1
 8015f16:	e206      	b.n	8016326 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8015f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f1a:	899b      	ldrh	r3, [r3, #12]
 8015f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015f20:	d80d      	bhi.n	8015f3e <find_volume+0x10a>
 8015f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f24:	899b      	ldrh	r3, [r3, #12]
 8015f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015f2a:	d308      	bcc.n	8015f3e <find_volume+0x10a>
 8015f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f2e:	899b      	ldrh	r3, [r3, #12]
 8015f30:	461a      	mov	r2, r3
 8015f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f34:	899b      	ldrh	r3, [r3, #12]
 8015f36:	3b01      	subs	r3, #1
 8015f38:	4013      	ands	r3, r2
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d001      	beq.n	8015f42 <find_volume+0x10e>
 8015f3e:	2301      	movs	r3, #1
 8015f40:	e1f1      	b.n	8016326 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8015f42:	2300      	movs	r3, #0
 8015f44:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8015f46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015f48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015f4a:	f7ff ff1d 	bl	8015d88 <check_fs>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8015f54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015f58:	2b02      	cmp	r3, #2
 8015f5a:	d14b      	bne.n	8015ff4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8015f60:	e01f      	b.n	8015fa2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8015f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f64:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f6a:	011b      	lsls	r3, r3, #4
 8015f6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8015f70:	4413      	add	r3, r2
 8015f72:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f76:	3304      	adds	r3, #4
 8015f78:	781b      	ldrb	r3, [r3, #0]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d006      	beq.n	8015f8c <find_volume+0x158>
 8015f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f80:	3308      	adds	r3, #8
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7fe fa58 	bl	8014438 <ld_dword>
 8015f88:	4602      	mov	r2, r0
 8015f8a:	e000      	b.n	8015f8e <find_volume+0x15a>
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f90:	009b      	lsls	r3, r3, #2
 8015f92:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8015f96:	440b      	add	r3, r1
 8015f98:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f9e:	3301      	adds	r3, #1
 8015fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8015fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fa4:	2b03      	cmp	r3, #3
 8015fa6:	d9dc      	bls.n	8015f62 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8015fa8:	2300      	movs	r3, #0
 8015faa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8015fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d002      	beq.n	8015fb8 <find_volume+0x184>
 8015fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fb4:	3b01      	subs	r3, #1
 8015fb6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fba:	009b      	lsls	r3, r3, #2
 8015fbc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015fc0:	4413      	add	r3, r2
 8015fc2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8015fc6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d005      	beq.n	8015fda <find_volume+0x1a6>
 8015fce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015fd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015fd2:	f7ff fed9 	bl	8015d88 <check_fs>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	e000      	b.n	8015fdc <find_volume+0x1a8>
 8015fda:	2303      	movs	r3, #3
 8015fdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015fe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015fe4:	2b01      	cmp	r3, #1
 8015fe6:	d905      	bls.n	8015ff4 <find_volume+0x1c0>
 8015fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fea:	3301      	adds	r3, #1
 8015fec:	643b      	str	r3, [r7, #64]	; 0x40
 8015fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ff0:	2b03      	cmp	r3, #3
 8015ff2:	d9e1      	bls.n	8015fb8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015ff4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015ff8:	2b04      	cmp	r3, #4
 8015ffa:	d101      	bne.n	8016000 <find_volume+0x1cc>
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	e192      	b.n	8016326 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016004:	2b01      	cmp	r3, #1
 8016006:	d901      	bls.n	801600c <find_volume+0x1d8>
 8016008:	230d      	movs	r3, #13
 801600a:	e18c      	b.n	8016326 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801600e:	3338      	adds	r3, #56	; 0x38
 8016010:	330b      	adds	r3, #11
 8016012:	4618      	mov	r0, r3
 8016014:	f7fe f9f8 	bl	8014408 <ld_word>
 8016018:	4603      	mov	r3, r0
 801601a:	461a      	mov	r2, r3
 801601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801601e:	899b      	ldrh	r3, [r3, #12]
 8016020:	429a      	cmp	r2, r3
 8016022:	d001      	beq.n	8016028 <find_volume+0x1f4>
 8016024:	230d      	movs	r3, #13
 8016026:	e17e      	b.n	8016326 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801602a:	3338      	adds	r3, #56	; 0x38
 801602c:	3316      	adds	r3, #22
 801602e:	4618      	mov	r0, r3
 8016030:	f7fe f9ea 	bl	8014408 <ld_word>
 8016034:	4603      	mov	r3, r0
 8016036:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801603a:	2b00      	cmp	r3, #0
 801603c:	d106      	bne.n	801604c <find_volume+0x218>
 801603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016040:	3338      	adds	r3, #56	; 0x38
 8016042:	3324      	adds	r3, #36	; 0x24
 8016044:	4618      	mov	r0, r3
 8016046:	f7fe f9f7 	bl	8014438 <ld_dword>
 801604a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801604e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016050:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016054:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8016058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801605a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801605c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801605e:	789b      	ldrb	r3, [r3, #2]
 8016060:	2b01      	cmp	r3, #1
 8016062:	d005      	beq.n	8016070 <find_volume+0x23c>
 8016064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016066:	789b      	ldrb	r3, [r3, #2]
 8016068:	2b02      	cmp	r3, #2
 801606a:	d001      	beq.n	8016070 <find_volume+0x23c>
 801606c:	230d      	movs	r3, #13
 801606e:	e15a      	b.n	8016326 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016072:	789b      	ldrb	r3, [r3, #2]
 8016074:	461a      	mov	r2, r3
 8016076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016078:	fb02 f303 	mul.w	r3, r2, r3
 801607c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016080:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016084:	b29a      	uxth	r2, r3
 8016086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016088:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801608c:	895b      	ldrh	r3, [r3, #10]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d008      	beq.n	80160a4 <find_volume+0x270>
 8016092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016094:	895b      	ldrh	r3, [r3, #10]
 8016096:	461a      	mov	r2, r3
 8016098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801609a:	895b      	ldrh	r3, [r3, #10]
 801609c:	3b01      	subs	r3, #1
 801609e:	4013      	ands	r3, r2
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d001      	beq.n	80160a8 <find_volume+0x274>
 80160a4:	230d      	movs	r3, #13
 80160a6:	e13e      	b.n	8016326 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80160a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160aa:	3338      	adds	r3, #56	; 0x38
 80160ac:	3311      	adds	r3, #17
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7fe f9aa 	bl	8014408 <ld_word>
 80160b4:	4603      	mov	r3, r0
 80160b6:	461a      	mov	r2, r3
 80160b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80160bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160be:	891b      	ldrh	r3, [r3, #8]
 80160c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80160c2:	8992      	ldrh	r2, [r2, #12]
 80160c4:	0952      	lsrs	r2, r2, #5
 80160c6:	b292      	uxth	r2, r2
 80160c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80160cc:	fb02 f201 	mul.w	r2, r2, r1
 80160d0:	1a9b      	subs	r3, r3, r2
 80160d2:	b29b      	uxth	r3, r3
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d001      	beq.n	80160dc <find_volume+0x2a8>
 80160d8:	230d      	movs	r3, #13
 80160da:	e124      	b.n	8016326 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80160dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160de:	3338      	adds	r3, #56	; 0x38
 80160e0:	3313      	adds	r3, #19
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7fe f990 	bl	8014408 <ld_word>
 80160e8:	4603      	mov	r3, r0
 80160ea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80160ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d106      	bne.n	8016100 <find_volume+0x2cc>
 80160f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160f4:	3338      	adds	r3, #56	; 0x38
 80160f6:	3320      	adds	r3, #32
 80160f8:	4618      	mov	r0, r3
 80160fa:	f7fe f99d 	bl	8014438 <ld_dword>
 80160fe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016102:	3338      	adds	r3, #56	; 0x38
 8016104:	330e      	adds	r3, #14
 8016106:	4618      	mov	r0, r3
 8016108:	f7fe f97e 	bl	8014408 <ld_word>
 801610c:	4603      	mov	r3, r0
 801610e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016110:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016112:	2b00      	cmp	r3, #0
 8016114:	d104      	bne.n	8016120 <find_volume+0x2ec>
 8016116:	230d      	movs	r3, #13
 8016118:	e105      	b.n	8016326 <find_volume+0x4f2>
 801611a:	bf00      	nop
 801611c:	20000204 	.word	0x20000204

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016120:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016124:	4413      	add	r3, r2
 8016126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016128:	8911      	ldrh	r1, [r2, #8]
 801612a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801612c:	8992      	ldrh	r2, [r2, #12]
 801612e:	0952      	lsrs	r2, r2, #5
 8016130:	b292      	uxth	r2, r2
 8016132:	fbb1 f2f2 	udiv	r2, r1, r2
 8016136:	b292      	uxth	r2, r2
 8016138:	4413      	add	r3, r2
 801613a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801613c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016140:	429a      	cmp	r2, r3
 8016142:	d201      	bcs.n	8016148 <find_volume+0x314>
 8016144:	230d      	movs	r3, #13
 8016146:	e0ee      	b.n	8016326 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016148:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801614c:	1ad3      	subs	r3, r2, r3
 801614e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016150:	8952      	ldrh	r2, [r2, #10]
 8016152:	fbb3 f3f2 	udiv	r3, r3, r2
 8016156:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801615a:	2b00      	cmp	r3, #0
 801615c:	d101      	bne.n	8016162 <find_volume+0x32e>
 801615e:	230d      	movs	r3, #13
 8016160:	e0e1      	b.n	8016326 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8016162:	2303      	movs	r3, #3
 8016164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801616a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801616e:	4293      	cmp	r3, r2
 8016170:	d802      	bhi.n	8016178 <find_volume+0x344>
 8016172:	2302      	movs	r3, #2
 8016174:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801617a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801617e:	4293      	cmp	r3, r2
 8016180:	d802      	bhi.n	8016188 <find_volume+0x354>
 8016182:	2301      	movs	r3, #1
 8016184:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801618a:	1c9a      	adds	r2, r3, #2
 801618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801618e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8016190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016192:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016194:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016196:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801619a:	441a      	add	r2, r3
 801619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801619e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80161a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80161a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a4:	441a      	add	r2, r3
 80161a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161a8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80161aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80161ae:	2b03      	cmp	r3, #3
 80161b0:	d11e      	bne.n	80161f0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80161b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161b4:	3338      	adds	r3, #56	; 0x38
 80161b6:	332a      	adds	r3, #42	; 0x2a
 80161b8:	4618      	mov	r0, r3
 80161ba:	f7fe f925 	bl	8014408 <ld_word>
 80161be:	4603      	mov	r3, r0
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d001      	beq.n	80161c8 <find_volume+0x394>
 80161c4:	230d      	movs	r3, #13
 80161c6:	e0ae      	b.n	8016326 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80161c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ca:	891b      	ldrh	r3, [r3, #8]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d001      	beq.n	80161d4 <find_volume+0x3a0>
 80161d0:	230d      	movs	r3, #13
 80161d2:	e0a8      	b.n	8016326 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80161d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161d6:	3338      	adds	r3, #56	; 0x38
 80161d8:	332c      	adds	r3, #44	; 0x2c
 80161da:	4618      	mov	r0, r3
 80161dc:	f7fe f92c 	bl	8014438 <ld_dword>
 80161e0:	4602      	mov	r2, r0
 80161e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161e4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80161e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161e8:	69db      	ldr	r3, [r3, #28]
 80161ea:	009b      	lsls	r3, r3, #2
 80161ec:	647b      	str	r3, [r7, #68]	; 0x44
 80161ee:	e01f      	b.n	8016230 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80161f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161f2:	891b      	ldrh	r3, [r3, #8]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d101      	bne.n	80161fc <find_volume+0x3c8>
 80161f8:	230d      	movs	r3, #13
 80161fa:	e094      	b.n	8016326 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80161fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016202:	441a      	add	r2, r3
 8016204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016206:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801620c:	2b02      	cmp	r3, #2
 801620e:	d103      	bne.n	8016218 <find_volume+0x3e4>
 8016210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016212:	69db      	ldr	r3, [r3, #28]
 8016214:	005b      	lsls	r3, r3, #1
 8016216:	e00a      	b.n	801622e <find_volume+0x3fa>
 8016218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801621a:	69da      	ldr	r2, [r3, #28]
 801621c:	4613      	mov	r3, r2
 801621e:	005b      	lsls	r3, r3, #1
 8016220:	4413      	add	r3, r2
 8016222:	085a      	lsrs	r2, r3, #1
 8016224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016226:	69db      	ldr	r3, [r3, #28]
 8016228:	f003 0301 	and.w	r3, r3, #1
 801622c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801622e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016232:	6a1a      	ldr	r2, [r3, #32]
 8016234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016236:	899b      	ldrh	r3, [r3, #12]
 8016238:	4619      	mov	r1, r3
 801623a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801623c:	440b      	add	r3, r1
 801623e:	3b01      	subs	r3, #1
 8016240:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016242:	8989      	ldrh	r1, [r1, #12]
 8016244:	fbb3 f3f1 	udiv	r3, r3, r1
 8016248:	429a      	cmp	r2, r3
 801624a:	d201      	bcs.n	8016250 <find_volume+0x41c>
 801624c:	230d      	movs	r3, #13
 801624e:	e06a      	b.n	8016326 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016252:	f04f 32ff 	mov.w	r2, #4294967295
 8016256:	619a      	str	r2, [r3, #24]
 8016258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801625a:	699a      	ldr	r2, [r3, #24]
 801625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801625e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8016260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016262:	2280      	movs	r2, #128	; 0x80
 8016264:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016266:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801626a:	2b03      	cmp	r3, #3
 801626c:	d149      	bne.n	8016302 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016270:	3338      	adds	r3, #56	; 0x38
 8016272:	3330      	adds	r3, #48	; 0x30
 8016274:	4618      	mov	r0, r3
 8016276:	f7fe f8c7 	bl	8014408 <ld_word>
 801627a:	4603      	mov	r3, r0
 801627c:	2b01      	cmp	r3, #1
 801627e:	d140      	bne.n	8016302 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016282:	3301      	adds	r3, #1
 8016284:	4619      	mov	r1, r3
 8016286:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016288:	f7fe fa02 	bl	8014690 <move_window>
 801628c:	4603      	mov	r3, r0
 801628e:	2b00      	cmp	r3, #0
 8016290:	d137      	bne.n	8016302 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8016292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016294:	2200      	movs	r2, #0
 8016296:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801629a:	3338      	adds	r3, #56	; 0x38
 801629c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80162a0:	4618      	mov	r0, r3
 80162a2:	f7fe f8b1 	bl	8014408 <ld_word>
 80162a6:	4603      	mov	r3, r0
 80162a8:	461a      	mov	r2, r3
 80162aa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80162ae:	429a      	cmp	r2, r3
 80162b0:	d127      	bne.n	8016302 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80162b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162b4:	3338      	adds	r3, #56	; 0x38
 80162b6:	4618      	mov	r0, r3
 80162b8:	f7fe f8be 	bl	8014438 <ld_dword>
 80162bc:	4603      	mov	r3, r0
 80162be:	4a1c      	ldr	r2, [pc, #112]	; (8016330 <find_volume+0x4fc>)
 80162c0:	4293      	cmp	r3, r2
 80162c2:	d11e      	bne.n	8016302 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80162c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162c6:	3338      	adds	r3, #56	; 0x38
 80162c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7fe f8b3 	bl	8014438 <ld_dword>
 80162d2:	4603      	mov	r3, r0
 80162d4:	4a17      	ldr	r2, [pc, #92]	; (8016334 <find_volume+0x500>)
 80162d6:	4293      	cmp	r3, r2
 80162d8:	d113      	bne.n	8016302 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80162da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162dc:	3338      	adds	r3, #56	; 0x38
 80162de:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80162e2:	4618      	mov	r0, r3
 80162e4:	f7fe f8a8 	bl	8014438 <ld_dword>
 80162e8:	4602      	mov	r2, r0
 80162ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ec:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80162ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f0:	3338      	adds	r3, #56	; 0x38
 80162f2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80162f6:	4618      	mov	r0, r3
 80162f8:	f7fe f89e 	bl	8014438 <ld_dword>
 80162fc:	4602      	mov	r2, r0
 80162fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016300:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016304:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016308:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801630a:	4b0b      	ldr	r3, [pc, #44]	; (8016338 <find_volume+0x504>)
 801630c:	881b      	ldrh	r3, [r3, #0]
 801630e:	3301      	adds	r3, #1
 8016310:	b29a      	uxth	r2, r3
 8016312:	4b09      	ldr	r3, [pc, #36]	; (8016338 <find_volume+0x504>)
 8016314:	801a      	strh	r2, [r3, #0]
 8016316:	4b08      	ldr	r3, [pc, #32]	; (8016338 <find_volume+0x504>)
 8016318:	881a      	ldrh	r2, [r3, #0]
 801631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801631c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016320:	4a06      	ldr	r2, [pc, #24]	; (801633c <find_volume+0x508>)
 8016322:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8016324:	2300      	movs	r3, #0
}
 8016326:	4618      	mov	r0, r3
 8016328:	3758      	adds	r7, #88	; 0x58
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}
 801632e:	bf00      	nop
 8016330:	41615252 	.word	0x41615252
 8016334:	61417272 	.word	0x61417272
 8016338:	20000208 	.word	0x20000208
 801633c:	2000020c 	.word	0x2000020c

08016340 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b084      	sub	sp, #16
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
 8016348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801634a:	2309      	movs	r3, #9
 801634c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d01c      	beq.n	801638e <validate+0x4e>
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d018      	beq.n	801638e <validate+0x4e>
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	781b      	ldrb	r3, [r3, #0]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d013      	beq.n	801638e <validate+0x4e>
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	889a      	ldrh	r2, [r3, #4]
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	88db      	ldrh	r3, [r3, #6]
 8016370:	429a      	cmp	r2, r3
 8016372:	d10c      	bne.n	801638e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	785b      	ldrb	r3, [r3, #1]
 801637a:	4618      	mov	r0, r3
 801637c:	f7fd ffa6 	bl	80142cc <disk_status>
 8016380:	4603      	mov	r3, r0
 8016382:	f003 0301 	and.w	r3, r3, #1
 8016386:	2b00      	cmp	r3, #0
 8016388:	d101      	bne.n	801638e <validate+0x4e>
			res = FR_OK;
 801638a:	2300      	movs	r3, #0
 801638c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801638e:	7bfb      	ldrb	r3, [r7, #15]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d102      	bne.n	801639a <validate+0x5a>
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	e000      	b.n	801639c <validate+0x5c>
 801639a:	2300      	movs	r3, #0
 801639c:	683a      	ldr	r2, [r7, #0]
 801639e:	6013      	str	r3, [r2, #0]
	return res;
 80163a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80163a2:	4618      	mov	r0, r3
 80163a4:	3710      	adds	r7, #16
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd80      	pop	{r7, pc}
	...

080163ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b088      	sub	sp, #32
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	60b9      	str	r1, [r7, #8]
 80163b6:	4613      	mov	r3, r2
 80163b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80163be:	f107 0310 	add.w	r3, r7, #16
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7ff fc9c 	bl	8015d00 <get_ldnumber>
 80163c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80163ca:	69fb      	ldr	r3, [r7, #28]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	da01      	bge.n	80163d4 <f_mount+0x28>
 80163d0:	230b      	movs	r3, #11
 80163d2:	e028      	b.n	8016426 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80163d4:	4a16      	ldr	r2, [pc, #88]	; (8016430 <f_mount+0x84>)
 80163d6:	69fb      	ldr	r3, [r7, #28]
 80163d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80163dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80163de:	69bb      	ldr	r3, [r7, #24]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d002      	beq.n	80163ea <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80163e4:	69bb      	ldr	r3, [r7, #24]
 80163e6:	2200      	movs	r2, #0
 80163e8:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d002      	beq.n	80163f6 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	2200      	movs	r2, #0
 80163f4:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80163f6:	68fa      	ldr	r2, [r7, #12]
 80163f8:	490d      	ldr	r1, [pc, #52]	; (8016430 <f_mount+0x84>)
 80163fa:	69fb      	ldr	r3, [r7, #28]
 80163fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d002      	beq.n	801640c <f_mount+0x60>
 8016406:	79fb      	ldrb	r3, [r7, #7]
 8016408:	2b01      	cmp	r3, #1
 801640a:	d001      	beq.n	8016410 <f_mount+0x64>
 801640c:	2300      	movs	r3, #0
 801640e:	e00a      	b.n	8016426 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016410:	f107 010c 	add.w	r1, r7, #12
 8016414:	f107 0308 	add.w	r3, r7, #8
 8016418:	2200      	movs	r2, #0
 801641a:	4618      	mov	r0, r3
 801641c:	f7ff fd0a 	bl	8015e34 <find_volume>
 8016420:	4603      	mov	r3, r0
 8016422:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016424:	7dfb      	ldrb	r3, [r7, #23]
}
 8016426:	4618      	mov	r0, r3
 8016428:	3720      	adds	r7, #32
 801642a:	46bd      	mov	sp, r7
 801642c:	bd80      	pop	{r7, pc}
 801642e:	bf00      	nop
 8016430:	20000204 	.word	0x20000204

08016434 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b098      	sub	sp, #96	; 0x60
 8016438:	af00      	add	r7, sp, #0
 801643a:	60f8      	str	r0, [r7, #12]
 801643c:	60b9      	str	r1, [r7, #8]
 801643e:	4613      	mov	r3, r2
 8016440:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d101      	bne.n	801644c <f_open+0x18>
 8016448:	2309      	movs	r3, #9
 801644a:	e188      	b.n	801675e <f_open+0x32a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801644c:	79fb      	ldrb	r3, [r7, #7]
 801644e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016452:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016454:	79fa      	ldrb	r2, [r7, #7]
 8016456:	f107 0110 	add.w	r1, r7, #16
 801645a:	f107 0308 	add.w	r3, r7, #8
 801645e:	4618      	mov	r0, r3
 8016460:	f7ff fce8 	bl	8015e34 <find_volume>
 8016464:	4603      	mov	r3, r0
 8016466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801646a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801646e:	2b00      	cmp	r3, #0
 8016470:	f040 816c 	bne.w	801674c <f_open+0x318>
		dj.obj.fs = fs;
 8016474:	693b      	ldr	r3, [r7, #16]
 8016476:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016478:	68ba      	ldr	r2, [r7, #8]
 801647a:	f107 0314 	add.w	r3, r7, #20
 801647e:	4611      	mov	r1, r2
 8016480:	4618      	mov	r0, r3
 8016482:	f7ff fbc7 	bl	8015c14 <follow_path>
 8016486:	4603      	mov	r3, r0
 8016488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801648c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016490:	2b00      	cmp	r3, #0
 8016492:	d107      	bne.n	80164a4 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016494:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016498:	b25b      	sxtb	r3, r3
 801649a:	2b00      	cmp	r3, #0
 801649c:	da02      	bge.n	80164a4 <f_open+0x70>
				res = FR_INVALID_NAME;
 801649e:	2306      	movs	r3, #6
 80164a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80164a4:	79fb      	ldrb	r3, [r7, #7]
 80164a6:	f003 031c 	and.w	r3, r3, #28
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d078      	beq.n	80165a0 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 80164ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d010      	beq.n	80164d8 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80164b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80164ba:	2b04      	cmp	r3, #4
 80164bc:	d107      	bne.n	80164ce <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80164be:	f107 0314 	add.w	r3, r7, #20
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7ff f8f6 	bl	80156b4 <dir_register>
 80164c8:	4603      	mov	r3, r0
 80164ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80164ce:	79fb      	ldrb	r3, [r7, #7]
 80164d0:	f043 0308 	orr.w	r3, r3, #8
 80164d4:	71fb      	strb	r3, [r7, #7]
 80164d6:	e010      	b.n	80164fa <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80164d8:	7ebb      	ldrb	r3, [r7, #26]
 80164da:	f003 0311 	and.w	r3, r3, #17
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d003      	beq.n	80164ea <f_open+0xb6>
					res = FR_DENIED;
 80164e2:	2307      	movs	r3, #7
 80164e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80164e8:	e007      	b.n	80164fa <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80164ea:	79fb      	ldrb	r3, [r7, #7]
 80164ec:	f003 0304 	and.w	r3, r3, #4
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d002      	beq.n	80164fa <f_open+0xc6>
 80164f4:	2308      	movs	r3, #8
 80164f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80164fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d168      	bne.n	80165d4 <f_open+0x1a0>
 8016502:	79fb      	ldrb	r3, [r7, #7]
 8016504:	f003 0308 	and.w	r3, r3, #8
 8016508:	2b00      	cmp	r3, #0
 801650a:	d063      	beq.n	80165d4 <f_open+0x1a0>
				dw = GET_FATTIME();
 801650c:	f7fa fd36 	bl	8010f7c <get_fattime>
 8016510:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016514:	330e      	adds	r3, #14
 8016516:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016518:	4618      	mov	r0, r3
 801651a:	f7fd ffcb 	bl	80144b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016520:	3316      	adds	r3, #22
 8016522:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016524:	4618      	mov	r0, r3
 8016526:	f7fd ffc5 	bl	80144b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801652c:	330b      	adds	r3, #11
 801652e:	2220      	movs	r2, #32
 8016530:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016532:	693b      	ldr	r3, [r7, #16]
 8016534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016536:	4611      	mov	r1, r2
 8016538:	4618      	mov	r0, r3
 801653a:	f7fe fe31 	bl	80151a0 <ld_clust>
 801653e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016540:	693b      	ldr	r3, [r7, #16]
 8016542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016544:	2200      	movs	r2, #0
 8016546:	4618      	mov	r0, r3
 8016548:	f7fe fe49 	bl	80151de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801654e:	331c      	adds	r3, #28
 8016550:	2100      	movs	r1, #0
 8016552:	4618      	mov	r0, r3
 8016554:	f7fd ffae 	bl	80144b4 <st_dword>
					fs->wflag = 1;
 8016558:	693b      	ldr	r3, [r7, #16]
 801655a:	2201      	movs	r2, #1
 801655c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801655e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016560:	2b00      	cmp	r3, #0
 8016562:	d037      	beq.n	80165d4 <f_open+0x1a0>
						dw = fs->winsect;
 8016564:	693b      	ldr	r3, [r7, #16]
 8016566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016568:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801656a:	f107 0314 	add.w	r3, r7, #20
 801656e:	2200      	movs	r2, #0
 8016570:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016572:	4618      	mov	r0, r3
 8016574:	f7fe fb39 	bl	8014bea <remove_chain>
 8016578:	4603      	mov	r3, r0
 801657a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801657e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016582:	2b00      	cmp	r3, #0
 8016584:	d126      	bne.n	80165d4 <f_open+0x1a0>
							res = move_window(fs, dw);
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801658a:	4618      	mov	r0, r3
 801658c:	f7fe f880 	bl	8014690 <move_window>
 8016590:	4603      	mov	r3, r0
 8016592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016596:	693b      	ldr	r3, [r7, #16]
 8016598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801659a:	3a01      	subs	r2, #1
 801659c:	615a      	str	r2, [r3, #20]
 801659e:	e019      	b.n	80165d4 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80165a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d115      	bne.n	80165d4 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80165a8:	7ebb      	ldrb	r3, [r7, #26]
 80165aa:	f003 0310 	and.w	r3, r3, #16
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d003      	beq.n	80165ba <f_open+0x186>
					res = FR_NO_FILE;
 80165b2:	2304      	movs	r3, #4
 80165b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80165b8:	e00c      	b.n	80165d4 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80165ba:	79fb      	ldrb	r3, [r7, #7]
 80165bc:	f003 0302 	and.w	r3, r3, #2
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d007      	beq.n	80165d4 <f_open+0x1a0>
 80165c4:	7ebb      	ldrb	r3, [r7, #26]
 80165c6:	f003 0301 	and.w	r3, r3, #1
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d002      	beq.n	80165d4 <f_open+0x1a0>
						res = FR_DENIED;
 80165ce:	2307      	movs	r3, #7
 80165d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80165d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d10f      	bne.n	80165fc <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80165dc:	79fb      	ldrb	r3, [r7, #7]
 80165de:	f003 0308 	and.w	r3, r3, #8
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d003      	beq.n	80165ee <f_open+0x1ba>
				mode |= FA_MODIFIED;
 80165e6:	79fb      	ldrb	r3, [r7, #7]
 80165e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80165ee:	693b      	ldr	r3, [r7, #16]
 80165f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80165f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80165fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016600:	2b00      	cmp	r3, #0
 8016602:	f040 80a3 	bne.w	801674c <f_open+0x318>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016606:	693b      	ldr	r3, [r7, #16]
 8016608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801660a:	4611      	mov	r1, r2
 801660c:	4618      	mov	r0, r3
 801660e:	f7fe fdc7 	bl	80151a0 <ld_clust>
 8016612:	4602      	mov	r2, r0
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801661a:	331c      	adds	r3, #28
 801661c:	4618      	mov	r0, r3
 801661e:	f7fd ff0b 	bl	8014438 <ld_dword>
 8016622:	4602      	mov	r2, r0
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2200      	movs	r2, #0
 801662c:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801662e:	693a      	ldr	r2, [r7, #16]
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016634:	693b      	ldr	r3, [r7, #16]
 8016636:	88da      	ldrh	r2, [r3, #6]
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	79fa      	ldrb	r2, [r7, #7]
 8016640:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	2200      	movs	r2, #0
 8016646:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	2200      	movs	r2, #0
 801664c:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	2200      	movs	r2, #0
 8016652:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	332c      	adds	r3, #44	; 0x2c
 8016658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801665c:	2100      	movs	r1, #0
 801665e:	4618      	mov	r0, r3
 8016660:	f7fd ff75 	bl	801454e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016664:	79fb      	ldrb	r3, [r7, #7]
 8016666:	f003 0320 	and.w	r3, r3, #32
 801666a:	2b00      	cmp	r3, #0
 801666c:	d06e      	beq.n	801674c <f_open+0x318>
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	68db      	ldr	r3, [r3, #12]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d06a      	beq.n	801674c <f_open+0x318>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	68da      	ldr	r2, [r3, #12]
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801667e:	693b      	ldr	r3, [r7, #16]
 8016680:	895b      	ldrh	r3, [r3, #10]
 8016682:	461a      	mov	r2, r3
 8016684:	693b      	ldr	r3, [r7, #16]
 8016686:	899b      	ldrh	r3, [r3, #12]
 8016688:	fb03 f302 	mul.w	r3, r3, r2
 801668c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	689b      	ldr	r3, [r3, #8]
 8016692:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	68db      	ldr	r3, [r3, #12]
 8016698:	657b      	str	r3, [r7, #84]	; 0x54
 801669a:	e016      	b.n	80166ca <f_open+0x296>
					clst = get_fat(&fp->obj, clst);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7fe f8b2 	bl	801480a <get_fat>
 80166a6:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80166a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80166aa:	2b01      	cmp	r3, #1
 80166ac:	d802      	bhi.n	80166b4 <f_open+0x280>
 80166ae:	2302      	movs	r3, #2
 80166b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80166b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80166b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166ba:	d102      	bne.n	80166c2 <f_open+0x28e>
 80166bc:	2301      	movs	r3, #1
 80166be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80166c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80166c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166c6:	1ad3      	subs	r3, r2, r3
 80166c8:	657b      	str	r3, [r7, #84]	; 0x54
 80166ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d103      	bne.n	80166da <f_open+0x2a6>
 80166d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80166d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d8e0      	bhi.n	801669c <f_open+0x268>
				}
				fp->clust = clst;
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80166de:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80166e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d131      	bne.n	801674c <f_open+0x318>
 80166e8:	693b      	ldr	r3, [r7, #16]
 80166ea:	899b      	ldrh	r3, [r3, #12]
 80166ec:	461a      	mov	r2, r3
 80166ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80166f4:	fb02 f201 	mul.w	r2, r2, r1
 80166f8:	1a9b      	subs	r3, r3, r2
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d026      	beq.n	801674c <f_open+0x318>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80166fe:	693b      	ldr	r3, [r7, #16]
 8016700:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016702:	4618      	mov	r0, r3
 8016704:	f7fe f862 	bl	80147cc <clust2sect>
 8016708:	6478      	str	r0, [r7, #68]	; 0x44
 801670a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801670c:	2b00      	cmp	r3, #0
 801670e:	d103      	bne.n	8016718 <f_open+0x2e4>
						res = FR_INT_ERR;
 8016710:	2302      	movs	r3, #2
 8016712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016716:	e019      	b.n	801674c <f_open+0x318>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016718:	693b      	ldr	r3, [r7, #16]
 801671a:	899b      	ldrh	r3, [r3, #12]
 801671c:	461a      	mov	r2, r3
 801671e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016720:	fbb3 f2f2 	udiv	r2, r3, r2
 8016724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016726:	441a      	add	r2, r3
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801672c:	693b      	ldr	r3, [r7, #16]
 801672e:	7858      	ldrb	r0, [r3, #1]
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	69da      	ldr	r2, [r3, #28]
 801673a:	2301      	movs	r3, #1
 801673c:	f7fd fe06 	bl	801434c <disk_read>
 8016740:	4603      	mov	r3, r0
 8016742:	2b00      	cmp	r3, #0
 8016744:	d002      	beq.n	801674c <f_open+0x318>
 8016746:	2301      	movs	r3, #1
 8016748:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801674c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016750:	2b00      	cmp	r3, #0
 8016752:	d002      	beq.n	801675a <f_open+0x326>
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	2200      	movs	r2, #0
 8016758:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801675a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801675e:	4618      	mov	r0, r3
 8016760:	3760      	adds	r7, #96	; 0x60
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}

08016766 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016766:	b580      	push	{r7, lr}
 8016768:	b08c      	sub	sp, #48	; 0x30
 801676a:	af00      	add	r7, sp, #0
 801676c:	60f8      	str	r0, [r7, #12]
 801676e:	60b9      	str	r1, [r7, #8]
 8016770:	607a      	str	r2, [r7, #4]
 8016772:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016774:	68bb      	ldr	r3, [r7, #8]
 8016776:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016778:	683b      	ldr	r3, [r7, #0]
 801677a:	2200      	movs	r2, #0
 801677c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	f107 0210 	add.w	r2, r7, #16
 8016784:	4611      	mov	r1, r2
 8016786:	4618      	mov	r0, r3
 8016788:	f7ff fdda 	bl	8016340 <validate>
 801678c:	4603      	mov	r3, r0
 801678e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016796:	2b00      	cmp	r3, #0
 8016798:	d107      	bne.n	80167aa <f_write+0x44>
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	7c5b      	ldrb	r3, [r3, #17]
 801679e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80167a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d002      	beq.n	80167b0 <f_write+0x4a>
 80167aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80167ae:	e16a      	b.n	8016a86 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	7c1b      	ldrb	r3, [r3, #16]
 80167b4:	f003 0302 	and.w	r3, r3, #2
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d101      	bne.n	80167c0 <f_write+0x5a>
 80167bc:	2307      	movs	r3, #7
 80167be:	e162      	b.n	8016a86 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	695a      	ldr	r2, [r3, #20]
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	441a      	add	r2, r3
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	695b      	ldr	r3, [r3, #20]
 80167cc:	429a      	cmp	r2, r3
 80167ce:	f080 814c 	bcs.w	8016a6a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	695b      	ldr	r3, [r3, #20]
 80167d6:	43db      	mvns	r3, r3
 80167d8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80167da:	e146      	b.n	8016a6a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	695b      	ldr	r3, [r3, #20]
 80167e0:	693a      	ldr	r2, [r7, #16]
 80167e2:	8992      	ldrh	r2, [r2, #12]
 80167e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80167e8:	fb02 f201 	mul.w	r2, r2, r1
 80167ec:	1a9b      	subs	r3, r3, r2
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	f040 80f1 	bne.w	80169d6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	695b      	ldr	r3, [r3, #20]
 80167f8:	693a      	ldr	r2, [r7, #16]
 80167fa:	8992      	ldrh	r2, [r2, #12]
 80167fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8016800:	693a      	ldr	r2, [r7, #16]
 8016802:	8952      	ldrh	r2, [r2, #10]
 8016804:	3a01      	subs	r2, #1
 8016806:	4013      	ands	r3, r2
 8016808:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801680a:	69bb      	ldr	r3, [r7, #24]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d143      	bne.n	8016898 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	695b      	ldr	r3, [r3, #20]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d10c      	bne.n	8016832 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	689b      	ldr	r3, [r3, #8]
 801681c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016820:	2b00      	cmp	r3, #0
 8016822:	d11a      	bne.n	801685a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	2100      	movs	r1, #0
 8016828:	4618      	mov	r0, r3
 801682a:	f7fe fa43 	bl	8014cb4 <create_chain>
 801682e:	62b8      	str	r0, [r7, #40]	; 0x28
 8016830:	e013      	b.n	801685a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016836:	2b00      	cmp	r3, #0
 8016838:	d007      	beq.n	801684a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	695b      	ldr	r3, [r3, #20]
 801683e:	4619      	mov	r1, r3
 8016840:	68f8      	ldr	r0, [r7, #12]
 8016842:	f7fe facf 	bl	8014de4 <clmt_clust>
 8016846:	62b8      	str	r0, [r7, #40]	; 0x28
 8016848:	e007      	b.n	801685a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801684a:	68fa      	ldr	r2, [r7, #12]
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	699b      	ldr	r3, [r3, #24]
 8016850:	4619      	mov	r1, r3
 8016852:	4610      	mov	r0, r2
 8016854:	f7fe fa2e 	bl	8014cb4 <create_chain>
 8016858:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801685c:	2b00      	cmp	r3, #0
 801685e:	f000 8109 	beq.w	8016a74 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016864:	2b01      	cmp	r3, #1
 8016866:	d104      	bne.n	8016872 <f_write+0x10c>
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	2202      	movs	r2, #2
 801686c:	745a      	strb	r2, [r3, #17]
 801686e:	2302      	movs	r3, #2
 8016870:	e109      	b.n	8016a86 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016878:	d104      	bne.n	8016884 <f_write+0x11e>
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	2201      	movs	r2, #1
 801687e:	745a      	strb	r2, [r3, #17]
 8016880:	2301      	movs	r3, #1
 8016882:	e100      	b.n	8016a86 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016888:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	689b      	ldr	r3, [r3, #8]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d102      	bne.n	8016898 <f_write+0x132>
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016896:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	7c1b      	ldrb	r3, [r3, #16]
 801689c:	b25b      	sxtb	r3, r3
 801689e:	2b00      	cmp	r3, #0
 80168a0:	da18      	bge.n	80168d4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80168a2:	693b      	ldr	r3, [r7, #16]
 80168a4:	7858      	ldrb	r0, [r3, #1]
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	69da      	ldr	r2, [r3, #28]
 80168b0:	2301      	movs	r3, #1
 80168b2:	f7fd fd6b 	bl	801438c <disk_write>
 80168b6:	4603      	mov	r3, r0
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d004      	beq.n	80168c6 <f_write+0x160>
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	2201      	movs	r2, #1
 80168c0:	745a      	strb	r2, [r3, #17]
 80168c2:	2301      	movs	r3, #1
 80168c4:	e0df      	b.n	8016a86 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	7c1b      	ldrb	r3, [r3, #16]
 80168ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168ce:	b2da      	uxtb	r2, r3
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80168d4:	693a      	ldr	r2, [r7, #16]
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	699b      	ldr	r3, [r3, #24]
 80168da:	4619      	mov	r1, r3
 80168dc:	4610      	mov	r0, r2
 80168de:	f7fd ff75 	bl	80147cc <clust2sect>
 80168e2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80168e4:	697b      	ldr	r3, [r7, #20]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d104      	bne.n	80168f4 <f_write+0x18e>
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	2202      	movs	r2, #2
 80168ee:	745a      	strb	r2, [r3, #17]
 80168f0:	2302      	movs	r3, #2
 80168f2:	e0c8      	b.n	8016a86 <f_write+0x320>
			sect += csect;
 80168f4:	697a      	ldr	r2, [r7, #20]
 80168f6:	69bb      	ldr	r3, [r7, #24]
 80168f8:	4413      	add	r3, r2
 80168fa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80168fc:	693b      	ldr	r3, [r7, #16]
 80168fe:	899b      	ldrh	r3, [r3, #12]
 8016900:	461a      	mov	r2, r3
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	fbb3 f3f2 	udiv	r3, r3, r2
 8016908:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801690a:	6a3b      	ldr	r3, [r7, #32]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d043      	beq.n	8016998 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016910:	69ba      	ldr	r2, [r7, #24]
 8016912:	6a3b      	ldr	r3, [r7, #32]
 8016914:	4413      	add	r3, r2
 8016916:	693a      	ldr	r2, [r7, #16]
 8016918:	8952      	ldrh	r2, [r2, #10]
 801691a:	4293      	cmp	r3, r2
 801691c:	d905      	bls.n	801692a <f_write+0x1c4>
					cc = fs->csize - csect;
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	895b      	ldrh	r3, [r3, #10]
 8016922:	461a      	mov	r2, r3
 8016924:	69bb      	ldr	r3, [r7, #24]
 8016926:	1ad3      	subs	r3, r2, r3
 8016928:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801692a:	693b      	ldr	r3, [r7, #16]
 801692c:	7858      	ldrb	r0, [r3, #1]
 801692e:	6a3b      	ldr	r3, [r7, #32]
 8016930:	697a      	ldr	r2, [r7, #20]
 8016932:	69f9      	ldr	r1, [r7, #28]
 8016934:	f7fd fd2a 	bl	801438c <disk_write>
 8016938:	4603      	mov	r3, r0
 801693a:	2b00      	cmp	r3, #0
 801693c:	d004      	beq.n	8016948 <f_write+0x1e2>
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	2201      	movs	r2, #1
 8016942:	745a      	strb	r2, [r3, #17]
 8016944:	2301      	movs	r3, #1
 8016946:	e09e      	b.n	8016a86 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	69da      	ldr	r2, [r3, #28]
 801694c:	697b      	ldr	r3, [r7, #20]
 801694e:	1ad3      	subs	r3, r2, r3
 8016950:	6a3a      	ldr	r2, [r7, #32]
 8016952:	429a      	cmp	r2, r3
 8016954:	d918      	bls.n	8016988 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	69da      	ldr	r2, [r3, #28]
 8016960:	697b      	ldr	r3, [r7, #20]
 8016962:	1ad3      	subs	r3, r2, r3
 8016964:	693a      	ldr	r2, [r7, #16]
 8016966:	8992      	ldrh	r2, [r2, #12]
 8016968:	fb02 f303 	mul.w	r3, r2, r3
 801696c:	69fa      	ldr	r2, [r7, #28]
 801696e:	18d1      	adds	r1, r2, r3
 8016970:	693b      	ldr	r3, [r7, #16]
 8016972:	899b      	ldrh	r3, [r3, #12]
 8016974:	461a      	mov	r2, r3
 8016976:	f7fd fdc9 	bl	801450c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	7c1b      	ldrb	r3, [r3, #16]
 801697e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016982:	b2da      	uxtb	r2, r3
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016988:	693b      	ldr	r3, [r7, #16]
 801698a:	899b      	ldrh	r3, [r3, #12]
 801698c:	461a      	mov	r2, r3
 801698e:	6a3b      	ldr	r3, [r7, #32]
 8016990:	fb02 f303 	mul.w	r3, r2, r3
 8016994:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8016996:	e04b      	b.n	8016a30 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	69db      	ldr	r3, [r3, #28]
 801699c:	697a      	ldr	r2, [r7, #20]
 801699e:	429a      	cmp	r2, r3
 80169a0:	d016      	beq.n	80169d0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	695a      	ldr	r2, [r3, #20]
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80169aa:	429a      	cmp	r2, r3
 80169ac:	d210      	bcs.n	80169d0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80169ae:	693b      	ldr	r3, [r7, #16]
 80169b0:	7858      	ldrb	r0, [r3, #1]
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80169b8:	2301      	movs	r3, #1
 80169ba:	697a      	ldr	r2, [r7, #20]
 80169bc:	f7fd fcc6 	bl	801434c <disk_read>
 80169c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d004      	beq.n	80169d0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	2201      	movs	r2, #1
 80169ca:	745a      	strb	r2, [r3, #17]
 80169cc:	2301      	movs	r3, #1
 80169ce:	e05a      	b.n	8016a86 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	697a      	ldr	r2, [r7, #20]
 80169d4:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80169d6:	693b      	ldr	r3, [r7, #16]
 80169d8:	899b      	ldrh	r3, [r3, #12]
 80169da:	4618      	mov	r0, r3
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	695b      	ldr	r3, [r3, #20]
 80169e0:	693a      	ldr	r2, [r7, #16]
 80169e2:	8992      	ldrh	r2, [r2, #12]
 80169e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80169e8:	fb02 f201 	mul.w	r2, r2, r1
 80169ec:	1a9b      	subs	r3, r3, r2
 80169ee:	1ac3      	subs	r3, r0, r3
 80169f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80169f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d901      	bls.n	80169fe <f_write+0x298>
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	695b      	ldr	r3, [r3, #20]
 8016a08:	693a      	ldr	r2, [r7, #16]
 8016a0a:	8992      	ldrh	r2, [r2, #12]
 8016a0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8016a10:	fb02 f200 	mul.w	r2, r2, r0
 8016a14:	1a9b      	subs	r3, r3, r2
 8016a16:	440b      	add	r3, r1
 8016a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a1a:	69f9      	ldr	r1, [r7, #28]
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f7fd fd75 	bl	801450c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	7c1b      	ldrb	r3, [r3, #16]
 8016a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016a2a:	b2da      	uxtb	r2, r3
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016a30:	69fa      	ldr	r2, [r7, #28]
 8016a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a34:	4413      	add	r3, r2
 8016a36:	61fb      	str	r3, [r7, #28]
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	695a      	ldr	r2, [r3, #20]
 8016a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a3e:	441a      	add	r2, r3
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	615a      	str	r2, [r3, #20]
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	68da      	ldr	r2, [r3, #12]
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	695b      	ldr	r3, [r3, #20]
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	bf38      	it	cc
 8016a50:	461a      	movcc	r2, r3
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	60da      	str	r2, [r3, #12]
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	681a      	ldr	r2, [r3, #0]
 8016a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a5c:	441a      	add	r2, r3
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	601a      	str	r2, [r3, #0]
 8016a62:	687a      	ldr	r2, [r7, #4]
 8016a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a66:	1ad3      	subs	r3, r2, r3
 8016a68:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	f47f aeb5 	bne.w	80167dc <f_write+0x76>
 8016a72:	e000      	b.n	8016a76 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016a74:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	7c1b      	ldrb	r3, [r3, #16]
 8016a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a7e:	b2da      	uxtb	r2, r3
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8016a84:	2300      	movs	r3, #0
}
 8016a86:	4618      	mov	r0, r3
 8016a88:	3730      	adds	r7, #48	; 0x30
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}

08016a8e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016a8e:	b580      	push	{r7, lr}
 8016a90:	b086      	sub	sp, #24
 8016a92:	af00      	add	r7, sp, #0
 8016a94:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	f107 0208 	add.w	r2, r7, #8
 8016a9c:	4611      	mov	r1, r2
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f7ff fc4e 	bl	8016340 <validate>
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016aa8:	7dfb      	ldrb	r3, [r7, #23]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d168      	bne.n	8016b80 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	7c1b      	ldrb	r3, [r3, #16]
 8016ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d062      	beq.n	8016b80 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	7c1b      	ldrb	r3, [r3, #16]
 8016abe:	b25b      	sxtb	r3, r3
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	da15      	bge.n	8016af0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016ac4:	68bb      	ldr	r3, [r7, #8]
 8016ac6:	7858      	ldrb	r0, [r3, #1]
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	69da      	ldr	r2, [r3, #28]
 8016ad2:	2301      	movs	r3, #1
 8016ad4:	f7fd fc5a 	bl	801438c <disk_write>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d001      	beq.n	8016ae2 <f_sync+0x54>
 8016ade:	2301      	movs	r3, #1
 8016ae0:	e04f      	b.n	8016b82 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	7c1b      	ldrb	r3, [r3, #16]
 8016ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016aea:	b2da      	uxtb	r2, r3
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8016af0:	f7fa fa44 	bl	8010f7c <get_fattime>
 8016af4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8016af6:	68ba      	ldr	r2, [r7, #8]
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	6a1b      	ldr	r3, [r3, #32]
 8016afc:	4619      	mov	r1, r3
 8016afe:	4610      	mov	r0, r2
 8016b00:	f7fd fdc6 	bl	8014690 <move_window>
 8016b04:	4603      	mov	r3, r0
 8016b06:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8016b08:	7dfb      	ldrb	r3, [r7, #23]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d138      	bne.n	8016b80 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b12:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	330b      	adds	r3, #11
 8016b18:	781a      	ldrb	r2, [r3, #0]
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	330b      	adds	r3, #11
 8016b1e:	f042 0220 	orr.w	r2, r2, #32
 8016b22:	b2d2      	uxtb	r2, r2
 8016b24:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	6818      	ldr	r0, [r3, #0]
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	689b      	ldr	r3, [r3, #8]
 8016b2e:	461a      	mov	r2, r3
 8016b30:	68f9      	ldr	r1, [r7, #12]
 8016b32:	f7fe fb54 	bl	80151de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	f103 021c 	add.w	r2, r3, #28
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	68db      	ldr	r3, [r3, #12]
 8016b40:	4619      	mov	r1, r3
 8016b42:	4610      	mov	r0, r2
 8016b44:	f7fd fcb6 	bl	80144b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	3316      	adds	r3, #22
 8016b4c:	6939      	ldr	r1, [r7, #16]
 8016b4e:	4618      	mov	r0, r3
 8016b50:	f7fd fcb0 	bl	80144b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	3312      	adds	r3, #18
 8016b58:	2100      	movs	r1, #0
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7fd fc8f 	bl	801447e <st_word>
					fs->wflag = 1;
 8016b60:	68bb      	ldr	r3, [r7, #8]
 8016b62:	2201      	movs	r2, #1
 8016b64:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8016b66:	68bb      	ldr	r3, [r7, #8]
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f7fd fdbf 	bl	80146ec <sync_fs>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	7c1b      	ldrb	r3, [r3, #16]
 8016b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016b7a:	b2da      	uxtb	r2, r3
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8016b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b82:	4618      	mov	r0, r3
 8016b84:	3718      	adds	r7, #24
 8016b86:	46bd      	mov	sp, r7
 8016b88:	bd80      	pop	{r7, pc}

08016b8a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8016b8a:	b580      	push	{r7, lr}
 8016b8c:	b084      	sub	sp, #16
 8016b8e:	af00      	add	r7, sp, #0
 8016b90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8016b92:	6878      	ldr	r0, [r7, #4]
 8016b94:	f7ff ff7b 	bl	8016a8e <f_sync>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8016b9c:	7bfb      	ldrb	r3, [r7, #15]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d10e      	bne.n	8016bc0 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	f107 0208 	add.w	r2, r7, #8
 8016ba8:	4611      	mov	r1, r2
 8016baa:	4618      	mov	r0, r3
 8016bac:	f7ff fbc8 	bl	8016340 <validate>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8016bb4:	7bfb      	ldrb	r3, [r7, #15]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d102      	bne.n	8016bc0 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8016bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	3710      	adds	r7, #16
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}

08016bca <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8016bca:	b580      	push	{r7, lr}
 8016bcc:	b086      	sub	sp, #24
 8016bce:	af00      	add	r7, sp, #0
 8016bd0:	6078      	str	r0, [r7, #4]
 8016bd2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d101      	bne.n	8016bde <f_opendir+0x14>
 8016bda:	2309      	movs	r3, #9
 8016bdc:	e04c      	b.n	8016c78 <f_opendir+0xae>

	/* Get logical drive */
	obj = &dp->obj;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8016be2:	f107 010c 	add.w	r1, r7, #12
 8016be6:	463b      	mov	r3, r7
 8016be8:	2200      	movs	r2, #0
 8016bea:	4618      	mov	r0, r3
 8016bec:	f7ff f922 	bl	8015e34 <find_volume>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016bf4:	7dfb      	ldrb	r3, [r7, #23]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d137      	bne.n	8016c6a <f_opendir+0xa0>
		obj->fs = fs;
 8016bfa:	68fa      	ldr	r2, [r7, #12]
 8016bfc:	693b      	ldr	r3, [r7, #16]
 8016bfe:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8016c00:	683b      	ldr	r3, [r7, #0]
 8016c02:	4619      	mov	r1, r3
 8016c04:	6878      	ldr	r0, [r7, #4]
 8016c06:	f7ff f805 	bl	8015c14 <follow_path>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8016c0e:	7dfb      	ldrb	r3, [r7, #23]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d125      	bne.n	8016c60 <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8016c1a:	b25b      	sxtb	r3, r3
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	db12      	blt.n	8016c46 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8016c20:	693b      	ldr	r3, [r7, #16]
 8016c22:	799b      	ldrb	r3, [r3, #6]
 8016c24:	f003 0310 	and.w	r3, r3, #16
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d00a      	beq.n	8016c42 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8016c2c:	68fa      	ldr	r2, [r7, #12]
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	69db      	ldr	r3, [r3, #28]
 8016c32:	4619      	mov	r1, r3
 8016c34:	4610      	mov	r0, r2
 8016c36:	f7fe fab3 	bl	80151a0 <ld_clust>
 8016c3a:	4602      	mov	r2, r0
 8016c3c:	693b      	ldr	r3, [r7, #16]
 8016c3e:	609a      	str	r2, [r3, #8]
 8016c40:	e001      	b.n	8016c46 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8016c42:	2305      	movs	r3, #5
 8016c44:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8016c46:	7dfb      	ldrb	r3, [r7, #23]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d109      	bne.n	8016c60 <f_opendir+0x96>
				obj->id = fs->id;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	88da      	ldrh	r2, [r3, #6]
 8016c50:	693b      	ldr	r3, [r7, #16]
 8016c52:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8016c54:	2100      	movs	r1, #0
 8016c56:	6878      	ldr	r0, [r7, #4]
 8016c58:	f7fe f8fc 	bl	8014e54 <dir_sdi>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	75fb      	strb	r3, [r7, #23]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8016c60:	7dfb      	ldrb	r3, [r7, #23]
 8016c62:	2b04      	cmp	r3, #4
 8016c64:	d101      	bne.n	8016c6a <f_opendir+0xa0>
 8016c66:	2305      	movs	r3, #5
 8016c68:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8016c6a:	7dfb      	ldrb	r3, [r7, #23]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d002      	beq.n	8016c76 <f_opendir+0xac>
 8016c70:	693b      	ldr	r3, [r7, #16]
 8016c72:	2200      	movs	r2, #0
 8016c74:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	3718      	adds	r7, #24
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	bd80      	pop	{r7, pc}

08016c80 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b084      	sub	sp, #16
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	f107 0208 	add.w	r2, r7, #8
 8016c8e:	4611      	mov	r1, r2
 8016c90:	4618      	mov	r0, r3
 8016c92:	f7ff fb55 	bl	8016340 <validate>
 8016c96:	4603      	mov	r3, r0
 8016c98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016c9a:	7bfb      	ldrb	r3, [r7, #15]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d102      	bne.n	8016ca6 <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8016ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ca8:	4618      	mov	r0, r3
 8016caa:	3710      	adds	r7, #16
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}

08016cb0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b096      	sub	sp, #88	; 0x58
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8016cb8:	f107 0108 	add.w	r1, r7, #8
 8016cbc:	1d3b      	adds	r3, r7, #4
 8016cbe:	2202      	movs	r2, #2
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7ff f8b7 	bl	8015e34 <find_volume>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8016ccc:	68bb      	ldr	r3, [r7, #8]
 8016cce:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8016cd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	f040 80f2 	bne.w	8016ebe <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8016cda:	687a      	ldr	r2, [r7, #4]
 8016cdc:	f107 030c 	add.w	r3, r7, #12
 8016ce0:	4611      	mov	r1, r2
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f7fe ff96 	bl	8015c14 <follow_path>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8016cee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d102      	bne.n	8016cfc <f_mkdir+0x4c>
 8016cf6:	2308      	movs	r3, #8
 8016cf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8016cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016d00:	2b04      	cmp	r3, #4
 8016d02:	f040 80dc 	bne.w	8016ebe <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8016d06:	f107 030c 	add.w	r3, r7, #12
 8016d0a:	2100      	movs	r1, #0
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f7fd ffd1 	bl	8014cb4 <create_chain>
 8016d12:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8016d14:	68bb      	ldr	r3, [r7, #8]
 8016d16:	895b      	ldrh	r3, [r3, #10]
 8016d18:	461a      	mov	r2, r3
 8016d1a:	68bb      	ldr	r3, [r7, #8]
 8016d1c:	899b      	ldrh	r3, [r3, #12]
 8016d1e:	fb03 f302 	mul.w	r3, r3, r2
 8016d22:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8016d24:	2300      	movs	r3, #0
 8016d26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8016d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d102      	bne.n	8016d36 <f_mkdir+0x86>
 8016d30:	2307      	movs	r3, #7
 8016d32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8016d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d38:	2b01      	cmp	r3, #1
 8016d3a:	d102      	bne.n	8016d42 <f_mkdir+0x92>
 8016d3c:	2302      	movs	r3, #2
 8016d3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d48:	d102      	bne.n	8016d50 <f_mkdir+0xa0>
 8016d4a:	2301      	movs	r3, #1
 8016d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8016d50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d106      	bne.n	8016d66 <f_mkdir+0xb6>
 8016d58:	68bb      	ldr	r3, [r7, #8]
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f7fd fc54 	bl	8014608 <sync_window>
 8016d60:	4603      	mov	r3, r0
 8016d62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8016d66:	f7fa f909 	bl	8010f7c <get_fattime>
 8016d6a:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8016d6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d16c      	bne.n	8016e4e <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f7fd fd27 	bl	80147cc <clust2sect>
 8016d7e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8016d80:	68bb      	ldr	r3, [r7, #8]
 8016d82:	3338      	adds	r3, #56	; 0x38
 8016d84:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	899b      	ldrh	r3, [r3, #12]
 8016d8a:	461a      	mov	r2, r3
 8016d8c:	2100      	movs	r1, #0
 8016d8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d90:	f7fd fbdd 	bl	801454e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8016d94:	220b      	movs	r2, #11
 8016d96:	2120      	movs	r1, #32
 8016d98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d9a:	f7fd fbd8 	bl	801454e <mem_set>
					dir[DIR_Name] = '.';
 8016d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016da0:	222e      	movs	r2, #46	; 0x2e
 8016da2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8016da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016da6:	330b      	adds	r3, #11
 8016da8:	2210      	movs	r2, #16
 8016daa:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8016dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016dae:	3316      	adds	r3, #22
 8016db0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016db2:	4618      	mov	r0, r3
 8016db4:	f7fd fb7e 	bl	80144b4 <st_dword>
					st_clust(fs, dir, dcl);
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016dbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f7fe fa0d 	bl	80151de <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8016dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016dc6:	3320      	adds	r3, #32
 8016dc8:	2220      	movs	r2, #32
 8016dca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f7fd fb9d 	bl	801450c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8016dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016dd4:	3321      	adds	r3, #33	; 0x21
 8016dd6:	222e      	movs	r2, #46	; 0x2e
 8016dd8:	701a      	strb	r2, [r3, #0]
 8016dda:	697b      	ldr	r3, [r7, #20]
 8016ddc:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8016dde:	68bb      	ldr	r3, [r7, #8]
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	2b03      	cmp	r3, #3
 8016de4:	d106      	bne.n	8016df4 <f_mkdir+0x144>
 8016de6:	68bb      	ldr	r3, [r7, #8]
 8016de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016dec:	429a      	cmp	r2, r3
 8016dee:	d101      	bne.n	8016df4 <f_mkdir+0x144>
 8016df0:	2300      	movs	r3, #0
 8016df2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8016df4:	68b8      	ldr	r0, [r7, #8]
 8016df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016df8:	3320      	adds	r3, #32
 8016dfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	f7fe f9ee 	bl	80151de <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016e02:	68bb      	ldr	r3, [r7, #8]
 8016e04:	895b      	ldrh	r3, [r3, #10]
 8016e06:	653b      	str	r3, [r7, #80]	; 0x50
 8016e08:	e01c      	b.n	8016e44 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8016e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e0c:	1c5a      	adds	r2, r3, #1
 8016e0e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016e10:	68ba      	ldr	r2, [r7, #8]
 8016e12:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8016e14:	68bb      	ldr	r3, [r7, #8]
 8016e16:	2201      	movs	r2, #1
 8016e18:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8016e1a:	68bb      	ldr	r3, [r7, #8]
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f7fd fbf3 	bl	8014608 <sync_window>
 8016e22:	4603      	mov	r3, r0
 8016e24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8016e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d10d      	bne.n	8016e4c <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8016e30:	68bb      	ldr	r3, [r7, #8]
 8016e32:	899b      	ldrh	r3, [r3, #12]
 8016e34:	461a      	mov	r2, r3
 8016e36:	2100      	movs	r1, #0
 8016e38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016e3a:	f7fd fb88 	bl	801454e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e40:	3b01      	subs	r3, #1
 8016e42:	653b      	str	r3, [r7, #80]	; 0x50
 8016e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d1df      	bne.n	8016e0a <f_mkdir+0x15a>
 8016e4a:	e000      	b.n	8016e4e <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8016e4c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8016e4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d107      	bne.n	8016e66 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8016e56:	f107 030c 	add.w	r3, r7, #12
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	f7fe fc2a 	bl	80156b4 <dir_register>
 8016e60:	4603      	mov	r3, r0
 8016e62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8016e66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d120      	bne.n	8016eb0 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8016e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e70:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8016e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e74:	3316      	adds	r3, #22
 8016e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7fd fb1b 	bl	80144b4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8016e7e:	68bb      	ldr	r3, [r7, #8]
 8016e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e84:	4618      	mov	r0, r3
 8016e86:	f7fe f9aa 	bl	80151de <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8016e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e8c:	330b      	adds	r3, #11
 8016e8e:	2210      	movs	r2, #16
 8016e90:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8016e92:	68bb      	ldr	r3, [r7, #8]
 8016e94:	2201      	movs	r2, #1
 8016e96:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8016e98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d10e      	bne.n	8016ebe <f_mkdir+0x20e>
					res = sync_fs(fs);
 8016ea0:	68bb      	ldr	r3, [r7, #8]
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f7fd fc22 	bl	80146ec <sync_fs>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8016eae:	e006      	b.n	8016ebe <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8016eb0:	f107 030c 	add.w	r3, r7, #12
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f7fd fe96 	bl	8014bea <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8016ebe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	3758      	adds	r7, #88	; 0x58
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	bd80      	pop	{r7, pc}
	...

08016ecc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016ecc:	b480      	push	{r7}
 8016ece:	b087      	sub	sp, #28
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	60f8      	str	r0, [r7, #12]
 8016ed4:	60b9      	str	r1, [r7, #8]
 8016ed6:	4613      	mov	r3, r2
 8016ed8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016eda:	2301      	movs	r3, #1
 8016edc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016ee2:	4b1f      	ldr	r3, [pc, #124]	; (8016f60 <FATFS_LinkDriverEx+0x94>)
 8016ee4:	7a5b      	ldrb	r3, [r3, #9]
 8016ee6:	b2db      	uxtb	r3, r3
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d131      	bne.n	8016f50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016eec:	4b1c      	ldr	r3, [pc, #112]	; (8016f60 <FATFS_LinkDriverEx+0x94>)
 8016eee:	7a5b      	ldrb	r3, [r3, #9]
 8016ef0:	b2db      	uxtb	r3, r3
 8016ef2:	461a      	mov	r2, r3
 8016ef4:	4b1a      	ldr	r3, [pc, #104]	; (8016f60 <FATFS_LinkDriverEx+0x94>)
 8016ef6:	2100      	movs	r1, #0
 8016ef8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016efa:	4b19      	ldr	r3, [pc, #100]	; (8016f60 <FATFS_LinkDriverEx+0x94>)
 8016efc:	7a5b      	ldrb	r3, [r3, #9]
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	4a17      	ldr	r2, [pc, #92]	; (8016f60 <FATFS_LinkDriverEx+0x94>)
 8016f02:	009b      	lsls	r3, r3, #2
 8016f04:	4413      	add	r3, r2
 8016f06:	68fa      	ldr	r2, [r7, #12]
 8016f08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016f0a:	4b15      	ldr	r3, [pc, #84]	; (8016f60 <FATFS_LinkDriverEx+0x94>)
 8016f0c:	7a5b      	ldrb	r3, [r3, #9]
 8016f0e:	b2db      	uxtb	r3, r3
 8016f10:	461a      	mov	r2, r3
 8016f12:	4b13      	ldr	r3, [pc, #76]	; (8016f60 <FATFS_LinkDriverEx+0x94>)
 8016f14:	4413      	add	r3, r2
 8016f16:	79fa      	ldrb	r2, [r7, #7]
 8016f18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016f1a:	4b11      	ldr	r3, [pc, #68]	; (8016f60 <FATFS_LinkDriverEx+0x94>)
 8016f1c:	7a5b      	ldrb	r3, [r3, #9]
 8016f1e:	b2db      	uxtb	r3, r3
 8016f20:	1c5a      	adds	r2, r3, #1
 8016f22:	b2d1      	uxtb	r1, r2
 8016f24:	4a0e      	ldr	r2, [pc, #56]	; (8016f60 <FATFS_LinkDriverEx+0x94>)
 8016f26:	7251      	strb	r1, [r2, #9]
 8016f28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016f2a:	7dbb      	ldrb	r3, [r7, #22]
 8016f2c:	3330      	adds	r3, #48	; 0x30
 8016f2e:	b2da      	uxtb	r2, r3
 8016f30:	68bb      	ldr	r3, [r7, #8]
 8016f32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016f34:	68bb      	ldr	r3, [r7, #8]
 8016f36:	3301      	adds	r3, #1
 8016f38:	223a      	movs	r2, #58	; 0x3a
 8016f3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016f3c:	68bb      	ldr	r3, [r7, #8]
 8016f3e:	3302      	adds	r3, #2
 8016f40:	222f      	movs	r2, #47	; 0x2f
 8016f42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016f44:	68bb      	ldr	r3, [r7, #8]
 8016f46:	3303      	adds	r3, #3
 8016f48:	2200      	movs	r2, #0
 8016f4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f52:	4618      	mov	r0, r3
 8016f54:	371c      	adds	r7, #28
 8016f56:	46bd      	mov	sp, r7
 8016f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5c:	4770      	bx	lr
 8016f5e:	bf00      	nop
 8016f60:	2000040c 	.word	0x2000040c

08016f64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b082      	sub	sp, #8
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
 8016f6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016f6e:	2200      	movs	r2, #0
 8016f70:	6839      	ldr	r1, [r7, #0]
 8016f72:	6878      	ldr	r0, [r7, #4]
 8016f74:	f7ff ffaa 	bl	8016ecc <FATFS_LinkDriverEx>
 8016f78:	4603      	mov	r3, r0
}
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	3708      	adds	r7, #8
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd80      	pop	{r7, pc}
	...

08016f84 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8016f84:	b480      	push	{r7}
 8016f86:	b085      	sub	sp, #20
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	6039      	str	r1, [r7, #0]
 8016f8e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016f90:	88fb      	ldrh	r3, [r7, #6]
 8016f92:	2b7f      	cmp	r3, #127	; 0x7f
 8016f94:	d802      	bhi.n	8016f9c <ff_convert+0x18>
		c = chr;
 8016f96:	88fb      	ldrh	r3, [r7, #6]
 8016f98:	81fb      	strh	r3, [r7, #14]
 8016f9a:	e025      	b.n	8016fe8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8016f9c:	683b      	ldr	r3, [r7, #0]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d00b      	beq.n	8016fba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8016fa2:	88fb      	ldrh	r3, [r7, #6]
 8016fa4:	2bff      	cmp	r3, #255	; 0xff
 8016fa6:	d805      	bhi.n	8016fb4 <ff_convert+0x30>
 8016fa8:	88fb      	ldrh	r3, [r7, #6]
 8016faa:	3b80      	subs	r3, #128	; 0x80
 8016fac:	4a12      	ldr	r2, [pc, #72]	; (8016ff8 <ff_convert+0x74>)
 8016fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016fb2:	e000      	b.n	8016fb6 <ff_convert+0x32>
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	81fb      	strh	r3, [r7, #14]
 8016fb8:	e016      	b.n	8016fe8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8016fba:	2300      	movs	r3, #0
 8016fbc:	81fb      	strh	r3, [r7, #14]
 8016fbe:	e009      	b.n	8016fd4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016fc0:	89fb      	ldrh	r3, [r7, #14]
 8016fc2:	4a0d      	ldr	r2, [pc, #52]	; (8016ff8 <ff_convert+0x74>)
 8016fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016fc8:	88fa      	ldrh	r2, [r7, #6]
 8016fca:	429a      	cmp	r2, r3
 8016fcc:	d006      	beq.n	8016fdc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8016fce:	89fb      	ldrh	r3, [r7, #14]
 8016fd0:	3301      	adds	r3, #1
 8016fd2:	81fb      	strh	r3, [r7, #14]
 8016fd4:	89fb      	ldrh	r3, [r7, #14]
 8016fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8016fd8:	d9f2      	bls.n	8016fc0 <ff_convert+0x3c>
 8016fda:	e000      	b.n	8016fde <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8016fdc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8016fde:	89fb      	ldrh	r3, [r7, #14]
 8016fe0:	3380      	adds	r3, #128	; 0x80
 8016fe2:	b29b      	uxth	r3, r3
 8016fe4:	b2db      	uxtb	r3, r3
 8016fe6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016fe8:	89fb      	ldrh	r3, [r7, #14]
}
 8016fea:	4618      	mov	r0, r3
 8016fec:	3714      	adds	r7, #20
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff4:	4770      	bx	lr
 8016ff6:	bf00      	nop
 8016ff8:	08018648 	.word	0x08018648

08016ffc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b087      	sub	sp, #28
 8017000:	af00      	add	r7, sp, #0
 8017002:	4603      	mov	r3, r0
 8017004:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8017006:	88fb      	ldrh	r3, [r7, #6]
 8017008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801700c:	d201      	bcs.n	8017012 <ff_wtoupper+0x16>
 801700e:	4b3e      	ldr	r3, [pc, #248]	; (8017108 <ff_wtoupper+0x10c>)
 8017010:	e000      	b.n	8017014 <ff_wtoupper+0x18>
 8017012:	4b3e      	ldr	r3, [pc, #248]	; (801710c <ff_wtoupper+0x110>)
 8017014:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8017016:	697b      	ldr	r3, [r7, #20]
 8017018:	1c9a      	adds	r2, r3, #2
 801701a:	617a      	str	r2, [r7, #20]
 801701c:	881b      	ldrh	r3, [r3, #0]
 801701e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8017020:	8a7b      	ldrh	r3, [r7, #18]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d068      	beq.n	80170f8 <ff_wtoupper+0xfc>
 8017026:	88fa      	ldrh	r2, [r7, #6]
 8017028:	8a7b      	ldrh	r3, [r7, #18]
 801702a:	429a      	cmp	r2, r3
 801702c:	d364      	bcc.n	80170f8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	1c9a      	adds	r2, r3, #2
 8017032:	617a      	str	r2, [r7, #20]
 8017034:	881b      	ldrh	r3, [r3, #0]
 8017036:	823b      	strh	r3, [r7, #16]
 8017038:	8a3b      	ldrh	r3, [r7, #16]
 801703a:	0a1b      	lsrs	r3, r3, #8
 801703c:	81fb      	strh	r3, [r7, #14]
 801703e:	8a3b      	ldrh	r3, [r7, #16]
 8017040:	b2db      	uxtb	r3, r3
 8017042:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8017044:	88fa      	ldrh	r2, [r7, #6]
 8017046:	8a79      	ldrh	r1, [r7, #18]
 8017048:	8a3b      	ldrh	r3, [r7, #16]
 801704a:	440b      	add	r3, r1
 801704c:	429a      	cmp	r2, r3
 801704e:	da49      	bge.n	80170e4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8017050:	89fb      	ldrh	r3, [r7, #14]
 8017052:	2b08      	cmp	r3, #8
 8017054:	d84f      	bhi.n	80170f6 <ff_wtoupper+0xfa>
 8017056:	a201      	add	r2, pc, #4	; (adr r2, 801705c <ff_wtoupper+0x60>)
 8017058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801705c:	08017081 	.word	0x08017081
 8017060:	08017093 	.word	0x08017093
 8017064:	080170a9 	.word	0x080170a9
 8017068:	080170b1 	.word	0x080170b1
 801706c:	080170b9 	.word	0x080170b9
 8017070:	080170c1 	.word	0x080170c1
 8017074:	080170c9 	.word	0x080170c9
 8017078:	080170d1 	.word	0x080170d1
 801707c:	080170d9 	.word	0x080170d9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8017080:	88fa      	ldrh	r2, [r7, #6]
 8017082:	8a7b      	ldrh	r3, [r7, #18]
 8017084:	1ad3      	subs	r3, r2, r3
 8017086:	005b      	lsls	r3, r3, #1
 8017088:	697a      	ldr	r2, [r7, #20]
 801708a:	4413      	add	r3, r2
 801708c:	881b      	ldrh	r3, [r3, #0]
 801708e:	80fb      	strh	r3, [r7, #6]
 8017090:	e027      	b.n	80170e2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017092:	88fa      	ldrh	r2, [r7, #6]
 8017094:	8a7b      	ldrh	r3, [r7, #18]
 8017096:	1ad3      	subs	r3, r2, r3
 8017098:	b29b      	uxth	r3, r3
 801709a:	f003 0301 	and.w	r3, r3, #1
 801709e:	b29b      	uxth	r3, r3
 80170a0:	88fa      	ldrh	r2, [r7, #6]
 80170a2:	1ad3      	subs	r3, r2, r3
 80170a4:	80fb      	strh	r3, [r7, #6]
 80170a6:	e01c      	b.n	80170e2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80170a8:	88fb      	ldrh	r3, [r7, #6]
 80170aa:	3b10      	subs	r3, #16
 80170ac:	80fb      	strh	r3, [r7, #6]
 80170ae:	e018      	b.n	80170e2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80170b0:	88fb      	ldrh	r3, [r7, #6]
 80170b2:	3b20      	subs	r3, #32
 80170b4:	80fb      	strh	r3, [r7, #6]
 80170b6:	e014      	b.n	80170e2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80170b8:	88fb      	ldrh	r3, [r7, #6]
 80170ba:	3b30      	subs	r3, #48	; 0x30
 80170bc:	80fb      	strh	r3, [r7, #6]
 80170be:	e010      	b.n	80170e2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80170c0:	88fb      	ldrh	r3, [r7, #6]
 80170c2:	3b1a      	subs	r3, #26
 80170c4:	80fb      	strh	r3, [r7, #6]
 80170c6:	e00c      	b.n	80170e2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80170c8:	88fb      	ldrh	r3, [r7, #6]
 80170ca:	3308      	adds	r3, #8
 80170cc:	80fb      	strh	r3, [r7, #6]
 80170ce:	e008      	b.n	80170e2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80170d0:	88fb      	ldrh	r3, [r7, #6]
 80170d2:	3b50      	subs	r3, #80	; 0x50
 80170d4:	80fb      	strh	r3, [r7, #6]
 80170d6:	e004      	b.n	80170e2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80170d8:	88fb      	ldrh	r3, [r7, #6]
 80170da:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80170de:	80fb      	strh	r3, [r7, #6]
 80170e0:	bf00      	nop
			}
			break;
 80170e2:	e008      	b.n	80170f6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80170e4:	89fb      	ldrh	r3, [r7, #14]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d195      	bne.n	8017016 <ff_wtoupper+0x1a>
 80170ea:	8a3b      	ldrh	r3, [r7, #16]
 80170ec:	005b      	lsls	r3, r3, #1
 80170ee:	697a      	ldr	r2, [r7, #20]
 80170f0:	4413      	add	r3, r2
 80170f2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80170f4:	e78f      	b.n	8017016 <ff_wtoupper+0x1a>
			break;
 80170f6:	bf00      	nop
	}

	return chr;
 80170f8:	88fb      	ldrh	r3, [r7, #6]
}
 80170fa:	4618      	mov	r0, r3
 80170fc:	371c      	adds	r7, #28
 80170fe:	46bd      	mov	sp, r7
 8017100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017104:	4770      	bx	lr
 8017106:	bf00      	nop
 8017108:	08018748 	.word	0x08018748
 801710c:	0801893c 	.word	0x0801893c

08017110 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017114:	2200      	movs	r2, #0
 8017116:	4912      	ldr	r1, [pc, #72]	; (8017160 <MX_USB_DEVICE_Init+0x50>)
 8017118:	4812      	ldr	r0, [pc, #72]	; (8017164 <MX_USB_DEVICE_Init+0x54>)
 801711a:	f7fb ff62 	bl	8012fe2 <USBD_Init>
 801711e:	4603      	mov	r3, r0
 8017120:	2b00      	cmp	r3, #0
 8017122:	d001      	beq.n	8017128 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017124:	f7ea fd64 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8017128:	490f      	ldr	r1, [pc, #60]	; (8017168 <MX_USB_DEVICE_Init+0x58>)
 801712a:	480e      	ldr	r0, [pc, #56]	; (8017164 <MX_USB_DEVICE_Init+0x54>)
 801712c:	f7fb ff89 	bl	8013042 <USBD_RegisterClass>
 8017130:	4603      	mov	r3, r0
 8017132:	2b00      	cmp	r3, #0
 8017134:	d001      	beq.n	801713a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017136:	f7ea fd5b 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801713a:	490c      	ldr	r1, [pc, #48]	; (801716c <MX_USB_DEVICE_Init+0x5c>)
 801713c:	4809      	ldr	r0, [pc, #36]	; (8017164 <MX_USB_DEVICE_Init+0x54>)
 801713e:	f7fa fb39 	bl	80117b4 <USBD_MSC_RegisterStorage>
 8017142:	4603      	mov	r3, r0
 8017144:	2b00      	cmp	r3, #0
 8017146:	d001      	beq.n	801714c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017148:	f7ea fd52 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801714c:	4805      	ldr	r0, [pc, #20]	; (8017164 <MX_USB_DEVICE_Init+0x54>)
 801714e:	f7fb ff9f 	bl	8013090 <USBD_Start>
 8017152:	4603      	mov	r3, r0
 8017154:	2b00      	cmp	r3, #0
 8017156:	d001      	beq.n	801715c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017158:	f7ea fd4a 	bl	8001bf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801715c:	bf00      	nop
 801715e:	bd80      	pop	{r7, pc}
 8017160:	200000f4 	.word	0x200000f4
 8017164:	20004efc 	.word	0x20004efc
 8017168:	2000000c 	.word	0x2000000c
 801716c:	20000154 	.word	0x20000154

08017170 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017170:	b480      	push	{r7}
 8017172:	b083      	sub	sp, #12
 8017174:	af00      	add	r7, sp, #0
 8017176:	4603      	mov	r3, r0
 8017178:	6039      	str	r1, [r7, #0]
 801717a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801717c:	683b      	ldr	r3, [r7, #0]
 801717e:	2212      	movs	r2, #18
 8017180:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017182:	4b03      	ldr	r3, [pc, #12]	; (8017190 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017184:	4618      	mov	r0, r3
 8017186:	370c      	adds	r7, #12
 8017188:	46bd      	mov	sp, r7
 801718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718e:	4770      	bx	lr
 8017190:	20000114 	.word	0x20000114

08017194 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017194:	b480      	push	{r7}
 8017196:	b083      	sub	sp, #12
 8017198:	af00      	add	r7, sp, #0
 801719a:	4603      	mov	r3, r0
 801719c:	6039      	str	r1, [r7, #0]
 801719e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80171a0:	683b      	ldr	r3, [r7, #0]
 80171a2:	2204      	movs	r2, #4
 80171a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80171a6:	4b03      	ldr	r3, [pc, #12]	; (80171b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80171a8:	4618      	mov	r0, r3
 80171aa:	370c      	adds	r7, #12
 80171ac:	46bd      	mov	sp, r7
 80171ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b2:	4770      	bx	lr
 80171b4:	20000134 	.word	0x20000134

080171b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b082      	sub	sp, #8
 80171bc:	af00      	add	r7, sp, #0
 80171be:	4603      	mov	r3, r0
 80171c0:	6039      	str	r1, [r7, #0]
 80171c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80171c4:	79fb      	ldrb	r3, [r7, #7]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d105      	bne.n	80171d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80171ca:	683a      	ldr	r2, [r7, #0]
 80171cc:	4907      	ldr	r1, [pc, #28]	; (80171ec <USBD_FS_ProductStrDescriptor+0x34>)
 80171ce:	4808      	ldr	r0, [pc, #32]	; (80171f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80171d0:	f7fc ffb9 	bl	8014146 <USBD_GetString>
 80171d4:	e004      	b.n	80171e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80171d6:	683a      	ldr	r2, [r7, #0]
 80171d8:	4904      	ldr	r1, [pc, #16]	; (80171ec <USBD_FS_ProductStrDescriptor+0x34>)
 80171da:	4805      	ldr	r0, [pc, #20]	; (80171f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80171dc:	f7fc ffb3 	bl	8014146 <USBD_GetString>
  }
  return USBD_StrDesc;
 80171e0:	4b02      	ldr	r3, [pc, #8]	; (80171ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80171e2:	4618      	mov	r0, r3
 80171e4:	3708      	adds	r7, #8
 80171e6:	46bd      	mov	sp, r7
 80171e8:	bd80      	pop	{r7, pc}
 80171ea:	bf00      	nop
 80171ec:	200051cc 	.word	0x200051cc
 80171f0:	08018540 	.word	0x08018540

080171f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b082      	sub	sp, #8
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	4603      	mov	r3, r0
 80171fc:	6039      	str	r1, [r7, #0]
 80171fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017200:	683a      	ldr	r2, [r7, #0]
 8017202:	4904      	ldr	r1, [pc, #16]	; (8017214 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017204:	4804      	ldr	r0, [pc, #16]	; (8017218 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017206:	f7fc ff9e 	bl	8014146 <USBD_GetString>
  return USBD_StrDesc;
 801720a:	4b02      	ldr	r3, [pc, #8]	; (8017214 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801720c:	4618      	mov	r0, r3
 801720e:	3708      	adds	r7, #8
 8017210:	46bd      	mov	sp, r7
 8017212:	bd80      	pop	{r7, pc}
 8017214:	200051cc 	.word	0x200051cc
 8017218:	08018554 	.word	0x08018554

0801721c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b082      	sub	sp, #8
 8017220:	af00      	add	r7, sp, #0
 8017222:	4603      	mov	r3, r0
 8017224:	6039      	str	r1, [r7, #0]
 8017226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	221a      	movs	r2, #26
 801722c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801722e:	f000 f855 	bl	80172dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017232:	4b02      	ldr	r3, [pc, #8]	; (801723c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017234:	4618      	mov	r0, r3
 8017236:	3708      	adds	r7, #8
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}
 801723c:	20000138 	.word	0x20000138

08017240 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b082      	sub	sp, #8
 8017244:	af00      	add	r7, sp, #0
 8017246:	4603      	mov	r3, r0
 8017248:	6039      	str	r1, [r7, #0]
 801724a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801724c:	79fb      	ldrb	r3, [r7, #7]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d105      	bne.n	801725e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017252:	683a      	ldr	r2, [r7, #0]
 8017254:	4907      	ldr	r1, [pc, #28]	; (8017274 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017256:	4808      	ldr	r0, [pc, #32]	; (8017278 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017258:	f7fc ff75 	bl	8014146 <USBD_GetString>
 801725c:	e004      	b.n	8017268 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801725e:	683a      	ldr	r2, [r7, #0]
 8017260:	4904      	ldr	r1, [pc, #16]	; (8017274 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017262:	4805      	ldr	r0, [pc, #20]	; (8017278 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017264:	f7fc ff6f 	bl	8014146 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017268:	4b02      	ldr	r3, [pc, #8]	; (8017274 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801726a:	4618      	mov	r0, r3
 801726c:	3708      	adds	r7, #8
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
 8017272:	bf00      	nop
 8017274:	200051cc 	.word	0x200051cc
 8017278:	08018568 	.word	0x08018568

0801727c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801727c:	b580      	push	{r7, lr}
 801727e:	b082      	sub	sp, #8
 8017280:	af00      	add	r7, sp, #0
 8017282:	4603      	mov	r3, r0
 8017284:	6039      	str	r1, [r7, #0]
 8017286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017288:	79fb      	ldrb	r3, [r7, #7]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d105      	bne.n	801729a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801728e:	683a      	ldr	r2, [r7, #0]
 8017290:	4907      	ldr	r1, [pc, #28]	; (80172b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017292:	4808      	ldr	r0, [pc, #32]	; (80172b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017294:	f7fc ff57 	bl	8014146 <USBD_GetString>
 8017298:	e004      	b.n	80172a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801729a:	683a      	ldr	r2, [r7, #0]
 801729c:	4904      	ldr	r1, [pc, #16]	; (80172b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801729e:	4805      	ldr	r0, [pc, #20]	; (80172b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80172a0:	f7fc ff51 	bl	8014146 <USBD_GetString>
  }
  return USBD_StrDesc;
 80172a4:	4b02      	ldr	r3, [pc, #8]	; (80172b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80172a6:	4618      	mov	r0, r3
 80172a8:	3708      	adds	r7, #8
 80172aa:	46bd      	mov	sp, r7
 80172ac:	bd80      	pop	{r7, pc}
 80172ae:	bf00      	nop
 80172b0:	200051cc 	.word	0x200051cc
 80172b4:	08018574 	.word	0x08018574

080172b8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172b8:	b480      	push	{r7}
 80172ba:	b083      	sub	sp, #12
 80172bc:	af00      	add	r7, sp, #0
 80172be:	4603      	mov	r3, r0
 80172c0:	6039      	str	r1, [r7, #0]
 80172c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	220c      	movs	r2, #12
 80172c8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80172ca:	4b03      	ldr	r3, [pc, #12]	; (80172d8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80172cc:	4618      	mov	r0, r3
 80172ce:	370c      	adds	r7, #12
 80172d0:	46bd      	mov	sp, r7
 80172d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d6:	4770      	bx	lr
 80172d8:	20000128 	.word	0x20000128

080172dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b084      	sub	sp, #16
 80172e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80172e2:	4b0f      	ldr	r3, [pc, #60]	; (8017320 <Get_SerialNum+0x44>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80172e8:	4b0e      	ldr	r3, [pc, #56]	; (8017324 <Get_SerialNum+0x48>)
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80172ee:	4b0e      	ldr	r3, [pc, #56]	; (8017328 <Get_SerialNum+0x4c>)
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80172f4:	68fa      	ldr	r2, [r7, #12]
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	4413      	add	r3, r2
 80172fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d009      	beq.n	8017316 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017302:	2208      	movs	r2, #8
 8017304:	4909      	ldr	r1, [pc, #36]	; (801732c <Get_SerialNum+0x50>)
 8017306:	68f8      	ldr	r0, [r7, #12]
 8017308:	f000 f814 	bl	8017334 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801730c:	2204      	movs	r2, #4
 801730e:	4908      	ldr	r1, [pc, #32]	; (8017330 <Get_SerialNum+0x54>)
 8017310:	68b8      	ldr	r0, [r7, #8]
 8017312:	f000 f80f 	bl	8017334 <IntToUnicode>
  }
}
 8017316:	bf00      	nop
 8017318:	3710      	adds	r7, #16
 801731a:	46bd      	mov	sp, r7
 801731c:	bd80      	pop	{r7, pc}
 801731e:	bf00      	nop
 8017320:	1fff7a10 	.word	0x1fff7a10
 8017324:	1fff7a14 	.word	0x1fff7a14
 8017328:	1fff7a18 	.word	0x1fff7a18
 801732c:	2000013a 	.word	0x2000013a
 8017330:	2000014a 	.word	0x2000014a

08017334 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017334:	b480      	push	{r7}
 8017336:	b087      	sub	sp, #28
 8017338:	af00      	add	r7, sp, #0
 801733a:	60f8      	str	r0, [r7, #12]
 801733c:	60b9      	str	r1, [r7, #8]
 801733e:	4613      	mov	r3, r2
 8017340:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017342:	2300      	movs	r3, #0
 8017344:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017346:	2300      	movs	r3, #0
 8017348:	75fb      	strb	r3, [r7, #23]
 801734a:	e027      	b.n	801739c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	0f1b      	lsrs	r3, r3, #28
 8017350:	2b09      	cmp	r3, #9
 8017352:	d80b      	bhi.n	801736c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	0f1b      	lsrs	r3, r3, #28
 8017358:	b2da      	uxtb	r2, r3
 801735a:	7dfb      	ldrb	r3, [r7, #23]
 801735c:	005b      	lsls	r3, r3, #1
 801735e:	4619      	mov	r1, r3
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	440b      	add	r3, r1
 8017364:	3230      	adds	r2, #48	; 0x30
 8017366:	b2d2      	uxtb	r2, r2
 8017368:	701a      	strb	r2, [r3, #0]
 801736a:	e00a      	b.n	8017382 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	0f1b      	lsrs	r3, r3, #28
 8017370:	b2da      	uxtb	r2, r3
 8017372:	7dfb      	ldrb	r3, [r7, #23]
 8017374:	005b      	lsls	r3, r3, #1
 8017376:	4619      	mov	r1, r3
 8017378:	68bb      	ldr	r3, [r7, #8]
 801737a:	440b      	add	r3, r1
 801737c:	3237      	adds	r2, #55	; 0x37
 801737e:	b2d2      	uxtb	r2, r2
 8017380:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	011b      	lsls	r3, r3, #4
 8017386:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017388:	7dfb      	ldrb	r3, [r7, #23]
 801738a:	005b      	lsls	r3, r3, #1
 801738c:	3301      	adds	r3, #1
 801738e:	68ba      	ldr	r2, [r7, #8]
 8017390:	4413      	add	r3, r2
 8017392:	2200      	movs	r2, #0
 8017394:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017396:	7dfb      	ldrb	r3, [r7, #23]
 8017398:	3301      	adds	r3, #1
 801739a:	75fb      	strb	r3, [r7, #23]
 801739c:	7dfa      	ldrb	r2, [r7, #23]
 801739e:	79fb      	ldrb	r3, [r7, #7]
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d3d3      	bcc.n	801734c <IntToUnicode+0x18>
  }
}
 80173a4:	bf00      	nop
 80173a6:	bf00      	nop
 80173a8:	371c      	adds	r7, #28
 80173aa:	46bd      	mov	sp, r7
 80173ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b0:	4770      	bx	lr

080173b2 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80173b2:	b480      	push	{r7}
 80173b4:	b083      	sub	sp, #12
 80173b6:	af00      	add	r7, sp, #0
 80173b8:	4603      	mov	r3, r0
 80173ba:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80173bc:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80173be:	4618      	mov	r0, r3
 80173c0:	370c      	adds	r7, #12
 80173c2:	46bd      	mov	sp, r7
 80173c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c8:	4770      	bx	lr
	...

080173cc <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b08c      	sub	sp, #48	; 0x30
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	4603      	mov	r3, r0
 80173d4:	60b9      	str	r1, [r7, #8]
 80173d6:	607a      	str	r2, [r7, #4]
 80173d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;

  HAL_SD_GetCardInfo(&hsd, &info);
 80173da:	f107 0310 	add.w	r3, r7, #16
 80173de:	4619      	mov	r1, r3
 80173e0:	4807      	ldr	r0, [pc, #28]	; (8017400 <STORAGE_GetCapacity_FS+0x34>)
 80173e2:	f7f6 fc2d 	bl	800dc40 <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr - 1;
 80173e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e8:	1e5a      	subs	r2, r3, #1
 80173ea:	68bb      	ldr	r3, [r7, #8]
 80173ec:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 80173ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173f0:	b29a      	uxth	r2, r3
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 80173f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80173f8:	4618      	mov	r0, r3
 80173fa:	3730      	adds	r7, #48	; 0x30
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bd80      	pop	{r7, pc}
 8017400:	20001c60 	.word	0x20001c60

08017404 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8017404:	b480      	push	{r7}
 8017406:	b083      	sub	sp, #12
 8017408:	af00      	add	r7, sp, #0
 801740a:	4603      	mov	r3, r0
 801740c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801740e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017410:	4618      	mov	r0, r3
 8017412:	370c      	adds	r7, #12
 8017414:	46bd      	mov	sp, r7
 8017416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801741a:	4770      	bx	lr

0801741c <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801741c:	b480      	push	{r7}
 801741e:	b083      	sub	sp, #12
 8017420:	af00      	add	r7, sp, #0
 8017422:	4603      	mov	r3, r0
 8017424:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8017426:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017428:	4618      	mov	r0, r3
 801742a:	370c      	adds	r7, #12
 801742c:	46bd      	mov	sp, r7
 801742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017432:	4770      	bx	lr

08017434 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b086      	sub	sp, #24
 8017438:	af02      	add	r7, sp, #8
 801743a:	60b9      	str	r1, [r7, #8]
 801743c:	607a      	str	r2, [r7, #4]
 801743e:	461a      	mov	r2, r3
 8017440:	4603      	mov	r3, r0
 8017442:	73fb      	strb	r3, [r7, #15]
 8017444:	4613      	mov	r3, r2
 8017446:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017448:	89bb      	ldrh	r3, [r7, #12]
 801744a:	f04f 32ff 	mov.w	r2, #4294967295
 801744e:	9200      	str	r2, [sp, #0]
 8017450:	687a      	ldr	r2, [r7, #4]
 8017452:	68b9      	ldr	r1, [r7, #8]
 8017454:	4807      	ldr	r0, [pc, #28]	; (8017474 <STORAGE_Read_FS+0x40>)
 8017456:	f7f5 fba9 	bl	800cbac <HAL_SD_ReadBlocks>
//	HAL_SD_ReadBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 801745a:	bf00      	nop
 801745c:	4805      	ldr	r0, [pc, #20]	; (8017474 <STORAGE_Read_FS+0x40>)
 801745e:	f7f6 fcb5 	bl	800ddcc <HAL_SD_GetCardState>
 8017462:	4603      	mov	r3, r0
 8017464:	2b04      	cmp	r3, #4
 8017466:	d1f9      	bne.n	801745c <STORAGE_Read_FS+0x28>

  return (USBD_OK);
 8017468:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801746a:	4618      	mov	r0, r3
 801746c:	3710      	adds	r7, #16
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}
 8017472:	bf00      	nop
 8017474:	20001c60 	.word	0x20001c60

08017478 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b086      	sub	sp, #24
 801747c:	af02      	add	r7, sp, #8
 801747e:	60b9      	str	r1, [r7, #8]
 8017480:	607a      	str	r2, [r7, #4]
 8017482:	461a      	mov	r2, r3
 8017484:	4603      	mov	r3, r0
 8017486:	73fb      	strb	r3, [r7, #15]
 8017488:	4613      	mov	r3, r2
 801748a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801748c:	89bb      	ldrh	r3, [r7, #12]
 801748e:	f04f 32ff 	mov.w	r2, #4294967295
 8017492:	9200      	str	r2, [sp, #0]
 8017494:	687a      	ldr	r2, [r7, #4]
 8017496:	68b9      	ldr	r1, [r7, #8]
 8017498:	4807      	ldr	r0, [pc, #28]	; (80174b8 <STORAGE_Write_FS+0x40>)
 801749a:	f7f5 fd65 	bl	800cf68 <HAL_SD_WriteBlocks>
//	HAL_SD_WriteBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 801749e:	bf00      	nop
 80174a0:	4805      	ldr	r0, [pc, #20]	; (80174b8 <STORAGE_Write_FS+0x40>)
 80174a2:	f7f6 fc93 	bl	800ddcc <HAL_SD_GetCardState>
 80174a6:	4603      	mov	r3, r0
 80174a8:	2b04      	cmp	r3, #4
 80174aa:	d1f9      	bne.n	80174a0 <STORAGE_Write_FS+0x28>

  return (USBD_OK);
 80174ac:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	3710      	adds	r7, #16
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}
 80174b6:	bf00      	nop
 80174b8:	20001c60 	.word	0x20001c60

080174bc <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80174bc:	b480      	push	{r7}
 80174be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80174c0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80174c2:	4618      	mov	r0, r3
 80174c4:	46bd      	mov	sp, r7
 80174c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ca:	4770      	bx	lr

080174cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b08a      	sub	sp, #40	; 0x28
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80174d4:	f107 0314 	add.w	r3, r7, #20
 80174d8:	2200      	movs	r2, #0
 80174da:	601a      	str	r2, [r3, #0]
 80174dc:	605a      	str	r2, [r3, #4]
 80174de:	609a      	str	r2, [r3, #8]
 80174e0:	60da      	str	r2, [r3, #12]
 80174e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80174ec:	d147      	bne.n	801757e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80174ee:	2300      	movs	r3, #0
 80174f0:	613b      	str	r3, [r7, #16]
 80174f2:	4b25      	ldr	r3, [pc, #148]	; (8017588 <HAL_PCD_MspInit+0xbc>)
 80174f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174f6:	4a24      	ldr	r2, [pc, #144]	; (8017588 <HAL_PCD_MspInit+0xbc>)
 80174f8:	f043 0301 	orr.w	r3, r3, #1
 80174fc:	6313      	str	r3, [r2, #48]	; 0x30
 80174fe:	4b22      	ldr	r3, [pc, #136]	; (8017588 <HAL_PCD_MspInit+0xbc>)
 8017500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017502:	f003 0301 	and.w	r3, r3, #1
 8017506:	613b      	str	r3, [r7, #16]
 8017508:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801750a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801750e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017510:	2300      	movs	r3, #0
 8017512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017514:	2300      	movs	r3, #0
 8017516:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017518:	f107 0314 	add.w	r3, r7, #20
 801751c:	4619      	mov	r1, r3
 801751e:	481b      	ldr	r0, [pc, #108]	; (801758c <HAL_PCD_MspInit+0xc0>)
 8017520:	f7f1 fa86 	bl	8008a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017524:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801752a:	2302      	movs	r3, #2
 801752c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801752e:	2300      	movs	r3, #0
 8017530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017532:	2303      	movs	r3, #3
 8017534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017536:	230a      	movs	r3, #10
 8017538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801753a:	f107 0314 	add.w	r3, r7, #20
 801753e:	4619      	mov	r1, r3
 8017540:	4812      	ldr	r0, [pc, #72]	; (801758c <HAL_PCD_MspInit+0xc0>)
 8017542:	f7f1 fa75 	bl	8008a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017546:	4b10      	ldr	r3, [pc, #64]	; (8017588 <HAL_PCD_MspInit+0xbc>)
 8017548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801754a:	4a0f      	ldr	r2, [pc, #60]	; (8017588 <HAL_PCD_MspInit+0xbc>)
 801754c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017550:	6353      	str	r3, [r2, #52]	; 0x34
 8017552:	2300      	movs	r3, #0
 8017554:	60fb      	str	r3, [r7, #12]
 8017556:	4b0c      	ldr	r3, [pc, #48]	; (8017588 <HAL_PCD_MspInit+0xbc>)
 8017558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801755a:	4a0b      	ldr	r2, [pc, #44]	; (8017588 <HAL_PCD_MspInit+0xbc>)
 801755c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017560:	6453      	str	r3, [r2, #68]	; 0x44
 8017562:	4b09      	ldr	r3, [pc, #36]	; (8017588 <HAL_PCD_MspInit+0xbc>)
 8017564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801756a:	60fb      	str	r3, [r7, #12]
 801756c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801756e:	2200      	movs	r2, #0
 8017570:	2100      	movs	r1, #0
 8017572:	2043      	movs	r0, #67	; 0x43
 8017574:	f7f0 fe87 	bl	8008286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017578:	2043      	movs	r0, #67	; 0x43
 801757a:	f7f0 fea0 	bl	80082be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801757e:	bf00      	nop
 8017580:	3728      	adds	r7, #40	; 0x28
 8017582:	46bd      	mov	sp, r7
 8017584:	bd80      	pop	{r7, pc}
 8017586:	bf00      	nop
 8017588:	40023800 	.word	0x40023800
 801758c:	40020000 	.word	0x40020000

08017590 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b082      	sub	sp, #8
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80175a4:	4619      	mov	r1, r3
 80175a6:	4610      	mov	r0, r2
 80175a8:	f7fb fdbd 	bl	8013126 <USBD_LL_SetupStage>
}
 80175ac:	bf00      	nop
 80175ae:	3708      	adds	r7, #8
 80175b0:	46bd      	mov	sp, r7
 80175b2:	bd80      	pop	{r7, pc}

080175b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b082      	sub	sp, #8
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	6078      	str	r0, [r7, #4]
 80175bc:	460b      	mov	r3, r1
 80175be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80175c6:	78fa      	ldrb	r2, [r7, #3]
 80175c8:	6879      	ldr	r1, [r7, #4]
 80175ca:	4613      	mov	r3, r2
 80175cc:	00db      	lsls	r3, r3, #3
 80175ce:	1a9b      	subs	r3, r3, r2
 80175d0:	009b      	lsls	r3, r3, #2
 80175d2:	440b      	add	r3, r1
 80175d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80175d8:	681a      	ldr	r2, [r3, #0]
 80175da:	78fb      	ldrb	r3, [r7, #3]
 80175dc:	4619      	mov	r1, r3
 80175de:	f7fb fdf7 	bl	80131d0 <USBD_LL_DataOutStage>
}
 80175e2:	bf00      	nop
 80175e4:	3708      	adds	r7, #8
 80175e6:	46bd      	mov	sp, r7
 80175e8:	bd80      	pop	{r7, pc}

080175ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175ea:	b580      	push	{r7, lr}
 80175ec:	b082      	sub	sp, #8
 80175ee:	af00      	add	r7, sp, #0
 80175f0:	6078      	str	r0, [r7, #4]
 80175f2:	460b      	mov	r3, r1
 80175f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80175fc:	78fa      	ldrb	r2, [r7, #3]
 80175fe:	6879      	ldr	r1, [r7, #4]
 8017600:	4613      	mov	r3, r2
 8017602:	00db      	lsls	r3, r3, #3
 8017604:	1a9b      	subs	r3, r3, r2
 8017606:	009b      	lsls	r3, r3, #2
 8017608:	440b      	add	r3, r1
 801760a:	3348      	adds	r3, #72	; 0x48
 801760c:	681a      	ldr	r2, [r3, #0]
 801760e:	78fb      	ldrb	r3, [r7, #3]
 8017610:	4619      	mov	r1, r3
 8017612:	f7fb fe40 	bl	8013296 <USBD_LL_DataInStage>
}
 8017616:	bf00      	nop
 8017618:	3708      	adds	r7, #8
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}

0801761e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801761e:	b580      	push	{r7, lr}
 8017620:	b082      	sub	sp, #8
 8017622:	af00      	add	r7, sp, #0
 8017624:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801762c:	4618      	mov	r0, r3
 801762e:	f7fb ff54 	bl	80134da <USBD_LL_SOF>
}
 8017632:	bf00      	nop
 8017634:	3708      	adds	r7, #8
 8017636:	46bd      	mov	sp, r7
 8017638:	bd80      	pop	{r7, pc}

0801763a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801763a:	b580      	push	{r7, lr}
 801763c:	b084      	sub	sp, #16
 801763e:	af00      	add	r7, sp, #0
 8017640:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017642:	2301      	movs	r3, #1
 8017644:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	68db      	ldr	r3, [r3, #12]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d102      	bne.n	8017654 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801764e:	2300      	movs	r3, #0
 8017650:	73fb      	strb	r3, [r7, #15]
 8017652:	e008      	b.n	8017666 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	68db      	ldr	r3, [r3, #12]
 8017658:	2b02      	cmp	r3, #2
 801765a:	d102      	bne.n	8017662 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801765c:	2301      	movs	r3, #1
 801765e:	73fb      	strb	r3, [r7, #15]
 8017660:	e001      	b.n	8017666 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017662:	f7ea fac5 	bl	8001bf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801766c:	7bfa      	ldrb	r2, [r7, #15]
 801766e:	4611      	mov	r1, r2
 8017670:	4618      	mov	r0, r3
 8017672:	f7fb fef4 	bl	801345e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801767c:	4618      	mov	r0, r3
 801767e:	f7fb fea0 	bl	80133c2 <USBD_LL_Reset>
}
 8017682:	bf00      	nop
 8017684:	3710      	adds	r7, #16
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}
	...

0801768c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b082      	sub	sp, #8
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801769a:	4618      	mov	r0, r3
 801769c:	f7fb feef 	bl	801347e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	687a      	ldr	r2, [r7, #4]
 80176ac:	6812      	ldr	r2, [r2, #0]
 80176ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80176b2:	f043 0301 	orr.w	r3, r3, #1
 80176b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	6a1b      	ldr	r3, [r3, #32]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d005      	beq.n	80176cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80176c0:	4b04      	ldr	r3, [pc, #16]	; (80176d4 <HAL_PCD_SuspendCallback+0x48>)
 80176c2:	691b      	ldr	r3, [r3, #16]
 80176c4:	4a03      	ldr	r2, [pc, #12]	; (80176d4 <HAL_PCD_SuspendCallback+0x48>)
 80176c6:	f043 0306 	orr.w	r3, r3, #6
 80176ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80176cc:	bf00      	nop
 80176ce:	3708      	adds	r7, #8
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bd80      	pop	{r7, pc}
 80176d4:	e000ed00 	.word	0xe000ed00

080176d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b082      	sub	sp, #8
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80176e6:	4618      	mov	r0, r3
 80176e8:	f7fb fedf 	bl	80134aa <USBD_LL_Resume>
}
 80176ec:	bf00      	nop
 80176ee:	3708      	adds	r7, #8
 80176f0:	46bd      	mov	sp, r7
 80176f2:	bd80      	pop	{r7, pc}

080176f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b082      	sub	sp, #8
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
 80176fc:	460b      	mov	r3, r1
 80176fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017706:	78fa      	ldrb	r2, [r7, #3]
 8017708:	4611      	mov	r1, r2
 801770a:	4618      	mov	r0, r3
 801770c:	f7fb ff2d 	bl	801356a <USBD_LL_IsoOUTIncomplete>
}
 8017710:	bf00      	nop
 8017712:	3708      	adds	r7, #8
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}

08017718 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b082      	sub	sp, #8
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
 8017720:	460b      	mov	r3, r1
 8017722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801772a:	78fa      	ldrb	r2, [r7, #3]
 801772c:	4611      	mov	r1, r2
 801772e:	4618      	mov	r0, r3
 8017730:	f7fb fef5 	bl	801351e <USBD_LL_IsoINIncomplete>
}
 8017734:	bf00      	nop
 8017736:	3708      	adds	r7, #8
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}

0801773c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b082      	sub	sp, #8
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801774a:	4618      	mov	r0, r3
 801774c:	f7fb ff33 	bl	80135b6 <USBD_LL_DevConnected>
}
 8017750:	bf00      	nop
 8017752:	3708      	adds	r7, #8
 8017754:	46bd      	mov	sp, r7
 8017756:	bd80      	pop	{r7, pc}

08017758 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b082      	sub	sp, #8
 801775c:	af00      	add	r7, sp, #0
 801775e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017766:	4618      	mov	r0, r3
 8017768:	f7fb ff30 	bl	80135cc <USBD_LL_DevDisconnected>
}
 801776c:	bf00      	nop
 801776e:	3708      	adds	r7, #8
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}

08017774 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b082      	sub	sp, #8
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d13c      	bne.n	80177fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017784:	4a20      	ldr	r2, [pc, #128]	; (8017808 <USBD_LL_Init+0x94>)
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	4a1e      	ldr	r2, [pc, #120]	; (8017808 <USBD_LL_Init+0x94>)
 8017790:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017794:	4b1c      	ldr	r3, [pc, #112]	; (8017808 <USBD_LL_Init+0x94>)
 8017796:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801779a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801779c:	4b1a      	ldr	r3, [pc, #104]	; (8017808 <USBD_LL_Init+0x94>)
 801779e:	2206      	movs	r2, #6
 80177a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80177a2:	4b19      	ldr	r3, [pc, #100]	; (8017808 <USBD_LL_Init+0x94>)
 80177a4:	2202      	movs	r2, #2
 80177a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80177a8:	4b17      	ldr	r3, [pc, #92]	; (8017808 <USBD_LL_Init+0x94>)
 80177aa:	2200      	movs	r2, #0
 80177ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80177ae:	4b16      	ldr	r3, [pc, #88]	; (8017808 <USBD_LL_Init+0x94>)
 80177b0:	2202      	movs	r2, #2
 80177b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80177b4:	4b14      	ldr	r3, [pc, #80]	; (8017808 <USBD_LL_Init+0x94>)
 80177b6:	2200      	movs	r2, #0
 80177b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80177ba:	4b13      	ldr	r3, [pc, #76]	; (8017808 <USBD_LL_Init+0x94>)
 80177bc:	2200      	movs	r2, #0
 80177be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80177c0:	4b11      	ldr	r3, [pc, #68]	; (8017808 <USBD_LL_Init+0x94>)
 80177c2:	2200      	movs	r2, #0
 80177c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80177c6:	4b10      	ldr	r3, [pc, #64]	; (8017808 <USBD_LL_Init+0x94>)
 80177c8:	2201      	movs	r2, #1
 80177ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80177cc:	4b0e      	ldr	r3, [pc, #56]	; (8017808 <USBD_LL_Init+0x94>)
 80177ce:	2200      	movs	r2, #0
 80177d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80177d2:	480d      	ldr	r0, [pc, #52]	; (8017808 <USBD_LL_Init+0x94>)
 80177d4:	f7f2 fb0b 	bl	8009dee <HAL_PCD_Init>
 80177d8:	4603      	mov	r3, r0
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d001      	beq.n	80177e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80177de:	f7ea fa07 	bl	8001bf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80177e2:	2180      	movs	r1, #128	; 0x80
 80177e4:	4808      	ldr	r0, [pc, #32]	; (8017808 <USBD_LL_Init+0x94>)
 80177e6:	f7f3 fcca 	bl	800b17e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80177ea:	2240      	movs	r2, #64	; 0x40
 80177ec:	2100      	movs	r1, #0
 80177ee:	4806      	ldr	r0, [pc, #24]	; (8017808 <USBD_LL_Init+0x94>)
 80177f0:	f7f3 fc7e 	bl	800b0f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80177f4:	2280      	movs	r2, #128	; 0x80
 80177f6:	2101      	movs	r1, #1
 80177f8:	4803      	ldr	r0, [pc, #12]	; (8017808 <USBD_LL_Init+0x94>)
 80177fa:	f7f3 fc79 	bl	800b0f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80177fe:	2300      	movs	r3, #0
}
 8017800:	4618      	mov	r0, r3
 8017802:	3708      	adds	r7, #8
 8017804:	46bd      	mov	sp, r7
 8017806:	bd80      	pop	{r7, pc}
 8017808:	200053cc 	.word	0x200053cc

0801780c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b084      	sub	sp, #16
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017814:	2300      	movs	r3, #0
 8017816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017818:	2300      	movs	r3, #0
 801781a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017822:	4618      	mov	r0, r3
 8017824:	f7f2 fc07 	bl	800a036 <HAL_PCD_Start>
 8017828:	4603      	mov	r3, r0
 801782a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801782c:	7bfb      	ldrb	r3, [r7, #15]
 801782e:	4618      	mov	r0, r3
 8017830:	f000 f9b0 	bl	8017b94 <USBD_Get_USB_Status>
 8017834:	4603      	mov	r3, r0
 8017836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017838:	7bbb      	ldrb	r3, [r7, #14]
}
 801783a:	4618      	mov	r0, r3
 801783c:	3710      	adds	r7, #16
 801783e:	46bd      	mov	sp, r7
 8017840:	bd80      	pop	{r7, pc}

08017842 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017842:	b580      	push	{r7, lr}
 8017844:	b084      	sub	sp, #16
 8017846:	af00      	add	r7, sp, #0
 8017848:	6078      	str	r0, [r7, #4]
 801784a:	4608      	mov	r0, r1
 801784c:	4611      	mov	r1, r2
 801784e:	461a      	mov	r2, r3
 8017850:	4603      	mov	r3, r0
 8017852:	70fb      	strb	r3, [r7, #3]
 8017854:	460b      	mov	r3, r1
 8017856:	70bb      	strb	r3, [r7, #2]
 8017858:	4613      	mov	r3, r2
 801785a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801785c:	2300      	movs	r3, #0
 801785e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017860:	2300      	movs	r3, #0
 8017862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801786a:	78bb      	ldrb	r3, [r7, #2]
 801786c:	883a      	ldrh	r2, [r7, #0]
 801786e:	78f9      	ldrb	r1, [r7, #3]
 8017870:	f7f3 f818 	bl	800a8a4 <HAL_PCD_EP_Open>
 8017874:	4603      	mov	r3, r0
 8017876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017878:	7bfb      	ldrb	r3, [r7, #15]
 801787a:	4618      	mov	r0, r3
 801787c:	f000 f98a 	bl	8017b94 <USBD_Get_USB_Status>
 8017880:	4603      	mov	r3, r0
 8017882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017884:	7bbb      	ldrb	r3, [r7, #14]
}
 8017886:	4618      	mov	r0, r3
 8017888:	3710      	adds	r7, #16
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}

0801788e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801788e:	b580      	push	{r7, lr}
 8017890:	b084      	sub	sp, #16
 8017892:	af00      	add	r7, sp, #0
 8017894:	6078      	str	r0, [r7, #4]
 8017896:	460b      	mov	r3, r1
 8017898:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801789a:	2300      	movs	r3, #0
 801789c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801789e:	2300      	movs	r3, #0
 80178a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80178a8:	78fa      	ldrb	r2, [r7, #3]
 80178aa:	4611      	mov	r1, r2
 80178ac:	4618      	mov	r0, r3
 80178ae:	f7f3 f861 	bl	800a974 <HAL_PCD_EP_Close>
 80178b2:	4603      	mov	r3, r0
 80178b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178b6:	7bfb      	ldrb	r3, [r7, #15]
 80178b8:	4618      	mov	r0, r3
 80178ba:	f000 f96b 	bl	8017b94 <USBD_Get_USB_Status>
 80178be:	4603      	mov	r3, r0
 80178c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80178c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80178c4:	4618      	mov	r0, r3
 80178c6:	3710      	adds	r7, #16
 80178c8:	46bd      	mov	sp, r7
 80178ca:	bd80      	pop	{r7, pc}

080178cc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b084      	sub	sp, #16
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
 80178d4:	460b      	mov	r3, r1
 80178d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178d8:	2300      	movs	r3, #0
 80178da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178dc:	2300      	movs	r3, #0
 80178de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80178e6:	78fa      	ldrb	r2, [r7, #3]
 80178e8:	4611      	mov	r1, r2
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7f3 f9f3 	bl	800acd6 <HAL_PCD_EP_Flush>
 80178f0:	4603      	mov	r3, r0
 80178f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178f4:	7bfb      	ldrb	r3, [r7, #15]
 80178f6:	4618      	mov	r0, r3
 80178f8:	f000 f94c 	bl	8017b94 <USBD_Get_USB_Status>
 80178fc:	4603      	mov	r3, r0
 80178fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017900:	7bbb      	ldrb	r3, [r7, #14]
}
 8017902:	4618      	mov	r0, r3
 8017904:	3710      	adds	r7, #16
 8017906:	46bd      	mov	sp, r7
 8017908:	bd80      	pop	{r7, pc}

0801790a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801790a:	b580      	push	{r7, lr}
 801790c:	b084      	sub	sp, #16
 801790e:	af00      	add	r7, sp, #0
 8017910:	6078      	str	r0, [r7, #4]
 8017912:	460b      	mov	r3, r1
 8017914:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017916:	2300      	movs	r3, #0
 8017918:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801791a:	2300      	movs	r3, #0
 801791c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017924:	78fa      	ldrb	r2, [r7, #3]
 8017926:	4611      	mov	r1, r2
 8017928:	4618      	mov	r0, r3
 801792a:	f7f3 f91a 	bl	800ab62 <HAL_PCD_EP_SetStall>
 801792e:	4603      	mov	r3, r0
 8017930:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017932:	7bfb      	ldrb	r3, [r7, #15]
 8017934:	4618      	mov	r0, r3
 8017936:	f000 f92d 	bl	8017b94 <USBD_Get_USB_Status>
 801793a:	4603      	mov	r3, r0
 801793c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801793e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017940:	4618      	mov	r0, r3
 8017942:	3710      	adds	r7, #16
 8017944:	46bd      	mov	sp, r7
 8017946:	bd80      	pop	{r7, pc}

08017948 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017948:	b580      	push	{r7, lr}
 801794a:	b084      	sub	sp, #16
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]
 8017950:	460b      	mov	r3, r1
 8017952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017954:	2300      	movs	r3, #0
 8017956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017958:	2300      	movs	r3, #0
 801795a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017962:	78fa      	ldrb	r2, [r7, #3]
 8017964:	4611      	mov	r1, r2
 8017966:	4618      	mov	r0, r3
 8017968:	f7f3 f95f 	bl	800ac2a <HAL_PCD_EP_ClrStall>
 801796c:	4603      	mov	r3, r0
 801796e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017970:	7bfb      	ldrb	r3, [r7, #15]
 8017972:	4618      	mov	r0, r3
 8017974:	f000 f90e 	bl	8017b94 <USBD_Get_USB_Status>
 8017978:	4603      	mov	r3, r0
 801797a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801797c:	7bbb      	ldrb	r3, [r7, #14]
}
 801797e:	4618      	mov	r0, r3
 8017980:	3710      	adds	r7, #16
 8017982:	46bd      	mov	sp, r7
 8017984:	bd80      	pop	{r7, pc}

08017986 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017986:	b480      	push	{r7}
 8017988:	b085      	sub	sp, #20
 801798a:	af00      	add	r7, sp, #0
 801798c:	6078      	str	r0, [r7, #4]
 801798e:	460b      	mov	r3, r1
 8017990:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017998:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801799a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	da0b      	bge.n	80179ba <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80179a2:	78fb      	ldrb	r3, [r7, #3]
 80179a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80179a8:	68f9      	ldr	r1, [r7, #12]
 80179aa:	4613      	mov	r3, r2
 80179ac:	00db      	lsls	r3, r3, #3
 80179ae:	1a9b      	subs	r3, r3, r2
 80179b0:	009b      	lsls	r3, r3, #2
 80179b2:	440b      	add	r3, r1
 80179b4:	333e      	adds	r3, #62	; 0x3e
 80179b6:	781b      	ldrb	r3, [r3, #0]
 80179b8:	e00b      	b.n	80179d2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80179ba:	78fb      	ldrb	r3, [r7, #3]
 80179bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80179c0:	68f9      	ldr	r1, [r7, #12]
 80179c2:	4613      	mov	r3, r2
 80179c4:	00db      	lsls	r3, r3, #3
 80179c6:	1a9b      	subs	r3, r3, r2
 80179c8:	009b      	lsls	r3, r3, #2
 80179ca:	440b      	add	r3, r1
 80179cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80179d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	3714      	adds	r7, #20
 80179d6:	46bd      	mov	sp, r7
 80179d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179dc:	4770      	bx	lr

080179de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80179de:	b580      	push	{r7, lr}
 80179e0:	b084      	sub	sp, #16
 80179e2:	af00      	add	r7, sp, #0
 80179e4:	6078      	str	r0, [r7, #4]
 80179e6:	460b      	mov	r3, r1
 80179e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179ea:	2300      	movs	r3, #0
 80179ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179ee:	2300      	movs	r3, #0
 80179f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80179f8:	78fa      	ldrb	r2, [r7, #3]
 80179fa:	4611      	mov	r1, r2
 80179fc:	4618      	mov	r0, r3
 80179fe:	f7f2 ff2c 	bl	800a85a <HAL_PCD_SetAddress>
 8017a02:	4603      	mov	r3, r0
 8017a04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a06:	7bfb      	ldrb	r3, [r7, #15]
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f000 f8c3 	bl	8017b94 <USBD_Get_USB_Status>
 8017a0e:	4603      	mov	r3, r0
 8017a10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a14:	4618      	mov	r0, r3
 8017a16:	3710      	adds	r7, #16
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	bd80      	pop	{r7, pc}

08017a1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b086      	sub	sp, #24
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	60f8      	str	r0, [r7, #12]
 8017a24:	607a      	str	r2, [r7, #4]
 8017a26:	603b      	str	r3, [r7, #0]
 8017a28:	460b      	mov	r3, r1
 8017a2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a30:	2300      	movs	r3, #0
 8017a32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017a3a:	7af9      	ldrb	r1, [r7, #11]
 8017a3c:	683b      	ldr	r3, [r7, #0]
 8017a3e:	687a      	ldr	r2, [r7, #4]
 8017a40:	f7f3 f845 	bl	800aace <HAL_PCD_EP_Transmit>
 8017a44:	4603      	mov	r3, r0
 8017a46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a48:	7dfb      	ldrb	r3, [r7, #23]
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f000 f8a2 	bl	8017b94 <USBD_Get_USB_Status>
 8017a50:	4603      	mov	r3, r0
 8017a52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017a54:	7dbb      	ldrb	r3, [r7, #22]
}
 8017a56:	4618      	mov	r0, r3
 8017a58:	3718      	adds	r7, #24
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	bd80      	pop	{r7, pc}

08017a5e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017a5e:	b580      	push	{r7, lr}
 8017a60:	b086      	sub	sp, #24
 8017a62:	af00      	add	r7, sp, #0
 8017a64:	60f8      	str	r0, [r7, #12]
 8017a66:	607a      	str	r2, [r7, #4]
 8017a68:	603b      	str	r3, [r7, #0]
 8017a6a:	460b      	mov	r3, r1
 8017a6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a6e:	2300      	movs	r3, #0
 8017a70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a72:	2300      	movs	r3, #0
 8017a74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017a7c:	7af9      	ldrb	r1, [r7, #11]
 8017a7e:	683b      	ldr	r3, [r7, #0]
 8017a80:	687a      	ldr	r2, [r7, #4]
 8017a82:	f7f2 ffc1 	bl	800aa08 <HAL_PCD_EP_Receive>
 8017a86:	4603      	mov	r3, r0
 8017a88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a8a:	7dfb      	ldrb	r3, [r7, #23]
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f000 f881 	bl	8017b94 <USBD_Get_USB_Status>
 8017a92:	4603      	mov	r3, r0
 8017a94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017a96:	7dbb      	ldrb	r3, [r7, #22]
}
 8017a98:	4618      	mov	r0, r3
 8017a9a:	3718      	adds	r7, #24
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}

08017aa0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b082      	sub	sp, #8
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
 8017aa8:	460b      	mov	r3, r1
 8017aaa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017ab2:	78fa      	ldrb	r2, [r7, #3]
 8017ab4:	4611      	mov	r1, r2
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	f7f2 fff1 	bl	800aa9e <HAL_PCD_EP_GetRxCount>
 8017abc:	4603      	mov	r3, r0
}
 8017abe:	4618      	mov	r0, r3
 8017ac0:	3708      	adds	r7, #8
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	bd80      	pop	{r7, pc}
	...

08017ac8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b082      	sub	sp, #8
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
 8017ad0:	460b      	mov	r3, r1
 8017ad2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017ad4:	78fb      	ldrb	r3, [r7, #3]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d002      	beq.n	8017ae0 <HAL_PCDEx_LPM_Callback+0x18>
 8017ada:	2b01      	cmp	r3, #1
 8017adc:	d01f      	beq.n	8017b1e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8017ade:	e03b      	b.n	8017b58 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	6a1b      	ldr	r3, [r3, #32]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d007      	beq.n	8017af8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8017ae8:	f7e9 fcc2 	bl	8001470 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017aec:	4b1c      	ldr	r3, [pc, #112]	; (8017b60 <HAL_PCDEx_LPM_Callback+0x98>)
 8017aee:	691b      	ldr	r3, [r3, #16]
 8017af0:	4a1b      	ldr	r2, [pc, #108]	; (8017b60 <HAL_PCDEx_LPM_Callback+0x98>)
 8017af2:	f023 0306 	bic.w	r3, r3, #6
 8017af6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	687a      	ldr	r2, [r7, #4]
 8017b04:	6812      	ldr	r2, [r2, #0]
 8017b06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017b0a:	f023 0301 	bic.w	r3, r3, #1
 8017b0e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017b16:	4618      	mov	r0, r3
 8017b18:	f7fb fcc7 	bl	80134aa <USBD_LL_Resume>
    break;
 8017b1c:	e01c      	b.n	8017b58 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	687a      	ldr	r2, [r7, #4]
 8017b2a:	6812      	ldr	r2, [r2, #0]
 8017b2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017b30:	f043 0301 	orr.w	r3, r3, #1
 8017b34:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f7fb fc9e 	bl	801347e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	6a1b      	ldr	r3, [r3, #32]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d005      	beq.n	8017b56 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017b4a:	4b05      	ldr	r3, [pc, #20]	; (8017b60 <HAL_PCDEx_LPM_Callback+0x98>)
 8017b4c:	691b      	ldr	r3, [r3, #16]
 8017b4e:	4a04      	ldr	r2, [pc, #16]	; (8017b60 <HAL_PCDEx_LPM_Callback+0x98>)
 8017b50:	f043 0306 	orr.w	r3, r3, #6
 8017b54:	6113      	str	r3, [r2, #16]
    break;
 8017b56:	bf00      	nop
}
 8017b58:	bf00      	nop
 8017b5a:	3708      	adds	r7, #8
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	bd80      	pop	{r7, pc}
 8017b60:	e000ed00 	.word	0xe000ed00

08017b64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017b64:	b480      	push	{r7}
 8017b66:	b083      	sub	sp, #12
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017b6c:	4b03      	ldr	r3, [pc, #12]	; (8017b7c <USBD_static_malloc+0x18>)
}
 8017b6e:	4618      	mov	r0, r3
 8017b70:	370c      	adds	r7, #12
 8017b72:	46bd      	mov	sp, r7
 8017b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b78:	4770      	bx	lr
 8017b7a:	bf00      	nop
 8017b7c:	20000418 	.word	0x20000418

08017b80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017b80:	b480      	push	{r7}
 8017b82:	b083      	sub	sp, #12
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]

}
 8017b88:	bf00      	nop
 8017b8a:	370c      	adds	r7, #12
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b92:	4770      	bx	lr

08017b94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017b94:	b480      	push	{r7}
 8017b96:	b085      	sub	sp, #20
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017ba2:	79fb      	ldrb	r3, [r7, #7]
 8017ba4:	2b03      	cmp	r3, #3
 8017ba6:	d817      	bhi.n	8017bd8 <USBD_Get_USB_Status+0x44>
 8017ba8:	a201      	add	r2, pc, #4	; (adr r2, 8017bb0 <USBD_Get_USB_Status+0x1c>)
 8017baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bae:	bf00      	nop
 8017bb0:	08017bc1 	.word	0x08017bc1
 8017bb4:	08017bc7 	.word	0x08017bc7
 8017bb8:	08017bcd 	.word	0x08017bcd
 8017bbc:	08017bd3 	.word	0x08017bd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8017bc4:	e00b      	b.n	8017bde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017bc6:	2303      	movs	r3, #3
 8017bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8017bca:	e008      	b.n	8017bde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017bcc:	2301      	movs	r3, #1
 8017bce:	73fb      	strb	r3, [r7, #15]
    break;
 8017bd0:	e005      	b.n	8017bde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017bd2:	2303      	movs	r3, #3
 8017bd4:	73fb      	strb	r3, [r7, #15]
    break;
 8017bd6:	e002      	b.n	8017bde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017bd8:	2303      	movs	r3, #3
 8017bda:	73fb      	strb	r3, [r7, #15]
    break;
 8017bdc:	bf00      	nop
  }
  return usb_status;
 8017bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8017be0:	4618      	mov	r0, r3
 8017be2:	3714      	adds	r7, #20
 8017be4:	46bd      	mov	sp, r7
 8017be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bea:	4770      	bx	lr

08017bec <__errno>:
 8017bec:	4b01      	ldr	r3, [pc, #4]	; (8017bf4 <__errno+0x8>)
 8017bee:	6818      	ldr	r0, [r3, #0]
 8017bf0:	4770      	bx	lr
 8017bf2:	bf00      	nop
 8017bf4:	20000174 	.word	0x20000174

08017bf8 <__libc_init_array>:
 8017bf8:	b570      	push	{r4, r5, r6, lr}
 8017bfa:	4d0d      	ldr	r5, [pc, #52]	; (8017c30 <__libc_init_array+0x38>)
 8017bfc:	4c0d      	ldr	r4, [pc, #52]	; (8017c34 <__libc_init_array+0x3c>)
 8017bfe:	1b64      	subs	r4, r4, r5
 8017c00:	10a4      	asrs	r4, r4, #2
 8017c02:	2600      	movs	r6, #0
 8017c04:	42a6      	cmp	r6, r4
 8017c06:	d109      	bne.n	8017c1c <__libc_init_array+0x24>
 8017c08:	4d0b      	ldr	r5, [pc, #44]	; (8017c38 <__libc_init_array+0x40>)
 8017c0a:	4c0c      	ldr	r4, [pc, #48]	; (8017c3c <__libc_init_array+0x44>)
 8017c0c:	f000 fc4e 	bl	80184ac <_init>
 8017c10:	1b64      	subs	r4, r4, r5
 8017c12:	10a4      	asrs	r4, r4, #2
 8017c14:	2600      	movs	r6, #0
 8017c16:	42a6      	cmp	r6, r4
 8017c18:	d105      	bne.n	8017c26 <__libc_init_array+0x2e>
 8017c1a:	bd70      	pop	{r4, r5, r6, pc}
 8017c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c20:	4798      	blx	r3
 8017c22:	3601      	adds	r6, #1
 8017c24:	e7ee      	b.n	8017c04 <__libc_init_array+0xc>
 8017c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c2a:	4798      	blx	r3
 8017c2c:	3601      	adds	r6, #1
 8017c2e:	e7f2      	b.n	8017c16 <__libc_init_array+0x1e>
 8017c30:	08018a58 	.word	0x08018a58
 8017c34:	08018a58 	.word	0x08018a58
 8017c38:	08018a58 	.word	0x08018a58
 8017c3c:	08018a5c 	.word	0x08018a5c

08017c40 <memset>:
 8017c40:	4402      	add	r2, r0
 8017c42:	4603      	mov	r3, r0
 8017c44:	4293      	cmp	r3, r2
 8017c46:	d100      	bne.n	8017c4a <memset+0xa>
 8017c48:	4770      	bx	lr
 8017c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8017c4e:	e7f9      	b.n	8017c44 <memset+0x4>

08017c50 <siprintf>:
 8017c50:	b40e      	push	{r1, r2, r3}
 8017c52:	b500      	push	{lr}
 8017c54:	b09c      	sub	sp, #112	; 0x70
 8017c56:	ab1d      	add	r3, sp, #116	; 0x74
 8017c58:	9002      	str	r0, [sp, #8]
 8017c5a:	9006      	str	r0, [sp, #24]
 8017c5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017c60:	4809      	ldr	r0, [pc, #36]	; (8017c88 <siprintf+0x38>)
 8017c62:	9107      	str	r1, [sp, #28]
 8017c64:	9104      	str	r1, [sp, #16]
 8017c66:	4909      	ldr	r1, [pc, #36]	; (8017c8c <siprintf+0x3c>)
 8017c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c6c:	9105      	str	r1, [sp, #20]
 8017c6e:	6800      	ldr	r0, [r0, #0]
 8017c70:	9301      	str	r3, [sp, #4]
 8017c72:	a902      	add	r1, sp, #8
 8017c74:	f000 f868 	bl	8017d48 <_svfiprintf_r>
 8017c78:	9b02      	ldr	r3, [sp, #8]
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	701a      	strb	r2, [r3, #0]
 8017c7e:	b01c      	add	sp, #112	; 0x70
 8017c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c84:	b003      	add	sp, #12
 8017c86:	4770      	bx	lr
 8017c88:	20000174 	.word	0x20000174
 8017c8c:	ffff0208 	.word	0xffff0208

08017c90 <__ssputs_r>:
 8017c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c94:	688e      	ldr	r6, [r1, #8]
 8017c96:	429e      	cmp	r6, r3
 8017c98:	4682      	mov	sl, r0
 8017c9a:	460c      	mov	r4, r1
 8017c9c:	4690      	mov	r8, r2
 8017c9e:	461f      	mov	r7, r3
 8017ca0:	d838      	bhi.n	8017d14 <__ssputs_r+0x84>
 8017ca2:	898a      	ldrh	r2, [r1, #12]
 8017ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017ca8:	d032      	beq.n	8017d10 <__ssputs_r+0x80>
 8017caa:	6825      	ldr	r5, [r4, #0]
 8017cac:	6909      	ldr	r1, [r1, #16]
 8017cae:	eba5 0901 	sub.w	r9, r5, r1
 8017cb2:	6965      	ldr	r5, [r4, #20]
 8017cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017cbc:	3301      	adds	r3, #1
 8017cbe:	444b      	add	r3, r9
 8017cc0:	106d      	asrs	r5, r5, #1
 8017cc2:	429d      	cmp	r5, r3
 8017cc4:	bf38      	it	cc
 8017cc6:	461d      	movcc	r5, r3
 8017cc8:	0553      	lsls	r3, r2, #21
 8017cca:	d531      	bpl.n	8017d30 <__ssputs_r+0xa0>
 8017ccc:	4629      	mov	r1, r5
 8017cce:	f000 fb47 	bl	8018360 <_malloc_r>
 8017cd2:	4606      	mov	r6, r0
 8017cd4:	b950      	cbnz	r0, 8017cec <__ssputs_r+0x5c>
 8017cd6:	230c      	movs	r3, #12
 8017cd8:	f8ca 3000 	str.w	r3, [sl]
 8017cdc:	89a3      	ldrh	r3, [r4, #12]
 8017cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ce2:	81a3      	strh	r3, [r4, #12]
 8017ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cec:	6921      	ldr	r1, [r4, #16]
 8017cee:	464a      	mov	r2, r9
 8017cf0:	f000 fabe 	bl	8018270 <memcpy>
 8017cf4:	89a3      	ldrh	r3, [r4, #12]
 8017cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017cfe:	81a3      	strh	r3, [r4, #12]
 8017d00:	6126      	str	r6, [r4, #16]
 8017d02:	6165      	str	r5, [r4, #20]
 8017d04:	444e      	add	r6, r9
 8017d06:	eba5 0509 	sub.w	r5, r5, r9
 8017d0a:	6026      	str	r6, [r4, #0]
 8017d0c:	60a5      	str	r5, [r4, #8]
 8017d0e:	463e      	mov	r6, r7
 8017d10:	42be      	cmp	r6, r7
 8017d12:	d900      	bls.n	8017d16 <__ssputs_r+0x86>
 8017d14:	463e      	mov	r6, r7
 8017d16:	4632      	mov	r2, r6
 8017d18:	6820      	ldr	r0, [r4, #0]
 8017d1a:	4641      	mov	r1, r8
 8017d1c:	f000 fab6 	bl	801828c <memmove>
 8017d20:	68a3      	ldr	r3, [r4, #8]
 8017d22:	6822      	ldr	r2, [r4, #0]
 8017d24:	1b9b      	subs	r3, r3, r6
 8017d26:	4432      	add	r2, r6
 8017d28:	60a3      	str	r3, [r4, #8]
 8017d2a:	6022      	str	r2, [r4, #0]
 8017d2c:	2000      	movs	r0, #0
 8017d2e:	e7db      	b.n	8017ce8 <__ssputs_r+0x58>
 8017d30:	462a      	mov	r2, r5
 8017d32:	f000 fb6f 	bl	8018414 <_realloc_r>
 8017d36:	4606      	mov	r6, r0
 8017d38:	2800      	cmp	r0, #0
 8017d3a:	d1e1      	bne.n	8017d00 <__ssputs_r+0x70>
 8017d3c:	6921      	ldr	r1, [r4, #16]
 8017d3e:	4650      	mov	r0, sl
 8017d40:	f000 fabe 	bl	80182c0 <_free_r>
 8017d44:	e7c7      	b.n	8017cd6 <__ssputs_r+0x46>
	...

08017d48 <_svfiprintf_r>:
 8017d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d4c:	4698      	mov	r8, r3
 8017d4e:	898b      	ldrh	r3, [r1, #12]
 8017d50:	061b      	lsls	r3, r3, #24
 8017d52:	b09d      	sub	sp, #116	; 0x74
 8017d54:	4607      	mov	r7, r0
 8017d56:	460d      	mov	r5, r1
 8017d58:	4614      	mov	r4, r2
 8017d5a:	d50e      	bpl.n	8017d7a <_svfiprintf_r+0x32>
 8017d5c:	690b      	ldr	r3, [r1, #16]
 8017d5e:	b963      	cbnz	r3, 8017d7a <_svfiprintf_r+0x32>
 8017d60:	2140      	movs	r1, #64	; 0x40
 8017d62:	f000 fafd 	bl	8018360 <_malloc_r>
 8017d66:	6028      	str	r0, [r5, #0]
 8017d68:	6128      	str	r0, [r5, #16]
 8017d6a:	b920      	cbnz	r0, 8017d76 <_svfiprintf_r+0x2e>
 8017d6c:	230c      	movs	r3, #12
 8017d6e:	603b      	str	r3, [r7, #0]
 8017d70:	f04f 30ff 	mov.w	r0, #4294967295
 8017d74:	e0d1      	b.n	8017f1a <_svfiprintf_r+0x1d2>
 8017d76:	2340      	movs	r3, #64	; 0x40
 8017d78:	616b      	str	r3, [r5, #20]
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8017d7e:	2320      	movs	r3, #32
 8017d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d88:	2330      	movs	r3, #48	; 0x30
 8017d8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017f34 <_svfiprintf_r+0x1ec>
 8017d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017d92:	f04f 0901 	mov.w	r9, #1
 8017d96:	4623      	mov	r3, r4
 8017d98:	469a      	mov	sl, r3
 8017d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d9e:	b10a      	cbz	r2, 8017da4 <_svfiprintf_r+0x5c>
 8017da0:	2a25      	cmp	r2, #37	; 0x25
 8017da2:	d1f9      	bne.n	8017d98 <_svfiprintf_r+0x50>
 8017da4:	ebba 0b04 	subs.w	fp, sl, r4
 8017da8:	d00b      	beq.n	8017dc2 <_svfiprintf_r+0x7a>
 8017daa:	465b      	mov	r3, fp
 8017dac:	4622      	mov	r2, r4
 8017dae:	4629      	mov	r1, r5
 8017db0:	4638      	mov	r0, r7
 8017db2:	f7ff ff6d 	bl	8017c90 <__ssputs_r>
 8017db6:	3001      	adds	r0, #1
 8017db8:	f000 80aa 	beq.w	8017f10 <_svfiprintf_r+0x1c8>
 8017dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017dbe:	445a      	add	r2, fp
 8017dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8017dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	f000 80a2 	beq.w	8017f10 <_svfiprintf_r+0x1c8>
 8017dcc:	2300      	movs	r3, #0
 8017dce:	f04f 32ff 	mov.w	r2, #4294967295
 8017dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017dd6:	f10a 0a01 	add.w	sl, sl, #1
 8017dda:	9304      	str	r3, [sp, #16]
 8017ddc:	9307      	str	r3, [sp, #28]
 8017dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017de2:	931a      	str	r3, [sp, #104]	; 0x68
 8017de4:	4654      	mov	r4, sl
 8017de6:	2205      	movs	r2, #5
 8017de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017dec:	4851      	ldr	r0, [pc, #324]	; (8017f34 <_svfiprintf_r+0x1ec>)
 8017dee:	f7e8 fa0f 	bl	8000210 <memchr>
 8017df2:	9a04      	ldr	r2, [sp, #16]
 8017df4:	b9d8      	cbnz	r0, 8017e2e <_svfiprintf_r+0xe6>
 8017df6:	06d0      	lsls	r0, r2, #27
 8017df8:	bf44      	itt	mi
 8017dfa:	2320      	movmi	r3, #32
 8017dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e00:	0711      	lsls	r1, r2, #28
 8017e02:	bf44      	itt	mi
 8017e04:	232b      	movmi	r3, #43	; 0x2b
 8017e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8017e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8017e10:	d015      	beq.n	8017e3e <_svfiprintf_r+0xf6>
 8017e12:	9a07      	ldr	r2, [sp, #28]
 8017e14:	4654      	mov	r4, sl
 8017e16:	2000      	movs	r0, #0
 8017e18:	f04f 0c0a 	mov.w	ip, #10
 8017e1c:	4621      	mov	r1, r4
 8017e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e22:	3b30      	subs	r3, #48	; 0x30
 8017e24:	2b09      	cmp	r3, #9
 8017e26:	d94e      	bls.n	8017ec6 <_svfiprintf_r+0x17e>
 8017e28:	b1b0      	cbz	r0, 8017e58 <_svfiprintf_r+0x110>
 8017e2a:	9207      	str	r2, [sp, #28]
 8017e2c:	e014      	b.n	8017e58 <_svfiprintf_r+0x110>
 8017e2e:	eba0 0308 	sub.w	r3, r0, r8
 8017e32:	fa09 f303 	lsl.w	r3, r9, r3
 8017e36:	4313      	orrs	r3, r2
 8017e38:	9304      	str	r3, [sp, #16]
 8017e3a:	46a2      	mov	sl, r4
 8017e3c:	e7d2      	b.n	8017de4 <_svfiprintf_r+0x9c>
 8017e3e:	9b03      	ldr	r3, [sp, #12]
 8017e40:	1d19      	adds	r1, r3, #4
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	9103      	str	r1, [sp, #12]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	bfbb      	ittet	lt
 8017e4a:	425b      	neglt	r3, r3
 8017e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8017e50:	9307      	strge	r3, [sp, #28]
 8017e52:	9307      	strlt	r3, [sp, #28]
 8017e54:	bfb8      	it	lt
 8017e56:	9204      	strlt	r2, [sp, #16]
 8017e58:	7823      	ldrb	r3, [r4, #0]
 8017e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8017e5c:	d10c      	bne.n	8017e78 <_svfiprintf_r+0x130>
 8017e5e:	7863      	ldrb	r3, [r4, #1]
 8017e60:	2b2a      	cmp	r3, #42	; 0x2a
 8017e62:	d135      	bne.n	8017ed0 <_svfiprintf_r+0x188>
 8017e64:	9b03      	ldr	r3, [sp, #12]
 8017e66:	1d1a      	adds	r2, r3, #4
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	9203      	str	r2, [sp, #12]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	bfb8      	it	lt
 8017e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8017e74:	3402      	adds	r4, #2
 8017e76:	9305      	str	r3, [sp, #20]
 8017e78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017f44 <_svfiprintf_r+0x1fc>
 8017e7c:	7821      	ldrb	r1, [r4, #0]
 8017e7e:	2203      	movs	r2, #3
 8017e80:	4650      	mov	r0, sl
 8017e82:	f7e8 f9c5 	bl	8000210 <memchr>
 8017e86:	b140      	cbz	r0, 8017e9a <_svfiprintf_r+0x152>
 8017e88:	2340      	movs	r3, #64	; 0x40
 8017e8a:	eba0 000a 	sub.w	r0, r0, sl
 8017e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8017e92:	9b04      	ldr	r3, [sp, #16]
 8017e94:	4303      	orrs	r3, r0
 8017e96:	3401      	adds	r4, #1
 8017e98:	9304      	str	r3, [sp, #16]
 8017e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e9e:	4826      	ldr	r0, [pc, #152]	; (8017f38 <_svfiprintf_r+0x1f0>)
 8017ea0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ea4:	2206      	movs	r2, #6
 8017ea6:	f7e8 f9b3 	bl	8000210 <memchr>
 8017eaa:	2800      	cmp	r0, #0
 8017eac:	d038      	beq.n	8017f20 <_svfiprintf_r+0x1d8>
 8017eae:	4b23      	ldr	r3, [pc, #140]	; (8017f3c <_svfiprintf_r+0x1f4>)
 8017eb0:	bb1b      	cbnz	r3, 8017efa <_svfiprintf_r+0x1b2>
 8017eb2:	9b03      	ldr	r3, [sp, #12]
 8017eb4:	3307      	adds	r3, #7
 8017eb6:	f023 0307 	bic.w	r3, r3, #7
 8017eba:	3308      	adds	r3, #8
 8017ebc:	9303      	str	r3, [sp, #12]
 8017ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ec0:	4433      	add	r3, r6
 8017ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ec4:	e767      	b.n	8017d96 <_svfiprintf_r+0x4e>
 8017ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8017eca:	460c      	mov	r4, r1
 8017ecc:	2001      	movs	r0, #1
 8017ece:	e7a5      	b.n	8017e1c <_svfiprintf_r+0xd4>
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	3401      	adds	r4, #1
 8017ed4:	9305      	str	r3, [sp, #20]
 8017ed6:	4619      	mov	r1, r3
 8017ed8:	f04f 0c0a 	mov.w	ip, #10
 8017edc:	4620      	mov	r0, r4
 8017ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ee2:	3a30      	subs	r2, #48	; 0x30
 8017ee4:	2a09      	cmp	r2, #9
 8017ee6:	d903      	bls.n	8017ef0 <_svfiprintf_r+0x1a8>
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d0c5      	beq.n	8017e78 <_svfiprintf_r+0x130>
 8017eec:	9105      	str	r1, [sp, #20]
 8017eee:	e7c3      	b.n	8017e78 <_svfiprintf_r+0x130>
 8017ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ef4:	4604      	mov	r4, r0
 8017ef6:	2301      	movs	r3, #1
 8017ef8:	e7f0      	b.n	8017edc <_svfiprintf_r+0x194>
 8017efa:	ab03      	add	r3, sp, #12
 8017efc:	9300      	str	r3, [sp, #0]
 8017efe:	462a      	mov	r2, r5
 8017f00:	4b0f      	ldr	r3, [pc, #60]	; (8017f40 <_svfiprintf_r+0x1f8>)
 8017f02:	a904      	add	r1, sp, #16
 8017f04:	4638      	mov	r0, r7
 8017f06:	f3af 8000 	nop.w
 8017f0a:	1c42      	adds	r2, r0, #1
 8017f0c:	4606      	mov	r6, r0
 8017f0e:	d1d6      	bne.n	8017ebe <_svfiprintf_r+0x176>
 8017f10:	89ab      	ldrh	r3, [r5, #12]
 8017f12:	065b      	lsls	r3, r3, #25
 8017f14:	f53f af2c 	bmi.w	8017d70 <_svfiprintf_r+0x28>
 8017f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f1a:	b01d      	add	sp, #116	; 0x74
 8017f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f20:	ab03      	add	r3, sp, #12
 8017f22:	9300      	str	r3, [sp, #0]
 8017f24:	462a      	mov	r2, r5
 8017f26:	4b06      	ldr	r3, [pc, #24]	; (8017f40 <_svfiprintf_r+0x1f8>)
 8017f28:	a904      	add	r1, sp, #16
 8017f2a:	4638      	mov	r0, r7
 8017f2c:	f000 f87a 	bl	8018024 <_printf_i>
 8017f30:	e7eb      	b.n	8017f0a <_svfiprintf_r+0x1c2>
 8017f32:	bf00      	nop
 8017f34:	08018a1c 	.word	0x08018a1c
 8017f38:	08018a26 	.word	0x08018a26
 8017f3c:	00000000 	.word	0x00000000
 8017f40:	08017c91 	.word	0x08017c91
 8017f44:	08018a22 	.word	0x08018a22

08017f48 <_printf_common>:
 8017f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f4c:	4616      	mov	r6, r2
 8017f4e:	4699      	mov	r9, r3
 8017f50:	688a      	ldr	r2, [r1, #8]
 8017f52:	690b      	ldr	r3, [r1, #16]
 8017f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017f58:	4293      	cmp	r3, r2
 8017f5a:	bfb8      	it	lt
 8017f5c:	4613      	movlt	r3, r2
 8017f5e:	6033      	str	r3, [r6, #0]
 8017f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017f64:	4607      	mov	r7, r0
 8017f66:	460c      	mov	r4, r1
 8017f68:	b10a      	cbz	r2, 8017f6e <_printf_common+0x26>
 8017f6a:	3301      	adds	r3, #1
 8017f6c:	6033      	str	r3, [r6, #0]
 8017f6e:	6823      	ldr	r3, [r4, #0]
 8017f70:	0699      	lsls	r1, r3, #26
 8017f72:	bf42      	ittt	mi
 8017f74:	6833      	ldrmi	r3, [r6, #0]
 8017f76:	3302      	addmi	r3, #2
 8017f78:	6033      	strmi	r3, [r6, #0]
 8017f7a:	6825      	ldr	r5, [r4, #0]
 8017f7c:	f015 0506 	ands.w	r5, r5, #6
 8017f80:	d106      	bne.n	8017f90 <_printf_common+0x48>
 8017f82:	f104 0a19 	add.w	sl, r4, #25
 8017f86:	68e3      	ldr	r3, [r4, #12]
 8017f88:	6832      	ldr	r2, [r6, #0]
 8017f8a:	1a9b      	subs	r3, r3, r2
 8017f8c:	42ab      	cmp	r3, r5
 8017f8e:	dc26      	bgt.n	8017fde <_printf_common+0x96>
 8017f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017f94:	1e13      	subs	r3, r2, #0
 8017f96:	6822      	ldr	r2, [r4, #0]
 8017f98:	bf18      	it	ne
 8017f9a:	2301      	movne	r3, #1
 8017f9c:	0692      	lsls	r2, r2, #26
 8017f9e:	d42b      	bmi.n	8017ff8 <_printf_common+0xb0>
 8017fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017fa4:	4649      	mov	r1, r9
 8017fa6:	4638      	mov	r0, r7
 8017fa8:	47c0      	blx	r8
 8017faa:	3001      	adds	r0, #1
 8017fac:	d01e      	beq.n	8017fec <_printf_common+0xa4>
 8017fae:	6823      	ldr	r3, [r4, #0]
 8017fb0:	68e5      	ldr	r5, [r4, #12]
 8017fb2:	6832      	ldr	r2, [r6, #0]
 8017fb4:	f003 0306 	and.w	r3, r3, #6
 8017fb8:	2b04      	cmp	r3, #4
 8017fba:	bf08      	it	eq
 8017fbc:	1aad      	subeq	r5, r5, r2
 8017fbe:	68a3      	ldr	r3, [r4, #8]
 8017fc0:	6922      	ldr	r2, [r4, #16]
 8017fc2:	bf0c      	ite	eq
 8017fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017fc8:	2500      	movne	r5, #0
 8017fca:	4293      	cmp	r3, r2
 8017fcc:	bfc4      	itt	gt
 8017fce:	1a9b      	subgt	r3, r3, r2
 8017fd0:	18ed      	addgt	r5, r5, r3
 8017fd2:	2600      	movs	r6, #0
 8017fd4:	341a      	adds	r4, #26
 8017fd6:	42b5      	cmp	r5, r6
 8017fd8:	d11a      	bne.n	8018010 <_printf_common+0xc8>
 8017fda:	2000      	movs	r0, #0
 8017fdc:	e008      	b.n	8017ff0 <_printf_common+0xa8>
 8017fde:	2301      	movs	r3, #1
 8017fe0:	4652      	mov	r2, sl
 8017fe2:	4649      	mov	r1, r9
 8017fe4:	4638      	mov	r0, r7
 8017fe6:	47c0      	blx	r8
 8017fe8:	3001      	adds	r0, #1
 8017fea:	d103      	bne.n	8017ff4 <_printf_common+0xac>
 8017fec:	f04f 30ff 	mov.w	r0, #4294967295
 8017ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ff4:	3501      	adds	r5, #1
 8017ff6:	e7c6      	b.n	8017f86 <_printf_common+0x3e>
 8017ff8:	18e1      	adds	r1, r4, r3
 8017ffa:	1c5a      	adds	r2, r3, #1
 8017ffc:	2030      	movs	r0, #48	; 0x30
 8017ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018002:	4422      	add	r2, r4
 8018004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801800c:	3302      	adds	r3, #2
 801800e:	e7c7      	b.n	8017fa0 <_printf_common+0x58>
 8018010:	2301      	movs	r3, #1
 8018012:	4622      	mov	r2, r4
 8018014:	4649      	mov	r1, r9
 8018016:	4638      	mov	r0, r7
 8018018:	47c0      	blx	r8
 801801a:	3001      	adds	r0, #1
 801801c:	d0e6      	beq.n	8017fec <_printf_common+0xa4>
 801801e:	3601      	adds	r6, #1
 8018020:	e7d9      	b.n	8017fd6 <_printf_common+0x8e>
	...

08018024 <_printf_i>:
 8018024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018028:	460c      	mov	r4, r1
 801802a:	4691      	mov	r9, r2
 801802c:	7e27      	ldrb	r7, [r4, #24]
 801802e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018030:	2f78      	cmp	r7, #120	; 0x78
 8018032:	4680      	mov	r8, r0
 8018034:	469a      	mov	sl, r3
 8018036:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801803a:	d807      	bhi.n	801804c <_printf_i+0x28>
 801803c:	2f62      	cmp	r7, #98	; 0x62
 801803e:	d80a      	bhi.n	8018056 <_printf_i+0x32>
 8018040:	2f00      	cmp	r7, #0
 8018042:	f000 80d8 	beq.w	80181f6 <_printf_i+0x1d2>
 8018046:	2f58      	cmp	r7, #88	; 0x58
 8018048:	f000 80a3 	beq.w	8018192 <_printf_i+0x16e>
 801804c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018054:	e03a      	b.n	80180cc <_printf_i+0xa8>
 8018056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801805a:	2b15      	cmp	r3, #21
 801805c:	d8f6      	bhi.n	801804c <_printf_i+0x28>
 801805e:	a001      	add	r0, pc, #4	; (adr r0, 8018064 <_printf_i+0x40>)
 8018060:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018064:	080180bd 	.word	0x080180bd
 8018068:	080180d1 	.word	0x080180d1
 801806c:	0801804d 	.word	0x0801804d
 8018070:	0801804d 	.word	0x0801804d
 8018074:	0801804d 	.word	0x0801804d
 8018078:	0801804d 	.word	0x0801804d
 801807c:	080180d1 	.word	0x080180d1
 8018080:	0801804d 	.word	0x0801804d
 8018084:	0801804d 	.word	0x0801804d
 8018088:	0801804d 	.word	0x0801804d
 801808c:	0801804d 	.word	0x0801804d
 8018090:	080181dd 	.word	0x080181dd
 8018094:	08018101 	.word	0x08018101
 8018098:	080181bf 	.word	0x080181bf
 801809c:	0801804d 	.word	0x0801804d
 80180a0:	0801804d 	.word	0x0801804d
 80180a4:	080181ff 	.word	0x080181ff
 80180a8:	0801804d 	.word	0x0801804d
 80180ac:	08018101 	.word	0x08018101
 80180b0:	0801804d 	.word	0x0801804d
 80180b4:	0801804d 	.word	0x0801804d
 80180b8:	080181c7 	.word	0x080181c7
 80180bc:	680b      	ldr	r3, [r1, #0]
 80180be:	1d1a      	adds	r2, r3, #4
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	600a      	str	r2, [r1, #0]
 80180c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80180c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80180cc:	2301      	movs	r3, #1
 80180ce:	e0a3      	b.n	8018218 <_printf_i+0x1f4>
 80180d0:	6825      	ldr	r5, [r4, #0]
 80180d2:	6808      	ldr	r0, [r1, #0]
 80180d4:	062e      	lsls	r6, r5, #24
 80180d6:	f100 0304 	add.w	r3, r0, #4
 80180da:	d50a      	bpl.n	80180f2 <_printf_i+0xce>
 80180dc:	6805      	ldr	r5, [r0, #0]
 80180de:	600b      	str	r3, [r1, #0]
 80180e0:	2d00      	cmp	r5, #0
 80180e2:	da03      	bge.n	80180ec <_printf_i+0xc8>
 80180e4:	232d      	movs	r3, #45	; 0x2d
 80180e6:	426d      	negs	r5, r5
 80180e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180ec:	485e      	ldr	r0, [pc, #376]	; (8018268 <_printf_i+0x244>)
 80180ee:	230a      	movs	r3, #10
 80180f0:	e019      	b.n	8018126 <_printf_i+0x102>
 80180f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80180f6:	6805      	ldr	r5, [r0, #0]
 80180f8:	600b      	str	r3, [r1, #0]
 80180fa:	bf18      	it	ne
 80180fc:	b22d      	sxthne	r5, r5
 80180fe:	e7ef      	b.n	80180e0 <_printf_i+0xbc>
 8018100:	680b      	ldr	r3, [r1, #0]
 8018102:	6825      	ldr	r5, [r4, #0]
 8018104:	1d18      	adds	r0, r3, #4
 8018106:	6008      	str	r0, [r1, #0]
 8018108:	0628      	lsls	r0, r5, #24
 801810a:	d501      	bpl.n	8018110 <_printf_i+0xec>
 801810c:	681d      	ldr	r5, [r3, #0]
 801810e:	e002      	b.n	8018116 <_printf_i+0xf2>
 8018110:	0669      	lsls	r1, r5, #25
 8018112:	d5fb      	bpl.n	801810c <_printf_i+0xe8>
 8018114:	881d      	ldrh	r5, [r3, #0]
 8018116:	4854      	ldr	r0, [pc, #336]	; (8018268 <_printf_i+0x244>)
 8018118:	2f6f      	cmp	r7, #111	; 0x6f
 801811a:	bf0c      	ite	eq
 801811c:	2308      	moveq	r3, #8
 801811e:	230a      	movne	r3, #10
 8018120:	2100      	movs	r1, #0
 8018122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018126:	6866      	ldr	r6, [r4, #4]
 8018128:	60a6      	str	r6, [r4, #8]
 801812a:	2e00      	cmp	r6, #0
 801812c:	bfa2      	ittt	ge
 801812e:	6821      	ldrge	r1, [r4, #0]
 8018130:	f021 0104 	bicge.w	r1, r1, #4
 8018134:	6021      	strge	r1, [r4, #0]
 8018136:	b90d      	cbnz	r5, 801813c <_printf_i+0x118>
 8018138:	2e00      	cmp	r6, #0
 801813a:	d04d      	beq.n	80181d8 <_printf_i+0x1b4>
 801813c:	4616      	mov	r6, r2
 801813e:	fbb5 f1f3 	udiv	r1, r5, r3
 8018142:	fb03 5711 	mls	r7, r3, r1, r5
 8018146:	5dc7      	ldrb	r7, [r0, r7]
 8018148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801814c:	462f      	mov	r7, r5
 801814e:	42bb      	cmp	r3, r7
 8018150:	460d      	mov	r5, r1
 8018152:	d9f4      	bls.n	801813e <_printf_i+0x11a>
 8018154:	2b08      	cmp	r3, #8
 8018156:	d10b      	bne.n	8018170 <_printf_i+0x14c>
 8018158:	6823      	ldr	r3, [r4, #0]
 801815a:	07df      	lsls	r7, r3, #31
 801815c:	d508      	bpl.n	8018170 <_printf_i+0x14c>
 801815e:	6923      	ldr	r3, [r4, #16]
 8018160:	6861      	ldr	r1, [r4, #4]
 8018162:	4299      	cmp	r1, r3
 8018164:	bfde      	ittt	le
 8018166:	2330      	movle	r3, #48	; 0x30
 8018168:	f806 3c01 	strble.w	r3, [r6, #-1]
 801816c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018170:	1b92      	subs	r2, r2, r6
 8018172:	6122      	str	r2, [r4, #16]
 8018174:	f8cd a000 	str.w	sl, [sp]
 8018178:	464b      	mov	r3, r9
 801817a:	aa03      	add	r2, sp, #12
 801817c:	4621      	mov	r1, r4
 801817e:	4640      	mov	r0, r8
 8018180:	f7ff fee2 	bl	8017f48 <_printf_common>
 8018184:	3001      	adds	r0, #1
 8018186:	d14c      	bne.n	8018222 <_printf_i+0x1fe>
 8018188:	f04f 30ff 	mov.w	r0, #4294967295
 801818c:	b004      	add	sp, #16
 801818e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018192:	4835      	ldr	r0, [pc, #212]	; (8018268 <_printf_i+0x244>)
 8018194:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018198:	6823      	ldr	r3, [r4, #0]
 801819a:	680e      	ldr	r6, [r1, #0]
 801819c:	061f      	lsls	r7, r3, #24
 801819e:	f856 5b04 	ldr.w	r5, [r6], #4
 80181a2:	600e      	str	r6, [r1, #0]
 80181a4:	d514      	bpl.n	80181d0 <_printf_i+0x1ac>
 80181a6:	07d9      	lsls	r1, r3, #31
 80181a8:	bf44      	itt	mi
 80181aa:	f043 0320 	orrmi.w	r3, r3, #32
 80181ae:	6023      	strmi	r3, [r4, #0]
 80181b0:	b91d      	cbnz	r5, 80181ba <_printf_i+0x196>
 80181b2:	6823      	ldr	r3, [r4, #0]
 80181b4:	f023 0320 	bic.w	r3, r3, #32
 80181b8:	6023      	str	r3, [r4, #0]
 80181ba:	2310      	movs	r3, #16
 80181bc:	e7b0      	b.n	8018120 <_printf_i+0xfc>
 80181be:	6823      	ldr	r3, [r4, #0]
 80181c0:	f043 0320 	orr.w	r3, r3, #32
 80181c4:	6023      	str	r3, [r4, #0]
 80181c6:	2378      	movs	r3, #120	; 0x78
 80181c8:	4828      	ldr	r0, [pc, #160]	; (801826c <_printf_i+0x248>)
 80181ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80181ce:	e7e3      	b.n	8018198 <_printf_i+0x174>
 80181d0:	065e      	lsls	r6, r3, #25
 80181d2:	bf48      	it	mi
 80181d4:	b2ad      	uxthmi	r5, r5
 80181d6:	e7e6      	b.n	80181a6 <_printf_i+0x182>
 80181d8:	4616      	mov	r6, r2
 80181da:	e7bb      	b.n	8018154 <_printf_i+0x130>
 80181dc:	680b      	ldr	r3, [r1, #0]
 80181de:	6826      	ldr	r6, [r4, #0]
 80181e0:	6960      	ldr	r0, [r4, #20]
 80181e2:	1d1d      	adds	r5, r3, #4
 80181e4:	600d      	str	r5, [r1, #0]
 80181e6:	0635      	lsls	r5, r6, #24
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	d501      	bpl.n	80181f0 <_printf_i+0x1cc>
 80181ec:	6018      	str	r0, [r3, #0]
 80181ee:	e002      	b.n	80181f6 <_printf_i+0x1d2>
 80181f0:	0671      	lsls	r1, r6, #25
 80181f2:	d5fb      	bpl.n	80181ec <_printf_i+0x1c8>
 80181f4:	8018      	strh	r0, [r3, #0]
 80181f6:	2300      	movs	r3, #0
 80181f8:	6123      	str	r3, [r4, #16]
 80181fa:	4616      	mov	r6, r2
 80181fc:	e7ba      	b.n	8018174 <_printf_i+0x150>
 80181fe:	680b      	ldr	r3, [r1, #0]
 8018200:	1d1a      	adds	r2, r3, #4
 8018202:	600a      	str	r2, [r1, #0]
 8018204:	681e      	ldr	r6, [r3, #0]
 8018206:	6862      	ldr	r2, [r4, #4]
 8018208:	2100      	movs	r1, #0
 801820a:	4630      	mov	r0, r6
 801820c:	f7e8 f800 	bl	8000210 <memchr>
 8018210:	b108      	cbz	r0, 8018216 <_printf_i+0x1f2>
 8018212:	1b80      	subs	r0, r0, r6
 8018214:	6060      	str	r0, [r4, #4]
 8018216:	6863      	ldr	r3, [r4, #4]
 8018218:	6123      	str	r3, [r4, #16]
 801821a:	2300      	movs	r3, #0
 801821c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018220:	e7a8      	b.n	8018174 <_printf_i+0x150>
 8018222:	6923      	ldr	r3, [r4, #16]
 8018224:	4632      	mov	r2, r6
 8018226:	4649      	mov	r1, r9
 8018228:	4640      	mov	r0, r8
 801822a:	47d0      	blx	sl
 801822c:	3001      	adds	r0, #1
 801822e:	d0ab      	beq.n	8018188 <_printf_i+0x164>
 8018230:	6823      	ldr	r3, [r4, #0]
 8018232:	079b      	lsls	r3, r3, #30
 8018234:	d413      	bmi.n	801825e <_printf_i+0x23a>
 8018236:	68e0      	ldr	r0, [r4, #12]
 8018238:	9b03      	ldr	r3, [sp, #12]
 801823a:	4298      	cmp	r0, r3
 801823c:	bfb8      	it	lt
 801823e:	4618      	movlt	r0, r3
 8018240:	e7a4      	b.n	801818c <_printf_i+0x168>
 8018242:	2301      	movs	r3, #1
 8018244:	4632      	mov	r2, r6
 8018246:	4649      	mov	r1, r9
 8018248:	4640      	mov	r0, r8
 801824a:	47d0      	blx	sl
 801824c:	3001      	adds	r0, #1
 801824e:	d09b      	beq.n	8018188 <_printf_i+0x164>
 8018250:	3501      	adds	r5, #1
 8018252:	68e3      	ldr	r3, [r4, #12]
 8018254:	9903      	ldr	r1, [sp, #12]
 8018256:	1a5b      	subs	r3, r3, r1
 8018258:	42ab      	cmp	r3, r5
 801825a:	dcf2      	bgt.n	8018242 <_printf_i+0x21e>
 801825c:	e7eb      	b.n	8018236 <_printf_i+0x212>
 801825e:	2500      	movs	r5, #0
 8018260:	f104 0619 	add.w	r6, r4, #25
 8018264:	e7f5      	b.n	8018252 <_printf_i+0x22e>
 8018266:	bf00      	nop
 8018268:	08018a2d 	.word	0x08018a2d
 801826c:	08018a3e 	.word	0x08018a3e

08018270 <memcpy>:
 8018270:	440a      	add	r2, r1
 8018272:	4291      	cmp	r1, r2
 8018274:	f100 33ff 	add.w	r3, r0, #4294967295
 8018278:	d100      	bne.n	801827c <memcpy+0xc>
 801827a:	4770      	bx	lr
 801827c:	b510      	push	{r4, lr}
 801827e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018286:	4291      	cmp	r1, r2
 8018288:	d1f9      	bne.n	801827e <memcpy+0xe>
 801828a:	bd10      	pop	{r4, pc}

0801828c <memmove>:
 801828c:	4288      	cmp	r0, r1
 801828e:	b510      	push	{r4, lr}
 8018290:	eb01 0402 	add.w	r4, r1, r2
 8018294:	d902      	bls.n	801829c <memmove+0x10>
 8018296:	4284      	cmp	r4, r0
 8018298:	4623      	mov	r3, r4
 801829a:	d807      	bhi.n	80182ac <memmove+0x20>
 801829c:	1e43      	subs	r3, r0, #1
 801829e:	42a1      	cmp	r1, r4
 80182a0:	d008      	beq.n	80182b4 <memmove+0x28>
 80182a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80182a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80182aa:	e7f8      	b.n	801829e <memmove+0x12>
 80182ac:	4402      	add	r2, r0
 80182ae:	4601      	mov	r1, r0
 80182b0:	428a      	cmp	r2, r1
 80182b2:	d100      	bne.n	80182b6 <memmove+0x2a>
 80182b4:	bd10      	pop	{r4, pc}
 80182b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80182ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80182be:	e7f7      	b.n	80182b0 <memmove+0x24>

080182c0 <_free_r>:
 80182c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80182c2:	2900      	cmp	r1, #0
 80182c4:	d048      	beq.n	8018358 <_free_r+0x98>
 80182c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80182ca:	9001      	str	r0, [sp, #4]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	f1a1 0404 	sub.w	r4, r1, #4
 80182d2:	bfb8      	it	lt
 80182d4:	18e4      	addlt	r4, r4, r3
 80182d6:	f000 f8d3 	bl	8018480 <__malloc_lock>
 80182da:	4a20      	ldr	r2, [pc, #128]	; (801835c <_free_r+0x9c>)
 80182dc:	9801      	ldr	r0, [sp, #4]
 80182de:	6813      	ldr	r3, [r2, #0]
 80182e0:	4615      	mov	r5, r2
 80182e2:	b933      	cbnz	r3, 80182f2 <_free_r+0x32>
 80182e4:	6063      	str	r3, [r4, #4]
 80182e6:	6014      	str	r4, [r2, #0]
 80182e8:	b003      	add	sp, #12
 80182ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80182ee:	f000 b8cd 	b.w	801848c <__malloc_unlock>
 80182f2:	42a3      	cmp	r3, r4
 80182f4:	d90b      	bls.n	801830e <_free_r+0x4e>
 80182f6:	6821      	ldr	r1, [r4, #0]
 80182f8:	1862      	adds	r2, r4, r1
 80182fa:	4293      	cmp	r3, r2
 80182fc:	bf04      	itt	eq
 80182fe:	681a      	ldreq	r2, [r3, #0]
 8018300:	685b      	ldreq	r3, [r3, #4]
 8018302:	6063      	str	r3, [r4, #4]
 8018304:	bf04      	itt	eq
 8018306:	1852      	addeq	r2, r2, r1
 8018308:	6022      	streq	r2, [r4, #0]
 801830a:	602c      	str	r4, [r5, #0]
 801830c:	e7ec      	b.n	80182e8 <_free_r+0x28>
 801830e:	461a      	mov	r2, r3
 8018310:	685b      	ldr	r3, [r3, #4]
 8018312:	b10b      	cbz	r3, 8018318 <_free_r+0x58>
 8018314:	42a3      	cmp	r3, r4
 8018316:	d9fa      	bls.n	801830e <_free_r+0x4e>
 8018318:	6811      	ldr	r1, [r2, #0]
 801831a:	1855      	adds	r5, r2, r1
 801831c:	42a5      	cmp	r5, r4
 801831e:	d10b      	bne.n	8018338 <_free_r+0x78>
 8018320:	6824      	ldr	r4, [r4, #0]
 8018322:	4421      	add	r1, r4
 8018324:	1854      	adds	r4, r2, r1
 8018326:	42a3      	cmp	r3, r4
 8018328:	6011      	str	r1, [r2, #0]
 801832a:	d1dd      	bne.n	80182e8 <_free_r+0x28>
 801832c:	681c      	ldr	r4, [r3, #0]
 801832e:	685b      	ldr	r3, [r3, #4]
 8018330:	6053      	str	r3, [r2, #4]
 8018332:	4421      	add	r1, r4
 8018334:	6011      	str	r1, [r2, #0]
 8018336:	e7d7      	b.n	80182e8 <_free_r+0x28>
 8018338:	d902      	bls.n	8018340 <_free_r+0x80>
 801833a:	230c      	movs	r3, #12
 801833c:	6003      	str	r3, [r0, #0]
 801833e:	e7d3      	b.n	80182e8 <_free_r+0x28>
 8018340:	6825      	ldr	r5, [r4, #0]
 8018342:	1961      	adds	r1, r4, r5
 8018344:	428b      	cmp	r3, r1
 8018346:	bf04      	itt	eq
 8018348:	6819      	ldreq	r1, [r3, #0]
 801834a:	685b      	ldreq	r3, [r3, #4]
 801834c:	6063      	str	r3, [r4, #4]
 801834e:	bf04      	itt	eq
 8018350:	1949      	addeq	r1, r1, r5
 8018352:	6021      	streq	r1, [r4, #0]
 8018354:	6054      	str	r4, [r2, #4]
 8018356:	e7c7      	b.n	80182e8 <_free_r+0x28>
 8018358:	b003      	add	sp, #12
 801835a:	bd30      	pop	{r4, r5, pc}
 801835c:	20000690 	.word	0x20000690

08018360 <_malloc_r>:
 8018360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018362:	1ccd      	adds	r5, r1, #3
 8018364:	f025 0503 	bic.w	r5, r5, #3
 8018368:	3508      	adds	r5, #8
 801836a:	2d0c      	cmp	r5, #12
 801836c:	bf38      	it	cc
 801836e:	250c      	movcc	r5, #12
 8018370:	2d00      	cmp	r5, #0
 8018372:	4606      	mov	r6, r0
 8018374:	db01      	blt.n	801837a <_malloc_r+0x1a>
 8018376:	42a9      	cmp	r1, r5
 8018378:	d903      	bls.n	8018382 <_malloc_r+0x22>
 801837a:	230c      	movs	r3, #12
 801837c:	6033      	str	r3, [r6, #0]
 801837e:	2000      	movs	r0, #0
 8018380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018382:	f000 f87d 	bl	8018480 <__malloc_lock>
 8018386:	4921      	ldr	r1, [pc, #132]	; (801840c <_malloc_r+0xac>)
 8018388:	680a      	ldr	r2, [r1, #0]
 801838a:	4614      	mov	r4, r2
 801838c:	b99c      	cbnz	r4, 80183b6 <_malloc_r+0x56>
 801838e:	4f20      	ldr	r7, [pc, #128]	; (8018410 <_malloc_r+0xb0>)
 8018390:	683b      	ldr	r3, [r7, #0]
 8018392:	b923      	cbnz	r3, 801839e <_malloc_r+0x3e>
 8018394:	4621      	mov	r1, r4
 8018396:	4630      	mov	r0, r6
 8018398:	f000 f862 	bl	8018460 <_sbrk_r>
 801839c:	6038      	str	r0, [r7, #0]
 801839e:	4629      	mov	r1, r5
 80183a0:	4630      	mov	r0, r6
 80183a2:	f000 f85d 	bl	8018460 <_sbrk_r>
 80183a6:	1c43      	adds	r3, r0, #1
 80183a8:	d123      	bne.n	80183f2 <_malloc_r+0x92>
 80183aa:	230c      	movs	r3, #12
 80183ac:	6033      	str	r3, [r6, #0]
 80183ae:	4630      	mov	r0, r6
 80183b0:	f000 f86c 	bl	801848c <__malloc_unlock>
 80183b4:	e7e3      	b.n	801837e <_malloc_r+0x1e>
 80183b6:	6823      	ldr	r3, [r4, #0]
 80183b8:	1b5b      	subs	r3, r3, r5
 80183ba:	d417      	bmi.n	80183ec <_malloc_r+0x8c>
 80183bc:	2b0b      	cmp	r3, #11
 80183be:	d903      	bls.n	80183c8 <_malloc_r+0x68>
 80183c0:	6023      	str	r3, [r4, #0]
 80183c2:	441c      	add	r4, r3
 80183c4:	6025      	str	r5, [r4, #0]
 80183c6:	e004      	b.n	80183d2 <_malloc_r+0x72>
 80183c8:	6863      	ldr	r3, [r4, #4]
 80183ca:	42a2      	cmp	r2, r4
 80183cc:	bf0c      	ite	eq
 80183ce:	600b      	streq	r3, [r1, #0]
 80183d0:	6053      	strne	r3, [r2, #4]
 80183d2:	4630      	mov	r0, r6
 80183d4:	f000 f85a 	bl	801848c <__malloc_unlock>
 80183d8:	f104 000b 	add.w	r0, r4, #11
 80183dc:	1d23      	adds	r3, r4, #4
 80183de:	f020 0007 	bic.w	r0, r0, #7
 80183e2:	1ac2      	subs	r2, r0, r3
 80183e4:	d0cc      	beq.n	8018380 <_malloc_r+0x20>
 80183e6:	1a1b      	subs	r3, r3, r0
 80183e8:	50a3      	str	r3, [r4, r2]
 80183ea:	e7c9      	b.n	8018380 <_malloc_r+0x20>
 80183ec:	4622      	mov	r2, r4
 80183ee:	6864      	ldr	r4, [r4, #4]
 80183f0:	e7cc      	b.n	801838c <_malloc_r+0x2c>
 80183f2:	1cc4      	adds	r4, r0, #3
 80183f4:	f024 0403 	bic.w	r4, r4, #3
 80183f8:	42a0      	cmp	r0, r4
 80183fa:	d0e3      	beq.n	80183c4 <_malloc_r+0x64>
 80183fc:	1a21      	subs	r1, r4, r0
 80183fe:	4630      	mov	r0, r6
 8018400:	f000 f82e 	bl	8018460 <_sbrk_r>
 8018404:	3001      	adds	r0, #1
 8018406:	d1dd      	bne.n	80183c4 <_malloc_r+0x64>
 8018408:	e7cf      	b.n	80183aa <_malloc_r+0x4a>
 801840a:	bf00      	nop
 801840c:	20000690 	.word	0x20000690
 8018410:	20000694 	.word	0x20000694

08018414 <_realloc_r>:
 8018414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018416:	4607      	mov	r7, r0
 8018418:	4614      	mov	r4, r2
 801841a:	460e      	mov	r6, r1
 801841c:	b921      	cbnz	r1, 8018428 <_realloc_r+0x14>
 801841e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018422:	4611      	mov	r1, r2
 8018424:	f7ff bf9c 	b.w	8018360 <_malloc_r>
 8018428:	b922      	cbnz	r2, 8018434 <_realloc_r+0x20>
 801842a:	f7ff ff49 	bl	80182c0 <_free_r>
 801842e:	4625      	mov	r5, r4
 8018430:	4628      	mov	r0, r5
 8018432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018434:	f000 f830 	bl	8018498 <_malloc_usable_size_r>
 8018438:	42a0      	cmp	r0, r4
 801843a:	d20f      	bcs.n	801845c <_realloc_r+0x48>
 801843c:	4621      	mov	r1, r4
 801843e:	4638      	mov	r0, r7
 8018440:	f7ff ff8e 	bl	8018360 <_malloc_r>
 8018444:	4605      	mov	r5, r0
 8018446:	2800      	cmp	r0, #0
 8018448:	d0f2      	beq.n	8018430 <_realloc_r+0x1c>
 801844a:	4631      	mov	r1, r6
 801844c:	4622      	mov	r2, r4
 801844e:	f7ff ff0f 	bl	8018270 <memcpy>
 8018452:	4631      	mov	r1, r6
 8018454:	4638      	mov	r0, r7
 8018456:	f7ff ff33 	bl	80182c0 <_free_r>
 801845a:	e7e9      	b.n	8018430 <_realloc_r+0x1c>
 801845c:	4635      	mov	r5, r6
 801845e:	e7e7      	b.n	8018430 <_realloc_r+0x1c>

08018460 <_sbrk_r>:
 8018460:	b538      	push	{r3, r4, r5, lr}
 8018462:	4d06      	ldr	r5, [pc, #24]	; (801847c <_sbrk_r+0x1c>)
 8018464:	2300      	movs	r3, #0
 8018466:	4604      	mov	r4, r0
 8018468:	4608      	mov	r0, r1
 801846a:	602b      	str	r3, [r5, #0]
 801846c:	f7ee fa6e 	bl	800694c <_sbrk>
 8018470:	1c43      	adds	r3, r0, #1
 8018472:	d102      	bne.n	801847a <_sbrk_r+0x1a>
 8018474:	682b      	ldr	r3, [r5, #0]
 8018476:	b103      	cbz	r3, 801847a <_sbrk_r+0x1a>
 8018478:	6023      	str	r3, [r4, #0]
 801847a:	bd38      	pop	{r3, r4, r5, pc}
 801847c:	200057d4 	.word	0x200057d4

08018480 <__malloc_lock>:
 8018480:	4801      	ldr	r0, [pc, #4]	; (8018488 <__malloc_lock+0x8>)
 8018482:	f000 b811 	b.w	80184a8 <__retarget_lock_acquire_recursive>
 8018486:	bf00      	nop
 8018488:	200057dc 	.word	0x200057dc

0801848c <__malloc_unlock>:
 801848c:	4801      	ldr	r0, [pc, #4]	; (8018494 <__malloc_unlock+0x8>)
 801848e:	f000 b80c 	b.w	80184aa <__retarget_lock_release_recursive>
 8018492:	bf00      	nop
 8018494:	200057dc 	.word	0x200057dc

08018498 <_malloc_usable_size_r>:
 8018498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801849c:	1f18      	subs	r0, r3, #4
 801849e:	2b00      	cmp	r3, #0
 80184a0:	bfbc      	itt	lt
 80184a2:	580b      	ldrlt	r3, [r1, r0]
 80184a4:	18c0      	addlt	r0, r0, r3
 80184a6:	4770      	bx	lr

080184a8 <__retarget_lock_acquire_recursive>:
 80184a8:	4770      	bx	lr

080184aa <__retarget_lock_release_recursive>:
 80184aa:	4770      	bx	lr

080184ac <_init>:
 80184ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ae:	bf00      	nop
 80184b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184b2:	bc08      	pop	{r3}
 80184b4:	469e      	mov	lr, r3
 80184b6:	4770      	bx	lr

080184b8 <_fini>:
 80184b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ba:	bf00      	nop
 80184bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184be:	bc08      	pop	{r3}
 80184c0:	469e      	mov	lr, r3
 80184c2:	4770      	bx	lr
