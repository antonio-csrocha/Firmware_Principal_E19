
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000184d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  080186a4  080186a4  000286a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018c30  08018c30  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08018c30  08018c30  00028c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018c38  08018c38  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018c38  08018c38  00028c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018c3c  08018c3c  00028c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08018c40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006424  200001d8  08018e18  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  200065fc  08018e18  000365fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041954  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075d9  00000000  00000000  00071b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002368  00000000  00000000  00079138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002060  00000000  00000000  0007b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb22  00000000  00000000  0007d500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035e50  00000000  00000000  000ac022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3a6b  00000000  00000000  000e1e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d58dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096b4  00000000  00000000  001d5930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801868c 	.word	0x0801868c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0801868c 	.word	0x0801868c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <FT_CAN_FilterConfig>:
 */

#include "ft_can.h"

HAL_StatusTypeDef FT_CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint16_t FT_Product, uint8_t filter_bank_position, uint32_t Filter_FIFO)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b090      	sub	sp, #64	; 0x40
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	817b      	strh	r3, [r7, #10]
 80005b6:	4613      	mov	r3, r2
 80005b8:	727b      	strb	r3, [r7, #9]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = FT_Product << 13, mask_id = 0x1FF80000;
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	035b      	lsls	r3, r3, #13
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <FT_CAN_FilterConfig+0x68>)
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterBank = filter_bank_position;
 80005c4:	7a7b      	ldrb	r3, [r7, #9]
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80005d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d2:	0b5b      	lsrs	r3, r3, #13
 80005d4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80005d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	b29b      	uxth	r3, r3
 80005dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80005de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e0:	0b5b      	lsrs	r3, r3, #13
 80005e2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80005e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = Filter_FIFO;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.SlaveStartFilterBank = 14 + filter_bank_position;
 80005f4:	7a7b      	ldrb	r3, [r7, #9]
 80005f6:	330e      	adds	r3, #14
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f007 f88f 	bl	8007724 <HAL_CAN_ConfigFilter>
 8000606:	4603      	mov	r3, r0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3740      	adds	r7, #64	; 0x40
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	1ff80000 	.word	0x1ff80000

08000614 <FT_CAN_ProcessData>:

#ifndef FT_CAN_SIMPLE

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8000622:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800062a:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	f040 8258 	bne.w	8000ae8 <FT_CAN_ProcessData+0x4d4>
	{
		return;
	}

	switch(id >> 1)
 8000638:	89fb      	ldrh	r3, [r7, #14]
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	2b8d      	cmp	r3, #141	; 0x8d
 8000640:	f300 8166 	bgt.w	8000910 <FT_CAN_ProcessData+0x2fc>
 8000644:	2b00      	cmp	r3, #0
 8000646:	dc41      	bgt.n	80006cc <FT_CAN_ProcessData+0xb8>
 8000648:	e247      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
 800064a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800064e:	2b1b      	cmp	r3, #27
 8000650:	f200 8243 	bhi.w	8000ada <FT_CAN_ProcessData+0x4c6>
 8000654:	a201      	add	r2, pc, #4	; (adr r2, 800065c <FT_CAN_ProcessData+0x48>)
 8000656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065a:	bf00      	nop
 800065c:	08000a9f 	.word	0x08000a9f
 8000660:	08000adb 	.word	0x08000adb
 8000664:	08000adb 	.word	0x08000adb
 8000668:	08000adb 	.word	0x08000adb
 800066c:	08000adb 	.word	0x08000adb
 8000670:	08000adb 	.word	0x08000adb
 8000674:	08000adb 	.word	0x08000adb
 8000678:	08000adb 	.word	0x08000adb
 800067c:	08000adb 	.word	0x08000adb
 8000680:	08000adb 	.word	0x08000adb
 8000684:	08000adb 	.word	0x08000adb
 8000688:	08000adb 	.word	0x08000adb
 800068c:	08000adb 	.word	0x08000adb
 8000690:	08000adb 	.word	0x08000adb
 8000694:	08000adb 	.word	0x08000adb
 8000698:	08000adb 	.word	0x08000adb
 800069c:	08000adb 	.word	0x08000adb
 80006a0:	08000adb 	.word	0x08000adb
 80006a4:	08000aa9 	.word	0x08000aa9
 80006a8:	08000adb 	.word	0x08000adb
 80006ac:	08000adb 	.word	0x08000adb
 80006b0:	08000adb 	.word	0x08000adb
 80006b4:	08000adb 	.word	0x08000adb
 80006b8:	08000adb 	.word	0x08000adb
 80006bc:	08000ab3 	.word	0x08000ab3
 80006c0:	08000abd 	.word	0x08000abd
 80006c4:	08000ac7 	.word	0x08000ac7
 80006c8:	08000ad1 	.word	0x08000ad1
 80006cc:	3b01      	subs	r3, #1
 80006ce:	2b8c      	cmp	r3, #140	; 0x8c
 80006d0:	f200 8203 	bhi.w	8000ada <FT_CAN_ProcessData+0x4c6>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <FT_CAN_ProcessData+0xc8>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	08000923 	.word	0x08000923
 80006e0:	0800092f 	.word	0x0800092f
 80006e4:	0800093b 	.word	0x0800093b
 80006e8:	08000947 	.word	0x08000947
 80006ec:	08000951 	.word	0x08000951
 80006f0:	0800095d 	.word	0x0800095d
 80006f4:	08000969 	.word	0x08000969
 80006f8:	080009e1 	.word	0x080009e1
 80006fc:	080009eb 	.word	0x080009eb
 8000700:	080009f5 	.word	0x080009f5
 8000704:	080009ff 	.word	0x080009ff
 8000708:	08000a09 	.word	0x08000a09
 800070c:	08000a13 	.word	0x08000a13
 8000710:	08000a1d 	.word	0x08000a1d
 8000714:	08000a27 	.word	0x08000a27
 8000718:	08000a31 	.word	0x08000a31
 800071c:	08000973 	.word	0x08000973
 8000720:	08000adb 	.word	0x08000adb
 8000724:	08000adb 	.word	0x08000adb
 8000728:	08000adb 	.word	0x08000adb
 800072c:	08000adb 	.word	0x08000adb
 8000730:	08000adb 	.word	0x08000adb
 8000734:	08000adb 	.word	0x08000adb
 8000738:	08000adb 	.word	0x08000adb
 800073c:	08000adb 	.word	0x08000adb
 8000740:	08000adb 	.word	0x08000adb
 8000744:	08000adb 	.word	0x08000adb
 8000748:	08000adb 	.word	0x08000adb
 800074c:	08000adb 	.word	0x08000adb
 8000750:	08000adb 	.word	0x08000adb
 8000754:	08000adb 	.word	0x08000adb
 8000758:	08000adb 	.word	0x08000adb
 800075c:	08000adb 	.word	0x08000adb
 8000760:	08000adb 	.word	0x08000adb
 8000764:	08000adb 	.word	0x08000adb
 8000768:	08000adb 	.word	0x08000adb
 800076c:	08000adb 	.word	0x08000adb
 8000770:	08000adb 	.word	0x08000adb
 8000774:	0800097f 	.word	0x0800097f
 8000778:	08000adb 	.word	0x08000adb
 800077c:	08000adb 	.word	0x08000adb
 8000780:	08000adb 	.word	0x08000adb
 8000784:	08000adb 	.word	0x08000adb
 8000788:	08000adb 	.word	0x08000adb
 800078c:	08000adb 	.word	0x08000adb
 8000790:	08000adb 	.word	0x08000adb
 8000794:	08000adb 	.word	0x08000adb
 8000798:	08000adb 	.word	0x08000adb
 800079c:	08000adb 	.word	0x08000adb
 80007a0:	08000adb 	.word	0x08000adb
 80007a4:	08000adb 	.word	0x08000adb
 80007a8:	08000adb 	.word	0x08000adb
 80007ac:	08000adb 	.word	0x08000adb
 80007b0:	08000adb 	.word	0x08000adb
 80007b4:	08000adb 	.word	0x08000adb
 80007b8:	08000adb 	.word	0x08000adb
 80007bc:	08000adb 	.word	0x08000adb
 80007c0:	08000adb 	.word	0x08000adb
 80007c4:	08000adb 	.word	0x08000adb
 80007c8:	08000adb 	.word	0x08000adb
 80007cc:	08000adb 	.word	0x08000adb
 80007d0:	08000adb 	.word	0x08000adb
 80007d4:	08000adb 	.word	0x08000adb
 80007d8:	08000adb 	.word	0x08000adb
 80007dc:	08000adb 	.word	0x08000adb
 80007e0:	0800098b 	.word	0x0800098b
 80007e4:	080009af 	.word	0x080009af
 80007e8:	080009b9 	.word	0x080009b9
 80007ec:	080009c3 	.word	0x080009c3
 80007f0:	080009cd 	.word	0x080009cd
 80007f4:	080009d7 	.word	0x080009d7
 80007f8:	08000a3b 	.word	0x08000a3b
 80007fc:	08000a45 	.word	0x08000a45
 8000800:	08000a4f 	.word	0x08000a4f
 8000804:	08000a59 	.word	0x08000a59
 8000808:	08000a63 	.word	0x08000a63
 800080c:	08000a6d 	.word	0x08000a6d
 8000810:	08000a77 	.word	0x08000a77
 8000814:	08000a81 	.word	0x08000a81
 8000818:	08000a8b 	.word	0x08000a8b
 800081c:	08000a95 	.word	0x08000a95
 8000820:	08000adb 	.word	0x08000adb
 8000824:	08000adb 	.word	0x08000adb
 8000828:	08000adb 	.word	0x08000adb
 800082c:	08000adb 	.word	0x08000adb
 8000830:	08000adb 	.word	0x08000adb
 8000834:	08000adb 	.word	0x08000adb
 8000838:	08000adb 	.word	0x08000adb
 800083c:	08000adb 	.word	0x08000adb
 8000840:	08000adb 	.word	0x08000adb
 8000844:	08000adb 	.word	0x08000adb
 8000848:	08000adb 	.word	0x08000adb
 800084c:	08000adb 	.word	0x08000adb
 8000850:	08000adb 	.word	0x08000adb
 8000854:	08000adb 	.word	0x08000adb
 8000858:	08000adb 	.word	0x08000adb
 800085c:	08000adb 	.word	0x08000adb
 8000860:	08000adb 	.word	0x08000adb
 8000864:	08000adb 	.word	0x08000adb
 8000868:	08000adb 	.word	0x08000adb
 800086c:	08000adb 	.word	0x08000adb
 8000870:	08000adb 	.word	0x08000adb
 8000874:	08000adb 	.word	0x08000adb
 8000878:	08000adb 	.word	0x08000adb
 800087c:	08000adb 	.word	0x08000adb
 8000880:	08000adb 	.word	0x08000adb
 8000884:	08000adb 	.word	0x08000adb
 8000888:	08000adb 	.word	0x08000adb
 800088c:	08000adb 	.word	0x08000adb
 8000890:	08000adb 	.word	0x08000adb
 8000894:	08000adb 	.word	0x08000adb
 8000898:	08000adb 	.word	0x08000adb
 800089c:	08000adb 	.word	0x08000adb
 80008a0:	08000adb 	.word	0x08000adb
 80008a4:	08000adb 	.word	0x08000adb
 80008a8:	08000adb 	.word	0x08000adb
 80008ac:	08000adb 	.word	0x08000adb
 80008b0:	08000adb 	.word	0x08000adb
 80008b4:	08000adb 	.word	0x08000adb
 80008b8:	08000adb 	.word	0x08000adb
 80008bc:	08000adb 	.word	0x08000adb
 80008c0:	08000adb 	.word	0x08000adb
 80008c4:	08000adb 	.word	0x08000adb
 80008c8:	08000adb 	.word	0x08000adb
 80008cc:	08000adb 	.word	0x08000adb
 80008d0:	08000adb 	.word	0x08000adb
 80008d4:	08000adb 	.word	0x08000adb
 80008d8:	08000adb 	.word	0x08000adb
 80008dc:	08000adb 	.word	0x08000adb
 80008e0:	08000adb 	.word	0x08000adb
 80008e4:	08000adb 	.word	0x08000adb
 80008e8:	08000adb 	.word	0x08000adb
 80008ec:	08000adb 	.word	0x08000adb
 80008f0:	08000adb 	.word	0x08000adb
 80008f4:	08000adb 	.word	0x08000adb
 80008f8:	08000adb 	.word	0x08000adb
 80008fc:	08000adb 	.word	0x08000adb
 8000900:	08000adb 	.word	0x08000adb
 8000904:	08000adb 	.word	0x08000adb
 8000908:	08000997 	.word	0x08000997
 800090c:	080009a3 	.word	0x080009a3
 8000910:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000914:	f280 80e1 	bge.w	8000ada <FT_CAN_ProcessData+0x4c6>
 8000918:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800091c:	f6bf ae95 	bge.w	800064a <FT_CAN_ProcessData+0x36>
 8000920:	e0db      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 8000922:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			break;
 800092c:	e0d5      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 800092e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 8000938:	e0cf      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 800093a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 8000944:	e0c9      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 8000946:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800094e:	e0c4      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 8000950:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			break;
 800095a:	e0be      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 800095c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 8000966:	e0b8      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 8000968:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 8000970:	e0b3      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 8000972:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			break;
 800097c:	e0ad      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 800097e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 8000988:	e0a7      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 800098a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			break;
 8000994:	e0a1      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 8000996:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			break;
 80009a0:	e09b      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 80009a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			break;
 80009ac:	e095      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
			break;
#endif

#ifdef FT_CAN_TIMING
		case 0x0043: //Injection Bank A Timing
			FT_Data_Struct->injection_bank_a_time = data;
 80009ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	805a      	strh	r2, [r3, #2]
			break;
 80009b6:	e090      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0044: //Injection Bank B Timing
			FT_Data_Struct->injection_bank_b_time = data;
 80009b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	809a      	strh	r2, [r3, #4]
			break;
 80009c0:	e08b      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0045: //Injection Bank A Duty Cycle
			FT_Data_Struct->injection_bank_a_duty_cycle = data;
 80009c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	80da      	strh	r2, [r3, #6]
			break;
 80009ca:	e086      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0046: //Injection Bank B Duty Cycle
			FT_Data_Struct->injection_bank_b_duty_cycle = data;
 80009cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	811a      	strh	r2, [r3, #8]
			break;
 80009d4:	e081      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0047: //Ignition Advance
			FT_Data_Struct->ignition_advance = data;
 80009d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	801a      	strh	r2, [r3, #0]
			break;
 80009de:	e07c      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 80009e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 80009e8:	e077      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 80009ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	819a      	strh	r2, [r3, #12]
			break;
 80009f2:	e072      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 80009f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 80009fc:	e06d      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 80009fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 8000a06:	e068      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 8000a08:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8000a10:	e063      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 8000a12:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8000a1a:	e05e      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 8000a1c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8000a24:	e059      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 8000a26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8000a2e:	e054      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 8000a30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	835a      	strh	r2, [r3, #26]
			break;
 8000a38:	e04f      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 8000a3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8000a42:	e04a      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 8000a44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8000a4c:	e045      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 8000a4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8000a56:	e040      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 8000a58:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	82da      	strh	r2, [r3, #22]
			break;
 8000a60:	e03b      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 8000a62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	815a      	strh	r2, [r3, #10]
			break;
 8000a6a:	e036      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 8000a6c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	825a      	strh	r2, [r3, #18]
			break;
 8000a74:	e031      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 8000a76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	839a      	strh	r2, [r3, #28]
			break;
 8000a7e:	e02c      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 8000a80:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	83da      	strh	r2, [r3, #30]
			break;
 8000a88:	e027      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 8000a8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	841a      	strh	r2, [r3, #32]
			break;
 8000a92:	e022      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 8000a94:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	829a      	strh	r2, [r3, #20]
			break;
 8000a9c:	e01d      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 8000a9e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	81da      	strh	r2, [r3, #14]
			break;
 8000aa6:	e018      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 8000aa8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8000ab0:	e013      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->total_fuel_flow = data;
 8000ab2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	831a      	strh	r2, [r3, #24]
			break;
 8000aba:	e00e      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 8000abc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	821a      	strh	r2, [r3, #16]
			break;
 8000ac4:	e009      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 8000ac6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8000ace:	e004      	b.n	8000ada <FT_CAN_ProcessData+0x4c6>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 8000ad0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8000ad8:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 8000ada:	89ba      	ldrh	r2, [r7, #12]
 8000adc:	89fb      	ldrh	r3, [r7, #14]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f805 	bl	8000af0 <FT_CAN_ProcessCustomData>
 8000ae6:	e000      	b.n	8000aea <FT_CAN_ProcessData+0x4d6>
		return;
 8000ae8:	bf00      	nop
}
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	460a      	mov	r2, r1
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	4613      	mov	r3, r2
 8000afe:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <FT_CAN_ReceiveData>:

#endif

void FT_CAN_ReceiveData(uint32_t RxID, uint32_t RxLength, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000b0c:	b5b0      	push	{r4, r5, r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	466b      	mov	r3, sp
 8000b1c:	461d      	mov	r5, r3
	uint32_t extid = (RxID & 0x1FF80000) >> 13;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	0b5a      	lsrs	r2, r3, #13
 8000b22:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000b26:	4013      	ands	r3, r2
 8000b28:	61bb      	str	r3, [r7, #24]

	if(		   (extid != FT_Gear_Controller)
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b30:	d02d      	beq.n	8000b8e <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Knock_Meter)
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	f240 1241 	movw	r2, #321	; 0x141
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d028      	beq.n	8000b8e <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Boost_Controller2)
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000b42:	d024      	beq.n	8000b8e <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Injector_Driver)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000b4a:	d020      	beq.n	8000b8e <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Nano)
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000b52:	d01c      	beq.n	8000b8e <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Slim)
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	f240 2241 	movw	r2, #577	; 0x241
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d017      	beq.n	8000b8e <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Alcohol_O2)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	f240 2242 	movw	r2, #578	; 0x242
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d012      	beq.n	8000b8e <FT_CAN_ReceiveData+0x82>
			&& (extid != FTSpark)
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	f240 2243 	movw	r2, #579	; 0x243
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d00d      	beq.n	8000b8e <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Switchpad)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000b78:	d009      	beq.n	8000b8e <FT_CAN_ReceiveData+0x82>
			&& (extid != FT500)
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000b80:	d005      	beq.n	8000b8e <FT_CAN_ReceiveData+0x82>
			&& (extid != FT600))
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	f240 2281 	movw	r2, #641	; 0x281
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	f040 838b 	bne.w	80012a4 <FT_CAN_ReceiveData+0x798>
		return;

	uint8_t buffer[RxLength];
 8000b8e:	68bc      	ldr	r4, [r7, #8]
 8000b90:	4623      	mov	r3, r4
 8000b92:	3b01      	subs	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	4620      	mov	r0, r4
 8000b98:	f04f 0100 	mov.w	r1, #0
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	00cb      	lsls	r3, r1, #3
 8000ba6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000baa:	00c2      	lsls	r2, r0, #3
 8000bac:	4620      	mov	r0, r4
 8000bae:	f04f 0100 	mov.w	r1, #0
 8000bb2:	f04f 0200 	mov.w	r2, #0
 8000bb6:	f04f 0300 	mov.w	r3, #0
 8000bba:	00cb      	lsls	r3, r1, #3
 8000bbc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000bc0:	00c2      	lsls	r2, r0, #3
 8000bc2:	1de3      	adds	r3, r4, #7
 8000bc4:	08db      	lsrs	r3, r3, #3
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	ebad 0d03 	sub.w	sp, sp, r3
 8000bcc:	466b      	mov	r3, sp
 8000bce:	3300      	adds	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < RxLength; i++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	77fb      	strb	r3, [r7, #31]
 8000bd6:	e009      	b.n	8000bec <FT_CAN_ReceiveData+0xe0>
		buffer[i] = pData[i];
 8000bd8:	7ffb      	ldrb	r3, [r7, #31]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	441a      	add	r2, r3
 8000bde:	7ffb      	ldrb	r3, [r7, #31]
 8000be0:	7811      	ldrb	r1, [r2, #0]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < RxLength; i++)
 8000be6:	7ffb      	ldrb	r3, [r7, #31]
 8000be8:	3301      	adds	r3, #1
 8000bea:	77fb      	strb	r3, [r7, #31]
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8f1      	bhi.n	8000bd8 <FT_CAN_ReceiveData+0xcc>

	if((((RxID / 0x800) & 0x7) == 0x00) || (((RxID / 0x800) & 0x7) == 0x01))
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	0adb      	lsrs	r3, r3, #11
 8000bf8:	f003 0307 	and.w	r3, r3, #7
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d006      	beq.n	8000c0e <FT_CAN_ReceiveData+0x102>
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	0adb      	lsrs	r3, r3, #11
 8000c04:	f003 0307 	and.w	r3, r3, #7
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	f040 8143 	bne.w	8000e94 <FT_CAN_ReceiveData+0x388>
	{
		if((RxID & 0xFFF) == 0x600)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000c18:	d146      	bne.n	8000ca8 <FT_CAN_ReceiveData+0x19c>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->tps |= buffer[1];
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	4313      	orrs	r3, r2
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->map  = buffer[2] << 8;
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	789b      	ldrb	r3, [r3, #2]
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	b21a      	sxth	r2, r3
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->map |= buffer[3];
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	78db      	ldrb	r3, [r3, #3]
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b21a      	sxth	r2, r3
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->iat  = buffer[4] << 8;
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	791b      	ldrb	r3, [r3, #4]
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->iat |= buffer[5];
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	795b      	ldrb	r3, [r3, #5]
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b21a      	sxth	r2, r3
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	799b      	ldrb	r3, [r3, #6]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->ect |= buffer[7];
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	79db      	ldrb	r3, [r3, #7]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	879a      	strh	r2, [r3, #60]	; 0x3c

			return;
 8000ca6:	e2fe      	b.n	80012a6 <FT_CAN_ReceiveData+0x79a>
		}
		else if((RxID & 0xFFF) == 0x601)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cae:	f240 6201 	movw	r2, #1537	; 0x601
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d146      	bne.n	8000d44 <FT_CAN_ReceiveData+0x238>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	785b      	ldrb	r3, [r3, #1]
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	78db      	ldrb	r3, [r3, #3]
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	791b      	ldrb	r3, [r3, #4]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->coolant_pressure |= buffer[5];
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	795b      	ldrb	r3, [r3, #5]
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	799b      	ldrb	r3, [r3, #6]
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b21a      	sxth	r2, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->gear 			 |= buffer[7];
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	79db      	ldrb	r3, [r3, #7]
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			return;
 8000d42:	e2b0      	b.n	80012a6 <FT_CAN_ReceiveData+0x79a>
		}
		else if((RxID & 0xFFF) == 0x602)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d4a:	f240 6202 	movw	r2, #1538	; 0x602
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d148      	bne.n	8000de4 <FT_CAN_ReceiveData+0x2d8>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->lambda 			|= buffer[1];
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	785b      	ldrb	r3, [r3, #1]
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	789b      	ldrb	r3, [r3, #2]
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	b21a      	sxth	r2, r3
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->rpm 			|= buffer[3];
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	78db      	ldrb	r3, [r3, #3]
 8000d8e:	b21b      	sxth	r3, r3
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	791b      	ldrb	r3, [r3, #4]
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	795b      	ldrb	r3, [r3, #5]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	799b      	ldrb	r3, [r3, #6]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	b21a      	sxth	r2, r3
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	79db      	ldrb	r3, [r3, #7]
 8000dd6:	b21b      	sxth	r3, r3
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	b21a      	sxth	r2, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

			return;
 8000de2:	e260      	b.n	80012a6 <FT_CAN_ReceiveData+0x79a>
		}

#ifndef FT_CAN_SIMPLE
		else if((RxID & 0xFF) == 0xFF)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2bff      	cmp	r3, #255	; 0xff
 8000dea:	f040 8258 	bne.w	800129e <FT_CAN_ReceiveData+0x792>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	021b      	lsls	r3, r3, #8
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_id 	 |= buffer[1];
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	785b      	ldrb	r3, [r3, #1]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	789b      	ldrb	r3, [r3, #2]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->data_content |= buffer[3];
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	78db      	ldrb	r3, [r3, #3]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

			FT_CAN_ProcessData(FT_Data_Struct);
 8000e3a:	6838      	ldr	r0, [r7, #0]
 8000e3c:	f7ff fbea 	bl	8000614 <FT_CAN_ProcessData>

			FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	791b      	ldrb	r3, [r3, #4]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_id 	 |= buffer[5];
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	795b      	ldrb	r3, [r3, #5]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_content  = buffer[6] << 8;
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	799b      	ldrb	r3, [r3, #6]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->data_content |= buffer[7];
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	79db      	ldrb	r3, [r3, #7]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

			FT_CAN_ProcessData(FT_Data_Struct);
 8000e8c:	6838      	ldr	r0, [r7, #0]
 8000e8e:	f7ff fbc1 	bl	8000614 <FT_CAN_ProcessData>

			return;
 8000e92:	e208      	b.n	80012a6 <FT_CAN_ReceiveData+0x79a>
		}
	}

	else if(buffer[0] == 0xFF)
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2bff      	cmp	r3, #255	; 0xff
 8000e9a:	d129      	bne.n	8000ef0 <FT_CAN_ReceiveData+0x3e4>
	{
		FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	785b      	ldrb	r3, [r3, #1]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		FT_Data_Struct->data_id 	 |= buffer[2];
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	789b      	ldrb	r3, [r3, #2]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		FT_Data_Struct->data_content  = buffer[3] << 8;
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	78db      	ldrb	r3, [r3, #3]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		FT_Data_Struct->data_content |= buffer[4];
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	791b      	ldrb	r3, [r3, #4]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

		FT_CAN_ProcessData(FT_Data_Struct);
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f7ff fb93 	bl	8000614 <FT_CAN_ProcessData>

		return;
 8000eee:	e1da      	b.n	80012a6 <FT_CAN_ReceiveData+0x79a>

	//Segmented Messages
	else
	{
		//First Message
		if(buffer[0] == 0)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d14b      	bne.n	8000f90 <FT_CAN_ReceiveData+0x484>
		{
			FT_Data_Struct->data_length   = buffer[1] << 8;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	785b      	ldrb	r3, [r3, #1]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			FT_Data_Struct->data_length  |= buffer[2];
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	789b      	ldrb	r3, [r3, #2]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

			FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	78db      	ldrb	r3, [r3, #3]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_id 	 |= buffer[4];
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	791b      	ldrb	r3, [r3, #4]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_content  = buffer[5] << 8;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	795b      	ldrb	r3, [r3, #5]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->data_content |= buffer[6];
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	799b      	ldrb	r3, [r3, #6]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

			FT_CAN_ProcessData(FT_Data_Struct);
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f7ff fb52 	bl	8000614 <FT_CAN_ProcessData>

			if(RxLength == 8)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d107      	bne.n	8000f86 <FT_CAN_ReceiveData+0x47a>
				FT_Data_Struct->data_id   = buffer[7] << 8;
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	79db      	ldrb	r3, [r3, #7]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

			FT_Data_Struct->data_last_seg = 0;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

			return;
 8000f8e:	e18a      	b.n	80012a6 <FT_CAN_ReceiveData+0x79a>
		}
		//Messages 1, 5, etc
		else if((buffer[0]-1)%4 == 0)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d15c      	bne.n	8001058 <FT_CAN_ReceiveData+0x54c>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8000faa:	3301      	adds	r3, #1
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d120      	bne.n	8000ff2 <FT_CAN_ReceiveData+0x4e6>
			{
				FT_Data_Struct->data_id 	 |= buffer[1];
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	785b      	ldrb	r3, [r3, #1]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[2] << 8;
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[3];
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	78db      	ldrb	r3, [r3, #3]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f7ff fb11 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d128      	bne.n	800104a <FT_CAN_ReceiveData+0x53e>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b29a      	uxth	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[5];
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	795b      	ldrb	r3, [r3, #5]
 8001012:	b29b      	uxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b29a      	uxth	r2, r3
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[6] << 8;
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	799b      	ldrb	r3, [r3, #6]
 8001022:	b29b      	uxth	r3, r3
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b29a      	uxth	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[7];
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	79db      	ldrb	r3, [r3, #7]
 8001038:	b29b      	uxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b29a      	uxth	r2, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 8001044:	6838      	ldr	r0, [r7, #0]
 8001046:	f7ff fae5 	bl	8000614 <FT_CAN_ProcessData>
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b29a      	uxth	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

			return;
 8001056:	e126      	b.n	80012a6 <FT_CAN_ReceiveData+0x79a>
		}
		//messages 2, 6, etc
		else if((buffer[0]-2)%4 == 0)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	3b02      	subs	r3, #2
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d150      	bne.n	8001108 <FT_CAN_ReceiveData+0x5fc>
		{
			if(RxLength >= 5)
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b04      	cmp	r3, #4
 800106a:	d928      	bls.n	80010be <FT_CAN_ReceiveData+0x5b2>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	b29b      	uxth	r3, r3
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b29a      	uxth	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[2];
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	789b      	ldrb	r3, [r3, #2]
 8001086:	b29b      	uxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b29a      	uxth	r2, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	78db      	ldrb	r3, [r3, #3]
 8001096:	b29b      	uxth	r3, r3
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b29a      	uxth	r2, r3
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[4];
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f7ff faab 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d11a      	bne.n	80010fa <FT_CAN_ReceiveData+0x5ee>
			{
				FT_Data_Struct->data_id  	 = buffer[5] << 8;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	|= buffer[6];
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	799b      	ldrb	r3, [r3, #6]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content = buffer[7] << 8;
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	79db      	ldrb	r3, [r3, #7]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			}

			FT_Data_Struct->data_last_seg 	 = buffer[0];
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

			return;
 8001106:	e0ce      	b.n	80012a6 <FT_CAN_ReceiveData+0x79a>
		}
		//Messages 3, 7, etc
		else if((buffer[0]-3)%4 == 0)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	3b03      	subs	r3, #3
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d15f      	bne.n	80011d6 <FT_CAN_ReceiveData+0x6ca>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001122:	3301      	adds	r3, #1
 8001124:	429a      	cmp	r2, r3
 8001126:	d10d      	bne.n	8001144 <FT_CAN_ReceiveData+0x638>
			{
				FT_Data_Struct->data_content |= buffer[1];
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	b29b      	uxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b29a      	uxth	r2, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 800113e:	6838      	ldr	r0, [r7, #0]
 8001140:	f7ff fa68 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength >= 6)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d928      	bls.n	800119c <FT_CAN_ReceiveData+0x690>
			{
				FT_Data_Struct->data_id  	  = buffer[2] << 8;
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	789b      	ldrb	r3, [r3, #2]
 800114e:	b29b      	uxth	r3, r3
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b29a      	uxth	r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[3];
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	78db      	ldrb	r3, [r3, #3]
 8001164:	b29b      	uxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b29a      	uxth	r2, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[4] << 8;
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	791b      	ldrb	r3, [r3, #4]
 8001174:	b29b      	uxth	r3, r3
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b29a      	uxth	r2, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[5];
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	795b      	ldrb	r3, [r3, #5]
 800118a:	b29b      	uxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b29a      	uxth	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f7ff fa3c 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d112      	bne.n	80011c8 <FT_CAN_ReceiveData+0x6bc>
			{
				FT_Data_Struct->data_id 	  = buffer[6] << 8;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	799b      	ldrb	r3, [r3, #6]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[7];
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	79db      	ldrb	r3, [r3, #7]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

			return;
 80011d4:	e067      	b.n	80012a6 <FT_CAN_ReceiveData+0x79a>
		}
		//Messages 4, 8, etc
		else if(buffer[0]%4 == 0)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d15d      	bne.n	80012a0 <FT_CAN_ReceiveData+0x794>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80011f0:	3301      	adds	r3, #1
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d115      	bne.n	8001222 <FT_CAN_ReceiveData+0x716>
			{
				FT_Data_Struct->data_content  = buffer[1] << 8;
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b29a      	uxth	r2, r3
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[2];
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	789b      	ldrb	r3, [r3, #2]
 8001210:	b29b      	uxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b29a      	uxth	r2, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	f7ff f9f9 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength >= 7)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	2b06      	cmp	r3, #6
 8001226:	d928      	bls.n	800127a <FT_CAN_ReceiveData+0x76e>
			{
				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	78db      	ldrb	r3, [r3, #3]
 800122c:	b29b      	uxth	r3, r3
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b29a      	uxth	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[4];
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	791b      	ldrb	r3, [r3, #4]
 8001242:	b29b      	uxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b29a      	uxth	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[5] << 8;
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	795b      	ldrb	r3, [r3, #5]
 8001252:	b29b      	uxth	r3, r3
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b29a      	uxth	r2, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[6];
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	799b      	ldrb	r3, [r3, #6]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	b29a      	uxth	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 8001274:	6838      	ldr	r0, [r7, #0]
 8001276:	f7ff f9cd 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	2b08      	cmp	r3, #8
 800127e:	d107      	bne.n	8001290 <FT_CAN_ReceiveData+0x784>
			FT_Data_Struct->data_id 	  	  = buffer[7] << 8;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	79db      	ldrb	r3, [r3, #7]
 8001284:	b29b      	uxth	r3, r3
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	b29a      	uxth	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b29a      	uxth	r2, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

			return;
 800129c:	e003      	b.n	80012a6 <FT_CAN_ReceiveData+0x79a>
		if((RxID & 0xFFF) == 0x600)
 800129e:	bf00      	nop
 80012a0:	46ad      	mov	sp, r5
 80012a2:	e001      	b.n	80012a8 <FT_CAN_ReceiveData+0x79c>
		return;
 80012a4:	bf00      	nop
 80012a6:	46ad      	mov	sp, r5
		}
#endif
	}
}
 80012a8:	3720      	adds	r7, #32
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b4:	f005 fc82 	bl	8006bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b8:	f000 f900 	bl	80014bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012bc:	f000 f976 	bl	80015ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c0:	f000 fc16 	bl	8001af0 <MX_GPIO_Init>
  MX_DMA_Init();
 80012c4:	f000 fbdc 	bl	8001a80 <MX_DMA_Init>
  MX_IWDG_Init();
 80012c8:	f000 fb3a 	bl	8001940 <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 80012cc:	f000 fb82 	bl	80019d4 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 80012d0:	f000 f994 	bl	80015fc <MX_ADC1_Init>
  MX_RTC_Init();
 80012d4:	f000 fb4e 	bl	8001974 <MX_RTC_Init>
  MX_FATFS_Init();
 80012d8:	f00f ff2e 	bl	8011138 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80012dc:	f016 f808 	bl	80172f0 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 80012e0:	f000 fa32 	bl	8001748 <MX_ADC2_Init>
  MX_CAN1_Init();
 80012e4:	f000 fac8 	bl	8001878 <MX_CAN1_Init>
  MX_I2C1_Init();
 80012e8:	f000 fafc 	bl	80018e4 <MX_I2C1_Init>
  MX_TIM7_Init();
 80012ec:	f000 fb92 	bl	8001a14 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Principal_Init(&hcan1, &hi2c1, &htim7);
 80012f0:	4a64      	ldr	r2, [pc, #400]	; (8001484 <main+0x1d4>)
 80012f2:	4965      	ldr	r1, [pc, #404]	; (8001488 <main+0x1d8>)
 80012f4:	4865      	ldr	r0, [pc, #404]	; (800148c <main+0x1dc>)
 80012f6:	f003 ff65 	bl	80051c4 <Principal_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks if data is being saved and starts saving if conditions are met
	  if((flagDatalogger == DL_NO_SAVE) || (flagDatalogger == DL_BUT_PRESS))
 80012fa:	4b65      	ldr	r3, [pc, #404]	; (8001490 <main+0x1e0>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <main+0x5a>
 8001302:	4b63      	ldr	r3, [pc, #396]	; (8001490 <main+0x1e0>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d105      	bne.n	8001316 <main+0x66>
		  Principal_Datalogger_Start(dirString, logString, &dirStruct, &fileStruct);
 800130a:	4b62      	ldr	r3, [pc, #392]	; (8001494 <main+0x1e4>)
 800130c:	4a62      	ldr	r2, [pc, #392]	; (8001498 <main+0x1e8>)
 800130e:	4963      	ldr	r1, [pc, #396]	; (800149c <main+0x1ec>)
 8001310:	4863      	ldr	r0, [pc, #396]	; (80014a0 <main+0x1f0>)
 8001312:	f004 fcc7 	bl	8005ca4 <Principal_Datalogger_Start>

	  //Checks card detect pin level change for datalogger initialization or deinitialization
	  Principal_Card_Detection(&fatfsStruct, &dirStruct, &fileStruct);
 8001316:	4a5f      	ldr	r2, [pc, #380]	; (8001494 <main+0x1e4>)
 8001318:	495f      	ldr	r1, [pc, #380]	; (8001498 <main+0x1e8>)
 800131a:	4862      	ldr	r0, [pc, #392]	; (80014a4 <main+0x1f4>)
 800131c:	f004 fec2 	bl	80060a4 <Principal_Card_Detection>

	  //Checks USB cable connection, if connected will disable logging
	  if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET) && (flagDatalogger == DL_SAVE))
 8001320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001324:	4860      	ldr	r0, [pc, #384]	; (80014a8 <main+0x1f8>)
 8001326:	f007 fddd 	bl	8008ee4 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b01      	cmp	r3, #1
 800132e:	d107      	bne.n	8001340 <main+0x90>
 8001330:	4b57      	ldr	r3, [pc, #348]	; (8001490 <main+0x1e0>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d103      	bne.n	8001340 <main+0x90>
		  Principal_Datalogger_Finish(&dirStruct, &fileStruct);
 8001338:	4956      	ldr	r1, [pc, #344]	; (8001494 <main+0x1e4>)
 800133a:	4857      	ldr	r0, [pc, #348]	; (8001498 <main+0x1e8>)
 800133c:	f004 fda0 	bl	8005e80 <Principal_Datalogger_Finish>

	  //Analog inputs 1-4 CAN message
	  if((accMsg[ANALOG_1_4] >= perMsg[ANALOG_1_4]) && (perMsg[ANALOG_1_4] != MSG_DISABLED))
 8001340:	4b5a      	ldr	r3, [pc, #360]	; (80014ac <main+0x1fc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a5a      	ldr	r2, [pc, #360]	; (80014b0 <main+0x200>)
 8001346:	8812      	ldrh	r2, [r2, #0]
 8001348:	4293      	cmp	r3, r2
 800134a:	d30e      	bcc.n	800136a <main+0xba>
 800134c:	4b58      	ldr	r3, [pc, #352]	; (80014b0 <main+0x200>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00a      	beq.n	800136a <main+0xba>
	  {
		  accMsg[ANALOG_1_4] -= perMsg[ANALOG_1_4];
 8001354:	4b55      	ldr	r3, [pc, #340]	; (80014ac <main+0x1fc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a55      	ldr	r2, [pc, #340]	; (80014b0 <main+0x200>)
 800135a:	8812      	ldrh	r2, [r2, #0]
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	4a53      	ldr	r2, [pc, #332]	; (80014ac <main+0x1fc>)
 8001360:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, ANALOG_1_4);
 8001362:	2100      	movs	r1, #0
 8001364:	4849      	ldr	r0, [pc, #292]	; (800148c <main+0x1dc>)
 8001366:	f002 fa73 	bl	8003850 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((accMsg[ANALOG_5_8] >= perMsg[ANALOG_5_8]) && (perMsg[ANALOG_5_8] != MSG_DISABLED))
 800136a:	4b50      	ldr	r3, [pc, #320]	; (80014ac <main+0x1fc>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4a50      	ldr	r2, [pc, #320]	; (80014b0 <main+0x200>)
 8001370:	8852      	ldrh	r2, [r2, #2]
 8001372:	4293      	cmp	r3, r2
 8001374:	d30e      	bcc.n	8001394 <main+0xe4>
 8001376:	4b4e      	ldr	r3, [pc, #312]	; (80014b0 <main+0x200>)
 8001378:	885b      	ldrh	r3, [r3, #2]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00a      	beq.n	8001394 <main+0xe4>
	  {
		  accMsg[ANALOG_5_8] -= perMsg[ANALOG_5_8];
 800137e:	4b4b      	ldr	r3, [pc, #300]	; (80014ac <main+0x1fc>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4a4b      	ldr	r2, [pc, #300]	; (80014b0 <main+0x200>)
 8001384:	8852      	ldrh	r2, [r2, #2]
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	4a48      	ldr	r2, [pc, #288]	; (80014ac <main+0x1fc>)
 800138a:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, ANALOG_5_8);
 800138c:	2101      	movs	r1, #1
 800138e:	483f      	ldr	r0, [pc, #252]	; (800148c <main+0x1dc>)
 8001390:	f002 fa5e 	bl	8003850 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((accMsg[ANALOG_9_12] >= perMsg[ANALOG_9_12]) && (perMsg[ANALOG_9_12] != MSG_DISABLED))
 8001394:	4b45      	ldr	r3, [pc, #276]	; (80014ac <main+0x1fc>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4a45      	ldr	r2, [pc, #276]	; (80014b0 <main+0x200>)
 800139a:	8892      	ldrh	r2, [r2, #4]
 800139c:	4293      	cmp	r3, r2
 800139e:	d30e      	bcc.n	80013be <main+0x10e>
 80013a0:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <main+0x200>)
 80013a2:	889b      	ldrh	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00a      	beq.n	80013be <main+0x10e>
	  {
		  accMsg[ANALOG_9_12] -= perMsg[ANALOG_9_12];
 80013a8:	4b40      	ldr	r3, [pc, #256]	; (80014ac <main+0x1fc>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4a40      	ldr	r2, [pc, #256]	; (80014b0 <main+0x200>)
 80013ae:	8892      	ldrh	r2, [r2, #4]
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	4a3e      	ldr	r2, [pc, #248]	; (80014ac <main+0x1fc>)
 80013b4:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, ANALOG_9_12);
 80013b6:	2102      	movs	r1, #2
 80013b8:	4834      	ldr	r0, [pc, #208]	; (800148c <main+0x1dc>)
 80013ba:	f002 fa49 	bl	8003850 <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((accMsg[RTC_MSG] >= perMsg[RTC_MSG]) && (perMsg[RTC_MSG] != MSG_DISABLED))
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <main+0x1fc>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	4a3b      	ldr	r2, [pc, #236]	; (80014b0 <main+0x200>)
 80013c4:	88d2      	ldrh	r2, [r2, #6]
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d30e      	bcc.n	80013e8 <main+0x138>
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <main+0x200>)
 80013cc:	88db      	ldrh	r3, [r3, #6]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00a      	beq.n	80013e8 <main+0x138>
	  {
		  accMsg[RTC_MSG] -= perMsg[RTC_MSG];
 80013d2:	4b36      	ldr	r3, [pc, #216]	; (80014ac <main+0x1fc>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	4a36      	ldr	r2, [pc, #216]	; (80014b0 <main+0x200>)
 80013d8:	88d2      	ldrh	r2, [r2, #6]
 80013da:	1a9b      	subs	r3, r3, r2
 80013dc:	4a33      	ldr	r2, [pc, #204]	; (80014ac <main+0x1fc>)
 80013de:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_MSG);
 80013e0:	2103      	movs	r1, #3
 80013e2:	482a      	ldr	r0, [pc, #168]	; (800148c <main+0x1dc>)
 80013e4:	f002 fa34 	bl	8003850 <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((accMsg[VERIFY_MSG] >= perMsg[VERIFY_MSG]) && (perMsg[VERIFY_MSG] != MSG_DISABLED))
 80013e8:	4b30      	ldr	r3, [pc, #192]	; (80014ac <main+0x1fc>)
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	4a30      	ldr	r2, [pc, #192]	; (80014b0 <main+0x200>)
 80013ee:	8912      	ldrh	r2, [r2, #8]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d30e      	bcc.n	8001412 <main+0x162>
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <main+0x200>)
 80013f6:	891b      	ldrh	r3, [r3, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00a      	beq.n	8001412 <main+0x162>
	  {
		  accMsg[VERIFY_MSG] -= perMsg[VERIFY_MSG];
 80013fc:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <main+0x1fc>)
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	4a2b      	ldr	r2, [pc, #172]	; (80014b0 <main+0x200>)
 8001402:	8912      	ldrh	r2, [r2, #8]
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	4a29      	ldr	r2, [pc, #164]	; (80014ac <main+0x1fc>)
 8001408:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, VERIFY_MSG);
 800140a:	2104      	movs	r1, #4
 800140c:	481f      	ldr	r0, [pc, #124]	; (800148c <main+0x1dc>)
 800140e:	f002 fa1f 	bl	8003850 <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((accMsg[ECU_SAVE] >= perMsg[ECU_SAVE]) && (perMsg[ECU_SAVE] != MSG_DISABLED))
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <main+0x1fc>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <main+0x200>)
 8001418:	8992      	ldrh	r2, [r2, #12]
 800141a:	4293      	cmp	r3, r2
 800141c:	d30e      	bcc.n	800143c <main+0x18c>
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <main+0x200>)
 8001420:	899b      	ldrh	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <main+0x18c>
	  {
		  accMsg[ECU_SAVE] -= perMsg[ECU_SAVE];
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <main+0x1fc>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <main+0x200>)
 800142c:	8992      	ldrh	r2, [r2, #12]
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <main+0x1fc>)
 8001432:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, ECU_SAVE);
 8001434:	2106      	movs	r1, #6
 8001436:	4815      	ldr	r0, [pc, #84]	; (800148c <main+0x1dc>)
 8001438:	f002 fa0a 	bl	8003850 <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((accMsg[PDM_SAVE] >= perMsg[PDM_SAVE]) && (perMsg[PDM_SAVE] != MSG_DISABLED))
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <main+0x1fc>)
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <main+0x200>)
 8001442:	89d2      	ldrh	r2, [r2, #14]
 8001444:	4293      	cmp	r3, r2
 8001446:	d30e      	bcc.n	8001466 <main+0x1b6>
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <main+0x200>)
 800144a:	89db      	ldrh	r3, [r3, #14]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00a      	beq.n	8001466 <main+0x1b6>
	  {
		  accMsg[PDM_SAVE] -= perMsg[PDM_SAVE];
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <main+0x1fc>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <main+0x200>)
 8001456:	89d2      	ldrh	r2, [r2, #14]
 8001458:	1a9b      	subs	r3, r3, r2
 800145a:	4a14      	ldr	r2, [pc, #80]	; (80014ac <main+0x1fc>)
 800145c:	61d3      	str	r3, [r2, #28]
		  Principal_Transmit_Msg(&hcan1, PDM_SAVE);
 800145e:	2107      	movs	r1, #7
 8001460:	480a      	ldr	r0, [pc, #40]	; (800148c <main+0x1dc>)
 8001462:	f002 f9f5 	bl	8003850 <Principal_Transmit_Msg>
	  }

	  if((verifyCAN != 0) && (flagDatalogger != DL_ERROR))
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <main+0x204>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f43f af45 	beq.w	80012fa <main+0x4a>
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <main+0x1e0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b04      	cmp	r3, #4
 8001476:	f43f af40 	beq.w	80012fa <main+0x4a>
		  HAL_IWDG_Refresh(&hiwdg);
 800147a:	480f      	ldr	r0, [pc, #60]	; (80014b8 <main+0x208>)
 800147c:	f008 fd97 	bl	8009fae <HAL_IWDG_Refresh>
	  if((flagDatalogger == DL_NO_SAVE) || (flagDatalogger == DL_BUT_PRESS))
 8001480:	e73b      	b.n	80012fa <main+0x4a>
 8001482:	bf00      	nop
 8001484:	20002c1c 	.word	0x20002c1c
 8001488:	200007cc 	.word	0x200007cc
 800148c:	20002bb8 	.word	0x20002bb8
 8001490:	20003c98 	.word	0x20003c98
 8001494:	20002c6c 	.word	0x20002c6c
 8001498:	2000190c 	.word	0x2000190c
 800149c:	20002b18 	.word	0x20002b18
 80014a0:	20002b4c 	.word	0x20002b4c
 80014a4:	20000874 	.word	0x20000874
 80014a8:	40020000 	.word	0x40020000
 80014ac:	20002be4 	.word	0x20002be4
 80014b0:	20002c04 	.word	0x20002c04
 80014b4:	20000872 	.word	0x20000872
 80014b8:	20000824 	.word	0x20000824

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b094      	sub	sp, #80	; 0x50
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	2234      	movs	r2, #52	; 0x34
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f016 fca8 	bl	8017e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <SystemClock_Config+0xe8>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	4a2e      	ldr	r2, [pc, #184]	; (80015a4 <SystemClock_Config+0xe8>)
 80014ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ee:	6413      	str	r3, [r2, #64]	; 0x40
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <SystemClock_Config+0xe8>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fc:	2300      	movs	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <SystemClock_Config+0xec>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <SystemClock_Config+0xec>)
 8001506:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <SystemClock_Config+0xec>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001518:	230d      	movs	r3, #13
 800151a:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001520:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001526:	2301      	movs	r3, #1
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001532:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001534:	2308      	movs	r3, #8
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001538:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800153c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001542:	2306      	movs	r3, #6
 8001544:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001546:	2302      	movs	r3, #2
 8001548:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4618      	mov	r0, r3
 8001550:	f00a fd6c 	bl	800c02c <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800155a:	f000 fb6f 	bl	8001c3c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800155e:	f009 ff33 	bl	800b3c8 <HAL_PWREx_EnableOverDrive>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001568:	f000 fb68 	bl	8001c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156c:	230f      	movs	r3, #15
 800156e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001570:	2302      	movs	r3, #2
 8001572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001578:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800157c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001582:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	2105      	movs	r1, #5
 800158a:	4618      	mov	r0, r3
 800158c:	f009 ff6c 	bl	800b468 <HAL_RCC_ClockConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001596:	f000 fb51 	bl	8001c3c <Error_Handler>
  }
}
 800159a:	bf00      	nop
 800159c:	3750      	adds	r7, #80	; 0x50
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000

080015ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b098      	sub	sp, #96	; 0x60
 80015b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	225c      	movs	r2, #92	; 0x5c
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f016 fc31 	bl	8017e20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80015be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015c2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 80015c4:	2308      	movs	r3, #8
 80015c6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80015c8:	23c0      	movs	r3, #192	; 0xc0
 80015ca:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80015d0:	2304      	movs	r3, #4
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80015d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015dc:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80015de:	2300      	movs	r3, #0
 80015e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4618      	mov	r0, r3
 80015e6:	f00a f845 	bl	800b674 <HAL_RCCEx_PeriphCLKConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80015f0:	f000 fb24 	bl	8001c3c <Error_Handler>
  }
}
 80015f4:	bf00      	nop
 80015f6:	3760      	adds	r7, #96	; 0x60
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001602:	463b      	mov	r3, r7
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800160e:	4b4b      	ldr	r3, [pc, #300]	; (800173c <MX_ADC1_Init+0x140>)
 8001610:	4a4b      	ldr	r2, [pc, #300]	; (8001740 <MX_ADC1_Init+0x144>)
 8001612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001614:	4b49      	ldr	r3, [pc, #292]	; (800173c <MX_ADC1_Init+0x140>)
 8001616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800161a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800161c:	4b47      	ldr	r3, [pc, #284]	; (800173c <MX_ADC1_Init+0x140>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <MX_ADC1_Init+0x140>)
 8001624:	2201      	movs	r2, #1
 8001626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001628:	4b44      	ldr	r3, [pc, #272]	; (800173c <MX_ADC1_Init+0x140>)
 800162a:	2201      	movs	r2, #1
 800162c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <MX_ADC1_Init+0x140>)
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <MX_ADC1_Init+0x140>)
 8001638:	2200      	movs	r2, #0
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163c:	4b3f      	ldr	r3, [pc, #252]	; (800173c <MX_ADC1_Init+0x140>)
 800163e:	4a41      	ldr	r2, [pc, #260]	; (8001744 <MX_ADC1_Init+0x148>)
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001642:	4b3e      	ldr	r3, [pc, #248]	; (800173c <MX_ADC1_Init+0x140>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8001648:	4b3c      	ldr	r3, [pc, #240]	; (800173c <MX_ADC1_Init+0x140>)
 800164a:	2207      	movs	r2, #7
 800164c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <MX_ADC1_Init+0x140>)
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001656:	4b39      	ldr	r3, [pc, #228]	; (800173c <MX_ADC1_Init+0x140>)
 8001658:	2201      	movs	r2, #1
 800165a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800165c:	4837      	ldr	r0, [pc, #220]	; (800173c <MX_ADC1_Init+0x140>)
 800165e:	f005 fb43 	bl	8006ce8 <HAL_ADC_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001668:	f000 fae8 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800166c:	2306      	movs	r3, #6
 800166e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001670:	2301      	movs	r3, #1
 8001672:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001674:	2307      	movs	r3, #7
 8001676:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	4619      	mov	r1, r3
 800167c:	482f      	ldr	r0, [pc, #188]	; (800173c <MX_ADC1_Init+0x140>)
 800167e:	f005 fca5 	bl	8006fcc <HAL_ADC_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001688:	f000 fad8 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800168c:	2307      	movs	r3, #7
 800168e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001690:	2302      	movs	r3, #2
 8001692:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	4828      	ldr	r0, [pc, #160]	; (800173c <MX_ADC1_Init+0x140>)
 800169a:	f005 fc97 	bl	8006fcc <HAL_ADC_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016a4:	f000 faca 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80016a8:	230e      	movs	r3, #14
 80016aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80016ac:	2303      	movs	r3, #3
 80016ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b0:	463b      	mov	r3, r7
 80016b2:	4619      	mov	r1, r3
 80016b4:	4821      	ldr	r0, [pc, #132]	; (800173c <MX_ADC1_Init+0x140>)
 80016b6:	f005 fc89 	bl	8006fcc <HAL_ADC_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80016c0:	f000 fabc 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80016c4:	230f      	movs	r3, #15
 80016c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80016c8:	2304      	movs	r3, #4
 80016ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	481a      	ldr	r0, [pc, #104]	; (800173c <MX_ADC1_Init+0x140>)
 80016d2:	f005 fc7b 	bl	8006fcc <HAL_ADC_ConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80016dc:	f000 faae 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016e0:	2308      	movs	r3, #8
 80016e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80016e4:	2305      	movs	r3, #5
 80016e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e8:	463b      	mov	r3, r7
 80016ea:	4619      	mov	r1, r3
 80016ec:	4813      	ldr	r0, [pc, #76]	; (800173c <MX_ADC1_Init+0x140>)
 80016ee:	f005 fc6d 	bl	8006fcc <HAL_ADC_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80016f8:	f000 faa0 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016fc:	2309      	movs	r3, #9
 80016fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001700:	2306      	movs	r3, #6
 8001702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_ADC1_Init+0x140>)
 800170a:	f005 fc5f 	bl	8006fcc <HAL_ADC_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001714:	f000 fa92 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001718:	2312      	movs	r3, #18
 800171a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800171c:	2307      	movs	r3, #7
 800171e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_ADC1_Init+0x140>)
 8001726:	f005 fc51 	bl	8006fcc <HAL_ADC_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001730:	f000 fa84 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200018b0 	.word	0x200018b0
 8001740:	40012000 	.word	0x40012000
 8001744:	0f000001 	.word	0x0f000001

08001748 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800174e:	463b      	mov	r3, r7
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800175a:	4b44      	ldr	r3, [pc, #272]	; (800186c <MX_ADC2_Init+0x124>)
 800175c:	4a44      	ldr	r2, [pc, #272]	; (8001870 <MX_ADC2_Init+0x128>)
 800175e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001760:	4b42      	ldr	r3, [pc, #264]	; (800186c <MX_ADC2_Init+0x124>)
 8001762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001766:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001768:	4b40      	ldr	r3, [pc, #256]	; (800186c <MX_ADC2_Init+0x124>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800176e:	4b3f      	ldr	r3, [pc, #252]	; (800186c <MX_ADC2_Init+0x124>)
 8001770:	2201      	movs	r2, #1
 8001772:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001774:	4b3d      	ldr	r3, [pc, #244]	; (800186c <MX_ADC2_Init+0x124>)
 8001776:	2201      	movs	r2, #1
 8001778:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800177a:	4b3c      	ldr	r3, [pc, #240]	; (800186c <MX_ADC2_Init+0x124>)
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001782:	4b3a      	ldr	r3, [pc, #232]	; (800186c <MX_ADC2_Init+0x124>)
 8001784:	2200      	movs	r2, #0
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <MX_ADC2_Init+0x124>)
 800178a:	4a3a      	ldr	r2, [pc, #232]	; (8001874 <MX_ADC2_Init+0x12c>)
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800178e:	4b37      	ldr	r3, [pc, #220]	; (800186c <MX_ADC2_Init+0x124>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 8001794:	4b35      	ldr	r3, [pc, #212]	; (800186c <MX_ADC2_Init+0x124>)
 8001796:	2206      	movs	r2, #6
 8001798:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800179a:	4b34      	ldr	r3, [pc, #208]	; (800186c <MX_ADC2_Init+0x124>)
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017a2:	4b32      	ldr	r3, [pc, #200]	; (800186c <MX_ADC2_Init+0x124>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017a8:	4830      	ldr	r0, [pc, #192]	; (800186c <MX_ADC2_Init+0x124>)
 80017aa:	f005 fa9d 	bl	8006ce8 <HAL_ADC_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80017b4:	f000 fa42 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017bc:	2301      	movs	r3, #1
 80017be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80017c0:	2307      	movs	r3, #7
 80017c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017c4:	463b      	mov	r3, r7
 80017c6:	4619      	mov	r1, r3
 80017c8:	4828      	ldr	r0, [pc, #160]	; (800186c <MX_ADC2_Init+0x124>)
 80017ca:	f005 fbff 	bl	8006fcc <HAL_ADC_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80017d4:	f000 fa32 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017d8:	2301      	movs	r3, #1
 80017da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017dc:	2302      	movs	r3, #2
 80017de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	4619      	mov	r1, r3
 80017e4:	4821      	ldr	r0, [pc, #132]	; (800186c <MX_ADC2_Init+0x124>)
 80017e6:	f005 fbf1 	bl	8006fcc <HAL_ADC_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80017f0:	f000 fa24 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80017f8:	2303      	movs	r3, #3
 80017fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	481a      	ldr	r0, [pc, #104]	; (800186c <MX_ADC2_Init+0x124>)
 8001802:	f005 fbe3 	bl	8006fcc <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800180c:	f000 fa16 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001810:	2303      	movs	r3, #3
 8001812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001814:	2304      	movs	r3, #4
 8001816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	4813      	ldr	r0, [pc, #76]	; (800186c <MX_ADC2_Init+0x124>)
 800181e:	f005 fbd5 	bl	8006fcc <HAL_ADC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001828:	f000 fa08 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800182c:	2304      	movs	r3, #4
 800182e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001830:	2305      	movs	r3, #5
 8001832:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001834:	463b      	mov	r3, r7
 8001836:	4619      	mov	r1, r3
 8001838:	480c      	ldr	r0, [pc, #48]	; (800186c <MX_ADC2_Init+0x124>)
 800183a:	f005 fbc7 	bl	8006fcc <HAL_ADC_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8001844:	f000 f9fa 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001848:	2305      	movs	r3, #5
 800184a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800184c:	2306      	movs	r3, #6
 800184e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_ADC2_Init+0x124>)
 8001856:	f005 fbb9 	bl	8006fcc <HAL_ADC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8001860:	f000 f9ec 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000784 	.word	0x20000784
 8001870:	40012100 	.word	0x40012100
 8001874:	0f000001 	.word	0x0f000001

08001878 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_CAN1_Init+0x64>)
 800187e:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <MX_CAN1_Init+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_CAN1_Init+0x64>)
 8001884:	2205      	movs	r2, #5
 8001886:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_CAN1_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_CAN1_Init+0x64>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_CAN1_Init+0x64>)
 8001896:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800189a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_CAN1_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_CAN1_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_CAN1_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_CAN1_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_CAN1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MX_CAN1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_CAN1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_CAN1_Init+0x64>)
 80018c8:	f005 fe30 	bl	800752c <HAL_CAN_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80018d2:	f000 f9b3 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20002bb8 	.word	0x20002bb8
 80018e0:	40006400 	.word	0x40006400

080018e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_I2C1_Init+0x50>)
 80018ea:	4a13      	ldr	r2, [pc, #76]	; (8001938 <MX_I2C1_Init+0x54>)
 80018ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_I2C1_Init+0x50>)
 80018f0:	4a12      	ldr	r2, [pc, #72]	; (800193c <MX_I2C1_Init+0x58>)
 80018f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_I2C1_Init+0x50>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_I2C1_Init+0x50>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_I2C1_Init+0x50>)
 8001902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001906:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <MX_I2C1_Init+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_I2C1_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_I2C1_Init+0x50>)
 8001922:	f007 fb43 	bl	8008fac <HAL_I2C_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800192c:	f000 f986 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200007cc 	.word	0x200007cc
 8001938:	40005400 	.word	0x40005400
 800193c:	00061a80 	.word	0x00061a80

08001940 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_IWDG_Init+0x2c>)
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <MX_IWDG_Init+0x30>)
 8001948:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <MX_IWDG_Init+0x2c>)
 800194c:	2206      	movs	r2, #6
 800194e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 59;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_IWDG_Init+0x2c>)
 8001952:	223b      	movs	r2, #59	; 0x3b
 8001954:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_IWDG_Init+0x2c>)
 8001958:	f008 fae7 	bl	8009f2a <HAL_IWDG_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 8001962:	f000 f96b 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000824 	.word	0x20000824
 8001970:	40003000 	.word	0x40003000

08001974 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001988:	2300      	movs	r3, #0
 800198a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_RTC_Init+0x58>)
 800198e:	4a10      	ldr	r2, [pc, #64]	; (80019d0 <MX_RTC_Init+0x5c>)
 8001990:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_RTC_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_RTC_Init+0x58>)
 800199a:	227f      	movs	r2, #127	; 0x7f
 800199c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_RTC_Init+0x58>)
 80019a0:	22ff      	movs	r2, #255	; 0xff
 80019a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_RTC_Init+0x58>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_RTC_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_RTC_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_RTC_Init+0x58>)
 80019b8:	f00a fdd6 	bl	800c568 <HAL_RTC_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80019c2:	f000 f93b 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000299c 	.word	0x2000299c
 80019d0:	40002800 	.word	0x40002800

080019d4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_SDIO_SD_Init+0x38>)
 80019da:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <MX_SDIO_SD_Init+0x3c>)
 80019dc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <MX_SDIO_SD_Init+0x38>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_SDIO_SD_Init+0x38>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <MX_SDIO_SD_Init+0x38>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <MX_SDIO_SD_Init+0x38>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <MX_SDIO_SD_Init+0x38>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <MX_SDIO_SD_Init+0x38>)
 80019fe:	2203      	movs	r2, #3
 8001a00:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	20002a78 	.word	0x20002a78
 8001a10:	40012c00 	.word	0x40012c00

08001a14 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <MX_TIM7_Init+0x64>)
 8001a24:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <MX_TIM7_Init+0x68>)
 8001a26:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <MX_TIM7_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MX_TIM7_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <MX_TIM7_Init+0x64>)
 8001a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a3a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_TIM7_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a42:	480d      	ldr	r0, [pc, #52]	; (8001a78 <MX_TIM7_Init+0x64>)
 8001a44:	f00c ff71 	bl	800e92a <HAL_TIM_Base_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a4e:	f000 f8f5 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <MX_TIM7_Init+0x64>)
 8001a60:	f00d f9f2 	bl	800ee48 <HAL_TIMEx_MasterConfigSynchronization>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a6a:	f000 f8e7 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20002c1c 	.word	0x20002c1c
 8001a7c:	40001400 	.word	0x40001400

08001a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_DMA_Init+0x6c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a17      	ldr	r2, [pc, #92]	; (8001aec <MX_DMA_Init+0x6c>)
 8001a90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MX_DMA_Init+0x6c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	2038      	movs	r0, #56	; 0x38
 8001aa8:	f006 fcb3 	bl	8008412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001aac:	2038      	movs	r0, #56	; 0x38
 8001aae:	f006 fccc 	bl	800844a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	203a      	movs	r0, #58	; 0x3a
 8001ab8:	f006 fcab 	bl	8008412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001abc:	203a      	movs	r0, #58	; 0x3a
 8001abe:	f006 fcc4 	bl	800844a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	203b      	movs	r0, #59	; 0x3b
 8001ac8:	f006 fca3 	bl	8008412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001acc:	203b      	movs	r0, #59	; 0x3b
 8001ace:	f006 fcbc 	bl	800844a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2045      	movs	r0, #69	; 0x45
 8001ad8:	f006 fc9b 	bl	8008412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001adc:	2045      	movs	r0, #69	; 0x45
 8001ade:	f006 fcb4 	bl	800844a <HAL_NVIC_EnableIRQ>

}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b49      	ldr	r3, [pc, #292]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a41      	ldr	r2, [pc, #260]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a3a      	ldr	r2, [pc, #232]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a33      	ldr	r2, [pc, #204]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a2c      	ldr	r2, [pc, #176]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <MX_GPIO_Init+0x140>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	210f      	movs	r1, #15
 8001b96:	4827      	ldr	r0, [pc, #156]	; (8001c34 <MX_GPIO_Init+0x144>)
 8001b98:	f007 f9bc 	bl	8008f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001ba2:	4825      	ldr	r0, [pc, #148]	; (8001c38 <MX_GPIO_Init+0x148>)
 8001ba4:	f007 f9b6 	bl	8008f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001ba8:	230f      	movs	r3, #15
 8001baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	481d      	ldr	r0, [pc, #116]	; (8001c34 <MX_GPIO_Init+0x144>)
 8001bc0:	f006 fffc 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001bc4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4816      	ldr	r0, [pc, #88]	; (8001c38 <MX_GPIO_Init+0x148>)
 8001bde:	f006 ffed 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001be2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480f      	ldr	r0, [pc, #60]	; (8001c38 <MX_GPIO_Init+0x148>)
 8001bfa:	f006 ffdf 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4808      	ldr	r0, [pc, #32]	; (8001c34 <MX_GPIO_Init+0x144>)
 8001c12:	f006 ffd3 	bl	8008bbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2101      	movs	r1, #1
 8001c1a:	2028      	movs	r0, #40	; 0x28
 8001c1c:	f006 fbf9 	bl	8008412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c20:	2028      	movs	r0, #40	; 0x28
 8001c22:	f006 fc12 	bl	800844a <HAL_NVIC_EnableIRQ>

}
 8001c26:	bf00      	nop
 8001c28:	3728      	adds	r7, #40	; 0x28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020400 	.word	0x40020400

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c40:	b672      	cpsid	i
}
 8001c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <Error_Handler+0x8>
	...

08001c48 <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	603a      	str	r2, [r7, #0]
 8001c52:	80fb      	strh	r3, [r7, #6]
 8001c54:	460b      	mov	r3, r1
 8001c56:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	2b1d      	cmp	r3, #29
 8001c62:	f200 81f9 	bhi.w	8002058 <Process_Data+0x410>
 8001c66:	a201      	add	r2, pc, #4	; (adr r2, 8001c6c <Process_Data+0x24>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001ce5 	.word	0x08001ce5
 8001c70:	08001d15 	.word	0x08001d15
 8001c74:	08001d45 	.word	0x08001d45
 8001c78:	08001d75 	.word	0x08001d75
 8001c7c:	08001da5 	.word	0x08001da5
 8001c80:	08001dd5 	.word	0x08001dd5
 8001c84:	08001e05 	.word	0x08001e05
 8001c88:	08001e35 	.word	0x08001e35
 8001c8c:	08001e65 	.word	0x08001e65
 8001c90:	08001e95 	.word	0x08001e95
 8001c94:	08001ec5 	.word	0x08001ec5
 8001c98:	08001ef5 	.word	0x08001ef5
 8001c9c:	08001f25 	.word	0x08001f25
 8001ca0:	08001f55 	.word	0x08001f55
 8001ca4:	08001f85 	.word	0x08001f85
 8001ca8:	08001fb5 	.word	0x08001fb5
 8001cac:	08001fe9 	.word	0x08001fe9
 8001cb0:	08001ff1 	.word	0x08001ff1
 8001cb4:	08001ff9 	.word	0x08001ff9
 8001cb8:	08002001 	.word	0x08002001
 8001cbc:	08002009 	.word	0x08002009
 8001cc0:	08002011 	.word	0x08002011
 8001cc4:	08002019 	.word	0x08002019
 8001cc8:	08002021 	.word	0x08002021
 8001ccc:	08002029 	.word	0x08002029
 8001cd0:	08002031 	.word	0x08002031
 8001cd4:	08002039 	.word	0x08002039
 8001cd8:	08002041 	.word	0x08002041
 8001cdc:	08002049 	.word	0x08002049
 8001ce0:	08002051 	.word	0x08002051
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	88ba      	ldrh	r2, [r7, #4]
 8001ce8:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	885b      	ldrh	r3, [r3, #2]
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001d02:	e1aa      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	885b      	ldrh	r3, [r3, #2]
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	805a      	strh	r2, [r3, #2]
			break;
 8001d12:	e1a2      	b.n	800205a <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	88ba      	ldrh	r2, [r7, #4]
 8001d18:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	885b      	ldrh	r3, [r3, #2]
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001d32:	e192      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	885b      	ldrh	r3, [r3, #2]
 8001d38:	f023 0302 	bic.w	r3, r3, #2
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	805a      	strh	r2, [r3, #2]
			break;
 8001d42:	e18a      	b.n	800205a <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	88ba      	ldrh	r2, [r7, #4]
 8001d48:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	885b      	ldrh	r3, [r3, #2]
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001d62:	e17a      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	885b      	ldrh	r3, [r3, #2]
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	805a      	strh	r2, [r3, #2]
			break;
 8001d72:	e172      	b.n	800205a <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	88ba      	ldrh	r2, [r7, #4]
 8001d78:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	885b      	ldrh	r3, [r3, #2]
 8001d88:	f043 0308 	orr.w	r3, r3, #8
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001d92:	e162      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	885b      	ldrh	r3, [r3, #2]
 8001d98:	f023 0308 	bic.w	r3, r3, #8
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	805a      	strh	r2, [r3, #2]
			break;
 8001da2:	e15a      	b.n	800205a <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	88ba      	ldrh	r2, [r7, #4]
 8001da8:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	885b      	ldrh	r3, [r3, #2]
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001dc2:	e14a      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	885b      	ldrh	r3, [r3, #2]
 8001dc8:	f023 0310 	bic.w	r3, r3, #16
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	805a      	strh	r2, [r3, #2]
			break;
 8001dd2:	e142      	b.n	800205a <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	88ba      	ldrh	r2, [r7, #4]
 8001dd8:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	885b      	ldrh	r3, [r3, #2]
 8001de8:	f043 0320 	orr.w	r3, r3, #32
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001df2:	e132      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	885b      	ldrh	r3, [r3, #2]
 8001df8:	f023 0320 	bic.w	r3, r3, #32
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	805a      	strh	r2, [r3, #2]
			break;
 8001e02:	e12a      	b.n	800205a <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	88ba      	ldrh	r2, [r7, #4]
 8001e08:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d007      	beq.n	8001e24 <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	885b      	ldrh	r3, [r3, #2]
 8001e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001e22:	e11a      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	885b      	ldrh	r3, [r3, #2]
 8001e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	805a      	strh	r2, [r3, #2]
			break;
 8001e32:	e112      	b.n	800205a <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	88ba      	ldrh	r2, [r7, #4]
 8001e38:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	885b      	ldrh	r3, [r3, #2]
 8001e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001e52:	e102      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	885b      	ldrh	r3, [r3, #2]
 8001e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	805a      	strh	r2, [r3, #2]
			break;
 8001e62:	e0fa      	b.n	800205a <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	88ba      	ldrh	r2, [r7, #4]
 8001e68:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	885b      	ldrh	r3, [r3, #2]
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001e82:	e0ea      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	885b      	ldrh	r3, [r3, #2]
 8001e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	805a      	strh	r2, [r3, #2]
			break;
 8001e92:	e0e2      	b.n	800205a <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	88ba      	ldrh	r2, [r7, #4]
 8001e98:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	885b      	ldrh	r3, [r3, #2]
 8001ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001eb2:	e0d2      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	885b      	ldrh	r3, [r3, #2]
 8001eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	805a      	strh	r2, [r3, #2]
			break;
 8001ec2:	e0ca      	b.n	800205a <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	88ba      	ldrh	r2, [r7, #4]
 8001ec8:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	885b      	ldrh	r3, [r3, #2]
 8001ed8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001ee2:	e0ba      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	885b      	ldrh	r3, [r3, #2]
 8001ee8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	805a      	strh	r2, [r3, #2]
			break;
 8001ef2:	e0b2      	b.n	800205a <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	88ba      	ldrh	r2, [r7, #4]
 8001ef8:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	885b      	ldrh	r3, [r3, #2]
 8001f08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001f12:	e0a2      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	885b      	ldrh	r3, [r3, #2]
 8001f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	805a      	strh	r2, [r3, #2]
			break;
 8001f22:	e09a      	b.n	800205a <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	88ba      	ldrh	r2, [r7, #4]
 8001f28:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	885b      	ldrh	r3, [r3, #2]
 8001f38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001f42:	e08a      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	885b      	ldrh	r3, [r3, #2]
 8001f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	805a      	strh	r2, [r3, #2]
			break;
 8001f52:	e082      	b.n	800205a <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	88ba      	ldrh	r2, [r7, #4]
 8001f58:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	885b      	ldrh	r3, [r3, #2]
 8001f68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001f72:	e072      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	885b      	ldrh	r3, [r3, #2]
 8001f78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	805a      	strh	r2, [r3, #2]
			break;
 8001f82:	e06a      	b.n	800205a <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	88ba      	ldrh	r2, [r7, #4]
 8001f88:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	885b      	ldrh	r3, [r3, #2]
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001fa2:	e05a      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	885b      	ldrh	r3, [r3, #2]
 8001fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	805a      	strh	r2, [r3, #2]
			break;
 8001fb2:	e052      	b.n	800205a <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	88ba      	ldrh	r2, [r7, #4]
 8001fb8:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d009      	beq.n	8001fd8 <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	885b      	ldrh	r3, [r3, #2]
 8001fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001fd6:	e040      	b.n	800205a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	885b      	ldrh	r3, [r3, #2]
 8001fdc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	805a      	strh	r2, [r3, #2]
			break;
 8001fe6:	e038      	b.n	800205a <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	88ba      	ldrh	r2, [r7, #4]
 8001fec:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001fee:	e034      	b.n	800205a <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	88ba      	ldrh	r2, [r7, #4]
 8001ff4:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8001ff6:	e030      	b.n	800205a <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	88ba      	ldrh	r2, [r7, #4]
 8001ffc:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8001ffe:	e02c      	b.n	800205a <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	88ba      	ldrh	r2, [r7, #4]
 8002004:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8002006:	e028      	b.n	800205a <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	88ba      	ldrh	r2, [r7, #4]
 800200c:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 800200e:	e024      	b.n	800205a <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	88ba      	ldrh	r2, [r7, #4]
 8002014:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8002016:	e020      	b.n	800205a <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	88ba      	ldrh	r2, [r7, #4]
 800201c:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 800201e:	e01c      	b.n	800205a <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	88ba      	ldrh	r2, [r7, #4]
 8002024:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8002026:	e018      	b.n	800205a <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	88ba      	ldrh	r2, [r7, #4]
 800202c:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800202e:	e014      	b.n	800205a <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	88ba      	ldrh	r2, [r7, #4]
 8002034:	801a      	strh	r2, [r3, #0]
			break;
 8002036:	e010      	b.n	800205a <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	88ba      	ldrh	r2, [r7, #4]
 800203c:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 800203e:	e00c      	b.n	800205a <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	88ba      	ldrh	r2, [r7, #4]
 8002044:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8002046:	e008      	b.n	800205a <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	88ba      	ldrh	r2, [r7, #4]
 800204c:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 800204e:	e004      	b.n	800205a <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	88ba      	ldrh	r2, [r7, #4]
 8002054:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 8002056:	e000      	b.n	800205a <Process_Data+0x412>

		default:
			break;
 8002058:	bf00      	nop
	}

	return;
 800205a:	bf00      	nop
}
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop

08002068 <PDM_CAN_FilterConfig>:

HAL_StatusTypeDef PDM_CAN_FilterConfig(CAN_HandleTypeDef* hcan, uint32_t bank_position, uint32_t fifo_assignment)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b090      	sub	sp, #64	; 0x40
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filterID = 0x1E35C000, filterMask = 0x1FFFF000;
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <PDM_CAN_FilterConfig+0x5c>)
 8002076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <PDM_CAN_FilterConfig+0x60>)
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002080:	2301      	movs	r3, #1
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filterID >> 13;
 8002084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002086:	0b5b      	lsrs	r3, r3, #13
 8002088:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filterID << 3) & 0xFFF8;
 800208a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	b29b      	uxth	r3, r3
 8002090:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 8002092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002094:	0b5b      	lsrs	r3, r3, #13
 8002096:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (filterMask << 3) & 0xFFF8;
 8002098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	b29b      	uxth	r3, r3
 800209e:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = bank_position;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = fifo_assignment;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80020a8:	2301      	movs	r3, #1
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	4619      	mov	r1, r3
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f005 fb36 	bl	8007724 <HAL_CAN_ConfigFilter>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3740      	adds	r7, #64	; 0x40
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	1e35c000 	.word	0x1e35c000
 80020c8:	1ffff000 	.word	0x1ffff000

080020cc <PDM_CAN_Process_Data>:

void PDM_CAN_Process_Data(uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, PDM_Data* data_struct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	460b      	mov	r3, r1
 80020da:	72fb      	strb	r3, [r7, #11]
	uint16_t id = 0, data = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	82fb      	strh	r3, [r7, #22]
 80020e0:	2300      	movs	r3, #0
 80020e2:	82bb      	strh	r3, [r7, #20]

	if((data_id & 0x1FFFF000) != 0x1E35C000)
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4b26      	ldr	r3, [pc, #152]	; (8002180 <PDM_CAN_Process_Data+0xb4>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	4a26      	ldr	r2, [pc, #152]	; (8002184 <PDM_CAN_Process_Data+0xb8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d142      	bne.n	8002176 <PDM_CAN_Process_Data+0xaa>
		return;

	id  = data_buffer[0] << 8;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	82fb      	strh	r3, [r7, #22]
	id |= data_buffer[1] & 0xff;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3301      	adds	r3, #1
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b29a      	uxth	r2, r3
 8002102:	8afb      	ldrh	r3, [r7, #22]
 8002104:	4313      	orrs	r3, r2
 8002106:	82fb      	strh	r3, [r7, #22]
	data  = data_buffer[2] << 8;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3302      	adds	r3, #2
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	82bb      	strh	r3, [r7, #20]
	data |= data_buffer[3] & 0xff;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3303      	adds	r3, #3
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b29a      	uxth	r2, r3
 800211c:	8abb      	ldrh	r3, [r7, #20]
 800211e:	4313      	orrs	r3, r2
 8002120:	82bb      	strh	r3, [r7, #20]

	Process_Data(id, data, data_struct);
 8002122:	8ab9      	ldrh	r1, [r7, #20]
 8002124:	8afb      	ldrh	r3, [r7, #22]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fd8d 	bl	8001c48 <Process_Data>

	if(data_length == 8)
 800212e:	7afb      	ldrb	r3, [r7, #11]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d121      	bne.n	8002178 <PDM_CAN_Process_Data+0xac>
	{
		id  = data_buffer[4] << 8;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3304      	adds	r3, #4
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	82fb      	strh	r3, [r7, #22]
		id |= data_buffer[5] & 0xff;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3305      	adds	r3, #5
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b29a      	uxth	r2, r3
 8002148:	8afb      	ldrh	r3, [r7, #22]
 800214a:	4313      	orrs	r3, r2
 800214c:	82fb      	strh	r3, [r7, #22]
		data  = data_buffer[6] << 8;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3306      	adds	r3, #6
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	82bb      	strh	r3, [r7, #20]
		data |= data_buffer[7] & 0xff;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3307      	adds	r3, #7
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b29a      	uxth	r2, r3
 8002162:	8abb      	ldrh	r3, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	82bb      	strh	r3, [r7, #20]

		Process_Data(id, data, data_struct);
 8002168:	8ab9      	ldrh	r1, [r7, #20]
 800216a:	8afb      	ldrh	r3, [r7, #22]
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fd6a 	bl	8001c48 <Process_Data>
 8002174:	e000      	b.n	8002178 <PDM_CAN_Process_Data+0xac>
		return;
 8002176:	bf00      	nop
	}
}
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	1ffff000 	.word	0x1ffff000
 8002184:	1e35c000 	.word	0x1e35c000

08002188 <Principal_Verify>:
 */

#include "principal.h"

void Principal_Verify()
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
	verifyADC = 0;
 800218e:	4b29      	ldr	r3, [pc, #164]	; (8002234 <Principal_Verify+0xac>)
 8002190:	2200      	movs	r2, #0
 8002192:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 8002194:	2300      	movs	r3, #0
 8002196:	71fb      	strb	r3, [r7, #7]
 8002198:	e015      	b.n	80021c6 <Principal_Verify+0x3e>
		if(adcBuffer[i] > ADC_THRESHOLD)
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	4a26      	ldr	r2, [pc, #152]	; (8002238 <Principal_Verify+0xb0>)
 800219e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021a2:	2b1e      	cmp	r3, #30
 80021a4:	d90c      	bls.n	80021c0 <Principal_Verify+0x38>
			verifyADC |= (1 << i);
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2201      	movs	r2, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	b21a      	sxth	r2, r3
 80021b0:	4b20      	ldr	r3, [pc, #128]	; (8002234 <Principal_Verify+0xac>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <Principal_Verify+0xac>)
 80021be:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	3301      	adds	r3, #1
 80021c4:	71fb      	strb	r3, [r7, #7]
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	2b12      	cmp	r3, #18
 80021ca:	d9e6      	bls.n	800219a <Principal_Verify+0x12>

	if(flagDatalogger == DL_SAVE)
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <Principal_Verify+0xb4>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <Principal_Verify+0x58>
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	2102      	movs	r1, #2
 80021d8:	4819      	ldr	r0, [pc, #100]	; (8002240 <Principal_Verify+0xb8>)
 80021da:	f006 fe9b 	bl	8008f14 <HAL_GPIO_WritePin>
 80021de:	e004      	b.n	80021ea <Principal_Verify+0x62>
	else
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2102      	movs	r1, #2
 80021e4:	4816      	ldr	r0, [pc, #88]	; (8002240 <Principal_Verify+0xb8>)
 80021e6:	f006 fe95 	bl	8008f14 <HAL_GPIO_WritePin>

	if((verifyCAN & 1) == 1)
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <Principal_Verify+0xbc>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <Principal_Verify+0x78>
		HAL_GPIO_TogglePin(LED_CAN_TX);
 80021f6:	2104      	movs	r1, #4
 80021f8:	4811      	ldr	r0, [pc, #68]	; (8002240 <Principal_Verify+0xb8>)
 80021fa:	f006 fea4 	bl	8008f46 <HAL_GPIO_TogglePin>
 80021fe:	e004      	b.n	800220a <Principal_Verify+0x82>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	2104      	movs	r1, #4
 8002204:	480e      	ldr	r0, [pc, #56]	; (8002240 <Principal_Verify+0xb8>)
 8002206:	f006 fe85 	bl	8008f14 <HAL_GPIO_WritePin>

	if((verifyCAN & 2) == 2)
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <Principal_Verify+0xbc>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <Principal_Verify+0x98>
		HAL_GPIO_TogglePin(LED_CAN_RX);
 8002216:	2108      	movs	r1, #8
 8002218:	4809      	ldr	r0, [pc, #36]	; (8002240 <Principal_Verify+0xb8>)
 800221a:	f006 fe94 	bl	8008f46 <HAL_GPIO_TogglePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
}
 800221e:	e004      	b.n	800222a <Principal_Verify+0xa2>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 8002220:	2200      	movs	r2, #0
 8002222:	2108      	movs	r1, #8
 8002224:	4806      	ldr	r0, [pc, #24]	; (8002240 <Principal_Verify+0xb8>)
 8002226:	f006 fe75 	bl	8008f14 <HAL_GPIO_WritePin>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000830 	.word	0x20000830
 8002238:	20000738 	.word	0x20000738
 800223c:	20003c98 	.word	0x20003c98
 8002240:	40020800 	.word	0x40020800
 8002244:	20000872 	.word	0x20000872

08002248 <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af02      	add	r7, sp, #8
 800224e:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x000f) == 0x0000)
 8002250:	4b49      	ldr	r3, [pc, #292]	; (8002378 <Tx_Analog_1_4+0x130>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	2b00      	cmp	r3, #0
 800225a:	d103      	bne.n	8002264 <Tx_Analog_1_4+0x1c>
	{
		accCAN[ANALOG_1_4] = 0;
 800225c:	4b47      	ldr	r3, [pc, #284]	; (800237c <Tx_Analog_1_4+0x134>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
		return;
 8002262:	e086      	b.n	8002372 <Tx_Analog_1_4+0x12a>
	}

	txHeader.IDE = CAN_ID_STD;
 8002264:	4b46      	ldr	r3, [pc, #280]	; (8002380 <Tx_Analog_1_4+0x138>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800226a:	4b45      	ldr	r3, [pc, #276]	; (8002380 <Tx_Analog_1_4+0x138>)
 800226c:	2200      	movs	r2, #0
 800226e:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002270:	4b43      	ldr	r3, [pc, #268]	; (8002380 <Tx_Analog_1_4+0x138>)
 8002272:	2200      	movs	r2, #0
 8002274:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + ANALOG_1_4);
 8002276:	4b42      	ldr	r3, [pc, #264]	; (8002380 <Tx_Analog_1_4+0x138>)
 8002278:	f240 5201 	movw	r2, #1281	; 0x501
 800227c:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 800227e:	4b40      	ldr	r3, [pc, #256]	; (8002380 <Tx_Analog_1_4+0x138>)
 8002280:	2208      	movs	r2, #8
 8002282:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[0] >> 8;
 8002284:	4b3f      	ldr	r3, [pc, #252]	; (8002384 <Tx_Analog_1_4+0x13c>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	b29b      	uxth	r3, r3
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b3e      	ldr	r3, [pc, #248]	; (8002388 <Tx_Analog_1_4+0x140>)
 8002290:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[0] & 0xff;
 8002292:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <Tx_Analog_1_4+0x13c>)
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <Tx_Analog_1_4+0x140>)
 800229a:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[1] >> 8;
 800229c:	4b39      	ldr	r3, [pc, #228]	; (8002384 <Tx_Analog_1_4+0x13c>)
 800229e:	885b      	ldrh	r3, [r3, #2]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b38      	ldr	r3, [pc, #224]	; (8002388 <Tx_Analog_1_4+0x140>)
 80022a8:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[1] & 0xff;
 80022aa:	4b36      	ldr	r3, [pc, #216]	; (8002384 <Tx_Analog_1_4+0x13c>)
 80022ac:	885b      	ldrh	r3, [r3, #2]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	4b35      	ldr	r3, [pc, #212]	; (8002388 <Tx_Analog_1_4+0x140>)
 80022b2:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[2] >> 8;
 80022b4:	4b33      	ldr	r3, [pc, #204]	; (8002384 <Tx_Analog_1_4+0x13c>)
 80022b6:	889b      	ldrh	r3, [r3, #4]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4b32      	ldr	r3, [pc, #200]	; (8002388 <Tx_Analog_1_4+0x140>)
 80022c0:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[2] & 0xff;
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <Tx_Analog_1_4+0x13c>)
 80022c4:	889b      	ldrh	r3, [r3, #4]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <Tx_Analog_1_4+0x140>)
 80022ca:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[3] >> 8;
 80022cc:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <Tx_Analog_1_4+0x13c>)
 80022ce:	88db      	ldrh	r3, [r3, #6]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <Tx_Analog_1_4+0x140>)
 80022d8:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[3] & 0xff;
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <Tx_Analog_1_4+0x13c>)
 80022dc:	88db      	ldrh	r3, [r3, #6]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b29      	ldr	r3, [pc, #164]	; (8002388 <Tx_Analog_1_4+0x140>)
 80022e2:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <Tx_Analog_1_4+0x144>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10a      	bne.n	8002302 <Tx_Analog_1_4+0xba>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 80022ec:	4b24      	ldr	r3, [pc, #144]	; (8002380 <Tx_Analog_1_4+0x138>)
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	4b23      	ldr	r3, [pc, #140]	; (8002380 <Tx_Analog_1_4+0x138>)
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	b2d9      	uxtb	r1, r3
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <Tx_Analog_1_4+0x148>)
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <Tx_Analog_1_4+0x14c>)
 80022fc:	4a22      	ldr	r2, [pc, #136]	; (8002388 <Tx_Analog_1_4+0x140>)
 80022fe:	f003 fded 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_1_4] >= perCAN[ANALOG_1_4]) && (perCAN[ANALOG_1_4] != MSG_DISABLED))
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <Tx_Analog_1_4+0x134>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a24      	ldr	r2, [pc, #144]	; (8002398 <Tx_Analog_1_4+0x150>)
 8002308:	8812      	ldrh	r2, [r2, #0]
 800230a:	4293      	cmp	r3, r2
 800230c:	d331      	bcc.n	8002372 <Tx_Analog_1_4+0x12a>
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <Tx_Analog_1_4+0x150>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d02d      	beq.n	8002372 <Tx_Analog_1_4+0x12a>
	{
		accCAN[ANALOG_1_4] -= perCAN[ANALOG_1_4];
 8002316:	4b19      	ldr	r3, [pc, #100]	; (800237c <Tx_Analog_1_4+0x134>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <Tx_Analog_1_4+0x150>)
 800231c:	8812      	ldrh	r2, [r2, #0]
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	4a16      	ldr	r2, [pc, #88]	; (800237c <Tx_Analog_1_4+0x134>)
 8002322:	6013      	str	r3, [r2, #0]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <Tx_Analog_1_4+0x154>)
 8002326:	4a18      	ldr	r2, [pc, #96]	; (8002388 <Tx_Analog_1_4+0x140>)
 8002328:	4915      	ldr	r1, [pc, #84]	; (8002380 <Tx_Analog_1_4+0x138>)
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f005 fb1e 	bl	800796c <HAL_CAN_AddTxMessage>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d107      	bne.n	8002346 <Tx_Analog_1_4+0xfe>
			verifyCAN |= 1;
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <Tx_Analog_1_4+0x158>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <Tx_Analog_1_4+0x158>)
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	e006      	b.n	8002354 <Tx_Analog_1_4+0x10c>
		else
			verifyCAN &= 0x02;
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <Tx_Analog_1_4+0x158>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	b2da      	uxtb	r2, r3
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <Tx_Analog_1_4+0x158>)
 8002352:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e002      	b.n	8002360 <Tx_Analog_1_4+0x118>
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	3301      	adds	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f005 fbde 	bl	8007b22 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002366:	4603      	mov	r3, r0
 8002368:	2b03      	cmp	r3, #3
 800236a:	d002      	beq.n	8002372 <Tx_Analog_1_4+0x12a>
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d9f3      	bls.n	800235a <Tx_Analog_1_4+0x112>
	}
}
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000830 	.word	0x20000830
 800237c:	20000720 	.word	0x20000720
 8002380:	20000708 	.word	0x20000708
 8002384:	20000738 	.word	0x20000738
 8002388:	2000077c 	.word	0x2000077c
 800238c:	20003c98 	.word	0x20003c98
 8002390:	20002c6c 	.word	0x20002c6c
 8002394:	2000190c 	.word	0x2000190c
 8002398:	200018fc 	.word	0x200018fc
 800239c:	20002c68 	.word	0x20002c68
 80023a0:	20000872 	.word	0x20000872

080023a4 <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x00f0) == 0x0000)
 80023ac:	4b49      	ldr	r3, [pc, #292]	; (80024d4 <Tx_Analog_5_8+0x130>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d103      	bne.n	80023c0 <Tx_Analog_5_8+0x1c>
	{
		accCAN[ANALOG_5_8] = 0;
 80023b8:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <Tx_Analog_5_8+0x134>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	605a      	str	r2, [r3, #4]
		return;
 80023be:	e086      	b.n	80024ce <Tx_Analog_5_8+0x12a>
	}

	txHeader.IDE = CAN_ID_STD;
 80023c0:	4b46      	ldr	r3, [pc, #280]	; (80024dc <Tx_Analog_5_8+0x138>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80023c6:	4b45      	ldr	r3, [pc, #276]	; (80024dc <Tx_Analog_5_8+0x138>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80023cc:	4b43      	ldr	r3, [pc, #268]	; (80024dc <Tx_Analog_5_8+0x138>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + ANALOG_5_8);
 80023d2:	4b42      	ldr	r3, [pc, #264]	; (80024dc <Tx_Analog_5_8+0x138>)
 80023d4:	f240 5202 	movw	r2, #1282	; 0x502
 80023d8:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80023da:	4b40      	ldr	r3, [pc, #256]	; (80024dc <Tx_Analog_5_8+0x138>)
 80023dc:	2208      	movs	r2, #8
 80023de:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[4] >> 8;
 80023e0:	4b3f      	ldr	r3, [pc, #252]	; (80024e0 <Tx_Analog_5_8+0x13c>)
 80023e2:	891b      	ldrh	r3, [r3, #8]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b3e      	ldr	r3, [pc, #248]	; (80024e4 <Tx_Analog_5_8+0x140>)
 80023ec:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[4] & 0xff;
 80023ee:	4b3c      	ldr	r3, [pc, #240]	; (80024e0 <Tx_Analog_5_8+0x13c>)
 80023f0:	891b      	ldrh	r3, [r3, #8]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b3b      	ldr	r3, [pc, #236]	; (80024e4 <Tx_Analog_5_8+0x140>)
 80023f6:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[5] >> 8;
 80023f8:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <Tx_Analog_5_8+0x13c>)
 80023fa:	895b      	ldrh	r3, [r3, #10]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	b29b      	uxth	r3, r3
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <Tx_Analog_5_8+0x140>)
 8002404:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[5] & 0xff;
 8002406:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <Tx_Analog_5_8+0x13c>)
 8002408:	895b      	ldrh	r3, [r3, #10]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b35      	ldr	r3, [pc, #212]	; (80024e4 <Tx_Analog_5_8+0x140>)
 800240e:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[6] >> 8;
 8002410:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <Tx_Analog_5_8+0x13c>)
 8002412:	899b      	ldrh	r3, [r3, #12]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	b29b      	uxth	r3, r3
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <Tx_Analog_5_8+0x140>)
 800241c:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[6] & 0xff;
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <Tx_Analog_5_8+0x13c>)
 8002420:	899b      	ldrh	r3, [r3, #12]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <Tx_Analog_5_8+0x140>)
 8002426:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[7] >> 8;
 8002428:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <Tx_Analog_5_8+0x13c>)
 800242a:	89db      	ldrh	r3, [r3, #14]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	b29b      	uxth	r3, r3
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <Tx_Analog_5_8+0x140>)
 8002434:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[7] & 0xff;
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <Tx_Analog_5_8+0x13c>)
 8002438:	89db      	ldrh	r3, [r3, #14]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <Tx_Analog_5_8+0x140>)
 800243e:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <Tx_Analog_5_8+0x144>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d10a      	bne.n	800245e <Tx_Analog_5_8+0xba>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8002448:	4b24      	ldr	r3, [pc, #144]	; (80024dc <Tx_Analog_5_8+0x138>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	4b23      	ldr	r3, [pc, #140]	; (80024dc <Tx_Analog_5_8+0x138>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	b2d9      	uxtb	r1, r3
 8002452:	4b26      	ldr	r3, [pc, #152]	; (80024ec <Tx_Analog_5_8+0x148>)
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <Tx_Analog_5_8+0x14c>)
 8002458:	4a22      	ldr	r2, [pc, #136]	; (80024e4 <Tx_Analog_5_8+0x140>)
 800245a:	f003 fd3f 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_5_8] >= perCAN[ANALOG_5_8]) && (perCAN[ANALOG_5_8] != MSG_DISABLED))
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <Tx_Analog_5_8+0x134>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a24      	ldr	r2, [pc, #144]	; (80024f4 <Tx_Analog_5_8+0x150>)
 8002464:	8852      	ldrh	r2, [r2, #2]
 8002466:	4293      	cmp	r3, r2
 8002468:	d331      	bcc.n	80024ce <Tx_Analog_5_8+0x12a>
 800246a:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <Tx_Analog_5_8+0x150>)
 800246c:	885b      	ldrh	r3, [r3, #2]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d02d      	beq.n	80024ce <Tx_Analog_5_8+0x12a>
	{
		accCAN[ANALOG_5_8] -= perCAN[ANALOG_5_8];
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <Tx_Analog_5_8+0x134>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <Tx_Analog_5_8+0x150>)
 8002478:	8852      	ldrh	r2, [r2, #2]
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <Tx_Analog_5_8+0x134>)
 800247e:	6053      	str	r3, [r2, #4]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <Tx_Analog_5_8+0x154>)
 8002482:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <Tx_Analog_5_8+0x140>)
 8002484:	4915      	ldr	r1, [pc, #84]	; (80024dc <Tx_Analog_5_8+0x138>)
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f005 fa70 	bl	800796c <HAL_CAN_AddTxMessage>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d107      	bne.n	80024a2 <Tx_Analog_5_8+0xfe>
			verifyCAN |= 1;
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <Tx_Analog_5_8+0x158>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <Tx_Analog_5_8+0x158>)
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	e006      	b.n	80024b0 <Tx_Analog_5_8+0x10c>
		else
			verifyCAN &= 0x02;
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <Tx_Analog_5_8+0x158>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <Tx_Analog_5_8+0x158>)
 80024ae:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	e002      	b.n	80024bc <Tx_Analog_5_8+0x118>
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	3301      	adds	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f005 fb30 	bl	8007b22 <HAL_CAN_GetTxMailboxesFreeLevel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d002      	beq.n	80024ce <Tx_Analog_5_8+0x12a>
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d9f3      	bls.n	80024b6 <Tx_Analog_5_8+0x112>
	}
}
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000830 	.word	0x20000830
 80024d8:	20000720 	.word	0x20000720
 80024dc:	20000708 	.word	0x20000708
 80024e0:	20000738 	.word	0x20000738
 80024e4:	2000077c 	.word	0x2000077c
 80024e8:	20003c98 	.word	0x20003c98
 80024ec:	20002c6c 	.word	0x20002c6c
 80024f0:	2000190c 	.word	0x2000190c
 80024f4:	200018fc 	.word	0x200018fc
 80024f8:	20002c68 	.word	0x20002c68
 80024fc:	20000872 	.word	0x20000872

08002500 <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af02      	add	r7, sp, #8
 8002506:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x0f00) == 0x0000)
 8002508:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <Tx_Analog_9_12+0x140>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <Tx_Analog_9_12+0x1c>
	{
		accCAN[ANALOG_9_12] = 0;
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <Tx_Analog_9_12+0x144>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
		return;
 800251a:	e08e      	b.n	800263a <Tx_Analog_9_12+0x13a>
	}

	txHeader.IDE = CAN_ID_STD;
 800251c:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <Tx_Analog_9_12+0x148>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <Tx_Analog_9_12+0x148>)
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002528:	4b47      	ldr	r3, [pc, #284]	; (8002648 <Tx_Analog_9_12+0x148>)
 800252a:	2200      	movs	r2, #0
 800252c:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + ANALOG_9_12);
 800252e:	4b46      	ldr	r3, [pc, #280]	; (8002648 <Tx_Analog_9_12+0x148>)
 8002530:	f240 5203 	movw	r2, #1283	; 0x503
 8002534:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 8002536:	4b44      	ldr	r3, [pc, #272]	; (8002648 <Tx_Analog_9_12+0x148>)
 8002538:	2208      	movs	r2, #8
 800253a:	611a      	str	r2, [r3, #16]

	if((verifyADC & 0x0f00) == 0)
 800253c:	4b40      	ldr	r3, [pc, #256]	; (8002640 <Tx_Analog_9_12+0x140>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002544:	2b00      	cmp	r3, #0
 8002546:	d077      	beq.n	8002638 <Tx_Analog_9_12+0x138>
		return;

	txData[0] = adcBuffer[8] >> 8;
 8002548:	4b40      	ldr	r3, [pc, #256]	; (800264c <Tx_Analog_9_12+0x14c>)
 800254a:	8a1b      	ldrh	r3, [r3, #16]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	b29b      	uxth	r3, r3
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <Tx_Analog_9_12+0x150>)
 8002554:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[8] & 0xff;
 8002556:	4b3d      	ldr	r3, [pc, #244]	; (800264c <Tx_Analog_9_12+0x14c>)
 8002558:	8a1b      	ldrh	r3, [r3, #16]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b3c      	ldr	r3, [pc, #240]	; (8002650 <Tx_Analog_9_12+0x150>)
 800255e:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[9] >> 8;
 8002560:	4b3a      	ldr	r3, [pc, #232]	; (800264c <Tx_Analog_9_12+0x14c>)
 8002562:	8a5b      	ldrh	r3, [r3, #18]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	b29b      	uxth	r3, r3
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b39      	ldr	r3, [pc, #228]	; (8002650 <Tx_Analog_9_12+0x150>)
 800256c:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[9] & 0xff;
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <Tx_Analog_9_12+0x14c>)
 8002570:	8a5b      	ldrh	r3, [r3, #18]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b36      	ldr	r3, [pc, #216]	; (8002650 <Tx_Analog_9_12+0x150>)
 8002576:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[10] >> 8;
 8002578:	4b34      	ldr	r3, [pc, #208]	; (800264c <Tx_Analog_9_12+0x14c>)
 800257a:	8a9b      	ldrh	r3, [r3, #20]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	b29b      	uxth	r3, r3
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b33      	ldr	r3, [pc, #204]	; (8002650 <Tx_Analog_9_12+0x150>)
 8002584:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[10] & 0xff;
 8002586:	4b31      	ldr	r3, [pc, #196]	; (800264c <Tx_Analog_9_12+0x14c>)
 8002588:	8a9b      	ldrh	r3, [r3, #20]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	4b30      	ldr	r3, [pc, #192]	; (8002650 <Tx_Analog_9_12+0x150>)
 800258e:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[11] >> 8;
 8002590:	4b2e      	ldr	r3, [pc, #184]	; (800264c <Tx_Analog_9_12+0x14c>)
 8002592:	8adb      	ldrh	r3, [r3, #22]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	b29b      	uxth	r3, r3
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <Tx_Analog_9_12+0x150>)
 800259c:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[11] & 0xff;
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <Tx_Analog_9_12+0x14c>)
 80025a0:	8adb      	ldrh	r3, [r3, #22]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <Tx_Analog_9_12+0x150>)
 80025a6:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 80025a8:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <Tx_Analog_9_12+0x154>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d10a      	bne.n	80025c6 <Tx_Analog_9_12+0xc6>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <Tx_Analog_9_12+0x148>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <Tx_Analog_9_12+0x148>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	b2d9      	uxtb	r1, r3
 80025ba:	4b27      	ldr	r3, [pc, #156]	; (8002658 <Tx_Analog_9_12+0x158>)
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	4b27      	ldr	r3, [pc, #156]	; (800265c <Tx_Analog_9_12+0x15c>)
 80025c0:	4a23      	ldr	r2, [pc, #140]	; (8002650 <Tx_Analog_9_12+0x150>)
 80025c2:	f003 fc8b 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_9_12] >= perCAN[ANALOG_9_12]) && (perCAN[ANALOG_9_12] != MSG_DISABLED))
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <Tx_Analog_9_12+0x144>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	4a25      	ldr	r2, [pc, #148]	; (8002660 <Tx_Analog_9_12+0x160>)
 80025cc:	8892      	ldrh	r2, [r2, #4]
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d333      	bcc.n	800263a <Tx_Analog_9_12+0x13a>
 80025d2:	4b23      	ldr	r3, [pc, #140]	; (8002660 <Tx_Analog_9_12+0x160>)
 80025d4:	889b      	ldrh	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d02f      	beq.n	800263a <Tx_Analog_9_12+0x13a>
	{
		accCAN[ANALOG_9_12] -= perCAN[ANALOG_9_12];
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <Tx_Analog_9_12+0x144>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4a20      	ldr	r2, [pc, #128]	; (8002660 <Tx_Analog_9_12+0x160>)
 80025e0:	8892      	ldrh	r2, [r2, #4]
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	4a17      	ldr	r2, [pc, #92]	; (8002644 <Tx_Analog_9_12+0x144>)
 80025e6:	6093      	str	r3, [r2, #8]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <Tx_Analog_9_12+0x164>)
 80025ea:	4a19      	ldr	r2, [pc, #100]	; (8002650 <Tx_Analog_9_12+0x150>)
 80025ec:	4916      	ldr	r1, [pc, #88]	; (8002648 <Tx_Analog_9_12+0x148>)
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f005 f9bc 	bl	800796c <HAL_CAN_AddTxMessage>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d107      	bne.n	800260a <Tx_Analog_9_12+0x10a>
			verifyCAN |= 1;
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <Tx_Analog_9_12+0x168>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b18      	ldr	r3, [pc, #96]	; (8002668 <Tx_Analog_9_12+0x168>)
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e006      	b.n	8002618 <Tx_Analog_9_12+0x118>
		else
			verifyCAN &= 0x02;
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <Tx_Analog_9_12+0x168>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	b2da      	uxtb	r2, r3
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <Tx_Analog_9_12+0x168>)
 8002616:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e002      	b.n	8002624 <Tx_Analog_9_12+0x124>
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	3301      	adds	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f005 fa7c 	bl	8007b22 <HAL_CAN_GetTxMailboxesFreeLevel>
 800262a:	4603      	mov	r3, r0
 800262c:	2b03      	cmp	r3, #3
 800262e:	d004      	beq.n	800263a <Tx_Analog_9_12+0x13a>
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d9f3      	bls.n	800261e <Tx_Analog_9_12+0x11e>
 8002636:	e000      	b.n	800263a <Tx_Analog_9_12+0x13a>
		return;
 8002638:	bf00      	nop
	}
}
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000830 	.word	0x20000830
 8002644:	20000720 	.word	0x20000720
 8002648:	20000708 	.word	0x20000708
 800264c:	20000738 	.word	0x20000738
 8002650:	2000077c 	.word	0x2000077c
 8002654:	20003c98 	.word	0x20003c98
 8002658:	20002c6c 	.word	0x20002c6c
 800265c:	2000190c 	.word	0x2000190c
 8002660:	200018fc 	.word	0x200018fc
 8002664:	20002c68 	.word	0x20002c68
 8002668:	20000872 	.word	0x20000872

0800266c <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af02      	add	r7, sp, #8
 8002672:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 8002674:	4b44      	ldr	r3, [pc, #272]	; (8002788 <Tx_RTC+0x11c>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800267a:	4b43      	ldr	r3, [pc, #268]	; (8002788 <Tx_RTC+0x11c>)
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002680:	4b41      	ldr	r3, [pc, #260]	; (8002788 <Tx_RTC+0x11c>)
 8002682:	2200      	movs	r2, #0
 8002684:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + RTC_MSG);
 8002686:	4b40      	ldr	r3, [pc, #256]	; (8002788 <Tx_RTC+0x11c>)
 8002688:	f240 5204 	movw	r2, #1284	; 0x504
 800268c:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 800268e:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <Tx_RTC+0x11c>)
 8002690:	2208      	movs	r2, #8
 8002692:	611a      	str	r2, [r3, #16]

	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8002694:	2200      	movs	r2, #0
 8002696:	493d      	ldr	r1, [pc, #244]	; (800278c <Tx_RTC+0x120>)
 8002698:	483d      	ldr	r0, [pc, #244]	; (8002790 <Tx_RTC+0x124>)
 800269a:	f00a f8b3 	bl	800c804 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 800269e:	2200      	movs	r2, #0
 80026a0:	493c      	ldr	r1, [pc, #240]	; (8002794 <Tx_RTC+0x128>)
 80026a2:	483b      	ldr	r0, [pc, #236]	; (8002790 <Tx_RTC+0x124>)
 80026a4:	f00a f9b3 	bl	800ca0e <HAL_RTC_GetDate>

	txData[0] = rtcDate.Year;
 80026a8:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <Tx_RTC+0x128>)
 80026aa:	78da      	ldrb	r2, [r3, #3]
 80026ac:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <Tx_RTC+0x12c>)
 80026ae:	701a      	strb	r2, [r3, #0]
	txData[1] = rtcDate.Month;
 80026b0:	4b38      	ldr	r3, [pc, #224]	; (8002794 <Tx_RTC+0x128>)
 80026b2:	785a      	ldrb	r2, [r3, #1]
 80026b4:	4b38      	ldr	r3, [pc, #224]	; (8002798 <Tx_RTC+0x12c>)
 80026b6:	705a      	strb	r2, [r3, #1]
	txData[2] = rtcDate.Date;
 80026b8:	4b36      	ldr	r3, [pc, #216]	; (8002794 <Tx_RTC+0x128>)
 80026ba:	789a      	ldrb	r2, [r3, #2]
 80026bc:	4b36      	ldr	r3, [pc, #216]	; (8002798 <Tx_RTC+0x12c>)
 80026be:	709a      	strb	r2, [r3, #2]
	txData[3] = rtcTime.Hours;
 80026c0:	4b32      	ldr	r3, [pc, #200]	; (800278c <Tx_RTC+0x120>)
 80026c2:	781a      	ldrb	r2, [r3, #0]
 80026c4:	4b34      	ldr	r3, [pc, #208]	; (8002798 <Tx_RTC+0x12c>)
 80026c6:	70da      	strb	r2, [r3, #3]
	txData[4] = rtcTime.Minutes;
 80026c8:	4b30      	ldr	r3, [pc, #192]	; (800278c <Tx_RTC+0x120>)
 80026ca:	785a      	ldrb	r2, [r3, #1]
 80026cc:	4b32      	ldr	r3, [pc, #200]	; (8002798 <Tx_RTC+0x12c>)
 80026ce:	711a      	strb	r2, [r3, #4]
	txData[5] = rtcTime.Seconds;
 80026d0:	4b2e      	ldr	r3, [pc, #184]	; (800278c <Tx_RTC+0x120>)
 80026d2:	789a      	ldrb	r2, [r3, #2]
 80026d4:	4b30      	ldr	r3, [pc, #192]	; (8002798 <Tx_RTC+0x12c>)
 80026d6:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[12] >> 8;
 80026d8:	4b30      	ldr	r3, [pc, #192]	; (800279c <Tx_RTC+0x130>)
 80026da:	8b1b      	ldrh	r3, [r3, #24]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	b29b      	uxth	r3, r3
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <Tx_RTC+0x12c>)
 80026e4:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[12] & 0xff;
 80026e6:	4b2d      	ldr	r3, [pc, #180]	; (800279c <Tx_RTC+0x130>)
 80026e8:	8b1b      	ldrh	r3, [r3, #24]
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <Tx_RTC+0x12c>)
 80026ee:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <Tx_RTC+0x134>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d10a      	bne.n	800270e <Tx_RTC+0xa2>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <Tx_RTC+0x11c>)
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	4b22      	ldr	r3, [pc, #136]	; (8002788 <Tx_RTC+0x11c>)
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	b2d9      	uxtb	r1, r3
 8002702:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <Tx_RTC+0x138>)
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <Tx_RTC+0x13c>)
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <Tx_RTC+0x12c>)
 800270a:	f003 fbe7 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	if((accCAN[RTC_MSG] >= perCAN[RTC_MSG]) && (perCAN[RTC_MSG] != MSG_DISABLED))
 800270e:	4b27      	ldr	r3, [pc, #156]	; (80027ac <Tx_RTC+0x140>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4a27      	ldr	r2, [pc, #156]	; (80027b0 <Tx_RTC+0x144>)
 8002714:	88d2      	ldrh	r2, [r2, #6]
 8002716:	4293      	cmp	r3, r2
 8002718:	d331      	bcc.n	800277e <Tx_RTC+0x112>
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <Tx_RTC+0x144>)
 800271c:	88db      	ldrh	r3, [r3, #6]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d02d      	beq.n	800277e <Tx_RTC+0x112>
	{
		accCAN[RTC_MSG] -= perCAN[RTC_MSG];
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <Tx_RTC+0x140>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <Tx_RTC+0x144>)
 8002728:	88d2      	ldrh	r2, [r2, #6]
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	4a1f      	ldr	r2, [pc, #124]	; (80027ac <Tx_RTC+0x140>)
 800272e:	60d3      	str	r3, [r2, #12]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002730:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <Tx_RTC+0x148>)
 8002732:	4a19      	ldr	r2, [pc, #100]	; (8002798 <Tx_RTC+0x12c>)
 8002734:	4914      	ldr	r1, [pc, #80]	; (8002788 <Tx_RTC+0x11c>)
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f005 f918 	bl	800796c <HAL_CAN_AddTxMessage>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <Tx_RTC+0xe6>
			verifyCAN |= 1;
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <Tx_RTC+0x14c>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <Tx_RTC+0x14c>)
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e006      	b.n	8002760 <Tx_RTC+0xf4>
		else
			verifyCAN &= 0x02;
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <Tx_RTC+0x14c>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <Tx_RTC+0x14c>)
 800275e:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e002      	b.n	800276c <Tx_RTC+0x100>
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	3301      	adds	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f005 f9d8 	bl	8007b22 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002772:	4603      	mov	r3, r0
 8002774:	2b03      	cmp	r3, #3
 8002776:	d002      	beq.n	800277e <Tx_RTC+0x112>
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d9f3      	bls.n	8002766 <Tx_RTC+0xfa>
	}
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000708 	.word	0x20000708
 800278c:	20002b04 	.word	0x20002b04
 8002790:	2000299c 	.word	0x2000299c
 8002794:	20000820 	.word	0x20000820
 8002798:	2000077c 	.word	0x2000077c
 800279c:	20000738 	.word	0x20000738
 80027a0:	20003c98 	.word	0x20003c98
 80027a4:	20002c6c 	.word	0x20002c6c
 80027a8:	2000190c 	.word	0x2000190c
 80027ac:	20000720 	.word	0x20000720
 80027b0:	200018fc 	.word	0x200018fc
 80027b4:	20002c68 	.word	0x20002c68
 80027b8:	20000872 	.word	0x20000872

080027bc <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 80027c4:	4bcd      	ldr	r3, [pc, #820]	; (8002afc <Tx_Verify+0x340>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80027ca:	4bcc      	ldr	r3, [pc, #816]	; (8002afc <Tx_Verify+0x340>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80027d0:	4bca      	ldr	r3, [pc, #808]	; (8002afc <Tx_Verify+0x340>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + VERIFY_MSG);
 80027d6:	4bc9      	ldr	r3, [pc, #804]	; (8002afc <Tx_Verify+0x340>)
 80027d8:	f240 5205 	movw	r2, #1285	; 0x505
 80027dc:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80027de:	4bc7      	ldr	r3, [pc, #796]	; (8002afc <Tx_Verify+0x340>)
 80027e0:	2208      	movs	r2, #8
 80027e2:	611a      	str	r2, [r3, #16]

	Principal_Verify();
 80027e4:	f7ff fcd0 	bl	8002188 <Principal_Verify>

	txData[0] = verifyADC & 0xff;
 80027e8:	4bc5      	ldr	r3, [pc, #788]	; (8002b00 <Tx_Verify+0x344>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4bc5      	ldr	r3, [pc, #788]	; (8002b04 <Tx_Verify+0x348>)
 80027f0:	701a      	strb	r2, [r3, #0]
	txData[1] = (verifyADC >> 8) & 0x0f;
 80027f2:	4bc3      	ldr	r3, [pc, #780]	; (8002b00 <Tx_Verify+0x344>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4bc0      	ldr	r3, [pc, #768]	; (8002b04 <Tx_Verify+0x348>)
 8002804:	705a      	strb	r2, [r3, #1]

	if(flagDatalogger == DL_SAVE)
 8002806:	4bc0      	ldr	r3, [pc, #768]	; (8002b08 <Tx_Verify+0x34c>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d106      	bne.n	800281c <Tx_Verify+0x60>
		txData[1] |= (1 << 4);
 800280e:	4bbd      	ldr	r3, [pc, #756]	; (8002b04 <Tx_Verify+0x348>)
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4bba      	ldr	r3, [pc, #744]	; (8002b04 <Tx_Verify+0x348>)
 800281a:	705a      	strb	r2, [r3, #1]

	if(flagRTC == RTC_OK)
 800281c:	4bbb      	ldr	r3, [pc, #748]	; (8002b0c <Tx_Verify+0x350>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d106      	bne.n	8002832 <Tx_Verify+0x76>
		txData[1] |= (1 << 5);
 8002824:	4bb7      	ldr	r3, [pc, #732]	; (8002b04 <Tx_Verify+0x348>)
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	f043 0320 	orr.w	r3, r3, #32
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4bb5      	ldr	r3, [pc, #724]	; (8002b04 <Tx_Verify+0x348>)
 8002830:	705a      	strb	r2, [r3, #1]

	__FREQ_TO_BUFFER(txData[2], perMsg[ANALOG_1_4]);
 8002832:	4bb7      	ldr	r3, [pc, #732]	; (8002b10 <Tx_Verify+0x354>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800283a:	f000 8082 	beq.w	8002942 <Tx_Verify+0x186>
 800283e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002842:	f300 80aa 	bgt.w	800299a <Tx_Verify+0x1de>
 8002846:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800284a:	d07e      	beq.n	800294a <Tx_Verify+0x18e>
 800284c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002850:	f300 80a3 	bgt.w	800299a <Tx_Verify+0x1de>
 8002854:	2bc8      	cmp	r3, #200	; 0xc8
 8002856:	d07c      	beq.n	8002952 <Tx_Verify+0x196>
 8002858:	2bc8      	cmp	r3, #200	; 0xc8
 800285a:	f300 809e 	bgt.w	800299a <Tx_Verify+0x1de>
 800285e:	2b32      	cmp	r3, #50	; 0x32
 8002860:	dc6c      	bgt.n	800293c <Tx_Verify+0x180>
 8002862:	2b02      	cmp	r3, #2
 8002864:	f2c0 8099 	blt.w	800299a <Tx_Verify+0x1de>
 8002868:	3b02      	subs	r3, #2
 800286a:	2b30      	cmp	r3, #48	; 0x30
 800286c:	f200 8095 	bhi.w	800299a <Tx_Verify+0x1de>
 8002870:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <Tx_Verify+0xbc>)
 8002872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002876:	bf00      	nop
 8002878:	08002993 	.word	0x08002993
 800287c:	0800298b 	.word	0x0800298b
 8002880:	0800299b 	.word	0x0800299b
 8002884:	08002983 	.word	0x08002983
 8002888:	0800299b 	.word	0x0800299b
 800288c:	0800299b 	.word	0x0800299b
 8002890:	0800299b 	.word	0x0800299b
 8002894:	0800299b 	.word	0x0800299b
 8002898:	0800297b 	.word	0x0800297b
 800289c:	0800299b 	.word	0x0800299b
 80028a0:	0800299b 	.word	0x0800299b
 80028a4:	0800299b 	.word	0x0800299b
 80028a8:	0800299b 	.word	0x0800299b
 80028ac:	0800299b 	.word	0x0800299b
 80028b0:	0800299b 	.word	0x0800299b
 80028b4:	0800299b 	.word	0x0800299b
 80028b8:	0800299b 	.word	0x0800299b
 80028bc:	0800299b 	.word	0x0800299b
 80028c0:	08002973 	.word	0x08002973
 80028c4:	0800299b 	.word	0x0800299b
 80028c8:	0800299b 	.word	0x0800299b
 80028cc:	0800299b 	.word	0x0800299b
 80028d0:	0800299b 	.word	0x0800299b
 80028d4:	0800299b 	.word	0x0800299b
 80028d8:	0800299b 	.word	0x0800299b
 80028dc:	0800299b 	.word	0x0800299b
 80028e0:	0800299b 	.word	0x0800299b
 80028e4:	0800299b 	.word	0x0800299b
 80028e8:	0800299b 	.word	0x0800299b
 80028ec:	0800299b 	.word	0x0800299b
 80028f0:	0800299b 	.word	0x0800299b
 80028f4:	0800299b 	.word	0x0800299b
 80028f8:	0800299b 	.word	0x0800299b
 80028fc:	0800299b 	.word	0x0800299b
 8002900:	0800299b 	.word	0x0800299b
 8002904:	0800299b 	.word	0x0800299b
 8002908:	0800299b 	.word	0x0800299b
 800290c:	0800299b 	.word	0x0800299b
 8002910:	0800296b 	.word	0x0800296b
 8002914:	0800299b 	.word	0x0800299b
 8002918:	0800299b 	.word	0x0800299b
 800291c:	0800299b 	.word	0x0800299b
 8002920:	0800299b 	.word	0x0800299b
 8002924:	0800299b 	.word	0x0800299b
 8002928:	0800299b 	.word	0x0800299b
 800292c:	0800299b 	.word	0x0800299b
 8002930:	0800299b 	.word	0x0800299b
 8002934:	0800299b 	.word	0x0800299b
 8002938:	08002963 	.word	0x08002963
 800293c:	2b64      	cmp	r3, #100	; 0x64
 800293e:	d00c      	beq.n	800295a <Tx_Verify+0x19e>
 8002940:	e02b      	b.n	800299a <Tx_Verify+0x1de>
 8002942:	4b70      	ldr	r3, [pc, #448]	; (8002b04 <Tx_Verify+0x348>)
 8002944:	2201      	movs	r2, #1
 8002946:	709a      	strb	r2, [r3, #2]
 8002948:	e02a      	b.n	80029a0 <Tx_Verify+0x1e4>
 800294a:	4b6e      	ldr	r3, [pc, #440]	; (8002b04 <Tx_Verify+0x348>)
 800294c:	2202      	movs	r2, #2
 800294e:	709a      	strb	r2, [r3, #2]
 8002950:	e026      	b.n	80029a0 <Tx_Verify+0x1e4>
 8002952:	4b6c      	ldr	r3, [pc, #432]	; (8002b04 <Tx_Verify+0x348>)
 8002954:	2203      	movs	r2, #3
 8002956:	709a      	strb	r2, [r3, #2]
 8002958:	e022      	b.n	80029a0 <Tx_Verify+0x1e4>
 800295a:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <Tx_Verify+0x348>)
 800295c:	2204      	movs	r2, #4
 800295e:	709a      	strb	r2, [r3, #2]
 8002960:	e01e      	b.n	80029a0 <Tx_Verify+0x1e4>
 8002962:	4b68      	ldr	r3, [pc, #416]	; (8002b04 <Tx_Verify+0x348>)
 8002964:	2205      	movs	r2, #5
 8002966:	709a      	strb	r2, [r3, #2]
 8002968:	e01a      	b.n	80029a0 <Tx_Verify+0x1e4>
 800296a:	4b66      	ldr	r3, [pc, #408]	; (8002b04 <Tx_Verify+0x348>)
 800296c:	2206      	movs	r2, #6
 800296e:	709a      	strb	r2, [r3, #2]
 8002970:	e016      	b.n	80029a0 <Tx_Verify+0x1e4>
 8002972:	4b64      	ldr	r3, [pc, #400]	; (8002b04 <Tx_Verify+0x348>)
 8002974:	2207      	movs	r2, #7
 8002976:	709a      	strb	r2, [r3, #2]
 8002978:	e012      	b.n	80029a0 <Tx_Verify+0x1e4>
 800297a:	4b62      	ldr	r3, [pc, #392]	; (8002b04 <Tx_Verify+0x348>)
 800297c:	2208      	movs	r2, #8
 800297e:	709a      	strb	r2, [r3, #2]
 8002980:	e00e      	b.n	80029a0 <Tx_Verify+0x1e4>
 8002982:	4b60      	ldr	r3, [pc, #384]	; (8002b04 <Tx_Verify+0x348>)
 8002984:	2209      	movs	r2, #9
 8002986:	709a      	strb	r2, [r3, #2]
 8002988:	e00a      	b.n	80029a0 <Tx_Verify+0x1e4>
 800298a:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <Tx_Verify+0x348>)
 800298c:	220a      	movs	r2, #10
 800298e:	709a      	strb	r2, [r3, #2]
 8002990:	e006      	b.n	80029a0 <Tx_Verify+0x1e4>
 8002992:	4b5c      	ldr	r3, [pc, #368]	; (8002b04 <Tx_Verify+0x348>)
 8002994:	220b      	movs	r2, #11
 8002996:	709a      	strb	r2, [r3, #2]
 8002998:	e002      	b.n	80029a0 <Tx_Verify+0x1e4>
 800299a:	4b5a      	ldr	r3, [pc, #360]	; (8002b04 <Tx_Verify+0x348>)
 800299c:	2200      	movs	r2, #0
 800299e:	709a      	strb	r2, [r3, #2]
 80029a0:	bf00      	nop
	__FREQ_TO_BUFFER(txData[3], perMsg[ANALOG_5_8]);
 80029a2:	4b5b      	ldr	r3, [pc, #364]	; (8002b10 <Tx_Verify+0x354>)
 80029a4:	885b      	ldrh	r3, [r3, #2]
 80029a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029aa:	f000 8082 	beq.w	8002ab2 <Tx_Verify+0x2f6>
 80029ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b2:	f300 80b7 	bgt.w	8002b24 <Tx_Verify+0x368>
 80029b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029ba:	d07e      	beq.n	8002aba <Tx_Verify+0x2fe>
 80029bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029c0:	f300 80b0 	bgt.w	8002b24 <Tx_Verify+0x368>
 80029c4:	2bc8      	cmp	r3, #200	; 0xc8
 80029c6:	d07c      	beq.n	8002ac2 <Tx_Verify+0x306>
 80029c8:	2bc8      	cmp	r3, #200	; 0xc8
 80029ca:	f300 80ab 	bgt.w	8002b24 <Tx_Verify+0x368>
 80029ce:	2b32      	cmp	r3, #50	; 0x32
 80029d0:	dc6c      	bgt.n	8002aac <Tx_Verify+0x2f0>
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	f2c0 80a6 	blt.w	8002b24 <Tx_Verify+0x368>
 80029d8:	3b02      	subs	r3, #2
 80029da:	2b30      	cmp	r3, #48	; 0x30
 80029dc:	f200 80a2 	bhi.w	8002b24 <Tx_Verify+0x368>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <Tx_Verify+0x22c>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	08002b1d 	.word	0x08002b1d
 80029ec:	08002b15 	.word	0x08002b15
 80029f0:	08002b25 	.word	0x08002b25
 80029f4:	08002af3 	.word	0x08002af3
 80029f8:	08002b25 	.word	0x08002b25
 80029fc:	08002b25 	.word	0x08002b25
 8002a00:	08002b25 	.word	0x08002b25
 8002a04:	08002b25 	.word	0x08002b25
 8002a08:	08002aeb 	.word	0x08002aeb
 8002a0c:	08002b25 	.word	0x08002b25
 8002a10:	08002b25 	.word	0x08002b25
 8002a14:	08002b25 	.word	0x08002b25
 8002a18:	08002b25 	.word	0x08002b25
 8002a1c:	08002b25 	.word	0x08002b25
 8002a20:	08002b25 	.word	0x08002b25
 8002a24:	08002b25 	.word	0x08002b25
 8002a28:	08002b25 	.word	0x08002b25
 8002a2c:	08002b25 	.word	0x08002b25
 8002a30:	08002ae3 	.word	0x08002ae3
 8002a34:	08002b25 	.word	0x08002b25
 8002a38:	08002b25 	.word	0x08002b25
 8002a3c:	08002b25 	.word	0x08002b25
 8002a40:	08002b25 	.word	0x08002b25
 8002a44:	08002b25 	.word	0x08002b25
 8002a48:	08002b25 	.word	0x08002b25
 8002a4c:	08002b25 	.word	0x08002b25
 8002a50:	08002b25 	.word	0x08002b25
 8002a54:	08002b25 	.word	0x08002b25
 8002a58:	08002b25 	.word	0x08002b25
 8002a5c:	08002b25 	.word	0x08002b25
 8002a60:	08002b25 	.word	0x08002b25
 8002a64:	08002b25 	.word	0x08002b25
 8002a68:	08002b25 	.word	0x08002b25
 8002a6c:	08002b25 	.word	0x08002b25
 8002a70:	08002b25 	.word	0x08002b25
 8002a74:	08002b25 	.word	0x08002b25
 8002a78:	08002b25 	.word	0x08002b25
 8002a7c:	08002b25 	.word	0x08002b25
 8002a80:	08002adb 	.word	0x08002adb
 8002a84:	08002b25 	.word	0x08002b25
 8002a88:	08002b25 	.word	0x08002b25
 8002a8c:	08002b25 	.word	0x08002b25
 8002a90:	08002b25 	.word	0x08002b25
 8002a94:	08002b25 	.word	0x08002b25
 8002a98:	08002b25 	.word	0x08002b25
 8002a9c:	08002b25 	.word	0x08002b25
 8002aa0:	08002b25 	.word	0x08002b25
 8002aa4:	08002b25 	.word	0x08002b25
 8002aa8:	08002ad3 	.word	0x08002ad3
 8002aac:	2b64      	cmp	r3, #100	; 0x64
 8002aae:	d00c      	beq.n	8002aca <Tx_Verify+0x30e>
 8002ab0:	e038      	b.n	8002b24 <Tx_Verify+0x368>
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <Tx_Verify+0x348>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	70da      	strb	r2, [r3, #3]
 8002ab8:	e037      	b.n	8002b2a <Tx_Verify+0x36e>
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <Tx_Verify+0x348>)
 8002abc:	2202      	movs	r2, #2
 8002abe:	70da      	strb	r2, [r3, #3]
 8002ac0:	e033      	b.n	8002b2a <Tx_Verify+0x36e>
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <Tx_Verify+0x348>)
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	70da      	strb	r2, [r3, #3]
 8002ac8:	e02f      	b.n	8002b2a <Tx_Verify+0x36e>
 8002aca:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <Tx_Verify+0x348>)
 8002acc:	2204      	movs	r2, #4
 8002ace:	70da      	strb	r2, [r3, #3]
 8002ad0:	e02b      	b.n	8002b2a <Tx_Verify+0x36e>
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <Tx_Verify+0x348>)
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	70da      	strb	r2, [r3, #3]
 8002ad8:	e027      	b.n	8002b2a <Tx_Verify+0x36e>
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <Tx_Verify+0x348>)
 8002adc:	2206      	movs	r2, #6
 8002ade:	70da      	strb	r2, [r3, #3]
 8002ae0:	e023      	b.n	8002b2a <Tx_Verify+0x36e>
 8002ae2:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <Tx_Verify+0x348>)
 8002ae4:	2207      	movs	r2, #7
 8002ae6:	70da      	strb	r2, [r3, #3]
 8002ae8:	e01f      	b.n	8002b2a <Tx_Verify+0x36e>
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <Tx_Verify+0x348>)
 8002aec:	2208      	movs	r2, #8
 8002aee:	70da      	strb	r2, [r3, #3]
 8002af0:	e01b      	b.n	8002b2a <Tx_Verify+0x36e>
 8002af2:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <Tx_Verify+0x348>)
 8002af4:	2209      	movs	r2, #9
 8002af6:	70da      	strb	r2, [r3, #3]
 8002af8:	e017      	b.n	8002b2a <Tx_Verify+0x36e>
 8002afa:	bf00      	nop
 8002afc:	20000708 	.word	0x20000708
 8002b00:	20000830 	.word	0x20000830
 8002b04:	2000077c 	.word	0x2000077c
 8002b08:	20003c98 	.word	0x20003c98
 8002b0c:	200018af 	.word	0x200018af
 8002b10:	20002c04 	.word	0x20002c04
 8002b14:	4bbb      	ldr	r3, [pc, #748]	; (8002e04 <Tx_Verify+0x648>)
 8002b16:	220a      	movs	r2, #10
 8002b18:	70da      	strb	r2, [r3, #3]
 8002b1a:	e006      	b.n	8002b2a <Tx_Verify+0x36e>
 8002b1c:	4bb9      	ldr	r3, [pc, #740]	; (8002e04 <Tx_Verify+0x648>)
 8002b1e:	220b      	movs	r2, #11
 8002b20:	70da      	strb	r2, [r3, #3]
 8002b22:	e002      	b.n	8002b2a <Tx_Verify+0x36e>
 8002b24:	4bb7      	ldr	r3, [pc, #732]	; (8002e04 <Tx_Verify+0x648>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	70da      	strb	r2, [r3, #3]
 8002b2a:	bf00      	nop
	__FREQ_TO_BUFFER(txData[4], perMsg[ANALOG_9_12]);
 8002b2c:	4bb6      	ldr	r3, [pc, #728]	; (8002e08 <Tx_Verify+0x64c>)
 8002b2e:	889b      	ldrh	r3, [r3, #4]
 8002b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b34:	f000 8081 	beq.w	8002c3a <Tx_Verify+0x47e>
 8002b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b3c:	f300 80a9 	bgt.w	8002c92 <Tx_Verify+0x4d6>
 8002b40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b44:	d07d      	beq.n	8002c42 <Tx_Verify+0x486>
 8002b46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b4a:	f300 80a2 	bgt.w	8002c92 <Tx_Verify+0x4d6>
 8002b4e:	2bc8      	cmp	r3, #200	; 0xc8
 8002b50:	d07b      	beq.n	8002c4a <Tx_Verify+0x48e>
 8002b52:	2bc8      	cmp	r3, #200	; 0xc8
 8002b54:	f300 809d 	bgt.w	8002c92 <Tx_Verify+0x4d6>
 8002b58:	2b32      	cmp	r3, #50	; 0x32
 8002b5a:	dc6b      	bgt.n	8002c34 <Tx_Verify+0x478>
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	f2c0 8098 	blt.w	8002c92 <Tx_Verify+0x4d6>
 8002b62:	3b02      	subs	r3, #2
 8002b64:	2b30      	cmp	r3, #48	; 0x30
 8002b66:	f200 8094 	bhi.w	8002c92 <Tx_Verify+0x4d6>
 8002b6a:	a201      	add	r2, pc, #4	; (adr r2, 8002b70 <Tx_Verify+0x3b4>)
 8002b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b70:	08002c8b 	.word	0x08002c8b
 8002b74:	08002c83 	.word	0x08002c83
 8002b78:	08002c93 	.word	0x08002c93
 8002b7c:	08002c7b 	.word	0x08002c7b
 8002b80:	08002c93 	.word	0x08002c93
 8002b84:	08002c93 	.word	0x08002c93
 8002b88:	08002c93 	.word	0x08002c93
 8002b8c:	08002c93 	.word	0x08002c93
 8002b90:	08002c73 	.word	0x08002c73
 8002b94:	08002c93 	.word	0x08002c93
 8002b98:	08002c93 	.word	0x08002c93
 8002b9c:	08002c93 	.word	0x08002c93
 8002ba0:	08002c93 	.word	0x08002c93
 8002ba4:	08002c93 	.word	0x08002c93
 8002ba8:	08002c93 	.word	0x08002c93
 8002bac:	08002c93 	.word	0x08002c93
 8002bb0:	08002c93 	.word	0x08002c93
 8002bb4:	08002c93 	.word	0x08002c93
 8002bb8:	08002c6b 	.word	0x08002c6b
 8002bbc:	08002c93 	.word	0x08002c93
 8002bc0:	08002c93 	.word	0x08002c93
 8002bc4:	08002c93 	.word	0x08002c93
 8002bc8:	08002c93 	.word	0x08002c93
 8002bcc:	08002c93 	.word	0x08002c93
 8002bd0:	08002c93 	.word	0x08002c93
 8002bd4:	08002c93 	.word	0x08002c93
 8002bd8:	08002c93 	.word	0x08002c93
 8002bdc:	08002c93 	.word	0x08002c93
 8002be0:	08002c93 	.word	0x08002c93
 8002be4:	08002c93 	.word	0x08002c93
 8002be8:	08002c93 	.word	0x08002c93
 8002bec:	08002c93 	.word	0x08002c93
 8002bf0:	08002c93 	.word	0x08002c93
 8002bf4:	08002c93 	.word	0x08002c93
 8002bf8:	08002c93 	.word	0x08002c93
 8002bfc:	08002c93 	.word	0x08002c93
 8002c00:	08002c93 	.word	0x08002c93
 8002c04:	08002c93 	.word	0x08002c93
 8002c08:	08002c63 	.word	0x08002c63
 8002c0c:	08002c93 	.word	0x08002c93
 8002c10:	08002c93 	.word	0x08002c93
 8002c14:	08002c93 	.word	0x08002c93
 8002c18:	08002c93 	.word	0x08002c93
 8002c1c:	08002c93 	.word	0x08002c93
 8002c20:	08002c93 	.word	0x08002c93
 8002c24:	08002c93 	.word	0x08002c93
 8002c28:	08002c93 	.word	0x08002c93
 8002c2c:	08002c93 	.word	0x08002c93
 8002c30:	08002c5b 	.word	0x08002c5b
 8002c34:	2b64      	cmp	r3, #100	; 0x64
 8002c36:	d00c      	beq.n	8002c52 <Tx_Verify+0x496>
 8002c38:	e02b      	b.n	8002c92 <Tx_Verify+0x4d6>
 8002c3a:	4b72      	ldr	r3, [pc, #456]	; (8002e04 <Tx_Verify+0x648>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	711a      	strb	r2, [r3, #4]
 8002c40:	e02a      	b.n	8002c98 <Tx_Verify+0x4dc>
 8002c42:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <Tx_Verify+0x648>)
 8002c44:	2202      	movs	r2, #2
 8002c46:	711a      	strb	r2, [r3, #4]
 8002c48:	e026      	b.n	8002c98 <Tx_Verify+0x4dc>
 8002c4a:	4b6e      	ldr	r3, [pc, #440]	; (8002e04 <Tx_Verify+0x648>)
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	711a      	strb	r2, [r3, #4]
 8002c50:	e022      	b.n	8002c98 <Tx_Verify+0x4dc>
 8002c52:	4b6c      	ldr	r3, [pc, #432]	; (8002e04 <Tx_Verify+0x648>)
 8002c54:	2204      	movs	r2, #4
 8002c56:	711a      	strb	r2, [r3, #4]
 8002c58:	e01e      	b.n	8002c98 <Tx_Verify+0x4dc>
 8002c5a:	4b6a      	ldr	r3, [pc, #424]	; (8002e04 <Tx_Verify+0x648>)
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	711a      	strb	r2, [r3, #4]
 8002c60:	e01a      	b.n	8002c98 <Tx_Verify+0x4dc>
 8002c62:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <Tx_Verify+0x648>)
 8002c64:	2206      	movs	r2, #6
 8002c66:	711a      	strb	r2, [r3, #4]
 8002c68:	e016      	b.n	8002c98 <Tx_Verify+0x4dc>
 8002c6a:	4b66      	ldr	r3, [pc, #408]	; (8002e04 <Tx_Verify+0x648>)
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	711a      	strb	r2, [r3, #4]
 8002c70:	e012      	b.n	8002c98 <Tx_Verify+0x4dc>
 8002c72:	4b64      	ldr	r3, [pc, #400]	; (8002e04 <Tx_Verify+0x648>)
 8002c74:	2208      	movs	r2, #8
 8002c76:	711a      	strb	r2, [r3, #4]
 8002c78:	e00e      	b.n	8002c98 <Tx_Verify+0x4dc>
 8002c7a:	4b62      	ldr	r3, [pc, #392]	; (8002e04 <Tx_Verify+0x648>)
 8002c7c:	2209      	movs	r2, #9
 8002c7e:	711a      	strb	r2, [r3, #4]
 8002c80:	e00a      	b.n	8002c98 <Tx_Verify+0x4dc>
 8002c82:	4b60      	ldr	r3, [pc, #384]	; (8002e04 <Tx_Verify+0x648>)
 8002c84:	220a      	movs	r2, #10
 8002c86:	711a      	strb	r2, [r3, #4]
 8002c88:	e006      	b.n	8002c98 <Tx_Verify+0x4dc>
 8002c8a:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <Tx_Verify+0x648>)
 8002c8c:	220b      	movs	r2, #11
 8002c8e:	711a      	strb	r2, [r3, #4]
 8002c90:	e002      	b.n	8002c98 <Tx_Verify+0x4dc>
 8002c92:	4b5c      	ldr	r3, [pc, #368]	; (8002e04 <Tx_Verify+0x648>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	711a      	strb	r2, [r3, #4]
 8002c98:	bf00      	nop
	__FREQ_TO_BUFFER(txData[5], perMsg[RTC_MSG]);
 8002c9a:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <Tx_Verify+0x64c>)
 8002c9c:	88db      	ldrh	r3, [r3, #6]
 8002c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ca2:	f000 8082 	beq.w	8002daa <Tx_Verify+0x5ee>
 8002ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002caa:	f300 80af 	bgt.w	8002e0c <Tx_Verify+0x650>
 8002cae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cb2:	d07e      	beq.n	8002db2 <Tx_Verify+0x5f6>
 8002cb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cb8:	f300 80a8 	bgt.w	8002e0c <Tx_Verify+0x650>
 8002cbc:	2bc8      	cmp	r3, #200	; 0xc8
 8002cbe:	d07c      	beq.n	8002dba <Tx_Verify+0x5fe>
 8002cc0:	2bc8      	cmp	r3, #200	; 0xc8
 8002cc2:	f300 80a3 	bgt.w	8002e0c <Tx_Verify+0x650>
 8002cc6:	2b32      	cmp	r3, #50	; 0x32
 8002cc8:	dc6c      	bgt.n	8002da4 <Tx_Verify+0x5e8>
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	f2c0 809e 	blt.w	8002e0c <Tx_Verify+0x650>
 8002cd0:	3b02      	subs	r3, #2
 8002cd2:	2b30      	cmp	r3, #48	; 0x30
 8002cd4:	f200 809a 	bhi.w	8002e0c <Tx_Verify+0x650>
 8002cd8:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <Tx_Verify+0x524>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002dfb 	.word	0x08002dfb
 8002ce4:	08002df3 	.word	0x08002df3
 8002ce8:	08002e0d 	.word	0x08002e0d
 8002cec:	08002deb 	.word	0x08002deb
 8002cf0:	08002e0d 	.word	0x08002e0d
 8002cf4:	08002e0d 	.word	0x08002e0d
 8002cf8:	08002e0d 	.word	0x08002e0d
 8002cfc:	08002e0d 	.word	0x08002e0d
 8002d00:	08002de3 	.word	0x08002de3
 8002d04:	08002e0d 	.word	0x08002e0d
 8002d08:	08002e0d 	.word	0x08002e0d
 8002d0c:	08002e0d 	.word	0x08002e0d
 8002d10:	08002e0d 	.word	0x08002e0d
 8002d14:	08002e0d 	.word	0x08002e0d
 8002d18:	08002e0d 	.word	0x08002e0d
 8002d1c:	08002e0d 	.word	0x08002e0d
 8002d20:	08002e0d 	.word	0x08002e0d
 8002d24:	08002e0d 	.word	0x08002e0d
 8002d28:	08002ddb 	.word	0x08002ddb
 8002d2c:	08002e0d 	.word	0x08002e0d
 8002d30:	08002e0d 	.word	0x08002e0d
 8002d34:	08002e0d 	.word	0x08002e0d
 8002d38:	08002e0d 	.word	0x08002e0d
 8002d3c:	08002e0d 	.word	0x08002e0d
 8002d40:	08002e0d 	.word	0x08002e0d
 8002d44:	08002e0d 	.word	0x08002e0d
 8002d48:	08002e0d 	.word	0x08002e0d
 8002d4c:	08002e0d 	.word	0x08002e0d
 8002d50:	08002e0d 	.word	0x08002e0d
 8002d54:	08002e0d 	.word	0x08002e0d
 8002d58:	08002e0d 	.word	0x08002e0d
 8002d5c:	08002e0d 	.word	0x08002e0d
 8002d60:	08002e0d 	.word	0x08002e0d
 8002d64:	08002e0d 	.word	0x08002e0d
 8002d68:	08002e0d 	.word	0x08002e0d
 8002d6c:	08002e0d 	.word	0x08002e0d
 8002d70:	08002e0d 	.word	0x08002e0d
 8002d74:	08002e0d 	.word	0x08002e0d
 8002d78:	08002dd3 	.word	0x08002dd3
 8002d7c:	08002e0d 	.word	0x08002e0d
 8002d80:	08002e0d 	.word	0x08002e0d
 8002d84:	08002e0d 	.word	0x08002e0d
 8002d88:	08002e0d 	.word	0x08002e0d
 8002d8c:	08002e0d 	.word	0x08002e0d
 8002d90:	08002e0d 	.word	0x08002e0d
 8002d94:	08002e0d 	.word	0x08002e0d
 8002d98:	08002e0d 	.word	0x08002e0d
 8002d9c:	08002e0d 	.word	0x08002e0d
 8002da0:	08002dcb 	.word	0x08002dcb
 8002da4:	2b64      	cmp	r3, #100	; 0x64
 8002da6:	d00c      	beq.n	8002dc2 <Tx_Verify+0x606>
 8002da8:	e030      	b.n	8002e0c <Tx_Verify+0x650>
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <Tx_Verify+0x648>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	715a      	strb	r2, [r3, #5]
 8002db0:	e02f      	b.n	8002e12 <Tx_Verify+0x656>
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <Tx_Verify+0x648>)
 8002db4:	2202      	movs	r2, #2
 8002db6:	715a      	strb	r2, [r3, #5]
 8002db8:	e02b      	b.n	8002e12 <Tx_Verify+0x656>
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <Tx_Verify+0x648>)
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	715a      	strb	r2, [r3, #5]
 8002dc0:	e027      	b.n	8002e12 <Tx_Verify+0x656>
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <Tx_Verify+0x648>)
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	715a      	strb	r2, [r3, #5]
 8002dc8:	e023      	b.n	8002e12 <Tx_Verify+0x656>
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <Tx_Verify+0x648>)
 8002dcc:	2205      	movs	r2, #5
 8002dce:	715a      	strb	r2, [r3, #5]
 8002dd0:	e01f      	b.n	8002e12 <Tx_Verify+0x656>
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <Tx_Verify+0x648>)
 8002dd4:	2206      	movs	r2, #6
 8002dd6:	715a      	strb	r2, [r3, #5]
 8002dd8:	e01b      	b.n	8002e12 <Tx_Verify+0x656>
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <Tx_Verify+0x648>)
 8002ddc:	2207      	movs	r2, #7
 8002dde:	715a      	strb	r2, [r3, #5]
 8002de0:	e017      	b.n	8002e12 <Tx_Verify+0x656>
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <Tx_Verify+0x648>)
 8002de4:	2208      	movs	r2, #8
 8002de6:	715a      	strb	r2, [r3, #5]
 8002de8:	e013      	b.n	8002e12 <Tx_Verify+0x656>
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <Tx_Verify+0x648>)
 8002dec:	2209      	movs	r2, #9
 8002dee:	715a      	strb	r2, [r3, #5]
 8002df0:	e00f      	b.n	8002e12 <Tx_Verify+0x656>
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <Tx_Verify+0x648>)
 8002df4:	220a      	movs	r2, #10
 8002df6:	715a      	strb	r2, [r3, #5]
 8002df8:	e00b      	b.n	8002e12 <Tx_Verify+0x656>
 8002dfa:	4b02      	ldr	r3, [pc, #8]	; (8002e04 <Tx_Verify+0x648>)
 8002dfc:	220b      	movs	r2, #11
 8002dfe:	715a      	strb	r2, [r3, #5]
 8002e00:	e007      	b.n	8002e12 <Tx_Verify+0x656>
 8002e02:	bf00      	nop
 8002e04:	2000077c 	.word	0x2000077c
 8002e08:	20002c04 	.word	0x20002c04
 8002e0c:	4bb7      	ldr	r3, [pc, #732]	; (80030ec <Tx_Verify+0x930>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	715a      	strb	r2, [r3, #5]
 8002e12:	bf00      	nop
	__FREQ_TO_BUFFER(txData[6], perMsg[PDM_SAVE]);
 8002e14:	4bb6      	ldr	r3, [pc, #728]	; (80030f0 <Tx_Verify+0x934>)
 8002e16:	89db      	ldrh	r3, [r3, #14]
 8002e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e1c:	f000 8081 	beq.w	8002f22 <Tx_Verify+0x766>
 8002e20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e24:	f300 80a9 	bgt.w	8002f7a <Tx_Verify+0x7be>
 8002e28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e2c:	d07d      	beq.n	8002f2a <Tx_Verify+0x76e>
 8002e2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e32:	f300 80a2 	bgt.w	8002f7a <Tx_Verify+0x7be>
 8002e36:	2bc8      	cmp	r3, #200	; 0xc8
 8002e38:	d07b      	beq.n	8002f32 <Tx_Verify+0x776>
 8002e3a:	2bc8      	cmp	r3, #200	; 0xc8
 8002e3c:	f300 809d 	bgt.w	8002f7a <Tx_Verify+0x7be>
 8002e40:	2b32      	cmp	r3, #50	; 0x32
 8002e42:	dc6b      	bgt.n	8002f1c <Tx_Verify+0x760>
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	f2c0 8098 	blt.w	8002f7a <Tx_Verify+0x7be>
 8002e4a:	3b02      	subs	r3, #2
 8002e4c:	2b30      	cmp	r3, #48	; 0x30
 8002e4e:	f200 8094 	bhi.w	8002f7a <Tx_Verify+0x7be>
 8002e52:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <Tx_Verify+0x69c>)
 8002e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e58:	08002f73 	.word	0x08002f73
 8002e5c:	08002f6b 	.word	0x08002f6b
 8002e60:	08002f7b 	.word	0x08002f7b
 8002e64:	08002f63 	.word	0x08002f63
 8002e68:	08002f7b 	.word	0x08002f7b
 8002e6c:	08002f7b 	.word	0x08002f7b
 8002e70:	08002f7b 	.word	0x08002f7b
 8002e74:	08002f7b 	.word	0x08002f7b
 8002e78:	08002f5b 	.word	0x08002f5b
 8002e7c:	08002f7b 	.word	0x08002f7b
 8002e80:	08002f7b 	.word	0x08002f7b
 8002e84:	08002f7b 	.word	0x08002f7b
 8002e88:	08002f7b 	.word	0x08002f7b
 8002e8c:	08002f7b 	.word	0x08002f7b
 8002e90:	08002f7b 	.word	0x08002f7b
 8002e94:	08002f7b 	.word	0x08002f7b
 8002e98:	08002f7b 	.word	0x08002f7b
 8002e9c:	08002f7b 	.word	0x08002f7b
 8002ea0:	08002f53 	.word	0x08002f53
 8002ea4:	08002f7b 	.word	0x08002f7b
 8002ea8:	08002f7b 	.word	0x08002f7b
 8002eac:	08002f7b 	.word	0x08002f7b
 8002eb0:	08002f7b 	.word	0x08002f7b
 8002eb4:	08002f7b 	.word	0x08002f7b
 8002eb8:	08002f7b 	.word	0x08002f7b
 8002ebc:	08002f7b 	.word	0x08002f7b
 8002ec0:	08002f7b 	.word	0x08002f7b
 8002ec4:	08002f7b 	.word	0x08002f7b
 8002ec8:	08002f7b 	.word	0x08002f7b
 8002ecc:	08002f7b 	.word	0x08002f7b
 8002ed0:	08002f7b 	.word	0x08002f7b
 8002ed4:	08002f7b 	.word	0x08002f7b
 8002ed8:	08002f7b 	.word	0x08002f7b
 8002edc:	08002f7b 	.word	0x08002f7b
 8002ee0:	08002f7b 	.word	0x08002f7b
 8002ee4:	08002f7b 	.word	0x08002f7b
 8002ee8:	08002f7b 	.word	0x08002f7b
 8002eec:	08002f7b 	.word	0x08002f7b
 8002ef0:	08002f4b 	.word	0x08002f4b
 8002ef4:	08002f7b 	.word	0x08002f7b
 8002ef8:	08002f7b 	.word	0x08002f7b
 8002efc:	08002f7b 	.word	0x08002f7b
 8002f00:	08002f7b 	.word	0x08002f7b
 8002f04:	08002f7b 	.word	0x08002f7b
 8002f08:	08002f7b 	.word	0x08002f7b
 8002f0c:	08002f7b 	.word	0x08002f7b
 8002f10:	08002f7b 	.word	0x08002f7b
 8002f14:	08002f7b 	.word	0x08002f7b
 8002f18:	08002f43 	.word	0x08002f43
 8002f1c:	2b64      	cmp	r3, #100	; 0x64
 8002f1e:	d00c      	beq.n	8002f3a <Tx_Verify+0x77e>
 8002f20:	e02b      	b.n	8002f7a <Tx_Verify+0x7be>
 8002f22:	4b72      	ldr	r3, [pc, #456]	; (80030ec <Tx_Verify+0x930>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	719a      	strb	r2, [r3, #6]
 8002f28:	e02a      	b.n	8002f80 <Tx_Verify+0x7c4>
 8002f2a:	4b70      	ldr	r3, [pc, #448]	; (80030ec <Tx_Verify+0x930>)
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	719a      	strb	r2, [r3, #6]
 8002f30:	e026      	b.n	8002f80 <Tx_Verify+0x7c4>
 8002f32:	4b6e      	ldr	r3, [pc, #440]	; (80030ec <Tx_Verify+0x930>)
 8002f34:	2203      	movs	r2, #3
 8002f36:	719a      	strb	r2, [r3, #6]
 8002f38:	e022      	b.n	8002f80 <Tx_Verify+0x7c4>
 8002f3a:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <Tx_Verify+0x930>)
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	719a      	strb	r2, [r3, #6]
 8002f40:	e01e      	b.n	8002f80 <Tx_Verify+0x7c4>
 8002f42:	4b6a      	ldr	r3, [pc, #424]	; (80030ec <Tx_Verify+0x930>)
 8002f44:	2205      	movs	r2, #5
 8002f46:	719a      	strb	r2, [r3, #6]
 8002f48:	e01a      	b.n	8002f80 <Tx_Verify+0x7c4>
 8002f4a:	4b68      	ldr	r3, [pc, #416]	; (80030ec <Tx_Verify+0x930>)
 8002f4c:	2206      	movs	r2, #6
 8002f4e:	719a      	strb	r2, [r3, #6]
 8002f50:	e016      	b.n	8002f80 <Tx_Verify+0x7c4>
 8002f52:	4b66      	ldr	r3, [pc, #408]	; (80030ec <Tx_Verify+0x930>)
 8002f54:	2207      	movs	r2, #7
 8002f56:	719a      	strb	r2, [r3, #6]
 8002f58:	e012      	b.n	8002f80 <Tx_Verify+0x7c4>
 8002f5a:	4b64      	ldr	r3, [pc, #400]	; (80030ec <Tx_Verify+0x930>)
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	719a      	strb	r2, [r3, #6]
 8002f60:	e00e      	b.n	8002f80 <Tx_Verify+0x7c4>
 8002f62:	4b62      	ldr	r3, [pc, #392]	; (80030ec <Tx_Verify+0x930>)
 8002f64:	2209      	movs	r2, #9
 8002f66:	719a      	strb	r2, [r3, #6]
 8002f68:	e00a      	b.n	8002f80 <Tx_Verify+0x7c4>
 8002f6a:	4b60      	ldr	r3, [pc, #384]	; (80030ec <Tx_Verify+0x930>)
 8002f6c:	220a      	movs	r2, #10
 8002f6e:	719a      	strb	r2, [r3, #6]
 8002f70:	e006      	b.n	8002f80 <Tx_Verify+0x7c4>
 8002f72:	4b5e      	ldr	r3, [pc, #376]	; (80030ec <Tx_Verify+0x930>)
 8002f74:	220b      	movs	r2, #11
 8002f76:	719a      	strb	r2, [r3, #6]
 8002f78:	e002      	b.n	8002f80 <Tx_Verify+0x7c4>
 8002f7a:	4b5c      	ldr	r3, [pc, #368]	; (80030ec <Tx_Verify+0x930>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	719a      	strb	r2, [r3, #6]
 8002f80:	bf00      	nop
	__FREQ_TO_BUFFER(txData[7], perMsg[ECU_SAVE]);
 8002f82:	4b5b      	ldr	r3, [pc, #364]	; (80030f0 <Tx_Verify+0x934>)
 8002f84:	899b      	ldrh	r3, [r3, #12]
 8002f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f8a:	f000 8082 	beq.w	8003092 <Tx_Verify+0x8d6>
 8002f8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f92:	f300 80af 	bgt.w	80030f4 <Tx_Verify+0x938>
 8002f96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f9a:	d07e      	beq.n	800309a <Tx_Verify+0x8de>
 8002f9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fa0:	f300 80a8 	bgt.w	80030f4 <Tx_Verify+0x938>
 8002fa4:	2bc8      	cmp	r3, #200	; 0xc8
 8002fa6:	d07c      	beq.n	80030a2 <Tx_Verify+0x8e6>
 8002fa8:	2bc8      	cmp	r3, #200	; 0xc8
 8002faa:	f300 80a3 	bgt.w	80030f4 <Tx_Verify+0x938>
 8002fae:	2b32      	cmp	r3, #50	; 0x32
 8002fb0:	dc6c      	bgt.n	800308c <Tx_Verify+0x8d0>
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	f2c0 809e 	blt.w	80030f4 <Tx_Verify+0x938>
 8002fb8:	3b02      	subs	r3, #2
 8002fba:	2b30      	cmp	r3, #48	; 0x30
 8002fbc:	f200 809a 	bhi.w	80030f4 <Tx_Verify+0x938>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <Tx_Verify+0x80c>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	080030e3 	.word	0x080030e3
 8002fcc:	080030db 	.word	0x080030db
 8002fd0:	080030f5 	.word	0x080030f5
 8002fd4:	080030d3 	.word	0x080030d3
 8002fd8:	080030f5 	.word	0x080030f5
 8002fdc:	080030f5 	.word	0x080030f5
 8002fe0:	080030f5 	.word	0x080030f5
 8002fe4:	080030f5 	.word	0x080030f5
 8002fe8:	080030cb 	.word	0x080030cb
 8002fec:	080030f5 	.word	0x080030f5
 8002ff0:	080030f5 	.word	0x080030f5
 8002ff4:	080030f5 	.word	0x080030f5
 8002ff8:	080030f5 	.word	0x080030f5
 8002ffc:	080030f5 	.word	0x080030f5
 8003000:	080030f5 	.word	0x080030f5
 8003004:	080030f5 	.word	0x080030f5
 8003008:	080030f5 	.word	0x080030f5
 800300c:	080030f5 	.word	0x080030f5
 8003010:	080030c3 	.word	0x080030c3
 8003014:	080030f5 	.word	0x080030f5
 8003018:	080030f5 	.word	0x080030f5
 800301c:	080030f5 	.word	0x080030f5
 8003020:	080030f5 	.word	0x080030f5
 8003024:	080030f5 	.word	0x080030f5
 8003028:	080030f5 	.word	0x080030f5
 800302c:	080030f5 	.word	0x080030f5
 8003030:	080030f5 	.word	0x080030f5
 8003034:	080030f5 	.word	0x080030f5
 8003038:	080030f5 	.word	0x080030f5
 800303c:	080030f5 	.word	0x080030f5
 8003040:	080030f5 	.word	0x080030f5
 8003044:	080030f5 	.word	0x080030f5
 8003048:	080030f5 	.word	0x080030f5
 800304c:	080030f5 	.word	0x080030f5
 8003050:	080030f5 	.word	0x080030f5
 8003054:	080030f5 	.word	0x080030f5
 8003058:	080030f5 	.word	0x080030f5
 800305c:	080030f5 	.word	0x080030f5
 8003060:	080030bb 	.word	0x080030bb
 8003064:	080030f5 	.word	0x080030f5
 8003068:	080030f5 	.word	0x080030f5
 800306c:	080030f5 	.word	0x080030f5
 8003070:	080030f5 	.word	0x080030f5
 8003074:	080030f5 	.word	0x080030f5
 8003078:	080030f5 	.word	0x080030f5
 800307c:	080030f5 	.word	0x080030f5
 8003080:	080030f5 	.word	0x080030f5
 8003084:	080030f5 	.word	0x080030f5
 8003088:	080030b3 	.word	0x080030b3
 800308c:	2b64      	cmp	r3, #100	; 0x64
 800308e:	d00c      	beq.n	80030aa <Tx_Verify+0x8ee>
 8003090:	e030      	b.n	80030f4 <Tx_Verify+0x938>
 8003092:	4b16      	ldr	r3, [pc, #88]	; (80030ec <Tx_Verify+0x930>)
 8003094:	2201      	movs	r2, #1
 8003096:	71da      	strb	r2, [r3, #7]
 8003098:	e02f      	b.n	80030fa <Tx_Verify+0x93e>
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <Tx_Verify+0x930>)
 800309c:	2202      	movs	r2, #2
 800309e:	71da      	strb	r2, [r3, #7]
 80030a0:	e02b      	b.n	80030fa <Tx_Verify+0x93e>
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <Tx_Verify+0x930>)
 80030a4:	2203      	movs	r2, #3
 80030a6:	71da      	strb	r2, [r3, #7]
 80030a8:	e027      	b.n	80030fa <Tx_Verify+0x93e>
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <Tx_Verify+0x930>)
 80030ac:	2204      	movs	r2, #4
 80030ae:	71da      	strb	r2, [r3, #7]
 80030b0:	e023      	b.n	80030fa <Tx_Verify+0x93e>
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <Tx_Verify+0x930>)
 80030b4:	2205      	movs	r2, #5
 80030b6:	71da      	strb	r2, [r3, #7]
 80030b8:	e01f      	b.n	80030fa <Tx_Verify+0x93e>
 80030ba:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <Tx_Verify+0x930>)
 80030bc:	2206      	movs	r2, #6
 80030be:	71da      	strb	r2, [r3, #7]
 80030c0:	e01b      	b.n	80030fa <Tx_Verify+0x93e>
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <Tx_Verify+0x930>)
 80030c4:	2207      	movs	r2, #7
 80030c6:	71da      	strb	r2, [r3, #7]
 80030c8:	e017      	b.n	80030fa <Tx_Verify+0x93e>
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <Tx_Verify+0x930>)
 80030cc:	2208      	movs	r2, #8
 80030ce:	71da      	strb	r2, [r3, #7]
 80030d0:	e013      	b.n	80030fa <Tx_Verify+0x93e>
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <Tx_Verify+0x930>)
 80030d4:	2209      	movs	r2, #9
 80030d6:	71da      	strb	r2, [r3, #7]
 80030d8:	e00f      	b.n	80030fa <Tx_Verify+0x93e>
 80030da:	4b04      	ldr	r3, [pc, #16]	; (80030ec <Tx_Verify+0x930>)
 80030dc:	220a      	movs	r2, #10
 80030de:	71da      	strb	r2, [r3, #7]
 80030e0:	e00b      	b.n	80030fa <Tx_Verify+0x93e>
 80030e2:	4b02      	ldr	r3, [pc, #8]	; (80030ec <Tx_Verify+0x930>)
 80030e4:	220b      	movs	r2, #11
 80030e6:	71da      	strb	r2, [r3, #7]
 80030e8:	e007      	b.n	80030fa <Tx_Verify+0x93e>
 80030ea:	bf00      	nop
 80030ec:	2000077c 	.word	0x2000077c
 80030f0:	20002c04 	.word	0x20002c04
 80030f4:	4b27      	ldr	r3, [pc, #156]	; (8003194 <Tx_Verify+0x9d8>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	71da      	strb	r2, [r3, #7]
 80030fa:	bf00      	nop

	if(flagDatalogger == DL_SAVE)
 80030fc:	4b26      	ldr	r3, [pc, #152]	; (8003198 <Tx_Verify+0x9dc>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d10a      	bne.n	800311a <Tx_Verify+0x95e>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <Tx_Verify+0x9e0>)
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	4b24      	ldr	r3, [pc, #144]	; (800319c <Tx_Verify+0x9e0>)
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	b2d9      	uxtb	r1, r3
 800310e:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <Tx_Verify+0x9e4>)
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <Tx_Verify+0x9e8>)
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <Tx_Verify+0x9d8>)
 8003116:	f002 fee1 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	if((accCAN[VERIFY_MSG] >= perCAN[VERIFY_MSG]) && (perCAN[VERIFY_MSG] != MSG_DISABLED))
 800311a:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <Tx_Verify+0x9ec>)
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	4a23      	ldr	r2, [pc, #140]	; (80031ac <Tx_Verify+0x9f0>)
 8003120:	8912      	ldrh	r2, [r2, #8]
 8003122:	4293      	cmp	r3, r2
 8003124:	d331      	bcc.n	800318a <Tx_Verify+0x9ce>
 8003126:	4b21      	ldr	r3, [pc, #132]	; (80031ac <Tx_Verify+0x9f0>)
 8003128:	891b      	ldrh	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d02d      	beq.n	800318a <Tx_Verify+0x9ce>
	{
		accCAN[VERIFY_MSG] -= perCAN[VERIFY_MSG];
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <Tx_Verify+0x9ec>)
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	4a1e      	ldr	r2, [pc, #120]	; (80031ac <Tx_Verify+0x9f0>)
 8003134:	8912      	ldrh	r2, [r2, #8]
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <Tx_Verify+0x9ec>)
 800313a:	6113      	str	r3, [r2, #16]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 800313c:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <Tx_Verify+0x9f4>)
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <Tx_Verify+0x9d8>)
 8003140:	4916      	ldr	r1, [pc, #88]	; (800319c <Tx_Verify+0x9e0>)
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f004 fc12 	bl	800796c <HAL_CAN_AddTxMessage>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d107      	bne.n	800315e <Tx_Verify+0x9a2>
			verifyCAN |= 1;
 800314e:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <Tx_Verify+0x9f8>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <Tx_Verify+0x9f8>)
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e006      	b.n	800316c <Tx_Verify+0x9b0>
		else
			verifyCAN &= 0x02;
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <Tx_Verify+0x9f8>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	b2da      	uxtb	r2, r3
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <Tx_Verify+0x9f8>)
 800316a:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
 8003170:	e002      	b.n	8003178 <Tx_Verify+0x9bc>
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	3301      	adds	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f004 fcd2 	bl	8007b22 <HAL_CAN_GetTxMailboxesFreeLevel>
 800317e:	4603      	mov	r3, r0
 8003180:	2b03      	cmp	r3, #3
 8003182:	d002      	beq.n	800318a <Tx_Verify+0x9ce>
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d9f3      	bls.n	8003172 <Tx_Verify+0x9b6>
	}
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	2000077c 	.word	0x2000077c
 8003198:	20003c98 	.word	0x20003c98
 800319c:	20000708 	.word	0x20000708
 80031a0:	20002c6c 	.word	0x20002c6c
 80031a4:	2000190c 	.word	0x2000190c
 80031a8:	20000720 	.word	0x20000720
 80031ac:	200018fc 	.word	0x200018fc
 80031b0:	20002c68 	.word	0x20002c68
 80031b4:	20000872 	.word	0x20000872

080031b8 <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af02      	add	r7, sp, #8
 80031be:	6078      	str	r0, [r7, #4]
	uint16_t buffer[3];

	txHeader.IDE = CAN_ID_STD;
 80031c0:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <Tx_Beacon+0x12c>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <Tx_Beacon+0x12c>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80031cc:	4b45      	ldr	r3, [pc, #276]	; (80032e4 <Tx_Beacon+0x12c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | BEACON_ID;
 80031d2:	4b44      	ldr	r3, [pc, #272]	; (80032e4 <Tx_Beacon+0x12c>)
 80031d4:	f240 5264 	movw	r2, #1380	; 0x564
 80031d8:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 5;
 80031da:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <Tx_Beacon+0x12c>)
 80031dc:	2205      	movs	r2, #5
 80031de:	611a      	str	r2, [r3, #16]

	buffer[0] = accLap / 60000;
 80031e0:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <Tx_Beacon+0x130>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a41      	ldr	r2, [pc, #260]	; (80032ec <Tx_Beacon+0x134>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	0b9b      	lsrs	r3, r3, #14
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	813b      	strh	r3, [r7, #8]
	buffer[1] = accLap / 1000;
 80031f0:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <Tx_Beacon+0x130>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a3e      	ldr	r2, [pc, #248]	; (80032f0 <Tx_Beacon+0x138>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	099b      	lsrs	r3, r3, #6
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	817b      	strh	r3, [r7, #10]
	buffer[2] = accLap % 1000;
 8003200:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <Tx_Beacon+0x130>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b3a      	ldr	r3, [pc, #232]	; (80032f0 <Tx_Beacon+0x138>)
 8003206:	fba3 1302 	umull	r1, r3, r3, r2
 800320a:	099b      	lsrs	r3, r3, #6
 800320c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	b29b      	uxth	r3, r3
 8003218:	81bb      	strh	r3, [r7, #12]

	accLap = 0;
 800321a:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <Tx_Beacon+0x130>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

	txData[0] = lapNumber;
 8003220:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <Tx_Beacon+0x13c>)
 8003222:	781a      	ldrb	r2, [r3, #0]
 8003224:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <Tx_Beacon+0x140>)
 8003226:	701a      	strb	r2, [r3, #0]
	txData[1] = buffer[0] & 0xff;
 8003228:	893b      	ldrh	r3, [r7, #8]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	4b32      	ldr	r3, [pc, #200]	; (80032f8 <Tx_Beacon+0x140>)
 800322e:	705a      	strb	r2, [r3, #1]
	txData[2] = buffer[1] & 0xff;
 8003230:	897b      	ldrh	r3, [r7, #10]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <Tx_Beacon+0x140>)
 8003236:	709a      	strb	r2, [r3, #2]
	txData[3] = buffer[2] >> 8;
 8003238:	89bb      	ldrh	r3, [r7, #12]
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	b29b      	uxth	r3, r3
 800323e:	b2da      	uxtb	r2, r3
 8003240:	4b2d      	ldr	r3, [pc, #180]	; (80032f8 <Tx_Beacon+0x140>)
 8003242:	70da      	strb	r2, [r3, #3]
	txData[4] = buffer[2] & 0xff;
 8003244:	89bb      	ldrh	r3, [r7, #12]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <Tx_Beacon+0x140>)
 800324a:	711a      	strb	r2, [r3, #4]

	if(flagDatalogger == DL_SAVE)
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <Tx_Beacon+0x144>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d10a      	bne.n	800326a <Tx_Beacon+0xb2>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8003254:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <Tx_Beacon+0x12c>)
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <Tx_Beacon+0x12c>)
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	b2d9      	uxtb	r1, r3
 800325e:	4b28      	ldr	r3, [pc, #160]	; (8003300 <Tx_Beacon+0x148>)
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	4b28      	ldr	r3, [pc, #160]	; (8003304 <Tx_Beacon+0x14c>)
 8003264:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <Tx_Beacon+0x140>)
 8003266:	f002 fe39 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	if((accCAN[BEACON_MSG] >= perCAN[BEACON_MSG]) && (perCAN[BEACON_MSG] != MSG_DISABLED))
 800326a:	4b27      	ldr	r3, [pc, #156]	; (8003308 <Tx_Beacon+0x150>)
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	4a27      	ldr	r2, [pc, #156]	; (800330c <Tx_Beacon+0x154>)
 8003270:	8952      	ldrh	r2, [r2, #10]
 8003272:	4293      	cmp	r3, r2
 8003274:	d331      	bcc.n	80032da <Tx_Beacon+0x122>
 8003276:	4b25      	ldr	r3, [pc, #148]	; (800330c <Tx_Beacon+0x154>)
 8003278:	895b      	ldrh	r3, [r3, #10]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d02d      	beq.n	80032da <Tx_Beacon+0x122>
	{
		accCAN[BEACON_MSG] -= perCAN[BEACON_MSG];
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <Tx_Beacon+0x150>)
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4a22      	ldr	r2, [pc, #136]	; (800330c <Tx_Beacon+0x154>)
 8003284:	8952      	ldrh	r2, [r2, #10]
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <Tx_Beacon+0x150>)
 800328a:	6153      	str	r3, [r2, #20]
		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 800328c:	4b20      	ldr	r3, [pc, #128]	; (8003310 <Tx_Beacon+0x158>)
 800328e:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <Tx_Beacon+0x140>)
 8003290:	4914      	ldr	r1, [pc, #80]	; (80032e4 <Tx_Beacon+0x12c>)
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f004 fb6a 	bl	800796c <HAL_CAN_AddTxMessage>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d107      	bne.n	80032ae <Tx_Beacon+0xf6>
			verifyCAN |= 1;
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <Tx_Beacon+0x15c>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <Tx_Beacon+0x15c>)
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e006      	b.n	80032bc <Tx_Beacon+0x104>
		else
			verifyCAN &= 0x02;
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <Tx_Beacon+0x15c>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <Tx_Beacon+0x15c>)
 80032ba:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	e002      	b.n	80032c8 <Tx_Beacon+0x110>
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	3301      	adds	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f004 fc2a 	bl	8007b22 <HAL_CAN_GetTxMailboxesFreeLevel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d002      	beq.n	80032da <Tx_Beacon+0x122>
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d9f3      	bls.n	80032c2 <Tx_Beacon+0x10a>
	}
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000708 	.word	0x20000708
 80032e8:	20002c64 	.word	0x20002c64
 80032ec:	45e7b273 	.word	0x45e7b273
 80032f0:	10624dd3 	.word	0x10624dd3
 80032f4:	20001908 	.word	0x20001908
 80032f8:	2000077c 	.word	0x2000077c
 80032fc:	20003c98 	.word	0x20003c98
 8003300:	20002c6c 	.word	0x20002c6c
 8003304:	2000190c 	.word	0x2000190c
 8003308:	20000720 	.word	0x20000720
 800330c:	200018fc 	.word	0x200018fc
 8003310:	20002c68 	.word	0x20002c68
 8003314:	20000872 	.word	0x20000872

08003318 <Save_PDM>:

static void Save_PDM()
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af02      	add	r7, sp, #8
	uint8_t id = 0, length = 0, buffer[8];
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
 8003322:	2300      	movs	r3, #0
 8003324:	73bb      	strb	r3, [r7, #14]

	if(flagDatalogger != DL_SAVE)
 8003326:	4b8f      	ldr	r3, [pc, #572]	; (8003564 <Save_PDM+0x24c>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	f040 8115 	bne.w	800355a <Save_PDM+0x242>
		return;

	id = PDM_FIRST_ID;
 8003330:	230a      	movs	r3, #10
 8003332:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003334:	2308      	movs	r3, #8
 8003336:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[0] << 8;
 8003338:	2300      	movs	r3, #0
 800333a:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[0] & 0xff;
 800333c:	4b8a      	ldr	r3, [pc, #552]	; (8003568 <Save_PDM+0x250>)
 800333e:	889b      	ldrh	r3, [r3, #4]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[1] << 8;
 8003344:	2300      	movs	r3, #0
 8003346:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[1] & 0xff;
 8003348:	4b87      	ldr	r3, [pc, #540]	; (8003568 <Save_PDM+0x250>)
 800334a:	88db      	ldrh	r3, [r3, #6]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[2] << 8;
 8003350:	2300      	movs	r3, #0
 8003352:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[2] & 0xff;
 8003354:	4b84      	ldr	r3, [pc, #528]	; (8003568 <Save_PDM+0x250>)
 8003356:	891b      	ldrh	r3, [r3, #8]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[3] << 8;
 800335c:	2300      	movs	r3, #0
 800335e:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[3] & 0xff;
 8003360:	4b81      	ldr	r3, [pc, #516]	; (8003568 <Save_PDM+0x250>)
 8003362:	895b      	ldrh	r3, [r3, #10]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003368:	7bf8      	ldrb	r0, [r7, #15]
 800336a:	1d3a      	adds	r2, r7, #4
 800336c:	7bb9      	ldrb	r1, [r7, #14]
 800336e:	4b7f      	ldr	r3, [pc, #508]	; (800356c <Save_PDM+0x254>)
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	4b7f      	ldr	r3, [pc, #508]	; (8003570 <Save_PDM+0x258>)
 8003374:	f002 fdb2 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 1;
 8003378:	230b      	movs	r3, #11
 800337a:	73fb      	strb	r3, [r7, #15]
	length = 8;
 800337c:	2308      	movs	r3, #8
 800337e:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[4] << 8;
 8003380:	2300      	movs	r3, #0
 8003382:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[4] & 0xff;
 8003384:	4b78      	ldr	r3, [pc, #480]	; (8003568 <Save_PDM+0x250>)
 8003386:	899b      	ldrh	r3, [r3, #12]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[5] << 8;
 800338c:	2300      	movs	r3, #0
 800338e:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[5] & 0xff;
 8003390:	4b75      	ldr	r3, [pc, #468]	; (8003568 <Save_PDM+0x250>)
 8003392:	89db      	ldrh	r3, [r3, #14]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[6] << 8;
 8003398:	2300      	movs	r3, #0
 800339a:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[6] & 0xff;
 800339c:	4b72      	ldr	r3, [pc, #456]	; (8003568 <Save_PDM+0x250>)
 800339e:	8a1b      	ldrh	r3, [r3, #16]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[7] << 8;
 80033a4:	2300      	movs	r3, #0
 80033a6:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[7] & 0xff;
 80033a8:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <Save_PDM+0x250>)
 80033aa:	8a5b      	ldrh	r3, [r3, #18]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 80033b0:	7bf8      	ldrb	r0, [r7, #15]
 80033b2:	1d3a      	adds	r2, r7, #4
 80033b4:	7bb9      	ldrb	r1, [r7, #14]
 80033b6:	4b6d      	ldr	r3, [pc, #436]	; (800356c <Save_PDM+0x254>)
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <Save_PDM+0x258>)
 80033bc:	f002 fd8e 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 2;
 80033c0:	230c      	movs	r3, #12
 80033c2:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80033c4:	2308      	movs	r3, #8
 80033c6:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[8] << 8;
 80033c8:	2300      	movs	r3, #0
 80033ca:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[8] & 0xff;
 80033cc:	4b66      	ldr	r3, [pc, #408]	; (8003568 <Save_PDM+0x250>)
 80033ce:	8a9b      	ldrh	r3, [r3, #20]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[9] << 8;
 80033d4:	2300      	movs	r3, #0
 80033d6:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[9] & 0xff;
 80033d8:	4b63      	ldr	r3, [pc, #396]	; (8003568 <Save_PDM+0x250>)
 80033da:	8adb      	ldrh	r3, [r3, #22]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[10] << 8;
 80033e0:	2300      	movs	r3, #0
 80033e2:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[10] & 0xff;
 80033e4:	4b60      	ldr	r3, [pc, #384]	; (8003568 <Save_PDM+0x250>)
 80033e6:	8b1b      	ldrh	r3, [r3, #24]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[11] << 8;
 80033ec:	2300      	movs	r3, #0
 80033ee:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[11] & 0xff;
 80033f0:	4b5d      	ldr	r3, [pc, #372]	; (8003568 <Save_PDM+0x250>)
 80033f2:	8b5b      	ldrh	r3, [r3, #26]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 80033f8:	7bf8      	ldrb	r0, [r7, #15]
 80033fa:	1d3a      	adds	r2, r7, #4
 80033fc:	7bb9      	ldrb	r1, [r7, #14]
 80033fe:	4b5b      	ldr	r3, [pc, #364]	; (800356c <Save_PDM+0x254>)
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	4b5b      	ldr	r3, [pc, #364]	; (8003570 <Save_PDM+0x258>)
 8003404:	f002 fd6a 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 3;
 8003408:	230d      	movs	r3, #13
 800340a:	73fb      	strb	r3, [r7, #15]
	length = 8;
 800340c:	2308      	movs	r3, #8
 800340e:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[12] << 8;
 8003410:	2300      	movs	r3, #0
 8003412:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[12] & 0xff;
 8003414:	4b54      	ldr	r3, [pc, #336]	; (8003568 <Save_PDM+0x250>)
 8003416:	8b9b      	ldrh	r3, [r3, #28]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[13] << 8;
 800341c:	2300      	movs	r3, #0
 800341e:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[13] & 0xff;
 8003420:	4b51      	ldr	r3, [pc, #324]	; (8003568 <Save_PDM+0x250>)
 8003422:	8bdb      	ldrh	r3, [r3, #30]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[14] << 8;
 8003428:	2300      	movs	r3, #0
 800342a:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[14] & 0xff;
 800342c:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <Save_PDM+0x250>)
 800342e:	8c1b      	ldrh	r3, [r3, #32]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[15] << 8;
 8003434:	2300      	movs	r3, #0
 8003436:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[15] & 0xff;
 8003438:	4b4b      	ldr	r3, [pc, #300]	; (8003568 <Save_PDM+0x250>)
 800343a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800343c:	b2db      	uxtb	r3, r3
 800343e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003440:	7bf8      	ldrb	r0, [r7, #15]
 8003442:	1d3a      	adds	r2, r7, #4
 8003444:	7bb9      	ldrb	r1, [r7, #14]
 8003446:	4b49      	ldr	r3, [pc, #292]	; (800356c <Save_PDM+0x254>)
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	4b49      	ldr	r3, [pc, #292]	; (8003570 <Save_PDM+0x258>)
 800344c:	f002 fd46 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 4;
 8003450:	230e      	movs	r3, #14
 8003452:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003454:	2308      	movs	r3, #8
 8003456:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Tempetature_Buffer[0] << 8;
 8003458:	2300      	movs	r3, #0
 800345a:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Tempetature_Buffer[0] & 0xff;
 800345c:	4b42      	ldr	r3, [pc, #264]	; (8003568 <Save_PDM+0x250>)
 800345e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003460:	b2db      	uxtb	r3, r3
 8003462:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Tempetature_Buffer[1] << 8;
 8003464:	2300      	movs	r3, #0
 8003466:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Tempetature_Buffer[1] & 0xff;
 8003468:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <Save_PDM+0x250>)
 800346a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800346c:	b2db      	uxtb	r3, r3
 800346e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Tempetature_Buffer[2] << 8;
 8003470:	2300      	movs	r3, #0
 8003472:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Tempetature_Buffer[2] & 0xff;
 8003474:	4b3c      	ldr	r3, [pc, #240]	; (8003568 <Save_PDM+0x250>)
 8003476:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003478:	b2db      	uxtb	r3, r3
 800347a:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Tempetature_Buffer[3] << 8;
 800347c:	2300      	movs	r3, #0
 800347e:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Tempetature_Buffer[3] & 0xff;
 8003480:	4b39      	ldr	r3, [pc, #228]	; (8003568 <Save_PDM+0x250>)
 8003482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003484:	b2db      	uxtb	r3, r3
 8003486:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003488:	7bf8      	ldrb	r0, [r7, #15]
 800348a:	1d3a      	adds	r2, r7, #4
 800348c:	7bb9      	ldrb	r1, [r7, #14]
 800348e:	4b37      	ldr	r3, [pc, #220]	; (800356c <Save_PDM+0x254>)
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	4b37      	ldr	r3, [pc, #220]	; (8003570 <Save_PDM+0x258>)
 8003494:	f002 fd22 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 5;
 8003498:	230f      	movs	r3, #15
 800349a:	73fb      	strb	r3, [r7, #15]
	length = 8;
 800349c:	2308      	movs	r3, #8
 800349e:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Tempetature_Buffer[4] << 8;
 80034a0:	2300      	movs	r3, #0
 80034a2:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Tempetature_Buffer[4] & 0xff;
 80034a4:	4b30      	ldr	r3, [pc, #192]	; (8003568 <Save_PDM+0x250>)
 80034a6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Tempetature_Buffer[5] << 8;
 80034ac:	2300      	movs	r3, #0
 80034ae:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Tempetature_Buffer[5] & 0xff;
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <Save_PDM+0x250>)
 80034b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Tempetature_Buffer[6] << 8;
 80034b8:	2300      	movs	r3, #0
 80034ba:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Tempetature_Buffer[6] & 0xff;
 80034bc:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <Save_PDM+0x250>)
 80034be:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Tempetature_Buffer[7] << 8;
 80034c4:	2300      	movs	r3, #0
 80034c6:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Tempetature_Buffer[7] & 0xff;
 80034c8:	4b27      	ldr	r3, [pc, #156]	; (8003568 <Save_PDM+0x250>)
 80034ca:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 80034d0:	7bf8      	ldrb	r0, [r7, #15]
 80034d2:	1d3a      	adds	r2, r7, #4
 80034d4:	7bb9      	ldrb	r1, [r7, #14]
 80034d6:	4b25      	ldr	r3, [pc, #148]	; (800356c <Save_PDM+0x254>)
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	4b25      	ldr	r3, [pc, #148]	; (8003570 <Save_PDM+0x258>)
 80034dc:	f002 fcfe 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 6;
 80034e0:	2310      	movs	r3, #16
 80034e2:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80034e4:	2308      	movs	r3, #8
 80034e6:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Duty_Cycle_Buffer[0] << 8;
 80034e8:	2300      	movs	r3, #0
 80034ea:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Duty_Cycle_Buffer[0] & 0xff;
 80034ec:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <Save_PDM+0x250>)
 80034ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Duty_Cycle_Buffer[1] << 8;
 80034f4:	2300      	movs	r3, #0
 80034f6:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Duty_Cycle_Buffer[1] & 0xff;
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <Save_PDM+0x250>)
 80034fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Duty_Cycle_Buffer[2] << 8;
 8003500:	2300      	movs	r3, #0
 8003502:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Duty_Cycle_Buffer[2] & 0xff;
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <Save_PDM+0x250>)
 8003506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003508:	b2db      	uxtb	r3, r3
 800350a:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Duty_Cycle_Buffer[3] << 8;
 800350c:	2300      	movs	r3, #0
 800350e:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Duty_Cycle_Buffer[3] & 0xff;
 8003510:	4b15      	ldr	r3, [pc, #84]	; (8003568 <Save_PDM+0x250>)
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b2db      	uxtb	r3, r3
 8003516:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003518:	7bf8      	ldrb	r0, [r7, #15]
 800351a:	1d3a      	adds	r2, r7, #4
 800351c:	7bb9      	ldrb	r1, [r7, #14]
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <Save_PDM+0x254>)
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <Save_PDM+0x258>)
 8003524:	f002 fcda 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 7;
 8003528:	2311      	movs	r3, #17
 800352a:	73fb      	strb	r3, [r7, #15]
	length = 4;
 800352c:	2304      	movs	r3, #4
 800352e:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Input_Voltage << 8;
 8003530:	2300      	movs	r3, #0
 8003532:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Input_Voltage & 0xff;
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <Save_PDM+0x250>)
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Output_Verify << 8;
 800353c:	2300      	movs	r3, #0
 800353e:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Output_Verify & 0xff;
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <Save_PDM+0x250>)
 8003542:	885b      	ldrh	r3, [r3, #2]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	71fb      	strb	r3, [r7, #7]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003548:	7bf8      	ldrb	r0, [r7, #15]
 800354a:	1d3a      	adds	r2, r7, #4
 800354c:	7bb9      	ldrb	r1, [r7, #14]
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <Save_PDM+0x254>)
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <Save_PDM+0x258>)
 8003554:	f002 fcc2 	bl	8005edc <Principal_Datalogger_Save_Buffer>
 8003558:	e000      	b.n	800355c <Save_PDM+0x244>
		return;
 800355a:	bf00      	nop
}
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20003c98 	.word	0x20003c98
 8003568:	20000834 	.word	0x20000834
 800356c:	20002c6c 	.word	0x20002c6c
 8003570:	2000190c 	.word	0x2000190c

08003574 <Save_ECU>:

static void Save_ECU()
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af02      	add	r7, sp, #8
	uint8_t id = 0, length = 0, buffer[8];
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
 800357e:	2300      	movs	r3, #0
 8003580:	73bb      	strb	r3, [r7, #14]

	if(flagDatalogger != DL_SAVE)
 8003582:	4b7a      	ldr	r3, [pc, #488]	; (800376c <Save_ECU+0x1f8>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b01      	cmp	r3, #1
 8003588:	f040 80eb 	bne.w	8003762 <Save_ECU+0x1ee>
		return;

	id = ECU_FIRST_ID;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003590:	2308      	movs	r3, #8
 8003592:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.rpm >> 8;
 8003594:	4b76      	ldr	r3, [pc, #472]	; (8003770 <Save_ECU+0x1fc>)
 8003596:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800359a:	121b      	asrs	r3, r3, #8
 800359c:	b21b      	sxth	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.rpm & 0xff;
 80035a2:	4b73      	ldr	r3, [pc, #460]	; (8003770 <Save_ECU+0x1fc>)
 80035a4:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.tps >> 8;
 80035ac:	4b70      	ldr	r3, [pc, #448]	; (8003770 <Save_ECU+0x1fc>)
 80035ae:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80035b2:	121b      	asrs	r3, r3, #8
 80035b4:	b21b      	sxth	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.tps & 0xff;
 80035ba:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <Save_ECU+0x1fc>)
 80035bc:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.iat >> 8;
 80035c4:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <Save_ECU+0x1fc>)
 80035c6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80035ca:	121b      	asrs	r3, r3, #8
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.iat & 0xff;
 80035d2:	4b67      	ldr	r3, [pc, #412]	; (8003770 <Save_ECU+0x1fc>)
 80035d4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.ect >> 8;
 80035dc:	4b64      	ldr	r3, [pc, #400]	; (8003770 <Save_ECU+0x1fc>)
 80035de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80035e2:	121b      	asrs	r3, r3, #8
 80035e4:	b21b      	sxth	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.ect & 0xff;
 80035ea:	4b61      	ldr	r3, [pc, #388]	; (8003770 <Save_ECU+0x1fc>)
 80035ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 80035f4:	7bf8      	ldrb	r0, [r7, #15]
 80035f6:	1d3a      	adds	r2, r7, #4
 80035f8:	7bb9      	ldrb	r1, [r7, #14]
 80035fa:	4b5e      	ldr	r3, [pc, #376]	; (8003774 <Save_ECU+0x200>)
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	4b5e      	ldr	r3, [pc, #376]	; (8003778 <Save_ECU+0x204>)
 8003600:	f002 fc6c 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 1;
 8003604:	2302      	movs	r3, #2
 8003606:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003608:	2308      	movs	r3, #8
 800360a:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.map >> 8;
 800360c:	4b58      	ldr	r3, [pc, #352]	; (8003770 <Save_ECU+0x1fc>)
 800360e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003612:	121b      	asrs	r3, r3, #8
 8003614:	b21b      	sxth	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.map & 0xff;
 800361a:	4b55      	ldr	r3, [pc, #340]	; (8003770 <Save_ECU+0x1fc>)
 800361c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003620:	b2db      	uxtb	r3, r3
 8003622:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.fuel_pressure >> 8;
 8003624:	4b52      	ldr	r3, [pc, #328]	; (8003770 <Save_ECU+0x1fc>)
 8003626:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800362a:	121b      	asrs	r3, r3, #8
 800362c:	b21b      	sxth	r3, r3
 800362e:	b2db      	uxtb	r3, r3
 8003630:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.fuel_pressure & 0xff;
 8003632:	4b4f      	ldr	r3, [pc, #316]	; (8003770 <Save_ECU+0x1fc>)
 8003634:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003638:	b2db      	uxtb	r3, r3
 800363a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.oil_pressure >> 8;
 800363c:	4b4c      	ldr	r3, [pc, #304]	; (8003770 <Save_ECU+0x1fc>)
 800363e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8003642:	121b      	asrs	r3, r3, #8
 8003644:	b21b      	sxth	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.oil_pressure & 0xff;
 800364a:	4b49      	ldr	r3, [pc, #292]	; (8003770 <Save_ECU+0x1fc>)
 800364c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8003650:	b2db      	uxtb	r3, r3
 8003652:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.coolant_pressure >> 8;
 8003654:	4b46      	ldr	r3, [pc, #280]	; (8003770 <Save_ECU+0x1fc>)
 8003656:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800365a:	121b      	asrs	r3, r3, #8
 800365c:	b21b      	sxth	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.coolant_pressure & 0xff;
 8003662:	4b43      	ldr	r3, [pc, #268]	; (8003770 <Save_ECU+0x1fc>)
 8003664:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8003668:	b2db      	uxtb	r3, r3
 800366a:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 800366c:	7bf8      	ldrb	r0, [r7, #15]
 800366e:	1d3a      	adds	r2, r7, #4
 8003670:	7bb9      	ldrb	r1, [r7, #14]
 8003672:	4b40      	ldr	r3, [pc, #256]	; (8003774 <Save_ECU+0x200>)
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	4b40      	ldr	r3, [pc, #256]	; (8003778 <Save_ECU+0x204>)
 8003678:	f002 fc30 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 2;
 800367c:	2303      	movs	r3, #3
 800367e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003680:	2308      	movs	r3, #8
 8003682:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.lambda >> 8;
 8003684:	4b3a      	ldr	r3, [pc, #232]	; (8003770 <Save_ECU+0x1fc>)
 8003686:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800368a:	121b      	asrs	r3, r3, #8
 800368c:	b21b      	sxth	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.lambda & 0xff;
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <Save_ECU+0x1fc>)
 8003694:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003698:	b2db      	uxtb	r3, r3
 800369a:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.oil_temperature >> 8;
 800369c:	4b34      	ldr	r3, [pc, #208]	; (8003770 <Save_ECU+0x1fc>)
 800369e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80036a2:	121b      	asrs	r3, r3, #8
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.oil_temperature & 0xff;
 80036aa:	4b31      	ldr	r3, [pc, #196]	; (8003770 <Save_ECU+0x1fc>)
 80036ac:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.wheel_speed_fl;
 80036b4:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <Save_ECU+0x1fc>)
 80036b6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.wheel_speed_fr;
 80036be:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <Save_ECU+0x1fc>)
 80036c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.wheel_speed_rl;
 80036c8:	4b29      	ldr	r3, [pc, #164]	; (8003770 <Save_ECU+0x1fc>)
 80036ca:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.wheel_speed_rr;
 80036d2:	4b27      	ldr	r3, [pc, #156]	; (8003770 <Save_ECU+0x1fc>)
 80036d4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 80036dc:	7bf8      	ldrb	r0, [r7, #15]
 80036de:	1d3a      	adds	r2, r7, #4
 80036e0:	7bb9      	ldrb	r1, [r7, #14]
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <Save_ECU+0x200>)
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <Save_ECU+0x204>)
 80036e8:	f002 fbf8 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 3;
 80036ec:	2304      	movs	r3, #4
 80036ee:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80036f0:	2308      	movs	r3, #8
 80036f2:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.battery_voltage >> 8;
 80036f4:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <Save_ECU+0x1fc>)
 80036f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80036fa:	121b      	asrs	r3, r3, #8
 80036fc:	b21b      	sxth	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.battery_voltage & 0xff;
 8003702:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <Save_ECU+0x1fc>)
 8003704:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.total_fuel_flow >> 8;
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <Save_ECU+0x1fc>)
 800370e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003712:	121b      	asrs	r3, r3, #8
 8003714:	b21b      	sxth	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.total_fuel_flow & 0xff;
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <Save_ECU+0x1fc>)
 800371c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.gear & 0xff;
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <Save_ECU+0x1fc>)
 8003726:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800372a:	b2db      	uxtb	r3, r3
 800372c:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.electro_fan & 0xff;
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <Save_ECU+0x1fc>)
 8003730:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.injection_bank_a_time >> 8;
 8003738:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <Save_ECU+0x1fc>)
 800373a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800373e:	121b      	asrs	r3, r3, #8
 8003740:	b21b      	sxth	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.injection_bank_a_time & 0xff;
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <Save_ECU+0x1fc>)
 8003748:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003750:	7bf8      	ldrb	r0, [r7, #15]
 8003752:	1d3a      	adds	r2, r7, #4
 8003754:	7bb9      	ldrb	r1, [r7, #14]
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <Save_ECU+0x200>)
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	4b07      	ldr	r3, [pc, #28]	; (8003778 <Save_ECU+0x204>)
 800375c:	f002 fbbe 	bl	8005edc <Principal_Datalogger_Save_Buffer>

	return;
 8003760:	e000      	b.n	8003764 <Save_ECU+0x1f0>
		return;
 8003762:	bf00      	nop
}
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20003c98 	.word	0x20003c98
 8003770:	20002a1c 	.word	0x20002a1c
 8003774:	20002c6c 	.word	0x20002c6c
 8003778:	2000190c 	.word	0x2000190c

0800377c <Principal_CAN_Start>:

void Principal_CAN_Start(CAN_HandleTypeDef* hcan)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08e      	sub	sp, #56	; 0x38
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
 8003788:	2300      	movs	r3, #0
 800378a:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 800378c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 8003792:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003796:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003798:	2300      	movs	r3, #0
 800379a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800379c:	2301      	movs	r3, #1
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80037a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a2:	0b5b      	lsrs	r3, r3, #13
 80037a4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80037a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	0b5b      	lsrs	r3, r3, #13
 80037b2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80037bc:	2300      	movs	r3, #0
 80037be:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80037c0:	2301      	movs	r3, #1
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 80037c8:	230e      	movs	r3, #14
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80037cc:	f107 0308 	add.w	r3, r7, #8
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f003 ffa6 	bl	8007724 <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 80037d8:	2300      	movs	r3, #0
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 80037dc:	2300      	movs	r3, #0
 80037de:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80037e4:	2301      	movs	r3, #1
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	0b5b      	lsrs	r3, r3, #13
 80037ec:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80037ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	0b5b      	lsrs	r3, r3, #13
 80037fa:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	b29b      	uxth	r3, r3
 8003802:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 8003808:	2301      	movs	r3, #1
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 800380c:	2301      	movs	r3, #1
 800380e:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 8003810:	230f      	movs	r3, #15
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8003814:	f107 0308 	add.w	r3, r7, #8
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f003 ff82 	bl	8007724 <HAL_CAN_ConfigFilter>

	FT_CAN_FilterConfig(hcan, FT600, 2, CAN_RX_FIFO0);
 8003820:	2300      	movs	r3, #0
 8003822:	2202      	movs	r2, #2
 8003824:	f240 2181 	movw	r1, #641	; 0x281
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7fc febd 	bl	80005a8 <FT_CAN_FilterConfig>
	PDM_CAN_FilterConfig(hcan, 3, CAN_RX_FIFO0);
 800382e:	2200      	movs	r2, #0
 8003830:	2103      	movs	r1, #3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fe fc18 	bl	8002068 <PDM_CAN_FilterConfig>

	HAL_CAN_Start(hcan);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f004 f853 	bl	80078e4 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800383e:	2102      	movs	r1, #2
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f004 fab5 	bl	8007db0 <HAL_CAN_ActivateNotification>
}
 8003846:	bf00      	nop
 8003848:	3738      	adds	r7, #56	; 0x38
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	2b07      	cmp	r3, #7
 8003860:	d830      	bhi.n	80038c4 <Principal_Transmit_Msg+0x74>
 8003862:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <Principal_Transmit_Msg+0x18>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	08003889 	.word	0x08003889
 800386c:	08003891 	.word	0x08003891
 8003870:	08003899 	.word	0x08003899
 8003874:	080038a9 	.word	0x080038a9
 8003878:	080038a1 	.word	0x080038a1
 800387c:	080038b1 	.word	0x080038b1
 8003880:	080038b9 	.word	0x080038b9
 8003884:	080038bf 	.word	0x080038bf
	{
		case ANALOG_1_4:
			Tx_Analog_1_4(hcan);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7fe fcdd 	bl	8002248 <Tx_Analog_1_4>
			break;
 800388e:	e01a      	b.n	80038c6 <Principal_Transmit_Msg+0x76>

		case ANALOG_5_8:
			Tx_Analog_5_8(hcan);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7fe fd87 	bl	80023a4 <Tx_Analog_5_8>
			break;
 8003896:	e016      	b.n	80038c6 <Principal_Transmit_Msg+0x76>

		case ANALOG_9_12:
			Tx_Analog_9_12(hcan);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7fe fe31 	bl	8002500 <Tx_Analog_9_12>
			break;
 800389e:	e012      	b.n	80038c6 <Principal_Transmit_Msg+0x76>

		case VERIFY_MSG:
			Tx_Verify(hcan);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7fe ff8b 	bl	80027bc <Tx_Verify>
			break;
 80038a6:	e00e      	b.n	80038c6 <Principal_Transmit_Msg+0x76>

		case RTC_MSG:
			Tx_RTC(hcan);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fe fedf 	bl	800266c <Tx_RTC>
			break;
 80038ae:	e00a      	b.n	80038c6 <Principal_Transmit_Msg+0x76>

		case BEACON_MSG:
			Tx_Beacon(hcan);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff fc81 	bl	80031b8 <Tx_Beacon>
			break;
 80038b6:	e006      	b.n	80038c6 <Principal_Transmit_Msg+0x76>

		case ECU_SAVE:
			Save_ECU();
 80038b8:	f7ff fe5c 	bl	8003574 <Save_ECU>
			break;
 80038bc:	e003      	b.n	80038c6 <Principal_Transmit_Msg+0x76>

		case PDM_SAVE:
			Save_PDM();
 80038be:	f7ff fd2b 	bl	8003318 <Save_PDM>
			break;
 80038c2:	e000      	b.n	80038c6 <Principal_Transmit_Msg+0x76>

		default:
			return;
 80038c4:	bf00      	nop
	}
}
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <Load_EEPROM>:
 */

#include "principal.h"

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08c      	sub	sp, #48	; 0x30
 80038d0:	af04      	add	r7, sp, #16
 80038d2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];
	HAL_StatusTypeDef retVal;

	retVal = HAL_I2C_Mem_Read(hi2c, 0xA0, 0x0000, 1, buffer, EEPROM_BUFFER_SIZE, 5);
 80038d4:	2305      	movs	r3, #5
 80038d6:	9302      	str	r3, [sp, #8]
 80038d8:	2311      	movs	r3, #17
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	f107 030c 	add.w	r3, r7, #12
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2301      	movs	r3, #1
 80038e4:	2200      	movs	r2, #0
 80038e6:	21a0      	movs	r1, #160	; 0xa0
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f005 fd9d 	bl	8009428 <HAL_I2C_Mem_Read>
 80038ee:	4603      	mov	r3, r0
 80038f0:	77fb      	strb	r3, [r7, #31]

//	retVal = HAL_I2C_Master_Transmit(hi2c, 0xA0, 0x00, 1, 5);

	if(retVal != HAL_OK)
 80038f2:	7ffb      	ldrb	r3, [r7, #31]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <Load_EEPROM+0x30>
		return retVal;
 80038f8:	7ffb      	ldrb	r3, [r7, #31]
 80038fa:	e3f3      	b.n	80040e4 <Load_EEPROM+0x818>
//	else
//		retVal = HAL_I2C_Master_Receive(hi2c, 0xA1, buffer, EEPROM_BUFFER_SIZE, 5);

	__BUFFER_TO_FREQ(buffer[0], perMsg[ANALOG_1_4]);
 80038fc:	7b3b      	ldrb	r3, [r7, #12]
 80038fe:	3b01      	subs	r3, #1
 8003900:	2b0a      	cmp	r3, #10
 8003902:	d847      	bhi.n	8003994 <Load_EEPROM+0xc8>
 8003904:	a201      	add	r2, pc, #4	; (adr r2, 800390c <Load_EEPROM+0x40>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	08003939 	.word	0x08003939
 8003910:	08003943 	.word	0x08003943
 8003914:	0800394d 	.word	0x0800394d
 8003918:	08003955 	.word	0x08003955
 800391c:	0800395d 	.word	0x0800395d
 8003920:	08003965 	.word	0x08003965
 8003924:	0800396d 	.word	0x0800396d
 8003928:	08003975 	.word	0x08003975
 800392c:	0800397d 	.word	0x0800397d
 8003930:	08003985 	.word	0x08003985
 8003934:	0800398d 	.word	0x0800398d
 8003938:	4ba8      	ldr	r3, [pc, #672]	; (8003bdc <Load_EEPROM+0x310>)
 800393a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800393e:	801a      	strh	r2, [r3, #0]
 8003940:	e02b      	b.n	800399a <Load_EEPROM+0xce>
 8003942:	4ba6      	ldr	r3, [pc, #664]	; (8003bdc <Load_EEPROM+0x310>)
 8003944:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003948:	801a      	strh	r2, [r3, #0]
 800394a:	e026      	b.n	800399a <Load_EEPROM+0xce>
 800394c:	4ba3      	ldr	r3, [pc, #652]	; (8003bdc <Load_EEPROM+0x310>)
 800394e:	22c8      	movs	r2, #200	; 0xc8
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	e022      	b.n	800399a <Load_EEPROM+0xce>
 8003954:	4ba1      	ldr	r3, [pc, #644]	; (8003bdc <Load_EEPROM+0x310>)
 8003956:	2264      	movs	r2, #100	; 0x64
 8003958:	801a      	strh	r2, [r3, #0]
 800395a:	e01e      	b.n	800399a <Load_EEPROM+0xce>
 800395c:	4b9f      	ldr	r3, [pc, #636]	; (8003bdc <Load_EEPROM+0x310>)
 800395e:	2232      	movs	r2, #50	; 0x32
 8003960:	801a      	strh	r2, [r3, #0]
 8003962:	e01a      	b.n	800399a <Load_EEPROM+0xce>
 8003964:	4b9d      	ldr	r3, [pc, #628]	; (8003bdc <Load_EEPROM+0x310>)
 8003966:	2228      	movs	r2, #40	; 0x28
 8003968:	801a      	strh	r2, [r3, #0]
 800396a:	e016      	b.n	800399a <Load_EEPROM+0xce>
 800396c:	4b9b      	ldr	r3, [pc, #620]	; (8003bdc <Load_EEPROM+0x310>)
 800396e:	2214      	movs	r2, #20
 8003970:	801a      	strh	r2, [r3, #0]
 8003972:	e012      	b.n	800399a <Load_EEPROM+0xce>
 8003974:	4b99      	ldr	r3, [pc, #612]	; (8003bdc <Load_EEPROM+0x310>)
 8003976:	220a      	movs	r2, #10
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	e00e      	b.n	800399a <Load_EEPROM+0xce>
 800397c:	4b97      	ldr	r3, [pc, #604]	; (8003bdc <Load_EEPROM+0x310>)
 800397e:	2205      	movs	r2, #5
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	e00a      	b.n	800399a <Load_EEPROM+0xce>
 8003984:	4b95      	ldr	r3, [pc, #596]	; (8003bdc <Load_EEPROM+0x310>)
 8003986:	2203      	movs	r2, #3
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	e006      	b.n	800399a <Load_EEPROM+0xce>
 800398c:	4b93      	ldr	r3, [pc, #588]	; (8003bdc <Load_EEPROM+0x310>)
 800398e:	2202      	movs	r2, #2
 8003990:	801a      	strh	r2, [r3, #0]
 8003992:	e002      	b.n	800399a <Load_EEPROM+0xce>
 8003994:	4b91      	ldr	r3, [pc, #580]	; (8003bdc <Load_EEPROM+0x310>)
 8003996:	2200      	movs	r2, #0
 8003998:	801a      	strh	r2, [r3, #0]
 800399a:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[1], perMsg[ANALOG_5_8]);
 800399c:	7b7b      	ldrb	r3, [r7, #13]
 800399e:	3b01      	subs	r3, #1
 80039a0:	2b0a      	cmp	r3, #10
 80039a2:	d847      	bhi.n	8003a34 <Load_EEPROM+0x168>
 80039a4:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <Load_EEPROM+0xe0>)
 80039a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039aa:	bf00      	nop
 80039ac:	080039d9 	.word	0x080039d9
 80039b0:	080039e3 	.word	0x080039e3
 80039b4:	080039ed 	.word	0x080039ed
 80039b8:	080039f5 	.word	0x080039f5
 80039bc:	080039fd 	.word	0x080039fd
 80039c0:	08003a05 	.word	0x08003a05
 80039c4:	08003a0d 	.word	0x08003a0d
 80039c8:	08003a15 	.word	0x08003a15
 80039cc:	08003a1d 	.word	0x08003a1d
 80039d0:	08003a25 	.word	0x08003a25
 80039d4:	08003a2d 	.word	0x08003a2d
 80039d8:	4b80      	ldr	r3, [pc, #512]	; (8003bdc <Load_EEPROM+0x310>)
 80039da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039de:	805a      	strh	r2, [r3, #2]
 80039e0:	e02b      	b.n	8003a3a <Load_EEPROM+0x16e>
 80039e2:	4b7e      	ldr	r3, [pc, #504]	; (8003bdc <Load_EEPROM+0x310>)
 80039e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039e8:	805a      	strh	r2, [r3, #2]
 80039ea:	e026      	b.n	8003a3a <Load_EEPROM+0x16e>
 80039ec:	4b7b      	ldr	r3, [pc, #492]	; (8003bdc <Load_EEPROM+0x310>)
 80039ee:	22c8      	movs	r2, #200	; 0xc8
 80039f0:	805a      	strh	r2, [r3, #2]
 80039f2:	e022      	b.n	8003a3a <Load_EEPROM+0x16e>
 80039f4:	4b79      	ldr	r3, [pc, #484]	; (8003bdc <Load_EEPROM+0x310>)
 80039f6:	2264      	movs	r2, #100	; 0x64
 80039f8:	805a      	strh	r2, [r3, #2]
 80039fa:	e01e      	b.n	8003a3a <Load_EEPROM+0x16e>
 80039fc:	4b77      	ldr	r3, [pc, #476]	; (8003bdc <Load_EEPROM+0x310>)
 80039fe:	2232      	movs	r2, #50	; 0x32
 8003a00:	805a      	strh	r2, [r3, #2]
 8003a02:	e01a      	b.n	8003a3a <Load_EEPROM+0x16e>
 8003a04:	4b75      	ldr	r3, [pc, #468]	; (8003bdc <Load_EEPROM+0x310>)
 8003a06:	2228      	movs	r2, #40	; 0x28
 8003a08:	805a      	strh	r2, [r3, #2]
 8003a0a:	e016      	b.n	8003a3a <Load_EEPROM+0x16e>
 8003a0c:	4b73      	ldr	r3, [pc, #460]	; (8003bdc <Load_EEPROM+0x310>)
 8003a0e:	2214      	movs	r2, #20
 8003a10:	805a      	strh	r2, [r3, #2]
 8003a12:	e012      	b.n	8003a3a <Load_EEPROM+0x16e>
 8003a14:	4b71      	ldr	r3, [pc, #452]	; (8003bdc <Load_EEPROM+0x310>)
 8003a16:	220a      	movs	r2, #10
 8003a18:	805a      	strh	r2, [r3, #2]
 8003a1a:	e00e      	b.n	8003a3a <Load_EEPROM+0x16e>
 8003a1c:	4b6f      	ldr	r3, [pc, #444]	; (8003bdc <Load_EEPROM+0x310>)
 8003a1e:	2205      	movs	r2, #5
 8003a20:	805a      	strh	r2, [r3, #2]
 8003a22:	e00a      	b.n	8003a3a <Load_EEPROM+0x16e>
 8003a24:	4b6d      	ldr	r3, [pc, #436]	; (8003bdc <Load_EEPROM+0x310>)
 8003a26:	2203      	movs	r2, #3
 8003a28:	805a      	strh	r2, [r3, #2]
 8003a2a:	e006      	b.n	8003a3a <Load_EEPROM+0x16e>
 8003a2c:	4b6b      	ldr	r3, [pc, #428]	; (8003bdc <Load_EEPROM+0x310>)
 8003a2e:	2202      	movs	r2, #2
 8003a30:	805a      	strh	r2, [r3, #2]
 8003a32:	e002      	b.n	8003a3a <Load_EEPROM+0x16e>
 8003a34:	4b69      	ldr	r3, [pc, #420]	; (8003bdc <Load_EEPROM+0x310>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	805a      	strh	r2, [r3, #2]
 8003a3a:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[2], perMsg[ANALOG_9_12]);
 8003a3c:	7bbb      	ldrb	r3, [r7, #14]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	2b0a      	cmp	r3, #10
 8003a42:	d847      	bhi.n	8003ad4 <Load_EEPROM+0x208>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <Load_EEPROM+0x180>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a79 	.word	0x08003a79
 8003a50:	08003a83 	.word	0x08003a83
 8003a54:	08003a8d 	.word	0x08003a8d
 8003a58:	08003a95 	.word	0x08003a95
 8003a5c:	08003a9d 	.word	0x08003a9d
 8003a60:	08003aa5 	.word	0x08003aa5
 8003a64:	08003aad 	.word	0x08003aad
 8003a68:	08003ab5 	.word	0x08003ab5
 8003a6c:	08003abd 	.word	0x08003abd
 8003a70:	08003ac5 	.word	0x08003ac5
 8003a74:	08003acd 	.word	0x08003acd
 8003a78:	4b58      	ldr	r3, [pc, #352]	; (8003bdc <Load_EEPROM+0x310>)
 8003a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a7e:	809a      	strh	r2, [r3, #4]
 8003a80:	e02b      	b.n	8003ada <Load_EEPROM+0x20e>
 8003a82:	4b56      	ldr	r3, [pc, #344]	; (8003bdc <Load_EEPROM+0x310>)
 8003a84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a88:	809a      	strh	r2, [r3, #4]
 8003a8a:	e026      	b.n	8003ada <Load_EEPROM+0x20e>
 8003a8c:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <Load_EEPROM+0x310>)
 8003a8e:	22c8      	movs	r2, #200	; 0xc8
 8003a90:	809a      	strh	r2, [r3, #4]
 8003a92:	e022      	b.n	8003ada <Load_EEPROM+0x20e>
 8003a94:	4b51      	ldr	r3, [pc, #324]	; (8003bdc <Load_EEPROM+0x310>)
 8003a96:	2264      	movs	r2, #100	; 0x64
 8003a98:	809a      	strh	r2, [r3, #4]
 8003a9a:	e01e      	b.n	8003ada <Load_EEPROM+0x20e>
 8003a9c:	4b4f      	ldr	r3, [pc, #316]	; (8003bdc <Load_EEPROM+0x310>)
 8003a9e:	2232      	movs	r2, #50	; 0x32
 8003aa0:	809a      	strh	r2, [r3, #4]
 8003aa2:	e01a      	b.n	8003ada <Load_EEPROM+0x20e>
 8003aa4:	4b4d      	ldr	r3, [pc, #308]	; (8003bdc <Load_EEPROM+0x310>)
 8003aa6:	2228      	movs	r2, #40	; 0x28
 8003aa8:	809a      	strh	r2, [r3, #4]
 8003aaa:	e016      	b.n	8003ada <Load_EEPROM+0x20e>
 8003aac:	4b4b      	ldr	r3, [pc, #300]	; (8003bdc <Load_EEPROM+0x310>)
 8003aae:	2214      	movs	r2, #20
 8003ab0:	809a      	strh	r2, [r3, #4]
 8003ab2:	e012      	b.n	8003ada <Load_EEPROM+0x20e>
 8003ab4:	4b49      	ldr	r3, [pc, #292]	; (8003bdc <Load_EEPROM+0x310>)
 8003ab6:	220a      	movs	r2, #10
 8003ab8:	809a      	strh	r2, [r3, #4]
 8003aba:	e00e      	b.n	8003ada <Load_EEPROM+0x20e>
 8003abc:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <Load_EEPROM+0x310>)
 8003abe:	2205      	movs	r2, #5
 8003ac0:	809a      	strh	r2, [r3, #4]
 8003ac2:	e00a      	b.n	8003ada <Load_EEPROM+0x20e>
 8003ac4:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <Load_EEPROM+0x310>)
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	809a      	strh	r2, [r3, #4]
 8003aca:	e006      	b.n	8003ada <Load_EEPROM+0x20e>
 8003acc:	4b43      	ldr	r3, [pc, #268]	; (8003bdc <Load_EEPROM+0x310>)
 8003ace:	2202      	movs	r2, #2
 8003ad0:	809a      	strh	r2, [r3, #4]
 8003ad2:	e002      	b.n	8003ada <Load_EEPROM+0x20e>
 8003ad4:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <Load_EEPROM+0x310>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	809a      	strh	r2, [r3, #4]
 8003ada:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[3], perMsg[RTC_MSG]);
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	2b0a      	cmp	r3, #10
 8003ae2:	d847      	bhi.n	8003b74 <Load_EEPROM+0x2a8>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <Load_EEPROM+0x220>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b23 	.word	0x08003b23
 8003af4:	08003b2d 	.word	0x08003b2d
 8003af8:	08003b35 	.word	0x08003b35
 8003afc:	08003b3d 	.word	0x08003b3d
 8003b00:	08003b45 	.word	0x08003b45
 8003b04:	08003b4d 	.word	0x08003b4d
 8003b08:	08003b55 	.word	0x08003b55
 8003b0c:	08003b5d 	.word	0x08003b5d
 8003b10:	08003b65 	.word	0x08003b65
 8003b14:	08003b6d 	.word	0x08003b6d
 8003b18:	4b30      	ldr	r3, [pc, #192]	; (8003bdc <Load_EEPROM+0x310>)
 8003b1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b1e:	80da      	strh	r2, [r3, #6]
 8003b20:	e02b      	b.n	8003b7a <Load_EEPROM+0x2ae>
 8003b22:	4b2e      	ldr	r3, [pc, #184]	; (8003bdc <Load_EEPROM+0x310>)
 8003b24:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b28:	80da      	strh	r2, [r3, #6]
 8003b2a:	e026      	b.n	8003b7a <Load_EEPROM+0x2ae>
 8003b2c:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <Load_EEPROM+0x310>)
 8003b2e:	22c8      	movs	r2, #200	; 0xc8
 8003b30:	80da      	strh	r2, [r3, #6]
 8003b32:	e022      	b.n	8003b7a <Load_EEPROM+0x2ae>
 8003b34:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <Load_EEPROM+0x310>)
 8003b36:	2264      	movs	r2, #100	; 0x64
 8003b38:	80da      	strh	r2, [r3, #6]
 8003b3a:	e01e      	b.n	8003b7a <Load_EEPROM+0x2ae>
 8003b3c:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <Load_EEPROM+0x310>)
 8003b3e:	2232      	movs	r2, #50	; 0x32
 8003b40:	80da      	strh	r2, [r3, #6]
 8003b42:	e01a      	b.n	8003b7a <Load_EEPROM+0x2ae>
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <Load_EEPROM+0x310>)
 8003b46:	2228      	movs	r2, #40	; 0x28
 8003b48:	80da      	strh	r2, [r3, #6]
 8003b4a:	e016      	b.n	8003b7a <Load_EEPROM+0x2ae>
 8003b4c:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <Load_EEPROM+0x310>)
 8003b4e:	2214      	movs	r2, #20
 8003b50:	80da      	strh	r2, [r3, #6]
 8003b52:	e012      	b.n	8003b7a <Load_EEPROM+0x2ae>
 8003b54:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <Load_EEPROM+0x310>)
 8003b56:	220a      	movs	r2, #10
 8003b58:	80da      	strh	r2, [r3, #6]
 8003b5a:	e00e      	b.n	8003b7a <Load_EEPROM+0x2ae>
 8003b5c:	4b1f      	ldr	r3, [pc, #124]	; (8003bdc <Load_EEPROM+0x310>)
 8003b5e:	2205      	movs	r2, #5
 8003b60:	80da      	strh	r2, [r3, #6]
 8003b62:	e00a      	b.n	8003b7a <Load_EEPROM+0x2ae>
 8003b64:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <Load_EEPROM+0x310>)
 8003b66:	2203      	movs	r2, #3
 8003b68:	80da      	strh	r2, [r3, #6]
 8003b6a:	e006      	b.n	8003b7a <Load_EEPROM+0x2ae>
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <Load_EEPROM+0x310>)
 8003b6e:	2202      	movs	r2, #2
 8003b70:	80da      	strh	r2, [r3, #6]
 8003b72:	e002      	b.n	8003b7a <Load_EEPROM+0x2ae>
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <Load_EEPROM+0x310>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	80da      	strh	r2, [r3, #6]
 8003b7a:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[4], perMsg[VERIFY_MSG]);
 8003b7c:	7c3b      	ldrb	r3, [r7, #16]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	2b0a      	cmp	r3, #10
 8003b82:	d849      	bhi.n	8003c18 <Load_EEPROM+0x34c>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <Load_EEPROM+0x2c0>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bc3 	.word	0x08003bc3
 8003b94:	08003bcd 	.word	0x08003bcd
 8003b98:	08003bd5 	.word	0x08003bd5
 8003b9c:	08003be1 	.word	0x08003be1
 8003ba0:	08003be9 	.word	0x08003be9
 8003ba4:	08003bf1 	.word	0x08003bf1
 8003ba8:	08003bf9 	.word	0x08003bf9
 8003bac:	08003c01 	.word	0x08003c01
 8003bb0:	08003c09 	.word	0x08003c09
 8003bb4:	08003c11 	.word	0x08003c11
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <Load_EEPROM+0x310>)
 8003bba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bbe:	811a      	strh	r2, [r3, #8]
 8003bc0:	e02d      	b.n	8003c1e <Load_EEPROM+0x352>
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <Load_EEPROM+0x310>)
 8003bc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bc8:	811a      	strh	r2, [r3, #8]
 8003bca:	e028      	b.n	8003c1e <Load_EEPROM+0x352>
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <Load_EEPROM+0x310>)
 8003bce:	22c8      	movs	r2, #200	; 0xc8
 8003bd0:	811a      	strh	r2, [r3, #8]
 8003bd2:	e024      	b.n	8003c1e <Load_EEPROM+0x352>
 8003bd4:	4b01      	ldr	r3, [pc, #4]	; (8003bdc <Load_EEPROM+0x310>)
 8003bd6:	2264      	movs	r2, #100	; 0x64
 8003bd8:	811a      	strh	r2, [r3, #8]
 8003bda:	e020      	b.n	8003c1e <Load_EEPROM+0x352>
 8003bdc:	20002c04 	.word	0x20002c04
 8003be0:	4ba7      	ldr	r3, [pc, #668]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003be2:	2232      	movs	r2, #50	; 0x32
 8003be4:	811a      	strh	r2, [r3, #8]
 8003be6:	e01a      	b.n	8003c1e <Load_EEPROM+0x352>
 8003be8:	4ba5      	ldr	r3, [pc, #660]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003bea:	2228      	movs	r2, #40	; 0x28
 8003bec:	811a      	strh	r2, [r3, #8]
 8003bee:	e016      	b.n	8003c1e <Load_EEPROM+0x352>
 8003bf0:	4ba3      	ldr	r3, [pc, #652]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003bf2:	2214      	movs	r2, #20
 8003bf4:	811a      	strh	r2, [r3, #8]
 8003bf6:	e012      	b.n	8003c1e <Load_EEPROM+0x352>
 8003bf8:	4ba1      	ldr	r3, [pc, #644]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003bfa:	220a      	movs	r2, #10
 8003bfc:	811a      	strh	r2, [r3, #8]
 8003bfe:	e00e      	b.n	8003c1e <Load_EEPROM+0x352>
 8003c00:	4b9f      	ldr	r3, [pc, #636]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003c02:	2205      	movs	r2, #5
 8003c04:	811a      	strh	r2, [r3, #8]
 8003c06:	e00a      	b.n	8003c1e <Load_EEPROM+0x352>
 8003c08:	4b9d      	ldr	r3, [pc, #628]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	811a      	strh	r2, [r3, #8]
 8003c0e:	e006      	b.n	8003c1e <Load_EEPROM+0x352>
 8003c10:	4b9b      	ldr	r3, [pc, #620]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003c12:	2202      	movs	r2, #2
 8003c14:	811a      	strh	r2, [r3, #8]
 8003c16:	e002      	b.n	8003c1e <Load_EEPROM+0x352>
 8003c18:	4b99      	ldr	r3, [pc, #612]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	811a      	strh	r2, [r3, #8]
 8003c1e:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[5], perMsg[ECU_SAVE]);
 8003c20:	7c7b      	ldrb	r3, [r7, #17]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	2b0a      	cmp	r3, #10
 8003c26:	d847      	bhi.n	8003cb8 <Load_EEPROM+0x3ec>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <Load_EEPROM+0x364>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003c5d 	.word	0x08003c5d
 8003c34:	08003c67 	.word	0x08003c67
 8003c38:	08003c71 	.word	0x08003c71
 8003c3c:	08003c79 	.word	0x08003c79
 8003c40:	08003c81 	.word	0x08003c81
 8003c44:	08003c89 	.word	0x08003c89
 8003c48:	08003c91 	.word	0x08003c91
 8003c4c:	08003c99 	.word	0x08003c99
 8003c50:	08003ca1 	.word	0x08003ca1
 8003c54:	08003ca9 	.word	0x08003ca9
 8003c58:	08003cb1 	.word	0x08003cb1
 8003c5c:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c62:	819a      	strh	r2, [r3, #12]
 8003c64:	e02b      	b.n	8003cbe <Load_EEPROM+0x3f2>
 8003c66:	4b86      	ldr	r3, [pc, #536]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003c68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c6c:	819a      	strh	r2, [r3, #12]
 8003c6e:	e026      	b.n	8003cbe <Load_EEPROM+0x3f2>
 8003c70:	4b83      	ldr	r3, [pc, #524]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003c72:	22c8      	movs	r2, #200	; 0xc8
 8003c74:	819a      	strh	r2, [r3, #12]
 8003c76:	e022      	b.n	8003cbe <Load_EEPROM+0x3f2>
 8003c78:	4b81      	ldr	r3, [pc, #516]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003c7a:	2264      	movs	r2, #100	; 0x64
 8003c7c:	819a      	strh	r2, [r3, #12]
 8003c7e:	e01e      	b.n	8003cbe <Load_EEPROM+0x3f2>
 8003c80:	4b7f      	ldr	r3, [pc, #508]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003c82:	2232      	movs	r2, #50	; 0x32
 8003c84:	819a      	strh	r2, [r3, #12]
 8003c86:	e01a      	b.n	8003cbe <Load_EEPROM+0x3f2>
 8003c88:	4b7d      	ldr	r3, [pc, #500]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003c8a:	2228      	movs	r2, #40	; 0x28
 8003c8c:	819a      	strh	r2, [r3, #12]
 8003c8e:	e016      	b.n	8003cbe <Load_EEPROM+0x3f2>
 8003c90:	4b7b      	ldr	r3, [pc, #492]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003c92:	2214      	movs	r2, #20
 8003c94:	819a      	strh	r2, [r3, #12]
 8003c96:	e012      	b.n	8003cbe <Load_EEPROM+0x3f2>
 8003c98:	4b79      	ldr	r3, [pc, #484]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003c9a:	220a      	movs	r2, #10
 8003c9c:	819a      	strh	r2, [r3, #12]
 8003c9e:	e00e      	b.n	8003cbe <Load_EEPROM+0x3f2>
 8003ca0:	4b77      	ldr	r3, [pc, #476]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003ca2:	2205      	movs	r2, #5
 8003ca4:	819a      	strh	r2, [r3, #12]
 8003ca6:	e00a      	b.n	8003cbe <Load_EEPROM+0x3f2>
 8003ca8:	4b75      	ldr	r3, [pc, #468]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003caa:	2203      	movs	r2, #3
 8003cac:	819a      	strh	r2, [r3, #12]
 8003cae:	e006      	b.n	8003cbe <Load_EEPROM+0x3f2>
 8003cb0:	4b73      	ldr	r3, [pc, #460]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	819a      	strh	r2, [r3, #12]
 8003cb6:	e002      	b.n	8003cbe <Load_EEPROM+0x3f2>
 8003cb8:	4b71      	ldr	r3, [pc, #452]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	819a      	strh	r2, [r3, #12]
 8003cbe:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[6], perMsg[PDM_SAVE]);
 8003cc0:	7cbb      	ldrb	r3, [r7, #18]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	2b0a      	cmp	r3, #10
 8003cc6:	d847      	bhi.n	8003d58 <Load_EEPROM+0x48c>
 8003cc8:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <Load_EEPROM+0x404>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003cfd 	.word	0x08003cfd
 8003cd4:	08003d07 	.word	0x08003d07
 8003cd8:	08003d11 	.word	0x08003d11
 8003cdc:	08003d19 	.word	0x08003d19
 8003ce0:	08003d21 	.word	0x08003d21
 8003ce4:	08003d29 	.word	0x08003d29
 8003ce8:	08003d31 	.word	0x08003d31
 8003cec:	08003d39 	.word	0x08003d39
 8003cf0:	08003d41 	.word	0x08003d41
 8003cf4:	08003d49 	.word	0x08003d49
 8003cf8:	08003d51 	.word	0x08003d51
 8003cfc:	4b60      	ldr	r3, [pc, #384]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d02:	81da      	strh	r2, [r3, #14]
 8003d04:	e02b      	b.n	8003d5e <Load_EEPROM+0x492>
 8003d06:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003d08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d0c:	81da      	strh	r2, [r3, #14]
 8003d0e:	e026      	b.n	8003d5e <Load_EEPROM+0x492>
 8003d10:	4b5b      	ldr	r3, [pc, #364]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003d12:	22c8      	movs	r2, #200	; 0xc8
 8003d14:	81da      	strh	r2, [r3, #14]
 8003d16:	e022      	b.n	8003d5e <Load_EEPROM+0x492>
 8003d18:	4b59      	ldr	r3, [pc, #356]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003d1a:	2264      	movs	r2, #100	; 0x64
 8003d1c:	81da      	strh	r2, [r3, #14]
 8003d1e:	e01e      	b.n	8003d5e <Load_EEPROM+0x492>
 8003d20:	4b57      	ldr	r3, [pc, #348]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003d22:	2232      	movs	r2, #50	; 0x32
 8003d24:	81da      	strh	r2, [r3, #14]
 8003d26:	e01a      	b.n	8003d5e <Load_EEPROM+0x492>
 8003d28:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003d2a:	2228      	movs	r2, #40	; 0x28
 8003d2c:	81da      	strh	r2, [r3, #14]
 8003d2e:	e016      	b.n	8003d5e <Load_EEPROM+0x492>
 8003d30:	4b53      	ldr	r3, [pc, #332]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003d32:	2214      	movs	r2, #20
 8003d34:	81da      	strh	r2, [r3, #14]
 8003d36:	e012      	b.n	8003d5e <Load_EEPROM+0x492>
 8003d38:	4b51      	ldr	r3, [pc, #324]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003d3a:	220a      	movs	r2, #10
 8003d3c:	81da      	strh	r2, [r3, #14]
 8003d3e:	e00e      	b.n	8003d5e <Load_EEPROM+0x492>
 8003d40:	4b4f      	ldr	r3, [pc, #316]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003d42:	2205      	movs	r2, #5
 8003d44:	81da      	strh	r2, [r3, #14]
 8003d46:	e00a      	b.n	8003d5e <Load_EEPROM+0x492>
 8003d48:	4b4d      	ldr	r3, [pc, #308]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	81da      	strh	r2, [r3, #14]
 8003d4e:	e006      	b.n	8003d5e <Load_EEPROM+0x492>
 8003d50:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003d52:	2202      	movs	r2, #2
 8003d54:	81da      	strh	r2, [r3, #14]
 8003d56:	e002      	b.n	8003d5e <Load_EEPROM+0x492>
 8003d58:	4b49      	ldr	r3, [pc, #292]	; (8003e80 <Load_EEPROM+0x5b4>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	81da      	strh	r2, [r3, #14]
 8003d5e:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[7], perCAN[ANALOG_1_4]);
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	2b0a      	cmp	r3, #10
 8003d66:	d847      	bhi.n	8003df8 <Load_EEPROM+0x52c>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <Load_EEPROM+0x4a4>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d9d 	.word	0x08003d9d
 8003d74:	08003da7 	.word	0x08003da7
 8003d78:	08003db1 	.word	0x08003db1
 8003d7c:	08003db9 	.word	0x08003db9
 8003d80:	08003dc1 	.word	0x08003dc1
 8003d84:	08003dc9 	.word	0x08003dc9
 8003d88:	08003dd1 	.word	0x08003dd1
 8003d8c:	08003dd9 	.word	0x08003dd9
 8003d90:	08003de1 	.word	0x08003de1
 8003d94:	08003de9 	.word	0x08003de9
 8003d98:	08003df1 	.word	0x08003df1
 8003d9c:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003da2:	801a      	strh	r2, [r3, #0]
 8003da4:	e02b      	b.n	8003dfe <Load_EEPROM+0x532>
 8003da6:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003da8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	e026      	b.n	8003dfe <Load_EEPROM+0x532>
 8003db0:	4b34      	ldr	r3, [pc, #208]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003db2:	22c8      	movs	r2, #200	; 0xc8
 8003db4:	801a      	strh	r2, [r3, #0]
 8003db6:	e022      	b.n	8003dfe <Load_EEPROM+0x532>
 8003db8:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003dba:	2264      	movs	r2, #100	; 0x64
 8003dbc:	801a      	strh	r2, [r3, #0]
 8003dbe:	e01e      	b.n	8003dfe <Load_EEPROM+0x532>
 8003dc0:	4b30      	ldr	r3, [pc, #192]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003dc2:	2232      	movs	r2, #50	; 0x32
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	e01a      	b.n	8003dfe <Load_EEPROM+0x532>
 8003dc8:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003dca:	2228      	movs	r2, #40	; 0x28
 8003dcc:	801a      	strh	r2, [r3, #0]
 8003dce:	e016      	b.n	8003dfe <Load_EEPROM+0x532>
 8003dd0:	4b2c      	ldr	r3, [pc, #176]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003dd2:	2214      	movs	r2, #20
 8003dd4:	801a      	strh	r2, [r3, #0]
 8003dd6:	e012      	b.n	8003dfe <Load_EEPROM+0x532>
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003dda:	220a      	movs	r2, #10
 8003ddc:	801a      	strh	r2, [r3, #0]
 8003dde:	e00e      	b.n	8003dfe <Load_EEPROM+0x532>
 8003de0:	4b28      	ldr	r3, [pc, #160]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003de2:	2205      	movs	r2, #5
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	e00a      	b.n	8003dfe <Load_EEPROM+0x532>
 8003de8:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003dea:	2203      	movs	r2, #3
 8003dec:	801a      	strh	r2, [r3, #0]
 8003dee:	e006      	b.n	8003dfe <Load_EEPROM+0x532>
 8003df0:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003df2:	2202      	movs	r2, #2
 8003df4:	801a      	strh	r2, [r3, #0]
 8003df6:	e002      	b.n	8003dfe <Load_EEPROM+0x532>
 8003df8:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	801a      	strh	r2, [r3, #0]
 8003dfe:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[8], perCAN[ANALOG_5_8]);
 8003e00:	7d3b      	ldrb	r3, [r7, #20]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	2b0a      	cmp	r3, #10
 8003e06:	d84b      	bhi.n	8003ea0 <Load_EEPROM+0x5d4>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <Load_EEPROM+0x544>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e3d 	.word	0x08003e3d
 8003e14:	08003e47 	.word	0x08003e47
 8003e18:	08003e51 	.word	0x08003e51
 8003e1c:	08003e59 	.word	0x08003e59
 8003e20:	08003e61 	.word	0x08003e61
 8003e24:	08003e69 	.word	0x08003e69
 8003e28:	08003e71 	.word	0x08003e71
 8003e2c:	08003e79 	.word	0x08003e79
 8003e30:	08003e89 	.word	0x08003e89
 8003e34:	08003e91 	.word	0x08003e91
 8003e38:	08003e99 	.word	0x08003e99
 8003e3c:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e42:	805a      	strh	r2, [r3, #2]
 8003e44:	e02f      	b.n	8003ea6 <Load_EEPROM+0x5da>
 8003e46:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003e48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e4c:	805a      	strh	r2, [r3, #2]
 8003e4e:	e02a      	b.n	8003ea6 <Load_EEPROM+0x5da>
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003e52:	22c8      	movs	r2, #200	; 0xc8
 8003e54:	805a      	strh	r2, [r3, #2]
 8003e56:	e026      	b.n	8003ea6 <Load_EEPROM+0x5da>
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003e5a:	2264      	movs	r2, #100	; 0x64
 8003e5c:	805a      	strh	r2, [r3, #2]
 8003e5e:	e022      	b.n	8003ea6 <Load_EEPROM+0x5da>
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003e62:	2232      	movs	r2, #50	; 0x32
 8003e64:	805a      	strh	r2, [r3, #2]
 8003e66:	e01e      	b.n	8003ea6 <Load_EEPROM+0x5da>
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003e6a:	2228      	movs	r2, #40	; 0x28
 8003e6c:	805a      	strh	r2, [r3, #2]
 8003e6e:	e01a      	b.n	8003ea6 <Load_EEPROM+0x5da>
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003e72:	2214      	movs	r2, #20
 8003e74:	805a      	strh	r2, [r3, #2]
 8003e76:	e016      	b.n	8003ea6 <Load_EEPROM+0x5da>
 8003e78:	4b02      	ldr	r3, [pc, #8]	; (8003e84 <Load_EEPROM+0x5b8>)
 8003e7a:	220a      	movs	r2, #10
 8003e7c:	805a      	strh	r2, [r3, #2]
 8003e7e:	e012      	b.n	8003ea6 <Load_EEPROM+0x5da>
 8003e80:	20002c04 	.word	0x20002c04
 8003e84:	200018fc 	.word	0x200018fc
 8003e88:	4b98      	ldr	r3, [pc, #608]	; (80040ec <Load_EEPROM+0x820>)
 8003e8a:	2205      	movs	r2, #5
 8003e8c:	805a      	strh	r2, [r3, #2]
 8003e8e:	e00a      	b.n	8003ea6 <Load_EEPROM+0x5da>
 8003e90:	4b96      	ldr	r3, [pc, #600]	; (80040ec <Load_EEPROM+0x820>)
 8003e92:	2203      	movs	r2, #3
 8003e94:	805a      	strh	r2, [r3, #2]
 8003e96:	e006      	b.n	8003ea6 <Load_EEPROM+0x5da>
 8003e98:	4b94      	ldr	r3, [pc, #592]	; (80040ec <Load_EEPROM+0x820>)
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	805a      	strh	r2, [r3, #2]
 8003e9e:	e002      	b.n	8003ea6 <Load_EEPROM+0x5da>
 8003ea0:	4b92      	ldr	r3, [pc, #584]	; (80040ec <Load_EEPROM+0x820>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	805a      	strh	r2, [r3, #2]
 8003ea6:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[9], perCAN[ANALOG_9_12]);
 8003ea8:	7d7b      	ldrb	r3, [r7, #21]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	2b0a      	cmp	r3, #10
 8003eae:	d847      	bhi.n	8003f40 <Load_EEPROM+0x674>
 8003eb0:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <Load_EEPROM+0x5ec>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003ee5 	.word	0x08003ee5
 8003ebc:	08003eef 	.word	0x08003eef
 8003ec0:	08003ef9 	.word	0x08003ef9
 8003ec4:	08003f01 	.word	0x08003f01
 8003ec8:	08003f09 	.word	0x08003f09
 8003ecc:	08003f11 	.word	0x08003f11
 8003ed0:	08003f19 	.word	0x08003f19
 8003ed4:	08003f21 	.word	0x08003f21
 8003ed8:	08003f29 	.word	0x08003f29
 8003edc:	08003f31 	.word	0x08003f31
 8003ee0:	08003f39 	.word	0x08003f39
 8003ee4:	4b81      	ldr	r3, [pc, #516]	; (80040ec <Load_EEPROM+0x820>)
 8003ee6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eea:	809a      	strh	r2, [r3, #4]
 8003eec:	e02b      	b.n	8003f46 <Load_EEPROM+0x67a>
 8003eee:	4b7f      	ldr	r3, [pc, #508]	; (80040ec <Load_EEPROM+0x820>)
 8003ef0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ef4:	809a      	strh	r2, [r3, #4]
 8003ef6:	e026      	b.n	8003f46 <Load_EEPROM+0x67a>
 8003ef8:	4b7c      	ldr	r3, [pc, #496]	; (80040ec <Load_EEPROM+0x820>)
 8003efa:	22c8      	movs	r2, #200	; 0xc8
 8003efc:	809a      	strh	r2, [r3, #4]
 8003efe:	e022      	b.n	8003f46 <Load_EEPROM+0x67a>
 8003f00:	4b7a      	ldr	r3, [pc, #488]	; (80040ec <Load_EEPROM+0x820>)
 8003f02:	2264      	movs	r2, #100	; 0x64
 8003f04:	809a      	strh	r2, [r3, #4]
 8003f06:	e01e      	b.n	8003f46 <Load_EEPROM+0x67a>
 8003f08:	4b78      	ldr	r3, [pc, #480]	; (80040ec <Load_EEPROM+0x820>)
 8003f0a:	2232      	movs	r2, #50	; 0x32
 8003f0c:	809a      	strh	r2, [r3, #4]
 8003f0e:	e01a      	b.n	8003f46 <Load_EEPROM+0x67a>
 8003f10:	4b76      	ldr	r3, [pc, #472]	; (80040ec <Load_EEPROM+0x820>)
 8003f12:	2228      	movs	r2, #40	; 0x28
 8003f14:	809a      	strh	r2, [r3, #4]
 8003f16:	e016      	b.n	8003f46 <Load_EEPROM+0x67a>
 8003f18:	4b74      	ldr	r3, [pc, #464]	; (80040ec <Load_EEPROM+0x820>)
 8003f1a:	2214      	movs	r2, #20
 8003f1c:	809a      	strh	r2, [r3, #4]
 8003f1e:	e012      	b.n	8003f46 <Load_EEPROM+0x67a>
 8003f20:	4b72      	ldr	r3, [pc, #456]	; (80040ec <Load_EEPROM+0x820>)
 8003f22:	220a      	movs	r2, #10
 8003f24:	809a      	strh	r2, [r3, #4]
 8003f26:	e00e      	b.n	8003f46 <Load_EEPROM+0x67a>
 8003f28:	4b70      	ldr	r3, [pc, #448]	; (80040ec <Load_EEPROM+0x820>)
 8003f2a:	2205      	movs	r2, #5
 8003f2c:	809a      	strh	r2, [r3, #4]
 8003f2e:	e00a      	b.n	8003f46 <Load_EEPROM+0x67a>
 8003f30:	4b6e      	ldr	r3, [pc, #440]	; (80040ec <Load_EEPROM+0x820>)
 8003f32:	2203      	movs	r2, #3
 8003f34:	809a      	strh	r2, [r3, #4]
 8003f36:	e006      	b.n	8003f46 <Load_EEPROM+0x67a>
 8003f38:	4b6c      	ldr	r3, [pc, #432]	; (80040ec <Load_EEPROM+0x820>)
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	809a      	strh	r2, [r3, #4]
 8003f3e:	e002      	b.n	8003f46 <Load_EEPROM+0x67a>
 8003f40:	4b6a      	ldr	r3, [pc, #424]	; (80040ec <Load_EEPROM+0x820>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	809a      	strh	r2, [r3, #4]
 8003f46:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[10], perCAN[RTC_MSG]);
 8003f48:	7dbb      	ldrb	r3, [r7, #22]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	2b0a      	cmp	r3, #10
 8003f4e:	d847      	bhi.n	8003fe0 <Load_EEPROM+0x714>
 8003f50:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <Load_EEPROM+0x68c>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003f85 	.word	0x08003f85
 8003f5c:	08003f8f 	.word	0x08003f8f
 8003f60:	08003f99 	.word	0x08003f99
 8003f64:	08003fa1 	.word	0x08003fa1
 8003f68:	08003fa9 	.word	0x08003fa9
 8003f6c:	08003fb1 	.word	0x08003fb1
 8003f70:	08003fb9 	.word	0x08003fb9
 8003f74:	08003fc1 	.word	0x08003fc1
 8003f78:	08003fc9 	.word	0x08003fc9
 8003f7c:	08003fd1 	.word	0x08003fd1
 8003f80:	08003fd9 	.word	0x08003fd9
 8003f84:	4b59      	ldr	r3, [pc, #356]	; (80040ec <Load_EEPROM+0x820>)
 8003f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f8a:	80da      	strh	r2, [r3, #6]
 8003f8c:	e02b      	b.n	8003fe6 <Load_EEPROM+0x71a>
 8003f8e:	4b57      	ldr	r3, [pc, #348]	; (80040ec <Load_EEPROM+0x820>)
 8003f90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f94:	80da      	strh	r2, [r3, #6]
 8003f96:	e026      	b.n	8003fe6 <Load_EEPROM+0x71a>
 8003f98:	4b54      	ldr	r3, [pc, #336]	; (80040ec <Load_EEPROM+0x820>)
 8003f9a:	22c8      	movs	r2, #200	; 0xc8
 8003f9c:	80da      	strh	r2, [r3, #6]
 8003f9e:	e022      	b.n	8003fe6 <Load_EEPROM+0x71a>
 8003fa0:	4b52      	ldr	r3, [pc, #328]	; (80040ec <Load_EEPROM+0x820>)
 8003fa2:	2264      	movs	r2, #100	; 0x64
 8003fa4:	80da      	strh	r2, [r3, #6]
 8003fa6:	e01e      	b.n	8003fe6 <Load_EEPROM+0x71a>
 8003fa8:	4b50      	ldr	r3, [pc, #320]	; (80040ec <Load_EEPROM+0x820>)
 8003faa:	2232      	movs	r2, #50	; 0x32
 8003fac:	80da      	strh	r2, [r3, #6]
 8003fae:	e01a      	b.n	8003fe6 <Load_EEPROM+0x71a>
 8003fb0:	4b4e      	ldr	r3, [pc, #312]	; (80040ec <Load_EEPROM+0x820>)
 8003fb2:	2228      	movs	r2, #40	; 0x28
 8003fb4:	80da      	strh	r2, [r3, #6]
 8003fb6:	e016      	b.n	8003fe6 <Load_EEPROM+0x71a>
 8003fb8:	4b4c      	ldr	r3, [pc, #304]	; (80040ec <Load_EEPROM+0x820>)
 8003fba:	2214      	movs	r2, #20
 8003fbc:	80da      	strh	r2, [r3, #6]
 8003fbe:	e012      	b.n	8003fe6 <Load_EEPROM+0x71a>
 8003fc0:	4b4a      	ldr	r3, [pc, #296]	; (80040ec <Load_EEPROM+0x820>)
 8003fc2:	220a      	movs	r2, #10
 8003fc4:	80da      	strh	r2, [r3, #6]
 8003fc6:	e00e      	b.n	8003fe6 <Load_EEPROM+0x71a>
 8003fc8:	4b48      	ldr	r3, [pc, #288]	; (80040ec <Load_EEPROM+0x820>)
 8003fca:	2205      	movs	r2, #5
 8003fcc:	80da      	strh	r2, [r3, #6]
 8003fce:	e00a      	b.n	8003fe6 <Load_EEPROM+0x71a>
 8003fd0:	4b46      	ldr	r3, [pc, #280]	; (80040ec <Load_EEPROM+0x820>)
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	80da      	strh	r2, [r3, #6]
 8003fd6:	e006      	b.n	8003fe6 <Load_EEPROM+0x71a>
 8003fd8:	4b44      	ldr	r3, [pc, #272]	; (80040ec <Load_EEPROM+0x820>)
 8003fda:	2202      	movs	r2, #2
 8003fdc:	80da      	strh	r2, [r3, #6]
 8003fde:	e002      	b.n	8003fe6 <Load_EEPROM+0x71a>
 8003fe0:	4b42      	ldr	r3, [pc, #264]	; (80040ec <Load_EEPROM+0x820>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	80da      	strh	r2, [r3, #6]
 8003fe6:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[10], perCAN[VERIFY_MSG]);
 8003fe8:	7dbb      	ldrb	r3, [r7, #22]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	2b0a      	cmp	r3, #10
 8003fee:	d847      	bhi.n	8004080 <Load_EEPROM+0x7b4>
 8003ff0:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <Load_EEPROM+0x72c>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	0800402f 	.word	0x0800402f
 8004000:	08004039 	.word	0x08004039
 8004004:	08004041 	.word	0x08004041
 8004008:	08004049 	.word	0x08004049
 800400c:	08004051 	.word	0x08004051
 8004010:	08004059 	.word	0x08004059
 8004014:	08004061 	.word	0x08004061
 8004018:	08004069 	.word	0x08004069
 800401c:	08004071 	.word	0x08004071
 8004020:	08004079 	.word	0x08004079
 8004024:	4b31      	ldr	r3, [pc, #196]	; (80040ec <Load_EEPROM+0x820>)
 8004026:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800402a:	811a      	strh	r2, [r3, #8]
 800402c:	e02b      	b.n	8004086 <Load_EEPROM+0x7ba>
 800402e:	4b2f      	ldr	r3, [pc, #188]	; (80040ec <Load_EEPROM+0x820>)
 8004030:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004034:	811a      	strh	r2, [r3, #8]
 8004036:	e026      	b.n	8004086 <Load_EEPROM+0x7ba>
 8004038:	4b2c      	ldr	r3, [pc, #176]	; (80040ec <Load_EEPROM+0x820>)
 800403a:	22c8      	movs	r2, #200	; 0xc8
 800403c:	811a      	strh	r2, [r3, #8]
 800403e:	e022      	b.n	8004086 <Load_EEPROM+0x7ba>
 8004040:	4b2a      	ldr	r3, [pc, #168]	; (80040ec <Load_EEPROM+0x820>)
 8004042:	2264      	movs	r2, #100	; 0x64
 8004044:	811a      	strh	r2, [r3, #8]
 8004046:	e01e      	b.n	8004086 <Load_EEPROM+0x7ba>
 8004048:	4b28      	ldr	r3, [pc, #160]	; (80040ec <Load_EEPROM+0x820>)
 800404a:	2232      	movs	r2, #50	; 0x32
 800404c:	811a      	strh	r2, [r3, #8]
 800404e:	e01a      	b.n	8004086 <Load_EEPROM+0x7ba>
 8004050:	4b26      	ldr	r3, [pc, #152]	; (80040ec <Load_EEPROM+0x820>)
 8004052:	2228      	movs	r2, #40	; 0x28
 8004054:	811a      	strh	r2, [r3, #8]
 8004056:	e016      	b.n	8004086 <Load_EEPROM+0x7ba>
 8004058:	4b24      	ldr	r3, [pc, #144]	; (80040ec <Load_EEPROM+0x820>)
 800405a:	2214      	movs	r2, #20
 800405c:	811a      	strh	r2, [r3, #8]
 800405e:	e012      	b.n	8004086 <Load_EEPROM+0x7ba>
 8004060:	4b22      	ldr	r3, [pc, #136]	; (80040ec <Load_EEPROM+0x820>)
 8004062:	220a      	movs	r2, #10
 8004064:	811a      	strh	r2, [r3, #8]
 8004066:	e00e      	b.n	8004086 <Load_EEPROM+0x7ba>
 8004068:	4b20      	ldr	r3, [pc, #128]	; (80040ec <Load_EEPROM+0x820>)
 800406a:	2205      	movs	r2, #5
 800406c:	811a      	strh	r2, [r3, #8]
 800406e:	e00a      	b.n	8004086 <Load_EEPROM+0x7ba>
 8004070:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <Load_EEPROM+0x820>)
 8004072:	2203      	movs	r2, #3
 8004074:	811a      	strh	r2, [r3, #8]
 8004076:	e006      	b.n	8004086 <Load_EEPROM+0x7ba>
 8004078:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <Load_EEPROM+0x820>)
 800407a:	2202      	movs	r2, #2
 800407c:	811a      	strh	r2, [r3, #8]
 800407e:	e002      	b.n	8004086 <Load_EEPROM+0x7ba>
 8004080:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <Load_EEPROM+0x820>)
 8004082:	2200      	movs	r2, #0
 8004084:	811a      	strh	r2, [r3, #8]
 8004086:	bf00      	nop

	inputConfig 	 = buffer[12];
 8004088:	7e3a      	ldrb	r2, [r7, #24]
 800408a:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <Load_EEPROM+0x824>)
 800408c:	701a      	strb	r2, [r3, #0]
	thresholdBeacon	 = buffer[13] << 8;
 800408e:	7e7b      	ldrb	r3, [r7, #25]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	b21a      	sxth	r2, r3
 8004094:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <Load_EEPROM+0x828>)
 8004096:	801a      	strh	r2, [r3, #0]
	thresholdBeacon |= buffer[14] & 0xff;
 8004098:	7ebb      	ldrb	r3, [r7, #26]
 800409a:	b21a      	sxth	r2, r3
 800409c:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <Load_EEPROM+0x828>)
 800409e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	b21a      	sxth	r2, r3
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <Load_EEPROM+0x828>)
 80040a8:	801a      	strh	r2, [r3, #0]
	thresholdRPM	 = buffer[15] << 8;
 80040aa:	7efb      	ldrb	r3, [r7, #27]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	b21a      	sxth	r2, r3
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <Load_EEPROM+0x82c>)
 80040b2:	801a      	strh	r2, [r3, #0]
	thresholdRPM	|= buffer[16] & 0xff;
 80040b4:	7f3b      	ldrb	r3, [r7, #28]
 80040b6:	b21a      	sxth	r2, r3
 80040b8:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <Load_EEPROM+0x82c>)
 80040ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040be:	4313      	orrs	r3, r2
 80040c0:	b21a      	sxth	r2, r3
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <Load_EEPROM+0x82c>)
 80040c4:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	 = buffer[17] << 8;
 80040c6:	7f7b      	ldrb	r3, [r7, #29]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	b21a      	sxth	r2, r3
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <Load_EEPROM+0x830>)
 80040ce:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	|= buffer[18] & 0xff;
 80040d0:	7fbb      	ldrb	r3, [r7, #30]
 80040d2:	b21a      	sxth	r2, r3
 80040d4:	4b09      	ldr	r3, [pc, #36]	; (80040fc <Load_EEPROM+0x830>)
 80040d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040da:	4313      	orrs	r3, r2
 80040dc:	b21a      	sxth	r2, r3
 80040de:	4b07      	ldr	r3, [pc, #28]	; (80040fc <Load_EEPROM+0x830>)
 80040e0:	801a      	strh	r2, [r3, #0]

	return retVal;
 80040e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3720      	adds	r7, #32
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	200018fc 	.word	0x200018fc
 80040f0:	200018ae 	.word	0x200018ae
 80040f4:	200018f8 	.word	0x200018f8
 80040f8:	2000069a 	.word	0x2000069a
 80040fc:	20002be0 	.word	0x20002be0

08004100 <Save_EEPROM>:

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08c      	sub	sp, #48	; 0x30
 8004104:	af04      	add	r7, sp, #16
 8004106:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];

	__FREQ_TO_BUFFER(buffer[0], perMsg[ANALOG_1_4]);
 8004108:	4ba9      	ldr	r3, [pc, #676]	; (80043b0 <Save_EEPROM+0x2b0>)
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004110:	f000 8081 	beq.w	8004216 <Save_EEPROM+0x116>
 8004114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004118:	f300 809e 	bgt.w	8004258 <Save_EEPROM+0x158>
 800411c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004120:	d07c      	beq.n	800421c <Save_EEPROM+0x11c>
 8004122:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004126:	f300 8097 	bgt.w	8004258 <Save_EEPROM+0x158>
 800412a:	2bc8      	cmp	r3, #200	; 0xc8
 800412c:	d079      	beq.n	8004222 <Save_EEPROM+0x122>
 800412e:	2bc8      	cmp	r3, #200	; 0xc8
 8004130:	f300 8092 	bgt.w	8004258 <Save_EEPROM+0x158>
 8004134:	2b32      	cmp	r3, #50	; 0x32
 8004136:	dc6b      	bgt.n	8004210 <Save_EEPROM+0x110>
 8004138:	2b02      	cmp	r3, #2
 800413a:	f2c0 808d 	blt.w	8004258 <Save_EEPROM+0x158>
 800413e:	3b02      	subs	r3, #2
 8004140:	2b30      	cmp	r3, #48	; 0x30
 8004142:	f200 8089 	bhi.w	8004258 <Save_EEPROM+0x158>
 8004146:	a201      	add	r2, pc, #4	; (adr r2, 800414c <Save_EEPROM+0x4c>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	08004253 	.word	0x08004253
 8004150:	0800424d 	.word	0x0800424d
 8004154:	08004259 	.word	0x08004259
 8004158:	08004247 	.word	0x08004247
 800415c:	08004259 	.word	0x08004259
 8004160:	08004259 	.word	0x08004259
 8004164:	08004259 	.word	0x08004259
 8004168:	08004259 	.word	0x08004259
 800416c:	08004241 	.word	0x08004241
 8004170:	08004259 	.word	0x08004259
 8004174:	08004259 	.word	0x08004259
 8004178:	08004259 	.word	0x08004259
 800417c:	08004259 	.word	0x08004259
 8004180:	08004259 	.word	0x08004259
 8004184:	08004259 	.word	0x08004259
 8004188:	08004259 	.word	0x08004259
 800418c:	08004259 	.word	0x08004259
 8004190:	08004259 	.word	0x08004259
 8004194:	0800423b 	.word	0x0800423b
 8004198:	08004259 	.word	0x08004259
 800419c:	08004259 	.word	0x08004259
 80041a0:	08004259 	.word	0x08004259
 80041a4:	08004259 	.word	0x08004259
 80041a8:	08004259 	.word	0x08004259
 80041ac:	08004259 	.word	0x08004259
 80041b0:	08004259 	.word	0x08004259
 80041b4:	08004259 	.word	0x08004259
 80041b8:	08004259 	.word	0x08004259
 80041bc:	08004259 	.word	0x08004259
 80041c0:	08004259 	.word	0x08004259
 80041c4:	08004259 	.word	0x08004259
 80041c8:	08004259 	.word	0x08004259
 80041cc:	08004259 	.word	0x08004259
 80041d0:	08004259 	.word	0x08004259
 80041d4:	08004259 	.word	0x08004259
 80041d8:	08004259 	.word	0x08004259
 80041dc:	08004259 	.word	0x08004259
 80041e0:	08004259 	.word	0x08004259
 80041e4:	08004235 	.word	0x08004235
 80041e8:	08004259 	.word	0x08004259
 80041ec:	08004259 	.word	0x08004259
 80041f0:	08004259 	.word	0x08004259
 80041f4:	08004259 	.word	0x08004259
 80041f8:	08004259 	.word	0x08004259
 80041fc:	08004259 	.word	0x08004259
 8004200:	08004259 	.word	0x08004259
 8004204:	08004259 	.word	0x08004259
 8004208:	08004259 	.word	0x08004259
 800420c:	0800422f 	.word	0x0800422f
 8004210:	2b64      	cmp	r3, #100	; 0x64
 8004212:	d009      	beq.n	8004228 <Save_EEPROM+0x128>
 8004214:	e020      	b.n	8004258 <Save_EEPROM+0x158>
 8004216:	2301      	movs	r3, #1
 8004218:	733b      	strb	r3, [r7, #12]
 800421a:	e01f      	b.n	800425c <Save_EEPROM+0x15c>
 800421c:	2302      	movs	r3, #2
 800421e:	733b      	strb	r3, [r7, #12]
 8004220:	e01c      	b.n	800425c <Save_EEPROM+0x15c>
 8004222:	2303      	movs	r3, #3
 8004224:	733b      	strb	r3, [r7, #12]
 8004226:	e019      	b.n	800425c <Save_EEPROM+0x15c>
 8004228:	2304      	movs	r3, #4
 800422a:	733b      	strb	r3, [r7, #12]
 800422c:	e016      	b.n	800425c <Save_EEPROM+0x15c>
 800422e:	2305      	movs	r3, #5
 8004230:	733b      	strb	r3, [r7, #12]
 8004232:	e013      	b.n	800425c <Save_EEPROM+0x15c>
 8004234:	2306      	movs	r3, #6
 8004236:	733b      	strb	r3, [r7, #12]
 8004238:	e010      	b.n	800425c <Save_EEPROM+0x15c>
 800423a:	2307      	movs	r3, #7
 800423c:	733b      	strb	r3, [r7, #12]
 800423e:	e00d      	b.n	800425c <Save_EEPROM+0x15c>
 8004240:	2308      	movs	r3, #8
 8004242:	733b      	strb	r3, [r7, #12]
 8004244:	e00a      	b.n	800425c <Save_EEPROM+0x15c>
 8004246:	2309      	movs	r3, #9
 8004248:	733b      	strb	r3, [r7, #12]
 800424a:	e007      	b.n	800425c <Save_EEPROM+0x15c>
 800424c:	230a      	movs	r3, #10
 800424e:	733b      	strb	r3, [r7, #12]
 8004250:	e004      	b.n	800425c <Save_EEPROM+0x15c>
 8004252:	230b      	movs	r3, #11
 8004254:	733b      	strb	r3, [r7, #12]
 8004256:	e001      	b.n	800425c <Save_EEPROM+0x15c>
 8004258:	2300      	movs	r3, #0
 800425a:	733b      	strb	r3, [r7, #12]
 800425c:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[1], perMsg[ANALOG_5_8]);
 800425e:	4b54      	ldr	r3, [pc, #336]	; (80043b0 <Save_EEPROM+0x2b0>)
 8004260:	885b      	ldrh	r3, [r3, #2]
 8004262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004266:	f000 8082 	beq.w	800436e <Save_EEPROM+0x26e>
 800426a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800426e:	f300 80a1 	bgt.w	80043b4 <Save_EEPROM+0x2b4>
 8004272:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004276:	d07d      	beq.n	8004374 <Save_EEPROM+0x274>
 8004278:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800427c:	f300 809a 	bgt.w	80043b4 <Save_EEPROM+0x2b4>
 8004280:	2bc8      	cmp	r3, #200	; 0xc8
 8004282:	d07a      	beq.n	800437a <Save_EEPROM+0x27a>
 8004284:	2bc8      	cmp	r3, #200	; 0xc8
 8004286:	f300 8095 	bgt.w	80043b4 <Save_EEPROM+0x2b4>
 800428a:	2b32      	cmp	r3, #50	; 0x32
 800428c:	dc6c      	bgt.n	8004368 <Save_EEPROM+0x268>
 800428e:	2b02      	cmp	r3, #2
 8004290:	f2c0 8090 	blt.w	80043b4 <Save_EEPROM+0x2b4>
 8004294:	3b02      	subs	r3, #2
 8004296:	2b30      	cmp	r3, #48	; 0x30
 8004298:	f200 808c 	bhi.w	80043b4 <Save_EEPROM+0x2b4>
 800429c:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <Save_EEPROM+0x1a4>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	080043ab 	.word	0x080043ab
 80042a8:	080043a5 	.word	0x080043a5
 80042ac:	080043b5 	.word	0x080043b5
 80042b0:	0800439f 	.word	0x0800439f
 80042b4:	080043b5 	.word	0x080043b5
 80042b8:	080043b5 	.word	0x080043b5
 80042bc:	080043b5 	.word	0x080043b5
 80042c0:	080043b5 	.word	0x080043b5
 80042c4:	08004399 	.word	0x08004399
 80042c8:	080043b5 	.word	0x080043b5
 80042cc:	080043b5 	.word	0x080043b5
 80042d0:	080043b5 	.word	0x080043b5
 80042d4:	080043b5 	.word	0x080043b5
 80042d8:	080043b5 	.word	0x080043b5
 80042dc:	080043b5 	.word	0x080043b5
 80042e0:	080043b5 	.word	0x080043b5
 80042e4:	080043b5 	.word	0x080043b5
 80042e8:	080043b5 	.word	0x080043b5
 80042ec:	08004393 	.word	0x08004393
 80042f0:	080043b5 	.word	0x080043b5
 80042f4:	080043b5 	.word	0x080043b5
 80042f8:	080043b5 	.word	0x080043b5
 80042fc:	080043b5 	.word	0x080043b5
 8004300:	080043b5 	.word	0x080043b5
 8004304:	080043b5 	.word	0x080043b5
 8004308:	080043b5 	.word	0x080043b5
 800430c:	080043b5 	.word	0x080043b5
 8004310:	080043b5 	.word	0x080043b5
 8004314:	080043b5 	.word	0x080043b5
 8004318:	080043b5 	.word	0x080043b5
 800431c:	080043b5 	.word	0x080043b5
 8004320:	080043b5 	.word	0x080043b5
 8004324:	080043b5 	.word	0x080043b5
 8004328:	080043b5 	.word	0x080043b5
 800432c:	080043b5 	.word	0x080043b5
 8004330:	080043b5 	.word	0x080043b5
 8004334:	080043b5 	.word	0x080043b5
 8004338:	080043b5 	.word	0x080043b5
 800433c:	0800438d 	.word	0x0800438d
 8004340:	080043b5 	.word	0x080043b5
 8004344:	080043b5 	.word	0x080043b5
 8004348:	080043b5 	.word	0x080043b5
 800434c:	080043b5 	.word	0x080043b5
 8004350:	080043b5 	.word	0x080043b5
 8004354:	080043b5 	.word	0x080043b5
 8004358:	080043b5 	.word	0x080043b5
 800435c:	080043b5 	.word	0x080043b5
 8004360:	080043b5 	.word	0x080043b5
 8004364:	08004387 	.word	0x08004387
 8004368:	2b64      	cmp	r3, #100	; 0x64
 800436a:	d009      	beq.n	8004380 <Save_EEPROM+0x280>
 800436c:	e022      	b.n	80043b4 <Save_EEPROM+0x2b4>
 800436e:	2301      	movs	r3, #1
 8004370:	737b      	strb	r3, [r7, #13]
 8004372:	e021      	b.n	80043b8 <Save_EEPROM+0x2b8>
 8004374:	2302      	movs	r3, #2
 8004376:	737b      	strb	r3, [r7, #13]
 8004378:	e01e      	b.n	80043b8 <Save_EEPROM+0x2b8>
 800437a:	2303      	movs	r3, #3
 800437c:	737b      	strb	r3, [r7, #13]
 800437e:	e01b      	b.n	80043b8 <Save_EEPROM+0x2b8>
 8004380:	2304      	movs	r3, #4
 8004382:	737b      	strb	r3, [r7, #13]
 8004384:	e018      	b.n	80043b8 <Save_EEPROM+0x2b8>
 8004386:	2305      	movs	r3, #5
 8004388:	737b      	strb	r3, [r7, #13]
 800438a:	e015      	b.n	80043b8 <Save_EEPROM+0x2b8>
 800438c:	2306      	movs	r3, #6
 800438e:	737b      	strb	r3, [r7, #13]
 8004390:	e012      	b.n	80043b8 <Save_EEPROM+0x2b8>
 8004392:	2307      	movs	r3, #7
 8004394:	737b      	strb	r3, [r7, #13]
 8004396:	e00f      	b.n	80043b8 <Save_EEPROM+0x2b8>
 8004398:	2308      	movs	r3, #8
 800439a:	737b      	strb	r3, [r7, #13]
 800439c:	e00c      	b.n	80043b8 <Save_EEPROM+0x2b8>
 800439e:	2309      	movs	r3, #9
 80043a0:	737b      	strb	r3, [r7, #13]
 80043a2:	e009      	b.n	80043b8 <Save_EEPROM+0x2b8>
 80043a4:	230a      	movs	r3, #10
 80043a6:	737b      	strb	r3, [r7, #13]
 80043a8:	e006      	b.n	80043b8 <Save_EEPROM+0x2b8>
 80043aa:	230b      	movs	r3, #11
 80043ac:	737b      	strb	r3, [r7, #13]
 80043ae:	e003      	b.n	80043b8 <Save_EEPROM+0x2b8>
 80043b0:	20002c04 	.word	0x20002c04
 80043b4:	2300      	movs	r3, #0
 80043b6:	737b      	strb	r3, [r7, #13]
 80043b8:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[2], perMsg[ANALOG_9_12]);
 80043ba:	4baa      	ldr	r3, [pc, #680]	; (8004664 <Save_EEPROM+0x564>)
 80043bc:	889b      	ldrh	r3, [r3, #4]
 80043be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043c2:	f000 8082 	beq.w	80044ca <Save_EEPROM+0x3ca>
 80043c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ca:	f300 809f 	bgt.w	800450c <Save_EEPROM+0x40c>
 80043ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043d2:	d07d      	beq.n	80044d0 <Save_EEPROM+0x3d0>
 80043d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043d8:	f300 8098 	bgt.w	800450c <Save_EEPROM+0x40c>
 80043dc:	2bc8      	cmp	r3, #200	; 0xc8
 80043de:	d07a      	beq.n	80044d6 <Save_EEPROM+0x3d6>
 80043e0:	2bc8      	cmp	r3, #200	; 0xc8
 80043e2:	f300 8093 	bgt.w	800450c <Save_EEPROM+0x40c>
 80043e6:	2b32      	cmp	r3, #50	; 0x32
 80043e8:	dc6c      	bgt.n	80044c4 <Save_EEPROM+0x3c4>
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	f2c0 808e 	blt.w	800450c <Save_EEPROM+0x40c>
 80043f0:	3b02      	subs	r3, #2
 80043f2:	2b30      	cmp	r3, #48	; 0x30
 80043f4:	f200 808a 	bhi.w	800450c <Save_EEPROM+0x40c>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <Save_EEPROM+0x300>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004507 	.word	0x08004507
 8004404:	08004501 	.word	0x08004501
 8004408:	0800450d 	.word	0x0800450d
 800440c:	080044fb 	.word	0x080044fb
 8004410:	0800450d 	.word	0x0800450d
 8004414:	0800450d 	.word	0x0800450d
 8004418:	0800450d 	.word	0x0800450d
 800441c:	0800450d 	.word	0x0800450d
 8004420:	080044f5 	.word	0x080044f5
 8004424:	0800450d 	.word	0x0800450d
 8004428:	0800450d 	.word	0x0800450d
 800442c:	0800450d 	.word	0x0800450d
 8004430:	0800450d 	.word	0x0800450d
 8004434:	0800450d 	.word	0x0800450d
 8004438:	0800450d 	.word	0x0800450d
 800443c:	0800450d 	.word	0x0800450d
 8004440:	0800450d 	.word	0x0800450d
 8004444:	0800450d 	.word	0x0800450d
 8004448:	080044ef 	.word	0x080044ef
 800444c:	0800450d 	.word	0x0800450d
 8004450:	0800450d 	.word	0x0800450d
 8004454:	0800450d 	.word	0x0800450d
 8004458:	0800450d 	.word	0x0800450d
 800445c:	0800450d 	.word	0x0800450d
 8004460:	0800450d 	.word	0x0800450d
 8004464:	0800450d 	.word	0x0800450d
 8004468:	0800450d 	.word	0x0800450d
 800446c:	0800450d 	.word	0x0800450d
 8004470:	0800450d 	.word	0x0800450d
 8004474:	0800450d 	.word	0x0800450d
 8004478:	0800450d 	.word	0x0800450d
 800447c:	0800450d 	.word	0x0800450d
 8004480:	0800450d 	.word	0x0800450d
 8004484:	0800450d 	.word	0x0800450d
 8004488:	0800450d 	.word	0x0800450d
 800448c:	0800450d 	.word	0x0800450d
 8004490:	0800450d 	.word	0x0800450d
 8004494:	0800450d 	.word	0x0800450d
 8004498:	080044e9 	.word	0x080044e9
 800449c:	0800450d 	.word	0x0800450d
 80044a0:	0800450d 	.word	0x0800450d
 80044a4:	0800450d 	.word	0x0800450d
 80044a8:	0800450d 	.word	0x0800450d
 80044ac:	0800450d 	.word	0x0800450d
 80044b0:	0800450d 	.word	0x0800450d
 80044b4:	0800450d 	.word	0x0800450d
 80044b8:	0800450d 	.word	0x0800450d
 80044bc:	0800450d 	.word	0x0800450d
 80044c0:	080044e3 	.word	0x080044e3
 80044c4:	2b64      	cmp	r3, #100	; 0x64
 80044c6:	d009      	beq.n	80044dc <Save_EEPROM+0x3dc>
 80044c8:	e020      	b.n	800450c <Save_EEPROM+0x40c>
 80044ca:	2301      	movs	r3, #1
 80044cc:	73bb      	strb	r3, [r7, #14]
 80044ce:	e01f      	b.n	8004510 <Save_EEPROM+0x410>
 80044d0:	2302      	movs	r3, #2
 80044d2:	73bb      	strb	r3, [r7, #14]
 80044d4:	e01c      	b.n	8004510 <Save_EEPROM+0x410>
 80044d6:	2303      	movs	r3, #3
 80044d8:	73bb      	strb	r3, [r7, #14]
 80044da:	e019      	b.n	8004510 <Save_EEPROM+0x410>
 80044dc:	2304      	movs	r3, #4
 80044de:	73bb      	strb	r3, [r7, #14]
 80044e0:	e016      	b.n	8004510 <Save_EEPROM+0x410>
 80044e2:	2305      	movs	r3, #5
 80044e4:	73bb      	strb	r3, [r7, #14]
 80044e6:	e013      	b.n	8004510 <Save_EEPROM+0x410>
 80044e8:	2306      	movs	r3, #6
 80044ea:	73bb      	strb	r3, [r7, #14]
 80044ec:	e010      	b.n	8004510 <Save_EEPROM+0x410>
 80044ee:	2307      	movs	r3, #7
 80044f0:	73bb      	strb	r3, [r7, #14]
 80044f2:	e00d      	b.n	8004510 <Save_EEPROM+0x410>
 80044f4:	2308      	movs	r3, #8
 80044f6:	73bb      	strb	r3, [r7, #14]
 80044f8:	e00a      	b.n	8004510 <Save_EEPROM+0x410>
 80044fa:	2309      	movs	r3, #9
 80044fc:	73bb      	strb	r3, [r7, #14]
 80044fe:	e007      	b.n	8004510 <Save_EEPROM+0x410>
 8004500:	230a      	movs	r3, #10
 8004502:	73bb      	strb	r3, [r7, #14]
 8004504:	e004      	b.n	8004510 <Save_EEPROM+0x410>
 8004506:	230b      	movs	r3, #11
 8004508:	73bb      	strb	r3, [r7, #14]
 800450a:	e001      	b.n	8004510 <Save_EEPROM+0x410>
 800450c:	2300      	movs	r3, #0
 800450e:	73bb      	strb	r3, [r7, #14]
 8004510:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[3], perMsg[RTC_MSG]);
 8004512:	4b54      	ldr	r3, [pc, #336]	; (8004664 <Save_EEPROM+0x564>)
 8004514:	88db      	ldrh	r3, [r3, #6]
 8004516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800451a:	f000 8082 	beq.w	8004622 <Save_EEPROM+0x522>
 800451e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004522:	f300 80a1 	bgt.w	8004668 <Save_EEPROM+0x568>
 8004526:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800452a:	d07d      	beq.n	8004628 <Save_EEPROM+0x528>
 800452c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004530:	f300 809a 	bgt.w	8004668 <Save_EEPROM+0x568>
 8004534:	2bc8      	cmp	r3, #200	; 0xc8
 8004536:	d07a      	beq.n	800462e <Save_EEPROM+0x52e>
 8004538:	2bc8      	cmp	r3, #200	; 0xc8
 800453a:	f300 8095 	bgt.w	8004668 <Save_EEPROM+0x568>
 800453e:	2b32      	cmp	r3, #50	; 0x32
 8004540:	dc6c      	bgt.n	800461c <Save_EEPROM+0x51c>
 8004542:	2b02      	cmp	r3, #2
 8004544:	f2c0 8090 	blt.w	8004668 <Save_EEPROM+0x568>
 8004548:	3b02      	subs	r3, #2
 800454a:	2b30      	cmp	r3, #48	; 0x30
 800454c:	f200 808c 	bhi.w	8004668 <Save_EEPROM+0x568>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <Save_EEPROM+0x458>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	0800465f 	.word	0x0800465f
 800455c:	08004659 	.word	0x08004659
 8004560:	08004669 	.word	0x08004669
 8004564:	08004653 	.word	0x08004653
 8004568:	08004669 	.word	0x08004669
 800456c:	08004669 	.word	0x08004669
 8004570:	08004669 	.word	0x08004669
 8004574:	08004669 	.word	0x08004669
 8004578:	0800464d 	.word	0x0800464d
 800457c:	08004669 	.word	0x08004669
 8004580:	08004669 	.word	0x08004669
 8004584:	08004669 	.word	0x08004669
 8004588:	08004669 	.word	0x08004669
 800458c:	08004669 	.word	0x08004669
 8004590:	08004669 	.word	0x08004669
 8004594:	08004669 	.word	0x08004669
 8004598:	08004669 	.word	0x08004669
 800459c:	08004669 	.word	0x08004669
 80045a0:	08004647 	.word	0x08004647
 80045a4:	08004669 	.word	0x08004669
 80045a8:	08004669 	.word	0x08004669
 80045ac:	08004669 	.word	0x08004669
 80045b0:	08004669 	.word	0x08004669
 80045b4:	08004669 	.word	0x08004669
 80045b8:	08004669 	.word	0x08004669
 80045bc:	08004669 	.word	0x08004669
 80045c0:	08004669 	.word	0x08004669
 80045c4:	08004669 	.word	0x08004669
 80045c8:	08004669 	.word	0x08004669
 80045cc:	08004669 	.word	0x08004669
 80045d0:	08004669 	.word	0x08004669
 80045d4:	08004669 	.word	0x08004669
 80045d8:	08004669 	.word	0x08004669
 80045dc:	08004669 	.word	0x08004669
 80045e0:	08004669 	.word	0x08004669
 80045e4:	08004669 	.word	0x08004669
 80045e8:	08004669 	.word	0x08004669
 80045ec:	08004669 	.word	0x08004669
 80045f0:	08004641 	.word	0x08004641
 80045f4:	08004669 	.word	0x08004669
 80045f8:	08004669 	.word	0x08004669
 80045fc:	08004669 	.word	0x08004669
 8004600:	08004669 	.word	0x08004669
 8004604:	08004669 	.word	0x08004669
 8004608:	08004669 	.word	0x08004669
 800460c:	08004669 	.word	0x08004669
 8004610:	08004669 	.word	0x08004669
 8004614:	08004669 	.word	0x08004669
 8004618:	0800463b 	.word	0x0800463b
 800461c:	2b64      	cmp	r3, #100	; 0x64
 800461e:	d009      	beq.n	8004634 <Save_EEPROM+0x534>
 8004620:	e022      	b.n	8004668 <Save_EEPROM+0x568>
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
 8004626:	e021      	b.n	800466c <Save_EEPROM+0x56c>
 8004628:	2302      	movs	r3, #2
 800462a:	73fb      	strb	r3, [r7, #15]
 800462c:	e01e      	b.n	800466c <Save_EEPROM+0x56c>
 800462e:	2303      	movs	r3, #3
 8004630:	73fb      	strb	r3, [r7, #15]
 8004632:	e01b      	b.n	800466c <Save_EEPROM+0x56c>
 8004634:	2304      	movs	r3, #4
 8004636:	73fb      	strb	r3, [r7, #15]
 8004638:	e018      	b.n	800466c <Save_EEPROM+0x56c>
 800463a:	2305      	movs	r3, #5
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e015      	b.n	800466c <Save_EEPROM+0x56c>
 8004640:	2306      	movs	r3, #6
 8004642:	73fb      	strb	r3, [r7, #15]
 8004644:	e012      	b.n	800466c <Save_EEPROM+0x56c>
 8004646:	2307      	movs	r3, #7
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	e00f      	b.n	800466c <Save_EEPROM+0x56c>
 800464c:	2308      	movs	r3, #8
 800464e:	73fb      	strb	r3, [r7, #15]
 8004650:	e00c      	b.n	800466c <Save_EEPROM+0x56c>
 8004652:	2309      	movs	r3, #9
 8004654:	73fb      	strb	r3, [r7, #15]
 8004656:	e009      	b.n	800466c <Save_EEPROM+0x56c>
 8004658:	230a      	movs	r3, #10
 800465a:	73fb      	strb	r3, [r7, #15]
 800465c:	e006      	b.n	800466c <Save_EEPROM+0x56c>
 800465e:	230b      	movs	r3, #11
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	e003      	b.n	800466c <Save_EEPROM+0x56c>
 8004664:	20002c04 	.word	0x20002c04
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]
 800466c:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[4], perMsg[VERIFY_MSG]);
 800466e:	4baa      	ldr	r3, [pc, #680]	; (8004918 <Save_EEPROM+0x818>)
 8004670:	891b      	ldrh	r3, [r3, #8]
 8004672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004676:	f000 8082 	beq.w	800477e <Save_EEPROM+0x67e>
 800467a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800467e:	f300 809f 	bgt.w	80047c0 <Save_EEPROM+0x6c0>
 8004682:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004686:	d07d      	beq.n	8004784 <Save_EEPROM+0x684>
 8004688:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800468c:	f300 8098 	bgt.w	80047c0 <Save_EEPROM+0x6c0>
 8004690:	2bc8      	cmp	r3, #200	; 0xc8
 8004692:	d07a      	beq.n	800478a <Save_EEPROM+0x68a>
 8004694:	2bc8      	cmp	r3, #200	; 0xc8
 8004696:	f300 8093 	bgt.w	80047c0 <Save_EEPROM+0x6c0>
 800469a:	2b32      	cmp	r3, #50	; 0x32
 800469c:	dc6c      	bgt.n	8004778 <Save_EEPROM+0x678>
 800469e:	2b02      	cmp	r3, #2
 80046a0:	f2c0 808e 	blt.w	80047c0 <Save_EEPROM+0x6c0>
 80046a4:	3b02      	subs	r3, #2
 80046a6:	2b30      	cmp	r3, #48	; 0x30
 80046a8:	f200 808a 	bhi.w	80047c0 <Save_EEPROM+0x6c0>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <Save_EEPROM+0x5b4>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080047bb 	.word	0x080047bb
 80046b8:	080047b5 	.word	0x080047b5
 80046bc:	080047c1 	.word	0x080047c1
 80046c0:	080047af 	.word	0x080047af
 80046c4:	080047c1 	.word	0x080047c1
 80046c8:	080047c1 	.word	0x080047c1
 80046cc:	080047c1 	.word	0x080047c1
 80046d0:	080047c1 	.word	0x080047c1
 80046d4:	080047a9 	.word	0x080047a9
 80046d8:	080047c1 	.word	0x080047c1
 80046dc:	080047c1 	.word	0x080047c1
 80046e0:	080047c1 	.word	0x080047c1
 80046e4:	080047c1 	.word	0x080047c1
 80046e8:	080047c1 	.word	0x080047c1
 80046ec:	080047c1 	.word	0x080047c1
 80046f0:	080047c1 	.word	0x080047c1
 80046f4:	080047c1 	.word	0x080047c1
 80046f8:	080047c1 	.word	0x080047c1
 80046fc:	080047a3 	.word	0x080047a3
 8004700:	080047c1 	.word	0x080047c1
 8004704:	080047c1 	.word	0x080047c1
 8004708:	080047c1 	.word	0x080047c1
 800470c:	080047c1 	.word	0x080047c1
 8004710:	080047c1 	.word	0x080047c1
 8004714:	080047c1 	.word	0x080047c1
 8004718:	080047c1 	.word	0x080047c1
 800471c:	080047c1 	.word	0x080047c1
 8004720:	080047c1 	.word	0x080047c1
 8004724:	080047c1 	.word	0x080047c1
 8004728:	080047c1 	.word	0x080047c1
 800472c:	080047c1 	.word	0x080047c1
 8004730:	080047c1 	.word	0x080047c1
 8004734:	080047c1 	.word	0x080047c1
 8004738:	080047c1 	.word	0x080047c1
 800473c:	080047c1 	.word	0x080047c1
 8004740:	080047c1 	.word	0x080047c1
 8004744:	080047c1 	.word	0x080047c1
 8004748:	080047c1 	.word	0x080047c1
 800474c:	0800479d 	.word	0x0800479d
 8004750:	080047c1 	.word	0x080047c1
 8004754:	080047c1 	.word	0x080047c1
 8004758:	080047c1 	.word	0x080047c1
 800475c:	080047c1 	.word	0x080047c1
 8004760:	080047c1 	.word	0x080047c1
 8004764:	080047c1 	.word	0x080047c1
 8004768:	080047c1 	.word	0x080047c1
 800476c:	080047c1 	.word	0x080047c1
 8004770:	080047c1 	.word	0x080047c1
 8004774:	08004797 	.word	0x08004797
 8004778:	2b64      	cmp	r3, #100	; 0x64
 800477a:	d009      	beq.n	8004790 <Save_EEPROM+0x690>
 800477c:	e020      	b.n	80047c0 <Save_EEPROM+0x6c0>
 800477e:	2301      	movs	r3, #1
 8004780:	743b      	strb	r3, [r7, #16]
 8004782:	e01f      	b.n	80047c4 <Save_EEPROM+0x6c4>
 8004784:	2302      	movs	r3, #2
 8004786:	743b      	strb	r3, [r7, #16]
 8004788:	e01c      	b.n	80047c4 <Save_EEPROM+0x6c4>
 800478a:	2303      	movs	r3, #3
 800478c:	743b      	strb	r3, [r7, #16]
 800478e:	e019      	b.n	80047c4 <Save_EEPROM+0x6c4>
 8004790:	2304      	movs	r3, #4
 8004792:	743b      	strb	r3, [r7, #16]
 8004794:	e016      	b.n	80047c4 <Save_EEPROM+0x6c4>
 8004796:	2305      	movs	r3, #5
 8004798:	743b      	strb	r3, [r7, #16]
 800479a:	e013      	b.n	80047c4 <Save_EEPROM+0x6c4>
 800479c:	2306      	movs	r3, #6
 800479e:	743b      	strb	r3, [r7, #16]
 80047a0:	e010      	b.n	80047c4 <Save_EEPROM+0x6c4>
 80047a2:	2307      	movs	r3, #7
 80047a4:	743b      	strb	r3, [r7, #16]
 80047a6:	e00d      	b.n	80047c4 <Save_EEPROM+0x6c4>
 80047a8:	2308      	movs	r3, #8
 80047aa:	743b      	strb	r3, [r7, #16]
 80047ac:	e00a      	b.n	80047c4 <Save_EEPROM+0x6c4>
 80047ae:	2309      	movs	r3, #9
 80047b0:	743b      	strb	r3, [r7, #16]
 80047b2:	e007      	b.n	80047c4 <Save_EEPROM+0x6c4>
 80047b4:	230a      	movs	r3, #10
 80047b6:	743b      	strb	r3, [r7, #16]
 80047b8:	e004      	b.n	80047c4 <Save_EEPROM+0x6c4>
 80047ba:	230b      	movs	r3, #11
 80047bc:	743b      	strb	r3, [r7, #16]
 80047be:	e001      	b.n	80047c4 <Save_EEPROM+0x6c4>
 80047c0:	2300      	movs	r3, #0
 80047c2:	743b      	strb	r3, [r7, #16]
 80047c4:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[5], perMsg[ECU_SAVE]);
 80047c6:	4b54      	ldr	r3, [pc, #336]	; (8004918 <Save_EEPROM+0x818>)
 80047c8:	899b      	ldrh	r3, [r3, #12]
 80047ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ce:	f000 8082 	beq.w	80048d6 <Save_EEPROM+0x7d6>
 80047d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047d6:	f300 80a1 	bgt.w	800491c <Save_EEPROM+0x81c>
 80047da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047de:	d07d      	beq.n	80048dc <Save_EEPROM+0x7dc>
 80047e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047e4:	f300 809a 	bgt.w	800491c <Save_EEPROM+0x81c>
 80047e8:	2bc8      	cmp	r3, #200	; 0xc8
 80047ea:	d07a      	beq.n	80048e2 <Save_EEPROM+0x7e2>
 80047ec:	2bc8      	cmp	r3, #200	; 0xc8
 80047ee:	f300 8095 	bgt.w	800491c <Save_EEPROM+0x81c>
 80047f2:	2b32      	cmp	r3, #50	; 0x32
 80047f4:	dc6c      	bgt.n	80048d0 <Save_EEPROM+0x7d0>
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	f2c0 8090 	blt.w	800491c <Save_EEPROM+0x81c>
 80047fc:	3b02      	subs	r3, #2
 80047fe:	2b30      	cmp	r3, #48	; 0x30
 8004800:	f200 808c 	bhi.w	800491c <Save_EEPROM+0x81c>
 8004804:	a201      	add	r2, pc, #4	; (adr r2, 800480c <Save_EEPROM+0x70c>)
 8004806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480a:	bf00      	nop
 800480c:	08004913 	.word	0x08004913
 8004810:	0800490d 	.word	0x0800490d
 8004814:	0800491d 	.word	0x0800491d
 8004818:	08004907 	.word	0x08004907
 800481c:	0800491d 	.word	0x0800491d
 8004820:	0800491d 	.word	0x0800491d
 8004824:	0800491d 	.word	0x0800491d
 8004828:	0800491d 	.word	0x0800491d
 800482c:	08004901 	.word	0x08004901
 8004830:	0800491d 	.word	0x0800491d
 8004834:	0800491d 	.word	0x0800491d
 8004838:	0800491d 	.word	0x0800491d
 800483c:	0800491d 	.word	0x0800491d
 8004840:	0800491d 	.word	0x0800491d
 8004844:	0800491d 	.word	0x0800491d
 8004848:	0800491d 	.word	0x0800491d
 800484c:	0800491d 	.word	0x0800491d
 8004850:	0800491d 	.word	0x0800491d
 8004854:	080048fb 	.word	0x080048fb
 8004858:	0800491d 	.word	0x0800491d
 800485c:	0800491d 	.word	0x0800491d
 8004860:	0800491d 	.word	0x0800491d
 8004864:	0800491d 	.word	0x0800491d
 8004868:	0800491d 	.word	0x0800491d
 800486c:	0800491d 	.word	0x0800491d
 8004870:	0800491d 	.word	0x0800491d
 8004874:	0800491d 	.word	0x0800491d
 8004878:	0800491d 	.word	0x0800491d
 800487c:	0800491d 	.word	0x0800491d
 8004880:	0800491d 	.word	0x0800491d
 8004884:	0800491d 	.word	0x0800491d
 8004888:	0800491d 	.word	0x0800491d
 800488c:	0800491d 	.word	0x0800491d
 8004890:	0800491d 	.word	0x0800491d
 8004894:	0800491d 	.word	0x0800491d
 8004898:	0800491d 	.word	0x0800491d
 800489c:	0800491d 	.word	0x0800491d
 80048a0:	0800491d 	.word	0x0800491d
 80048a4:	080048f5 	.word	0x080048f5
 80048a8:	0800491d 	.word	0x0800491d
 80048ac:	0800491d 	.word	0x0800491d
 80048b0:	0800491d 	.word	0x0800491d
 80048b4:	0800491d 	.word	0x0800491d
 80048b8:	0800491d 	.word	0x0800491d
 80048bc:	0800491d 	.word	0x0800491d
 80048c0:	0800491d 	.word	0x0800491d
 80048c4:	0800491d 	.word	0x0800491d
 80048c8:	0800491d 	.word	0x0800491d
 80048cc:	080048ef 	.word	0x080048ef
 80048d0:	2b64      	cmp	r3, #100	; 0x64
 80048d2:	d009      	beq.n	80048e8 <Save_EEPROM+0x7e8>
 80048d4:	e022      	b.n	800491c <Save_EEPROM+0x81c>
 80048d6:	2301      	movs	r3, #1
 80048d8:	747b      	strb	r3, [r7, #17]
 80048da:	e021      	b.n	8004920 <Save_EEPROM+0x820>
 80048dc:	2302      	movs	r3, #2
 80048de:	747b      	strb	r3, [r7, #17]
 80048e0:	e01e      	b.n	8004920 <Save_EEPROM+0x820>
 80048e2:	2303      	movs	r3, #3
 80048e4:	747b      	strb	r3, [r7, #17]
 80048e6:	e01b      	b.n	8004920 <Save_EEPROM+0x820>
 80048e8:	2304      	movs	r3, #4
 80048ea:	747b      	strb	r3, [r7, #17]
 80048ec:	e018      	b.n	8004920 <Save_EEPROM+0x820>
 80048ee:	2305      	movs	r3, #5
 80048f0:	747b      	strb	r3, [r7, #17]
 80048f2:	e015      	b.n	8004920 <Save_EEPROM+0x820>
 80048f4:	2306      	movs	r3, #6
 80048f6:	747b      	strb	r3, [r7, #17]
 80048f8:	e012      	b.n	8004920 <Save_EEPROM+0x820>
 80048fa:	2307      	movs	r3, #7
 80048fc:	747b      	strb	r3, [r7, #17]
 80048fe:	e00f      	b.n	8004920 <Save_EEPROM+0x820>
 8004900:	2308      	movs	r3, #8
 8004902:	747b      	strb	r3, [r7, #17]
 8004904:	e00c      	b.n	8004920 <Save_EEPROM+0x820>
 8004906:	2309      	movs	r3, #9
 8004908:	747b      	strb	r3, [r7, #17]
 800490a:	e009      	b.n	8004920 <Save_EEPROM+0x820>
 800490c:	230a      	movs	r3, #10
 800490e:	747b      	strb	r3, [r7, #17]
 8004910:	e006      	b.n	8004920 <Save_EEPROM+0x820>
 8004912:	230b      	movs	r3, #11
 8004914:	747b      	strb	r3, [r7, #17]
 8004916:	e003      	b.n	8004920 <Save_EEPROM+0x820>
 8004918:	20002c04 	.word	0x20002c04
 800491c:	2300      	movs	r3, #0
 800491e:	747b      	strb	r3, [r7, #17]
 8004920:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[6], perMsg[PDM_SAVE]);
 8004922:	4baa      	ldr	r3, [pc, #680]	; (8004bcc <Save_EEPROM+0xacc>)
 8004924:	89db      	ldrh	r3, [r3, #14]
 8004926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800492a:	f000 8082 	beq.w	8004a32 <Save_EEPROM+0x932>
 800492e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004932:	f300 809f 	bgt.w	8004a74 <Save_EEPROM+0x974>
 8004936:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800493a:	d07d      	beq.n	8004a38 <Save_EEPROM+0x938>
 800493c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004940:	f300 8098 	bgt.w	8004a74 <Save_EEPROM+0x974>
 8004944:	2bc8      	cmp	r3, #200	; 0xc8
 8004946:	d07a      	beq.n	8004a3e <Save_EEPROM+0x93e>
 8004948:	2bc8      	cmp	r3, #200	; 0xc8
 800494a:	f300 8093 	bgt.w	8004a74 <Save_EEPROM+0x974>
 800494e:	2b32      	cmp	r3, #50	; 0x32
 8004950:	dc6c      	bgt.n	8004a2c <Save_EEPROM+0x92c>
 8004952:	2b02      	cmp	r3, #2
 8004954:	f2c0 808e 	blt.w	8004a74 <Save_EEPROM+0x974>
 8004958:	3b02      	subs	r3, #2
 800495a:	2b30      	cmp	r3, #48	; 0x30
 800495c:	f200 808a 	bhi.w	8004a74 <Save_EEPROM+0x974>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <Save_EEPROM+0x868>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	08004a6f 	.word	0x08004a6f
 800496c:	08004a69 	.word	0x08004a69
 8004970:	08004a75 	.word	0x08004a75
 8004974:	08004a63 	.word	0x08004a63
 8004978:	08004a75 	.word	0x08004a75
 800497c:	08004a75 	.word	0x08004a75
 8004980:	08004a75 	.word	0x08004a75
 8004984:	08004a75 	.word	0x08004a75
 8004988:	08004a5d 	.word	0x08004a5d
 800498c:	08004a75 	.word	0x08004a75
 8004990:	08004a75 	.word	0x08004a75
 8004994:	08004a75 	.word	0x08004a75
 8004998:	08004a75 	.word	0x08004a75
 800499c:	08004a75 	.word	0x08004a75
 80049a0:	08004a75 	.word	0x08004a75
 80049a4:	08004a75 	.word	0x08004a75
 80049a8:	08004a75 	.word	0x08004a75
 80049ac:	08004a75 	.word	0x08004a75
 80049b0:	08004a57 	.word	0x08004a57
 80049b4:	08004a75 	.word	0x08004a75
 80049b8:	08004a75 	.word	0x08004a75
 80049bc:	08004a75 	.word	0x08004a75
 80049c0:	08004a75 	.word	0x08004a75
 80049c4:	08004a75 	.word	0x08004a75
 80049c8:	08004a75 	.word	0x08004a75
 80049cc:	08004a75 	.word	0x08004a75
 80049d0:	08004a75 	.word	0x08004a75
 80049d4:	08004a75 	.word	0x08004a75
 80049d8:	08004a75 	.word	0x08004a75
 80049dc:	08004a75 	.word	0x08004a75
 80049e0:	08004a75 	.word	0x08004a75
 80049e4:	08004a75 	.word	0x08004a75
 80049e8:	08004a75 	.word	0x08004a75
 80049ec:	08004a75 	.word	0x08004a75
 80049f0:	08004a75 	.word	0x08004a75
 80049f4:	08004a75 	.word	0x08004a75
 80049f8:	08004a75 	.word	0x08004a75
 80049fc:	08004a75 	.word	0x08004a75
 8004a00:	08004a51 	.word	0x08004a51
 8004a04:	08004a75 	.word	0x08004a75
 8004a08:	08004a75 	.word	0x08004a75
 8004a0c:	08004a75 	.word	0x08004a75
 8004a10:	08004a75 	.word	0x08004a75
 8004a14:	08004a75 	.word	0x08004a75
 8004a18:	08004a75 	.word	0x08004a75
 8004a1c:	08004a75 	.word	0x08004a75
 8004a20:	08004a75 	.word	0x08004a75
 8004a24:	08004a75 	.word	0x08004a75
 8004a28:	08004a4b 	.word	0x08004a4b
 8004a2c:	2b64      	cmp	r3, #100	; 0x64
 8004a2e:	d009      	beq.n	8004a44 <Save_EEPROM+0x944>
 8004a30:	e020      	b.n	8004a74 <Save_EEPROM+0x974>
 8004a32:	2301      	movs	r3, #1
 8004a34:	74bb      	strb	r3, [r7, #18]
 8004a36:	e01f      	b.n	8004a78 <Save_EEPROM+0x978>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	74bb      	strb	r3, [r7, #18]
 8004a3c:	e01c      	b.n	8004a78 <Save_EEPROM+0x978>
 8004a3e:	2303      	movs	r3, #3
 8004a40:	74bb      	strb	r3, [r7, #18]
 8004a42:	e019      	b.n	8004a78 <Save_EEPROM+0x978>
 8004a44:	2304      	movs	r3, #4
 8004a46:	74bb      	strb	r3, [r7, #18]
 8004a48:	e016      	b.n	8004a78 <Save_EEPROM+0x978>
 8004a4a:	2305      	movs	r3, #5
 8004a4c:	74bb      	strb	r3, [r7, #18]
 8004a4e:	e013      	b.n	8004a78 <Save_EEPROM+0x978>
 8004a50:	2306      	movs	r3, #6
 8004a52:	74bb      	strb	r3, [r7, #18]
 8004a54:	e010      	b.n	8004a78 <Save_EEPROM+0x978>
 8004a56:	2307      	movs	r3, #7
 8004a58:	74bb      	strb	r3, [r7, #18]
 8004a5a:	e00d      	b.n	8004a78 <Save_EEPROM+0x978>
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	74bb      	strb	r3, [r7, #18]
 8004a60:	e00a      	b.n	8004a78 <Save_EEPROM+0x978>
 8004a62:	2309      	movs	r3, #9
 8004a64:	74bb      	strb	r3, [r7, #18]
 8004a66:	e007      	b.n	8004a78 <Save_EEPROM+0x978>
 8004a68:	230a      	movs	r3, #10
 8004a6a:	74bb      	strb	r3, [r7, #18]
 8004a6c:	e004      	b.n	8004a78 <Save_EEPROM+0x978>
 8004a6e:	230b      	movs	r3, #11
 8004a70:	74bb      	strb	r3, [r7, #18]
 8004a72:	e001      	b.n	8004a78 <Save_EEPROM+0x978>
 8004a74:	2300      	movs	r3, #0
 8004a76:	74bb      	strb	r3, [r7, #18]
 8004a78:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[7], perCAN[ANALOG_1_4]);
 8004a7a:	4b55      	ldr	r3, [pc, #340]	; (8004bd0 <Save_EEPROM+0xad0>)
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a82:	f000 8082 	beq.w	8004b8a <Save_EEPROM+0xa8a>
 8004a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a8a:	f300 80a3 	bgt.w	8004bd4 <Save_EEPROM+0xad4>
 8004a8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a92:	d07d      	beq.n	8004b90 <Save_EEPROM+0xa90>
 8004a94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a98:	f300 809c 	bgt.w	8004bd4 <Save_EEPROM+0xad4>
 8004a9c:	2bc8      	cmp	r3, #200	; 0xc8
 8004a9e:	d07a      	beq.n	8004b96 <Save_EEPROM+0xa96>
 8004aa0:	2bc8      	cmp	r3, #200	; 0xc8
 8004aa2:	f300 8097 	bgt.w	8004bd4 <Save_EEPROM+0xad4>
 8004aa6:	2b32      	cmp	r3, #50	; 0x32
 8004aa8:	dc6c      	bgt.n	8004b84 <Save_EEPROM+0xa84>
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	f2c0 8092 	blt.w	8004bd4 <Save_EEPROM+0xad4>
 8004ab0:	3b02      	subs	r3, #2
 8004ab2:	2b30      	cmp	r3, #48	; 0x30
 8004ab4:	f200 808e 	bhi.w	8004bd4 <Save_EEPROM+0xad4>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <Save_EEPROM+0x9c0>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004bc7 	.word	0x08004bc7
 8004ac4:	08004bc1 	.word	0x08004bc1
 8004ac8:	08004bd5 	.word	0x08004bd5
 8004acc:	08004bbb 	.word	0x08004bbb
 8004ad0:	08004bd5 	.word	0x08004bd5
 8004ad4:	08004bd5 	.word	0x08004bd5
 8004ad8:	08004bd5 	.word	0x08004bd5
 8004adc:	08004bd5 	.word	0x08004bd5
 8004ae0:	08004bb5 	.word	0x08004bb5
 8004ae4:	08004bd5 	.word	0x08004bd5
 8004ae8:	08004bd5 	.word	0x08004bd5
 8004aec:	08004bd5 	.word	0x08004bd5
 8004af0:	08004bd5 	.word	0x08004bd5
 8004af4:	08004bd5 	.word	0x08004bd5
 8004af8:	08004bd5 	.word	0x08004bd5
 8004afc:	08004bd5 	.word	0x08004bd5
 8004b00:	08004bd5 	.word	0x08004bd5
 8004b04:	08004bd5 	.word	0x08004bd5
 8004b08:	08004baf 	.word	0x08004baf
 8004b0c:	08004bd5 	.word	0x08004bd5
 8004b10:	08004bd5 	.word	0x08004bd5
 8004b14:	08004bd5 	.word	0x08004bd5
 8004b18:	08004bd5 	.word	0x08004bd5
 8004b1c:	08004bd5 	.word	0x08004bd5
 8004b20:	08004bd5 	.word	0x08004bd5
 8004b24:	08004bd5 	.word	0x08004bd5
 8004b28:	08004bd5 	.word	0x08004bd5
 8004b2c:	08004bd5 	.word	0x08004bd5
 8004b30:	08004bd5 	.word	0x08004bd5
 8004b34:	08004bd5 	.word	0x08004bd5
 8004b38:	08004bd5 	.word	0x08004bd5
 8004b3c:	08004bd5 	.word	0x08004bd5
 8004b40:	08004bd5 	.word	0x08004bd5
 8004b44:	08004bd5 	.word	0x08004bd5
 8004b48:	08004bd5 	.word	0x08004bd5
 8004b4c:	08004bd5 	.word	0x08004bd5
 8004b50:	08004bd5 	.word	0x08004bd5
 8004b54:	08004bd5 	.word	0x08004bd5
 8004b58:	08004ba9 	.word	0x08004ba9
 8004b5c:	08004bd5 	.word	0x08004bd5
 8004b60:	08004bd5 	.word	0x08004bd5
 8004b64:	08004bd5 	.word	0x08004bd5
 8004b68:	08004bd5 	.word	0x08004bd5
 8004b6c:	08004bd5 	.word	0x08004bd5
 8004b70:	08004bd5 	.word	0x08004bd5
 8004b74:	08004bd5 	.word	0x08004bd5
 8004b78:	08004bd5 	.word	0x08004bd5
 8004b7c:	08004bd5 	.word	0x08004bd5
 8004b80:	08004ba3 	.word	0x08004ba3
 8004b84:	2b64      	cmp	r3, #100	; 0x64
 8004b86:	d009      	beq.n	8004b9c <Save_EEPROM+0xa9c>
 8004b88:	e024      	b.n	8004bd4 <Save_EEPROM+0xad4>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	74fb      	strb	r3, [r7, #19]
 8004b8e:	e023      	b.n	8004bd8 <Save_EEPROM+0xad8>
 8004b90:	2302      	movs	r3, #2
 8004b92:	74fb      	strb	r3, [r7, #19]
 8004b94:	e020      	b.n	8004bd8 <Save_EEPROM+0xad8>
 8004b96:	2303      	movs	r3, #3
 8004b98:	74fb      	strb	r3, [r7, #19]
 8004b9a:	e01d      	b.n	8004bd8 <Save_EEPROM+0xad8>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	74fb      	strb	r3, [r7, #19]
 8004ba0:	e01a      	b.n	8004bd8 <Save_EEPROM+0xad8>
 8004ba2:	2305      	movs	r3, #5
 8004ba4:	74fb      	strb	r3, [r7, #19]
 8004ba6:	e017      	b.n	8004bd8 <Save_EEPROM+0xad8>
 8004ba8:	2306      	movs	r3, #6
 8004baa:	74fb      	strb	r3, [r7, #19]
 8004bac:	e014      	b.n	8004bd8 <Save_EEPROM+0xad8>
 8004bae:	2307      	movs	r3, #7
 8004bb0:	74fb      	strb	r3, [r7, #19]
 8004bb2:	e011      	b.n	8004bd8 <Save_EEPROM+0xad8>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	74fb      	strb	r3, [r7, #19]
 8004bb8:	e00e      	b.n	8004bd8 <Save_EEPROM+0xad8>
 8004bba:	2309      	movs	r3, #9
 8004bbc:	74fb      	strb	r3, [r7, #19]
 8004bbe:	e00b      	b.n	8004bd8 <Save_EEPROM+0xad8>
 8004bc0:	230a      	movs	r3, #10
 8004bc2:	74fb      	strb	r3, [r7, #19]
 8004bc4:	e008      	b.n	8004bd8 <Save_EEPROM+0xad8>
 8004bc6:	230b      	movs	r3, #11
 8004bc8:	74fb      	strb	r3, [r7, #19]
 8004bca:	e005      	b.n	8004bd8 <Save_EEPROM+0xad8>
 8004bcc:	20002c04 	.word	0x20002c04
 8004bd0:	200018fc 	.word	0x200018fc
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	74fb      	strb	r3, [r7, #19]
 8004bd8:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[8], perCAN[ANALOG_5_8]);
 8004bda:	4baa      	ldr	r3, [pc, #680]	; (8004e84 <Save_EEPROM+0xd84>)
 8004bdc:	885b      	ldrh	r3, [r3, #2]
 8004bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004be2:	f000 8082 	beq.w	8004cea <Save_EEPROM+0xbea>
 8004be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bea:	f300 809f 	bgt.w	8004d2c <Save_EEPROM+0xc2c>
 8004bee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004bf2:	d07d      	beq.n	8004cf0 <Save_EEPROM+0xbf0>
 8004bf4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004bf8:	f300 8098 	bgt.w	8004d2c <Save_EEPROM+0xc2c>
 8004bfc:	2bc8      	cmp	r3, #200	; 0xc8
 8004bfe:	d07a      	beq.n	8004cf6 <Save_EEPROM+0xbf6>
 8004c00:	2bc8      	cmp	r3, #200	; 0xc8
 8004c02:	f300 8093 	bgt.w	8004d2c <Save_EEPROM+0xc2c>
 8004c06:	2b32      	cmp	r3, #50	; 0x32
 8004c08:	dc6c      	bgt.n	8004ce4 <Save_EEPROM+0xbe4>
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	f2c0 808e 	blt.w	8004d2c <Save_EEPROM+0xc2c>
 8004c10:	3b02      	subs	r3, #2
 8004c12:	2b30      	cmp	r3, #48	; 0x30
 8004c14:	f200 808a 	bhi.w	8004d2c <Save_EEPROM+0xc2c>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <Save_EEPROM+0xb20>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004d27 	.word	0x08004d27
 8004c24:	08004d21 	.word	0x08004d21
 8004c28:	08004d2d 	.word	0x08004d2d
 8004c2c:	08004d1b 	.word	0x08004d1b
 8004c30:	08004d2d 	.word	0x08004d2d
 8004c34:	08004d2d 	.word	0x08004d2d
 8004c38:	08004d2d 	.word	0x08004d2d
 8004c3c:	08004d2d 	.word	0x08004d2d
 8004c40:	08004d15 	.word	0x08004d15
 8004c44:	08004d2d 	.word	0x08004d2d
 8004c48:	08004d2d 	.word	0x08004d2d
 8004c4c:	08004d2d 	.word	0x08004d2d
 8004c50:	08004d2d 	.word	0x08004d2d
 8004c54:	08004d2d 	.word	0x08004d2d
 8004c58:	08004d2d 	.word	0x08004d2d
 8004c5c:	08004d2d 	.word	0x08004d2d
 8004c60:	08004d2d 	.word	0x08004d2d
 8004c64:	08004d2d 	.word	0x08004d2d
 8004c68:	08004d0f 	.word	0x08004d0f
 8004c6c:	08004d2d 	.word	0x08004d2d
 8004c70:	08004d2d 	.word	0x08004d2d
 8004c74:	08004d2d 	.word	0x08004d2d
 8004c78:	08004d2d 	.word	0x08004d2d
 8004c7c:	08004d2d 	.word	0x08004d2d
 8004c80:	08004d2d 	.word	0x08004d2d
 8004c84:	08004d2d 	.word	0x08004d2d
 8004c88:	08004d2d 	.word	0x08004d2d
 8004c8c:	08004d2d 	.word	0x08004d2d
 8004c90:	08004d2d 	.word	0x08004d2d
 8004c94:	08004d2d 	.word	0x08004d2d
 8004c98:	08004d2d 	.word	0x08004d2d
 8004c9c:	08004d2d 	.word	0x08004d2d
 8004ca0:	08004d2d 	.word	0x08004d2d
 8004ca4:	08004d2d 	.word	0x08004d2d
 8004ca8:	08004d2d 	.word	0x08004d2d
 8004cac:	08004d2d 	.word	0x08004d2d
 8004cb0:	08004d2d 	.word	0x08004d2d
 8004cb4:	08004d2d 	.word	0x08004d2d
 8004cb8:	08004d09 	.word	0x08004d09
 8004cbc:	08004d2d 	.word	0x08004d2d
 8004cc0:	08004d2d 	.word	0x08004d2d
 8004cc4:	08004d2d 	.word	0x08004d2d
 8004cc8:	08004d2d 	.word	0x08004d2d
 8004ccc:	08004d2d 	.word	0x08004d2d
 8004cd0:	08004d2d 	.word	0x08004d2d
 8004cd4:	08004d2d 	.word	0x08004d2d
 8004cd8:	08004d2d 	.word	0x08004d2d
 8004cdc:	08004d2d 	.word	0x08004d2d
 8004ce0:	08004d03 	.word	0x08004d03
 8004ce4:	2b64      	cmp	r3, #100	; 0x64
 8004ce6:	d009      	beq.n	8004cfc <Save_EEPROM+0xbfc>
 8004ce8:	e020      	b.n	8004d2c <Save_EEPROM+0xc2c>
 8004cea:	2301      	movs	r3, #1
 8004cec:	753b      	strb	r3, [r7, #20]
 8004cee:	e01f      	b.n	8004d30 <Save_EEPROM+0xc30>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	753b      	strb	r3, [r7, #20]
 8004cf4:	e01c      	b.n	8004d30 <Save_EEPROM+0xc30>
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	753b      	strb	r3, [r7, #20]
 8004cfa:	e019      	b.n	8004d30 <Save_EEPROM+0xc30>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	753b      	strb	r3, [r7, #20]
 8004d00:	e016      	b.n	8004d30 <Save_EEPROM+0xc30>
 8004d02:	2305      	movs	r3, #5
 8004d04:	753b      	strb	r3, [r7, #20]
 8004d06:	e013      	b.n	8004d30 <Save_EEPROM+0xc30>
 8004d08:	2306      	movs	r3, #6
 8004d0a:	753b      	strb	r3, [r7, #20]
 8004d0c:	e010      	b.n	8004d30 <Save_EEPROM+0xc30>
 8004d0e:	2307      	movs	r3, #7
 8004d10:	753b      	strb	r3, [r7, #20]
 8004d12:	e00d      	b.n	8004d30 <Save_EEPROM+0xc30>
 8004d14:	2308      	movs	r3, #8
 8004d16:	753b      	strb	r3, [r7, #20]
 8004d18:	e00a      	b.n	8004d30 <Save_EEPROM+0xc30>
 8004d1a:	2309      	movs	r3, #9
 8004d1c:	753b      	strb	r3, [r7, #20]
 8004d1e:	e007      	b.n	8004d30 <Save_EEPROM+0xc30>
 8004d20:	230a      	movs	r3, #10
 8004d22:	753b      	strb	r3, [r7, #20]
 8004d24:	e004      	b.n	8004d30 <Save_EEPROM+0xc30>
 8004d26:	230b      	movs	r3, #11
 8004d28:	753b      	strb	r3, [r7, #20]
 8004d2a:	e001      	b.n	8004d30 <Save_EEPROM+0xc30>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	753b      	strb	r3, [r7, #20]
 8004d30:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[9], perCAN[ANALOG_9_12]);
 8004d32:	4b54      	ldr	r3, [pc, #336]	; (8004e84 <Save_EEPROM+0xd84>)
 8004d34:	889b      	ldrh	r3, [r3, #4]
 8004d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d3a:	f000 8082 	beq.w	8004e42 <Save_EEPROM+0xd42>
 8004d3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d42:	f300 80a1 	bgt.w	8004e88 <Save_EEPROM+0xd88>
 8004d46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d4a:	d07d      	beq.n	8004e48 <Save_EEPROM+0xd48>
 8004d4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d50:	f300 809a 	bgt.w	8004e88 <Save_EEPROM+0xd88>
 8004d54:	2bc8      	cmp	r3, #200	; 0xc8
 8004d56:	d07a      	beq.n	8004e4e <Save_EEPROM+0xd4e>
 8004d58:	2bc8      	cmp	r3, #200	; 0xc8
 8004d5a:	f300 8095 	bgt.w	8004e88 <Save_EEPROM+0xd88>
 8004d5e:	2b32      	cmp	r3, #50	; 0x32
 8004d60:	dc6c      	bgt.n	8004e3c <Save_EEPROM+0xd3c>
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	f2c0 8090 	blt.w	8004e88 <Save_EEPROM+0xd88>
 8004d68:	3b02      	subs	r3, #2
 8004d6a:	2b30      	cmp	r3, #48	; 0x30
 8004d6c:	f200 808c 	bhi.w	8004e88 <Save_EEPROM+0xd88>
 8004d70:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <Save_EEPROM+0xc78>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004e7f 	.word	0x08004e7f
 8004d7c:	08004e79 	.word	0x08004e79
 8004d80:	08004e89 	.word	0x08004e89
 8004d84:	08004e73 	.word	0x08004e73
 8004d88:	08004e89 	.word	0x08004e89
 8004d8c:	08004e89 	.word	0x08004e89
 8004d90:	08004e89 	.word	0x08004e89
 8004d94:	08004e89 	.word	0x08004e89
 8004d98:	08004e6d 	.word	0x08004e6d
 8004d9c:	08004e89 	.word	0x08004e89
 8004da0:	08004e89 	.word	0x08004e89
 8004da4:	08004e89 	.word	0x08004e89
 8004da8:	08004e89 	.word	0x08004e89
 8004dac:	08004e89 	.word	0x08004e89
 8004db0:	08004e89 	.word	0x08004e89
 8004db4:	08004e89 	.word	0x08004e89
 8004db8:	08004e89 	.word	0x08004e89
 8004dbc:	08004e89 	.word	0x08004e89
 8004dc0:	08004e67 	.word	0x08004e67
 8004dc4:	08004e89 	.word	0x08004e89
 8004dc8:	08004e89 	.word	0x08004e89
 8004dcc:	08004e89 	.word	0x08004e89
 8004dd0:	08004e89 	.word	0x08004e89
 8004dd4:	08004e89 	.word	0x08004e89
 8004dd8:	08004e89 	.word	0x08004e89
 8004ddc:	08004e89 	.word	0x08004e89
 8004de0:	08004e89 	.word	0x08004e89
 8004de4:	08004e89 	.word	0x08004e89
 8004de8:	08004e89 	.word	0x08004e89
 8004dec:	08004e89 	.word	0x08004e89
 8004df0:	08004e89 	.word	0x08004e89
 8004df4:	08004e89 	.word	0x08004e89
 8004df8:	08004e89 	.word	0x08004e89
 8004dfc:	08004e89 	.word	0x08004e89
 8004e00:	08004e89 	.word	0x08004e89
 8004e04:	08004e89 	.word	0x08004e89
 8004e08:	08004e89 	.word	0x08004e89
 8004e0c:	08004e89 	.word	0x08004e89
 8004e10:	08004e61 	.word	0x08004e61
 8004e14:	08004e89 	.word	0x08004e89
 8004e18:	08004e89 	.word	0x08004e89
 8004e1c:	08004e89 	.word	0x08004e89
 8004e20:	08004e89 	.word	0x08004e89
 8004e24:	08004e89 	.word	0x08004e89
 8004e28:	08004e89 	.word	0x08004e89
 8004e2c:	08004e89 	.word	0x08004e89
 8004e30:	08004e89 	.word	0x08004e89
 8004e34:	08004e89 	.word	0x08004e89
 8004e38:	08004e5b 	.word	0x08004e5b
 8004e3c:	2b64      	cmp	r3, #100	; 0x64
 8004e3e:	d009      	beq.n	8004e54 <Save_EEPROM+0xd54>
 8004e40:	e022      	b.n	8004e88 <Save_EEPROM+0xd88>
 8004e42:	2301      	movs	r3, #1
 8004e44:	757b      	strb	r3, [r7, #21]
 8004e46:	e021      	b.n	8004e8c <Save_EEPROM+0xd8c>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	757b      	strb	r3, [r7, #21]
 8004e4c:	e01e      	b.n	8004e8c <Save_EEPROM+0xd8c>
 8004e4e:	2303      	movs	r3, #3
 8004e50:	757b      	strb	r3, [r7, #21]
 8004e52:	e01b      	b.n	8004e8c <Save_EEPROM+0xd8c>
 8004e54:	2304      	movs	r3, #4
 8004e56:	757b      	strb	r3, [r7, #21]
 8004e58:	e018      	b.n	8004e8c <Save_EEPROM+0xd8c>
 8004e5a:	2305      	movs	r3, #5
 8004e5c:	757b      	strb	r3, [r7, #21]
 8004e5e:	e015      	b.n	8004e8c <Save_EEPROM+0xd8c>
 8004e60:	2306      	movs	r3, #6
 8004e62:	757b      	strb	r3, [r7, #21]
 8004e64:	e012      	b.n	8004e8c <Save_EEPROM+0xd8c>
 8004e66:	2307      	movs	r3, #7
 8004e68:	757b      	strb	r3, [r7, #21]
 8004e6a:	e00f      	b.n	8004e8c <Save_EEPROM+0xd8c>
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	757b      	strb	r3, [r7, #21]
 8004e70:	e00c      	b.n	8004e8c <Save_EEPROM+0xd8c>
 8004e72:	2309      	movs	r3, #9
 8004e74:	757b      	strb	r3, [r7, #21]
 8004e76:	e009      	b.n	8004e8c <Save_EEPROM+0xd8c>
 8004e78:	230a      	movs	r3, #10
 8004e7a:	757b      	strb	r3, [r7, #21]
 8004e7c:	e006      	b.n	8004e8c <Save_EEPROM+0xd8c>
 8004e7e:	230b      	movs	r3, #11
 8004e80:	757b      	strb	r3, [r7, #21]
 8004e82:	e003      	b.n	8004e8c <Save_EEPROM+0xd8c>
 8004e84:	200018fc 	.word	0x200018fc
 8004e88:	2300      	movs	r3, #0
 8004e8a:	757b      	strb	r3, [r7, #21]
 8004e8c:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[10], perCAN[RTC_MSG]);
 8004e8e:	4bc8      	ldr	r3, [pc, #800]	; (80051b0 <Save_EEPROM+0x10b0>)
 8004e90:	88db      	ldrh	r3, [r3, #6]
 8004e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e96:	f000 8082 	beq.w	8004f9e <Save_EEPROM+0xe9e>
 8004e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e9e:	f300 809f 	bgt.w	8004fe0 <Save_EEPROM+0xee0>
 8004ea2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ea6:	d07d      	beq.n	8004fa4 <Save_EEPROM+0xea4>
 8004ea8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004eac:	f300 8098 	bgt.w	8004fe0 <Save_EEPROM+0xee0>
 8004eb0:	2bc8      	cmp	r3, #200	; 0xc8
 8004eb2:	d07a      	beq.n	8004faa <Save_EEPROM+0xeaa>
 8004eb4:	2bc8      	cmp	r3, #200	; 0xc8
 8004eb6:	f300 8093 	bgt.w	8004fe0 <Save_EEPROM+0xee0>
 8004eba:	2b32      	cmp	r3, #50	; 0x32
 8004ebc:	dc6c      	bgt.n	8004f98 <Save_EEPROM+0xe98>
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	f2c0 808e 	blt.w	8004fe0 <Save_EEPROM+0xee0>
 8004ec4:	3b02      	subs	r3, #2
 8004ec6:	2b30      	cmp	r3, #48	; 0x30
 8004ec8:	f200 808a 	bhi.w	8004fe0 <Save_EEPROM+0xee0>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <Save_EEPROM+0xdd4>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004fdb 	.word	0x08004fdb
 8004ed8:	08004fd5 	.word	0x08004fd5
 8004edc:	08004fe1 	.word	0x08004fe1
 8004ee0:	08004fcf 	.word	0x08004fcf
 8004ee4:	08004fe1 	.word	0x08004fe1
 8004ee8:	08004fe1 	.word	0x08004fe1
 8004eec:	08004fe1 	.word	0x08004fe1
 8004ef0:	08004fe1 	.word	0x08004fe1
 8004ef4:	08004fc9 	.word	0x08004fc9
 8004ef8:	08004fe1 	.word	0x08004fe1
 8004efc:	08004fe1 	.word	0x08004fe1
 8004f00:	08004fe1 	.word	0x08004fe1
 8004f04:	08004fe1 	.word	0x08004fe1
 8004f08:	08004fe1 	.word	0x08004fe1
 8004f0c:	08004fe1 	.word	0x08004fe1
 8004f10:	08004fe1 	.word	0x08004fe1
 8004f14:	08004fe1 	.word	0x08004fe1
 8004f18:	08004fe1 	.word	0x08004fe1
 8004f1c:	08004fc3 	.word	0x08004fc3
 8004f20:	08004fe1 	.word	0x08004fe1
 8004f24:	08004fe1 	.word	0x08004fe1
 8004f28:	08004fe1 	.word	0x08004fe1
 8004f2c:	08004fe1 	.word	0x08004fe1
 8004f30:	08004fe1 	.word	0x08004fe1
 8004f34:	08004fe1 	.word	0x08004fe1
 8004f38:	08004fe1 	.word	0x08004fe1
 8004f3c:	08004fe1 	.word	0x08004fe1
 8004f40:	08004fe1 	.word	0x08004fe1
 8004f44:	08004fe1 	.word	0x08004fe1
 8004f48:	08004fe1 	.word	0x08004fe1
 8004f4c:	08004fe1 	.word	0x08004fe1
 8004f50:	08004fe1 	.word	0x08004fe1
 8004f54:	08004fe1 	.word	0x08004fe1
 8004f58:	08004fe1 	.word	0x08004fe1
 8004f5c:	08004fe1 	.word	0x08004fe1
 8004f60:	08004fe1 	.word	0x08004fe1
 8004f64:	08004fe1 	.word	0x08004fe1
 8004f68:	08004fe1 	.word	0x08004fe1
 8004f6c:	08004fbd 	.word	0x08004fbd
 8004f70:	08004fe1 	.word	0x08004fe1
 8004f74:	08004fe1 	.word	0x08004fe1
 8004f78:	08004fe1 	.word	0x08004fe1
 8004f7c:	08004fe1 	.word	0x08004fe1
 8004f80:	08004fe1 	.word	0x08004fe1
 8004f84:	08004fe1 	.word	0x08004fe1
 8004f88:	08004fe1 	.word	0x08004fe1
 8004f8c:	08004fe1 	.word	0x08004fe1
 8004f90:	08004fe1 	.word	0x08004fe1
 8004f94:	08004fb7 	.word	0x08004fb7
 8004f98:	2b64      	cmp	r3, #100	; 0x64
 8004f9a:	d009      	beq.n	8004fb0 <Save_EEPROM+0xeb0>
 8004f9c:	e020      	b.n	8004fe0 <Save_EEPROM+0xee0>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	75bb      	strb	r3, [r7, #22]
 8004fa2:	e01f      	b.n	8004fe4 <Save_EEPROM+0xee4>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	75bb      	strb	r3, [r7, #22]
 8004fa8:	e01c      	b.n	8004fe4 <Save_EEPROM+0xee4>
 8004faa:	2303      	movs	r3, #3
 8004fac:	75bb      	strb	r3, [r7, #22]
 8004fae:	e019      	b.n	8004fe4 <Save_EEPROM+0xee4>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	75bb      	strb	r3, [r7, #22]
 8004fb4:	e016      	b.n	8004fe4 <Save_EEPROM+0xee4>
 8004fb6:	2305      	movs	r3, #5
 8004fb8:	75bb      	strb	r3, [r7, #22]
 8004fba:	e013      	b.n	8004fe4 <Save_EEPROM+0xee4>
 8004fbc:	2306      	movs	r3, #6
 8004fbe:	75bb      	strb	r3, [r7, #22]
 8004fc0:	e010      	b.n	8004fe4 <Save_EEPROM+0xee4>
 8004fc2:	2307      	movs	r3, #7
 8004fc4:	75bb      	strb	r3, [r7, #22]
 8004fc6:	e00d      	b.n	8004fe4 <Save_EEPROM+0xee4>
 8004fc8:	2308      	movs	r3, #8
 8004fca:	75bb      	strb	r3, [r7, #22]
 8004fcc:	e00a      	b.n	8004fe4 <Save_EEPROM+0xee4>
 8004fce:	2309      	movs	r3, #9
 8004fd0:	75bb      	strb	r3, [r7, #22]
 8004fd2:	e007      	b.n	8004fe4 <Save_EEPROM+0xee4>
 8004fd4:	230a      	movs	r3, #10
 8004fd6:	75bb      	strb	r3, [r7, #22]
 8004fd8:	e004      	b.n	8004fe4 <Save_EEPROM+0xee4>
 8004fda:	230b      	movs	r3, #11
 8004fdc:	75bb      	strb	r3, [r7, #22]
 8004fde:	e001      	b.n	8004fe4 <Save_EEPROM+0xee4>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	75bb      	strb	r3, [r7, #22]
 8004fe4:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[10], perCAN[VERIFY_MSG]);
 8004fe6:	4b72      	ldr	r3, [pc, #456]	; (80051b0 <Save_EEPROM+0x10b0>)
 8004fe8:	891b      	ldrh	r3, [r3, #8]
 8004fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fee:	f000 8082 	beq.w	80050f6 <Save_EEPROM+0xff6>
 8004ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ff6:	f300 809f 	bgt.w	8005138 <Save_EEPROM+0x1038>
 8004ffa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ffe:	d07d      	beq.n	80050fc <Save_EEPROM+0xffc>
 8005000:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005004:	f300 8098 	bgt.w	8005138 <Save_EEPROM+0x1038>
 8005008:	2bc8      	cmp	r3, #200	; 0xc8
 800500a:	d07a      	beq.n	8005102 <Save_EEPROM+0x1002>
 800500c:	2bc8      	cmp	r3, #200	; 0xc8
 800500e:	f300 8093 	bgt.w	8005138 <Save_EEPROM+0x1038>
 8005012:	2b32      	cmp	r3, #50	; 0x32
 8005014:	dc6c      	bgt.n	80050f0 <Save_EEPROM+0xff0>
 8005016:	2b02      	cmp	r3, #2
 8005018:	f2c0 808e 	blt.w	8005138 <Save_EEPROM+0x1038>
 800501c:	3b02      	subs	r3, #2
 800501e:	2b30      	cmp	r3, #48	; 0x30
 8005020:	f200 808a 	bhi.w	8005138 <Save_EEPROM+0x1038>
 8005024:	a201      	add	r2, pc, #4	; (adr r2, 800502c <Save_EEPROM+0xf2c>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	08005133 	.word	0x08005133
 8005030:	0800512d 	.word	0x0800512d
 8005034:	08005139 	.word	0x08005139
 8005038:	08005127 	.word	0x08005127
 800503c:	08005139 	.word	0x08005139
 8005040:	08005139 	.word	0x08005139
 8005044:	08005139 	.word	0x08005139
 8005048:	08005139 	.word	0x08005139
 800504c:	08005121 	.word	0x08005121
 8005050:	08005139 	.word	0x08005139
 8005054:	08005139 	.word	0x08005139
 8005058:	08005139 	.word	0x08005139
 800505c:	08005139 	.word	0x08005139
 8005060:	08005139 	.word	0x08005139
 8005064:	08005139 	.word	0x08005139
 8005068:	08005139 	.word	0x08005139
 800506c:	08005139 	.word	0x08005139
 8005070:	08005139 	.word	0x08005139
 8005074:	0800511b 	.word	0x0800511b
 8005078:	08005139 	.word	0x08005139
 800507c:	08005139 	.word	0x08005139
 8005080:	08005139 	.word	0x08005139
 8005084:	08005139 	.word	0x08005139
 8005088:	08005139 	.word	0x08005139
 800508c:	08005139 	.word	0x08005139
 8005090:	08005139 	.word	0x08005139
 8005094:	08005139 	.word	0x08005139
 8005098:	08005139 	.word	0x08005139
 800509c:	08005139 	.word	0x08005139
 80050a0:	08005139 	.word	0x08005139
 80050a4:	08005139 	.word	0x08005139
 80050a8:	08005139 	.word	0x08005139
 80050ac:	08005139 	.word	0x08005139
 80050b0:	08005139 	.word	0x08005139
 80050b4:	08005139 	.word	0x08005139
 80050b8:	08005139 	.word	0x08005139
 80050bc:	08005139 	.word	0x08005139
 80050c0:	08005139 	.word	0x08005139
 80050c4:	08005115 	.word	0x08005115
 80050c8:	08005139 	.word	0x08005139
 80050cc:	08005139 	.word	0x08005139
 80050d0:	08005139 	.word	0x08005139
 80050d4:	08005139 	.word	0x08005139
 80050d8:	08005139 	.word	0x08005139
 80050dc:	08005139 	.word	0x08005139
 80050e0:	08005139 	.word	0x08005139
 80050e4:	08005139 	.word	0x08005139
 80050e8:	08005139 	.word	0x08005139
 80050ec:	0800510f 	.word	0x0800510f
 80050f0:	2b64      	cmp	r3, #100	; 0x64
 80050f2:	d009      	beq.n	8005108 <Save_EEPROM+0x1008>
 80050f4:	e020      	b.n	8005138 <Save_EEPROM+0x1038>
 80050f6:	2301      	movs	r3, #1
 80050f8:	75bb      	strb	r3, [r7, #22]
 80050fa:	e01f      	b.n	800513c <Save_EEPROM+0x103c>
 80050fc:	2302      	movs	r3, #2
 80050fe:	75bb      	strb	r3, [r7, #22]
 8005100:	e01c      	b.n	800513c <Save_EEPROM+0x103c>
 8005102:	2303      	movs	r3, #3
 8005104:	75bb      	strb	r3, [r7, #22]
 8005106:	e019      	b.n	800513c <Save_EEPROM+0x103c>
 8005108:	2304      	movs	r3, #4
 800510a:	75bb      	strb	r3, [r7, #22]
 800510c:	e016      	b.n	800513c <Save_EEPROM+0x103c>
 800510e:	2305      	movs	r3, #5
 8005110:	75bb      	strb	r3, [r7, #22]
 8005112:	e013      	b.n	800513c <Save_EEPROM+0x103c>
 8005114:	2306      	movs	r3, #6
 8005116:	75bb      	strb	r3, [r7, #22]
 8005118:	e010      	b.n	800513c <Save_EEPROM+0x103c>
 800511a:	2307      	movs	r3, #7
 800511c:	75bb      	strb	r3, [r7, #22]
 800511e:	e00d      	b.n	800513c <Save_EEPROM+0x103c>
 8005120:	2308      	movs	r3, #8
 8005122:	75bb      	strb	r3, [r7, #22]
 8005124:	e00a      	b.n	800513c <Save_EEPROM+0x103c>
 8005126:	2309      	movs	r3, #9
 8005128:	75bb      	strb	r3, [r7, #22]
 800512a:	e007      	b.n	800513c <Save_EEPROM+0x103c>
 800512c:	230a      	movs	r3, #10
 800512e:	75bb      	strb	r3, [r7, #22]
 8005130:	e004      	b.n	800513c <Save_EEPROM+0x103c>
 8005132:	230b      	movs	r3, #11
 8005134:	75bb      	strb	r3, [r7, #22]
 8005136:	e001      	b.n	800513c <Save_EEPROM+0x103c>
 8005138:	2300      	movs	r3, #0
 800513a:	75bb      	strb	r3, [r7, #22]
 800513c:	bf00      	nop

	buffer[12] = inputConfig;
 800513e:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <Save_EEPROM+0x10b4>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	763b      	strb	r3, [r7, #24]
	buffer[13] = thresholdBeacon >> 8;
 8005144:	4b1c      	ldr	r3, [pc, #112]	; (80051b8 <Save_EEPROM+0x10b8>)
 8005146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800514a:	121b      	asrs	r3, r3, #8
 800514c:	b21b      	sxth	r3, r3
 800514e:	b2db      	uxtb	r3, r3
 8005150:	767b      	strb	r3, [r7, #25]
	buffer[14] = thresholdBeacon & 0xff;
 8005152:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <Save_EEPROM+0x10b8>)
 8005154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	76bb      	strb	r3, [r7, #26]
	buffer[15] = thresholdRPM >> 8;
 800515c:	4b17      	ldr	r3, [pc, #92]	; (80051bc <Save_EEPROM+0x10bc>)
 800515e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005162:	121b      	asrs	r3, r3, #8
 8005164:	b21b      	sxth	r3, r3
 8005166:	b2db      	uxtb	r3, r3
 8005168:	76fb      	strb	r3, [r7, #27]
	buffer[16] = thresholdRPM & 0xff;
 800516a:	4b14      	ldr	r3, [pc, #80]	; (80051bc <Save_EEPROM+0x10bc>)
 800516c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	773b      	strb	r3, [r7, #28]
	buffer[17] = thresholdSpeed >> 8;
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <Save_EEPROM+0x10c0>)
 8005176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800517a:	121b      	asrs	r3, r3, #8
 800517c:	b21b      	sxth	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	777b      	strb	r3, [r7, #29]
	buffer[18] = thresholdSpeed & 0xff;
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <Save_EEPROM+0x10c0>)
 8005184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	77bb      	strb	r3, [r7, #30]

	return HAL_I2C_Mem_Write(hi2c, 0xA0, 0x0000, 1, buffer, EEPROM_BUFFER_SIZE, 5);
 800518c:	2305      	movs	r3, #5
 800518e:	9302      	str	r3, [sp, #8]
 8005190:	2311      	movs	r3, #17
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	f107 030c 	add.w	r3, r7, #12
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	2301      	movs	r3, #1
 800519c:	2200      	movs	r2, #0
 800519e:	21a0      	movs	r1, #160	; 0xa0
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f004 f847 	bl	8009234 <HAL_I2C_Mem_Write>
 80051a6:	4603      	mov	r3, r0

//	return HAL_I2C_Master_Transmit(hi2c, 0xA0, buffer, EEPROM_BUFFER_SIZE, 5);
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	200018fc 	.word	0x200018fc
 80051b4:	200018ae 	.word	0x200018ae
 80051b8:	200018f8 	.word	0x200018f8
 80051bc:	2000069a 	.word	0x2000069a
 80051c0:	20002be0 	.word	0x20002be0

080051c4 <Principal_Init>:

void Principal_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
	if(Load_EEPROM(hi2c) != HAL_OK)
 80051d0:	68b8      	ldr	r0, [r7, #8]
 80051d2:	f7fe fb7b 	bl	80038cc <Load_EEPROM>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <Principal_Init+0x1c>
		Principal_Hard_Code_Config();
 80051dc:	f000 fcde 	bl	8005b9c <Principal_Hard_Code_Config>

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_STORE_DATA)
 80051e0:	2101      	movs	r1, #1
 80051e2:	4813      	ldr	r0, [pc, #76]	; (8005230 <Principal_Init+0x6c>)
 80051e4:	f007 fd0c 	bl	800cc00 <HAL_RTCEx_BKUPRead>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f24e 325c 	movw	r2, #58204	; 0xe35c
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d103      	bne.n	80051fa <Principal_Init+0x36>
		flagRTC = RTC_OK;
 80051f2:	4b10      	ldr	r3, [pc, #64]	; (8005234 <Principal_Init+0x70>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e002      	b.n	8005200 <Principal_Init+0x3c>
	else
		flagRTC = RTC_LOST;
 80051fa:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <Principal_Init+0x70>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]

	Principal_Datalogger_Init(&fatfsStruct);
 8005200:	480d      	ldr	r0, [pc, #52]	; (8005238 <Principal_Init+0x74>)
 8005202:	f000 fd1b 	bl	8005c3c <Principal_Datalogger_Init>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[6], 7);
 8005206:	2207      	movs	r2, #7
 8005208:	490c      	ldr	r1, [pc, #48]	; (800523c <Principal_Init+0x78>)
 800520a:	480d      	ldr	r0, [pc, #52]	; (8005240 <Principal_Init+0x7c>)
 800520c:	f001 fdb0 	bl	8006d70 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 6);
 8005210:	2206      	movs	r2, #6
 8005212:	490c      	ldr	r1, [pc, #48]	; (8005244 <Principal_Init+0x80>)
 8005214:	480c      	ldr	r0, [pc, #48]	; (8005248 <Principal_Init+0x84>)
 8005216:	f001 fdab 	bl	8006d70 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f009 fbd4 	bl	800e9c8 <HAL_TIM_Base_Start_IT>

	Principal_CAN_Start(hcan);
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f7fe faab 	bl	800377c <Principal_CAN_Start>
}
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	2000299c 	.word	0x2000299c
 8005234:	200018af 	.word	0x200018af
 8005238:	20000874 	.word	0x20000874
 800523c:	20000744 	.word	0x20000744
 8005240:	200018b0 	.word	0x200018b0
 8005244:	20000738 	.word	0x20000738
 8005248:	20000784 	.word	0x20000784

0800524c <Principal_Receive_Config>:

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data, uint32_t length)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
	HAL_SD_StateTypeDef retVal = HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	75fb      	strb	r3, [r7, #23]

	switch(data[0])
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b03      	cmp	r3, #3
 8005262:	f200 847e 	bhi.w	8005b62 <Principal_Receive_Config+0x916>
 8005266:	a201      	add	r2, pc, #4	; (adr r2, 800526c <Principal_Receive_Config+0x20>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	0800527d 	.word	0x0800527d
 8005270:	08005711 	.word	0x08005711
 8005274:	08005a71 	.word	0x08005a71
 8005278:	08005aef 	.word	0x08005aef
	{
		case 0:
			if(length != 8)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b08      	cmp	r3, #8
 8005280:	f040 8471 	bne.w	8005b66 <Principal_Receive_Config+0x91a>
				break;

			__BUFFER_TO_FREQ(data[1], perMsg[ANALOG_1_4]);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	3301      	adds	r3, #1
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	3b01      	subs	r3, #1
 800528c:	2b0a      	cmp	r3, #10
 800528e:	d847      	bhi.n	8005320 <Principal_Receive_Config+0xd4>
 8005290:	a201      	add	r2, pc, #4	; (adr r2, 8005298 <Principal_Receive_Config+0x4c>)
 8005292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005296:	bf00      	nop
 8005298:	080052c5 	.word	0x080052c5
 800529c:	080052cf 	.word	0x080052cf
 80052a0:	080052d9 	.word	0x080052d9
 80052a4:	080052e1 	.word	0x080052e1
 80052a8:	080052e9 	.word	0x080052e9
 80052ac:	080052f1 	.word	0x080052f1
 80052b0:	080052f9 	.word	0x080052f9
 80052b4:	08005301 	.word	0x08005301
 80052b8:	08005309 	.word	0x08005309
 80052bc:	08005311 	.word	0x08005311
 80052c0:	08005319 	.word	0x08005319
 80052c4:	4ba8      	ldr	r3, [pc, #672]	; (8005568 <Principal_Receive_Config+0x31c>)
 80052c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	e02b      	b.n	8005326 <Principal_Receive_Config+0xda>
 80052ce:	4ba6      	ldr	r3, [pc, #664]	; (8005568 <Principal_Receive_Config+0x31c>)
 80052d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80052d4:	801a      	strh	r2, [r3, #0]
 80052d6:	e026      	b.n	8005326 <Principal_Receive_Config+0xda>
 80052d8:	4ba3      	ldr	r3, [pc, #652]	; (8005568 <Principal_Receive_Config+0x31c>)
 80052da:	22c8      	movs	r2, #200	; 0xc8
 80052dc:	801a      	strh	r2, [r3, #0]
 80052de:	e022      	b.n	8005326 <Principal_Receive_Config+0xda>
 80052e0:	4ba1      	ldr	r3, [pc, #644]	; (8005568 <Principal_Receive_Config+0x31c>)
 80052e2:	2264      	movs	r2, #100	; 0x64
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	e01e      	b.n	8005326 <Principal_Receive_Config+0xda>
 80052e8:	4b9f      	ldr	r3, [pc, #636]	; (8005568 <Principal_Receive_Config+0x31c>)
 80052ea:	2232      	movs	r2, #50	; 0x32
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	e01a      	b.n	8005326 <Principal_Receive_Config+0xda>
 80052f0:	4b9d      	ldr	r3, [pc, #628]	; (8005568 <Principal_Receive_Config+0x31c>)
 80052f2:	2228      	movs	r2, #40	; 0x28
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	e016      	b.n	8005326 <Principal_Receive_Config+0xda>
 80052f8:	4b9b      	ldr	r3, [pc, #620]	; (8005568 <Principal_Receive_Config+0x31c>)
 80052fa:	2214      	movs	r2, #20
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e012      	b.n	8005326 <Principal_Receive_Config+0xda>
 8005300:	4b99      	ldr	r3, [pc, #612]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005302:	220a      	movs	r2, #10
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	e00e      	b.n	8005326 <Principal_Receive_Config+0xda>
 8005308:	4b97      	ldr	r3, [pc, #604]	; (8005568 <Principal_Receive_Config+0x31c>)
 800530a:	2205      	movs	r2, #5
 800530c:	801a      	strh	r2, [r3, #0]
 800530e:	e00a      	b.n	8005326 <Principal_Receive_Config+0xda>
 8005310:	4b95      	ldr	r3, [pc, #596]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005312:	2203      	movs	r2, #3
 8005314:	801a      	strh	r2, [r3, #0]
 8005316:	e006      	b.n	8005326 <Principal_Receive_Config+0xda>
 8005318:	4b93      	ldr	r3, [pc, #588]	; (8005568 <Principal_Receive_Config+0x31c>)
 800531a:	2202      	movs	r2, #2
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	e002      	b.n	8005326 <Principal_Receive_Config+0xda>
 8005320:	4b91      	ldr	r3, [pc, #580]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005322:	2200      	movs	r2, #0
 8005324:	801a      	strh	r2, [r3, #0]
 8005326:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perMsg[ANALOG_5_8]);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	3302      	adds	r3, #2
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	3b01      	subs	r3, #1
 8005330:	2b0a      	cmp	r3, #10
 8005332:	d847      	bhi.n	80053c4 <Principal_Receive_Config+0x178>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <Principal_Receive_Config+0xf0>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005369 	.word	0x08005369
 8005340:	08005373 	.word	0x08005373
 8005344:	0800537d 	.word	0x0800537d
 8005348:	08005385 	.word	0x08005385
 800534c:	0800538d 	.word	0x0800538d
 8005350:	08005395 	.word	0x08005395
 8005354:	0800539d 	.word	0x0800539d
 8005358:	080053a5 	.word	0x080053a5
 800535c:	080053ad 	.word	0x080053ad
 8005360:	080053b5 	.word	0x080053b5
 8005364:	080053bd 	.word	0x080053bd
 8005368:	4b7f      	ldr	r3, [pc, #508]	; (8005568 <Principal_Receive_Config+0x31c>)
 800536a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800536e:	805a      	strh	r2, [r3, #2]
 8005370:	e02b      	b.n	80053ca <Principal_Receive_Config+0x17e>
 8005372:	4b7d      	ldr	r3, [pc, #500]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005374:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005378:	805a      	strh	r2, [r3, #2]
 800537a:	e026      	b.n	80053ca <Principal_Receive_Config+0x17e>
 800537c:	4b7a      	ldr	r3, [pc, #488]	; (8005568 <Principal_Receive_Config+0x31c>)
 800537e:	22c8      	movs	r2, #200	; 0xc8
 8005380:	805a      	strh	r2, [r3, #2]
 8005382:	e022      	b.n	80053ca <Principal_Receive_Config+0x17e>
 8005384:	4b78      	ldr	r3, [pc, #480]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005386:	2264      	movs	r2, #100	; 0x64
 8005388:	805a      	strh	r2, [r3, #2]
 800538a:	e01e      	b.n	80053ca <Principal_Receive_Config+0x17e>
 800538c:	4b76      	ldr	r3, [pc, #472]	; (8005568 <Principal_Receive_Config+0x31c>)
 800538e:	2232      	movs	r2, #50	; 0x32
 8005390:	805a      	strh	r2, [r3, #2]
 8005392:	e01a      	b.n	80053ca <Principal_Receive_Config+0x17e>
 8005394:	4b74      	ldr	r3, [pc, #464]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005396:	2228      	movs	r2, #40	; 0x28
 8005398:	805a      	strh	r2, [r3, #2]
 800539a:	e016      	b.n	80053ca <Principal_Receive_Config+0x17e>
 800539c:	4b72      	ldr	r3, [pc, #456]	; (8005568 <Principal_Receive_Config+0x31c>)
 800539e:	2214      	movs	r2, #20
 80053a0:	805a      	strh	r2, [r3, #2]
 80053a2:	e012      	b.n	80053ca <Principal_Receive_Config+0x17e>
 80053a4:	4b70      	ldr	r3, [pc, #448]	; (8005568 <Principal_Receive_Config+0x31c>)
 80053a6:	220a      	movs	r2, #10
 80053a8:	805a      	strh	r2, [r3, #2]
 80053aa:	e00e      	b.n	80053ca <Principal_Receive_Config+0x17e>
 80053ac:	4b6e      	ldr	r3, [pc, #440]	; (8005568 <Principal_Receive_Config+0x31c>)
 80053ae:	2205      	movs	r2, #5
 80053b0:	805a      	strh	r2, [r3, #2]
 80053b2:	e00a      	b.n	80053ca <Principal_Receive_Config+0x17e>
 80053b4:	4b6c      	ldr	r3, [pc, #432]	; (8005568 <Principal_Receive_Config+0x31c>)
 80053b6:	2203      	movs	r2, #3
 80053b8:	805a      	strh	r2, [r3, #2]
 80053ba:	e006      	b.n	80053ca <Principal_Receive_Config+0x17e>
 80053bc:	4b6a      	ldr	r3, [pc, #424]	; (8005568 <Principal_Receive_Config+0x31c>)
 80053be:	2202      	movs	r2, #2
 80053c0:	805a      	strh	r2, [r3, #2]
 80053c2:	e002      	b.n	80053ca <Principal_Receive_Config+0x17e>
 80053c4:	4b68      	ldr	r3, [pc, #416]	; (8005568 <Principal_Receive_Config+0x31c>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	805a      	strh	r2, [r3, #2]
 80053ca:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perMsg[ANALOG_9_12]);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	3303      	adds	r3, #3
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	2b0a      	cmp	r3, #10
 80053d6:	d847      	bhi.n	8005468 <Principal_Receive_Config+0x21c>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <Principal_Receive_Config+0x194>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	0800540d 	.word	0x0800540d
 80053e4:	08005417 	.word	0x08005417
 80053e8:	08005421 	.word	0x08005421
 80053ec:	08005429 	.word	0x08005429
 80053f0:	08005431 	.word	0x08005431
 80053f4:	08005439 	.word	0x08005439
 80053f8:	08005441 	.word	0x08005441
 80053fc:	08005449 	.word	0x08005449
 8005400:	08005451 	.word	0x08005451
 8005404:	08005459 	.word	0x08005459
 8005408:	08005461 	.word	0x08005461
 800540c:	4b56      	ldr	r3, [pc, #344]	; (8005568 <Principal_Receive_Config+0x31c>)
 800540e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005412:	809a      	strh	r2, [r3, #4]
 8005414:	e02b      	b.n	800546e <Principal_Receive_Config+0x222>
 8005416:	4b54      	ldr	r3, [pc, #336]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005418:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800541c:	809a      	strh	r2, [r3, #4]
 800541e:	e026      	b.n	800546e <Principal_Receive_Config+0x222>
 8005420:	4b51      	ldr	r3, [pc, #324]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005422:	22c8      	movs	r2, #200	; 0xc8
 8005424:	809a      	strh	r2, [r3, #4]
 8005426:	e022      	b.n	800546e <Principal_Receive_Config+0x222>
 8005428:	4b4f      	ldr	r3, [pc, #316]	; (8005568 <Principal_Receive_Config+0x31c>)
 800542a:	2264      	movs	r2, #100	; 0x64
 800542c:	809a      	strh	r2, [r3, #4]
 800542e:	e01e      	b.n	800546e <Principal_Receive_Config+0x222>
 8005430:	4b4d      	ldr	r3, [pc, #308]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005432:	2232      	movs	r2, #50	; 0x32
 8005434:	809a      	strh	r2, [r3, #4]
 8005436:	e01a      	b.n	800546e <Principal_Receive_Config+0x222>
 8005438:	4b4b      	ldr	r3, [pc, #300]	; (8005568 <Principal_Receive_Config+0x31c>)
 800543a:	2228      	movs	r2, #40	; 0x28
 800543c:	809a      	strh	r2, [r3, #4]
 800543e:	e016      	b.n	800546e <Principal_Receive_Config+0x222>
 8005440:	4b49      	ldr	r3, [pc, #292]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005442:	2214      	movs	r2, #20
 8005444:	809a      	strh	r2, [r3, #4]
 8005446:	e012      	b.n	800546e <Principal_Receive_Config+0x222>
 8005448:	4b47      	ldr	r3, [pc, #284]	; (8005568 <Principal_Receive_Config+0x31c>)
 800544a:	220a      	movs	r2, #10
 800544c:	809a      	strh	r2, [r3, #4]
 800544e:	e00e      	b.n	800546e <Principal_Receive_Config+0x222>
 8005450:	4b45      	ldr	r3, [pc, #276]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005452:	2205      	movs	r2, #5
 8005454:	809a      	strh	r2, [r3, #4]
 8005456:	e00a      	b.n	800546e <Principal_Receive_Config+0x222>
 8005458:	4b43      	ldr	r3, [pc, #268]	; (8005568 <Principal_Receive_Config+0x31c>)
 800545a:	2203      	movs	r2, #3
 800545c:	809a      	strh	r2, [r3, #4]
 800545e:	e006      	b.n	800546e <Principal_Receive_Config+0x222>
 8005460:	4b41      	ldr	r3, [pc, #260]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005462:	2202      	movs	r2, #2
 8005464:	809a      	strh	r2, [r3, #4]
 8005466:	e002      	b.n	800546e <Principal_Receive_Config+0x222>
 8005468:	4b3f      	ldr	r3, [pc, #252]	; (8005568 <Principal_Receive_Config+0x31c>)
 800546a:	2200      	movs	r2, #0
 800546c:	809a      	strh	r2, [r3, #4]
 800546e:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perMsg[RTC_MSG]);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	3304      	adds	r3, #4
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	3b01      	subs	r3, #1
 8005478:	2b0a      	cmp	r3, #10
 800547a:	d847      	bhi.n	800550c <Principal_Receive_Config+0x2c0>
 800547c:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <Principal_Receive_Config+0x238>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	080054b1 	.word	0x080054b1
 8005488:	080054bb 	.word	0x080054bb
 800548c:	080054c5 	.word	0x080054c5
 8005490:	080054cd 	.word	0x080054cd
 8005494:	080054d5 	.word	0x080054d5
 8005498:	080054dd 	.word	0x080054dd
 800549c:	080054e5 	.word	0x080054e5
 80054a0:	080054ed 	.word	0x080054ed
 80054a4:	080054f5 	.word	0x080054f5
 80054a8:	080054fd 	.word	0x080054fd
 80054ac:	08005505 	.word	0x08005505
 80054b0:	4b2d      	ldr	r3, [pc, #180]	; (8005568 <Principal_Receive_Config+0x31c>)
 80054b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054b6:	80da      	strh	r2, [r3, #6]
 80054b8:	e02b      	b.n	8005512 <Principal_Receive_Config+0x2c6>
 80054ba:	4b2b      	ldr	r3, [pc, #172]	; (8005568 <Principal_Receive_Config+0x31c>)
 80054bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80054c0:	80da      	strh	r2, [r3, #6]
 80054c2:	e026      	b.n	8005512 <Principal_Receive_Config+0x2c6>
 80054c4:	4b28      	ldr	r3, [pc, #160]	; (8005568 <Principal_Receive_Config+0x31c>)
 80054c6:	22c8      	movs	r2, #200	; 0xc8
 80054c8:	80da      	strh	r2, [r3, #6]
 80054ca:	e022      	b.n	8005512 <Principal_Receive_Config+0x2c6>
 80054cc:	4b26      	ldr	r3, [pc, #152]	; (8005568 <Principal_Receive_Config+0x31c>)
 80054ce:	2264      	movs	r2, #100	; 0x64
 80054d0:	80da      	strh	r2, [r3, #6]
 80054d2:	e01e      	b.n	8005512 <Principal_Receive_Config+0x2c6>
 80054d4:	4b24      	ldr	r3, [pc, #144]	; (8005568 <Principal_Receive_Config+0x31c>)
 80054d6:	2232      	movs	r2, #50	; 0x32
 80054d8:	80da      	strh	r2, [r3, #6]
 80054da:	e01a      	b.n	8005512 <Principal_Receive_Config+0x2c6>
 80054dc:	4b22      	ldr	r3, [pc, #136]	; (8005568 <Principal_Receive_Config+0x31c>)
 80054de:	2228      	movs	r2, #40	; 0x28
 80054e0:	80da      	strh	r2, [r3, #6]
 80054e2:	e016      	b.n	8005512 <Principal_Receive_Config+0x2c6>
 80054e4:	4b20      	ldr	r3, [pc, #128]	; (8005568 <Principal_Receive_Config+0x31c>)
 80054e6:	2214      	movs	r2, #20
 80054e8:	80da      	strh	r2, [r3, #6]
 80054ea:	e012      	b.n	8005512 <Principal_Receive_Config+0x2c6>
 80054ec:	4b1e      	ldr	r3, [pc, #120]	; (8005568 <Principal_Receive_Config+0x31c>)
 80054ee:	220a      	movs	r2, #10
 80054f0:	80da      	strh	r2, [r3, #6]
 80054f2:	e00e      	b.n	8005512 <Principal_Receive_Config+0x2c6>
 80054f4:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <Principal_Receive_Config+0x31c>)
 80054f6:	2205      	movs	r2, #5
 80054f8:	80da      	strh	r2, [r3, #6]
 80054fa:	e00a      	b.n	8005512 <Principal_Receive_Config+0x2c6>
 80054fc:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <Principal_Receive_Config+0x31c>)
 80054fe:	2203      	movs	r2, #3
 8005500:	80da      	strh	r2, [r3, #6]
 8005502:	e006      	b.n	8005512 <Principal_Receive_Config+0x2c6>
 8005504:	4b18      	ldr	r3, [pc, #96]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005506:	2202      	movs	r2, #2
 8005508:	80da      	strh	r2, [r3, #6]
 800550a:	e002      	b.n	8005512 <Principal_Receive_Config+0x2c6>
 800550c:	4b16      	ldr	r3, [pc, #88]	; (8005568 <Principal_Receive_Config+0x31c>)
 800550e:	2200      	movs	r2, #0
 8005510:	80da      	strh	r2, [r3, #6]
 8005512:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perMsg[VERIFY_MSG]);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	3305      	adds	r3, #5
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	3b01      	subs	r3, #1
 800551c:	2b0a      	cmp	r3, #10
 800551e:	d849      	bhi.n	80055b4 <Principal_Receive_Config+0x368>
 8005520:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <Principal_Receive_Config+0x2dc>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	08005555 	.word	0x08005555
 800552c:	0800555f 	.word	0x0800555f
 8005530:	0800556d 	.word	0x0800556d
 8005534:	08005575 	.word	0x08005575
 8005538:	0800557d 	.word	0x0800557d
 800553c:	08005585 	.word	0x08005585
 8005540:	0800558d 	.word	0x0800558d
 8005544:	08005595 	.word	0x08005595
 8005548:	0800559d 	.word	0x0800559d
 800554c:	080055a5 	.word	0x080055a5
 8005550:	080055ad 	.word	0x080055ad
 8005554:	4b04      	ldr	r3, [pc, #16]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800555a:	811a      	strh	r2, [r3, #8]
 800555c:	e02d      	b.n	80055ba <Principal_Receive_Config+0x36e>
 800555e:	4b02      	ldr	r3, [pc, #8]	; (8005568 <Principal_Receive_Config+0x31c>)
 8005560:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005564:	811a      	strh	r2, [r3, #8]
 8005566:	e028      	b.n	80055ba <Principal_Receive_Config+0x36e>
 8005568:	20002c04 	.word	0x20002c04
 800556c:	4baa      	ldr	r3, [pc, #680]	; (8005818 <Principal_Receive_Config+0x5cc>)
 800556e:	22c8      	movs	r2, #200	; 0xc8
 8005570:	811a      	strh	r2, [r3, #8]
 8005572:	e022      	b.n	80055ba <Principal_Receive_Config+0x36e>
 8005574:	4ba8      	ldr	r3, [pc, #672]	; (8005818 <Principal_Receive_Config+0x5cc>)
 8005576:	2264      	movs	r2, #100	; 0x64
 8005578:	811a      	strh	r2, [r3, #8]
 800557a:	e01e      	b.n	80055ba <Principal_Receive_Config+0x36e>
 800557c:	4ba6      	ldr	r3, [pc, #664]	; (8005818 <Principal_Receive_Config+0x5cc>)
 800557e:	2232      	movs	r2, #50	; 0x32
 8005580:	811a      	strh	r2, [r3, #8]
 8005582:	e01a      	b.n	80055ba <Principal_Receive_Config+0x36e>
 8005584:	4ba4      	ldr	r3, [pc, #656]	; (8005818 <Principal_Receive_Config+0x5cc>)
 8005586:	2228      	movs	r2, #40	; 0x28
 8005588:	811a      	strh	r2, [r3, #8]
 800558a:	e016      	b.n	80055ba <Principal_Receive_Config+0x36e>
 800558c:	4ba2      	ldr	r3, [pc, #648]	; (8005818 <Principal_Receive_Config+0x5cc>)
 800558e:	2214      	movs	r2, #20
 8005590:	811a      	strh	r2, [r3, #8]
 8005592:	e012      	b.n	80055ba <Principal_Receive_Config+0x36e>
 8005594:	4ba0      	ldr	r3, [pc, #640]	; (8005818 <Principal_Receive_Config+0x5cc>)
 8005596:	220a      	movs	r2, #10
 8005598:	811a      	strh	r2, [r3, #8]
 800559a:	e00e      	b.n	80055ba <Principal_Receive_Config+0x36e>
 800559c:	4b9e      	ldr	r3, [pc, #632]	; (8005818 <Principal_Receive_Config+0x5cc>)
 800559e:	2205      	movs	r2, #5
 80055a0:	811a      	strh	r2, [r3, #8]
 80055a2:	e00a      	b.n	80055ba <Principal_Receive_Config+0x36e>
 80055a4:	4b9c      	ldr	r3, [pc, #624]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80055a6:	2203      	movs	r2, #3
 80055a8:	811a      	strh	r2, [r3, #8]
 80055aa:	e006      	b.n	80055ba <Principal_Receive_Config+0x36e>
 80055ac:	4b9a      	ldr	r3, [pc, #616]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80055ae:	2202      	movs	r2, #2
 80055b0:	811a      	strh	r2, [r3, #8]
 80055b2:	e002      	b.n	80055ba <Principal_Receive_Config+0x36e>
 80055b4:	4b98      	ldr	r3, [pc, #608]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	811a      	strh	r2, [r3, #8]
 80055ba:	bf00      	nop
			__BUFFER_TO_FREQ(data[6], perMsg[ECU_SAVE]);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	3306      	adds	r3, #6
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	2b0a      	cmp	r3, #10
 80055c6:	d847      	bhi.n	8005658 <Principal_Receive_Config+0x40c>
 80055c8:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <Principal_Receive_Config+0x384>)
 80055ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ce:	bf00      	nop
 80055d0:	080055fd 	.word	0x080055fd
 80055d4:	08005607 	.word	0x08005607
 80055d8:	08005611 	.word	0x08005611
 80055dc:	08005619 	.word	0x08005619
 80055e0:	08005621 	.word	0x08005621
 80055e4:	08005629 	.word	0x08005629
 80055e8:	08005631 	.word	0x08005631
 80055ec:	08005639 	.word	0x08005639
 80055f0:	08005641 	.word	0x08005641
 80055f4:	08005649 	.word	0x08005649
 80055f8:	08005651 	.word	0x08005651
 80055fc:	4b86      	ldr	r3, [pc, #536]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80055fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005602:	819a      	strh	r2, [r3, #12]
 8005604:	e02b      	b.n	800565e <Principal_Receive_Config+0x412>
 8005606:	4b84      	ldr	r3, [pc, #528]	; (8005818 <Principal_Receive_Config+0x5cc>)
 8005608:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800560c:	819a      	strh	r2, [r3, #12]
 800560e:	e026      	b.n	800565e <Principal_Receive_Config+0x412>
 8005610:	4b81      	ldr	r3, [pc, #516]	; (8005818 <Principal_Receive_Config+0x5cc>)
 8005612:	22c8      	movs	r2, #200	; 0xc8
 8005614:	819a      	strh	r2, [r3, #12]
 8005616:	e022      	b.n	800565e <Principal_Receive_Config+0x412>
 8005618:	4b7f      	ldr	r3, [pc, #508]	; (8005818 <Principal_Receive_Config+0x5cc>)
 800561a:	2264      	movs	r2, #100	; 0x64
 800561c:	819a      	strh	r2, [r3, #12]
 800561e:	e01e      	b.n	800565e <Principal_Receive_Config+0x412>
 8005620:	4b7d      	ldr	r3, [pc, #500]	; (8005818 <Principal_Receive_Config+0x5cc>)
 8005622:	2232      	movs	r2, #50	; 0x32
 8005624:	819a      	strh	r2, [r3, #12]
 8005626:	e01a      	b.n	800565e <Principal_Receive_Config+0x412>
 8005628:	4b7b      	ldr	r3, [pc, #492]	; (8005818 <Principal_Receive_Config+0x5cc>)
 800562a:	2228      	movs	r2, #40	; 0x28
 800562c:	819a      	strh	r2, [r3, #12]
 800562e:	e016      	b.n	800565e <Principal_Receive_Config+0x412>
 8005630:	4b79      	ldr	r3, [pc, #484]	; (8005818 <Principal_Receive_Config+0x5cc>)
 8005632:	2214      	movs	r2, #20
 8005634:	819a      	strh	r2, [r3, #12]
 8005636:	e012      	b.n	800565e <Principal_Receive_Config+0x412>
 8005638:	4b77      	ldr	r3, [pc, #476]	; (8005818 <Principal_Receive_Config+0x5cc>)
 800563a:	220a      	movs	r2, #10
 800563c:	819a      	strh	r2, [r3, #12]
 800563e:	e00e      	b.n	800565e <Principal_Receive_Config+0x412>
 8005640:	4b75      	ldr	r3, [pc, #468]	; (8005818 <Principal_Receive_Config+0x5cc>)
 8005642:	2205      	movs	r2, #5
 8005644:	819a      	strh	r2, [r3, #12]
 8005646:	e00a      	b.n	800565e <Principal_Receive_Config+0x412>
 8005648:	4b73      	ldr	r3, [pc, #460]	; (8005818 <Principal_Receive_Config+0x5cc>)
 800564a:	2203      	movs	r2, #3
 800564c:	819a      	strh	r2, [r3, #12]
 800564e:	e006      	b.n	800565e <Principal_Receive_Config+0x412>
 8005650:	4b71      	ldr	r3, [pc, #452]	; (8005818 <Principal_Receive_Config+0x5cc>)
 8005652:	2202      	movs	r2, #2
 8005654:	819a      	strh	r2, [r3, #12]
 8005656:	e002      	b.n	800565e <Principal_Receive_Config+0x412>
 8005658:	4b6f      	ldr	r3, [pc, #444]	; (8005818 <Principal_Receive_Config+0x5cc>)
 800565a:	2200      	movs	r2, #0
 800565c:	819a      	strh	r2, [r3, #12]
 800565e:	bf00      	nop
			__BUFFER_TO_FREQ(data[7], perMsg[PDM_SAVE]);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	3307      	adds	r3, #7
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	3b01      	subs	r3, #1
 8005668:	2b0a      	cmp	r3, #10
 800566a:	d847      	bhi.n	80056fc <Principal_Receive_Config+0x4b0>
 800566c:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <Principal_Receive_Config+0x428>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	080056a1 	.word	0x080056a1
 8005678:	080056ab 	.word	0x080056ab
 800567c:	080056b5 	.word	0x080056b5
 8005680:	080056bd 	.word	0x080056bd
 8005684:	080056c5 	.word	0x080056c5
 8005688:	080056cd 	.word	0x080056cd
 800568c:	080056d5 	.word	0x080056d5
 8005690:	080056dd 	.word	0x080056dd
 8005694:	080056e5 	.word	0x080056e5
 8005698:	080056ed 	.word	0x080056ed
 800569c:	080056f5 	.word	0x080056f5
 80056a0:	4b5d      	ldr	r3, [pc, #372]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80056a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056a6:	81da      	strh	r2, [r3, #14]
 80056a8:	e02b      	b.n	8005702 <Principal_Receive_Config+0x4b6>
 80056aa:	4b5b      	ldr	r3, [pc, #364]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80056ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056b0:	81da      	strh	r2, [r3, #14]
 80056b2:	e026      	b.n	8005702 <Principal_Receive_Config+0x4b6>
 80056b4:	4b58      	ldr	r3, [pc, #352]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80056b6:	22c8      	movs	r2, #200	; 0xc8
 80056b8:	81da      	strh	r2, [r3, #14]
 80056ba:	e022      	b.n	8005702 <Principal_Receive_Config+0x4b6>
 80056bc:	4b56      	ldr	r3, [pc, #344]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80056be:	2264      	movs	r2, #100	; 0x64
 80056c0:	81da      	strh	r2, [r3, #14]
 80056c2:	e01e      	b.n	8005702 <Principal_Receive_Config+0x4b6>
 80056c4:	4b54      	ldr	r3, [pc, #336]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80056c6:	2232      	movs	r2, #50	; 0x32
 80056c8:	81da      	strh	r2, [r3, #14]
 80056ca:	e01a      	b.n	8005702 <Principal_Receive_Config+0x4b6>
 80056cc:	4b52      	ldr	r3, [pc, #328]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80056ce:	2228      	movs	r2, #40	; 0x28
 80056d0:	81da      	strh	r2, [r3, #14]
 80056d2:	e016      	b.n	8005702 <Principal_Receive_Config+0x4b6>
 80056d4:	4b50      	ldr	r3, [pc, #320]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80056d6:	2214      	movs	r2, #20
 80056d8:	81da      	strh	r2, [r3, #14]
 80056da:	e012      	b.n	8005702 <Principal_Receive_Config+0x4b6>
 80056dc:	4b4e      	ldr	r3, [pc, #312]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80056de:	220a      	movs	r2, #10
 80056e0:	81da      	strh	r2, [r3, #14]
 80056e2:	e00e      	b.n	8005702 <Principal_Receive_Config+0x4b6>
 80056e4:	4b4c      	ldr	r3, [pc, #304]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80056e6:	2205      	movs	r2, #5
 80056e8:	81da      	strh	r2, [r3, #14]
 80056ea:	e00a      	b.n	8005702 <Principal_Receive_Config+0x4b6>
 80056ec:	4b4a      	ldr	r3, [pc, #296]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80056ee:	2203      	movs	r2, #3
 80056f0:	81da      	strh	r2, [r3, #14]
 80056f2:	e006      	b.n	8005702 <Principal_Receive_Config+0x4b6>
 80056f4:	4b48      	ldr	r3, [pc, #288]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80056f6:	2202      	movs	r2, #2
 80056f8:	81da      	strh	r2, [r3, #14]
 80056fa:	e002      	b.n	8005702 <Principal_Receive_Config+0x4b6>
 80056fc:	4b46      	ldr	r3, [pc, #280]	; (8005818 <Principal_Receive_Config+0x5cc>)
 80056fe:	2200      	movs	r2, #0
 8005700:	81da      	strh	r2, [r3, #14]
 8005702:	bf00      	nop

			retVal = Save_EEPROM(hi2c);
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f7fe fcfb 	bl	8004100 <Save_EEPROM>
 800570a:	4603      	mov	r3, r0
 800570c:	75fb      	strb	r3, [r7, #23]
			break;
 800570e:	e231      	b.n	8005b74 <Principal_Receive_Config+0x928>

		case 1:
			if(length != 7)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b07      	cmp	r3, #7
 8005714:	f040 8229 	bne.w	8005b6a <Principal_Receive_Config+0x91e>
				break;

			__BUFFER_TO_FREQ(data[1], perCAN[ANALOG_1_4]);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	3301      	adds	r3, #1
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	3b01      	subs	r3, #1
 8005720:	2b0a      	cmp	r3, #10
 8005722:	d847      	bhi.n	80057b4 <Principal_Receive_Config+0x568>
 8005724:	a201      	add	r2, pc, #4	; (adr r2, 800572c <Principal_Receive_Config+0x4e0>)
 8005726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572a:	bf00      	nop
 800572c:	08005759 	.word	0x08005759
 8005730:	08005763 	.word	0x08005763
 8005734:	0800576d 	.word	0x0800576d
 8005738:	08005775 	.word	0x08005775
 800573c:	0800577d 	.word	0x0800577d
 8005740:	08005785 	.word	0x08005785
 8005744:	0800578d 	.word	0x0800578d
 8005748:	08005795 	.word	0x08005795
 800574c:	0800579d 	.word	0x0800579d
 8005750:	080057a5 	.word	0x080057a5
 8005754:	080057ad 	.word	0x080057ad
 8005758:	4b30      	ldr	r3, [pc, #192]	; (800581c <Principal_Receive_Config+0x5d0>)
 800575a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800575e:	801a      	strh	r2, [r3, #0]
 8005760:	e02b      	b.n	80057ba <Principal_Receive_Config+0x56e>
 8005762:	4b2e      	ldr	r3, [pc, #184]	; (800581c <Principal_Receive_Config+0x5d0>)
 8005764:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005768:	801a      	strh	r2, [r3, #0]
 800576a:	e026      	b.n	80057ba <Principal_Receive_Config+0x56e>
 800576c:	4b2b      	ldr	r3, [pc, #172]	; (800581c <Principal_Receive_Config+0x5d0>)
 800576e:	22c8      	movs	r2, #200	; 0xc8
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	e022      	b.n	80057ba <Principal_Receive_Config+0x56e>
 8005774:	4b29      	ldr	r3, [pc, #164]	; (800581c <Principal_Receive_Config+0x5d0>)
 8005776:	2264      	movs	r2, #100	; 0x64
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	e01e      	b.n	80057ba <Principal_Receive_Config+0x56e>
 800577c:	4b27      	ldr	r3, [pc, #156]	; (800581c <Principal_Receive_Config+0x5d0>)
 800577e:	2232      	movs	r2, #50	; 0x32
 8005780:	801a      	strh	r2, [r3, #0]
 8005782:	e01a      	b.n	80057ba <Principal_Receive_Config+0x56e>
 8005784:	4b25      	ldr	r3, [pc, #148]	; (800581c <Principal_Receive_Config+0x5d0>)
 8005786:	2228      	movs	r2, #40	; 0x28
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	e016      	b.n	80057ba <Principal_Receive_Config+0x56e>
 800578c:	4b23      	ldr	r3, [pc, #140]	; (800581c <Principal_Receive_Config+0x5d0>)
 800578e:	2214      	movs	r2, #20
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	e012      	b.n	80057ba <Principal_Receive_Config+0x56e>
 8005794:	4b21      	ldr	r3, [pc, #132]	; (800581c <Principal_Receive_Config+0x5d0>)
 8005796:	220a      	movs	r2, #10
 8005798:	801a      	strh	r2, [r3, #0]
 800579a:	e00e      	b.n	80057ba <Principal_Receive_Config+0x56e>
 800579c:	4b1f      	ldr	r3, [pc, #124]	; (800581c <Principal_Receive_Config+0x5d0>)
 800579e:	2205      	movs	r2, #5
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	e00a      	b.n	80057ba <Principal_Receive_Config+0x56e>
 80057a4:	4b1d      	ldr	r3, [pc, #116]	; (800581c <Principal_Receive_Config+0x5d0>)
 80057a6:	2203      	movs	r2, #3
 80057a8:	801a      	strh	r2, [r3, #0]
 80057aa:	e006      	b.n	80057ba <Principal_Receive_Config+0x56e>
 80057ac:	4b1b      	ldr	r3, [pc, #108]	; (800581c <Principal_Receive_Config+0x5d0>)
 80057ae:	2202      	movs	r2, #2
 80057b0:	801a      	strh	r2, [r3, #0]
 80057b2:	e002      	b.n	80057ba <Principal_Receive_Config+0x56e>
 80057b4:	4b19      	ldr	r3, [pc, #100]	; (800581c <Principal_Receive_Config+0x5d0>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	801a      	strh	r2, [r3, #0]
 80057ba:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perCAN[ANALOG_5_8]);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	3302      	adds	r3, #2
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	2b0a      	cmp	r3, #10
 80057c6:	d84b      	bhi.n	8005860 <Principal_Receive_Config+0x614>
 80057c8:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <Principal_Receive_Config+0x584>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	080057fd 	.word	0x080057fd
 80057d4:	08005807 	.word	0x08005807
 80057d8:	08005811 	.word	0x08005811
 80057dc:	08005821 	.word	0x08005821
 80057e0:	08005829 	.word	0x08005829
 80057e4:	08005831 	.word	0x08005831
 80057e8:	08005839 	.word	0x08005839
 80057ec:	08005841 	.word	0x08005841
 80057f0:	08005849 	.word	0x08005849
 80057f4:	08005851 	.word	0x08005851
 80057f8:	08005859 	.word	0x08005859
 80057fc:	4b07      	ldr	r3, [pc, #28]	; (800581c <Principal_Receive_Config+0x5d0>)
 80057fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005802:	805a      	strh	r2, [r3, #2]
 8005804:	e02f      	b.n	8005866 <Principal_Receive_Config+0x61a>
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <Principal_Receive_Config+0x5d0>)
 8005808:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800580c:	805a      	strh	r2, [r3, #2]
 800580e:	e02a      	b.n	8005866 <Principal_Receive_Config+0x61a>
 8005810:	4b02      	ldr	r3, [pc, #8]	; (800581c <Principal_Receive_Config+0x5d0>)
 8005812:	22c8      	movs	r2, #200	; 0xc8
 8005814:	805a      	strh	r2, [r3, #2]
 8005816:	e026      	b.n	8005866 <Principal_Receive_Config+0x61a>
 8005818:	20002c04 	.word	0x20002c04
 800581c:	200018fc 	.word	0x200018fc
 8005820:	4b91      	ldr	r3, [pc, #580]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005822:	2264      	movs	r2, #100	; 0x64
 8005824:	805a      	strh	r2, [r3, #2]
 8005826:	e01e      	b.n	8005866 <Principal_Receive_Config+0x61a>
 8005828:	4b8f      	ldr	r3, [pc, #572]	; (8005a68 <Principal_Receive_Config+0x81c>)
 800582a:	2232      	movs	r2, #50	; 0x32
 800582c:	805a      	strh	r2, [r3, #2]
 800582e:	e01a      	b.n	8005866 <Principal_Receive_Config+0x61a>
 8005830:	4b8d      	ldr	r3, [pc, #564]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005832:	2228      	movs	r2, #40	; 0x28
 8005834:	805a      	strh	r2, [r3, #2]
 8005836:	e016      	b.n	8005866 <Principal_Receive_Config+0x61a>
 8005838:	4b8b      	ldr	r3, [pc, #556]	; (8005a68 <Principal_Receive_Config+0x81c>)
 800583a:	2214      	movs	r2, #20
 800583c:	805a      	strh	r2, [r3, #2]
 800583e:	e012      	b.n	8005866 <Principal_Receive_Config+0x61a>
 8005840:	4b89      	ldr	r3, [pc, #548]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005842:	220a      	movs	r2, #10
 8005844:	805a      	strh	r2, [r3, #2]
 8005846:	e00e      	b.n	8005866 <Principal_Receive_Config+0x61a>
 8005848:	4b87      	ldr	r3, [pc, #540]	; (8005a68 <Principal_Receive_Config+0x81c>)
 800584a:	2205      	movs	r2, #5
 800584c:	805a      	strh	r2, [r3, #2]
 800584e:	e00a      	b.n	8005866 <Principal_Receive_Config+0x61a>
 8005850:	4b85      	ldr	r3, [pc, #532]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005852:	2203      	movs	r2, #3
 8005854:	805a      	strh	r2, [r3, #2]
 8005856:	e006      	b.n	8005866 <Principal_Receive_Config+0x61a>
 8005858:	4b83      	ldr	r3, [pc, #524]	; (8005a68 <Principal_Receive_Config+0x81c>)
 800585a:	2202      	movs	r2, #2
 800585c:	805a      	strh	r2, [r3, #2]
 800585e:	e002      	b.n	8005866 <Principal_Receive_Config+0x61a>
 8005860:	4b81      	ldr	r3, [pc, #516]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005862:	2200      	movs	r2, #0
 8005864:	805a      	strh	r2, [r3, #2]
 8005866:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perCAN[ANALOG_9_12]);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	3303      	adds	r3, #3
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	3b01      	subs	r3, #1
 8005870:	2b0a      	cmp	r3, #10
 8005872:	d847      	bhi.n	8005904 <Principal_Receive_Config+0x6b8>
 8005874:	a201      	add	r2, pc, #4	; (adr r2, 800587c <Principal_Receive_Config+0x630>)
 8005876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587a:	bf00      	nop
 800587c:	080058a9 	.word	0x080058a9
 8005880:	080058b3 	.word	0x080058b3
 8005884:	080058bd 	.word	0x080058bd
 8005888:	080058c5 	.word	0x080058c5
 800588c:	080058cd 	.word	0x080058cd
 8005890:	080058d5 	.word	0x080058d5
 8005894:	080058dd 	.word	0x080058dd
 8005898:	080058e5 	.word	0x080058e5
 800589c:	080058ed 	.word	0x080058ed
 80058a0:	080058f5 	.word	0x080058f5
 80058a4:	080058fd 	.word	0x080058fd
 80058a8:	4b6f      	ldr	r3, [pc, #444]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80058aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058ae:	809a      	strh	r2, [r3, #4]
 80058b0:	e02b      	b.n	800590a <Principal_Receive_Config+0x6be>
 80058b2:	4b6d      	ldr	r3, [pc, #436]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80058b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80058b8:	809a      	strh	r2, [r3, #4]
 80058ba:	e026      	b.n	800590a <Principal_Receive_Config+0x6be>
 80058bc:	4b6a      	ldr	r3, [pc, #424]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80058be:	22c8      	movs	r2, #200	; 0xc8
 80058c0:	809a      	strh	r2, [r3, #4]
 80058c2:	e022      	b.n	800590a <Principal_Receive_Config+0x6be>
 80058c4:	4b68      	ldr	r3, [pc, #416]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80058c6:	2264      	movs	r2, #100	; 0x64
 80058c8:	809a      	strh	r2, [r3, #4]
 80058ca:	e01e      	b.n	800590a <Principal_Receive_Config+0x6be>
 80058cc:	4b66      	ldr	r3, [pc, #408]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80058ce:	2232      	movs	r2, #50	; 0x32
 80058d0:	809a      	strh	r2, [r3, #4]
 80058d2:	e01a      	b.n	800590a <Principal_Receive_Config+0x6be>
 80058d4:	4b64      	ldr	r3, [pc, #400]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80058d6:	2228      	movs	r2, #40	; 0x28
 80058d8:	809a      	strh	r2, [r3, #4]
 80058da:	e016      	b.n	800590a <Principal_Receive_Config+0x6be>
 80058dc:	4b62      	ldr	r3, [pc, #392]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80058de:	2214      	movs	r2, #20
 80058e0:	809a      	strh	r2, [r3, #4]
 80058e2:	e012      	b.n	800590a <Principal_Receive_Config+0x6be>
 80058e4:	4b60      	ldr	r3, [pc, #384]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80058e6:	220a      	movs	r2, #10
 80058e8:	809a      	strh	r2, [r3, #4]
 80058ea:	e00e      	b.n	800590a <Principal_Receive_Config+0x6be>
 80058ec:	4b5e      	ldr	r3, [pc, #376]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80058ee:	2205      	movs	r2, #5
 80058f0:	809a      	strh	r2, [r3, #4]
 80058f2:	e00a      	b.n	800590a <Principal_Receive_Config+0x6be>
 80058f4:	4b5c      	ldr	r3, [pc, #368]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80058f6:	2203      	movs	r2, #3
 80058f8:	809a      	strh	r2, [r3, #4]
 80058fa:	e006      	b.n	800590a <Principal_Receive_Config+0x6be>
 80058fc:	4b5a      	ldr	r3, [pc, #360]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80058fe:	2202      	movs	r2, #2
 8005900:	809a      	strh	r2, [r3, #4]
 8005902:	e002      	b.n	800590a <Principal_Receive_Config+0x6be>
 8005904:	4b58      	ldr	r3, [pc, #352]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005906:	2200      	movs	r2, #0
 8005908:	809a      	strh	r2, [r3, #4]
 800590a:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perCAN[RTC_MSG]);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	3304      	adds	r3, #4
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	3b01      	subs	r3, #1
 8005914:	2b0a      	cmp	r3, #10
 8005916:	d847      	bhi.n	80059a8 <Principal_Receive_Config+0x75c>
 8005918:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <Principal_Receive_Config+0x6d4>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	0800594d 	.word	0x0800594d
 8005924:	08005957 	.word	0x08005957
 8005928:	08005961 	.word	0x08005961
 800592c:	08005969 	.word	0x08005969
 8005930:	08005971 	.word	0x08005971
 8005934:	08005979 	.word	0x08005979
 8005938:	08005981 	.word	0x08005981
 800593c:	08005989 	.word	0x08005989
 8005940:	08005991 	.word	0x08005991
 8005944:	08005999 	.word	0x08005999
 8005948:	080059a1 	.word	0x080059a1
 800594c:	4b46      	ldr	r3, [pc, #280]	; (8005a68 <Principal_Receive_Config+0x81c>)
 800594e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005952:	80da      	strh	r2, [r3, #6]
 8005954:	e02b      	b.n	80059ae <Principal_Receive_Config+0x762>
 8005956:	4b44      	ldr	r3, [pc, #272]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005958:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800595c:	80da      	strh	r2, [r3, #6]
 800595e:	e026      	b.n	80059ae <Principal_Receive_Config+0x762>
 8005960:	4b41      	ldr	r3, [pc, #260]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005962:	22c8      	movs	r2, #200	; 0xc8
 8005964:	80da      	strh	r2, [r3, #6]
 8005966:	e022      	b.n	80059ae <Principal_Receive_Config+0x762>
 8005968:	4b3f      	ldr	r3, [pc, #252]	; (8005a68 <Principal_Receive_Config+0x81c>)
 800596a:	2264      	movs	r2, #100	; 0x64
 800596c:	80da      	strh	r2, [r3, #6]
 800596e:	e01e      	b.n	80059ae <Principal_Receive_Config+0x762>
 8005970:	4b3d      	ldr	r3, [pc, #244]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005972:	2232      	movs	r2, #50	; 0x32
 8005974:	80da      	strh	r2, [r3, #6]
 8005976:	e01a      	b.n	80059ae <Principal_Receive_Config+0x762>
 8005978:	4b3b      	ldr	r3, [pc, #236]	; (8005a68 <Principal_Receive_Config+0x81c>)
 800597a:	2228      	movs	r2, #40	; 0x28
 800597c:	80da      	strh	r2, [r3, #6]
 800597e:	e016      	b.n	80059ae <Principal_Receive_Config+0x762>
 8005980:	4b39      	ldr	r3, [pc, #228]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005982:	2214      	movs	r2, #20
 8005984:	80da      	strh	r2, [r3, #6]
 8005986:	e012      	b.n	80059ae <Principal_Receive_Config+0x762>
 8005988:	4b37      	ldr	r3, [pc, #220]	; (8005a68 <Principal_Receive_Config+0x81c>)
 800598a:	220a      	movs	r2, #10
 800598c:	80da      	strh	r2, [r3, #6]
 800598e:	e00e      	b.n	80059ae <Principal_Receive_Config+0x762>
 8005990:	4b35      	ldr	r3, [pc, #212]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005992:	2205      	movs	r2, #5
 8005994:	80da      	strh	r2, [r3, #6]
 8005996:	e00a      	b.n	80059ae <Principal_Receive_Config+0x762>
 8005998:	4b33      	ldr	r3, [pc, #204]	; (8005a68 <Principal_Receive_Config+0x81c>)
 800599a:	2203      	movs	r2, #3
 800599c:	80da      	strh	r2, [r3, #6]
 800599e:	e006      	b.n	80059ae <Principal_Receive_Config+0x762>
 80059a0:	4b31      	ldr	r3, [pc, #196]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80059a2:	2202      	movs	r2, #2
 80059a4:	80da      	strh	r2, [r3, #6]
 80059a6:	e002      	b.n	80059ae <Principal_Receive_Config+0x762>
 80059a8:	4b2f      	ldr	r3, [pc, #188]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	80da      	strh	r2, [r3, #6]
 80059ae:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perCAN[VERIFY_MSG]);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	3305      	adds	r3, #5
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	2b0a      	cmp	r3, #10
 80059ba:	d847      	bhi.n	8005a4c <Principal_Receive_Config+0x800>
 80059bc:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <Principal_Receive_Config+0x778>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	080059f1 	.word	0x080059f1
 80059c8:	080059fb 	.word	0x080059fb
 80059cc:	08005a05 	.word	0x08005a05
 80059d0:	08005a0d 	.word	0x08005a0d
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a1d 	.word	0x08005a1d
 80059dc:	08005a25 	.word	0x08005a25
 80059e0:	08005a2d 	.word	0x08005a2d
 80059e4:	08005a35 	.word	0x08005a35
 80059e8:	08005a3d 	.word	0x08005a3d
 80059ec:	08005a45 	.word	0x08005a45
 80059f0:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80059f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059f6:	811a      	strh	r2, [r3, #8]
 80059f8:	e02b      	b.n	8005a52 <Principal_Receive_Config+0x806>
 80059fa:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <Principal_Receive_Config+0x81c>)
 80059fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005a00:	811a      	strh	r2, [r3, #8]
 8005a02:	e026      	b.n	8005a52 <Principal_Receive_Config+0x806>
 8005a04:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005a06:	22c8      	movs	r2, #200	; 0xc8
 8005a08:	811a      	strh	r2, [r3, #8]
 8005a0a:	e022      	b.n	8005a52 <Principal_Receive_Config+0x806>
 8005a0c:	4b16      	ldr	r3, [pc, #88]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005a0e:	2264      	movs	r2, #100	; 0x64
 8005a10:	811a      	strh	r2, [r3, #8]
 8005a12:	e01e      	b.n	8005a52 <Principal_Receive_Config+0x806>
 8005a14:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005a16:	2232      	movs	r2, #50	; 0x32
 8005a18:	811a      	strh	r2, [r3, #8]
 8005a1a:	e01a      	b.n	8005a52 <Principal_Receive_Config+0x806>
 8005a1c:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005a1e:	2228      	movs	r2, #40	; 0x28
 8005a20:	811a      	strh	r2, [r3, #8]
 8005a22:	e016      	b.n	8005a52 <Principal_Receive_Config+0x806>
 8005a24:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005a26:	2214      	movs	r2, #20
 8005a28:	811a      	strh	r2, [r3, #8]
 8005a2a:	e012      	b.n	8005a52 <Principal_Receive_Config+0x806>
 8005a2c:	4b0e      	ldr	r3, [pc, #56]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005a2e:	220a      	movs	r2, #10
 8005a30:	811a      	strh	r2, [r3, #8]
 8005a32:	e00e      	b.n	8005a52 <Principal_Receive_Config+0x806>
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005a36:	2205      	movs	r2, #5
 8005a38:	811a      	strh	r2, [r3, #8]
 8005a3a:	e00a      	b.n	8005a52 <Principal_Receive_Config+0x806>
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005a3e:	2203      	movs	r2, #3
 8005a40:	811a      	strh	r2, [r3, #8]
 8005a42:	e006      	b.n	8005a52 <Principal_Receive_Config+0x806>
 8005a44:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005a46:	2202      	movs	r2, #2
 8005a48:	811a      	strh	r2, [r3, #8]
 8005a4a:	e002      	b.n	8005a52 <Principal_Receive_Config+0x806>
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <Principal_Receive_Config+0x81c>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	811a      	strh	r2, [r3, #8]
 8005a52:	bf00      	nop
			inputConfig = data[6];
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	799a      	ldrb	r2, [r3, #6]
 8005a58:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <Principal_Receive_Config+0x820>)
 8005a5a:	701a      	strb	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f7fe fb4f 	bl	8004100 <Save_EEPROM>
 8005a62:	4603      	mov	r3, r0
 8005a64:	75fb      	strb	r3, [r7, #23]
			break;
 8005a66:	e085      	b.n	8005b74 <Principal_Receive_Config+0x928>
 8005a68:	200018fc 	.word	0x200018fc
 8005a6c:	200018ae 	.word	0x200018ae

		case 2:
			if(length != 7)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b07      	cmp	r3, #7
 8005a74:	d17b      	bne.n	8005b6e <Principal_Receive_Config+0x922>
				break;

			thresholdBeacon  = data[1] << 8;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	b21a      	sxth	r2, r3
 8005a80:	4b3f      	ldr	r3, [pc, #252]	; (8005b80 <Principal_Receive_Config+0x934>)
 8005a82:	801a      	strh	r2, [r3, #0]
			thresholdBeacon |= data[2] & 0xff;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	3302      	adds	r3, #2
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	b21a      	sxth	r2, r3
 8005a8c:	4b3c      	ldr	r3, [pc, #240]	; (8005b80 <Principal_Receive_Config+0x934>)
 8005a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	b21a      	sxth	r2, r3
 8005a96:	4b3a      	ldr	r3, [pc, #232]	; (8005b80 <Principal_Receive_Config+0x934>)
 8005a98:	801a      	strh	r2, [r3, #0]
			thresholdRPM	 = data[3] << 8;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	3303      	adds	r3, #3
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	b21a      	sxth	r2, r3
 8005aa4:	4b37      	ldr	r3, [pc, #220]	; (8005b84 <Principal_Receive_Config+0x938>)
 8005aa6:	801a      	strh	r2, [r3, #0]
			thresholdRPM	|= data[4] & 0xff;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	b21a      	sxth	r2, r3
 8005ab0:	4b34      	ldr	r3, [pc, #208]	; (8005b84 <Principal_Receive_Config+0x938>)
 8005ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	b21a      	sxth	r2, r3
 8005aba:	4b32      	ldr	r3, [pc, #200]	; (8005b84 <Principal_Receive_Config+0x938>)
 8005abc:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	 = data[5] << 8;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	3305      	adds	r3, #5
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	b21a      	sxth	r2, r3
 8005ac8:	4b2f      	ldr	r3, [pc, #188]	; (8005b88 <Principal_Receive_Config+0x93c>)
 8005aca:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	|= data[6] & 0xff;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	3306      	adds	r3, #6
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	b21a      	sxth	r2, r3
 8005ad4:	4b2c      	ldr	r3, [pc, #176]	; (8005b88 <Principal_Receive_Config+0x93c>)
 8005ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	b21a      	sxth	r2, r3
 8005ade:	4b2a      	ldr	r3, [pc, #168]	; (8005b88 <Principal_Receive_Config+0x93c>)
 8005ae0:	801a      	strh	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7fe fb0c 	bl	8004100 <Save_EEPROM>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	75fb      	strb	r3, [r7, #23]
			break;
 8005aec:	e042      	b.n	8005b74 <Principal_Receive_Config+0x928>

		case 3:
			if(length != 7)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b07      	cmp	r3, #7
 8005af2:	d13e      	bne.n	8005b72 <Principal_Receive_Config+0x926>
				break;

			rtcDate.Year	= data[1];
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	785a      	ldrb	r2, [r3, #1]
 8005af8:	4b24      	ldr	r3, [pc, #144]	; (8005b8c <Principal_Receive_Config+0x940>)
 8005afa:	70da      	strb	r2, [r3, #3]
			rtcDate.Month	= data[2];
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	789a      	ldrb	r2, [r3, #2]
 8005b00:	4b22      	ldr	r3, [pc, #136]	; (8005b8c <Principal_Receive_Config+0x940>)
 8005b02:	705a      	strb	r2, [r3, #1]
			rtcDate.Date	= data[3];
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	78da      	ldrb	r2, [r3, #3]
 8005b08:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <Principal_Receive_Config+0x940>)
 8005b0a:	709a      	strb	r2, [r3, #2]
			rtcTime.Hours	= data[4];
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	791a      	ldrb	r2, [r3, #4]
 8005b10:	4b1f      	ldr	r3, [pc, #124]	; (8005b90 <Principal_Receive_Config+0x944>)
 8005b12:	701a      	strb	r2, [r3, #0]
			rtcTime.Minutes = data[5];
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	795a      	ldrb	r2, [r3, #5]
 8005b18:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <Principal_Receive_Config+0x944>)
 8005b1a:	705a      	strb	r2, [r3, #1]
			rtcTime.Seconds = data[6];
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	799a      	ldrb	r2, [r3, #6]
 8005b20:	4b1b      	ldr	r3, [pc, #108]	; (8005b90 <Principal_Receive_Config+0x944>)
 8005b22:	709a      	strb	r2, [r3, #2]

			if((HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN) == HAL_OK)
 8005b24:	2200      	movs	r2, #0
 8005b26:	4919      	ldr	r1, [pc, #100]	; (8005b8c <Principal_Receive_Config+0x940>)
 8005b28:	481a      	ldr	r0, [pc, #104]	; (8005b94 <Principal_Receive_Config+0x948>)
 8005b2a:	f006 fec9 	bl	800c8c0 <HAL_RTC_SetDate>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d113      	bne.n	8005b5c <Principal_Receive_Config+0x910>
				&& (HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN) == HAL_OK))
 8005b34:	2200      	movs	r2, #0
 8005b36:	4916      	ldr	r1, [pc, #88]	; (8005b90 <Principal_Receive_Config+0x944>)
 8005b38:	4816      	ldr	r0, [pc, #88]	; (8005b94 <Principal_Receive_Config+0x948>)
 8005b3a:	f006 fda6 	bl	800c68a <HAL_RTC_SetTime>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10b      	bne.n	8005b5c <Principal_Receive_Config+0x910>
			{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);
 8005b44:	f24e 325c 	movw	r2, #58204	; 0xe35c
 8005b48:	2101      	movs	r1, #1
 8005b4a:	4812      	ldr	r0, [pc, #72]	; (8005b94 <Principal_Receive_Config+0x948>)
 8005b4c:	f007 f83e 	bl	800cbcc <HAL_RTCEx_BKUPWrite>
				flagRTC = RTC_OK;
 8005b50:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <Principal_Receive_Config+0x94c>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
				retVal = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	75fb      	strb	r3, [r7, #23]
			}
			else
				retVal = HAL_ERROR;

			break;
 8005b5a:	e00b      	b.n	8005b74 <Principal_Receive_Config+0x928>
				retVal = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	75fb      	strb	r3, [r7, #23]
			break;
 8005b60:	e008      	b.n	8005b74 <Principal_Receive_Config+0x928>

		default:
			break;
 8005b62:	bf00      	nop
 8005b64:	e006      	b.n	8005b74 <Principal_Receive_Config+0x928>
				break;
 8005b66:	bf00      	nop
 8005b68:	e004      	b.n	8005b74 <Principal_Receive_Config+0x928>
				break;
 8005b6a:	bf00      	nop
 8005b6c:	e002      	b.n	8005b74 <Principal_Receive_Config+0x928>
				break;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <Principal_Receive_Config+0x928>
				break;
 8005b72:	bf00      	nop
	}

	return retVal;
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	200018f8 	.word	0x200018f8
 8005b84:	2000069a 	.word	0x2000069a
 8005b88:	20002be0 	.word	0x20002be0
 8005b8c:	20000820 	.word	0x20000820
 8005b90:	20002b04 	.word	0x20002b04
 8005b94:	2000299c 	.word	0x2000299c
 8005b98:	200018af 	.word	0x200018af

08005b9c <Principal_Hard_Code_Config>:

__weak void Principal_Hard_Code_Config(){
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
	perMsg[ANALOG_1_4] = MSG_FREQ_250HZ;
 8005ba0:	4b1f      	ldr	r3, [pc, #124]	; (8005c20 <Principal_Hard_Code_Config+0x84>)
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	801a      	strh	r2, [r3, #0]
	perMsg[ANALOG_5_8] = MSG_FREQ_500HZ;
 8005ba6:	4b1e      	ldr	r3, [pc, #120]	; (8005c20 <Principal_Hard_Code_Config+0x84>)
 8005ba8:	2202      	movs	r2, #2
 8005baa:	805a      	strh	r2, [r3, #2]
	perMsg[ANALOG_9_12] = MSG_DISABLED;
 8005bac:	4b1c      	ldr	r3, [pc, #112]	; (8005c20 <Principal_Hard_Code_Config+0x84>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	809a      	strh	r2, [r3, #4]
	perMsg[RTC_MSG] = MSG_FREQ_2HZ;
 8005bb2:	4b1b      	ldr	r3, [pc, #108]	; (8005c20 <Principal_Hard_Code_Config+0x84>)
 8005bb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005bb8:	80da      	strh	r2, [r3, #6]
	perMsg[VERIFY_MSG] = MSG_FREQ_5HZ;
 8005bba:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <Principal_Hard_Code_Config+0x84>)
 8005bbc:	22c8      	movs	r2, #200	; 0xc8
 8005bbe:	811a      	strh	r2, [r3, #8]
	perMsg[BEACON_MSG] = MSG_FREQ_10HZ;
 8005bc0:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <Principal_Hard_Code_Config+0x84>)
 8005bc2:	2264      	movs	r2, #100	; 0x64
 8005bc4:	815a      	strh	r2, [r3, #10]
	perMsg[ECU_SAVE] = MSG_FREQ_100HZ;
 8005bc6:	4b16      	ldr	r3, [pc, #88]	; (8005c20 <Principal_Hard_Code_Config+0x84>)
 8005bc8:	220a      	movs	r2, #10
 8005bca:	819a      	strh	r2, [r3, #12]
	perMsg[PDM_SAVE] = MSG_FREQ_100HZ;
 8005bcc:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <Principal_Hard_Code_Config+0x84>)
 8005bce:	220a      	movs	r2, #10
 8005bd0:	81da      	strh	r2, [r3, #14]

	perCAN[ANALOG_1_4] = MSG_FREQ_10HZ;
 8005bd2:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <Principal_Hard_Code_Config+0x88>)
 8005bd4:	2264      	movs	r2, #100	; 0x64
 8005bd6:	801a      	strh	r2, [r3, #0]
	perCAN[ANALOG_5_8] = MSG_FREQ_10HZ;
 8005bd8:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <Principal_Hard_Code_Config+0x88>)
 8005bda:	2264      	movs	r2, #100	; 0x64
 8005bdc:	805a      	strh	r2, [r3, #2]
	perCAN[ANALOG_9_12] = MSG_DISABLED;
 8005bde:	4b11      	ldr	r3, [pc, #68]	; (8005c24 <Principal_Hard_Code_Config+0x88>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	809a      	strh	r2, [r3, #4]
	perCAN[RTC_MSG] = MSG_FREQ_2HZ;
 8005be4:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <Principal_Hard_Code_Config+0x88>)
 8005be6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005bea:	80da      	strh	r2, [r3, #6]
	perCAN[VERIFY_MSG] = MSG_FREQ_5HZ;
 8005bec:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <Principal_Hard_Code_Config+0x88>)
 8005bee:	22c8      	movs	r2, #200	; 0xc8
 8005bf0:	811a      	strh	r2, [r3, #8]
	perCAN[BEACON_MSG] = MSG_FREQ_5HZ;
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <Principal_Hard_Code_Config+0x88>)
 8005bf4:	22c8      	movs	r2, #200	; 0xc8
 8005bf6:	815a      	strh	r2, [r3, #10]

	inputConfig = INPUT_BEACON_PIN_0 | INPUT_DATALOGGER_PIN_1;
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <Principal_Hard_Code_Config+0x8c>)
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	701a      	strb	r2, [r3, #0]

	thresholdBeacon = 1000;
 8005bfe:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <Principal_Hard_Code_Config+0x90>)
 8005c00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c04:	801a      	strh	r2, [r3, #0]
	thresholdRPM = 7000;
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <Principal_Hard_Code_Config+0x94>)
 8005c08:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005c0c:	801a      	strh	r2, [r3, #0]
	thresholdSpeed = 1;
 8005c0e:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <Principal_Hard_Code_Config+0x98>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	801a      	strh	r2, [r3, #0]

	Save_EEPROM(&hi2c1);
 8005c14:	4808      	ldr	r0, [pc, #32]	; (8005c38 <Principal_Hard_Code_Config+0x9c>)
 8005c16:	f7fe fa73 	bl	8004100 <Save_EEPROM>
}
 8005c1a:	bf00      	nop
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20002c04 	.word	0x20002c04
 8005c24:	200018fc 	.word	0x200018fc
 8005c28:	200018ae 	.word	0x200018ae
 8005c2c:	200018f8 	.word	0x200018f8
 8005c30:	2000069a 	.word	0x2000069a
 8005c34:	20002be0 	.word	0x20002be0
 8005c38:	200007cc 	.word	0x200007cc

08005c3c <Principal_Datalogger_Init>:
#include "string.h"

FRESULT res[5];

FRESULT Principal_Datalogger_Init(FATFS* fatfs_struct)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	FRESULT retVal = FR_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005c48:	2180      	movs	r1, #128	; 0x80
 8005c4a:	4813      	ldr	r0, [pc, #76]	; (8005c98 <Principal_Datalogger_Init+0x5c>)
 8005c4c:	f003 f94a 	bl	8008ee4 <HAL_GPIO_ReadPin>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d104      	bne.n	8005c60 <Principal_Datalogger_Init+0x24>
	{
		flagDatalogger = DL_NO_CARD;
 8005c56:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <Principal_Datalogger_Init+0x60>)
 8005c58:	2202      	movs	r2, #2
 8005c5a:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e017      	b.n	8005c90 <Principal_Datalogger_Init+0x54>
	}

	BSP_SD_Init();
 8005c60:	f00b fa84 	bl	801116c <BSP_SD_Init>

	retVal = f_mount(fatfs_struct, SDPath, 1);
 8005c64:	2201      	movs	r2, #1
 8005c66:	490e      	ldr	r1, [pc, #56]	; (8005ca0 <Principal_Datalogger_Init+0x64>)
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f010 fc8f 	bl	801658c <f_mount>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	73fb      	strb	r3, [r7, #15]

	flagDatalogger = DL_NO_SAVE;
 8005c72:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <Principal_Datalogger_Init+0x60>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	701a      	strb	r2, [r3, #0]

	if(retVal != FR_OK)
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <Principal_Datalogger_Init+0x52>
	{
		flagDatalogger = DL_ERROR;
 8005c7e:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <Principal_Datalogger_Init+0x60>)
 8005c80:	2204      	movs	r2, #4
 8005c82:	701a      	strb	r2, [r3, #0]
		f_mount(0, SDPath, 0);
 8005c84:	2200      	movs	r2, #0
 8005c86:	4906      	ldr	r1, [pc, #24]	; (8005ca0 <Principal_Datalogger_Init+0x64>)
 8005c88:	2000      	movs	r0, #0
 8005c8a:	f010 fc7f 	bl	801658c <f_mount>
	}

	return retVal;
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40020800 	.word	0x40020800
 8005c9c:	20003c98 	.word	0x20003c98
 8005ca0:	20003cac 	.word	0x20003cac

08005ca4 <Principal_Datalogger_Start>:

FRESULT Principal_Datalogger_Start(char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 8005ca4:	b5b0      	push	{r4, r5, r7, lr}
 8005ca6:	b092      	sub	sp, #72	; 0x48
 8005ca8:	af06      	add	r7, sp, #24
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
	FRESULT retVal = FR_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005cb8:	2180      	movs	r1, #128	; 0x80
 8005cba:	4864      	ldr	r0, [pc, #400]	; (8005e4c <Principal_Datalogger_Start+0x1a8>)
 8005cbc:	f003 f912 	bl	8008ee4 <HAL_GPIO_ReadPin>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d104      	bne.n	8005cd0 <Principal_Datalogger_Start+0x2c>
	{
		flagDatalogger = DL_NO_CARD;
 8005cc6:	4b62      	ldr	r3, [pc, #392]	; (8005e50 <Principal_Datalogger_Start+0x1ac>)
 8005cc8:	2202      	movs	r2, #2
 8005cca:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0b9      	b.n	8005e44 <Principal_Datalogger_Start+0x1a0>
	}

	if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8005cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cd4:	485f      	ldr	r0, [pc, #380]	; (8005e54 <Principal_Datalogger_Start+0x1b0>)
 8005cd6:	f003 f905 	bl	8008ee4 <HAL_GPIO_ReadPin>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d02f      	beq.n	8005d40 <Principal_Datalogger_Start+0x9c>
			|| (flagRTC != RTC_OK)
 8005ce0:	4b5d      	ldr	r3, [pc, #372]	; (8005e58 <Principal_Datalogger_Start+0x1b4>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d12b      	bne.n	8005d40 <Principal_Datalogger_Start+0x9c>
			|| ((flagDatalogger != DL_BUT_PRESS)
 8005ce8:	4b59      	ldr	r3, [pc, #356]	; (8005e50 <Principal_Datalogger_Start+0x1ac>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d029      	beq.n	8005d44 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.rpm < thresholdRPM)
 8005cf0:	4b5a      	ldr	r3, [pc, #360]	; (8005e5c <Principal_Datalogger_Start+0x1b8>)
 8005cf2:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8005cf6:	4b5a      	ldr	r3, [pc, #360]	; (8005e60 <Principal_Datalogger_Start+0x1bc>)
 8005cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	da21      	bge.n	8005d44 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.wheel_speed_fl < thresholdSpeed)
 8005d00:	4b56      	ldr	r3, [pc, #344]	; (8005e5c <Principal_Datalogger_Start+0x1b8>)
 8005d02:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 8005d06:	4b57      	ldr	r3, [pc, #348]	; (8005e64 <Principal_Datalogger_Start+0x1c0>)
 8005d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	da19      	bge.n	8005d44 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.wheel_speed_fr < thresholdSpeed)
 8005d10:	4b52      	ldr	r3, [pc, #328]	; (8005e5c <Principal_Datalogger_Start+0x1b8>)
 8005d12:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005d16:	4b53      	ldr	r3, [pc, #332]	; (8005e64 <Principal_Datalogger_Start+0x1c0>)
 8005d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	da11      	bge.n	8005d44 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.wheel_speed_rl < thresholdSpeed)
 8005d20:	4b4e      	ldr	r3, [pc, #312]	; (8005e5c <Principal_Datalogger_Start+0x1b8>)
 8005d22:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8005d26:	4b4f      	ldr	r3, [pc, #316]	; (8005e64 <Principal_Datalogger_Start+0x1c0>)
 8005d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	da09      	bge.n	8005d44 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.wheel_speed_rr < thresholdSpeed)))
 8005d30:	4b4a      	ldr	r3, [pc, #296]	; (8005e5c <Principal_Datalogger_Start+0x1b8>)
 8005d32:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8005d36:	4b4b      	ldr	r3, [pc, #300]	; (8005e64 <Principal_Datalogger_Start+0x1c0>)
 8005d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	da01      	bge.n	8005d44 <Principal_Datalogger_Start+0xa0>
		return FR_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e07f      	b.n	8005e44 <Principal_Datalogger_Start+0x1a0>

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	dataloggerBufferPosition = 0;
 8005d44:	4b48      	ldr	r3, [pc, #288]	; (8005e68 <Principal_Datalogger_Start+0x1c4>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	801a      	strh	r2, [r3, #0]
	memset(dataloggerBuffer, '\0', DATALOGGER_BUFFER_SIZE);
 8005d4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4846      	ldr	r0, [pc, #280]	; (8005e6c <Principal_Datalogger_Start+0x1c8>)
 8005d52:	f012 f865 	bl	8017e20 <memset>

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005d56:	f107 0314 	add.w	r3, r7, #20
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4844      	ldr	r0, [pc, #272]	; (8005e70 <Principal_Datalogger_Start+0x1cc>)
 8005d60:	f006 fd50 	bl	800c804 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8005d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4840      	ldr	r0, [pc, #256]	; (8005e70 <Principal_Datalogger_Start+0x1cc>)
 8005d6e:	f006 fe4e 	bl	800ca0e <HAL_RTC_GetDate>

	sprintf(dir, "%02d_%02d_%02d", sDate.Year, sDate.Month, sDate.Date);
 8005d72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d76:	461a      	mov	r2, r3
 8005d78:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	460b      	mov	r3, r1
 8005d86:	493b      	ldr	r1, [pc, #236]	; (8005e74 <Principal_Datalogger_Start+0x1d0>)
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f012 f851 	bl	8017e30 <siprintf>

	sprintf(file, "%s/%02d_%02d_%02d_%02d_%02d_%02d.sd", dir, sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8005d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d92:	461d      	mov	r5, r3
 8005d94:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005d98:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8005d9c:	7d39      	ldrb	r1, [r7, #20]
 8005d9e:	7d78      	ldrb	r0, [r7, #21]
 8005da0:	7dbc      	ldrb	r4, [r7, #22]
 8005da2:	9404      	str	r4, [sp, #16]
 8005da4:	9003      	str	r0, [sp, #12]
 8005da6:	9102      	str	r1, [sp, #8]
 8005da8:	9201      	str	r2, [sp, #4]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	462b      	mov	r3, r5
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4931      	ldr	r1, [pc, #196]	; (8005e78 <Principal_Datalogger_Start+0x1d4>)
 8005db2:	68b8      	ldr	r0, [r7, #8]
 8005db4:	f012 f83c 	bl	8017e30 <siprintf>

	retVal = f_mkdir(dir);
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f011 f869 	bl	8016e90 <f_mkdir>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	res[0] = retVal;
 8005dc4:	4a2d      	ldr	r2, [pc, #180]	; (8005e7c <Principal_Datalogger_Start+0x1d8>)
 8005dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dca:	7013      	strb	r3, [r2, #0]

	if((retVal != FR_OK) && (retVal != FR_EXIST))
 8005dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <Principal_Datalogger_Start+0x144>
 8005dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d005      	beq.n	8005de8 <Principal_Datalogger_Start+0x144>
	{
		flagDatalogger = DL_ERROR;
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <Principal_Datalogger_Start+0x1ac>)
 8005dde:	2204      	movs	r2, #4
 8005de0:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005de2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005de6:	e02d      	b.n	8005e44 <Principal_Datalogger_Start+0x1a0>
	}

	retVal = f_opendir(dir_struct, dir);
 8005de8:	68f9      	ldr	r1, [r7, #12]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f010 ffdd 	bl	8016daa <f_opendir>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	res[1] = retVal;
 8005df6:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <Principal_Datalogger_Start+0x1d8>)
 8005df8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dfc:	7053      	strb	r3, [r2, #1]

	if(retVal != FR_OK)
 8005dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <Principal_Datalogger_Start+0x16e>
	{
		flagDatalogger = DL_ERROR;
 8005e06:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <Principal_Datalogger_Start+0x1ac>)
 8005e08:	2204      	movs	r2, #4
 8005e0a:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005e0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e10:	e018      	b.n	8005e44 <Principal_Datalogger_Start+0x1a0>
	}

	retVal = f_open(file_struct, file, FA_WRITE | FA_CREATE_ALWAYS);
 8005e12:	220a      	movs	r2, #10
 8005e14:	68b9      	ldr	r1, [r7, #8]
 8005e16:	6838      	ldr	r0, [r7, #0]
 8005e18:	f010 fbfc 	bl	8016614 <f_open>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	res[2] = retVal;
 8005e22:	4a16      	ldr	r2, [pc, #88]	; (8005e7c <Principal_Datalogger_Start+0x1d8>)
 8005e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e28:	7093      	strb	r3, [r2, #2]

	if(retVal == FR_OK)
 8005e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d103      	bne.n	8005e3a <Principal_Datalogger_Start+0x196>
		flagDatalogger = DL_SAVE;
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <Principal_Datalogger_Start+0x1ac>)
 8005e34:	2201      	movs	r2, #1
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	e002      	b.n	8005e40 <Principal_Datalogger_Start+0x19c>
	else
		flagDatalogger = DL_ERROR;
 8005e3a:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <Principal_Datalogger_Start+0x1ac>)
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	701a      	strb	r2, [r3, #0]

	return retVal;
 8005e40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3730      	adds	r7, #48	; 0x30
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e4c:	40020800 	.word	0x40020800
 8005e50:	20003c98 	.word	0x20003c98
 8005e54:	40020000 	.word	0x40020000
 8005e58:	200018af 	.word	0x200018af
 8005e5c:	20002a1c 	.word	0x20002a1c
 8005e60:	2000069a 	.word	0x2000069a
 8005e64:	20002be0 	.word	0x20002be0
 8005e68:	200018ac 	.word	0x200018ac
 8005e6c:	2000199c 	.word	0x2000199c
 8005e70:	2000299c 	.word	0x2000299c
 8005e74:	080186a4 	.word	0x080186a4
 8005e78:	080186b4 	.word	0x080186b4
 8005e7c:	20003c9c 	.word	0x20003c9c

08005e80 <Principal_Datalogger_Finish>:

FRESULT Principal_Datalogger_Finish(DIR* dir_struct, FIL* file_struct)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	FRESULT retVal = FR_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	73fb      	strb	r3, [r7, #15]

	retVal = f_close(file_struct);
 8005e8e:	6838      	ldr	r0, [r7, #0]
 8005e90:	f010 ff6b 	bl	8016d6a <f_close>
 8005e94:	4603      	mov	r3, r0
 8005e96:	73fb      	strb	r3, [r7, #15]
	f_closedir(dir_struct);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f010 ffe1 	bl	8016e60 <f_closedir>

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005e9e:	2180      	movs	r1, #128	; 0x80
 8005ea0:	480b      	ldr	r0, [pc, #44]	; (8005ed0 <Principal_Datalogger_Finish+0x50>)
 8005ea2:	f003 f81f 	bl	8008ee4 <HAL_GPIO_ReadPin>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d108      	bne.n	8005ebe <Principal_Datalogger_Finish+0x3e>
	{
		f_mount(0, SDPath, 0);
 8005eac:	2200      	movs	r2, #0
 8005eae:	4909      	ldr	r1, [pc, #36]	; (8005ed4 <Principal_Datalogger_Finish+0x54>)
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	f010 fb6b 	bl	801658c <f_mount>
		flagDatalogger = DL_NO_CARD;
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <Principal_Datalogger_Finish+0x58>)
 8005eb8:	2202      	movs	r2, #2
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	e002      	b.n	8005ec4 <Principal_Datalogger_Finish+0x44>
	}

	else
		flagDatalogger = DL_NO_SAVE;
 8005ebe:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <Principal_Datalogger_Finish+0x58>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]

	return retVal;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40020800 	.word	0x40020800
 8005ed4:	20003cac 	.word	0x20003cac
 8005ed8:	20003c98 	.word	0x20003c98

08005edc <Principal_Datalogger_Save_Buffer>:

void Principal_Datalogger_Save_Buffer(uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, DIR* dir_struct, FIL* file_struct)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	72fb      	strb	r3, [r7, #11]
//	uint8_t buffer[5 + data_length];
	UINT byte;
	FRESULT verify[2];

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005eec:	2180      	movs	r1, #128	; 0x80
 8005eee:	484f      	ldr	r0, [pc, #316]	; (800602c <Principal_Datalogger_Save_Buffer+0x150>)
 8005ef0:	f002 fff8 	bl	8008ee4 <HAL_GPIO_ReadPin>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d104      	bne.n	8005f04 <Principal_Datalogger_Save_Buffer+0x28>
	{
		Principal_Datalogger_Finish(dir_struct, file_struct);
 8005efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005efc:	6838      	ldr	r0, [r7, #0]
 8005efe:	f7ff ffbf 	bl	8005e80 <Principal_Datalogger_Finish>
		return;
 8005f02:	e08f      	b.n	8006024 <Principal_Datalogger_Save_Buffer+0x148>
	}

	else if(HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8005f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f08:	4849      	ldr	r0, [pc, #292]	; (8006030 <Principal_Datalogger_Save_Buffer+0x154>)
 8005f0a:	f002 ffeb 	bl	8008ee4 <HAL_GPIO_ReadPin>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	f000 8086 	beq.w	8006022 <Principal_Datalogger_Save_Buffer+0x146>
//	buffer[1] = 'L';
//	buffer[2] = data_id & 0xff;
//	buffer[3] = data_length;
//	buffer[4] = accDatalogger[0];

	dataloggerBuffer[dataloggerBufferPosition++] = 'D';
 8005f16:	4b47      	ldr	r3, [pc, #284]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	b291      	uxth	r1, r2
 8005f1e:	4a45      	ldr	r2, [pc, #276]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f20:	8011      	strh	r1, [r2, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	4b44      	ldr	r3, [pc, #272]	; (8006038 <Principal_Datalogger_Save_Buffer+0x15c>)
 8005f26:	2144      	movs	r1, #68	; 0x44
 8005f28:	5499      	strb	r1, [r3, r2]
	dataloggerBuffer[dataloggerBufferPosition++] = 'L';
 8005f2a:	4b42      	ldr	r3, [pc, #264]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	b291      	uxth	r1, r2
 8005f32:	4a40      	ldr	r2, [pc, #256]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f34:	8011      	strh	r1, [r2, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	4b3f      	ldr	r3, [pc, #252]	; (8006038 <Principal_Datalogger_Save_Buffer+0x15c>)
 8005f3a:	214c      	movs	r1, #76	; 0x4c
 8005f3c:	5499      	strb	r1, [r3, r2]
	dataloggerBuffer[dataloggerBufferPosition++] = data_id & 0xff;
 8005f3e:	4b3d      	ldr	r3, [pc, #244]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	b291      	uxth	r1, r2
 8005f46:	4a3b      	ldr	r2, [pc, #236]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f48:	8011      	strh	r1, [r2, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	b2d9      	uxtb	r1, r3
 8005f50:	4b39      	ldr	r3, [pc, #228]	; (8006038 <Principal_Datalogger_Save_Buffer+0x15c>)
 8005f52:	5499      	strb	r1, [r3, r2]
	dataloggerBuffer[dataloggerBufferPosition++] = data_length;
 8005f54:	4b37      	ldr	r3, [pc, #220]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	b291      	uxth	r1, r2
 8005f5c:	4a35      	ldr	r2, [pc, #212]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f5e:	8011      	strh	r1, [r2, #0]
 8005f60:	4619      	mov	r1, r3
 8005f62:	4a35      	ldr	r2, [pc, #212]	; (8006038 <Principal_Datalogger_Save_Buffer+0x15c>)
 8005f64:	7afb      	ldrb	r3, [r7, #11]
 8005f66:	5453      	strb	r3, [r2, r1]
	dataloggerBuffer[dataloggerBufferPosition++] = accDatalogger[0];
 8005f68:	4b34      	ldr	r3, [pc, #208]	; (800603c <Principal_Datalogger_Save_Buffer+0x160>)
 8005f6a:	6819      	ldr	r1, [r3, #0]
 8005f6c:	4b31      	ldr	r3, [pc, #196]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	b290      	uxth	r0, r2
 8005f74:	4a2f      	ldr	r2, [pc, #188]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f76:	8010      	strh	r0, [r2, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	b2c9      	uxtb	r1, r1
 8005f7c:	4b2e      	ldr	r3, [pc, #184]	; (8006038 <Principal_Datalogger_Save_Buffer+0x15c>)
 8005f7e:	5499      	strb	r1, [r3, r2]

	accDatalogger[0] = 0;
 8005f80:	4b2e      	ldr	r3, [pc, #184]	; (800603c <Principal_Datalogger_Save_Buffer+0x160>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
//
//	memcpy(dataloggerBuffer + dataloggerBufferPosition, buffer, 5 + data_length);
//
//	dataloggerBufferPosition += (5 + data_length);

	for(uint8_t i = 0; i < data_length; i++, dataloggerBufferPosition++)
 8005f86:	2300      	movs	r3, #0
 8005f88:	77fb      	strb	r3, [r7, #31]
 8005f8a:	e010      	b.n	8005fae <Principal_Datalogger_Save_Buffer+0xd2>
		dataloggerBuffer[dataloggerBufferPosition] = data_buffer[i];
 8005f8c:	7ffb      	ldrb	r3, [r7, #31]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4413      	add	r3, r2
 8005f92:	4a28      	ldr	r2, [pc, #160]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f94:	8812      	ldrh	r2, [r2, #0]
 8005f96:	7819      	ldrb	r1, [r3, #0]
 8005f98:	4b27      	ldr	r3, [pc, #156]	; (8006038 <Principal_Datalogger_Save_Buffer+0x15c>)
 8005f9a:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < data_length; i++, dataloggerBufferPosition++)
 8005f9c:	7ffb      	ldrb	r3, [r7, #31]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	77fb      	strb	r3, [r7, #31]
 8005fa2:	4b24      	ldr	r3, [pc, #144]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	4b22      	ldr	r3, [pc, #136]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fac:	801a      	strh	r2, [r3, #0]
 8005fae:	7ffa      	ldrb	r2, [r7, #31]
 8005fb0:	7afb      	ldrb	r3, [r7, #11]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d3ea      	bcc.n	8005f8c <Principal_Datalogger_Save_Buffer+0xb0>

	if(dataloggerBufferPosition > DATALOGGER_SAVE_THR)
 8005fb6:	4b1f      	ldr	r3, [pc, #124]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	f640 72f3 	movw	r2, #4083	; 0xff3
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d930      	bls.n	8006024 <Principal_Datalogger_Save_Buffer+0x148>
	{
		dataloggerBufferPosition++;
 8005fc2:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fcc:	801a      	strh	r2, [r3, #0]

		verify[0] = f_write(file_struct, dataloggerBuffer, dataloggerBufferPosition, &byte);
 8005fce:	4b19      	ldr	r3, [pc, #100]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f107 0318 	add.w	r3, r7, #24
 8005fd8:	4917      	ldr	r1, [pc, #92]	; (8006038 <Principal_Datalogger_Save_Buffer+0x15c>)
 8005fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fdc:	f010 fcb3 	bl	8016946 <f_write>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	753b      	strb	r3, [r7, #20]
		verify[1] = f_sync(file_struct);
 8005fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fe6:	f010 fe42 	bl	8016c6e <f_sync>
 8005fea:	4603      	mov	r3, r0
 8005fec:	757b      	strb	r3, [r7, #21]

		res[3] = verify[0];
 8005fee:	7d3a      	ldrb	r2, [r7, #20]
 8005ff0:	4b13      	ldr	r3, [pc, #76]	; (8006040 <Principal_Datalogger_Save_Buffer+0x164>)
 8005ff2:	70da      	strb	r2, [r3, #3]
		res[4] = verify[1];
 8005ff4:	7d7a      	ldrb	r2, [r7, #21]
 8005ff6:	4b12      	ldr	r3, [pc, #72]	; (8006040 <Principal_Datalogger_Save_Buffer+0x164>)
 8005ff8:	711a      	strb	r2, [r3, #4]

		if((verify[0] == FR_OK) && (verify[1] == FR_OK) && (dataloggerBufferPosition == byte))
 8005ffa:	7d3b      	ldrb	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10c      	bne.n	800601a <Principal_Datalogger_Save_Buffer+0x13e>
 8006000:	7d7b      	ldrb	r3, [r7, #21]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <Principal_Datalogger_Save_Buffer+0x13e>
 8006006:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	429a      	cmp	r2, r3
 8006010:	d103      	bne.n	800601a <Principal_Datalogger_Save_Buffer+0x13e>
			Principal_Datalogger_Finish(dir_struct, file_struct);
 8006012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006014:	6838      	ldr	r0, [r7, #0]
 8006016:	f7ff ff33 	bl	8005e80 <Principal_Datalogger_Finish>

		dataloggerBufferPosition = 0;
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <Principal_Datalogger_Save_Buffer+0x158>)
 800601c:	2200      	movs	r2, #0
 800601e:	801a      	strh	r2, [r3, #0]
 8006020:	e000      	b.n	8006024 <Principal_Datalogger_Save_Buffer+0x148>
		return;
 8006022:	bf00      	nop
	}
}
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40020800 	.word	0x40020800
 8006030:	40020000 	.word	0x40020000
 8006034:	200018ac 	.word	0x200018ac
 8006038:	2000199c 	.word	0x2000199c
 800603c:	20002afc 	.word	0x20002afc
 8006040:	20003c9c 	.word	0x20003c9c

08006044 <Principal_Datalogger_Button>:

void Principal_Datalogger_Button(DIR* dir_struct, FIL* file_struct)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
	if(accDatalogger[1] == 0)
 800604e:	4b12      	ldr	r3, [pc, #72]	; (8006098 <Principal_Datalogger_Button+0x54>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d11b      	bne.n	800608e <Principal_Datalogger_Button+0x4a>
	{
		accDatalogger[1] = BUTTON_COOLDOWN;
 8006056:	4b10      	ldr	r3, [pc, #64]	; (8006098 <Principal_Datalogger_Button+0x54>)
 8006058:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800605c:	605a      	str	r2, [r3, #4]

		if((flagDatalogger == DL_NO_SAVE) && (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET))
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <Principal_Datalogger_Button+0x58>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10b      	bne.n	800607e <Principal_Datalogger_Button+0x3a>
 8006066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800606a:	480d      	ldr	r0, [pc, #52]	; (80060a0 <Principal_Datalogger_Button+0x5c>)
 800606c:	f002 ff3a 	bl	8008ee4 <HAL_GPIO_ReadPin>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d103      	bne.n	800607e <Principal_Datalogger_Button+0x3a>
			flagDatalogger = DL_BUT_PRESS;
 8006076:	4b09      	ldr	r3, [pc, #36]	; (800609c <Principal_Datalogger_Button+0x58>)
 8006078:	2203      	movs	r2, #3
 800607a:	701a      	strb	r2, [r3, #0]

		else if(flagDatalogger == DL_SAVE)
			Principal_Datalogger_Finish(dir_struct, file_struct);
	}
}
 800607c:	e007      	b.n	800608e <Principal_Datalogger_Button+0x4a>
		else if(flagDatalogger == DL_SAVE)
 800607e:	4b07      	ldr	r3, [pc, #28]	; (800609c <Principal_Datalogger_Button+0x58>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d103      	bne.n	800608e <Principal_Datalogger_Button+0x4a>
			Principal_Datalogger_Finish(dir_struct, file_struct);
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff fef9 	bl	8005e80 <Principal_Datalogger_Finish>
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20002afc 	.word	0x20002afc
 800609c:	20003c98 	.word	0x20003c98
 80060a0:	40020000 	.word	0x40020000

080060a4 <Principal_Card_Detection>:

void Principal_Card_Detection(FATFS* fatfs_struct, DIR* dir_struct, FIL* file_struct)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
	GPIO_PinState cd_pin = HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin);
 80060b0:	2180      	movs	r1, #128	; 0x80
 80060b2:	4811      	ldr	r0, [pc, #68]	; (80060f8 <Principal_Card_Detection+0x54>)
 80060b4:	f002 ff16 	bl	8008ee4 <HAL_GPIO_ReadPin>
 80060b8:	4603      	mov	r3, r0
 80060ba:	75fb      	strb	r3, [r7, #23]

	if((cd_pin == GPIO_PIN_SET) && ((flagDatalogger == DL_SAVE) || (flagDatalogger == DL_ERROR)))
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d10c      	bne.n	80060dc <Principal_Card_Detection+0x38>
 80060c2:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <Principal_Card_Detection+0x58>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d003      	beq.n	80060d2 <Principal_Card_Detection+0x2e>
 80060ca:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <Principal_Card_Detection+0x58>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d104      	bne.n	80060dc <Principal_Card_Detection+0x38>
		Principal_Datalogger_Finish(dir_struct, file_struct);
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	68b8      	ldr	r0, [r7, #8]
 80060d6:	f7ff fed3 	bl	8005e80 <Principal_Datalogger_Finish>

	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
		Principal_Datalogger_Init(fatfs_struct);
}
 80060da:	e009      	b.n	80060f0 <Principal_Card_Detection+0x4c>
	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <Principal_Card_Detection+0x4c>
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <Principal_Card_Detection+0x58>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d102      	bne.n	80060f0 <Principal_Card_Detection+0x4c>
		Principal_Datalogger_Init(fatfs_struct);
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f7ff fda6 	bl	8005c3c <Principal_Datalogger_Init>
}
 80060f0:	bf00      	nop
 80060f2:	3718      	adds	r7, #24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40020800 	.word	0x40020800
 80060fc:	20003c98 	.word	0x20003c98

08006100 <Principal_Beacon_Detect>:

void Principal_Beacon_Detect()
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
	if(accLap < thresholdBeacon)
 8006104:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <Principal_Beacon_Detect+0x30>)
 8006106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800610a:	461a      	mov	r2, r3
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <Principal_Beacon_Detect+0x34>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d80a      	bhi.n	800612a <Principal_Beacon_Detect+0x2a>
		return;

	lapNumber++;
 8006114:	4b08      	ldr	r3, [pc, #32]	; (8006138 <Principal_Beacon_Detect+0x38>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	3301      	adds	r3, #1
 800611a:	b2da      	uxtb	r2, r3
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <Principal_Beacon_Detect+0x38>)
 800611e:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, BEACON_MSG);
 8006120:	2105      	movs	r1, #5
 8006122:	4806      	ldr	r0, [pc, #24]	; (800613c <Principal_Beacon_Detect+0x3c>)
 8006124:	f7fd fb94 	bl	8003850 <Principal_Transmit_Msg>
 8006128:	e000      	b.n	800612c <Principal_Beacon_Detect+0x2c>
		return;
 800612a:	bf00      	nop
}
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	200018f8 	.word	0x200018f8
 8006134:	20002c64 	.word	0x20002c64
 8006138:	20001908 	.word	0x20001908
 800613c:	20002bb8 	.word	0x20002bb8

08006140 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af02      	add	r7, sp, #8
 8006146:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 8006148:	4b32      	ldr	r3, [pc, #200]	; (8006214 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800614a:	4a33      	ldr	r2, [pc, #204]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800614c:	2100      	movs	r1, #0
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 fd1c 	bl	8007b8c <HAL_CAN_GetRxMessage>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d14f      	bne.n	80061fa <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
	{
		verifyCAN |= 2;
 800615a:	4b30      	ldr	r3, [pc, #192]	; (800621c <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	f043 0302 	orr.w	r3, r3, #2
 8006162:	b2da      	uxtb	r2, r3
 8006164:	4b2d      	ldr	r3, [pc, #180]	; (800621c <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8006166:	701a      	strb	r2, [r3, #0]

		if((rxHeader.IDE == CAN_ID_STD) && ((rxHeader.StdId & CAN_DAQ_MASK) == CAN_DAQ_FILTER) && (flagDatalogger == DL_SAVE))
 8006168:	4b2b      	ldr	r3, [pc, #172]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d116      	bne.n	800619e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 8006170:	4b29      	ldr	r3, [pc, #164]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006178:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800617c:	d10f      	bne.n	800619e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 800617e:	4b28      	ldr	r3, [pc, #160]	; (8006220 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d10b      	bne.n	800619e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
			Principal_Datalogger_Save_Buffer(rxHeader.StdId, rxHeader.DLC, rxData, &dirStruct, &fileStruct);
 8006186:	4b24      	ldr	r3, [pc, #144]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	4b23      	ldr	r3, [pc, #140]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	b2d9      	uxtb	r1, r3
 8006190:	4b24      	ldr	r3, [pc, #144]	; (8006224 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	4b24      	ldr	r3, [pc, #144]	; (8006228 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8006196:	4a1f      	ldr	r2, [pc, #124]	; (8006214 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8006198:	f7ff fea0 	bl	8005edc <Principal_Datalogger_Save_Buffer>
 800619c:	e035      	b.n	800620a <HAL_CAN_RxFifo0MsgPendingCallback+0xca>

		else if(((rxHeader.ExtId & 0x1FFFF000) == 0x1E35C000) && (rxHeader.IDE == CAN_ID_EXT))
 800619e:	4b1e      	ldr	r3, [pc, #120]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	4b22      	ldr	r3, [pc, #136]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	4a22      	ldr	r2, [pc, #136]	; (8006230 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d10d      	bne.n	80061c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 80061ac:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d109      	bne.n	80061c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			PDM_CAN_Process_Data(rxHeader.ExtId, rxHeader.DLC, rxData, &pdmReadings);
 80061b4:	4b18      	ldr	r3, [pc, #96]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061b6:	6858      	ldr	r0, [r3, #4]
 80061b8:	4b17      	ldr	r3, [pc, #92]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	b2d9      	uxtb	r1, r3
 80061be:	4b1d      	ldr	r3, [pc, #116]	; (8006234 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80061c0:	4a14      	ldr	r2, [pc, #80]	; (8006214 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80061c2:	f7fb ff83 	bl	80020cc <PDM_CAN_Process_Data>
 80061c6:	e020      	b.n	800620a <HAL_CAN_RxFifo0MsgPendingCallback+0xca>

		else if((rxHeader.ExtId == CONFIG_ID) && (rxHeader.IDE == CAN_ID_EXT))
 80061c8:	4b13      	ldr	r3, [pc, #76]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10b      	bne.n	80061e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 80061d0:	4b11      	ldr	r3, [pc, #68]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d107      	bne.n	80061e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
			Principal_Receive_Config(&hi2c1, rxData, rxHeader.DLC);
 80061d8:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	461a      	mov	r2, r3
 80061de:	490d      	ldr	r1, [pc, #52]	; (8006214 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80061e0:	4815      	ldr	r0, [pc, #84]	; (8006238 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 80061e2:	f7ff f833 	bl	800524c <Principal_Receive_Config>
 80061e6:	e010      	b.n	800620a <HAL_CAN_RxFifo0MsgPendingCallback+0xca>

		else
			FT_CAN_ReceiveData(rxHeader.ExtId, rxHeader.DLC, rxData, &ecuData);
 80061e8:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061ea:	6858      	ldr	r0, [r3, #4]
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061ee:	6919      	ldr	r1, [r3, #16]
 80061f0:	4b12      	ldr	r3, [pc, #72]	; (800623c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 80061f2:	4a08      	ldr	r2, [pc, #32]	; (8006214 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80061f4:	f7fa fc8a 	bl	8000b0c <FT_CAN_ReceiveData>
	}

	else
		verifyCAN &= 1;
}
 80061f8:	e007      	b.n	800620a <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
		verifyCAN &= 1;
 80061fa:	4b08      	ldr	r3, [pc, #32]	; (800621c <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	b2da      	uxtb	r2, r3
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8006206:	701a      	strb	r2, [r3, #0]
}
 8006208:	e7ff      	b.n	800620a <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	200006fc 	.word	0x200006fc
 8006218:	20000760 	.word	0x20000760
 800621c:	20000872 	.word	0x20000872
 8006220:	20003c98 	.word	0x20003c98
 8006224:	20002c6c 	.word	0x20002c6c
 8006228:	2000190c 	.word	0x2000190c
 800622c:	1ffff000 	.word	0x1ffff000
 8006230:	1e35c000 	.word	0x1e35c000
 8006234:	20000834 	.word	0x20000834
 8006238:	200007cc 	.word	0x200007cc
 800623c:	20002a1c 	.word	0x20002a1c

08006240 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	4603      	mov	r3, r0
 8006248:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXTI0_Pin)
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006250:	d111      	bne.n	8006276 <HAL_GPIO_EXTI_Callback+0x36>
	{
		if((inputConfig & 0x01) == 0)
 8006252:	4b16      	ldr	r3, [pc, #88]	; (80062ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_GPIO_EXTI_Callback+0x22>
			Principal_Beacon_Detect();
 800625e:	f7ff ff4f 	bl	8006100 <Principal_Beacon_Detect>

		if((inputConfig & 0x02) == 0)
 8006262:	4b12      	ldr	r3, [pc, #72]	; (80062ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d103      	bne.n	8006276 <HAL_GPIO_EXTI_Callback+0x36>
			Principal_Datalogger_Button(&dirStruct, &fileStruct);
 800626e:	4910      	ldr	r1, [pc, #64]	; (80062b0 <HAL_GPIO_EXTI_Callback+0x70>)
 8006270:	4810      	ldr	r0, [pc, #64]	; (80062b4 <HAL_GPIO_EXTI_Callback+0x74>)
 8006272:	f7ff fee7 	bl	8006044 <Principal_Datalogger_Button>
	}

	if(GPIO_Pin == EXTI1_Pin)
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627c:	d111      	bne.n	80062a2 <HAL_GPIO_EXTI_Callback+0x62>
	{
		if((inputConfig & 0x01) == 1)
 800627e:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <HAL_GPIO_EXTI_Callback+0x4e>
			Principal_Beacon_Detect();
 800628a:	f7ff ff39 	bl	8006100 <Principal_Beacon_Detect>

		if((inputConfig & 0x02) == 2)
 800628e:	4b07      	ldr	r3, [pc, #28]	; (80062ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_GPIO_EXTI_Callback+0x62>
			Principal_Datalogger_Button(&dirStruct, &fileStruct);
 800629a:	4905      	ldr	r1, [pc, #20]	; (80062b0 <HAL_GPIO_EXTI_Callback+0x70>)
 800629c:	4805      	ldr	r0, [pc, #20]	; (80062b4 <HAL_GPIO_EXTI_Callback+0x74>)
 800629e:	f7ff fed1 	bl	8006044 <Principal_Datalogger_Button>
	}
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	200018ae 	.word	0x200018ae
 80062b0:	20002c6c 	.word	0x20002c6c
 80062b4:	2000190c 	.word	0x2000190c

080062b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a30      	ldr	r2, [pc, #192]	; (8006388 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d158      	bne.n	800637c <HAL_TIM_PeriodElapsedCallback+0xc4>
	{
		accDatalogger[0]++;
 80062ca:	4b30      	ldr	r3, [pc, #192]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3301      	adds	r3, #1
 80062d0:	4a2e      	ldr	r2, [pc, #184]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80062d2:	6013      	str	r3, [r2, #0]
		if(accDatalogger[1] > 0) accDatalogger[1]--;
 80062d4:	4b2d      	ldr	r3, [pc, #180]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d004      	beq.n	80062e6 <HAL_TIM_PeriodElapsedCallback+0x2e>
 80062dc:	4b2b      	ldr	r3, [pc, #172]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	4a2a      	ldr	r2, [pc, #168]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80062e4:	6053      	str	r3, [r2, #4]

		accCAN[ANALOG_1_4]++;
 80062e6:	4b2a      	ldr	r3, [pc, #168]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3301      	adds	r3, #1
 80062ec:	4a28      	ldr	r2, [pc, #160]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80062ee:	6013      	str	r3, [r2, #0]
		accCAN[ANALOG_5_8]++;
 80062f0:	4b27      	ldr	r3, [pc, #156]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	3301      	adds	r3, #1
 80062f6:	4a26      	ldr	r2, [pc, #152]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80062f8:	6053      	str	r3, [r2, #4]
		accCAN[ANALOG_9_12]++;
 80062fa:	4b25      	ldr	r3, [pc, #148]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	3301      	adds	r3, #1
 8006300:	4a23      	ldr	r2, [pc, #140]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006302:	6093      	str	r3, [r2, #8]
		accCAN[RTC_MSG]++;
 8006304:	4b22      	ldr	r3, [pc, #136]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	4a21      	ldr	r2, [pc, #132]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800630c:	60d3      	str	r3, [r2, #12]
		accCAN[VERIFY_MSG]++;
 800630e:	4b20      	ldr	r3, [pc, #128]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	3301      	adds	r3, #1
 8006314:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006316:	6113      	str	r3, [r2, #16]
		accCAN[BEACON_MSG]++;
 8006318:	4b1d      	ldr	r3, [pc, #116]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	3301      	adds	r3, #1
 800631e:	4a1c      	ldr	r2, [pc, #112]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006320:	6153      	str	r3, [r2, #20]

		accMsg[ANALOG_1_4]++;
 8006322:	4b1c      	ldr	r3, [pc, #112]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	4a1a      	ldr	r2, [pc, #104]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800632a:	6013      	str	r3, [r2, #0]
		accMsg[ANALOG_5_8]++;
 800632c:	4b19      	ldr	r3, [pc, #100]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	3301      	adds	r3, #1
 8006332:	4a18      	ldr	r2, [pc, #96]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006334:	6053      	str	r3, [r2, #4]
		accMsg[ANALOG_9_12]++;
 8006336:	4b17      	ldr	r3, [pc, #92]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	3301      	adds	r3, #1
 800633c:	4a15      	ldr	r2, [pc, #84]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800633e:	6093      	str	r3, [r2, #8]
		accMsg[RTC_MSG]++;
 8006340:	4b14      	ldr	r3, [pc, #80]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	3301      	adds	r3, #1
 8006346:	4a13      	ldr	r2, [pc, #76]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006348:	60d3      	str	r3, [r2, #12]
		accMsg[VERIFY_MSG]++;
 800634a:	4b12      	ldr	r3, [pc, #72]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	3301      	adds	r3, #1
 8006350:	4a10      	ldr	r2, [pc, #64]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006352:	6113      	str	r3, [r2, #16]
		accMsg[BEACON_MSG]++;
 8006354:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	3301      	adds	r3, #1
 800635a:	4a0e      	ldr	r2, [pc, #56]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800635c:	6153      	str	r3, [r2, #20]
		accMsg[ECU_SAVE]++;
 800635e:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	3301      	adds	r3, #1
 8006364:	4a0b      	ldr	r2, [pc, #44]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006366:	6193      	str	r3, [r2, #24]
		accMsg[PDM_SAVE]++;
 8006368:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	3301      	adds	r3, #1
 800636e:	4a09      	ldr	r2, [pc, #36]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006370:	61d3      	str	r3, [r2, #28]

		accLap++;
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3301      	adds	r3, #1
 8006378:	4a07      	ldr	r2, [pc, #28]	; (8006398 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800637a:	6013      	str	r3, [r2, #0]
	}
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	40001400 	.word	0x40001400
 800638c:	20002afc 	.word	0x20002afc
 8006390:	20000720 	.word	0x20000720
 8006394:	20002be4 	.word	0x20002be4
 8006398:	20002c64 	.word	0x20002c64

0800639c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063a2:	2300      	movs	r3, #0
 80063a4:	607b      	str	r3, [r7, #4]
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <HAL_MspInit+0x4c>)
 80063a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063aa:	4a0f      	ldr	r2, [pc, #60]	; (80063e8 <HAL_MspInit+0x4c>)
 80063ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063b0:	6453      	str	r3, [r2, #68]	; 0x44
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <HAL_MspInit+0x4c>)
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ba:	607b      	str	r3, [r7, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063be:	2300      	movs	r3, #0
 80063c0:	603b      	str	r3, [r7, #0]
 80063c2:	4b09      	ldr	r3, [pc, #36]	; (80063e8 <HAL_MspInit+0x4c>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	4a08      	ldr	r2, [pc, #32]	; (80063e8 <HAL_MspInit+0x4c>)
 80063c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063cc:	6413      	str	r3, [r2, #64]	; 0x40
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <HAL_MspInit+0x4c>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40023800 	.word	0x40023800

080063ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08e      	sub	sp, #56	; 0x38
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	609a      	str	r2, [r3, #8]
 8006400:	60da      	str	r2, [r3, #12]
 8006402:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a79      	ldr	r2, [pc, #484]	; (80065f0 <HAL_ADC_MspInit+0x204>)
 800640a:	4293      	cmp	r3, r2
 800640c:	f040 808d 	bne.w	800652a <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006410:	2300      	movs	r3, #0
 8006412:	623b      	str	r3, [r7, #32]
 8006414:	4b77      	ldr	r3, [pc, #476]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 8006416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006418:	4a76      	ldr	r2, [pc, #472]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 800641a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800641e:	6453      	str	r3, [r2, #68]	; 0x44
 8006420:	4b74      	ldr	r3, [pc, #464]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 8006422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	4b70      	ldr	r3, [pc, #448]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	4a6f      	ldr	r2, [pc, #444]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 8006436:	f043 0301 	orr.w	r3, r3, #1
 800643a:	6313      	str	r3, [r2, #48]	; 0x30
 800643c:	4b6d      	ldr	r3, [pc, #436]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006448:	2300      	movs	r3, #0
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	4b69      	ldr	r3, [pc, #420]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	4a68      	ldr	r2, [pc, #416]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 8006452:	f043 0304 	orr.w	r3, r3, #4
 8006456:	6313      	str	r3, [r2, #48]	; 0x30
 8006458:	4b66      	ldr	r3, [pc, #408]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	4b62      	ldr	r3, [pc, #392]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	4a61      	ldr	r2, [pc, #388]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 800646e:	f043 0302 	orr.w	r3, r3, #2
 8006472:	6313      	str	r3, [r2, #48]	; 0x30
 8006474:	4b5f      	ldr	r3, [pc, #380]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006480:	23c0      	movs	r3, #192	; 0xc0
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006484:	2303      	movs	r3, #3
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006488:	2300      	movs	r3, #0
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800648c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006490:	4619      	mov	r1, r3
 8006492:	4859      	ldr	r0, [pc, #356]	; (80065f8 <HAL_ADC_MspInit+0x20c>)
 8006494:	f002 fb92 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006498:	2330      	movs	r3, #48	; 0x30
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800649c:	2303      	movs	r3, #3
 800649e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a8:	4619      	mov	r1, r3
 80064aa:	4854      	ldr	r0, [pc, #336]	; (80065fc <HAL_ADC_MspInit+0x210>)
 80064ac:	f002 fb86 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064b0:	2303      	movs	r3, #3
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064b4:	2303      	movs	r3, #3
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b8:	2300      	movs	r3, #0
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064c0:	4619      	mov	r1, r3
 80064c2:	484f      	ldr	r0, [pc, #316]	; (8006600 <HAL_ADC_MspInit+0x214>)
 80064c4:	f002 fb7a 	bl	8008bbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80064c8:	4b4e      	ldr	r3, [pc, #312]	; (8006604 <HAL_ADC_MspInit+0x218>)
 80064ca:	4a4f      	ldr	r2, [pc, #316]	; (8006608 <HAL_ADC_MspInit+0x21c>)
 80064cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80064ce:	4b4d      	ldr	r3, [pc, #308]	; (8006604 <HAL_ADC_MspInit+0x218>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064d4:	4b4b      	ldr	r3, [pc, #300]	; (8006604 <HAL_ADC_MspInit+0x218>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064da:	4b4a      	ldr	r3, [pc, #296]	; (8006604 <HAL_ADC_MspInit+0x218>)
 80064dc:	2200      	movs	r2, #0
 80064de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80064e0:	4b48      	ldr	r3, [pc, #288]	; (8006604 <HAL_ADC_MspInit+0x218>)
 80064e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80064e8:	4b46      	ldr	r3, [pc, #280]	; (8006604 <HAL_ADC_MspInit+0x218>)
 80064ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80064f0:	4b44      	ldr	r3, [pc, #272]	; (8006604 <HAL_ADC_MspInit+0x218>)
 80064f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80064f8:	4b42      	ldr	r3, [pc, #264]	; (8006604 <HAL_ADC_MspInit+0x218>)
 80064fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006500:	4b40      	ldr	r3, [pc, #256]	; (8006604 <HAL_ADC_MspInit+0x218>)
 8006502:	2200      	movs	r2, #0
 8006504:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006506:	4b3f      	ldr	r3, [pc, #252]	; (8006604 <HAL_ADC_MspInit+0x218>)
 8006508:	2200      	movs	r2, #0
 800650a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800650c:	483d      	ldr	r0, [pc, #244]	; (8006604 <HAL_ADC_MspInit+0x218>)
 800650e:	f001 ffb7 	bl	8008480 <HAL_DMA_Init>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8006518:	f7fb fb90 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a39      	ldr	r2, [pc, #228]	; (8006604 <HAL_ADC_MspInit+0x218>)
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
 8006522:	4a38      	ldr	r2, [pc, #224]	; (8006604 <HAL_ADC_MspInit+0x218>)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006528:	e05d      	b.n	80065e6 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a37      	ldr	r2, [pc, #220]	; (800660c <HAL_ADC_MspInit+0x220>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d158      	bne.n	80065e6 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	4b2e      	ldr	r3, [pc, #184]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 800653a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653c:	4a2d      	ldr	r2, [pc, #180]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 800653e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006542:	6453      	str	r3, [r2, #68]	; 0x44
 8006544:	4b2b      	ldr	r3, [pc, #172]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 8006546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	4b27      	ldr	r3, [pc, #156]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 800655a:	f043 0301 	orr.w	r3, r3, #1
 800655e:	6313      	str	r3, [r2, #48]	; 0x30
 8006560:	4b24      	ldr	r3, [pc, #144]	; (80065f4 <HAL_ADC_MspInit+0x208>)
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800656c:	233f      	movs	r3, #63	; 0x3f
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006570:	2303      	movs	r3, #3
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006574:	2300      	movs	r3, #0
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800657c:	4619      	mov	r1, r3
 800657e:	481e      	ldr	r0, [pc, #120]	; (80065f8 <HAL_ADC_MspInit+0x20c>)
 8006580:	f002 fb1c 	bl	8008bbc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006584:	4b22      	ldr	r3, [pc, #136]	; (8006610 <HAL_ADC_MspInit+0x224>)
 8006586:	4a23      	ldr	r2, [pc, #140]	; (8006614 <HAL_ADC_MspInit+0x228>)
 8006588:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800658a:	4b21      	ldr	r3, [pc, #132]	; (8006610 <HAL_ADC_MspInit+0x224>)
 800658c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006590:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006592:	4b1f      	ldr	r3, [pc, #124]	; (8006610 <HAL_ADC_MspInit+0x224>)
 8006594:	2200      	movs	r2, #0
 8006596:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006598:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <HAL_ADC_MspInit+0x224>)
 800659a:	2200      	movs	r2, #0
 800659c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800659e:	4b1c      	ldr	r3, [pc, #112]	; (8006610 <HAL_ADC_MspInit+0x224>)
 80065a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065a4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <HAL_ADC_MspInit+0x224>)
 80065a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065ac:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80065ae:	4b18      	ldr	r3, [pc, #96]	; (8006610 <HAL_ADC_MspInit+0x224>)
 80065b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065b4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80065b6:	4b16      	ldr	r3, [pc, #88]	; (8006610 <HAL_ADC_MspInit+0x224>)
 80065b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065bc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80065be:	4b14      	ldr	r3, [pc, #80]	; (8006610 <HAL_ADC_MspInit+0x224>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065c4:	4b12      	ldr	r3, [pc, #72]	; (8006610 <HAL_ADC_MspInit+0x224>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80065ca:	4811      	ldr	r0, [pc, #68]	; (8006610 <HAL_ADC_MspInit+0x224>)
 80065cc:	f001 ff58 	bl	8008480 <HAL_DMA_Init>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 80065d6:	f7fb fb31 	bl	8001c3c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a0c      	ldr	r2, [pc, #48]	; (8006610 <HAL_ADC_MspInit+0x224>)
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
 80065e0:	4a0b      	ldr	r2, [pc, #44]	; (8006610 <HAL_ADC_MspInit+0x224>)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80065e6:	bf00      	nop
 80065e8:	3738      	adds	r7, #56	; 0x38
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40012000 	.word	0x40012000
 80065f4:	40023800 	.word	0x40023800
 80065f8:	40020000 	.word	0x40020000
 80065fc:	40020800 	.word	0x40020800
 8006600:	40020400 	.word	0x40020400
 8006604:	2000193c 	.word	0x2000193c
 8006608:	40026410 	.word	0x40026410
 800660c:	40012100 	.word	0x40012100
 8006610:	20002b58 	.word	0x20002b58
 8006614:	40026440 	.word	0x40026440

08006618 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	; 0x28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006620:	f107 0314 	add.w	r3, r7, #20
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	605a      	str	r2, [r3, #4]
 800662a:	609a      	str	r2, [r3, #8]
 800662c:	60da      	str	r2, [r3, #12]
 800662e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1d      	ldr	r2, [pc, #116]	; (80066ac <HAL_CAN_MspInit+0x94>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d134      	bne.n	80066a4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800663a:	2300      	movs	r3, #0
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <HAL_CAN_MspInit+0x98>)
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	4a1b      	ldr	r2, [pc, #108]	; (80066b0 <HAL_CAN_MspInit+0x98>)
 8006644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006648:	6413      	str	r3, [r2, #64]	; 0x40
 800664a:	4b19      	ldr	r3, [pc, #100]	; (80066b0 <HAL_CAN_MspInit+0x98>)
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <HAL_CAN_MspInit+0x98>)
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	4a14      	ldr	r2, [pc, #80]	; (80066b0 <HAL_CAN_MspInit+0x98>)
 8006660:	f043 0302 	orr.w	r3, r3, #2
 8006664:	6313      	str	r3, [r2, #48]	; 0x30
 8006666:	4b12      	ldr	r3, [pc, #72]	; (80066b0 <HAL_CAN_MspInit+0x98>)
 8006668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006672:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006678:	2302      	movs	r3, #2
 800667a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800667c:	2300      	movs	r3, #0
 800667e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006680:	2303      	movs	r3, #3
 8006682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006684:	2309      	movs	r3, #9
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006688:	f107 0314 	add.w	r3, r7, #20
 800668c:	4619      	mov	r1, r3
 800668e:	4809      	ldr	r0, [pc, #36]	; (80066b4 <HAL_CAN_MspInit+0x9c>)
 8006690:	f002 fa94 	bl	8008bbc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8006694:	2200      	movs	r2, #0
 8006696:	2102      	movs	r1, #2
 8006698:	2014      	movs	r0, #20
 800669a:	f001 feba 	bl	8008412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800669e:	2014      	movs	r0, #20
 80066a0:	f001 fed3 	bl	800844a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80066a4:	bf00      	nop
 80066a6:	3728      	adds	r7, #40	; 0x28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40006400 	.word	0x40006400
 80066b0:	40023800 	.word	0x40023800
 80066b4:	40020400 	.word	0x40020400

080066b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08a      	sub	sp, #40	; 0x28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066c0:	f107 0314 	add.w	r3, r7, #20
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	605a      	str	r2, [r3, #4]
 80066ca:	609a      	str	r2, [r3, #8]
 80066cc:	60da      	str	r2, [r3, #12]
 80066ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a19      	ldr	r2, [pc, #100]	; (800673c <HAL_I2C_MspInit+0x84>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d12b      	bne.n	8006732 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066da:	2300      	movs	r3, #0
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	4b18      	ldr	r3, [pc, #96]	; (8006740 <HAL_I2C_MspInit+0x88>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	4a17      	ldr	r2, [pc, #92]	; (8006740 <HAL_I2C_MspInit+0x88>)
 80066e4:	f043 0302 	orr.w	r3, r3, #2
 80066e8:	6313      	str	r3, [r2, #48]	; 0x30
 80066ea:	4b15      	ldr	r3, [pc, #84]	; (8006740 <HAL_I2C_MspInit+0x88>)
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	613b      	str	r3, [r7, #16]
 80066f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80066f6:	23c0      	movs	r3, #192	; 0xc0
 80066f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80066fa:	2312      	movs	r3, #18
 80066fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006702:	2303      	movs	r3, #3
 8006704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006706:	2304      	movs	r3, #4
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800670a:	f107 0314 	add.w	r3, r7, #20
 800670e:	4619      	mov	r1, r3
 8006710:	480c      	ldr	r0, [pc, #48]	; (8006744 <HAL_I2C_MspInit+0x8c>)
 8006712:	f002 fa53 	bl	8008bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006716:	2300      	movs	r3, #0
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	4b09      	ldr	r3, [pc, #36]	; (8006740 <HAL_I2C_MspInit+0x88>)
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	4a08      	ldr	r2, [pc, #32]	; (8006740 <HAL_I2C_MspInit+0x88>)
 8006720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006724:	6413      	str	r3, [r2, #64]	; 0x40
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <HAL_I2C_MspInit+0x88>)
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006732:	bf00      	nop
 8006734:	3728      	adds	r7, #40	; 0x28
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40005400 	.word	0x40005400
 8006740:	40023800 	.word	0x40023800
 8006744:	40020400 	.word	0x40020400

08006748 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b09a      	sub	sp, #104	; 0x68
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006750:	f107 030c 	add.w	r3, r7, #12
 8006754:	225c      	movs	r2, #92	; 0x5c
 8006756:	2100      	movs	r1, #0
 8006758:	4618      	mov	r0, r3
 800675a:	f011 fb61 	bl	8017e20 <memset>
  if(hrtc->Instance==RTC)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a0c      	ldr	r2, [pc, #48]	; (8006794 <HAL_RTC_MspInit+0x4c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d111      	bne.n	800678c <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006768:	2320      	movs	r3, #32
 800676a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800676c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006770:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006772:	f107 030c 	add.w	r3, r7, #12
 8006776:	4618      	mov	r0, r3
 8006778:	f004 ff7c 	bl	800b674 <HAL_RCCEx_PeriphCLKConfig>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8006782:	f7fb fa5b 	bl	8001c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006786:	4b04      	ldr	r3, [pc, #16]	; (8006798 <HAL_RTC_MspInit+0x50>)
 8006788:	2201      	movs	r2, #1
 800678a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800678c:	bf00      	nop
 800678e:	3768      	adds	r7, #104	; 0x68
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40002800 	.word	0x40002800
 8006798:	42470e3c 	.word	0x42470e3c

0800679c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08a      	sub	sp, #40	; 0x28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	605a      	str	r2, [r3, #4]
 80067ae:	609a      	str	r2, [r3, #8]
 80067b0:	60da      	str	r2, [r3, #12]
 80067b2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a68      	ldr	r2, [pc, #416]	; (800695c <HAL_SD_MspInit+0x1c0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	f040 80c9 	bne.w	8006952 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	4b66      	ldr	r3, [pc, #408]	; (8006960 <HAL_SD_MspInit+0x1c4>)
 80067c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c8:	4a65      	ldr	r2, [pc, #404]	; (8006960 <HAL_SD_MspInit+0x1c4>)
 80067ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067ce:	6453      	str	r3, [r2, #68]	; 0x44
 80067d0:	4b63      	ldr	r3, [pc, #396]	; (8006960 <HAL_SD_MspInit+0x1c4>)
 80067d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067dc:	2300      	movs	r3, #0
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	4b5f      	ldr	r3, [pc, #380]	; (8006960 <HAL_SD_MspInit+0x1c4>)
 80067e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e4:	4a5e      	ldr	r2, [pc, #376]	; (8006960 <HAL_SD_MspInit+0x1c4>)
 80067e6:	f043 0304 	orr.w	r3, r3, #4
 80067ea:	6313      	str	r3, [r2, #48]	; 0x30
 80067ec:	4b5c      	ldr	r3, [pc, #368]	; (8006960 <HAL_SD_MspInit+0x1c4>)
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	60fb      	str	r3, [r7, #12]
 80067f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80067f8:	2300      	movs	r3, #0
 80067fa:	60bb      	str	r3, [r7, #8]
 80067fc:	4b58      	ldr	r3, [pc, #352]	; (8006960 <HAL_SD_MspInit+0x1c4>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	4a57      	ldr	r2, [pc, #348]	; (8006960 <HAL_SD_MspInit+0x1c4>)
 8006802:	f043 0308 	orr.w	r3, r3, #8
 8006806:	6313      	str	r3, [r2, #48]	; 0x30
 8006808:	4b55      	ldr	r3, [pc, #340]	; (8006960 <HAL_SD_MspInit+0x1c4>)
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	60bb      	str	r3, [r7, #8]
 8006812:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006814:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006818:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800681a:	2302      	movs	r3, #2
 800681c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800681e:	2300      	movs	r3, #0
 8006820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006822:	2303      	movs	r3, #3
 8006824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006826:	230c      	movs	r3, #12
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800682a:	f107 0314 	add.w	r3, r7, #20
 800682e:	4619      	mov	r1, r3
 8006830:	484c      	ldr	r0, [pc, #304]	; (8006964 <HAL_SD_MspInit+0x1c8>)
 8006832:	f002 f9c3 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006836:	2304      	movs	r3, #4
 8006838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800683a:	2302      	movs	r3, #2
 800683c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800683e:	2300      	movs	r3, #0
 8006840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006842:	2303      	movs	r3, #3
 8006844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006846:	230c      	movs	r3, #12
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800684a:	f107 0314 	add.w	r3, r7, #20
 800684e:	4619      	mov	r1, r3
 8006850:	4845      	ldr	r0, [pc, #276]	; (8006968 <HAL_SD_MspInit+0x1cc>)
 8006852:	f002 f9b3 	bl	8008bbc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006856:	4b45      	ldr	r3, [pc, #276]	; (800696c <HAL_SD_MspInit+0x1d0>)
 8006858:	4a45      	ldr	r2, [pc, #276]	; (8006970 <HAL_SD_MspInit+0x1d4>)
 800685a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800685c:	4b43      	ldr	r3, [pc, #268]	; (800696c <HAL_SD_MspInit+0x1d0>)
 800685e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006862:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006864:	4b41      	ldr	r3, [pc, #260]	; (800696c <HAL_SD_MspInit+0x1d0>)
 8006866:	2200      	movs	r2, #0
 8006868:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800686a:	4b40      	ldr	r3, [pc, #256]	; (800696c <HAL_SD_MspInit+0x1d0>)
 800686c:	2200      	movs	r2, #0
 800686e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006870:	4b3e      	ldr	r3, [pc, #248]	; (800696c <HAL_SD_MspInit+0x1d0>)
 8006872:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006876:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006878:	4b3c      	ldr	r3, [pc, #240]	; (800696c <HAL_SD_MspInit+0x1d0>)
 800687a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800687e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006880:	4b3a      	ldr	r3, [pc, #232]	; (800696c <HAL_SD_MspInit+0x1d0>)
 8006882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006886:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006888:	4b38      	ldr	r3, [pc, #224]	; (800696c <HAL_SD_MspInit+0x1d0>)
 800688a:	2220      	movs	r2, #32
 800688c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800688e:	4b37      	ldr	r3, [pc, #220]	; (800696c <HAL_SD_MspInit+0x1d0>)
 8006890:	2200      	movs	r2, #0
 8006892:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006894:	4b35      	ldr	r3, [pc, #212]	; (800696c <HAL_SD_MspInit+0x1d0>)
 8006896:	2204      	movs	r2, #4
 8006898:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800689a:	4b34      	ldr	r3, [pc, #208]	; (800696c <HAL_SD_MspInit+0x1d0>)
 800689c:	2203      	movs	r2, #3
 800689e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80068a0:	4b32      	ldr	r3, [pc, #200]	; (800696c <HAL_SD_MspInit+0x1d0>)
 80068a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80068a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80068a8:	4b30      	ldr	r3, [pc, #192]	; (800696c <HAL_SD_MspInit+0x1d0>)
 80068aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80068ae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80068b0:	482e      	ldr	r0, [pc, #184]	; (800696c <HAL_SD_MspInit+0x1d0>)
 80068b2:	f001 fde5 	bl	8008480 <HAL_DMA_Init>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80068bc:	f7fb f9be 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a2a      	ldr	r2, [pc, #168]	; (800696c <HAL_SD_MspInit+0x1d0>)
 80068c4:	641a      	str	r2, [r3, #64]	; 0x40
 80068c6:	4a29      	ldr	r2, [pc, #164]	; (800696c <HAL_SD_MspInit+0x1d0>)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80068cc:	4b29      	ldr	r3, [pc, #164]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 80068ce:	4a2a      	ldr	r2, [pc, #168]	; (8006978 <HAL_SD_MspInit+0x1dc>)
 80068d0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80068d2:	4b28      	ldr	r3, [pc, #160]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 80068d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068d8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068da:	4b26      	ldr	r3, [pc, #152]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 80068dc:	2240      	movs	r2, #64	; 0x40
 80068de:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068e0:	4b24      	ldr	r3, [pc, #144]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80068e6:	4b23      	ldr	r3, [pc, #140]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 80068e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068ec:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80068ee:	4b21      	ldr	r3, [pc, #132]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 80068f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068f4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80068f6:	4b1f      	ldr	r3, [pc, #124]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 80068f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80068fc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80068fe:	4b1d      	ldr	r3, [pc, #116]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 8006900:	2220      	movs	r2, #32
 8006902:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006904:	4b1b      	ldr	r3, [pc, #108]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 8006906:	2200      	movs	r2, #0
 8006908:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800690a:	4b1a      	ldr	r3, [pc, #104]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 800690c:	2204      	movs	r2, #4
 800690e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006910:	4b18      	ldr	r3, [pc, #96]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 8006912:	2203      	movs	r2, #3
 8006914:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006916:	4b17      	ldr	r3, [pc, #92]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 8006918:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800691c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800691e:	4b15      	ldr	r3, [pc, #84]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 8006920:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006924:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006926:	4813      	ldr	r0, [pc, #76]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 8006928:	f001 fdaa 	bl	8008480 <HAL_DMA_Init>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8006932:	f7fb f983 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a0e      	ldr	r2, [pc, #56]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 800693a:	63da      	str	r2, [r3, #60]	; 0x3c
 800693c:	4a0d      	ldr	r2, [pc, #52]	; (8006974 <HAL_SD_MspInit+0x1d8>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006942:	2200      	movs	r2, #0
 8006944:	2100      	movs	r1, #0
 8006946:	2031      	movs	r0, #49	; 0x31
 8006948:	f001 fd63 	bl	8008412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800694c:	2031      	movs	r0, #49	; 0x31
 800694e:	f001 fd7c 	bl	800844a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006952:	bf00      	nop
 8006954:	3728      	adds	r7, #40	; 0x28
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40012c00 	.word	0x40012c00
 8006960:	40023800 	.word	0x40023800
 8006964:	40020800 	.word	0x40020800
 8006968:	40020c00 	.word	0x40020c00
 800696c:	2000069c 	.word	0x2000069c
 8006970:	40026458 	.word	0x40026458
 8006974:	200029bc 	.word	0x200029bc
 8006978:	400264a0 	.word	0x400264a0

0800697c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a0e      	ldr	r2, [pc, #56]	; (80069c4 <HAL_TIM_Base_MspInit+0x48>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d115      	bne.n	80069ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	4b0d      	ldr	r3, [pc, #52]	; (80069c8 <HAL_TIM_Base_MspInit+0x4c>)
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	4a0c      	ldr	r2, [pc, #48]	; (80069c8 <HAL_TIM_Base_MspInit+0x4c>)
 8006998:	f043 0320 	orr.w	r3, r3, #32
 800699c:	6413      	str	r3, [r2, #64]	; 0x40
 800699e:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <HAL_TIM_Base_MspInit+0x4c>)
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80069aa:	2200      	movs	r2, #0
 80069ac:	2100      	movs	r1, #0
 80069ae:	2037      	movs	r0, #55	; 0x37
 80069b0:	f001 fd2f 	bl	8008412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80069b4:	2037      	movs	r0, #55	; 0x37
 80069b6:	f001 fd48 	bl	800844a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	40001400 	.word	0x40001400
 80069c8:	40023800 	.word	0x40023800

080069cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80069d0:	e7fe      	b.n	80069d0 <NMI_Handler+0x4>

080069d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069d2:	b480      	push	{r7}
 80069d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069d6:	e7fe      	b.n	80069d6 <HardFault_Handler+0x4>

080069d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069dc:	e7fe      	b.n	80069dc <MemManage_Handler+0x4>

080069de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069de:	b480      	push	{r7}
 80069e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069e2:	e7fe      	b.n	80069e2 <BusFault_Handler+0x4>

080069e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069e8:	e7fe      	b.n	80069e8 <UsageFault_Handler+0x4>

080069ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069ea:	b480      	push	{r7}
 80069ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069ee:	bf00      	nop
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069fc:	bf00      	nop
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a06:	b480      	push	{r7}
 8006a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a0a:	bf00      	nop
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a18:	f000 f922 	bl	8006c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a1c:	bf00      	nop
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006a24:	4802      	ldr	r0, [pc, #8]	; (8006a30 <CAN1_RX0_IRQHandler+0x10>)
 8006a26:	f001 f9e9 	bl	8007dfc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006a2a:	bf00      	nop
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20002bb8 	.word	0x20002bb8

08006a34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 8006a38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006a3c:	f002 fa9e 	bl	8008f7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 8006a40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006a44:	f002 fa9a 	bl	8008f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006a48:	bf00      	nop
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006a50:	4802      	ldr	r0, [pc, #8]	; (8006a5c <SDIO_IRQHandler+0x10>)
 8006a52:	f006 fec1 	bl	800d7d8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006a56:	bf00      	nop
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20002a78 	.word	0x20002a78

08006a60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006a64:	4802      	ldr	r0, [pc, #8]	; (8006a70 <TIM7_IRQHandler+0x10>)
 8006a66:	f008 f81f 	bl	800eaa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006a6a:	bf00      	nop
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20002c1c 	.word	0x20002c1c

08006a74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006a78:	4802      	ldr	r0, [pc, #8]	; (8006a84 <DMA2_Stream0_IRQHandler+0x10>)
 8006a7a:	f001 fe29 	bl	80086d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006a7e:	bf00      	nop
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	2000193c 	.word	0x2000193c

08006a88 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006a8c:	4802      	ldr	r0, [pc, #8]	; (8006a98 <DMA2_Stream2_IRQHandler+0x10>)
 8006a8e:	f001 fe1f 	bl	80086d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006a92:	bf00      	nop
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20002b58 	.word	0x20002b58

08006a9c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006aa0:	4802      	ldr	r0, [pc, #8]	; (8006aac <DMA2_Stream3_IRQHandler+0x10>)
 8006aa2:	f001 fe15 	bl	80086d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006aa6:	bf00      	nop
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	2000069c 	.word	0x2000069c

08006ab0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006ab4:	4802      	ldr	r0, [pc, #8]	; (8006ac0 <OTG_FS_IRQHandler+0x10>)
 8006ab6:	f003 fbe1 	bl	800a27c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006aba:	bf00      	nop
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	200061e4 	.word	0x200061e4

08006ac4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006ac8:	4802      	ldr	r0, [pc, #8]	; (8006ad4 <DMA2_Stream6_IRQHandler+0x10>)
 8006aca:	f001 fe01 	bl	80086d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006ace:	bf00      	nop
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200029bc 	.word	0x200029bc

08006ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ae0:	4a14      	ldr	r2, [pc, #80]	; (8006b34 <_sbrk+0x5c>)
 8006ae2:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <_sbrk+0x60>)
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006aec:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <_sbrk+0x64>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006af4:	4b11      	ldr	r3, [pc, #68]	; (8006b3c <_sbrk+0x64>)
 8006af6:	4a12      	ldr	r2, [pc, #72]	; (8006b40 <_sbrk+0x68>)
 8006af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006afa:	4b10      	ldr	r3, [pc, #64]	; (8006b3c <_sbrk+0x64>)
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4413      	add	r3, r2
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d207      	bcs.n	8006b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b08:	f011 f960 	bl	8017dcc <__errno>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	220c      	movs	r2, #12
 8006b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b12:	f04f 33ff 	mov.w	r3, #4294967295
 8006b16:	e009      	b.n	8006b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b18:	4b08      	ldr	r3, [pc, #32]	; (8006b3c <_sbrk+0x64>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b1e:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <_sbrk+0x64>)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4413      	add	r3, r2
 8006b26:	4a05      	ldr	r2, [pc, #20]	; (8006b3c <_sbrk+0x64>)
 8006b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20020000 	.word	0x20020000
 8006b38:	00006000 	.word	0x00006000
 8006b3c:	200001f4 	.word	0x200001f4
 8006b40:	20006600 	.word	0x20006600

08006b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b48:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <SystemInit+0x20>)
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4e:	4a05      	ldr	r2, [pc, #20]	; (8006b64 <SystemInit+0x20>)
 8006b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b58:	bf00      	nop
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	e000ed00 	.word	0xe000ed00

08006b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ba0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006b6c:	480d      	ldr	r0, [pc, #52]	; (8006ba4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006b6e:	490e      	ldr	r1, [pc, #56]	; (8006ba8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006b70:	4a0e      	ldr	r2, [pc, #56]	; (8006bac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b74:	e002      	b.n	8006b7c <LoopCopyDataInit>

08006b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b7a:	3304      	adds	r3, #4

08006b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b80:	d3f9      	bcc.n	8006b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b82:	4a0b      	ldr	r2, [pc, #44]	; (8006bb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006b84:	4c0b      	ldr	r4, [pc, #44]	; (8006bb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b88:	e001      	b.n	8006b8e <LoopFillZerobss>

08006b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b8c:	3204      	adds	r2, #4

08006b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b90:	d3fb      	bcc.n	8006b8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006b92:	f7ff ffd7 	bl	8006b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b96:	f011 f91f 	bl	8017dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b9a:	f7fa fb89 	bl	80012b0 <main>
  bx  lr    
 8006b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ba8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006bac:	08018c40 	.word	0x08018c40
  ldr r2, =_sbss
 8006bb0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006bb4:	200065fc 	.word	0x200065fc

08006bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006bb8:	e7fe      	b.n	8006bb8 <ADC_IRQHandler>
	...

08006bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006bc0:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <HAL_Init+0x40>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a0d      	ldr	r2, [pc, #52]	; (8006bfc <HAL_Init+0x40>)
 8006bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006bcc:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <HAL_Init+0x40>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a0a      	ldr	r2, [pc, #40]	; (8006bfc <HAL_Init+0x40>)
 8006bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006bd8:	4b08      	ldr	r3, [pc, #32]	; (8006bfc <HAL_Init+0x40>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a07      	ldr	r2, [pc, #28]	; (8006bfc <HAL_Init+0x40>)
 8006bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006be4:	2003      	movs	r0, #3
 8006be6:	f001 fc09 	bl	80083fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bea:	200f      	movs	r0, #15
 8006bec:	f000 f808 	bl	8006c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006bf0:	f7ff fbd4 	bl	800639c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40023c00 	.word	0x40023c00

08006c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c08:	4b12      	ldr	r3, [pc, #72]	; (8006c54 <HAL_InitTick+0x54>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <HAL_InitTick+0x58>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	4619      	mov	r1, r3
 8006c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 fc21 	bl	8008466 <HAL_SYSTICK_Config>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e00e      	b.n	8006c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b0f      	cmp	r3, #15
 8006c32:	d80a      	bhi.n	8006c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c34:	2200      	movs	r2, #0
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3c:	f001 fbe9 	bl	8008412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c40:	4a06      	ldr	r2, [pc, #24]	; (8006c5c <HAL_InitTick+0x5c>)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e000      	b.n	8006c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	20000000 	.word	0x20000000
 8006c58:	20000008 	.word	0x20000008
 8006c5c:	20000004 	.word	0x20000004

08006c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c60:	b480      	push	{r7}
 8006c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c64:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <HAL_IncTick+0x20>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <HAL_IncTick+0x24>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4413      	add	r3, r2
 8006c70:	4a04      	ldr	r2, [pc, #16]	; (8006c84 <HAL_IncTick+0x24>)
 8006c72:	6013      	str	r3, [r2, #0]
}
 8006c74:	bf00      	nop
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	20000008 	.word	0x20000008
 8006c84:	20003ca4 	.word	0x20003ca4

08006c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8006c8c:	4b03      	ldr	r3, [pc, #12]	; (8006c9c <HAL_GetTick+0x14>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20003ca4 	.word	0x20003ca4

08006ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ca8:	f7ff ffee 	bl	8006c88 <HAL_GetTick>
 8006cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb8:	d005      	beq.n	8006cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cba:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <HAL_Delay+0x44>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006cc6:	bf00      	nop
 8006cc8:	f7ff ffde 	bl	8006c88 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d8f7      	bhi.n	8006cc8 <HAL_Delay+0x28>
  {
  }
}
 8006cd8:	bf00      	nop
 8006cda:	bf00      	nop
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000008 	.word	0x20000008

08006ce8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e033      	b.n	8006d66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff fb70 	bl	80063ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f003 0310 	and.w	r3, r3, #16
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d118      	bne.n	8006d58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006d2e:	f023 0302 	bic.w	r3, r3, #2
 8006d32:	f043 0202 	orr.w	r2, r3, #2
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fa78 	bl	8007230 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f023 0303 	bic.w	r3, r3, #3
 8006d4e:	f043 0201 	orr.w	r2, r3, #1
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	641a      	str	r2, [r3, #64]	; 0x40
 8006d56:	e001      	b.n	8006d5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_ADC_Start_DMA+0x1e>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e0e9      	b.n	8006f62 <HAL_ADC_Start_DMA+0x1f2>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d018      	beq.n	8006dd6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006db4:	4b6d      	ldr	r3, [pc, #436]	; (8006f6c <HAL_ADC_Start_DMA+0x1fc>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a6d      	ldr	r2, [pc, #436]	; (8006f70 <HAL_ADC_Start_DMA+0x200>)
 8006dba:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbe:	0c9a      	lsrs	r2, r3, #18
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	4413      	add	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006dc8:	e002      	b.n	8006dd0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f9      	bne.n	8006dca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de4:	d107      	bne.n	8006df6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006df4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	f040 80a1 	bne.w	8006f48 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e0e:	f023 0301 	bic.w	r3, r3, #1
 8006e12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e44:	d106      	bne.n	8006e54 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	f023 0206 	bic.w	r2, r3, #6
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	645a      	str	r2, [r3, #68]	; 0x44
 8006e52:	e002      	b.n	8006e5a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e62:	4b44      	ldr	r3, [pc, #272]	; (8006f74 <HAL_ADC_Start_DMA+0x204>)
 8006e64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	4a43      	ldr	r2, [pc, #268]	; (8006f78 <HAL_ADC_Start_DMA+0x208>)
 8006e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	4a42      	ldr	r2, [pc, #264]	; (8006f7c <HAL_ADC_Start_DMA+0x20c>)
 8006e74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	4a41      	ldr	r2, [pc, #260]	; (8006f80 <HAL_ADC_Start_DMA+0x210>)
 8006e7c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006e86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006e96:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ea6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	334c      	adds	r3, #76	; 0x4c
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f001 fb90 	bl	80085dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d12a      	bne.n	8006f1e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a2d      	ldr	r2, [pc, #180]	; (8006f84 <HAL_ADC_Start_DMA+0x214>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d015      	beq.n	8006efe <HAL_ADC_Start_DMA+0x18e>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a2c      	ldr	r2, [pc, #176]	; (8006f88 <HAL_ADC_Start_DMA+0x218>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d105      	bne.n	8006ee8 <HAL_ADC_Start_DMA+0x178>
 8006edc:	4b25      	ldr	r3, [pc, #148]	; (8006f74 <HAL_ADC_Start_DMA+0x204>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a27      	ldr	r2, [pc, #156]	; (8006f8c <HAL_ADC_Start_DMA+0x21c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d136      	bne.n	8006f60 <HAL_ADC_Start_DMA+0x1f0>
 8006ef2:	4b20      	ldr	r3, [pc, #128]	; (8006f74 <HAL_ADC_Start_DMA+0x204>)
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f003 0310 	and.w	r3, r3, #16
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d130      	bne.n	8006f60 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d129      	bne.n	8006f60 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f1a:	609a      	str	r2, [r3, #8]
 8006f1c:	e020      	b.n	8006f60 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a18      	ldr	r2, [pc, #96]	; (8006f84 <HAL_ADC_Start_DMA+0x214>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d11b      	bne.n	8006f60 <HAL_ADC_Start_DMA+0x1f0>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d114      	bne.n	8006f60 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f44:	609a      	str	r2, [r3, #8]
 8006f46:	e00b      	b.n	8006f60 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	f043 0210 	orr.w	r2, r3, #16
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f58:	f043 0201 	orr.w	r2, r3, #1
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000000 	.word	0x20000000
 8006f70:	431bde83 	.word	0x431bde83
 8006f74:	40012300 	.word	0x40012300
 8006f78:	08007429 	.word	0x08007429
 8006f7c:	080074e3 	.word	0x080074e3
 8006f80:	080074ff 	.word	0x080074ff
 8006f84:	40012000 	.word	0x40012000
 8006f88:	40012100 	.word	0x40012100
 8006f8c:	40012200 	.word	0x40012200

08006f90 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_ADC_ConfigChannel+0x1c>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e113      	b.n	8007210 <HAL_ADC_ConfigChannel+0x244>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b09      	cmp	r3, #9
 8006ff6:	d925      	bls.n	8007044 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68d9      	ldr	r1, [r3, #12]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	4613      	mov	r3, r2
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	4413      	add	r3, r2
 800700c:	3b1e      	subs	r3, #30
 800700e:	2207      	movs	r2, #7
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	43da      	mvns	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	400a      	ands	r2, r1
 800701c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68d9      	ldr	r1, [r3, #12]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	4618      	mov	r0, r3
 8007030:	4603      	mov	r3, r0
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	4403      	add	r3, r0
 8007036:	3b1e      	subs	r3, #30
 8007038:	409a      	lsls	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	60da      	str	r2, [r3, #12]
 8007042:	e022      	b.n	800708a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6919      	ldr	r1, [r3, #16]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	4613      	mov	r3, r2
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	4413      	add	r3, r2
 8007058:	2207      	movs	r2, #7
 800705a:	fa02 f303 	lsl.w	r3, r2, r3
 800705e:	43da      	mvns	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	400a      	ands	r2, r1
 8007066:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6919      	ldr	r1, [r3, #16]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	4618      	mov	r0, r3
 800707a:	4603      	mov	r3, r0
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	4403      	add	r3, r0
 8007080:	409a      	lsls	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b06      	cmp	r3, #6
 8007090:	d824      	bhi.n	80070dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	3b05      	subs	r3, #5
 80070a4:	221f      	movs	r2, #31
 80070a6:	fa02 f303 	lsl.w	r3, r2, r3
 80070aa:	43da      	mvns	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	400a      	ands	r2, r1
 80070b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	4618      	mov	r0, r3
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	3b05      	subs	r3, #5
 80070ce:	fa00 f203 	lsl.w	r2, r0, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	635a      	str	r2, [r3, #52]	; 0x34
 80070da:	e04c      	b.n	8007176 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b0c      	cmp	r3, #12
 80070e2:	d824      	bhi.n	800712e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	3b23      	subs	r3, #35	; 0x23
 80070f6:	221f      	movs	r2, #31
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	43da      	mvns	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	400a      	ands	r2, r1
 8007104:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	4618      	mov	r0, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	3b23      	subs	r3, #35	; 0x23
 8007120:	fa00 f203 	lsl.w	r2, r0, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	631a      	str	r2, [r3, #48]	; 0x30
 800712c:	e023      	b.n	8007176 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	4613      	mov	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	3b41      	subs	r3, #65	; 0x41
 8007140:	221f      	movs	r2, #31
 8007142:	fa02 f303 	lsl.w	r3, r2, r3
 8007146:	43da      	mvns	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	400a      	ands	r2, r1
 800714e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	4618      	mov	r0, r3
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	3b41      	subs	r3, #65	; 0x41
 800716a:	fa00 f203 	lsl.w	r2, r0, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007176:	4b29      	ldr	r3, [pc, #164]	; (800721c <HAL_ADC_ConfigChannel+0x250>)
 8007178:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a28      	ldr	r2, [pc, #160]	; (8007220 <HAL_ADC_ConfigChannel+0x254>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d10f      	bne.n	80071a4 <HAL_ADC_ConfigChannel+0x1d8>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b12      	cmp	r3, #18
 800718a:	d10b      	bne.n	80071a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1d      	ldr	r2, [pc, #116]	; (8007220 <HAL_ADC_ConfigChannel+0x254>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d12b      	bne.n	8007206 <HAL_ADC_ConfigChannel+0x23a>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a1c      	ldr	r2, [pc, #112]	; (8007224 <HAL_ADC_ConfigChannel+0x258>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <HAL_ADC_ConfigChannel+0x1f4>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b11      	cmp	r3, #17
 80071be:	d122      	bne.n	8007206 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a11      	ldr	r2, [pc, #68]	; (8007224 <HAL_ADC_ConfigChannel+0x258>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d111      	bne.n	8007206 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80071e2:	4b11      	ldr	r3, [pc, #68]	; (8007228 <HAL_ADC_ConfigChannel+0x25c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a11      	ldr	r2, [pc, #68]	; (800722c <HAL_ADC_ConfigChannel+0x260>)
 80071e8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ec:	0c9a      	lsrs	r2, r3, #18
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80071f8:	e002      	b.n	8007200 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f9      	bne.n	80071fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	40012300 	.word	0x40012300
 8007220:	40012000 	.word	0x40012000
 8007224:	10000012 	.word	0x10000012
 8007228:	20000000 	.word	0x20000000
 800722c:	431bde83 	.word	0x431bde83

08007230 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007238:	4b79      	ldr	r3, [pc, #484]	; (8007420 <ADC_Init+0x1f0>)
 800723a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	431a      	orrs	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6859      	ldr	r1, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	021a      	lsls	r2, r3, #8
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007288:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6859      	ldr	r1, [r3, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6899      	ldr	r1, [r3, #8]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	4a58      	ldr	r2, [pc, #352]	; (8007424 <ADC_Init+0x1f4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d022      	beq.n	800730e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6899      	ldr	r1, [r3, #8]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80072f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6899      	ldr	r1, [r3, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	609a      	str	r2, [r3, #8]
 800730c:	e00f      	b.n	800732e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800731c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800732c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0202 	bic.w	r2, r2, #2
 800733c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6899      	ldr	r1, [r3, #8]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7e1b      	ldrb	r3, [r3, #24]
 8007348:	005a      	lsls	r2, r3, #1
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01b      	beq.n	8007394 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800736a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800737a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6859      	ldr	r1, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	3b01      	subs	r3, #1
 8007388:	035a      	lsls	r2, r3, #13
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
 8007392:	e007      	b.n	80073a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80073b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	3b01      	subs	r3, #1
 80073c0:	051a      	lsls	r2, r3, #20
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80073d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6899      	ldr	r1, [r3, #8]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073e6:	025a      	lsls	r2, r3, #9
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6899      	ldr	r1, [r3, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	029a      	lsls	r2, r3, #10
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	609a      	str	r2, [r3, #8]
}
 8007414:	bf00      	nop
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	40012300 	.word	0x40012300
 8007424:	0f000001 	.word	0x0f000001

08007428 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800743e:	2b00      	cmp	r3, #0
 8007440:	d13c      	bne.n	80074bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d12b      	bne.n	80074b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007460:	2b00      	cmp	r3, #0
 8007462:	d127      	bne.n	80074b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800746e:	2b00      	cmp	r3, #0
 8007470:	d006      	beq.n	8007480 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800747c:	2b00      	cmp	r3, #0
 800747e:	d119      	bne.n	80074b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0220 	bic.w	r2, r2, #32
 800748e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007494:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d105      	bne.n	80074b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ac:	f043 0201 	orr.w	r2, r3, #1
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff fd6b 	bl	8006f90 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80074ba:	e00e      	b.n	80074da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f7ff fd75 	bl	8006fb8 <HAL_ADC_ErrorCallback>
}
 80074ce:	e004      	b.n	80074da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	4798      	blx	r3
}
 80074da:	bf00      	nop
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7ff fd57 	bl	8006fa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2240      	movs	r2, #64	; 0x40
 8007510:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007516:	f043 0204 	orr.w	r2, r3, #4
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff fd4a 	bl	8006fb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007524:	bf00      	nop
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e0ed      	b.n	800771a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff f864 	bl	8006618 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0201 	orr.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007560:	f7ff fb92 	bl	8006c88 <HAL_GetTick>
 8007564:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007566:	e012      	b.n	800758e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007568:	f7ff fb8e 	bl	8006c88 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b0a      	cmp	r3, #10
 8007574:	d90b      	bls.n	800758e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2205      	movs	r2, #5
 8007586:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e0c5      	b.n	800771a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0e5      	beq.n	8007568 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0202 	bic.w	r2, r2, #2
 80075aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075ac:	f7ff fb6c 	bl	8006c88 <HAL_GetTick>
 80075b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80075b2:	e012      	b.n	80075da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80075b4:	f7ff fb68 	bl	8006c88 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b0a      	cmp	r3, #10
 80075c0:	d90b      	bls.n	80075da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2205      	movs	r2, #5
 80075d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e09f      	b.n	800771a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e5      	bne.n	80075b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	7e1b      	ldrb	r3, [r3, #24]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d108      	bne.n	8007602 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	e007      	b.n	8007612 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007610:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	7e5b      	ldrb	r3, [r3, #25]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d108      	bne.n	800762c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	e007      	b.n	800763c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800763a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	7e9b      	ldrb	r3, [r3, #26]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d108      	bne.n	8007656 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 0220 	orr.w	r2, r2, #32
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	e007      	b.n	8007666 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0220 	bic.w	r2, r2, #32
 8007664:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	7edb      	ldrb	r3, [r3, #27]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d108      	bne.n	8007680 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0210 	bic.w	r2, r2, #16
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e007      	b.n	8007690 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0210 	orr.w	r2, r2, #16
 800768e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	7f1b      	ldrb	r3, [r3, #28]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d108      	bne.n	80076aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0208 	orr.w	r2, r2, #8
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	e007      	b.n	80076ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0208 	bic.w	r2, r2, #8
 80076b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	7f5b      	ldrb	r3, [r3, #29]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d108      	bne.n	80076d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0204 	orr.w	r2, r2, #4
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	e007      	b.n	80076e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0204 	bic.w	r2, r2, #4
 80076e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	431a      	orrs	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	ea42 0103 	orr.w	r1, r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	1e5a      	subs	r2, r3, #1
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800773a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800773c:	7cfb      	ldrb	r3, [r7, #19]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d003      	beq.n	800774a <HAL_CAN_ConfigFilter+0x26>
 8007742:	7cfb      	ldrb	r3, [r7, #19]
 8007744:	2b02      	cmp	r3, #2
 8007746:	f040 80be 	bne.w	80078c6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800774a:	4b65      	ldr	r3, [pc, #404]	; (80078e0 <HAL_CAN_ConfigFilter+0x1bc>)
 800774c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007754:	f043 0201 	orr.w	r2, r3, #1
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007764:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	431a      	orrs	r2, r3
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	f003 031f 	and.w	r3, r3, #31
 800778a:	2201      	movs	r2, #1
 800778c:	fa02 f303 	lsl.w	r3, r2, r3
 8007790:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	43db      	mvns	r3, r3
 800779c:	401a      	ands	r2, r3
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d123      	bne.n	80077f4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	43db      	mvns	r3, r3
 80077b6:	401a      	ands	r2, r3
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80077ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	3248      	adds	r2, #72	; 0x48
 80077d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80077e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80077ea:	6979      	ldr	r1, [r7, #20]
 80077ec:	3348      	adds	r3, #72	; 0x48
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	440b      	add	r3, r1
 80077f2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d122      	bne.n	8007842 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	431a      	orrs	r2, r3
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800781c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	3248      	adds	r2, #72	; 0x48
 8007822:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007836:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007838:	6979      	ldr	r1, [r7, #20]
 800783a:	3348      	adds	r3, #72	; 0x48
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	440b      	add	r3, r1
 8007840:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d109      	bne.n	800785e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	43db      	mvns	r3, r3
 8007854:	401a      	ands	r2, r3
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800785c:	e007      	b.n	800786e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	431a      	orrs	r2, r3
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d109      	bne.n	800788a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	43db      	mvns	r3, r3
 8007880:	401a      	ands	r2, r3
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007888:	e007      	b.n	800789a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	431a      	orrs	r2, r3
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d107      	bne.n	80078b2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	431a      	orrs	r2, r3
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078b8:	f023 0201 	bic.w	r2, r3, #1
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	e006      	b.n	80078d4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
  }
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	371c      	adds	r7, #28
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	40006400 	.word	0x40006400

080078e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d12e      	bne.n	8007956 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0201 	bic.w	r2, r2, #1
 800790e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007910:	f7ff f9ba 	bl	8006c88 <HAL_GetTick>
 8007914:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007916:	e012      	b.n	800793e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007918:	f7ff f9b6 	bl	8006c88 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b0a      	cmp	r3, #10
 8007924:	d90b      	bls.n	800793e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2205      	movs	r2, #5
 8007936:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e012      	b.n	8007964 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e5      	bne.n	8007918 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	e006      	b.n	8007964 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
  }
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800796c:	b480      	push	{r7}
 800796e:	b089      	sub	sp, #36	; 0x24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007980:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800798a:	7ffb      	ldrb	r3, [r7, #31]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d003      	beq.n	8007998 <HAL_CAN_AddTxMessage+0x2c>
 8007990:	7ffb      	ldrb	r3, [r7, #31]
 8007992:	2b02      	cmp	r3, #2
 8007994:	f040 80b8 	bne.w	8007b08 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d105      	bne.n	80079b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 80a0 	beq.w	8007af8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	0e1b      	lsrs	r3, r3, #24
 80079bc:	f003 0303 	and.w	r3, r3, #3
 80079c0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d907      	bls.n	80079d8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e09e      	b.n	8007b16 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80079d8:	2201      	movs	r2, #1
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	409a      	lsls	r2, r3
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10d      	bne.n	8007a06 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80079f4:	68f9      	ldr	r1, [r7, #12]
 80079f6:	6809      	ldr	r1, [r1, #0]
 80079f8:	431a      	orrs	r2, r3
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	3318      	adds	r3, #24
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	440b      	add	r3, r1
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	e00f      	b.n	8007a26 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a10:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a16:	68f9      	ldr	r1, [r7, #12]
 8007a18:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007a1a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	3318      	adds	r3, #24
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	440b      	add	r3, r1
 8007a24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6819      	ldr	r1, [r3, #0]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	691a      	ldr	r2, [r3, #16]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	3318      	adds	r3, #24
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	440b      	add	r3, r1
 8007a36:	3304      	adds	r3, #4
 8007a38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	7d1b      	ldrb	r3, [r3, #20]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d111      	bne.n	8007a66 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	3318      	adds	r3, #24
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	4413      	add	r3, r2
 8007a4e:	3304      	adds	r3, #4
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	6811      	ldr	r1, [r2, #0]
 8007a56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	3318      	adds	r3, #24
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	440b      	add	r3, r1
 8007a62:	3304      	adds	r3, #4
 8007a64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3307      	adds	r3, #7
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	061a      	lsls	r2, r3, #24
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3306      	adds	r3, #6
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	041b      	lsls	r3, r3, #16
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3305      	adds	r3, #5
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	4313      	orrs	r3, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	3204      	adds	r2, #4
 8007a86:	7812      	ldrb	r2, [r2, #0]
 8007a88:	4610      	mov	r0, r2
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	6811      	ldr	r1, [r2, #0]
 8007a8e:	ea43 0200 	orr.w	r2, r3, r0
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	440b      	add	r3, r1
 8007a98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007a9c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3303      	adds	r3, #3
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	061a      	lsls	r2, r3, #24
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3302      	adds	r3, #2
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	041b      	lsls	r3, r3, #16
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	021b      	lsls	r3, r3, #8
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	7812      	ldrb	r2, [r2, #0]
 8007abe:	4610      	mov	r0, r2
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	6811      	ldr	r1, [r2, #0]
 8007ac4:	ea43 0200 	orr.w	r2, r3, r0
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	011b      	lsls	r3, r3, #4
 8007acc:	440b      	add	r3, r1
 8007ace:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007ad2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	3318      	adds	r3, #24
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	4413      	add	r3, r2
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	6811      	ldr	r1, [r2, #0]
 8007ae6:	f043 0201 	orr.w	r2, r3, #1
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	3318      	adds	r3, #24
 8007aee:	011b      	lsls	r3, r3, #4
 8007af0:	440b      	add	r3, r1
 8007af2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e00e      	b.n	8007b16 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e006      	b.n	8007b16 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
  }
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3724      	adds	r7, #36	; 0x24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b085      	sub	sp, #20
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b34:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007b36:	7afb      	ldrb	r3, [r7, #11]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d002      	beq.n	8007b42 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007b3c:	7afb      	ldrb	r3, [r7, #11]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d11d      	bne.n	8007b7e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3301      	adds	r3, #1
 8007b54:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3301      	adds	r3, #1
 8007b68:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ba0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d003      	beq.n	8007bb0 <HAL_CAN_GetRxMessage+0x24>
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	f040 80f3 	bne.w	8007d96 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10e      	bne.n	8007bd4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f003 0303 	and.w	r3, r3, #3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d116      	bne.n	8007bf2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e0e7      	b.n	8007da4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d107      	bne.n	8007bf2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e0d8      	b.n	8007da4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	331b      	adds	r3, #27
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	4413      	add	r3, r2
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0204 	and.w	r2, r3, #4
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10c      	bne.n	8007c2a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	331b      	adds	r3, #27
 8007c18:	011b      	lsls	r3, r3, #4
 8007c1a:	4413      	add	r3, r2
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	0d5b      	lsrs	r3, r3, #21
 8007c20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	e00b      	b.n	8007c42 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	331b      	adds	r3, #27
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	4413      	add	r3, r2
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	08db      	lsrs	r3, r3, #3
 8007c3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	331b      	adds	r3, #27
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	4413      	add	r3, r2
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0202 	and.w	r2, r3, #2
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	331b      	adds	r3, #27
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	4413      	add	r3, r2
 8007c64:	3304      	adds	r3, #4
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 020f 	and.w	r2, r3, #15
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	331b      	adds	r3, #27
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	0a1b      	lsrs	r3, r3, #8
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	331b      	adds	r3, #27
 8007c90:	011b      	lsls	r3, r3, #4
 8007c92:	4413      	add	r3, r2
 8007c94:	3304      	adds	r3, #4
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	0c1b      	lsrs	r3, r3, #16
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	011b      	lsls	r3, r3, #4
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	0a1a      	lsrs	r2, r3, #8
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	b2d2      	uxtb	r2, r2
 8007cce:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	0c1a      	lsrs	r2, r3, #16
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	b2d2      	uxtb	r2, r2
 8007ce8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	011b      	lsls	r3, r3, #4
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	0e1a      	lsrs	r2, r3, #24
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	3303      	adds	r3, #3
 8007d00:	b2d2      	uxtb	r2, r2
 8007d02:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	3304      	adds	r3, #4
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	0a1a      	lsrs	r2, r3, #8
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	3305      	adds	r3, #5
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	011b      	lsls	r3, r3, #4
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	0c1a      	lsrs	r2, r3, #16
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	3306      	adds	r3, #6
 8007d4c:	b2d2      	uxtb	r2, r2
 8007d4e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	0e1a      	lsrs	r2, r3, #24
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	3307      	adds	r3, #7
 8007d66:	b2d2      	uxtb	r2, r2
 8007d68:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d108      	bne.n	8007d82 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0220 	orr.w	r2, r2, #32
 8007d7e:	60da      	str	r2, [r3, #12]
 8007d80:	e007      	b.n	8007d92 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	691a      	ldr	r2, [r3, #16]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f042 0220 	orr.w	r2, r2, #32
 8007d90:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	e006      	b.n	8007da4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
  }
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	371c      	adds	r7, #28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007dc0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d002      	beq.n	8007dce <HAL_CAN_ActivateNotification+0x1e>
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d109      	bne.n	8007de2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6959      	ldr	r1, [r3, #20]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	e006      	b.n	8007df0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
  }
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08a      	sub	sp, #40	; 0x28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007e04:	2300      	movs	r3, #0
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d07c      	beq.n	8007f3c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d023      	beq.n	8007e94 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2201      	movs	r2, #1
 8007e52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f983 	bl	800816a <HAL_CAN_TxMailbox0CompleteCallback>
 8007e64:	e016      	b.n	8007e94 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
 8007e78:	e00c      	b.n	8007e94 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	f003 0308 	and.w	r3, r3, #8
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8c:	e002      	b.n	8007e94 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f989 	bl	80081a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d024      	beq.n	8007ee8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ea6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f963 	bl	800817e <HAL_CAN_TxMailbox1CompleteCallback>
 8007eb8:	e016      	b.n	8007ee8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d004      	beq.n	8007ece <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24
 8007ecc:	e00c      	b.n	8007ee8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ede:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee0:	e002      	b.n	8007ee8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f969 	bl	80081ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d024      	beq.n	8007f3c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007efa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f943 	bl	8008192 <HAL_CAN_TxMailbox2CompleteCallback>
 8007f0c:	e016      	b.n	8007f3c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d004      	beq.n	8007f22 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f20:	e00c      	b.n	8007f3c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
 8007f34:	e002      	b.n	8007f3c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f949 	bl	80081ce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00c      	beq.n	8007f60 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f003 0310 	and.w	r3, r3, #16
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d007      	beq.n	8007f60 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2210      	movs	r2, #16
 8007f5e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00b      	beq.n	8007f82 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d006      	beq.n	8007f82 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2208      	movs	r2, #8
 8007f7a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f930 	bl	80081e2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	f003 0302 	and.w	r3, r3, #2
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d009      	beq.n	8007fa0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7fe f8d0 	bl	8006140 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00c      	beq.n	8007fc4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f003 0310 	and.w	r3, r3, #16
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d007      	beq.n	8007fc4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2210      	movs	r2, #16
 8007fc2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	f003 0320 	and.w	r3, r3, #32
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f003 0308 	and.w	r3, r3, #8
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d006      	beq.n	8007fe6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2208      	movs	r2, #8
 8007fde:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f912 	bl	800820a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	f003 0310 	and.w	r3, r3, #16
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d009      	beq.n	8008004 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f8f9 	bl	80081f6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b00      	cmp	r3, #0
 8008016:	d006      	beq.n	8008026 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2210      	movs	r2, #16
 800801e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f8fc 	bl	800821e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	2b00      	cmp	r3, #0
 8008038:	d006      	beq.n	8008048 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2208      	movs	r2, #8
 8008040:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f8f5 	bl	8008232 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d07b      	beq.n	800814a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	2b00      	cmp	r3, #0
 800805a:	d072      	beq.n	8008142 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008062:	2b00      	cmp	r3, #0
 8008064:	d008      	beq.n	8008078 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	f043 0301 	orr.w	r3, r3, #1
 8008076:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800807e:	2b00      	cmp	r3, #0
 8008080:	d008      	beq.n	8008094 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	f043 0302 	orr.w	r3, r3, #2
 8008092:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800809a:	2b00      	cmp	r3, #0
 800809c:	d008      	beq.n	80080b0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	f043 0304 	orr.w	r3, r3, #4
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d043      	beq.n	8008142 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d03e      	beq.n	8008142 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080ca:	2b60      	cmp	r3, #96	; 0x60
 80080cc:	d02b      	beq.n	8008126 <HAL_CAN_IRQHandler+0x32a>
 80080ce:	2b60      	cmp	r3, #96	; 0x60
 80080d0:	d82e      	bhi.n	8008130 <HAL_CAN_IRQHandler+0x334>
 80080d2:	2b50      	cmp	r3, #80	; 0x50
 80080d4:	d022      	beq.n	800811c <HAL_CAN_IRQHandler+0x320>
 80080d6:	2b50      	cmp	r3, #80	; 0x50
 80080d8:	d82a      	bhi.n	8008130 <HAL_CAN_IRQHandler+0x334>
 80080da:	2b40      	cmp	r3, #64	; 0x40
 80080dc:	d019      	beq.n	8008112 <HAL_CAN_IRQHandler+0x316>
 80080de:	2b40      	cmp	r3, #64	; 0x40
 80080e0:	d826      	bhi.n	8008130 <HAL_CAN_IRQHandler+0x334>
 80080e2:	2b30      	cmp	r3, #48	; 0x30
 80080e4:	d010      	beq.n	8008108 <HAL_CAN_IRQHandler+0x30c>
 80080e6:	2b30      	cmp	r3, #48	; 0x30
 80080e8:	d822      	bhi.n	8008130 <HAL_CAN_IRQHandler+0x334>
 80080ea:	2b10      	cmp	r3, #16
 80080ec:	d002      	beq.n	80080f4 <HAL_CAN_IRQHandler+0x2f8>
 80080ee:	2b20      	cmp	r3, #32
 80080f0:	d005      	beq.n	80080fe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80080f2:	e01d      	b.n	8008130 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f6:	f043 0308 	orr.w	r3, r3, #8
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80080fc:	e019      	b.n	8008132 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	f043 0310 	orr.w	r3, r3, #16
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008106:	e014      	b.n	8008132 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	f043 0320 	orr.w	r3, r3, #32
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008110:	e00f      	b.n	8008132 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008118:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800811a:	e00a      	b.n	8008132 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008122:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008124:	e005      	b.n	8008132 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800812e:	e000      	b.n	8008132 <HAL_CAN_IRQHandler+0x336>
            break;
 8008130:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	699a      	ldr	r2, [r3, #24]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008140:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2204      	movs	r2, #4
 8008148:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	2b00      	cmp	r3, #0
 800814e:	d008      	beq.n	8008162 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	431a      	orrs	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f872 	bl	8008246 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008162:	bf00      	nop
 8008164:	3728      	adds	r7, #40	; 0x28
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800817e:	b480      	push	{r7}
 8008180:	b083      	sub	sp, #12
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008246:	b480      	push	{r7}
 8008248:	b083      	sub	sp, #12
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
	...

0800825c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800826c:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <__NVIC_SetPriorityGrouping+0x44>)
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008278:	4013      	ands	r3, r2
 800827a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800828c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800828e:	4a04      	ldr	r2, [pc, #16]	; (80082a0 <__NVIC_SetPriorityGrouping+0x44>)
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	60d3      	str	r3, [r2, #12]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	e000ed00 	.word	0xe000ed00

080082a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082a8:	4b04      	ldr	r3, [pc, #16]	; (80082bc <__NVIC_GetPriorityGrouping+0x18>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	0a1b      	lsrs	r3, r3, #8
 80082ae:	f003 0307 	and.w	r3, r3, #7
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	e000ed00 	.word	0xe000ed00

080082c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	db0b      	blt.n	80082ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	f003 021f 	and.w	r2, r3, #31
 80082d8:	4907      	ldr	r1, [pc, #28]	; (80082f8 <__NVIC_EnableIRQ+0x38>)
 80082da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082de:	095b      	lsrs	r3, r3, #5
 80082e0:	2001      	movs	r0, #1
 80082e2:	fa00 f202 	lsl.w	r2, r0, r2
 80082e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	e000e100 	.word	0xe000e100

080082fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	6039      	str	r1, [r7, #0]
 8008306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800830c:	2b00      	cmp	r3, #0
 800830e:	db0a      	blt.n	8008326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	b2da      	uxtb	r2, r3
 8008314:	490c      	ldr	r1, [pc, #48]	; (8008348 <__NVIC_SetPriority+0x4c>)
 8008316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800831a:	0112      	lsls	r2, r2, #4
 800831c:	b2d2      	uxtb	r2, r2
 800831e:	440b      	add	r3, r1
 8008320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008324:	e00a      	b.n	800833c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	b2da      	uxtb	r2, r3
 800832a:	4908      	ldr	r1, [pc, #32]	; (800834c <__NVIC_SetPriority+0x50>)
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	f003 030f 	and.w	r3, r3, #15
 8008332:	3b04      	subs	r3, #4
 8008334:	0112      	lsls	r2, r2, #4
 8008336:	b2d2      	uxtb	r2, r2
 8008338:	440b      	add	r3, r1
 800833a:	761a      	strb	r2, [r3, #24]
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	e000e100 	.word	0xe000e100
 800834c:	e000ed00 	.word	0xe000ed00

08008350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008350:	b480      	push	{r7}
 8008352:	b089      	sub	sp, #36	; 0x24
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	f1c3 0307 	rsb	r3, r3, #7
 800836a:	2b04      	cmp	r3, #4
 800836c:	bf28      	it	cs
 800836e:	2304      	movcs	r3, #4
 8008370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	3304      	adds	r3, #4
 8008376:	2b06      	cmp	r3, #6
 8008378:	d902      	bls.n	8008380 <NVIC_EncodePriority+0x30>
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	3b03      	subs	r3, #3
 800837e:	e000      	b.n	8008382 <NVIC_EncodePriority+0x32>
 8008380:	2300      	movs	r3, #0
 8008382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008384:	f04f 32ff 	mov.w	r2, #4294967295
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	fa02 f303 	lsl.w	r3, r2, r3
 800838e:	43da      	mvns	r2, r3
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	401a      	ands	r2, r3
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008398:	f04f 31ff 	mov.w	r1, #4294967295
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	fa01 f303 	lsl.w	r3, r1, r3
 80083a2:	43d9      	mvns	r1, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083a8:	4313      	orrs	r3, r2
         );
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3724      	adds	r7, #36	; 0x24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
	...

080083b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083c8:	d301      	bcc.n	80083ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80083ca:	2301      	movs	r3, #1
 80083cc:	e00f      	b.n	80083ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083ce:	4a0a      	ldr	r2, [pc, #40]	; (80083f8 <SysTick_Config+0x40>)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3b01      	subs	r3, #1
 80083d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80083d6:	210f      	movs	r1, #15
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295
 80083dc:	f7ff ff8e 	bl	80082fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80083e0:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <SysTick_Config+0x40>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80083e6:	4b04      	ldr	r3, [pc, #16]	; (80083f8 <SysTick_Config+0x40>)
 80083e8:	2207      	movs	r2, #7
 80083ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	e000e010 	.word	0xe000e010

080083fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7ff ff29 	bl	800825c <__NVIC_SetPriorityGrouping>
}
 800840a:	bf00      	nop
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008412:	b580      	push	{r7, lr}
 8008414:	b086      	sub	sp, #24
 8008416:	af00      	add	r7, sp, #0
 8008418:	4603      	mov	r3, r0
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	607a      	str	r2, [r7, #4]
 800841e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008420:	2300      	movs	r3, #0
 8008422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008424:	f7ff ff3e 	bl	80082a4 <__NVIC_GetPriorityGrouping>
 8008428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	68b9      	ldr	r1, [r7, #8]
 800842e:	6978      	ldr	r0, [r7, #20]
 8008430:	f7ff ff8e 	bl	8008350 <NVIC_EncodePriority>
 8008434:	4602      	mov	r2, r0
 8008436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800843a:	4611      	mov	r1, r2
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff ff5d 	bl	80082fc <__NVIC_SetPriority>
}
 8008442:	bf00      	nop
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	4603      	mov	r3, r0
 8008452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff ff31 	bl	80082c0 <__NVIC_EnableIRQ>
}
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7ff ffa2 	bl	80083b8 <SysTick_Config>
 8008474:	4603      	mov	r3, r0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800848c:	f7fe fbfc 	bl	8006c88 <HAL_GetTick>
 8008490:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e099      	b.n	80085d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f022 0201 	bic.w	r2, r2, #1
 80084ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084bc:	e00f      	b.n	80084de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084be:	f7fe fbe3 	bl	8006c88 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b05      	cmp	r3, #5
 80084ca:	d908      	bls.n	80084de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2220      	movs	r2, #32
 80084d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2203      	movs	r2, #3
 80084d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e078      	b.n	80085d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e8      	bne.n	80084be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	4b38      	ldr	r3, [pc, #224]	; (80085d8 <HAL_DMA_Init+0x158>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800850a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008516:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008522:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	4313      	orrs	r3, r2
 800852e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008534:	2b04      	cmp	r3, #4
 8008536:	d107      	bne.n	8008548 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008540:	4313      	orrs	r3, r2
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	4313      	orrs	r3, r2
 8008546:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f023 0307 	bic.w	r3, r3, #7
 800855e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	2b04      	cmp	r3, #4
 8008570:	d117      	bne.n	80085a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4313      	orrs	r3, r2
 800857a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00e      	beq.n	80085a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fa9d 	bl	8008ac4 <DMA_CheckFifoParam>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d008      	beq.n	80085a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2240      	movs	r2, #64	; 0x40
 8008594:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800859e:	2301      	movs	r3, #1
 80085a0:	e016      	b.n	80085d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fa54 	bl	8008a58 <DMA_CalcBaseAndBitshift>
 80085b0:	4603      	mov	r3, r0
 80085b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b8:	223f      	movs	r2, #63	; 0x3f
 80085ba:	409a      	lsls	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	f010803f 	.word	0xf010803f

080085dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <HAL_DMA_Start_IT+0x26>
 80085fe:	2302      	movs	r3, #2
 8008600:	e040      	b.n	8008684 <HAL_DMA_Start_IT+0xa8>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b01      	cmp	r3, #1
 8008614:	d12f      	bne.n	8008676 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2202      	movs	r2, #2
 800861a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	68b9      	ldr	r1, [r7, #8]
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 f9e6 	bl	80089fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008634:	223f      	movs	r2, #63	; 0x3f
 8008636:	409a      	lsls	r2, r3
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f042 0216 	orr.w	r2, r2, #22
 800864a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008650:	2b00      	cmp	r3, #0
 8008652:	d007      	beq.n	8008664 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f042 0208 	orr.w	r2, r2, #8
 8008662:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0201 	orr.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	e005      	b.n	8008682 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800867e:	2302      	movs	r3, #2
 8008680:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008682:	7dfb      	ldrb	r3, [r7, #23]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b02      	cmp	r3, #2
 800869e:	d004      	beq.n	80086aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2280      	movs	r2, #128	; 0x80
 80086a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e00c      	b.n	80086c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2205      	movs	r2, #5
 80086ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0201 	bic.w	r2, r2, #1
 80086c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80086dc:	4b92      	ldr	r3, [pc, #584]	; (8008928 <HAL_DMA_IRQHandler+0x258>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a92      	ldr	r2, [pc, #584]	; (800892c <HAL_DMA_IRQHandler+0x25c>)
 80086e2:	fba2 2303 	umull	r2, r3, r2, r3
 80086e6:	0a9b      	lsrs	r3, r3, #10
 80086e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fa:	2208      	movs	r2, #8
 80086fc:	409a      	lsls	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4013      	ands	r3, r2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d01a      	beq.n	800873c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b00      	cmp	r3, #0
 8008712:	d013      	beq.n	800873c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0204 	bic.w	r2, r2, #4
 8008722:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008728:	2208      	movs	r2, #8
 800872a:	409a      	lsls	r2, r3
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008734:	f043 0201 	orr.w	r2, r3, #1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008740:	2201      	movs	r2, #1
 8008742:	409a      	lsls	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4013      	ands	r3, r2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d012      	beq.n	8008772 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00b      	beq.n	8008772 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800875e:	2201      	movs	r2, #1
 8008760:	409a      	lsls	r2, r3
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800876a:	f043 0202 	orr.w	r2, r3, #2
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008776:	2204      	movs	r2, #4
 8008778:	409a      	lsls	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	4013      	ands	r3, r2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d012      	beq.n	80087a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00b      	beq.n	80087a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008794:	2204      	movs	r2, #4
 8008796:	409a      	lsls	r2, r3
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a0:	f043 0204 	orr.w	r2, r3, #4
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ac:	2210      	movs	r2, #16
 80087ae:	409a      	lsls	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4013      	ands	r3, r2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d043      	beq.n	8008840 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0308 	and.w	r3, r3, #8
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d03c      	beq.n	8008840 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ca:	2210      	movs	r2, #16
 80087cc:	409a      	lsls	r2, r3
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d018      	beq.n	8008812 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d108      	bne.n	8008800 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d024      	beq.n	8008840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	4798      	blx	r3
 80087fe:	e01f      	b.n	8008840 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01b      	beq.n	8008840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
 8008810:	e016      	b.n	8008840 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881c:	2b00      	cmp	r3, #0
 800881e:	d107      	bne.n	8008830 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0208 	bic.w	r2, r2, #8
 800882e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008844:	2220      	movs	r2, #32
 8008846:	409a      	lsls	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4013      	ands	r3, r2
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 808e 	beq.w	800896e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0310 	and.w	r3, r3, #16
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 8086 	beq.w	800896e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008866:	2220      	movs	r2, #32
 8008868:	409a      	lsls	r2, r3
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b05      	cmp	r3, #5
 8008878:	d136      	bne.n	80088e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f022 0216 	bic.w	r2, r2, #22
 8008888:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	695a      	ldr	r2, [r3, #20]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008898:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d103      	bne.n	80088aa <HAL_DMA_IRQHandler+0x1da>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d007      	beq.n	80088ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0208 	bic.w	r2, r2, #8
 80088b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088be:	223f      	movs	r2, #63	; 0x3f
 80088c0:	409a      	lsls	r2, r3
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d07d      	beq.n	80089da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	4798      	blx	r3
        }
        return;
 80088e6:	e078      	b.n	80089da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d01c      	beq.n	8008930 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d108      	bne.n	8008916 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008908:	2b00      	cmp	r3, #0
 800890a:	d030      	beq.n	800896e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	4798      	blx	r3
 8008914:	e02b      	b.n	800896e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d027      	beq.n	800896e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	4798      	blx	r3
 8008926:	e022      	b.n	800896e <HAL_DMA_IRQHandler+0x29e>
 8008928:	20000000 	.word	0x20000000
 800892c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10f      	bne.n	800895e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0210 	bic.w	r2, r2, #16
 800894c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008972:	2b00      	cmp	r3, #0
 8008974:	d032      	beq.n	80089dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d022      	beq.n	80089c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2205      	movs	r2, #5
 8008986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0201 	bic.w	r2, r2, #1
 8008998:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	3301      	adds	r3, #1
 800899e:	60bb      	str	r3, [r7, #8]
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d307      	bcc.n	80089b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1f2      	bne.n	800899a <HAL_DMA_IRQHandler+0x2ca>
 80089b4:	e000      	b.n	80089b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80089b6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	4798      	blx	r3
 80089d8:	e000      	b.n	80089dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80089da:	bf00      	nop
    }
  }
}
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop

080089e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
 8008a08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	2b40      	cmp	r3, #64	; 0x40
 8008a28:	d108      	bne.n	8008a3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008a3a:	e007      	b.n	8008a4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	60da      	str	r2, [r3, #12]
}
 8008a4c:	bf00      	nop
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	3b10      	subs	r3, #16
 8008a68:	4a14      	ldr	r2, [pc, #80]	; (8008abc <DMA_CalcBaseAndBitshift+0x64>)
 8008a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6e:	091b      	lsrs	r3, r3, #4
 8008a70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008a72:	4a13      	ldr	r2, [pc, #76]	; (8008ac0 <DMA_CalcBaseAndBitshift+0x68>)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4413      	add	r3, r2
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d909      	bls.n	8008a9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	1d1a      	adds	r2, r3, #4
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	659a      	str	r2, [r3, #88]	; 0x58
 8008a98:	e007      	b.n	8008aaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	aaaaaaab 	.word	0xaaaaaaab
 8008ac0:	0801877c 	.word	0x0801877c

08008ac4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d11f      	bne.n	8008b1e <DMA_CheckFifoParam+0x5a>
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d856      	bhi.n	8008b92 <DMA_CheckFifoParam+0xce>
 8008ae4:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <DMA_CheckFifoParam+0x28>)
 8008ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aea:	bf00      	nop
 8008aec:	08008afd 	.word	0x08008afd
 8008af0:	08008b0f 	.word	0x08008b0f
 8008af4:	08008afd 	.word	0x08008afd
 8008af8:	08008b93 	.word	0x08008b93
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d046      	beq.n	8008b96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b0c:	e043      	b.n	8008b96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b16:	d140      	bne.n	8008b9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b1c:	e03d      	b.n	8008b9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b26:	d121      	bne.n	8008b6c <DMA_CheckFifoParam+0xa8>
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d837      	bhi.n	8008b9e <DMA_CheckFifoParam+0xda>
 8008b2e:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <DMA_CheckFifoParam+0x70>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008b45 	.word	0x08008b45
 8008b38:	08008b4b 	.word	0x08008b4b
 8008b3c:	08008b45 	.word	0x08008b45
 8008b40:	08008b5d 	.word	0x08008b5d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	73fb      	strb	r3, [r7, #15]
      break;
 8008b48:	e030      	b.n	8008bac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d025      	beq.n	8008ba2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b5a:	e022      	b.n	8008ba2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b64:	d11f      	bne.n	8008ba6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008b6a:	e01c      	b.n	8008ba6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d903      	bls.n	8008b7a <DMA_CheckFifoParam+0xb6>
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d003      	beq.n	8008b80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008b78:	e018      	b.n	8008bac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b7e:	e015      	b.n	8008bac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00e      	beq.n	8008baa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b90:	e00b      	b.n	8008baa <DMA_CheckFifoParam+0xe6>
      break;
 8008b92:	bf00      	nop
 8008b94:	e00a      	b.n	8008bac <DMA_CheckFifoParam+0xe8>
      break;
 8008b96:	bf00      	nop
 8008b98:	e008      	b.n	8008bac <DMA_CheckFifoParam+0xe8>
      break;
 8008b9a:	bf00      	nop
 8008b9c:	e006      	b.n	8008bac <DMA_CheckFifoParam+0xe8>
      break;
 8008b9e:	bf00      	nop
 8008ba0:	e004      	b.n	8008bac <DMA_CheckFifoParam+0xe8>
      break;
 8008ba2:	bf00      	nop
 8008ba4:	e002      	b.n	8008bac <DMA_CheckFifoParam+0xe8>
      break;   
 8008ba6:	bf00      	nop
 8008ba8:	e000      	b.n	8008bac <DMA_CheckFifoParam+0xe8>
      break;
 8008baa:	bf00      	nop
    }
  } 
  
  return status; 
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop

08008bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b089      	sub	sp, #36	; 0x24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61fb      	str	r3, [r7, #28]
 8008bd6:	e165      	b.n	8008ea4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008bd8:	2201      	movs	r2, #1
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	4013      	ands	r3, r2
 8008bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	f040 8154 	bne.w	8008e9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d005      	beq.n	8008c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d130      	bne.n	8008c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	2203      	movs	r2, #3
 8008c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1e:	43db      	mvns	r3, r3
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	4013      	ands	r3, r2
 8008c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68da      	ldr	r2, [r3, #12]
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c32:	69ba      	ldr	r2, [r7, #24]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c44:	2201      	movs	r2, #1
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4c:	43db      	mvns	r3, r3
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	4013      	ands	r3, r2
 8008c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	091b      	lsrs	r3, r3, #4
 8008c5a:	f003 0201 	and.w	r2, r3, #1
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	fa02 f303 	lsl.w	r3, r2, r3
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d017      	beq.n	8008cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	2203      	movs	r2, #3
 8008c88:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8c:	43db      	mvns	r3, r3
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	4013      	ands	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f003 0303 	and.w	r3, r3, #3
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d123      	bne.n	8008d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	08da      	lsrs	r2, r3, #3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3208      	adds	r2, #8
 8008cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	220f      	movs	r2, #15
 8008cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd4:	43db      	mvns	r3, r3
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	691a      	ldr	r2, [r3, #16]
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f003 0307 	and.w	r3, r3, #7
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	08da      	lsrs	r2, r3, #3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	3208      	adds	r2, #8
 8008cfa:	69b9      	ldr	r1, [r7, #24]
 8008cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d10:	43db      	mvns	r3, r3
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	4013      	ands	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f003 0203 	and.w	r2, r3, #3
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	fa02 f303 	lsl.w	r3, r2, r3
 8008d28:	69ba      	ldr	r2, [r7, #24]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 80ae 	beq.w	8008e9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	4b5d      	ldr	r3, [pc, #372]	; (8008ebc <HAL_GPIO_Init+0x300>)
 8008d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4a:	4a5c      	ldr	r2, [pc, #368]	; (8008ebc <HAL_GPIO_Init+0x300>)
 8008d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d50:	6453      	str	r3, [r2, #68]	; 0x44
 8008d52:	4b5a      	ldr	r3, [pc, #360]	; (8008ebc <HAL_GPIO_Init+0x300>)
 8008d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d5e:	4a58      	ldr	r2, [pc, #352]	; (8008ec0 <HAL_GPIO_Init+0x304>)
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	089b      	lsrs	r3, r3, #2
 8008d64:	3302      	adds	r3, #2
 8008d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	220f      	movs	r2, #15
 8008d76:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7a:	43db      	mvns	r3, r3
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a4f      	ldr	r2, [pc, #316]	; (8008ec4 <HAL_GPIO_Init+0x308>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d025      	beq.n	8008dd6 <HAL_GPIO_Init+0x21a>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a4e      	ldr	r2, [pc, #312]	; (8008ec8 <HAL_GPIO_Init+0x30c>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d01f      	beq.n	8008dd2 <HAL_GPIO_Init+0x216>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a4d      	ldr	r2, [pc, #308]	; (8008ecc <HAL_GPIO_Init+0x310>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d019      	beq.n	8008dce <HAL_GPIO_Init+0x212>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a4c      	ldr	r2, [pc, #304]	; (8008ed0 <HAL_GPIO_Init+0x314>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d013      	beq.n	8008dca <HAL_GPIO_Init+0x20e>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a4b      	ldr	r2, [pc, #300]	; (8008ed4 <HAL_GPIO_Init+0x318>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d00d      	beq.n	8008dc6 <HAL_GPIO_Init+0x20a>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a4a      	ldr	r2, [pc, #296]	; (8008ed8 <HAL_GPIO_Init+0x31c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d007      	beq.n	8008dc2 <HAL_GPIO_Init+0x206>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a49      	ldr	r2, [pc, #292]	; (8008edc <HAL_GPIO_Init+0x320>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d101      	bne.n	8008dbe <HAL_GPIO_Init+0x202>
 8008dba:	2306      	movs	r3, #6
 8008dbc:	e00c      	b.n	8008dd8 <HAL_GPIO_Init+0x21c>
 8008dbe:	2307      	movs	r3, #7
 8008dc0:	e00a      	b.n	8008dd8 <HAL_GPIO_Init+0x21c>
 8008dc2:	2305      	movs	r3, #5
 8008dc4:	e008      	b.n	8008dd8 <HAL_GPIO_Init+0x21c>
 8008dc6:	2304      	movs	r3, #4
 8008dc8:	e006      	b.n	8008dd8 <HAL_GPIO_Init+0x21c>
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e004      	b.n	8008dd8 <HAL_GPIO_Init+0x21c>
 8008dce:	2302      	movs	r3, #2
 8008dd0:	e002      	b.n	8008dd8 <HAL_GPIO_Init+0x21c>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e000      	b.n	8008dd8 <HAL_GPIO_Init+0x21c>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	f002 0203 	and.w	r2, r2, #3
 8008dde:	0092      	lsls	r2, r2, #2
 8008de0:	4093      	lsls	r3, r2
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008de8:	4935      	ldr	r1, [pc, #212]	; (8008ec0 <HAL_GPIO_Init+0x304>)
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	089b      	lsrs	r3, r3, #2
 8008dee:	3302      	adds	r3, #2
 8008df0:	69ba      	ldr	r2, [r7, #24]
 8008df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008df6:	4b3a      	ldr	r3, [pc, #232]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	43db      	mvns	r3, r3
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	4013      	ands	r3, r2
 8008e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008e12:	69ba      	ldr	r2, [r7, #24]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008e1a:	4a31      	ldr	r2, [pc, #196]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008e20:	4b2f      	ldr	r3, [pc, #188]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	43db      	mvns	r3, r3
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008e44:	4a26      	ldr	r2, [pc, #152]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e4a:	4b25      	ldr	r3, [pc, #148]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	43db      	mvns	r3, r3
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	4013      	ands	r3, r2
 8008e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e6e:	4a1c      	ldr	r2, [pc, #112]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e74:	4b1a      	ldr	r3, [pc, #104]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	43db      	mvns	r3, r3
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	4013      	ands	r3, r2
 8008e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e98:	4a11      	ldr	r2, [pc, #68]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	61fb      	str	r3, [r7, #28]
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	2b0f      	cmp	r3, #15
 8008ea8:	f67f ae96 	bls.w	8008bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008eac:	bf00      	nop
 8008eae:	bf00      	nop
 8008eb0:	3724      	adds	r7, #36	; 0x24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	40023800 	.word	0x40023800
 8008ec0:	40013800 	.word	0x40013800
 8008ec4:	40020000 	.word	0x40020000
 8008ec8:	40020400 	.word	0x40020400
 8008ecc:	40020800 	.word	0x40020800
 8008ed0:	40020c00 	.word	0x40020c00
 8008ed4:	40021000 	.word	0x40021000
 8008ed8:	40021400 	.word	0x40021400
 8008edc:	40021800 	.word	0x40021800
 8008ee0:	40013c00 	.word	0x40013c00

08008ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691a      	ldr	r2, [r3, #16]
 8008ef4:	887b      	ldrh	r3, [r7, #2]
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
 8008f00:	e001      	b.n	8008f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	807b      	strh	r3, [r7, #2]
 8008f20:	4613      	mov	r3, r2
 8008f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f24:	787b      	ldrb	r3, [r7, #1]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f2a:	887a      	ldrh	r2, [r7, #2]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f30:	e003      	b.n	8008f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f32:	887b      	ldrh	r3, [r7, #2]
 8008f34:	041a      	lsls	r2, r3, #16
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	619a      	str	r2, [r3, #24]
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f58:	887a      	ldrh	r2, [r7, #2]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	041a      	lsls	r2, r3, #16
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	43d9      	mvns	r1, r3
 8008f64:	887b      	ldrh	r3, [r7, #2]
 8008f66:	400b      	ands	r3, r1
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	619a      	str	r2, [r3, #24]
}
 8008f6e:	bf00      	nop
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
	...

08008f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008f86:	4b08      	ldr	r3, [pc, #32]	; (8008fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f88:	695a      	ldr	r2, [r3, #20]
 8008f8a:	88fb      	ldrh	r3, [r7, #6]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d006      	beq.n	8008fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f92:	4a05      	ldr	r2, [pc, #20]	; (8008fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f94:	88fb      	ldrh	r3, [r7, #6]
 8008f96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f98:	88fb      	ldrh	r3, [r7, #6]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fd f950 	bl	8006240 <HAL_GPIO_EXTI_Callback>
  }
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	40013c00 	.word	0x40013c00

08008fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e12b      	b.n	8009216 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d106      	bne.n	8008fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7fd fb70 	bl	80066b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2224      	movs	r2, #36	; 0x24
 8008fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 0201 	bic.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800900e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009010:	f002 fb1c 	bl	800b64c <HAL_RCC_GetPCLK1Freq>
 8009014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	4a81      	ldr	r2, [pc, #516]	; (8009220 <HAL_I2C_Init+0x274>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d807      	bhi.n	8009030 <HAL_I2C_Init+0x84>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a80      	ldr	r2, [pc, #512]	; (8009224 <HAL_I2C_Init+0x278>)
 8009024:	4293      	cmp	r3, r2
 8009026:	bf94      	ite	ls
 8009028:	2301      	movls	r3, #1
 800902a:	2300      	movhi	r3, #0
 800902c:	b2db      	uxtb	r3, r3
 800902e:	e006      	b.n	800903e <HAL_I2C_Init+0x92>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4a7d      	ldr	r2, [pc, #500]	; (8009228 <HAL_I2C_Init+0x27c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	bf94      	ite	ls
 8009038:	2301      	movls	r3, #1
 800903a:	2300      	movhi	r3, #0
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e0e7      	b.n	8009216 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	4a78      	ldr	r2, [pc, #480]	; (800922c <HAL_I2C_Init+0x280>)
 800904a:	fba2 2303 	umull	r2, r3, r2, r3
 800904e:	0c9b      	lsrs	r3, r3, #18
 8009050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	430a      	orrs	r2, r1
 8009064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	4a6a      	ldr	r2, [pc, #424]	; (8009220 <HAL_I2C_Init+0x274>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d802      	bhi.n	8009080 <HAL_I2C_Init+0xd4>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	3301      	adds	r3, #1
 800907e:	e009      	b.n	8009094 <HAL_I2C_Init+0xe8>
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009086:	fb02 f303 	mul.w	r3, r2, r3
 800908a:	4a69      	ldr	r2, [pc, #420]	; (8009230 <HAL_I2C_Init+0x284>)
 800908c:	fba2 2303 	umull	r2, r3, r2, r3
 8009090:	099b      	lsrs	r3, r3, #6
 8009092:	3301      	adds	r3, #1
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	6812      	ldr	r2, [r2, #0]
 8009098:	430b      	orrs	r3, r1
 800909a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80090a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	495c      	ldr	r1, [pc, #368]	; (8009220 <HAL_I2C_Init+0x274>)
 80090b0:	428b      	cmp	r3, r1
 80090b2:	d819      	bhi.n	80090e8 <HAL_I2C_Init+0x13c>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	1e59      	subs	r1, r3, #1
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	fbb1 f3f3 	udiv	r3, r1, r3
 80090c2:	1c59      	adds	r1, r3, #1
 80090c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80090c8:	400b      	ands	r3, r1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00a      	beq.n	80090e4 <HAL_I2C_Init+0x138>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	1e59      	subs	r1, r3, #1
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80090dc:	3301      	adds	r3, #1
 80090de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090e2:	e051      	b.n	8009188 <HAL_I2C_Init+0x1dc>
 80090e4:	2304      	movs	r3, #4
 80090e6:	e04f      	b.n	8009188 <HAL_I2C_Init+0x1dc>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d111      	bne.n	8009114 <HAL_I2C_Init+0x168>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	1e58      	subs	r0, r3, #1
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6859      	ldr	r1, [r3, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	005b      	lsls	r3, r3, #1
 80090fc:	440b      	add	r3, r1
 80090fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009102:	3301      	adds	r3, #1
 8009104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009108:	2b00      	cmp	r3, #0
 800910a:	bf0c      	ite	eq
 800910c:	2301      	moveq	r3, #1
 800910e:	2300      	movne	r3, #0
 8009110:	b2db      	uxtb	r3, r3
 8009112:	e012      	b.n	800913a <HAL_I2C_Init+0x18e>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	1e58      	subs	r0, r3, #1
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6859      	ldr	r1, [r3, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	440b      	add	r3, r1
 8009122:	0099      	lsls	r1, r3, #2
 8009124:	440b      	add	r3, r1
 8009126:	fbb0 f3f3 	udiv	r3, r0, r3
 800912a:	3301      	adds	r3, #1
 800912c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009130:	2b00      	cmp	r3, #0
 8009132:	bf0c      	ite	eq
 8009134:	2301      	moveq	r3, #1
 8009136:	2300      	movne	r3, #0
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <HAL_I2C_Init+0x196>
 800913e:	2301      	movs	r3, #1
 8009140:	e022      	b.n	8009188 <HAL_I2C_Init+0x1dc>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10e      	bne.n	8009168 <HAL_I2C_Init+0x1bc>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	1e58      	subs	r0, r3, #1
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6859      	ldr	r1, [r3, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	440b      	add	r3, r1
 8009158:	fbb0 f3f3 	udiv	r3, r0, r3
 800915c:	3301      	adds	r3, #1
 800915e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009166:	e00f      	b.n	8009188 <HAL_I2C_Init+0x1dc>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	1e58      	subs	r0, r3, #1
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6859      	ldr	r1, [r3, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	440b      	add	r3, r1
 8009176:	0099      	lsls	r1, r3, #2
 8009178:	440b      	add	r3, r1
 800917a:	fbb0 f3f3 	udiv	r3, r0, r3
 800917e:	3301      	adds	r3, #1
 8009180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009188:	6879      	ldr	r1, [r7, #4]
 800918a:	6809      	ldr	r1, [r1, #0]
 800918c:	4313      	orrs	r3, r2
 800918e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	69da      	ldr	r2, [r3, #28]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	431a      	orrs	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80091b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	6911      	ldr	r1, [r2, #16]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	68d2      	ldr	r2, [r2, #12]
 80091c2:	4311      	orrs	r1, r2
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	430b      	orrs	r3, r1
 80091ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	695a      	ldr	r2, [r3, #20]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	431a      	orrs	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	430a      	orrs	r2, r1
 80091e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f042 0201 	orr.w	r2, r2, #1
 80091f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2220      	movs	r2, #32
 8009202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	000186a0 	.word	0x000186a0
 8009224:	001e847f 	.word	0x001e847f
 8009228:	003d08ff 	.word	0x003d08ff
 800922c:	431bde83 	.word	0x431bde83
 8009230:	10624dd3 	.word	0x10624dd3

08009234 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af02      	add	r7, sp, #8
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	4608      	mov	r0, r1
 800923e:	4611      	mov	r1, r2
 8009240:	461a      	mov	r2, r3
 8009242:	4603      	mov	r3, r0
 8009244:	817b      	strh	r3, [r7, #10]
 8009246:	460b      	mov	r3, r1
 8009248:	813b      	strh	r3, [r7, #8]
 800924a:	4613      	mov	r3, r2
 800924c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800924e:	f7fd fd1b 	bl	8006c88 <HAL_GetTick>
 8009252:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b20      	cmp	r3, #32
 800925e:	f040 80d9 	bne.w	8009414 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	2319      	movs	r3, #25
 8009268:	2201      	movs	r2, #1
 800926a:	496d      	ldr	r1, [pc, #436]	; (8009420 <HAL_I2C_Mem_Write+0x1ec>)
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 fc7f 	bl	8009b70 <I2C_WaitOnFlagUntilTimeout>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009278:	2302      	movs	r3, #2
 800927a:	e0cc      	b.n	8009416 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <HAL_I2C_Mem_Write+0x56>
 8009286:	2302      	movs	r3, #2
 8009288:	e0c5      	b.n	8009416 <HAL_I2C_Mem_Write+0x1e2>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	2b01      	cmp	r3, #1
 800929e:	d007      	beq.n	80092b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f042 0201 	orr.w	r2, r2, #1
 80092ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2221      	movs	r2, #33	; 0x21
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2240      	movs	r2, #64	; 0x40
 80092cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6a3a      	ldr	r2, [r7, #32]
 80092da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4a4d      	ldr	r2, [pc, #308]	; (8009424 <HAL_I2C_Mem_Write+0x1f0>)
 80092f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092f2:	88f8      	ldrh	r0, [r7, #6]
 80092f4:	893a      	ldrh	r2, [r7, #8]
 80092f6:	8979      	ldrh	r1, [r7, #10]
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	4603      	mov	r3, r0
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f000 fab6 	bl	8009874 <I2C_RequestMemoryWrite>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d052      	beq.n	80093b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e081      	b.n	8009416 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 fd00 	bl	8009d1c <I2C_WaitOnTXEFlagUntilTimeout>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00d      	beq.n	800933e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	2b04      	cmp	r3, #4
 8009328:	d107      	bne.n	800933a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009338:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e06b      	b.n	8009416 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009342:	781a      	ldrb	r2, [r3, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009358:	3b01      	subs	r3, #1
 800935a:	b29a      	uxth	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009364:	b29b      	uxth	r3, r3
 8009366:	3b01      	subs	r3, #1
 8009368:	b29a      	uxth	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	f003 0304 	and.w	r3, r3, #4
 8009378:	2b04      	cmp	r3, #4
 800937a:	d11b      	bne.n	80093b4 <HAL_I2C_Mem_Write+0x180>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009380:	2b00      	cmp	r3, #0
 8009382:	d017      	beq.n	80093b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	781a      	ldrb	r2, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800939e:	3b01      	subs	r3, #1
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1aa      	bne.n	8009312 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 fcec 	bl	8009d9e <I2C_WaitOnBTFFlagUntilTimeout>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00d      	beq.n	80093e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d0:	2b04      	cmp	r3, #4
 80093d2:	d107      	bne.n	80093e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e016      	b.n	8009416 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	e000      	b.n	8009416 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009414:	2302      	movs	r3, #2
  }
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	00100002 	.word	0x00100002
 8009424:	ffff0000 	.word	0xffff0000

08009428 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b08c      	sub	sp, #48	; 0x30
 800942c:	af02      	add	r7, sp, #8
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	4608      	mov	r0, r1
 8009432:	4611      	mov	r1, r2
 8009434:	461a      	mov	r2, r3
 8009436:	4603      	mov	r3, r0
 8009438:	817b      	strh	r3, [r7, #10]
 800943a:	460b      	mov	r3, r1
 800943c:	813b      	strh	r3, [r7, #8]
 800943e:	4613      	mov	r3, r2
 8009440:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009442:	f7fd fc21 	bl	8006c88 <HAL_GetTick>
 8009446:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b20      	cmp	r3, #32
 8009452:	f040 8208 	bne.w	8009866 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	2319      	movs	r3, #25
 800945c:	2201      	movs	r2, #1
 800945e:	497b      	ldr	r1, [pc, #492]	; (800964c <HAL_I2C_Mem_Read+0x224>)
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 fb85 	bl	8009b70 <I2C_WaitOnFlagUntilTimeout>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800946c:	2302      	movs	r3, #2
 800946e:	e1fb      	b.n	8009868 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009476:	2b01      	cmp	r3, #1
 8009478:	d101      	bne.n	800947e <HAL_I2C_Mem_Read+0x56>
 800947a:	2302      	movs	r3, #2
 800947c:	e1f4      	b.n	8009868 <HAL_I2C_Mem_Read+0x440>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b01      	cmp	r3, #1
 8009492:	d007      	beq.n	80094a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0201 	orr.w	r2, r2, #1
 80094a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2222      	movs	r2, #34	; 0x22
 80094b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2240      	movs	r2, #64	; 0x40
 80094c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80094d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4a5b      	ldr	r2, [pc, #364]	; (8009650 <HAL_I2C_Mem_Read+0x228>)
 80094e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80094e6:	88f8      	ldrh	r0, [r7, #6]
 80094e8:	893a      	ldrh	r2, [r7, #8]
 80094ea:	8979      	ldrh	r1, [r7, #10]
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	4603      	mov	r3, r0
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f000 fa52 	bl	80099a0 <I2C_RequestMemoryRead>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e1b0      	b.n	8009868 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950a:	2b00      	cmp	r3, #0
 800950c:	d113      	bne.n	8009536 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800950e:	2300      	movs	r3, #0
 8009510:	623b      	str	r3, [r7, #32]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	695b      	ldr	r3, [r3, #20]
 8009518:	623b      	str	r3, [r7, #32]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	623b      	str	r3, [r7, #32]
 8009522:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	e184      	b.n	8009840 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800953a:	2b01      	cmp	r3, #1
 800953c:	d11b      	bne.n	8009576 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800954c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800954e:	2300      	movs	r3, #0
 8009550:	61fb      	str	r3, [r7, #28]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	61fb      	str	r3, [r7, #28]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	61fb      	str	r3, [r7, #28]
 8009562:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	e164      	b.n	8009840 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957a:	2b02      	cmp	r3, #2
 800957c:	d11b      	bne.n	80095b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800958c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800959c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800959e:	2300      	movs	r3, #0
 80095a0:	61bb      	str	r3, [r7, #24]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	61bb      	str	r3, [r7, #24]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	61bb      	str	r3, [r7, #24]
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	e144      	b.n	8009840 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095b6:	2300      	movs	r3, #0
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	617b      	str	r3, [r7, #20]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	617b      	str	r3, [r7, #20]
 80095ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80095cc:	e138      	b.n	8009840 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	f200 80f1 	bhi.w	80097ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d123      	bne.n	8009628 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 fc1b 	bl	8009e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e139      	b.n	8009868 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	691a      	ldr	r2, [r3, #16]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fe:	b2d2      	uxtb	r2, r2
 8009600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009606:	1c5a      	adds	r2, r3, #1
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009610:	3b01      	subs	r3, #1
 8009612:	b29a      	uxth	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800961c:	b29b      	uxth	r3, r3
 800961e:	3b01      	subs	r3, #1
 8009620:	b29a      	uxth	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009626:	e10b      	b.n	8009840 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800962c:	2b02      	cmp	r3, #2
 800962e:	d14e      	bne.n	80096ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009636:	2200      	movs	r2, #0
 8009638:	4906      	ldr	r1, [pc, #24]	; (8009654 <HAL_I2C_Mem_Read+0x22c>)
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 fa98 	bl	8009b70 <I2C_WaitOnFlagUntilTimeout>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d008      	beq.n	8009658 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e10e      	b.n	8009868 <HAL_I2C_Mem_Read+0x440>
 800964a:	bf00      	nop
 800964c:	00100002 	.word	0x00100002
 8009650:	ffff0000 	.word	0xffff0000
 8009654:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	691a      	ldr	r2, [r3, #16]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009672:	b2d2      	uxtb	r2, r2
 8009674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009684:	3b01      	subs	r3, #1
 8009686:	b29a      	uxth	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009690:	b29b      	uxth	r3, r3
 8009692:	3b01      	subs	r3, #1
 8009694:	b29a      	uxth	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	691a      	ldr	r2, [r3, #16]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a4:	b2d2      	uxtb	r2, r2
 80096a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	1c5a      	adds	r2, r3, #1
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b6:	3b01      	subs	r3, #1
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	3b01      	subs	r3, #1
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096cc:	e0b8      	b.n	8009840 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d4:	2200      	movs	r2, #0
 80096d6:	4966      	ldr	r1, [pc, #408]	; (8009870 <HAL_I2C_Mem_Read+0x448>)
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 fa49 	bl	8009b70 <I2C_WaitOnFlagUntilTimeout>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e0bf      	b.n	8009868 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	691a      	ldr	r2, [r3, #16]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009702:	b2d2      	uxtb	r2, r2
 8009704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009714:	3b01      	subs	r3, #1
 8009716:	b29a      	uxth	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009720:	b29b      	uxth	r3, r3
 8009722:	3b01      	subs	r3, #1
 8009724:	b29a      	uxth	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009730:	2200      	movs	r2, #0
 8009732:	494f      	ldr	r1, [pc, #316]	; (8009870 <HAL_I2C_Mem_Read+0x448>)
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f000 fa1b 	bl	8009b70 <I2C_WaitOnFlagUntilTimeout>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e091      	b.n	8009868 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	691a      	ldr	r2, [r3, #16]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	b2d2      	uxtb	r2, r2
 8009760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	1c5a      	adds	r2, r3, #1
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009770:	3b01      	subs	r3, #1
 8009772:	b29a      	uxth	r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977c:	b29b      	uxth	r3, r3
 800977e:	3b01      	subs	r3, #1
 8009780:	b29a      	uxth	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	b2d2      	uxtb	r2, r2
 8009792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	3b01      	subs	r3, #1
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097b8:	e042      	b.n	8009840 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 fb2e 	bl	8009e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e04c      	b.n	8009868 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	691a      	ldr	r2, [r3, #16]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3b01      	subs	r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	f003 0304 	and.w	r3, r3, #4
 800980a:	2b04      	cmp	r3, #4
 800980c:	d118      	bne.n	8009840 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	691a      	ldr	r2, [r3, #16]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009818:	b2d2      	uxtb	r2, r2
 800981a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800982a:	3b01      	subs	r3, #1
 800982c:	b29a      	uxth	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009836:	b29b      	uxth	r3, r3
 8009838:	3b01      	subs	r3, #1
 800983a:	b29a      	uxth	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009844:	2b00      	cmp	r3, #0
 8009846:	f47f aec2 	bne.w	80095ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2220      	movs	r2, #32
 800984e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	e000      	b.n	8009868 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009866:	2302      	movs	r3, #2
  }
}
 8009868:	4618      	mov	r0, r3
 800986a:	3728      	adds	r7, #40	; 0x28
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	00010004 	.word	0x00010004

08009874 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af02      	add	r7, sp, #8
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	4608      	mov	r0, r1
 800987e:	4611      	mov	r1, r2
 8009880:	461a      	mov	r2, r3
 8009882:	4603      	mov	r3, r0
 8009884:	817b      	strh	r3, [r7, #10]
 8009886:	460b      	mov	r3, r1
 8009888:	813b      	strh	r3, [r7, #8]
 800988a:	4613      	mov	r3, r2
 800988c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800989c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 f960 	bl	8009b70 <I2C_WaitOnFlagUntilTimeout>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00d      	beq.n	80098d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098c4:	d103      	bne.n	80098ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e05f      	b.n	8009992 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098d2:	897b      	ldrh	r3, [r7, #10]
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	461a      	mov	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	6a3a      	ldr	r2, [r7, #32]
 80098e6:	492d      	ldr	r1, [pc, #180]	; (800999c <I2C_RequestMemoryWrite+0x128>)
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 f998 	bl	8009c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e04c      	b.n	8009992 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098f8:	2300      	movs	r3, #0
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800990e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009910:	6a39      	ldr	r1, [r7, #32]
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f000 fa02 	bl	8009d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00d      	beq.n	800993a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009922:	2b04      	cmp	r3, #4
 8009924:	d107      	bne.n	8009936 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009934:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e02b      	b.n	8009992 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800993a:	88fb      	ldrh	r3, [r7, #6]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d105      	bne.n	800994c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009940:	893b      	ldrh	r3, [r7, #8]
 8009942:	b2da      	uxtb	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	611a      	str	r2, [r3, #16]
 800994a:	e021      	b.n	8009990 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800994c:	893b      	ldrh	r3, [r7, #8]
 800994e:	0a1b      	lsrs	r3, r3, #8
 8009950:	b29b      	uxth	r3, r3
 8009952:	b2da      	uxtb	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800995a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800995c:	6a39      	ldr	r1, [r7, #32]
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f000 f9dc 	bl	8009d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00d      	beq.n	8009986 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996e:	2b04      	cmp	r3, #4
 8009970:	d107      	bne.n	8009982 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009980:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e005      	b.n	8009992 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009986:	893b      	ldrh	r3, [r7, #8]
 8009988:	b2da      	uxtb	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	00010002 	.word	0x00010002

080099a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af02      	add	r7, sp, #8
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	4608      	mov	r0, r1
 80099aa:	4611      	mov	r1, r2
 80099ac:	461a      	mov	r2, r3
 80099ae:	4603      	mov	r3, r0
 80099b0:	817b      	strh	r3, [r7, #10]
 80099b2:	460b      	mov	r3, r1
 80099b4:	813b      	strh	r3, [r7, #8]
 80099b6:	4613      	mov	r3, r2
 80099b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	6a3b      	ldr	r3, [r7, #32]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f000 f8c2 	bl	8009b70 <I2C_WaitOnFlagUntilTimeout>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00d      	beq.n	8009a0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a00:	d103      	bne.n	8009a0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e0aa      	b.n	8009b64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a0e:	897b      	ldrh	r3, [r7, #10]
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	461a      	mov	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	6a3a      	ldr	r2, [r7, #32]
 8009a22:	4952      	ldr	r1, [pc, #328]	; (8009b6c <I2C_RequestMemoryRead+0x1cc>)
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f000 f8fa 	bl	8009c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e097      	b.n	8009b64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a34:	2300      	movs	r3, #0
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a4c:	6a39      	ldr	r1, [r7, #32]
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 f964 	bl	8009d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00d      	beq.n	8009a76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d107      	bne.n	8009a72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e076      	b.n	8009b64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a76:	88fb      	ldrh	r3, [r7, #6]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d105      	bne.n	8009a88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a7c:	893b      	ldrh	r3, [r7, #8]
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	611a      	str	r2, [r3, #16]
 8009a86:	e021      	b.n	8009acc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a88:	893b      	ldrh	r3, [r7, #8]
 8009a8a:	0a1b      	lsrs	r3, r3, #8
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a98:	6a39      	ldr	r1, [r7, #32]
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 f93e 	bl	8009d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00d      	beq.n	8009ac2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	2b04      	cmp	r3, #4
 8009aac:	d107      	bne.n	8009abe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009abc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e050      	b.n	8009b64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ac2:	893b      	ldrh	r3, [r7, #8]
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ace:	6a39      	ldr	r1, [r7, #32]
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f000 f923 	bl	8009d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00d      	beq.n	8009af8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae0:	2b04      	cmp	r3, #4
 8009ae2:	d107      	bne.n	8009af4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009af2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e035      	b.n	8009b64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 f82b 	bl	8009b70 <I2C_WaitOnFlagUntilTimeout>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00d      	beq.n	8009b3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b2e:	d103      	bne.n	8009b38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e013      	b.n	8009b64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009b3c:	897b      	ldrh	r3, [r7, #10]
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	f043 0301 	orr.w	r3, r3, #1
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	6a3a      	ldr	r2, [r7, #32]
 8009b50:	4906      	ldr	r1, [pc, #24]	; (8009b6c <I2C_RequestMemoryRead+0x1cc>)
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f000 f863 	bl	8009c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e000      	b.n	8009b64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	00010002 	.word	0x00010002

08009b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	603b      	str	r3, [r7, #0]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b80:	e025      	b.n	8009bce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b88:	d021      	beq.n	8009bce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b8a:	f7fd f87d 	bl	8006c88 <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d302      	bcc.n	8009ba0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d116      	bne.n	8009bce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2220      	movs	r2, #32
 8009baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bba:	f043 0220 	orr.w	r2, r3, #32
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e023      	b.n	8009c16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	0c1b      	lsrs	r3, r3, #16
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d10d      	bne.n	8009bf4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	43da      	mvns	r2, r3
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4013      	ands	r3, r2
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	bf0c      	ite	eq
 8009bea:	2301      	moveq	r3, #1
 8009bec:	2300      	movne	r3, #0
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	e00c      	b.n	8009c0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	43da      	mvns	r2, r3
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	4013      	ands	r3, r2
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	bf0c      	ite	eq
 8009c06:	2301      	moveq	r3, #1
 8009c08:	2300      	movne	r3, #0
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d0b6      	beq.n	8009b82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	60f8      	str	r0, [r7, #12]
 8009c26:	60b9      	str	r1, [r7, #8]
 8009c28:	607a      	str	r2, [r7, #4]
 8009c2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c2c:	e051      	b.n	8009cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c3c:	d123      	bne.n	8009c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2220      	movs	r2, #32
 8009c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c72:	f043 0204 	orr.w	r2, r3, #4
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e046      	b.n	8009d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8c:	d021      	beq.n	8009cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c8e:	f7fc fffb 	bl	8006c88 <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d302      	bcc.n	8009ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d116      	bne.n	8009cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2220      	movs	r2, #32
 8009cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	f043 0220 	orr.w	r2, r3, #32
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e020      	b.n	8009d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	0c1b      	lsrs	r3, r3, #16
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d10c      	bne.n	8009cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	43da      	mvns	r2, r3
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bf14      	ite	ne
 8009cee:	2301      	movne	r3, #1
 8009cf0:	2300      	moveq	r3, #0
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	e00b      	b.n	8009d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	43da      	mvns	r2, r3
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	4013      	ands	r3, r2
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	bf14      	ite	ne
 8009d08:	2301      	movne	r3, #1
 8009d0a:	2300      	moveq	r3, #0
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d18d      	bne.n	8009c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d28:	e02d      	b.n	8009d86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 f8ce 	bl	8009ecc <I2C_IsAcknowledgeFailed>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e02d      	b.n	8009d96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d40:	d021      	beq.n	8009d86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d42:	f7fc ffa1 	bl	8006c88 <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d302      	bcc.n	8009d58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d116      	bne.n	8009d86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2220      	movs	r2, #32
 8009d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	f043 0220 	orr.w	r2, r3, #32
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e007      	b.n	8009d96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d90:	2b80      	cmp	r3, #128	; 0x80
 8009d92:	d1ca      	bne.n	8009d2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009daa:	e02d      	b.n	8009e08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 f88d 	bl	8009ecc <I2C_IsAcknowledgeFailed>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e02d      	b.n	8009e18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc2:	d021      	beq.n	8009e08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dc4:	f7fc ff60 	bl	8006c88 <HAL_GetTick>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d302      	bcc.n	8009dda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d116      	bne.n	8009e08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2220      	movs	r2, #32
 8009de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df4:	f043 0220 	orr.w	r2, r3, #32
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e007      	b.n	8009e18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	f003 0304 	and.w	r3, r3, #4
 8009e12:	2b04      	cmp	r3, #4
 8009e14:	d1ca      	bne.n	8009dac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e2c:	e042      	b.n	8009eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	f003 0310 	and.w	r3, r3, #16
 8009e38:	2b10      	cmp	r3, #16
 8009e3a:	d119      	bne.n	8009e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f06f 0210 	mvn.w	r2, #16
 8009e44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2220      	movs	r2, #32
 8009e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e029      	b.n	8009ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e70:	f7fc ff0a 	bl	8006c88 <HAL_GetTick>
 8009e74:	4602      	mov	r2, r0
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d302      	bcc.n	8009e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d116      	bne.n	8009eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea0:	f043 0220 	orr.w	r2, r3, #32
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e007      	b.n	8009ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ebe:	2b40      	cmp	r3, #64	; 0x40
 8009ec0:	d1b5      	bne.n	8009e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ee2:	d11b      	bne.n	8009f1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009eec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f08:	f043 0204 	orr.w	r2, r3, #4
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e000      	b.n	8009f1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e034      	b.n	8009fa6 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009f44:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f245 5255 	movw	r2, #21845	; 0x5555
 8009f4e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	6852      	ldr	r2, [r2, #4]
 8009f58:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	6892      	ldr	r2, [r2, #8]
 8009f62:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009f64:	f7fc fe90 	bl	8006c88 <HAL_GetTick>
 8009f68:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009f6a:	e00f      	b.n	8009f8c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009f6c:	f7fc fe8c 	bl	8006c88 <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	2b31      	cmp	r3, #49	; 0x31
 8009f78:	d908      	bls.n	8009f8c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	f003 0303 	and.w	r3, r3, #3
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e00c      	b.n	8009fa6 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	f003 0303 	and.w	r3, r3, #3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1e8      	bne.n	8009f6c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009fa2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b083      	sub	sp, #12
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009fbe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009fce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fd0:	b08f      	sub	sp, #60	; 0x3c
 8009fd2:	af0a      	add	r7, sp, #40	; 0x28
 8009fd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e116      	b.n	800a20e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d106      	bne.n	800a000 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f00d fb56 	bl	80176ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2203      	movs	r2, #3
 800a004:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a00c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4618      	mov	r0, r3
 800a020:	f005 fe2b 	bl	800fc7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	603b      	str	r3, [r7, #0]
 800a02a:	687e      	ldr	r6, [r7, #4]
 800a02c:	466d      	mov	r5, sp
 800a02e:	f106 0410 	add.w	r4, r6, #16
 800a032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a03a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a03e:	e885 0003 	stmia.w	r5, {r0, r1}
 800a042:	1d33      	adds	r3, r6, #4
 800a044:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a046:	6838      	ldr	r0, [r7, #0]
 800a048:	f005 fd02 	bl	800fa50 <USB_CoreInit>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d005      	beq.n	800a05e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2202      	movs	r2, #2
 800a056:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e0d7      	b.n	800a20e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2100      	movs	r1, #0
 800a064:	4618      	mov	r0, r3
 800a066:	f005 fe19 	bl	800fc9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a06a:	2300      	movs	r3, #0
 800a06c:	73fb      	strb	r3, [r7, #15]
 800a06e:	e04a      	b.n	800a106 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a070:	7bfa      	ldrb	r2, [r7, #15]
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	4613      	mov	r3, r2
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	1a9b      	subs	r3, r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	333d      	adds	r3, #61	; 0x3d
 800a080:	2201      	movs	r2, #1
 800a082:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a084:	7bfa      	ldrb	r2, [r7, #15]
 800a086:	6879      	ldr	r1, [r7, #4]
 800a088:	4613      	mov	r3, r2
 800a08a:	00db      	lsls	r3, r3, #3
 800a08c:	1a9b      	subs	r3, r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	440b      	add	r3, r1
 800a092:	333c      	adds	r3, #60	; 0x3c
 800a094:	7bfa      	ldrb	r2, [r7, #15]
 800a096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a098:	7bfa      	ldrb	r2, [r7, #15]
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
 800a09c:	b298      	uxth	r0, r3
 800a09e:	6879      	ldr	r1, [r7, #4]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	1a9b      	subs	r3, r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	440b      	add	r3, r1
 800a0aa:	3342      	adds	r3, #66	; 0x42
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a0b0:	7bfa      	ldrb	r2, [r7, #15]
 800a0b2:	6879      	ldr	r1, [r7, #4]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	1a9b      	subs	r3, r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	440b      	add	r3, r1
 800a0be:	333f      	adds	r3, #63	; 0x3f
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a0c4:	7bfa      	ldrb	r2, [r7, #15]
 800a0c6:	6879      	ldr	r1, [r7, #4]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	00db      	lsls	r3, r3, #3
 800a0cc:	1a9b      	subs	r3, r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	440b      	add	r3, r1
 800a0d2:	3344      	adds	r3, #68	; 0x44
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a0d8:	7bfa      	ldrb	r2, [r7, #15]
 800a0da:	6879      	ldr	r1, [r7, #4]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	1a9b      	subs	r3, r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	440b      	add	r3, r1
 800a0e6:	3348      	adds	r3, #72	; 0x48
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a0ec:	7bfa      	ldrb	r2, [r7, #15]
 800a0ee:	6879      	ldr	r1, [r7, #4]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	1a9b      	subs	r3, r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	440b      	add	r3, r1
 800a0fa:	3350      	adds	r3, #80	; 0x50
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	3301      	adds	r3, #1
 800a104:	73fb      	strb	r3, [r7, #15]
 800a106:	7bfa      	ldrb	r2, [r7, #15]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d3af      	bcc.n	800a070 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a110:	2300      	movs	r3, #0
 800a112:	73fb      	strb	r3, [r7, #15]
 800a114:	e044      	b.n	800a1a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a116:	7bfa      	ldrb	r2, [r7, #15]
 800a118:	6879      	ldr	r1, [r7, #4]
 800a11a:	4613      	mov	r3, r2
 800a11c:	00db      	lsls	r3, r3, #3
 800a11e:	1a9b      	subs	r3, r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	440b      	add	r3, r1
 800a124:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a128:	2200      	movs	r2, #0
 800a12a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a12c:	7bfa      	ldrb	r2, [r7, #15]
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	4613      	mov	r3, r2
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	1a9b      	subs	r3, r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	440b      	add	r3, r1
 800a13a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a13e:	7bfa      	ldrb	r2, [r7, #15]
 800a140:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a142:	7bfa      	ldrb	r2, [r7, #15]
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	4613      	mov	r3, r2
 800a148:	00db      	lsls	r3, r3, #3
 800a14a:	1a9b      	subs	r3, r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	440b      	add	r3, r1
 800a150:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a154:	2200      	movs	r2, #0
 800a156:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a158:	7bfa      	ldrb	r2, [r7, #15]
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	4613      	mov	r3, r2
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	1a9b      	subs	r3, r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	440b      	add	r3, r1
 800a166:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a16a:	2200      	movs	r2, #0
 800a16c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a16e:	7bfa      	ldrb	r2, [r7, #15]
 800a170:	6879      	ldr	r1, [r7, #4]
 800a172:	4613      	mov	r3, r2
 800a174:	00db      	lsls	r3, r3, #3
 800a176:	1a9b      	subs	r3, r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	440b      	add	r3, r1
 800a17c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a180:	2200      	movs	r2, #0
 800a182:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a184:	7bfa      	ldrb	r2, [r7, #15]
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	4613      	mov	r3, r2
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	1a9b      	subs	r3, r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	440b      	add	r3, r1
 800a192:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a196:	2200      	movs	r2, #0
 800a198:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
 800a19c:	3301      	adds	r3, #1
 800a19e:	73fb      	strb	r3, [r7, #15]
 800a1a0:	7bfa      	ldrb	r2, [r7, #15]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d3b5      	bcc.n	800a116 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	603b      	str	r3, [r7, #0]
 800a1b0:	687e      	ldr	r6, [r7, #4]
 800a1b2:	466d      	mov	r5, sp
 800a1b4:	f106 0410 	add.w	r4, r6, #16
 800a1b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a1c4:	e885 0003 	stmia.w	r5, {r0, r1}
 800a1c8:	1d33      	adds	r3, r6, #4
 800a1ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1cc:	6838      	ldr	r0, [r7, #0]
 800a1ce:	f005 fdb1 	bl	800fd34 <USB_DevInit>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d005      	beq.n	800a1e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e014      	b.n	800a20e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d102      	bne.n	800a202 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 f8bf 	bl	800b380 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4618      	mov	r0, r3
 800a208:	f006 fe20 	bl	8010e4c <USB_DevDisconnect>

  return HAL_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a216 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b084      	sub	sp, #16
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d101      	bne.n	800a232 <HAL_PCD_Start+0x1c>
 800a22e:	2302      	movs	r3, #2
 800a230:	e020      	b.n	800a274 <HAL_PCD_Start+0x5e>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d109      	bne.n	800a256 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a246:	2b01      	cmp	r3, #1
 800a248:	d005      	beq.n	800a256 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f005 fcfc 	bl	800fc58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4618      	mov	r0, r3
 800a266:	f006 fdd0 	bl	8010e0a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a27c:	b590      	push	{r4, r7, lr}
 800a27e:	b08d      	sub	sp, #52	; 0x34
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4618      	mov	r0, r3
 800a294:	f006 fe8e 	bl	8010fb4 <USB_GetMode>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f040 83ca 	bne.w	800aa34 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f006 fdf2 	bl	8010e8e <USB_ReadInterrupts>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f000 83c0 	beq.w	800aa32 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f006 fde9 	bl	8010e8e <USB_ReadInterrupts>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	f003 0302 	and.w	r3, r3, #2
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d107      	bne.n	800a2d6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	695a      	ldr	r2, [r3, #20]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f002 0202 	and.w	r2, r2, #2
 800a2d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f006 fdd7 	bl	8010e8e <USB_ReadInterrupts>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	f003 0310 	and.w	r3, r3, #16
 800a2e6:	2b10      	cmp	r3, #16
 800a2e8:	d161      	bne.n	800a3ae <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	699a      	ldr	r2, [r3, #24]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f022 0210 	bic.w	r2, r2, #16
 800a2f8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	f003 020f 	and.w	r2, r3, #15
 800a306:	4613      	mov	r3, r2
 800a308:	00db      	lsls	r3, r3, #3
 800a30a:	1a9b      	subs	r3, r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	4413      	add	r3, r2
 800a316:	3304      	adds	r3, #4
 800a318:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	0c5b      	lsrs	r3, r3, #17
 800a31e:	f003 030f 	and.w	r3, r3, #15
 800a322:	2b02      	cmp	r3, #2
 800a324:	d124      	bne.n	800a370 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a326:	69ba      	ldr	r2, [r7, #24]
 800a328:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a32c:	4013      	ands	r3, r2
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d035      	beq.n	800a39e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	091b      	lsrs	r3, r3, #4
 800a33a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a33c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a340:	b29b      	uxth	r3, r3
 800a342:	461a      	mov	r2, r3
 800a344:	6a38      	ldr	r0, [r7, #32]
 800a346:	f006 fc0e 	bl	8010b66 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	68da      	ldr	r2, [r3, #12]
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	091b      	lsrs	r3, r3, #4
 800a352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a356:	441a      	add	r2, r3
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	699a      	ldr	r2, [r3, #24]
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	091b      	lsrs	r3, r3, #4
 800a364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a368:	441a      	add	r2, r3
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	619a      	str	r2, [r3, #24]
 800a36e:	e016      	b.n	800a39e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	0c5b      	lsrs	r3, r3, #17
 800a374:	f003 030f 	and.w	r3, r3, #15
 800a378:	2b06      	cmp	r3, #6
 800a37a:	d110      	bne.n	800a39e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a382:	2208      	movs	r2, #8
 800a384:	4619      	mov	r1, r3
 800a386:	6a38      	ldr	r0, [r7, #32]
 800a388:	f006 fbed 	bl	8010b66 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	699a      	ldr	r2, [r3, #24]
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	091b      	lsrs	r3, r3, #4
 800a394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a398:	441a      	add	r2, r3
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	699a      	ldr	r2, [r3, #24]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f042 0210 	orr.w	r2, r2, #16
 800a3ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f006 fd6b 	bl	8010e8e <USB_ReadInterrupts>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a3c2:	d16e      	bne.n	800a4a2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f006 fd71 	bl	8010eb4 <USB_ReadDevAllOutEpInterrupt>
 800a3d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a3d4:	e062      	b.n	800a49c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	f003 0301 	and.w	r3, r3, #1
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d057      	beq.n	800a490 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e6:	b2d2      	uxtb	r2, r2
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f006 fd96 	bl	8010f1c <USB_ReadDevOutEPInterrupt>
 800a3f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f003 0301 	and.w	r3, r3, #1
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00c      	beq.n	800a416 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	4413      	add	r3, r2
 800a404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a408:	461a      	mov	r2, r3
 800a40a:	2301      	movs	r3, #1
 800a40c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a40e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 fe0b 	bl	800b02c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	f003 0308 	and.w	r3, r3, #8
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00c      	beq.n	800a43a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	015a      	lsls	r2, r3, #5
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	4413      	add	r3, r2
 800a428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a42c:	461a      	mov	r2, r3
 800a42e:	2308      	movs	r3, #8
 800a430:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 ff05 	bl	800b244 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	f003 0310 	and.w	r3, r3, #16
 800a440:	2b00      	cmp	r3, #0
 800a442:	d008      	beq.n	800a456 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a450:	461a      	mov	r2, r3
 800a452:	2310      	movs	r3, #16
 800a454:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	f003 0320 	and.w	r3, r3, #32
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d008      	beq.n	800a472 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	015a      	lsls	r2, r3, #5
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	4413      	add	r3, r2
 800a468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a46c:	461a      	mov	r2, r3
 800a46e:	2320      	movs	r3, #32
 800a470:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d009      	beq.n	800a490 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47e:	015a      	lsls	r2, r3, #5
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	4413      	add	r3, r2
 800a484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a488:	461a      	mov	r2, r3
 800a48a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a48e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	3301      	adds	r3, #1
 800a494:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a498:	085b      	lsrs	r3, r3, #1
 800a49a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d199      	bne.n	800a3d6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f006 fcf1 	bl	8010e8e <USB_ReadInterrupts>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a4b6:	f040 80c0 	bne.w	800a63a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f006 fd12 	bl	8010ee8 <USB_ReadDevAllInEpInterrupt>
 800a4c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a4ca:	e0b2      	b.n	800a632 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f000 80a7 	beq.w	800a626 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4de:	b2d2      	uxtb	r2, r2
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f006 fd38 	bl	8010f58 <USB_ReadDevInEPInterrupt>
 800a4e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d057      	beq.n	800a5a4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	f003 030f 	and.w	r3, r3, #15
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a500:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	43db      	mvns	r3, r3
 800a50e:	69f9      	ldr	r1, [r7, #28]
 800a510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a514:	4013      	ands	r3, r2
 800a516:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a524:	461a      	mov	r2, r3
 800a526:	2301      	movs	r3, #1
 800a528:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d132      	bne.n	800a598 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a532:	6879      	ldr	r1, [r7, #4]
 800a534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a536:	4613      	mov	r3, r2
 800a538:	00db      	lsls	r3, r3, #3
 800a53a:	1a9b      	subs	r3, r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	440b      	add	r3, r1
 800a540:	3348      	adds	r3, #72	; 0x48
 800a542:	6819      	ldr	r1, [r3, #0]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a548:	4613      	mov	r3, r2
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	1a9b      	subs	r3, r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4403      	add	r3, r0
 800a552:	3344      	adds	r3, #68	; 0x44
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4419      	add	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a55c:	4613      	mov	r3, r2
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	1a9b      	subs	r3, r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4403      	add	r3, r0
 800a566:	3348      	adds	r3, #72	; 0x48
 800a568:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d113      	bne.n	800a598 <HAL_PCD_IRQHandler+0x31c>
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a574:	4613      	mov	r3, r2
 800a576:	00db      	lsls	r3, r3, #3
 800a578:	1a9b      	subs	r3, r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	440b      	add	r3, r1
 800a57e:	3350      	adds	r3, #80	; 0x50
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d108      	bne.n	800a598 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a590:	461a      	mov	r2, r3
 800a592:	2101      	movs	r1, #1
 800a594:	f006 fd40 	bl	8011018 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f00d f913 	bl	80177ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	f003 0308 	and.w	r3, r3, #8
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d008      	beq.n	800a5c0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b0:	015a      	lsls	r2, r3, #5
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	2308      	movs	r3, #8
 800a5be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	f003 0310 	and.w	r3, r3, #16
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d008      	beq.n	800a5dc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	2310      	movs	r3, #16
 800a5da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d008      	beq.n	800a5f8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e8:	015a      	lsls	r2, r3, #5
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	2340      	movs	r3, #64	; 0x40
 800a5f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	f003 0302 	and.w	r3, r3, #2
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d008      	beq.n	800a614 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a60e:	461a      	mov	r2, r3
 800a610:	2302      	movs	r3, #2
 800a612:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d003      	beq.n	800a626 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a61e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fc75 	bl	800af10 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	3301      	adds	r3, #1
 800a62a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	085b      	lsrs	r3, r3, #1
 800a630:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	2b00      	cmp	r3, #0
 800a636:	f47f af49 	bne.w	800a4cc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4618      	mov	r0, r3
 800a640:	f006 fc25 	bl	8010e8e <USB_ReadInterrupts>
 800a644:	4603      	mov	r3, r0
 800a646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a64a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a64e:	d122      	bne.n	800a696 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	69fa      	ldr	r2, [r7, #28]
 800a65a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a65e:	f023 0301 	bic.w	r3, r3, #1
 800a662:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d108      	bne.n	800a680 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a676:	2100      	movs	r1, #0
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f00d fb15 	bl	8017ca8 <HAL_PCDEx_LPM_Callback>
 800a67e:	e002      	b.n	800a686 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f00d f919 	bl	80178b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	695a      	ldr	r2, [r3, #20]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f006 fbf7 	bl	8010e8e <USB_ReadInterrupts>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6aa:	d112      	bne.n	800a6d2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d102      	bne.n	800a6c2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f00d f8d5 	bl	801786c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	695a      	ldr	r2, [r3, #20]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a6d0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f006 fbd9 	bl	8010e8e <USB_ReadInterrupts>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6e6:	d121      	bne.n	800a72c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	695a      	ldr	r2, [r3, #20]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a6f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d111      	bne.n	800a726 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a710:	089b      	lsrs	r3, r3, #2
 800a712:	f003 020f 	and.w	r2, r3, #15
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a71c:	2101      	movs	r1, #1
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f00d fac2 	bl	8017ca8 <HAL_PCDEx_LPM_Callback>
 800a724:	e002      	b.n	800a72c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f00d f8a0 	bl	801786c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4618      	mov	r0, r3
 800a732:	f006 fbac 	bl	8010e8e <USB_ReadInterrupts>
 800a736:	4603      	mov	r3, r0
 800a738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a73c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a740:	f040 80c7 	bne.w	800a8d2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	69fa      	ldr	r2, [r7, #28]
 800a74e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a752:	f023 0301 	bic.w	r3, r3, #1
 800a756:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2110      	movs	r1, #16
 800a75e:	4618      	mov	r0, r3
 800a760:	f005 fc46 	bl	800fff0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a764:	2300      	movs	r3, #0
 800a766:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a768:	e056      	b.n	800a818 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76c:	015a      	lsls	r2, r3, #5
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	4413      	add	r3, r2
 800a772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a776:	461a      	mov	r2, r3
 800a778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a77c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a78e:	0151      	lsls	r1, r2, #5
 800a790:	69fa      	ldr	r2, [r7, #28]
 800a792:	440a      	add	r2, r1
 800a794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a79c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a0:	015a      	lsls	r2, r3, #5
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7ae:	0151      	lsls	r1, r2, #5
 800a7b0:	69fa      	ldr	r2, [r7, #28]
 800a7b2:	440a      	add	r2, r1
 800a7b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a7bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c0:	015a      	lsls	r2, r3, #5
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7e2:	0151      	lsls	r1, r2, #5
 800a7e4:	69fa      	ldr	r2, [r7, #28]
 800a7e6:	440a      	add	r2, r1
 800a7e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f4:	015a      	lsls	r2, r3, #5
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a802:	0151      	lsls	r1, r2, #5
 800a804:	69fa      	ldr	r2, [r7, #28]
 800a806:	440a      	add	r2, r1
 800a808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a80c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a810:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a814:	3301      	adds	r3, #1
 800a816:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a81e:	429a      	cmp	r2, r3
 800a820:	d3a3      	bcc.n	800a76a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a828:	69db      	ldr	r3, [r3, #28]
 800a82a:	69fa      	ldr	r2, [r7, #28]
 800a82c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a830:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a834:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d016      	beq.n	800a86c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a848:	69fa      	ldr	r2, [r7, #28]
 800a84a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a84e:	f043 030b 	orr.w	r3, r3, #11
 800a852:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a85e:	69fa      	ldr	r2, [r7, #28]
 800a860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a864:	f043 030b 	orr.w	r3, r3, #11
 800a868:	6453      	str	r3, [r2, #68]	; 0x44
 800a86a:	e015      	b.n	800a898 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	69fa      	ldr	r2, [r7, #28]
 800a876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a87a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a87e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a882:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	69fa      	ldr	r2, [r7, #28]
 800a88e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a892:	f043 030b 	orr.w	r3, r3, #11
 800a896:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	69fa      	ldr	r2, [r7, #28]
 800a8a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a8aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6818      	ldr	r0, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a8bc:	461a      	mov	r2, r3
 800a8be:	f006 fbab 	bl	8011018 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	695a      	ldr	r2, [r3, #20]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a8d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f006 fad9 	bl	8010e8e <USB_ReadInterrupts>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8e6:	d124      	bne.n	800a932 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f006 fb6f 	bl	8010fd0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f005 fbd7 	bl	80100aa <USB_GetDevSpeed>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	461a      	mov	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681c      	ldr	r4, [r3, #0]
 800a908:	f000 fe94 	bl	800b634 <HAL_RCC_GetHCLKFreq>
 800a90c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a912:	b2db      	uxtb	r3, r3
 800a914:	461a      	mov	r2, r3
 800a916:	4620      	mov	r0, r4
 800a918:	f005 f8fc 	bl	800fb14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f00c ff7c 	bl	801781a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	695a      	ldr	r2, [r3, #20]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a930:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4618      	mov	r0, r3
 800a938:	f006 faa9 	bl	8010e8e <USB_ReadInterrupts>
 800a93c:	4603      	mov	r3, r0
 800a93e:	f003 0308 	and.w	r3, r3, #8
 800a942:	2b08      	cmp	r3, #8
 800a944:	d10a      	bne.n	800a95c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f00c ff59 	bl	80177fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	695a      	ldr	r2, [r3, #20]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f002 0208 	and.w	r2, r2, #8
 800a95a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4618      	mov	r0, r3
 800a962:	f006 fa94 	bl	8010e8e <USB_ReadInterrupts>
 800a966:	4603      	mov	r3, r0
 800a968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a96c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a970:	d10f      	bne.n	800a992 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a972:	2300      	movs	r3, #0
 800a974:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f00c ffbb 	bl	80178f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	695a      	ldr	r2, [r3, #20]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4618      	mov	r0, r3
 800a998:	f006 fa79 	bl	8010e8e <USB_ReadInterrupts>
 800a99c:	4603      	mov	r3, r0
 800a99e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9a6:	d10f      	bne.n	800a9c8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f00c ff8e 	bl	80178d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	695a      	ldr	r2, [r3, #20]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a9c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f006 fa5e 	bl	8010e8e <USB_ReadInterrupts>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a9d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9dc:	d10a      	bne.n	800a9f4 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f00c ff9c 	bl	801791c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	695a      	ldr	r2, [r3, #20]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a9f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f006 fa48 	bl	8010e8e <USB_ReadInterrupts>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	f003 0304 	and.w	r3, r3, #4
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d115      	bne.n	800aa34 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	f003 0304 	and.w	r3, r3, #4
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f00c ff8c 	bl	8017938 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6859      	ldr	r1, [r3, #4]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	69ba      	ldr	r2, [r7, #24]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	605a      	str	r2, [r3, #4]
 800aa30:	e000      	b.n	800aa34 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800aa32:	bf00      	nop
    }
  }
}
 800aa34:	3734      	adds	r7, #52	; 0x34
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd90      	pop	{r4, r7, pc}

0800aa3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d101      	bne.n	800aa54 <HAL_PCD_SetAddress+0x1a>
 800aa50:	2302      	movs	r3, #2
 800aa52:	e013      	b.n	800aa7c <HAL_PCD_SetAddress+0x42>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	78fa      	ldrb	r2, [r7, #3]
 800aa60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	78fa      	ldrb	r2, [r7, #3]
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f006 f9a6 	bl	8010dbe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	4608      	mov	r0, r1
 800aa8e:	4611      	mov	r1, r2
 800aa90:	461a      	mov	r2, r3
 800aa92:	4603      	mov	r3, r0
 800aa94:	70fb      	strb	r3, [r7, #3]
 800aa96:	460b      	mov	r3, r1
 800aa98:	803b      	strh	r3, [r7, #0]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800aaa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	da0f      	bge.n	800aaca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aaaa:	78fb      	ldrb	r3, [r7, #3]
 800aaac:	f003 020f 	and.w	r2, r3, #15
 800aab0:	4613      	mov	r3, r2
 800aab2:	00db      	lsls	r3, r3, #3
 800aab4:	1a9b      	subs	r3, r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	3338      	adds	r3, #56	; 0x38
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	4413      	add	r3, r2
 800aabe:	3304      	adds	r3, #4
 800aac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2201      	movs	r2, #1
 800aac6:	705a      	strb	r2, [r3, #1]
 800aac8:	e00f      	b.n	800aaea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aaca:	78fb      	ldrb	r3, [r7, #3]
 800aacc:	f003 020f 	and.w	r2, r3, #15
 800aad0:	4613      	mov	r3, r2
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	1a9b      	subs	r3, r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	4413      	add	r3, r2
 800aae0:	3304      	adds	r3, #4
 800aae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	f003 030f 	and.w	r3, r3, #15
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800aaf6:	883a      	ldrh	r2, [r7, #0]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	78ba      	ldrb	r2, [r7, #2]
 800ab00:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	785b      	ldrb	r3, [r3, #1]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d004      	beq.n	800ab14 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ab14:	78bb      	ldrb	r3, [r7, #2]
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d102      	bne.n	800ab20 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d101      	bne.n	800ab2e <HAL_PCD_EP_Open+0xaa>
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	e00e      	b.n	800ab4c <HAL_PCD_EP_Open+0xc8>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68f9      	ldr	r1, [r7, #12]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f005 fad9 	bl	80100f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800ab4a:	7afb      	ldrb	r3, [r7, #11]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ab60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	da0f      	bge.n	800ab88 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab68:	78fb      	ldrb	r3, [r7, #3]
 800ab6a:	f003 020f 	and.w	r2, r3, #15
 800ab6e:	4613      	mov	r3, r2
 800ab70:	00db      	lsls	r3, r3, #3
 800ab72:	1a9b      	subs	r3, r3, r2
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	3338      	adds	r3, #56	; 0x38
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2201      	movs	r2, #1
 800ab84:	705a      	strb	r2, [r3, #1]
 800ab86:	e00f      	b.n	800aba8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab88:	78fb      	ldrb	r3, [r7, #3]
 800ab8a:	f003 020f 	and.w	r2, r3, #15
 800ab8e:	4613      	mov	r3, r2
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	1a9b      	subs	r3, r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	3304      	adds	r3, #4
 800aba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800aba8:	78fb      	ldrb	r3, [r7, #3]
 800abaa:	f003 030f 	and.w	r3, r3, #15
 800abae:	b2da      	uxtb	r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d101      	bne.n	800abc2 <HAL_PCD_EP_Close+0x6e>
 800abbe:	2302      	movs	r3, #2
 800abc0:	e00e      	b.n	800abe0 <HAL_PCD_EP_Close+0x8c>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68f9      	ldr	r1, [r7, #12]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f005 fb17 	bl	8010204 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	607a      	str	r2, [r7, #4]
 800abf2:	603b      	str	r3, [r7, #0]
 800abf4:	460b      	mov	r3, r1
 800abf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abf8:	7afb      	ldrb	r3, [r7, #11]
 800abfa:	f003 020f 	and.w	r2, r3, #15
 800abfe:	4613      	mov	r3, r2
 800ac00:	00db      	lsls	r3, r3, #3
 800ac02:	1a9b      	subs	r3, r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	3304      	adds	r3, #4
 800ac10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2200      	movs	r2, #0
 800ac22:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	2200      	movs	r2, #0
 800ac28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac2a:	7afb      	ldrb	r3, [r7, #11]
 800ac2c:	f003 030f 	and.w	r3, r3, #15
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d102      	bne.n	800ac44 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ac44:	7afb      	ldrb	r3, [r7, #11]
 800ac46:	f003 030f 	and.w	r3, r3, #15
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d109      	bne.n	800ac62 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6818      	ldr	r0, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	461a      	mov	r2, r3
 800ac5a:	6979      	ldr	r1, [r7, #20]
 800ac5c:	f005 fdf2 	bl	8010844 <USB_EP0StartXfer>
 800ac60:	e008      	b.n	800ac74 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6818      	ldr	r0, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	6979      	ldr	r1, [r7, #20]
 800ac70:	f005 fba4 	bl	80103bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b083      	sub	sp, #12
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ac8a:	78fb      	ldrb	r3, [r7, #3]
 800ac8c:	f003 020f 	and.w	r2, r3, #15
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4613      	mov	r3, r2
 800ac94:	00db      	lsls	r3, r3, #3
 800ac96:	1a9b      	subs	r3, r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	440b      	add	r3, r1
 800ac9c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800aca0:	681b      	ldr	r3, [r3, #0]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b086      	sub	sp, #24
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	60f8      	str	r0, [r7, #12]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	603b      	str	r3, [r7, #0]
 800acba:	460b      	mov	r3, r1
 800acbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800acbe:	7afb      	ldrb	r3, [r7, #11]
 800acc0:	f003 020f 	and.w	r2, r3, #15
 800acc4:	4613      	mov	r3, r2
 800acc6:	00db      	lsls	r3, r3, #3
 800acc8:	1a9b      	subs	r3, r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	3338      	adds	r3, #56	; 0x38
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	4413      	add	r3, r2
 800acd2:	3304      	adds	r3, #4
 800acd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2200      	movs	r2, #0
 800ace6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2201      	movs	r2, #1
 800acec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800acee:	7afb      	ldrb	r3, [r7, #11]
 800acf0:	f003 030f 	and.w	r3, r3, #15
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d102      	bne.n	800ad08 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ad08:	7afb      	ldrb	r3, [r7, #11]
 800ad0a:	f003 030f 	and.w	r3, r3, #15
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d109      	bne.n	800ad26 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6818      	ldr	r0, [r3, #0]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	6979      	ldr	r1, [r7, #20]
 800ad20:	f005 fd90 	bl	8010844 <USB_EP0StartXfer>
 800ad24:	e008      	b.n	800ad38 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	461a      	mov	r2, r3
 800ad32:	6979      	ldr	r1, [r7, #20]
 800ad34:	f005 fb42 	bl	80103bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3718      	adds	r7, #24
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ad4e:	78fb      	ldrb	r3, [r7, #3]
 800ad50:	f003 020f 	and.w	r2, r3, #15
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d901      	bls.n	800ad60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e050      	b.n	800ae02 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ad60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	da0f      	bge.n	800ad88 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad68:	78fb      	ldrb	r3, [r7, #3]
 800ad6a:	f003 020f 	and.w	r2, r3, #15
 800ad6e:	4613      	mov	r3, r2
 800ad70:	00db      	lsls	r3, r3, #3
 800ad72:	1a9b      	subs	r3, r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	3338      	adds	r3, #56	; 0x38
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2201      	movs	r2, #1
 800ad84:	705a      	strb	r2, [r3, #1]
 800ad86:	e00d      	b.n	800ada4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ad88:	78fa      	ldrb	r2, [r7, #3]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	1a9b      	subs	r3, r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	4413      	add	r3, r2
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2201      	movs	r2, #1
 800ada8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800adaa:	78fb      	ldrb	r3, [r7, #3]
 800adac:	f003 030f 	and.w	r3, r3, #15
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d101      	bne.n	800adc4 <HAL_PCD_EP_SetStall+0x82>
 800adc0:	2302      	movs	r3, #2
 800adc2:	e01e      	b.n	800ae02 <HAL_PCD_EP_SetStall+0xc0>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68f9      	ldr	r1, [r7, #12]
 800add2:	4618      	mov	r0, r3
 800add4:	f005 ff1f 	bl	8010c16 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	f003 030f 	and.w	r3, r3, #15
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10a      	bne.n	800adf8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6818      	ldr	r0, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	b2d9      	uxtb	r1, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800adf2:	461a      	mov	r2, r3
 800adf4:	f006 f910 	bl	8011018 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	460b      	mov	r3, r1
 800ae14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ae16:	78fb      	ldrb	r3, [r7, #3]
 800ae18:	f003 020f 	and.w	r2, r3, #15
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d901      	bls.n	800ae28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e042      	b.n	800aeae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ae28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	da0f      	bge.n	800ae50 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	f003 020f 	and.w	r2, r3, #15
 800ae36:	4613      	mov	r3, r2
 800ae38:	00db      	lsls	r3, r3, #3
 800ae3a:	1a9b      	subs	r3, r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	3338      	adds	r3, #56	; 0x38
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	4413      	add	r3, r2
 800ae44:	3304      	adds	r3, #4
 800ae46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	705a      	strb	r2, [r3, #1]
 800ae4e:	e00f      	b.n	800ae70 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae50:	78fb      	ldrb	r3, [r7, #3]
 800ae52:	f003 020f 	and.w	r2, r3, #15
 800ae56:	4613      	mov	r3, r2
 800ae58:	00db      	lsls	r3, r3, #3
 800ae5a:	1a9b      	subs	r3, r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	4413      	add	r3, r2
 800ae66:	3304      	adds	r3, #4
 800ae68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae76:	78fb      	ldrb	r3, [r7, #3]
 800ae78:	f003 030f 	and.w	r3, r3, #15
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d101      	bne.n	800ae90 <HAL_PCD_EP_ClrStall+0x86>
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	e00e      	b.n	800aeae <HAL_PCD_EP_ClrStall+0xa4>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68f9      	ldr	r1, [r7, #12]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f005 ff27 	bl	8010cf2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b082      	sub	sp, #8
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	460b      	mov	r3, r1
 800aec0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d101      	bne.n	800aed0 <HAL_PCD_EP_Flush+0x1a>
 800aecc:	2302      	movs	r3, #2
 800aece:	e01b      	b.n	800af08 <HAL_PCD_EP_Flush+0x52>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800aed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	da09      	bge.n	800aef4 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	78fb      	ldrb	r3, [r7, #3]
 800aee6:	f003 030f 	and.w	r3, r3, #15
 800aeea:	4619      	mov	r1, r3
 800aeec:	4610      	mov	r0, r2
 800aeee:	f005 f87f 	bl	800fff0 <USB_FlushTxFifo>
 800aef2:	e004      	b.n	800aefe <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f005 f89d 	bl	8010038 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b08a      	sub	sp, #40	; 0x28
 800af14:	af02      	add	r7, sp, #8
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	4613      	mov	r3, r2
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	1a9b      	subs	r3, r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	3338      	adds	r3, #56	; 0x38
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	4413      	add	r3, r2
 800af34:	3304      	adds	r3, #4
 800af36:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	699a      	ldr	r2, [r3, #24]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	695b      	ldr	r3, [r3, #20]
 800af40:	429a      	cmp	r2, r3
 800af42:	d901      	bls.n	800af48 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	e06c      	b.n	800b022 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	695a      	ldr	r2, [r3, #20]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	69fa      	ldr	r2, [r7, #28]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d902      	bls.n	800af64 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	3303      	adds	r3, #3
 800af68:	089b      	lsrs	r3, r3, #2
 800af6a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800af6c:	e02b      	b.n	800afc6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	695a      	ldr	r2, [r3, #20]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	69fa      	ldr	r2, [r7, #28]
 800af80:	429a      	cmp	r2, r3
 800af82:	d902      	bls.n	800af8a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	3303      	adds	r3, #3
 800af8e:	089b      	lsrs	r3, r3, #2
 800af90:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	68d9      	ldr	r1, [r3, #12]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	4603      	mov	r3, r0
 800afa8:	6978      	ldr	r0, [r7, #20]
 800afaa:	f005 fd9e 	bl	8010aea <USB_WritePacket>

    ep->xfer_buff  += len;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	68da      	ldr	r2, [r3, #12]
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	441a      	add	r2, r3
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	699a      	ldr	r2, [r3, #24]
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	441a      	add	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	015a      	lsls	r2, r3, #5
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	4413      	add	r3, r2
 800afce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	69ba      	ldr	r2, [r7, #24]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d809      	bhi.n	800aff0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	699a      	ldr	r2, [r3, #24]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d203      	bcs.n	800aff0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1be      	bne.n	800af6e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	695a      	ldr	r2, [r3, #20]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	699b      	ldr	r3, [r3, #24]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d811      	bhi.n	800b020 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	f003 030f 	and.w	r3, r3, #15
 800b002:	2201      	movs	r2, #1
 800b004:	fa02 f303 	lsl.w	r3, r2, r3
 800b008:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	43db      	mvns	r3, r3
 800b016:	6939      	ldr	r1, [r7, #16]
 800b018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b01c:	4013      	ands	r3, r2
 800b01e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3720      	adds	r7, #32
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	333c      	adds	r3, #60	; 0x3c
 800b044:	3304      	adds	r3, #4
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	015a      	lsls	r2, r3, #5
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	4413      	add	r3, r2
 800b052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	f040 80a0 	bne.w	800b1a4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	f003 0308 	and.w	r3, r3, #8
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d015      	beq.n	800b09a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	4a72      	ldr	r2, [pc, #456]	; (800b23c <PCD_EP_OutXfrComplete_int+0x210>)
 800b072:	4293      	cmp	r3, r2
 800b074:	f240 80dd 	bls.w	800b232 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 80d7 	beq.w	800b232 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b090:	461a      	mov	r2, r3
 800b092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b096:	6093      	str	r3, [r2, #8]
 800b098:	e0cb      	b.n	800b232 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	f003 0320 	and.w	r3, r3, #32
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d009      	beq.n	800b0b8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	015a      	lsls	r2, r3, #5
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	2320      	movs	r3, #32
 800b0b4:	6093      	str	r3, [r2, #8]
 800b0b6:	e0bc      	b.n	800b232 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f040 80b7 	bne.w	800b232 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	4a5d      	ldr	r2, [pc, #372]	; (800b23c <PCD_EP_OutXfrComplete_int+0x210>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d90f      	bls.n	800b0ec <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00a      	beq.n	800b0ec <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0e8:	6093      	str	r3, [r2, #8]
 800b0ea:	e0a2      	b.n	800b232 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	683a      	ldr	r2, [r7, #0]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	00db      	lsls	r3, r3, #3
 800b0f4:	1a9b      	subs	r3, r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	440b      	add	r3, r1
 800b0fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b0fe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	0159      	lsls	r1, r3, #5
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	440b      	add	r3, r1
 800b108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800b112:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	4613      	mov	r3, r2
 800b11a:	00db      	lsls	r3, r3, #3
 800b11c:	1a9b      	subs	r3, r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4403      	add	r3, r0
 800b122:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b126:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800b128:	6879      	ldr	r1, [r7, #4]
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	4613      	mov	r3, r2
 800b12e:	00db      	lsls	r3, r3, #3
 800b130:	1a9b      	subs	r3, r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	440b      	add	r3, r1
 800b136:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b13a:	6819      	ldr	r1, [r3, #0]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	4613      	mov	r3, r2
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	1a9b      	subs	r3, r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4403      	add	r3, r0
 800b14a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4419      	add	r1, r3
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	4613      	mov	r3, r2
 800b158:	00db      	lsls	r3, r3, #3
 800b15a:	1a9b      	subs	r3, r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4403      	add	r3, r0
 800b160:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b164:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d114      	bne.n	800b196 <PCD_EP_OutXfrComplete_int+0x16a>
 800b16c:	6879      	ldr	r1, [r7, #4]
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	4613      	mov	r3, r2
 800b172:	00db      	lsls	r3, r3, #3
 800b174:	1a9b      	subs	r3, r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	440b      	add	r3, r1
 800b17a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d108      	bne.n	800b196 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6818      	ldr	r0, [r3, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b18e:	461a      	mov	r2, r3
 800b190:	2101      	movs	r1, #1
 800b192:	f005 ff41 	bl	8011018 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f00c faf9 	bl	8017794 <HAL_PCD_DataOutStageCallback>
 800b1a2:	e046      	b.n	800b232 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	4a26      	ldr	r2, [pc, #152]	; (800b240 <PCD_EP_OutXfrComplete_int+0x214>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d124      	bne.n	800b1f6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00a      	beq.n	800b1cc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	015a      	lsls	r2, r3, #5
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	4413      	add	r3, r2
 800b1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1c8:	6093      	str	r3, [r2, #8]
 800b1ca:	e032      	b.n	800b232 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	f003 0320 	and.w	r3, r3, #32
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d008      	beq.n	800b1e8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	015a      	lsls	r2, r3, #5
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	4413      	add	r3, r2
 800b1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	2320      	movs	r3, #32
 800b1e6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f00c fad0 	bl	8017794 <HAL_PCD_DataOutStageCallback>
 800b1f4:	e01d      	b.n	800b232 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d114      	bne.n	800b226 <PCD_EP_OutXfrComplete_int+0x1fa>
 800b1fc:	6879      	ldr	r1, [r7, #4]
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	4613      	mov	r3, r2
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	1a9b      	subs	r3, r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	440b      	add	r3, r1
 800b20a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d108      	bne.n	800b226 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6818      	ldr	r0, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b21e:	461a      	mov	r2, r3
 800b220:	2100      	movs	r1, #0
 800b222:	f005 fef9 	bl	8011018 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	4619      	mov	r1, r3
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f00c fab1 	bl	8017794 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	4f54300a 	.word	0x4f54300a
 800b240:	4f54310a 	.word	0x4f54310a

0800b244 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	333c      	adds	r3, #60	; 0x3c
 800b25c:	3304      	adds	r3, #4
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	015a      	lsls	r2, r3, #5
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	4413      	add	r3, r2
 800b26a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	4a15      	ldr	r2, [pc, #84]	; (800b2cc <PCD_EP_OutSetupPacket_int+0x88>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d90e      	bls.n	800b298 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b280:	2b00      	cmp	r3, #0
 800b282:	d009      	beq.n	800b298 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	015a      	lsls	r2, r3, #5
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	4413      	add	r3, r2
 800b28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b290:	461a      	mov	r2, r3
 800b292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b296:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f00c fa69 	bl	8017770 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	4a0a      	ldr	r2, [pc, #40]	; (800b2cc <PCD_EP_OutSetupPacket_int+0x88>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d90c      	bls.n	800b2c0 <PCD_EP_OutSetupPacket_int+0x7c>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d108      	bne.n	800b2c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6818      	ldr	r0, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	2101      	movs	r1, #1
 800b2bc:	f005 feac 	bl	8011018 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3718      	adds	r7, #24
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	4f54300a 	.word	0x4f54300a

0800b2d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	460b      	mov	r3, r1
 800b2da:	70fb      	strb	r3, [r7, #3]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b2e8:	78fb      	ldrb	r3, [r7, #3]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d107      	bne.n	800b2fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b2ee:	883b      	ldrh	r3, [r7, #0]
 800b2f0:	0419      	lsls	r1, r3, #16
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	430a      	orrs	r2, r1
 800b2fa:	629a      	str	r2, [r3, #40]	; 0x28
 800b2fc:	e028      	b.n	800b350 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b304:	0c1b      	lsrs	r3, r3, #16
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	4413      	add	r3, r2
 800b30a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b30c:	2300      	movs	r3, #0
 800b30e:	73fb      	strb	r3, [r7, #15]
 800b310:	e00d      	b.n	800b32e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	3340      	adds	r3, #64	; 0x40
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	0c1b      	lsrs	r3, r3, #16
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	4413      	add	r3, r2
 800b326:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b328:	7bfb      	ldrb	r3, [r7, #15]
 800b32a:	3301      	adds	r3, #1
 800b32c:	73fb      	strb	r3, [r7, #15]
 800b32e:	7bfa      	ldrb	r2, [r7, #15]
 800b330:	78fb      	ldrb	r3, [r7, #3]
 800b332:	3b01      	subs	r3, #1
 800b334:	429a      	cmp	r2, r3
 800b336:	d3ec      	bcc.n	800b312 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b338:	883b      	ldrh	r3, [r7, #0]
 800b33a:	0418      	lsls	r0, r3, #16
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6819      	ldr	r1, [r3, #0]
 800b340:	78fb      	ldrb	r3, [r7, #3]
 800b342:	3b01      	subs	r3, #1
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	4302      	orrs	r2, r0
 800b348:	3340      	adds	r3, #64	; 0x40
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	440b      	add	r3, r1
 800b34e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	460b      	mov	r3, r1
 800b368:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	887a      	ldrh	r2, [r7, #2]
 800b370:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3b2:	f043 0303 	orr.w	r3, r3, #3
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	603b      	str	r3, [r7, #0]
 800b3d6:	4b20      	ldr	r3, [pc, #128]	; (800b458 <HAL_PWREx_EnableOverDrive+0x90>)
 800b3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3da:	4a1f      	ldr	r2, [pc, #124]	; (800b458 <HAL_PWREx_EnableOverDrive+0x90>)
 800b3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3e0:	6413      	str	r3, [r2, #64]	; 0x40
 800b3e2:	4b1d      	ldr	r3, [pc, #116]	; (800b458 <HAL_PWREx_EnableOverDrive+0x90>)
 800b3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3ea:	603b      	str	r3, [r7, #0]
 800b3ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b3ee:	4b1b      	ldr	r3, [pc, #108]	; (800b45c <HAL_PWREx_EnableOverDrive+0x94>)
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b3f4:	f7fb fc48 	bl	8006c88 <HAL_GetTick>
 800b3f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b3fa:	e009      	b.n	800b410 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b3fc:	f7fb fc44 	bl	8006c88 <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b40a:	d901      	bls.n	800b410 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e01f      	b.n	800b450 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b410:	4b13      	ldr	r3, [pc, #76]	; (800b460 <HAL_PWREx_EnableOverDrive+0x98>)
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b41c:	d1ee      	bne.n	800b3fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b41e:	4b11      	ldr	r3, [pc, #68]	; (800b464 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b420:	2201      	movs	r2, #1
 800b422:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b424:	f7fb fc30 	bl	8006c88 <HAL_GetTick>
 800b428:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b42a:	e009      	b.n	800b440 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b42c:	f7fb fc2c 	bl	8006c88 <HAL_GetTick>
 800b430:	4602      	mov	r2, r0
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b43a:	d901      	bls.n	800b440 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b43c:	2303      	movs	r3, #3
 800b43e:	e007      	b.n	800b450 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b440:	4b07      	ldr	r3, [pc, #28]	; (800b460 <HAL_PWREx_EnableOverDrive+0x98>)
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b44c:	d1ee      	bne.n	800b42c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	40023800 	.word	0x40023800
 800b45c:	420e0040 	.word	0x420e0040
 800b460:	40007000 	.word	0x40007000
 800b464:	420e0044 	.word	0x420e0044

0800b468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	e0cc      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b47c:	4b68      	ldr	r3, [pc, #416]	; (800b620 <HAL_RCC_ClockConfig+0x1b8>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 030f 	and.w	r3, r3, #15
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d90c      	bls.n	800b4a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b48a:	4b65      	ldr	r3, [pc, #404]	; (800b620 <HAL_RCC_ClockConfig+0x1b8>)
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	b2d2      	uxtb	r2, r2
 800b490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b492:	4b63      	ldr	r3, [pc, #396]	; (800b620 <HAL_RCC_ClockConfig+0x1b8>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 030f 	and.w	r3, r3, #15
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d001      	beq.n	800b4a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e0b8      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0302 	and.w	r3, r3, #2
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d020      	beq.n	800b4f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f003 0304 	and.w	r3, r3, #4
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d005      	beq.n	800b4c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4bc:	4b59      	ldr	r3, [pc, #356]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	4a58      	ldr	r2, [pc, #352]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b4c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b4c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 0308 	and.w	r3, r3, #8
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d005      	beq.n	800b4e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4d4:	4b53      	ldr	r3, [pc, #332]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	4a52      	ldr	r2, [pc, #328]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b4da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b4de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4e0:	4b50      	ldr	r3, [pc, #320]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	494d      	ldr	r1, [pc, #308]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d044      	beq.n	800b588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d107      	bne.n	800b516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b506:	4b47      	ldr	r3, [pc, #284]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d119      	bne.n	800b546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e07f      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d003      	beq.n	800b526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b522:	2b03      	cmp	r3, #3
 800b524:	d107      	bne.n	800b536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b526:	4b3f      	ldr	r3, [pc, #252]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d109      	bne.n	800b546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e06f      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b536:	4b3b      	ldr	r3, [pc, #236]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 0302 	and.w	r3, r3, #2
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e067      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b546:	4b37      	ldr	r3, [pc, #220]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	f023 0203 	bic.w	r2, r3, #3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	4934      	ldr	r1, [pc, #208]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b554:	4313      	orrs	r3, r2
 800b556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b558:	f7fb fb96 	bl	8006c88 <HAL_GetTick>
 800b55c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b55e:	e00a      	b.n	800b576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b560:	f7fb fb92 	bl	8006c88 <HAL_GetTick>
 800b564:	4602      	mov	r2, r0
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b56e:	4293      	cmp	r3, r2
 800b570:	d901      	bls.n	800b576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b572:	2303      	movs	r3, #3
 800b574:	e04f      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b576:	4b2b      	ldr	r3, [pc, #172]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	f003 020c 	and.w	r2, r3, #12
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	429a      	cmp	r2, r3
 800b586:	d1eb      	bne.n	800b560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b588:	4b25      	ldr	r3, [pc, #148]	; (800b620 <HAL_RCC_ClockConfig+0x1b8>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 030f 	and.w	r3, r3, #15
 800b590:	683a      	ldr	r2, [r7, #0]
 800b592:	429a      	cmp	r2, r3
 800b594:	d20c      	bcs.n	800b5b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b596:	4b22      	ldr	r3, [pc, #136]	; (800b620 <HAL_RCC_ClockConfig+0x1b8>)
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	b2d2      	uxtb	r2, r2
 800b59c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b59e:	4b20      	ldr	r3, [pc, #128]	; (800b620 <HAL_RCC_ClockConfig+0x1b8>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f003 030f 	and.w	r3, r3, #15
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d001      	beq.n	800b5b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e032      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 0304 	and.w	r3, r3, #4
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d008      	beq.n	800b5ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b5bc:	4b19      	ldr	r3, [pc, #100]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	4916      	ldr	r1, [pc, #88]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 0308 	and.w	r3, r3, #8
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d009      	beq.n	800b5ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b5da:	4b12      	ldr	r3, [pc, #72]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	00db      	lsls	r3, r3, #3
 800b5e8:	490e      	ldr	r1, [pc, #56]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b5ee:	f000 fb6b 	bl	800bcc8 <HAL_RCC_GetSysClockFreq>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <HAL_RCC_ClockConfig+0x1bc>)
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	091b      	lsrs	r3, r3, #4
 800b5fa:	f003 030f 	and.w	r3, r3, #15
 800b5fe:	490a      	ldr	r1, [pc, #40]	; (800b628 <HAL_RCC_ClockConfig+0x1c0>)
 800b600:	5ccb      	ldrb	r3, [r1, r3]
 800b602:	fa22 f303 	lsr.w	r3, r2, r3
 800b606:	4a09      	ldr	r2, [pc, #36]	; (800b62c <HAL_RCC_ClockConfig+0x1c4>)
 800b608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b60a:	4b09      	ldr	r3, [pc, #36]	; (800b630 <HAL_RCC_ClockConfig+0x1c8>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fb faf6 	bl	8006c00 <HAL_InitTick>

  return HAL_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	40023c00 	.word	0x40023c00
 800b624:	40023800 	.word	0x40023800
 800b628:	08018764 	.word	0x08018764
 800b62c:	20000000 	.word	0x20000000
 800b630:	20000004 	.word	0x20000004

0800b634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b634:	b480      	push	{r7}
 800b636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b638:	4b03      	ldr	r3, [pc, #12]	; (800b648 <HAL_RCC_GetHCLKFreq+0x14>)
 800b63a:	681b      	ldr	r3, [r3, #0]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	20000000 	.word	0x20000000

0800b64c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b650:	f7ff fff0 	bl	800b634 <HAL_RCC_GetHCLKFreq>
 800b654:	4602      	mov	r2, r0
 800b656:	4b05      	ldr	r3, [pc, #20]	; (800b66c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	0a9b      	lsrs	r3, r3, #10
 800b65c:	f003 0307 	and.w	r3, r3, #7
 800b660:	4903      	ldr	r1, [pc, #12]	; (800b670 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b662:	5ccb      	ldrb	r3, [r1, r3]
 800b664:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b668:	4618      	mov	r0, r3
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	40023800 	.word	0x40023800
 800b670:	08018774 	.word	0x08018774

0800b674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b08c      	sub	sp, #48	; 0x30
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b67c:	2300      	movs	r3, #0
 800b67e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800b680:	2300      	movs	r3, #0
 800b682:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800b684:	2300      	movs	r3, #0
 800b686:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800b688:	2300      	movs	r3, #0
 800b68a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800b694:	2300      	movs	r3, #0
 800b696:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800b698:	2300      	movs	r3, #0
 800b69a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800b69c:	2300      	movs	r3, #0
 800b69e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d010      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800b6ac:	4b6f      	ldr	r3, [pc, #444]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b6ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6b2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ba:	496c      	ldr	r1, [pc, #432]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d101      	bne.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d010      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800b6da:	4b64      	ldr	r3, [pc, #400]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b6dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6e0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6e8:	4960      	ldr	r1, [pc, #384]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d101      	bne.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 0304 	and.w	r3, r3, #4
 800b704:	2b00      	cmp	r3, #0
 800b706:	d017      	beq.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b708:	4b58      	ldr	r3, [pc, #352]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b70a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b70e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b716:	4955      	ldr	r1, [pc, #340]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b726:	d101      	bne.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800b728:	2301      	movs	r3, #1
 800b72a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800b734:	2301      	movs	r3, #1
 800b736:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f003 0308 	and.w	r3, r3, #8
 800b740:	2b00      	cmp	r3, #0
 800b742:	d017      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b744:	4b49      	ldr	r3, [pc, #292]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b74a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b752:	4946      	ldr	r1, [pc, #280]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b754:	4313      	orrs	r3, r2
 800b756:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b762:	d101      	bne.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800b764:	2301      	movs	r3, #1
 800b766:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800b770:	2301      	movs	r3, #1
 800b772:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f003 0320 	and.w	r3, r3, #32
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f000 808a 	beq.w	800b896 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b782:	2300      	movs	r3, #0
 800b784:	60bb      	str	r3, [r7, #8]
 800b786:	4b39      	ldr	r3, [pc, #228]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78a:	4a38      	ldr	r2, [pc, #224]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b78c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b790:	6413      	str	r3, [r2, #64]	; 0x40
 800b792:	4b36      	ldr	r3, [pc, #216]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b79a:	60bb      	str	r3, [r7, #8]
 800b79c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b79e:	4b34      	ldr	r3, [pc, #208]	; (800b870 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a33      	ldr	r2, [pc, #204]	; (800b870 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b7a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b7aa:	f7fb fa6d 	bl	8006c88 <HAL_GetTick>
 800b7ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b7b0:	e008      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b7b2:	f7fb fa69 	bl	8006c88 <HAL_GetTick>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d901      	bls.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	e278      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b7c4:	4b2a      	ldr	r3, [pc, #168]	; (800b870 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d0f0      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b7d0:	4b26      	ldr	r3, [pc, #152]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b7d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7d8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b7da:	6a3b      	ldr	r3, [r7, #32]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d02f      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7e8:	6a3a      	ldr	r2, [r7, #32]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d028      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b7ee:	4b1f      	ldr	r3, [pc, #124]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7f6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b7f8:	4b1e      	ldr	r3, [pc, #120]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b7fe:	4b1d      	ldr	r3, [pc, #116]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b800:	2200      	movs	r2, #0
 800b802:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b804:	4a19      	ldr	r2, [pc, #100]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b806:	6a3b      	ldr	r3, [r7, #32]
 800b808:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b80a:	4b18      	ldr	r3, [pc, #96]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b01      	cmp	r3, #1
 800b814:	d114      	bne.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b816:	f7fb fa37 	bl	8006c88 <HAL_GetTick>
 800b81a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b81c:	e00a      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b81e:	f7fb fa33 	bl	8006c88 <HAL_GetTick>
 800b822:	4602      	mov	r2, r0
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	1ad3      	subs	r3, r2, r3
 800b828:	f241 3288 	movw	r2, #5000	; 0x1388
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d901      	bls.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800b830:	2303      	movs	r3, #3
 800b832:	e240      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b834:	4b0d      	ldr	r3, [pc, #52]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b838:	f003 0302 	and.w	r3, r3, #2
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d0ee      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b84c:	d114      	bne.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800b84e:	4b07      	ldr	r3, [pc, #28]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b85a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b85e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b862:	4902      	ldr	r1, [pc, #8]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b864:	4313      	orrs	r3, r2
 800b866:	608b      	str	r3, [r1, #8]
 800b868:	e00c      	b.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800b86a:	bf00      	nop
 800b86c:	40023800 	.word	0x40023800
 800b870:	40007000 	.word	0x40007000
 800b874:	42470e40 	.word	0x42470e40
 800b878:	4b4a      	ldr	r3, [pc, #296]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	4a49      	ldr	r2, [pc, #292]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b87e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b882:	6093      	str	r3, [r2, #8]
 800b884:	4b47      	ldr	r3, [pc, #284]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b890:	4944      	ldr	r1, [pc, #272]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b892:	4313      	orrs	r3, r2
 800b894:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 0310 	and.w	r3, r3, #16
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d004      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800b8a8:	4b3f      	ldr	r3, [pc, #252]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800b8aa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00a      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800b8b8:	4b3a      	ldr	r3, [pc, #232]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8c6:	4937      	ldr	r1, [pc, #220]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00a      	beq.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b8da:	4b32      	ldr	r3, [pc, #200]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8e0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8e8:	492e      	ldr	r1, [pc, #184]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d011      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b8fc:	4b29      	ldr	r3, [pc, #164]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b902:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b90a:	4926      	ldr	r1, [pc, #152]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b90c:	4313      	orrs	r3, r2
 800b90e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b91a:	d101      	bne.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800b91c:	2301      	movs	r3, #1
 800b91e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00a      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b92c:	4b1d      	ldr	r3, [pc, #116]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b92e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b932:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b93a:	491a      	ldr	r1, [pc, #104]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b93c:	4313      	orrs	r3, r2
 800b93e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d011      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800b94e:	4b15      	ldr	r3, [pc, #84]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b954:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b95c:	4911      	ldr	r1, [pc, #68]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b95e:	4313      	orrs	r3, r2
 800b960:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b96c:	d101      	bne.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800b96e:	2301      	movs	r3, #1
 800b970:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b974:	2b01      	cmp	r3, #1
 800b976:	d005      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b980:	f040 80ff 	bne.w	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b984:	4b09      	ldr	r3, [pc, #36]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b986:	2200      	movs	r2, #0
 800b988:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b98a:	f7fb f97d 	bl	8006c88 <HAL_GetTick>
 800b98e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b990:	e00e      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b992:	f7fb f979 	bl	8006c88 <HAL_GetTick>
 800b996:	4602      	mov	r2, r0
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	d907      	bls.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e188      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b9a4:	40023800 	.word	0x40023800
 800b9a8:	424711e0 	.word	0x424711e0
 800b9ac:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b9b0:	4b7e      	ldr	r3, [pc, #504]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1ea      	bne.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d003      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d009      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d028      	beq.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d124      	bne.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b9e4:	4b71      	ldr	r3, [pc, #452]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b9e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9ea:	0c1b      	lsrs	r3, r3, #16
 800b9ec:	f003 0303 	and.w	r3, r3, #3
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	005b      	lsls	r3, r3, #1
 800b9f4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b9f6:	4b6d      	ldr	r3, [pc, #436]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b9f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9fc:	0e1b      	lsrs	r3, r3, #24
 800b9fe:	f003 030f 	and.w	r3, r3, #15
 800ba02:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685a      	ldr	r2, [r3, #4]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	019b      	lsls	r3, r3, #6
 800ba0e:	431a      	orrs	r2, r3
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	085b      	lsrs	r3, r3, #1
 800ba14:	3b01      	subs	r3, #1
 800ba16:	041b      	lsls	r3, r3, #16
 800ba18:	431a      	orrs	r2, r3
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	061b      	lsls	r3, r3, #24
 800ba1e:	431a      	orrs	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	695b      	ldr	r3, [r3, #20]
 800ba24:	071b      	lsls	r3, r3, #28
 800ba26:	4961      	ldr	r1, [pc, #388]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f003 0304 	and.w	r3, r3, #4
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d004      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba42:	d00a      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d035      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba58:	d130      	bne.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800ba5a:	4b54      	ldr	r3, [pc, #336]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba60:	0c1b      	lsrs	r3, r3, #16
 800ba62:	f003 0303 	and.w	r3, r3, #3
 800ba66:	3301      	adds	r3, #1
 800ba68:	005b      	lsls	r3, r3, #1
 800ba6a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ba6c:	4b4f      	ldr	r3, [pc, #316]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba72:	0f1b      	lsrs	r3, r3, #28
 800ba74:	f003 0307 	and.w	r3, r3, #7
 800ba78:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	019b      	lsls	r3, r3, #6
 800ba84:	431a      	orrs	r2, r3
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	085b      	lsrs	r3, r3, #1
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	041b      	lsls	r3, r3, #16
 800ba8e:	431a      	orrs	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	061b      	lsls	r3, r3, #24
 800ba96:	431a      	orrs	r2, r3
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	071b      	lsls	r3, r3, #28
 800ba9c:	4943      	ldr	r1, [pc, #268]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800baa4:	4b41      	ldr	r3, [pc, #260]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800baa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baaa:	f023 021f 	bic.w	r2, r3, #31
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab2:	3b01      	subs	r3, #1
 800bab4:	493d      	ldr	r1, [pc, #244]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bab6:	4313      	orrs	r3, r2
 800bab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d029      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bacc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bad0:	d124      	bne.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bad2:	4b36      	ldr	r3, [pc, #216]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bad8:	0c1b      	lsrs	r3, r3, #16
 800bada:	f003 0303 	and.w	r3, r3, #3
 800bade:	3301      	adds	r3, #1
 800bae0:	005b      	lsls	r3, r3, #1
 800bae2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bae4:	4b31      	ldr	r3, [pc, #196]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baea:	0f1b      	lsrs	r3, r3, #28
 800baec:	f003 0307 	and.w	r3, r3, #7
 800baf0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	019b      	lsls	r3, r3, #6
 800bafc:	431a      	orrs	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	085b      	lsrs	r3, r3, #1
 800bb04:	3b01      	subs	r3, #1
 800bb06:	041b      	lsls	r3, r3, #16
 800bb08:	431a      	orrs	r2, r3
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	061b      	lsls	r3, r3, #24
 800bb0e:	431a      	orrs	r2, r3
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	071b      	lsls	r3, r3, #28
 800bb14:	4925      	ldr	r1, [pc, #148]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bb16:	4313      	orrs	r3, r2
 800bb18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d016      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	019b      	lsls	r3, r3, #6
 800bb32:	431a      	orrs	r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	085b      	lsrs	r3, r3, #1
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	041b      	lsls	r3, r3, #16
 800bb3e:	431a      	orrs	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	061b      	lsls	r3, r3, #24
 800bb46:	431a      	orrs	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	695b      	ldr	r3, [r3, #20]
 800bb4c:	071b      	lsls	r3, r3, #28
 800bb4e:	4917      	ldr	r1, [pc, #92]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bb50:	4313      	orrs	r3, r2
 800bb52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bb56:	4b16      	ldr	r3, [pc, #88]	; (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800bb58:	2201      	movs	r2, #1
 800bb5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bb5c:	f7fb f894 	bl	8006c88 <HAL_GetTick>
 800bb60:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb62:	e008      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bb64:	f7fb f890 	bl	8006c88 <HAL_GetTick>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d901      	bls.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb72:	2303      	movs	r3, #3
 800bb74:	e09f      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb76:	4b0d      	ldr	r3, [pc, #52]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d0f0      	beq.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800bb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	f040 8095 	bne.w	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bb8a:	4b0a      	ldr	r3, [pc, #40]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bb90:	f7fb f87a 	bl	8006c88 <HAL_GetTick>
 800bb94:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bb96:	e00f      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bb98:	f7fb f876 	bl	8006c88 <HAL_GetTick>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d908      	bls.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bba6:	2303      	movs	r3, #3
 800bba8:	e085      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800bbaa:	bf00      	nop
 800bbac:	40023800 	.word	0x40023800
 800bbb0:	42470068 	.word	0x42470068
 800bbb4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bbb8:	4b41      	ldr	r3, [pc, #260]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbc4:	d0e8      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 0304 	and.w	r3, r3, #4
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x566>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d009      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d02b      	beq.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d127      	bne.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800bbee:	4b34      	ldr	r3, [pc, #208]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bbf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbf4:	0c1b      	lsrs	r3, r3, #16
 800bbf6:	f003 0303 	and.w	r3, r3, #3
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	005b      	lsls	r3, r3, #1
 800bbfe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	699a      	ldr	r2, [r3, #24]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	69db      	ldr	r3, [r3, #28]
 800bc08:	019b      	lsls	r3, r3, #6
 800bc0a:	431a      	orrs	r2, r3
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	085b      	lsrs	r3, r3, #1
 800bc10:	3b01      	subs	r3, #1
 800bc12:	041b      	lsls	r3, r3, #16
 800bc14:	431a      	orrs	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1a:	061b      	lsls	r3, r3, #24
 800bc1c:	4928      	ldr	r1, [pc, #160]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bc24:	4b26      	ldr	r3, [pc, #152]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc2a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc32:	3b01      	subs	r3, #1
 800bc34:	021b      	lsls	r3, r3, #8
 800bc36:	4922      	ldr	r1, [pc, #136]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d01d      	beq.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc52:	d118      	bne.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bc54:	4b1a      	ldr	r3, [pc, #104]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc5a:	0e1b      	lsrs	r3, r3, #24
 800bc5c:	f003 030f 	and.w	r3, r3, #15
 800bc60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	699a      	ldr	r2, [r3, #24]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	69db      	ldr	r3, [r3, #28]
 800bc6a:	019b      	lsls	r3, r3, #6
 800bc6c:	431a      	orrs	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	085b      	lsrs	r3, r3, #1
 800bc74:	3b01      	subs	r3, #1
 800bc76:	041b      	lsls	r3, r3, #16
 800bc78:	431a      	orrs	r2, r3
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	061b      	lsls	r3, r3, #24
 800bc7e:	4910      	ldr	r1, [pc, #64]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc80:	4313      	orrs	r3, r2
 800bc82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bc86:	4b0f      	ldr	r3, [pc, #60]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800bc88:	2201      	movs	r2, #1
 800bc8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bc8c:	f7fa fffc 	bl	8006c88 <HAL_GetTick>
 800bc90:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bc92:	e008      	b.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bc94:	f7fa fff8 	bl	8006c88 <HAL_GetTick>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d901      	bls.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bca2:	2303      	movs	r3, #3
 800bca4:	e007      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bca6:	4b06      	ldr	r3, [pc, #24]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb2:	d1ef      	bne.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3730      	adds	r7, #48	; 0x30
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	40023800 	.word	0x40023800
 800bcc4:	42470070 	.word	0x42470070

0800bcc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bcc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bccc:	b088      	sub	sp, #32
 800bcce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800bce0:	2300      	movs	r3, #0
 800bce2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bce4:	4bce      	ldr	r3, [pc, #824]	; (800c020 <HAL_RCC_GetSysClockFreq+0x358>)
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	f003 030c 	and.w	r3, r3, #12
 800bcec:	2b0c      	cmp	r3, #12
 800bcee:	f200 818d 	bhi.w	800c00c <HAL_RCC_GetSysClockFreq+0x344>
 800bcf2:	a201      	add	r2, pc, #4	; (adr r2, 800bcf8 <HAL_RCC_GetSysClockFreq+0x30>)
 800bcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf8:	0800bd2d 	.word	0x0800bd2d
 800bcfc:	0800c00d 	.word	0x0800c00d
 800bd00:	0800c00d 	.word	0x0800c00d
 800bd04:	0800c00d 	.word	0x0800c00d
 800bd08:	0800bd33 	.word	0x0800bd33
 800bd0c:	0800c00d 	.word	0x0800c00d
 800bd10:	0800c00d 	.word	0x0800c00d
 800bd14:	0800c00d 	.word	0x0800c00d
 800bd18:	0800bd39 	.word	0x0800bd39
 800bd1c:	0800c00d 	.word	0x0800c00d
 800bd20:	0800c00d 	.word	0x0800c00d
 800bd24:	0800c00d 	.word	0x0800c00d
 800bd28:	0800bead 	.word	0x0800bead
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bd2c:	4bbd      	ldr	r3, [pc, #756]	; (800c024 <HAL_RCC_GetSysClockFreq+0x35c>)
 800bd2e:	61bb      	str	r3, [r7, #24]
       break;
 800bd30:	e16f      	b.n	800c012 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bd32:	4bbd      	ldr	r3, [pc, #756]	; (800c028 <HAL_RCC_GetSysClockFreq+0x360>)
 800bd34:	61bb      	str	r3, [r7, #24]
      break;
 800bd36:	e16c      	b.n	800c012 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bd38:	4bb9      	ldr	r3, [pc, #740]	; (800c020 <HAL_RCC_GetSysClockFreq+0x358>)
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd40:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bd42:	4bb7      	ldr	r3, [pc, #732]	; (800c020 <HAL_RCC_GetSysClockFreq+0x358>)
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d053      	beq.n	800bdf6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd4e:	4bb4      	ldr	r3, [pc, #720]	; (800c020 <HAL_RCC_GetSysClockFreq+0x358>)
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	099b      	lsrs	r3, r3, #6
 800bd54:	461a      	mov	r2, r3
 800bd56:	f04f 0300 	mov.w	r3, #0
 800bd5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bd5e:	f04f 0100 	mov.w	r1, #0
 800bd62:	ea02 0400 	and.w	r4, r2, r0
 800bd66:	603c      	str	r4, [r7, #0]
 800bd68:	400b      	ands	r3, r1
 800bd6a:	607b      	str	r3, [r7, #4]
 800bd6c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bd70:	4620      	mov	r0, r4
 800bd72:	4629      	mov	r1, r5
 800bd74:	f04f 0200 	mov.w	r2, #0
 800bd78:	f04f 0300 	mov.w	r3, #0
 800bd7c:	014b      	lsls	r3, r1, #5
 800bd7e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bd82:	0142      	lsls	r2, r0, #5
 800bd84:	4610      	mov	r0, r2
 800bd86:	4619      	mov	r1, r3
 800bd88:	4623      	mov	r3, r4
 800bd8a:	1ac0      	subs	r0, r0, r3
 800bd8c:	462b      	mov	r3, r5
 800bd8e:	eb61 0103 	sbc.w	r1, r1, r3
 800bd92:	f04f 0200 	mov.w	r2, #0
 800bd96:	f04f 0300 	mov.w	r3, #0
 800bd9a:	018b      	lsls	r3, r1, #6
 800bd9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bda0:	0182      	lsls	r2, r0, #6
 800bda2:	1a12      	subs	r2, r2, r0
 800bda4:	eb63 0301 	sbc.w	r3, r3, r1
 800bda8:	f04f 0000 	mov.w	r0, #0
 800bdac:	f04f 0100 	mov.w	r1, #0
 800bdb0:	00d9      	lsls	r1, r3, #3
 800bdb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bdb6:	00d0      	lsls	r0, r2, #3
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	1852      	adds	r2, r2, r1
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	eb43 0101 	adc.w	r1, r3, r1
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	f04f 0000 	mov.w	r0, #0
 800bdcc:	f04f 0100 	mov.w	r1, #0
 800bdd0:	0259      	lsls	r1, r3, #9
 800bdd2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800bdd6:	0250      	lsls	r0, r2, #9
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4610      	mov	r0, r2
 800bdde:	4619      	mov	r1, r3
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	461a      	mov	r2, r3
 800bde4:	f04f 0300 	mov.w	r3, #0
 800bde8:	f7f4 fa62 	bl	80002b0 <__aeabi_uldivmod>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	61fb      	str	r3, [r7, #28]
 800bdf4:	e04c      	b.n	800be90 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bdf6:	4b8a      	ldr	r3, [pc, #552]	; (800c020 <HAL_RCC_GetSysClockFreq+0x358>)
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	099b      	lsrs	r3, r3, #6
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	f04f 0300 	mov.w	r3, #0
 800be02:	f240 10ff 	movw	r0, #511	; 0x1ff
 800be06:	f04f 0100 	mov.w	r1, #0
 800be0a:	ea02 0a00 	and.w	sl, r2, r0
 800be0e:	ea03 0b01 	and.w	fp, r3, r1
 800be12:	4650      	mov	r0, sl
 800be14:	4659      	mov	r1, fp
 800be16:	f04f 0200 	mov.w	r2, #0
 800be1a:	f04f 0300 	mov.w	r3, #0
 800be1e:	014b      	lsls	r3, r1, #5
 800be20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800be24:	0142      	lsls	r2, r0, #5
 800be26:	4610      	mov	r0, r2
 800be28:	4619      	mov	r1, r3
 800be2a:	ebb0 000a 	subs.w	r0, r0, sl
 800be2e:	eb61 010b 	sbc.w	r1, r1, fp
 800be32:	f04f 0200 	mov.w	r2, #0
 800be36:	f04f 0300 	mov.w	r3, #0
 800be3a:	018b      	lsls	r3, r1, #6
 800be3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800be40:	0182      	lsls	r2, r0, #6
 800be42:	1a12      	subs	r2, r2, r0
 800be44:	eb63 0301 	sbc.w	r3, r3, r1
 800be48:	f04f 0000 	mov.w	r0, #0
 800be4c:	f04f 0100 	mov.w	r1, #0
 800be50:	00d9      	lsls	r1, r3, #3
 800be52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800be56:	00d0      	lsls	r0, r2, #3
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	eb12 020a 	adds.w	r2, r2, sl
 800be60:	eb43 030b 	adc.w	r3, r3, fp
 800be64:	f04f 0000 	mov.w	r0, #0
 800be68:	f04f 0100 	mov.w	r1, #0
 800be6c:	0299      	lsls	r1, r3, #10
 800be6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800be72:	0290      	lsls	r0, r2, #10
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	4610      	mov	r0, r2
 800be7a:	4619      	mov	r1, r3
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	461a      	mov	r2, r3
 800be80:	f04f 0300 	mov.w	r3, #0
 800be84:	f7f4 fa14 	bl	80002b0 <__aeabi_uldivmod>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4613      	mov	r3, r2
 800be8e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800be90:	4b63      	ldr	r3, [pc, #396]	; (800c020 <HAL_RCC_GetSysClockFreq+0x358>)
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	0c1b      	lsrs	r3, r3, #16
 800be96:	f003 0303 	and.w	r3, r3, #3
 800be9a:	3301      	adds	r3, #1
 800be9c:	005b      	lsls	r3, r3, #1
 800be9e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800bea0:	69fa      	ldr	r2, [r7, #28]
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bea8:	61bb      	str	r3, [r7, #24]
      break;
 800beaa:	e0b2      	b.n	800c012 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800beac:	4b5c      	ldr	r3, [pc, #368]	; (800c020 <HAL_RCC_GetSysClockFreq+0x358>)
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800beb4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800beb6:	4b5a      	ldr	r3, [pc, #360]	; (800c020 <HAL_RCC_GetSysClockFreq+0x358>)
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d04d      	beq.n	800bf5e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bec2:	4b57      	ldr	r3, [pc, #348]	; (800c020 <HAL_RCC_GetSysClockFreq+0x358>)
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	099b      	lsrs	r3, r3, #6
 800bec8:	461a      	mov	r2, r3
 800beca:	f04f 0300 	mov.w	r3, #0
 800bece:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bed2:	f04f 0100 	mov.w	r1, #0
 800bed6:	ea02 0800 	and.w	r8, r2, r0
 800beda:	ea03 0901 	and.w	r9, r3, r1
 800bede:	4640      	mov	r0, r8
 800bee0:	4649      	mov	r1, r9
 800bee2:	f04f 0200 	mov.w	r2, #0
 800bee6:	f04f 0300 	mov.w	r3, #0
 800beea:	014b      	lsls	r3, r1, #5
 800beec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bef0:	0142      	lsls	r2, r0, #5
 800bef2:	4610      	mov	r0, r2
 800bef4:	4619      	mov	r1, r3
 800bef6:	ebb0 0008 	subs.w	r0, r0, r8
 800befa:	eb61 0109 	sbc.w	r1, r1, r9
 800befe:	f04f 0200 	mov.w	r2, #0
 800bf02:	f04f 0300 	mov.w	r3, #0
 800bf06:	018b      	lsls	r3, r1, #6
 800bf08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bf0c:	0182      	lsls	r2, r0, #6
 800bf0e:	1a12      	subs	r2, r2, r0
 800bf10:	eb63 0301 	sbc.w	r3, r3, r1
 800bf14:	f04f 0000 	mov.w	r0, #0
 800bf18:	f04f 0100 	mov.w	r1, #0
 800bf1c:	00d9      	lsls	r1, r3, #3
 800bf1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bf22:	00d0      	lsls	r0, r2, #3
 800bf24:	4602      	mov	r2, r0
 800bf26:	460b      	mov	r3, r1
 800bf28:	eb12 0208 	adds.w	r2, r2, r8
 800bf2c:	eb43 0309 	adc.w	r3, r3, r9
 800bf30:	f04f 0000 	mov.w	r0, #0
 800bf34:	f04f 0100 	mov.w	r1, #0
 800bf38:	0259      	lsls	r1, r3, #9
 800bf3a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800bf3e:	0250      	lsls	r0, r2, #9
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	4610      	mov	r0, r2
 800bf46:	4619      	mov	r1, r3
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	f04f 0300 	mov.w	r3, #0
 800bf50:	f7f4 f9ae 	bl	80002b0 <__aeabi_uldivmod>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	4613      	mov	r3, r2
 800bf5a:	61fb      	str	r3, [r7, #28]
 800bf5c:	e04a      	b.n	800bff4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf5e:	4b30      	ldr	r3, [pc, #192]	; (800c020 <HAL_RCC_GetSysClockFreq+0x358>)
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	099b      	lsrs	r3, r3, #6
 800bf64:	461a      	mov	r2, r3
 800bf66:	f04f 0300 	mov.w	r3, #0
 800bf6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bf6e:	f04f 0100 	mov.w	r1, #0
 800bf72:	ea02 0400 	and.w	r4, r2, r0
 800bf76:	ea03 0501 	and.w	r5, r3, r1
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	f04f 0200 	mov.w	r2, #0
 800bf82:	f04f 0300 	mov.w	r3, #0
 800bf86:	014b      	lsls	r3, r1, #5
 800bf88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bf8c:	0142      	lsls	r2, r0, #5
 800bf8e:	4610      	mov	r0, r2
 800bf90:	4619      	mov	r1, r3
 800bf92:	1b00      	subs	r0, r0, r4
 800bf94:	eb61 0105 	sbc.w	r1, r1, r5
 800bf98:	f04f 0200 	mov.w	r2, #0
 800bf9c:	f04f 0300 	mov.w	r3, #0
 800bfa0:	018b      	lsls	r3, r1, #6
 800bfa2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bfa6:	0182      	lsls	r2, r0, #6
 800bfa8:	1a12      	subs	r2, r2, r0
 800bfaa:	eb63 0301 	sbc.w	r3, r3, r1
 800bfae:	f04f 0000 	mov.w	r0, #0
 800bfb2:	f04f 0100 	mov.w	r1, #0
 800bfb6:	00d9      	lsls	r1, r3, #3
 800bfb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bfbc:	00d0      	lsls	r0, r2, #3
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	1912      	adds	r2, r2, r4
 800bfc4:	eb45 0303 	adc.w	r3, r5, r3
 800bfc8:	f04f 0000 	mov.w	r0, #0
 800bfcc:	f04f 0100 	mov.w	r1, #0
 800bfd0:	0299      	lsls	r1, r3, #10
 800bfd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bfd6:	0290      	lsls	r0, r2, #10
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	4610      	mov	r0, r2
 800bfde:	4619      	mov	r1, r3
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	f04f 0300 	mov.w	r3, #0
 800bfe8:	f7f4 f962 	bl	80002b0 <__aeabi_uldivmod>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	4613      	mov	r3, r2
 800bff2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800bff4:	4b0a      	ldr	r3, [pc, #40]	; (800c020 <HAL_RCC_GetSysClockFreq+0x358>)
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	0f1b      	lsrs	r3, r3, #28
 800bffa:	f003 0307 	and.w	r3, r3, #7
 800bffe:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800c000:	69fa      	ldr	r2, [r7, #28]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	fbb2 f3f3 	udiv	r3, r2, r3
 800c008:	61bb      	str	r3, [r7, #24]
      break;
 800c00a:	e002      	b.n	800c012 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c00c:	4b05      	ldr	r3, [pc, #20]	; (800c024 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c00e:	61bb      	str	r3, [r7, #24]
      break;
 800c010:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c012:	69bb      	ldr	r3, [r7, #24]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3720      	adds	r7, #32
 800c018:	46bd      	mov	sp, r7
 800c01a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c01e:	bf00      	nop
 800c020:	40023800 	.word	0x40023800
 800c024:	00f42400 	.word	0x00f42400
 800c028:	007a1200 	.word	0x007a1200

0800c02c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b086      	sub	sp, #24
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d101      	bne.n	800c03e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c03a:	2301      	movs	r3, #1
 800c03c:	e28d      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	2b00      	cmp	r3, #0
 800c048:	f000 8083 	beq.w	800c152 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c04c:	4b94      	ldr	r3, [pc, #592]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	f003 030c 	and.w	r3, r3, #12
 800c054:	2b04      	cmp	r3, #4
 800c056:	d019      	beq.n	800c08c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c058:	4b91      	ldr	r3, [pc, #580]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c060:	2b08      	cmp	r3, #8
 800c062:	d106      	bne.n	800c072 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c064:	4b8e      	ldr	r3, [pc, #568]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c06c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c070:	d00c      	beq.n	800c08c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c072:	4b8b      	ldr	r3, [pc, #556]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c07a:	2b0c      	cmp	r3, #12
 800c07c:	d112      	bne.n	800c0a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c07e:	4b88      	ldr	r3, [pc, #544]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c08a:	d10b      	bne.n	800c0a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c08c:	4b84      	ldr	r3, [pc, #528]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c094:	2b00      	cmp	r3, #0
 800c096:	d05b      	beq.n	800c150 <HAL_RCC_OscConfig+0x124>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d157      	bne.n	800c150 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e25a      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0ac:	d106      	bne.n	800c0bc <HAL_RCC_OscConfig+0x90>
 800c0ae:	4b7c      	ldr	r3, [pc, #496]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a7b      	ldr	r2, [pc, #492]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c0b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0b8:	6013      	str	r3, [r2, #0]
 800c0ba:	e01d      	b.n	800c0f8 <HAL_RCC_OscConfig+0xcc>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0c4:	d10c      	bne.n	800c0e0 <HAL_RCC_OscConfig+0xb4>
 800c0c6:	4b76      	ldr	r3, [pc, #472]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a75      	ldr	r2, [pc, #468]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c0cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c0d0:	6013      	str	r3, [r2, #0]
 800c0d2:	4b73      	ldr	r3, [pc, #460]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a72      	ldr	r2, [pc, #456]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c0d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0dc:	6013      	str	r3, [r2, #0]
 800c0de:	e00b      	b.n	800c0f8 <HAL_RCC_OscConfig+0xcc>
 800c0e0:	4b6f      	ldr	r3, [pc, #444]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a6e      	ldr	r2, [pc, #440]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c0e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0ea:	6013      	str	r3, [r2, #0]
 800c0ec:	4b6c      	ldr	r3, [pc, #432]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a6b      	ldr	r2, [pc, #428]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c0f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c0f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d013      	beq.n	800c128 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c100:	f7fa fdc2 	bl	8006c88 <HAL_GetTick>
 800c104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c106:	e008      	b.n	800c11a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c108:	f7fa fdbe 	bl	8006c88 <HAL_GetTick>
 800c10c:	4602      	mov	r2, r0
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	2b64      	cmp	r3, #100	; 0x64
 800c114:	d901      	bls.n	800c11a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c116:	2303      	movs	r3, #3
 800c118:	e21f      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c11a:	4b61      	ldr	r3, [pc, #388]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c122:	2b00      	cmp	r3, #0
 800c124:	d0f0      	beq.n	800c108 <HAL_RCC_OscConfig+0xdc>
 800c126:	e014      	b.n	800c152 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c128:	f7fa fdae 	bl	8006c88 <HAL_GetTick>
 800c12c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c12e:	e008      	b.n	800c142 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c130:	f7fa fdaa 	bl	8006c88 <HAL_GetTick>
 800c134:	4602      	mov	r2, r0
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	2b64      	cmp	r3, #100	; 0x64
 800c13c:	d901      	bls.n	800c142 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c13e:	2303      	movs	r3, #3
 800c140:	e20b      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c142:	4b57      	ldr	r3, [pc, #348]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1f0      	bne.n	800c130 <HAL_RCC_OscConfig+0x104>
 800c14e:	e000      	b.n	800c152 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f003 0302 	and.w	r3, r3, #2
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d06f      	beq.n	800c23e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c15e:	4b50      	ldr	r3, [pc, #320]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	f003 030c 	and.w	r3, r3, #12
 800c166:	2b00      	cmp	r3, #0
 800c168:	d017      	beq.n	800c19a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c16a:	4b4d      	ldr	r3, [pc, #308]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c172:	2b08      	cmp	r3, #8
 800c174:	d105      	bne.n	800c182 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c176:	4b4a      	ldr	r3, [pc, #296]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d00b      	beq.n	800c19a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c182:	4b47      	ldr	r3, [pc, #284]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c18a:	2b0c      	cmp	r3, #12
 800c18c:	d11c      	bne.n	800c1c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c18e:	4b44      	ldr	r3, [pc, #272]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c196:	2b00      	cmp	r3, #0
 800c198:	d116      	bne.n	800c1c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c19a:	4b41      	ldr	r3, [pc, #260]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 0302 	and.w	r3, r3, #2
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d005      	beq.n	800c1b2 <HAL_RCC_OscConfig+0x186>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d001      	beq.n	800c1b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e1d3      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1b2:	4b3b      	ldr	r3, [pc, #236]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	00db      	lsls	r3, r3, #3
 800c1c0:	4937      	ldr	r1, [pc, #220]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c1c6:	e03a      	b.n	800c23e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d020      	beq.n	800c212 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c1d0:	4b34      	ldr	r3, [pc, #208]	; (800c2a4 <HAL_RCC_OscConfig+0x278>)
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1d6:	f7fa fd57 	bl	8006c88 <HAL_GetTick>
 800c1da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1dc:	e008      	b.n	800c1f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c1de:	f7fa fd53 	bl	8006c88 <HAL_GetTick>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d901      	bls.n	800c1f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e1b4      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1f0:	4b2b      	ldr	r3, [pc, #172]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 0302 	and.w	r3, r3, #2
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d0f0      	beq.n	800c1de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1fc:	4b28      	ldr	r3, [pc, #160]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	00db      	lsls	r3, r3, #3
 800c20a:	4925      	ldr	r1, [pc, #148]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c20c:	4313      	orrs	r3, r2
 800c20e:	600b      	str	r3, [r1, #0]
 800c210:	e015      	b.n	800c23e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c212:	4b24      	ldr	r3, [pc, #144]	; (800c2a4 <HAL_RCC_OscConfig+0x278>)
 800c214:	2200      	movs	r2, #0
 800c216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c218:	f7fa fd36 	bl	8006c88 <HAL_GetTick>
 800c21c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c21e:	e008      	b.n	800c232 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c220:	f7fa fd32 	bl	8006c88 <HAL_GetTick>
 800c224:	4602      	mov	r2, r0
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d901      	bls.n	800c232 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	e193      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c232:	4b1b      	ldr	r3, [pc, #108]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f003 0302 	and.w	r3, r3, #2
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1f0      	bne.n	800c220 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f003 0308 	and.w	r3, r3, #8
 800c246:	2b00      	cmp	r3, #0
 800c248:	d036      	beq.n	800c2b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	695b      	ldr	r3, [r3, #20]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d016      	beq.n	800c280 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c252:	4b15      	ldr	r3, [pc, #84]	; (800c2a8 <HAL_RCC_OscConfig+0x27c>)
 800c254:	2201      	movs	r2, #1
 800c256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c258:	f7fa fd16 	bl	8006c88 <HAL_GetTick>
 800c25c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c25e:	e008      	b.n	800c272 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c260:	f7fa fd12 	bl	8006c88 <HAL_GetTick>
 800c264:	4602      	mov	r2, r0
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	2b02      	cmp	r3, #2
 800c26c:	d901      	bls.n	800c272 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c26e:	2303      	movs	r3, #3
 800c270:	e173      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c272:	4b0b      	ldr	r3, [pc, #44]	; (800c2a0 <HAL_RCC_OscConfig+0x274>)
 800c274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c276:	f003 0302 	and.w	r3, r3, #2
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d0f0      	beq.n	800c260 <HAL_RCC_OscConfig+0x234>
 800c27e:	e01b      	b.n	800c2b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c280:	4b09      	ldr	r3, [pc, #36]	; (800c2a8 <HAL_RCC_OscConfig+0x27c>)
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c286:	f7fa fcff 	bl	8006c88 <HAL_GetTick>
 800c28a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c28c:	e00e      	b.n	800c2ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c28e:	f7fa fcfb 	bl	8006c88 <HAL_GetTick>
 800c292:	4602      	mov	r2, r0
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	1ad3      	subs	r3, r2, r3
 800c298:	2b02      	cmp	r3, #2
 800c29a:	d907      	bls.n	800c2ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c29c:	2303      	movs	r3, #3
 800c29e:	e15c      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
 800c2a0:	40023800 	.word	0x40023800
 800c2a4:	42470000 	.word	0x42470000
 800c2a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c2ac:	4b8a      	ldr	r3, [pc, #552]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c2ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2b0:	f003 0302 	and.w	r3, r3, #2
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1ea      	bne.n	800c28e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 0304 	and.w	r3, r3, #4
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f000 8097 	beq.w	800c3f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c2ca:	4b83      	ldr	r3, [pc, #524]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10f      	bne.n	800c2f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60bb      	str	r3, [r7, #8]
 800c2da:	4b7f      	ldr	r3, [pc, #508]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2de:	4a7e      	ldr	r2, [pc, #504]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c2e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2e4:	6413      	str	r3, [r2, #64]	; 0x40
 800c2e6:	4b7c      	ldr	r3, [pc, #496]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2ee:	60bb      	str	r3, [r7, #8]
 800c2f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c2f6:	4b79      	ldr	r3, [pc, #484]	; (800c4dc <HAL_RCC_OscConfig+0x4b0>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d118      	bne.n	800c334 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c302:	4b76      	ldr	r3, [pc, #472]	; (800c4dc <HAL_RCC_OscConfig+0x4b0>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a75      	ldr	r2, [pc, #468]	; (800c4dc <HAL_RCC_OscConfig+0x4b0>)
 800c308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c30c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c30e:	f7fa fcbb 	bl	8006c88 <HAL_GetTick>
 800c312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c314:	e008      	b.n	800c328 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c316:	f7fa fcb7 	bl	8006c88 <HAL_GetTick>
 800c31a:	4602      	mov	r2, r0
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	2b02      	cmp	r3, #2
 800c322:	d901      	bls.n	800c328 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800c324:	2303      	movs	r3, #3
 800c326:	e118      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c328:	4b6c      	ldr	r3, [pc, #432]	; (800c4dc <HAL_RCC_OscConfig+0x4b0>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c330:	2b00      	cmp	r3, #0
 800c332:	d0f0      	beq.n	800c316 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d106      	bne.n	800c34a <HAL_RCC_OscConfig+0x31e>
 800c33c:	4b66      	ldr	r3, [pc, #408]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c33e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c340:	4a65      	ldr	r2, [pc, #404]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c342:	f043 0301 	orr.w	r3, r3, #1
 800c346:	6713      	str	r3, [r2, #112]	; 0x70
 800c348:	e01c      	b.n	800c384 <HAL_RCC_OscConfig+0x358>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	2b05      	cmp	r3, #5
 800c350:	d10c      	bne.n	800c36c <HAL_RCC_OscConfig+0x340>
 800c352:	4b61      	ldr	r3, [pc, #388]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c356:	4a60      	ldr	r2, [pc, #384]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c358:	f043 0304 	orr.w	r3, r3, #4
 800c35c:	6713      	str	r3, [r2, #112]	; 0x70
 800c35e:	4b5e      	ldr	r3, [pc, #376]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c362:	4a5d      	ldr	r2, [pc, #372]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c364:	f043 0301 	orr.w	r3, r3, #1
 800c368:	6713      	str	r3, [r2, #112]	; 0x70
 800c36a:	e00b      	b.n	800c384 <HAL_RCC_OscConfig+0x358>
 800c36c:	4b5a      	ldr	r3, [pc, #360]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c36e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c370:	4a59      	ldr	r2, [pc, #356]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c372:	f023 0301 	bic.w	r3, r3, #1
 800c376:	6713      	str	r3, [r2, #112]	; 0x70
 800c378:	4b57      	ldr	r3, [pc, #348]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c37c:	4a56      	ldr	r2, [pc, #344]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c37e:	f023 0304 	bic.w	r3, r3, #4
 800c382:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	689b      	ldr	r3, [r3, #8]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d015      	beq.n	800c3b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c38c:	f7fa fc7c 	bl	8006c88 <HAL_GetTick>
 800c390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c392:	e00a      	b.n	800c3aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c394:	f7fa fc78 	bl	8006c88 <HAL_GetTick>
 800c398:	4602      	mov	r2, r0
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d901      	bls.n	800c3aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e0d7      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3aa:	4b4b      	ldr	r3, [pc, #300]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ae:	f003 0302 	and.w	r3, r3, #2
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d0ee      	beq.n	800c394 <HAL_RCC_OscConfig+0x368>
 800c3b6:	e014      	b.n	800c3e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3b8:	f7fa fc66 	bl	8006c88 <HAL_GetTick>
 800c3bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c3be:	e00a      	b.n	800c3d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c3c0:	f7fa fc62 	bl	8006c88 <HAL_GetTick>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d901      	bls.n	800c3d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c3d2:	2303      	movs	r3, #3
 800c3d4:	e0c1      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c3d6:	4b40      	ldr	r3, [pc, #256]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3da:	f003 0302 	and.w	r3, r3, #2
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1ee      	bne.n	800c3c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d105      	bne.n	800c3f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c3e8:	4b3b      	ldr	r3, [pc, #236]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ec:	4a3a      	ldr	r2, [pc, #232]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c3ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f000 80ad 	beq.w	800c558 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c3fe:	4b36      	ldr	r3, [pc, #216]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	f003 030c 	and.w	r3, r3, #12
 800c406:	2b08      	cmp	r3, #8
 800c408:	d060      	beq.n	800c4cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	699b      	ldr	r3, [r3, #24]
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d145      	bne.n	800c49e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c412:	4b33      	ldr	r3, [pc, #204]	; (800c4e0 <HAL_RCC_OscConfig+0x4b4>)
 800c414:	2200      	movs	r2, #0
 800c416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c418:	f7fa fc36 	bl	8006c88 <HAL_GetTick>
 800c41c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c41e:	e008      	b.n	800c432 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c420:	f7fa fc32 	bl	8006c88 <HAL_GetTick>
 800c424:	4602      	mov	r2, r0
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d901      	bls.n	800c432 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800c42e:	2303      	movs	r3, #3
 800c430:	e093      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c432:	4b29      	ldr	r3, [pc, #164]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1f0      	bne.n	800c420 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	69da      	ldr	r2, [r3, #28]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	431a      	orrs	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c44c:	019b      	lsls	r3, r3, #6
 800c44e:	431a      	orrs	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c454:	085b      	lsrs	r3, r3, #1
 800c456:	3b01      	subs	r3, #1
 800c458:	041b      	lsls	r3, r3, #16
 800c45a:	431a      	orrs	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c460:	061b      	lsls	r3, r3, #24
 800c462:	431a      	orrs	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c468:	071b      	lsls	r3, r3, #28
 800c46a:	491b      	ldr	r1, [pc, #108]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c46c:	4313      	orrs	r3, r2
 800c46e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c470:	4b1b      	ldr	r3, [pc, #108]	; (800c4e0 <HAL_RCC_OscConfig+0x4b4>)
 800c472:	2201      	movs	r2, #1
 800c474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c476:	f7fa fc07 	bl	8006c88 <HAL_GetTick>
 800c47a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c47c:	e008      	b.n	800c490 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c47e:	f7fa fc03 	bl	8006c88 <HAL_GetTick>
 800c482:	4602      	mov	r2, r0
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	1ad3      	subs	r3, r2, r3
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d901      	bls.n	800c490 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800c48c:	2303      	movs	r3, #3
 800c48e:	e064      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c490:	4b11      	ldr	r3, [pc, #68]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d0f0      	beq.n	800c47e <HAL_RCC_OscConfig+0x452>
 800c49c:	e05c      	b.n	800c558 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c49e:	4b10      	ldr	r3, [pc, #64]	; (800c4e0 <HAL_RCC_OscConfig+0x4b4>)
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4a4:	f7fa fbf0 	bl	8006c88 <HAL_GetTick>
 800c4a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4aa:	e008      	b.n	800c4be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c4ac:	f7fa fbec 	bl	8006c88 <HAL_GetTick>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	d901      	bls.n	800c4be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800c4ba:	2303      	movs	r3, #3
 800c4bc:	e04d      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4be:	4b06      	ldr	r3, [pc, #24]	; (800c4d8 <HAL_RCC_OscConfig+0x4ac>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1f0      	bne.n	800c4ac <HAL_RCC_OscConfig+0x480>
 800c4ca:	e045      	b.n	800c558 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	699b      	ldr	r3, [r3, #24]
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d107      	bne.n	800c4e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e040      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
 800c4d8:	40023800 	.word	0x40023800
 800c4dc:	40007000 	.word	0x40007000
 800c4e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c4e4:	4b1f      	ldr	r3, [pc, #124]	; (800c564 <HAL_RCC_OscConfig+0x538>)
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	699b      	ldr	r3, [r3, #24]
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d030      	beq.n	800c554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d129      	bne.n	800c554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d122      	bne.n	800c554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c514:	4013      	ands	r3, r2
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c51a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d119      	bne.n	800c554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c52a:	085b      	lsrs	r3, r3, #1
 800c52c:	3b01      	subs	r3, #1
 800c52e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c530:	429a      	cmp	r2, r3
 800c532:	d10f      	bne.n	800c554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c540:	429a      	cmp	r2, r3
 800c542:	d107      	bne.n	800c554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c54e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c550:	429a      	cmp	r2, r3
 800c552:	d001      	beq.n	800c558 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800c554:	2301      	movs	r3, #1
 800c556:	e000      	b.n	800c55a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3718      	adds	r7, #24
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	40023800 	.word	0x40023800

0800c568 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d101      	bne.n	800c57a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	e083      	b.n	800c682 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	7f5b      	ldrb	r3, [r3, #29]
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	2b00      	cmp	r3, #0
 800c582:	d105      	bne.n	800c590 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7fa f8dc 	bl	8006748 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2202      	movs	r2, #2
 800c594:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	22ca      	movs	r2, #202	; 0xca
 800c59c:	625a      	str	r2, [r3, #36]	; 0x24
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2253      	movs	r2, #83	; 0x53
 800c5a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 faa8 	bl	800cafc <RTC_EnterInitMode>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d008      	beq.n	800c5c4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	22ff      	movs	r2, #255	; 0xff
 800c5b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2204      	movs	r2, #4
 800c5be:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e05e      	b.n	800c682 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	6812      	ldr	r2, [r2, #0]
 800c5ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5d6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6899      	ldr	r1, [r3, #8]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	685a      	ldr	r2, [r3, #4]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	695b      	ldr	r3, [r3, #20]
 800c5ec:	431a      	orrs	r2, r3
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	68d2      	ldr	r2, [r2, #12]
 800c5fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	6919      	ldr	r1, [r3, #16]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	041a      	lsls	r2, r3, #16
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	430a      	orrs	r2, r1
 800c612:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	68da      	ldr	r2, [r3, #12]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c622:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	f003 0320 	and.w	r3, r3, #32
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10e      	bne.n	800c650 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fa3a 	bl	800caac <HAL_RTC_WaitForSynchro>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d008      	beq.n	800c650 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	22ff      	movs	r2, #255	; 0xff
 800c644:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2204      	movs	r2, #4
 800c64a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c64c:	2301      	movs	r3, #1
 800c64e:	e018      	b.n	800c682 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c65e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	699a      	ldr	r2, [r3, #24]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	430a      	orrs	r2, r1
 800c670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	22ff      	movs	r2, #255	; 0xff
 800c678:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c680:	2300      	movs	r3, #0
  }
}
 800c682:	4618      	mov	r0, r3
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c68a:	b590      	push	{r4, r7, lr}
 800c68c:	b087      	sub	sp, #28
 800c68e:	af00      	add	r7, sp, #0
 800c690:	60f8      	str	r0, [r7, #12]
 800c692:	60b9      	str	r1, [r7, #8]
 800c694:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c696:	2300      	movs	r3, #0
 800c698:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	7f1b      	ldrb	r3, [r3, #28]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d101      	bne.n	800c6a6 <HAL_RTC_SetTime+0x1c>
 800c6a2:	2302      	movs	r3, #2
 800c6a4:	e0aa      	b.n	800c7fc <HAL_RTC_SetTime+0x172>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d126      	bne.n	800c706 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d102      	bne.n	800c6cc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 fa3f 	bl	800cb54 <RTC_ByteToBcd2>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	785b      	ldrb	r3, [r3, #1]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 fa38 	bl	800cb54 <RTC_ByteToBcd2>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c6e8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	789b      	ldrb	r3, [r3, #2]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f000 fa30 	bl	800cb54 <RTC_ByteToBcd2>
 800c6f4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c6f6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	78db      	ldrb	r3, [r3, #3]
 800c6fe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c700:	4313      	orrs	r3, r2
 800c702:	617b      	str	r3, [r7, #20]
 800c704:	e018      	b.n	800c738 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c710:	2b00      	cmp	r3, #0
 800c712:	d102      	bne.n	800c71a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	2200      	movs	r2, #0
 800c718:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	785b      	ldrb	r3, [r3, #1]
 800c724:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c726:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c72c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	78db      	ldrb	r3, [r3, #3]
 800c732:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c734:	4313      	orrs	r3, r2
 800c736:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	22ca      	movs	r2, #202	; 0xca
 800c73e:	625a      	str	r2, [r3, #36]	; 0x24
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2253      	movs	r2, #83	; 0x53
 800c746:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f000 f9d7 	bl	800cafc <RTC_EnterInitMode>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00b      	beq.n	800c76c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	22ff      	movs	r2, #255	; 0xff
 800c75a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2204      	movs	r2, #4
 800c760:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c768:	2301      	movs	r3, #1
 800c76a:	e047      	b.n	800c7fc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c776:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c77a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689a      	ldr	r2, [r3, #8]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c78a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	6899      	ldr	r1, [r3, #8]
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	68da      	ldr	r2, [r3, #12]
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	691b      	ldr	r3, [r3, #16]
 800c79a:	431a      	orrs	r2, r3
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	430a      	orrs	r2, r1
 800c7a2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68da      	ldr	r2, [r3, #12]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	f003 0320 	and.w	r3, r3, #32
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d111      	bne.n	800c7e6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f000 f972 	bl	800caac <HAL_RTC_WaitForSynchro>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00b      	beq.n	800c7e6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	22ff      	movs	r2, #255	; 0xff
 800c7d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2204      	movs	r2, #4
 800c7da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e00a      	b.n	800c7fc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	22ff      	movs	r2, #255	; 0xff
 800c7ec:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c7fa:	2300      	movs	r3, #0
  }
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	371c      	adds	r7, #28
 800c800:	46bd      	mov	sp, r7
 800c802:	bd90      	pop	{r4, r7, pc}

0800c804 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b086      	sub	sp, #24
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c810:	2300      	movs	r3, #0
 800c812:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c836:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c83a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	0c1b      	lsrs	r3, r3, #16
 800c840:	b2db      	uxtb	r3, r3
 800c842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c846:	b2da      	uxtb	r2, r3
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	0a1b      	lsrs	r3, r3, #8
 800c850:	b2db      	uxtb	r3, r3
 800c852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c856:	b2da      	uxtb	r2, r3
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c864:	b2da      	uxtb	r2, r3
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	0c1b      	lsrs	r3, r3, #16
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c874:	b2da      	uxtb	r2, r3
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d11a      	bne.n	800c8b6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	4618      	mov	r0, r3
 800c886:	f000 f983 	bl	800cb90 <RTC_Bcd2ToByte>
 800c88a:	4603      	mov	r3, r0
 800c88c:	461a      	mov	r2, r3
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	785b      	ldrb	r3, [r3, #1]
 800c896:	4618      	mov	r0, r3
 800c898:	f000 f97a 	bl	800cb90 <RTC_Bcd2ToByte>
 800c89c:	4603      	mov	r3, r0
 800c89e:	461a      	mov	r2, r3
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	789b      	ldrb	r3, [r3, #2]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f000 f971 	bl	800cb90 <RTC_Bcd2ToByte>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c8b6:	2300      	movs	r3, #0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3718      	adds	r7, #24
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c8c0:	b590      	push	{r4, r7, lr}
 800c8c2:	b087      	sub	sp, #28
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	7f1b      	ldrb	r3, [r3, #28]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d101      	bne.n	800c8dc <HAL_RTC_SetDate+0x1c>
 800c8d8:	2302      	movs	r3, #2
 800c8da:	e094      	b.n	800ca06 <HAL_RTC_SetDate+0x146>
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2202      	movs	r2, #2
 800c8e6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d10e      	bne.n	800c90c <HAL_RTC_SetDate+0x4c>
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	785b      	ldrb	r3, [r3, #1]
 800c8f2:	f003 0310 	and.w	r3, r3, #16
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d008      	beq.n	800c90c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	785b      	ldrb	r3, [r3, #1]
 800c8fe:	f023 0310 	bic.w	r3, r3, #16
 800c902:	b2db      	uxtb	r3, r3
 800c904:	330a      	adds	r3, #10
 800c906:	b2da      	uxtb	r2, r3
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d11c      	bne.n	800c94c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	78db      	ldrb	r3, [r3, #3]
 800c916:	4618      	mov	r0, r3
 800c918:	f000 f91c 	bl	800cb54 <RTC_ByteToBcd2>
 800c91c:	4603      	mov	r3, r0
 800c91e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	785b      	ldrb	r3, [r3, #1]
 800c924:	4618      	mov	r0, r3
 800c926:	f000 f915 	bl	800cb54 <RTC_ByteToBcd2>
 800c92a:	4603      	mov	r3, r0
 800c92c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c92e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	789b      	ldrb	r3, [r3, #2]
 800c934:	4618      	mov	r0, r3
 800c936:	f000 f90d 	bl	800cb54 <RTC_ByteToBcd2>
 800c93a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c93c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c946:	4313      	orrs	r3, r2
 800c948:	617b      	str	r3, [r7, #20]
 800c94a:	e00e      	b.n	800c96a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	78db      	ldrb	r3, [r3, #3]
 800c950:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	785b      	ldrb	r3, [r3, #1]
 800c956:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c958:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c95a:	68ba      	ldr	r2, [r7, #8]
 800c95c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c95e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c966:	4313      	orrs	r3, r2
 800c968:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	22ca      	movs	r2, #202	; 0xca
 800c970:	625a      	str	r2, [r3, #36]	; 0x24
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2253      	movs	r2, #83	; 0x53
 800c978:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f000 f8be 	bl	800cafc <RTC_EnterInitMode>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00b      	beq.n	800c99e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	22ff      	movs	r2, #255	; 0xff
 800c98c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2204      	movs	r2, #4
 800c992:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2200      	movs	r2, #0
 800c998:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c99a:	2301      	movs	r3, #1
 800c99c:	e033      	b.n	800ca06 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c9a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c9ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68da      	ldr	r2, [r3, #12]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	f003 0320 	and.w	r3, r3, #32
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d111      	bne.n	800c9f0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f000 f86d 	bl	800caac <HAL_RTC_WaitForSynchro>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00b      	beq.n	800c9f0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	22ff      	movs	r2, #255	; 0xff
 800c9de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2204      	movs	r2, #4
 800c9e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e00a      	b.n	800ca06 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	22ff      	movs	r2, #255	; 0xff
 800c9f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2200      	movs	r2, #0
 800ca02:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800ca04:	2300      	movs	r3, #0
  }
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	371c      	adds	r7, #28
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd90      	pop	{r4, r7, pc}

0800ca0e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b086      	sub	sp, #24
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	60f8      	str	r0, [r7, #12]
 800ca16:	60b9      	str	r1, [r7, #8]
 800ca18:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ca28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ca2c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	0c1b      	lsrs	r3, r3, #16
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	0a1b      	lsrs	r3, r3, #8
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	f003 031f 	and.w	r3, r3, #31
 800ca42:	b2da      	uxtb	r2, r3
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	0b5b      	lsrs	r3, r3, #13
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	f003 0307 	and.w	r3, r3, #7
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d11a      	bne.n	800caa2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	78db      	ldrb	r3, [r3, #3]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f000 f88d 	bl	800cb90 <RTC_Bcd2ToByte>
 800ca76:	4603      	mov	r3, r0
 800ca78:	461a      	mov	r2, r3
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	785b      	ldrb	r3, [r3, #1]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f000 f884 	bl	800cb90 <RTC_Bcd2ToByte>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	789b      	ldrb	r3, [r3, #2]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f000 f87b 	bl	800cb90 <RTC_Bcd2ToByte>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3718      	adds	r7, #24
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cab4:	2300      	movs	r3, #0
 800cab6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68da      	ldr	r2, [r3, #12]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cac6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cac8:	f7fa f8de 	bl	8006c88 <HAL_GetTick>
 800cacc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cace:	e009      	b.n	800cae4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cad0:	f7fa f8da 	bl	8006c88 <HAL_GetTick>
 800cad4:	4602      	mov	r2, r0
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	1ad3      	subs	r3, r2, r3
 800cada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cade:	d901      	bls.n	800cae4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cae0:	2303      	movs	r3, #3
 800cae2:	e007      	b.n	800caf4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	f003 0320 	and.w	r3, r3, #32
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d0ee      	beq.n	800cad0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800caf2:	2300      	movs	r3, #0
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb04:	2300      	movs	r3, #0
 800cb06:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d119      	bne.n	800cb4a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb1e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb20:	f7fa f8b2 	bl	8006c88 <HAL_GetTick>
 800cb24:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cb26:	e009      	b.n	800cb3c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cb28:	f7fa f8ae 	bl	8006c88 <HAL_GetTick>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	1ad3      	subs	r3, r2, r3
 800cb32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb36:	d901      	bls.n	800cb3c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800cb38:	2303      	movs	r3, #3
 800cb3a:	e007      	b.n	800cb4c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d0ee      	beq.n	800cb28 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3710      	adds	r7, #16
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800cb62:	e005      	b.n	800cb70 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	3301      	adds	r3, #1
 800cb68:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800cb6a:	79fb      	ldrb	r3, [r7, #7]
 800cb6c:	3b0a      	subs	r3, #10
 800cb6e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800cb70:	79fb      	ldrb	r3, [r7, #7]
 800cb72:	2b09      	cmp	r3, #9
 800cb74:	d8f6      	bhi.n	800cb64 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	011b      	lsls	r3, r3, #4
 800cb7c:	b2da      	uxtb	r2, r3
 800cb7e:	79fb      	ldrb	r3, [r7, #7]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	b2db      	uxtb	r3, r3
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	091b      	lsrs	r3, r3, #4
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	461a      	mov	r2, r3
 800cba6:	4613      	mov	r3, r2
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	4413      	add	r3, r2
 800cbac:	005b      	lsls	r3, r3, #1
 800cbae:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800cbb0:	79fb      	ldrb	r3, [r7, #7]
 800cbb2:	f003 030f 	and.w	r3, r3, #15
 800cbb6:	b2da      	uxtb	r2, r3
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	4413      	add	r3, r2
 800cbbe:	b2db      	uxtb	r3, r3
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b087      	sub	sp, #28
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	3350      	adds	r3, #80	; 0x50
 800cbe2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	697a      	ldr	r2, [r7, #20]
 800cbea:	4413      	add	r3, r2
 800cbec:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	601a      	str	r2, [r3, #0]
}
 800cbf4:	bf00      	nop
 800cbf6:	371c      	adds	r7, #28
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3350      	adds	r3, #80	; 0x50
 800cc14:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3714      	adds	r7, #20
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d101      	bne.n	800cc42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e022      	b.n	800cc88 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d105      	bne.n	800cc5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f7f9 fda1 	bl	800679c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2203      	movs	r2, #3
 800cc5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f814 	bl	800cc90 <HAL_SD_InitCard>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d001      	beq.n	800cc72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e00a      	b.n	800cc88 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2201      	movs	r2, #1
 800cc82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cc86:	2300      	movs	r3, #0
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3708      	adds	r7, #8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cc90:	b5b0      	push	{r4, r5, r7, lr}
 800cc92:	b08e      	sub	sp, #56	; 0x38
 800cc94:	af04      	add	r7, sp, #16
 800cc96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cca0:	2300      	movs	r3, #0
 800cca2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cca4:	2300      	movs	r3, #0
 800cca6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800ccac:	2376      	movs	r3, #118	; 0x76
 800ccae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681d      	ldr	r5, [r3, #0]
 800ccb4:	466c      	mov	r4, sp
 800ccb6:	f107 0314 	add.w	r3, r7, #20
 800ccba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ccc2:	f107 0308 	add.w	r3, r7, #8
 800ccc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ccc8:	4628      	mov	r0, r5
 800ccca:	f002 f94d 	bl	800ef68 <SDIO_Init>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ccd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d001      	beq.n	800cce0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e04c      	b.n	800cd7a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cce0:	4b28      	ldr	r3, [pc, #160]	; (800cd84 <HAL_SD_InitCard+0xf4>)
 800cce2:	2200      	movs	r2, #0
 800cce4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f002 f985 	bl	800effa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ccf0:	4b24      	ldr	r3, [pc, #144]	; (800cd84 <HAL_SD_InitCard+0xf4>)
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f001 fb52 	bl	800e3a0 <SD_PowerON>
 800ccfc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccfe:	6a3b      	ldr	r3, [r7, #32]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00b      	beq.n	800cd1c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2201      	movs	r2, #1
 800cd08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd10:	6a3b      	ldr	r3, [r7, #32]
 800cd12:	431a      	orrs	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e02e      	b.n	800cd7a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f001 fa73 	bl	800e208 <SD_InitCard>
 800cd22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd24:	6a3b      	ldr	r3, [r7, #32]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00b      	beq.n	800cd42 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	431a      	orrs	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e01b      	b.n	800cd7a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f002 f9e8 	bl	800f120 <SDMMC_CmdBlockLength>
 800cd50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00f      	beq.n	800cd78 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a0a      	ldr	r2, [pc, #40]	; (800cd88 <HAL_SD_InitCard+0xf8>)
 800cd5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd64:	6a3b      	ldr	r3, [r7, #32]
 800cd66:	431a      	orrs	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cd74:	2301      	movs	r3, #1
 800cd76:	e000      	b.n	800cd7a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3728      	adds	r7, #40	; 0x28
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bdb0      	pop	{r4, r5, r7, pc}
 800cd82:	bf00      	nop
 800cd84:	422580a0 	.word	0x422580a0
 800cd88:	004005ff 	.word	0x004005ff

0800cd8c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b092      	sub	sp, #72	; 0x48
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
 800cd98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cd9a:	f7f9 ff75 	bl	8006c88 <HAL_GetTick>
 800cd9e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d107      	bne.n	800cdbe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e1bd      	b.n	800d13a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	f040 81b0 	bne.w	800d12c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cdd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	441a      	add	r2, r3
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d907      	bls.n	800cdf0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cdec:	2301      	movs	r3, #1
 800cdee:	e1a4      	b.n	800d13a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2203      	movs	r2, #3
 800cdf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d002      	beq.n	800ce0e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800ce08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0a:	025b      	lsls	r3, r3, #9
 800ce0c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce12:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	025b      	lsls	r3, r3, #9
 800ce18:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ce1a:	2390      	movs	r3, #144	; 0x90
 800ce1c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ce1e:	2302      	movs	r3, #2
 800ce20:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800ce26:	2301      	movs	r3, #1
 800ce28:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f107 0214 	add.w	r2, r7, #20
 800ce32:	4611      	mov	r1, r2
 800ce34:	4618      	mov	r0, r3
 800ce36:	f002 f947 	bl	800f0c8 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d90a      	bls.n	800ce56 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2202      	movs	r2, #2
 800ce44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f002 f9ab 	bl	800f1a8 <SDMMC_CmdReadMultiBlock>
 800ce52:	6478      	str	r0, [r7, #68]	; 0x44
 800ce54:	e009      	b.n	800ce6a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce62:	4618      	mov	r0, r3
 800ce64:	f002 f97e 	bl	800f164 <SDMMC_CmdReadSingleBlock>
 800ce68:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d012      	beq.n	800ce96 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a7a      	ldr	r2, [pc, #488]	; (800d060 <HAL_SD_ReadBlocks+0x2d4>)
 800ce76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce7e:	431a      	orrs	r2, r3
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2201      	movs	r2, #1
 800ce88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ce92:	2301      	movs	r3, #1
 800ce94:	e151      	b.n	800d13a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800ce9a:	e061      	b.n	800cf60 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d03c      	beq.n	800cf24 <HAL_SD_ReadBlocks+0x198>
 800ceaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d039      	beq.n	800cf24 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	643b      	str	r3, [r7, #64]	; 0x40
 800ceb4:	e033      	b.n	800cf1e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f002 f87f 	bl	800efbe <SDIO_ReadFIFO>
 800cec0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec4:	b2da      	uxtb	r2, r3
 800cec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ceca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cecc:	3301      	adds	r3, #1
 800cece:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800ced0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ced2:	3b01      	subs	r3, #1
 800ced4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800ced6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced8:	0a1b      	lsrs	r3, r3, #8
 800ceda:	b2da      	uxtb	r2, r3
 800cedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cede:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee2:	3301      	adds	r3, #1
 800cee4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee8:	3b01      	subs	r3, #1
 800ceea:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ceec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceee:	0c1b      	lsrs	r3, r3, #16
 800cef0:	b2da      	uxtb	r2, r3
 800cef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef8:	3301      	adds	r3, #1
 800cefa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cefc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cefe:	3b01      	subs	r3, #1
 800cf00:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	0e1b      	lsrs	r3, r3, #24
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf0a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cf0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf0e:	3301      	adds	r3, #1
 800cf10:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cf12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf14:	3b01      	subs	r3, #1
 800cf16:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800cf18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	643b      	str	r3, [r7, #64]	; 0x40
 800cf1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf20:	2b07      	cmp	r3, #7
 800cf22:	d9c8      	bls.n	800ceb6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cf24:	f7f9 feb0 	bl	8006c88 <HAL_GetTick>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d902      	bls.n	800cf3a <HAL_SD_ReadBlocks+0x1ae>
 800cf34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d112      	bne.n	800cf60 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a48      	ldr	r2, [pc, #288]	; (800d060 <HAL_SD_ReadBlocks+0x2d4>)
 800cf40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf46:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	e0ec      	b.n	800d13a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf66:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d096      	beq.n	800ce9c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d022      	beq.n	800cfc2 <HAL_SD_ReadBlocks+0x236>
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d91f      	bls.n	800cfc2 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf86:	2b03      	cmp	r3, #3
 800cf88:	d01b      	beq.n	800cfc2 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f002 f970 	bl	800f274 <SDMMC_CmdStopTransfer>
 800cf94:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cf96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d012      	beq.n	800cfc2 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a2f      	ldr	r2, [pc, #188]	; (800d060 <HAL_SD_ReadBlocks+0x2d4>)
 800cfa2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e0bb      	b.n	800d13a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfc8:	f003 0308 	and.w	r3, r3, #8
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d012      	beq.n	800cff6 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a22      	ldr	r2, [pc, #136]	; (800d060 <HAL_SD_ReadBlocks+0x2d4>)
 800cfd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfdc:	f043 0208 	orr.w	r2, r3, #8
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2200      	movs	r2, #0
 800cff0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cff2:	2301      	movs	r3, #1
 800cff4:	e0a1      	b.n	800d13a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cffc:	f003 0302 	and.w	r3, r3, #2
 800d000:	2b00      	cmp	r3, #0
 800d002:	d012      	beq.n	800d02a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a15      	ldr	r2, [pc, #84]	; (800d060 <HAL_SD_ReadBlocks+0x2d4>)
 800d00a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d010:	f043 0202 	orr.w	r2, r3, #2
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2200      	movs	r2, #0
 800d024:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d026:	2301      	movs	r3, #1
 800d028:	e087      	b.n	800d13a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d030:	f003 0320 	and.w	r3, r3, #32
 800d034:	2b00      	cmp	r3, #0
 800d036:	d064      	beq.n	800d102 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a08      	ldr	r2, [pc, #32]	; (800d060 <HAL_SD_ReadBlocks+0x2d4>)
 800d03e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d044:	f043 0220 	orr.w	r2, r3, #32
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2201      	movs	r2, #1
 800d050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2200      	movs	r2, #0
 800d058:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d05a:	2301      	movs	r3, #1
 800d05c:	e06d      	b.n	800d13a <HAL_SD_ReadBlocks+0x3ae>
 800d05e:	bf00      	nop
 800d060:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4618      	mov	r0, r3
 800d06a:	f001 ffa8 	bl	800efbe <SDIO_ReadFIFO>
 800d06e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800d070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d072:	b2da      	uxtb	r2, r3
 800d074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d076:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d07a:	3301      	adds	r3, #1
 800d07c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d080:	3b01      	subs	r3, #1
 800d082:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d086:	0a1b      	lsrs	r3, r3, #8
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d090:	3301      	adds	r3, #1
 800d092:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d096:	3b01      	subs	r3, #1
 800d098:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09c:	0c1b      	lsrs	r3, r3, #16
 800d09e:	b2da      	uxtb	r2, r3
 800d0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b2:	0e1b      	lsrs	r3, r3, #24
 800d0b4:	b2da      	uxtb	r2, r3
 800d0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0bc:	3301      	adds	r3, #1
 800d0be:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d0c6:	f7f9 fddf 	bl	8006c88 <HAL_GetTick>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d902      	bls.n	800d0dc <HAL_SD_ReadBlocks+0x350>
 800d0d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d112      	bne.n	800d102 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a18      	ldr	r2, [pc, #96]	; (800d144 <HAL_SD_ReadBlocks+0x3b8>)
 800d0e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d0fe:	2301      	movs	r3, #1
 800d100:	e01b      	b.n	800d13a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <HAL_SD_ReadBlocks+0x38a>
 800d110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d112:	2b00      	cmp	r3, #0
 800d114:	d1a6      	bne.n	800d064 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f240 523a 	movw	r2, #1338	; 0x53a
 800d11e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d128:	2300      	movs	r3, #0
 800d12a:	e006      	b.n	800d13a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d130:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d138:	2301      	movs	r3, #1
  }
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3748      	adds	r7, #72	; 0x48
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	004005ff 	.word	0x004005ff

0800d148 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b092      	sub	sp, #72	; 0x48
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]
 800d154:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d156:	f7f9 fd97 	bl	8006c88 <HAL_GetTick>
 800d15a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d107      	bne.n	800d17a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d176:	2301      	movs	r3, #1
 800d178:	e165      	b.n	800d446 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d180:	b2db      	uxtb	r3, r3
 800d182:	2b01      	cmp	r3, #1
 800d184:	f040 8158 	bne.w	800d438 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2200      	movs	r2, #0
 800d18c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d18e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	441a      	add	r2, r3
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d198:	429a      	cmp	r2, r3
 800d19a:	d907      	bls.n	800d1ac <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e14c      	b.n	800d446 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2203      	movs	r2, #3
 800d1b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d002      	beq.n	800d1ca <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	025b      	lsls	r3, r3, #9
 800d1c8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ce:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	025b      	lsls	r3, r3, #9
 800d1d4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d1d6:	2390      	movs	r3, #144	; 0x90
 800d1d8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f107 0218 	add.w	r2, r7, #24
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f001 ff69 	bl	800f0c8 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d90a      	bls.n	800d212 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2220      	movs	r2, #32
 800d200:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d208:	4618      	mov	r0, r3
 800d20a:	f002 f811 	bl	800f230 <SDMMC_CmdWriteMultiBlock>
 800d20e:	6478      	str	r0, [r7, #68]	; 0x44
 800d210:	e009      	b.n	800d226 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2210      	movs	r2, #16
 800d216:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d21e:	4618      	mov	r0, r3
 800d220:	f001 ffe4 	bl	800f1ec <SDMMC_CmdWriteSingleBlock>
 800d224:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d012      	beq.n	800d252 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a87      	ldr	r2, [pc, #540]	; (800d450 <HAL_SD_WriteBlocks+0x308>)
 800d232:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d23a:	431a      	orrs	r2, r3
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2200      	movs	r2, #0
 800d24c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	e0f9      	b.n	800d446 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d256:	e065      	b.n	800d324 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d25e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d262:	2b00      	cmp	r3, #0
 800d264:	d040      	beq.n	800d2e8 <HAL_SD_WriteBlocks+0x1a0>
 800d266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d03d      	beq.n	800d2e8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d26c:	2300      	movs	r3, #0
 800d26e:	643b      	str	r3, [r7, #64]	; 0x40
 800d270:	e037      	b.n	800d2e2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27a:	3301      	adds	r3, #1
 800d27c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d280:	3b01      	subs	r3, #1
 800d282:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	021a      	lsls	r2, r3, #8
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d292:	3301      	adds	r3, #1
 800d294:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d298:	3b01      	subs	r3, #1
 800d29a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	041a      	lsls	r2, r3, #16
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	061a      	lsls	r2, r3, #24
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f107 0214 	add.w	r2, r7, #20
 800d2d4:	4611      	mov	r1, r2
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f001 fe7e 	bl	800efd8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2de:	3301      	adds	r3, #1
 800d2e0:	643b      	str	r3, [r7, #64]	; 0x40
 800d2e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2e4:	2b07      	cmp	r3, #7
 800d2e6:	d9c4      	bls.n	800d272 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d2e8:	f7f9 fcce 	bl	8006c88 <HAL_GetTick>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d902      	bls.n	800d2fe <HAL_SD_WriteBlocks+0x1b6>
 800d2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d112      	bne.n	800d324 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a53      	ldr	r2, [pc, #332]	; (800d450 <HAL_SD_WriteBlocks+0x308>)
 800d304:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d30c:	431a      	orrs	r2, r3
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2201      	movs	r2, #1
 800d316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2200      	movs	r2, #0
 800d31e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d320:	2303      	movs	r3, #3
 800d322:	e090      	b.n	800d446 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d32a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d092      	beq.n	800d258 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d022      	beq.n	800d386 <HAL_SD_WriteBlocks+0x23e>
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	2b01      	cmp	r3, #1
 800d344:	d91f      	bls.n	800d386 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d34a:	2b03      	cmp	r3, #3
 800d34c:	d01b      	beq.n	800d386 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	4618      	mov	r0, r3
 800d354:	f001 ff8e 	bl	800f274 <SDMMC_CmdStopTransfer>
 800d358:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d35a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d012      	beq.n	800d386 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a3a      	ldr	r2, [pc, #232]	; (800d450 <HAL_SD_WriteBlocks+0x308>)
 800d366:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d36c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d36e:	431a      	orrs	r2, r3
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2200      	movs	r2, #0
 800d380:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	e05f      	b.n	800d446 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38c:	f003 0308 	and.w	r3, r3, #8
 800d390:	2b00      	cmp	r3, #0
 800d392:	d012      	beq.n	800d3ba <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a2d      	ldr	r2, [pc, #180]	; (800d450 <HAL_SD_WriteBlocks+0x308>)
 800d39a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a0:	f043 0208 	orr.w	r2, r3, #8
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e045      	b.n	800d446 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c0:	f003 0302 	and.w	r3, r3, #2
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d012      	beq.n	800d3ee <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a20      	ldr	r2, [pc, #128]	; (800d450 <HAL_SD_WriteBlocks+0x308>)
 800d3ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d4:	f043 0202 	orr.w	r2, r3, #2
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e02b      	b.n	800d446 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f4:	f003 0310 	and.w	r3, r3, #16
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d012      	beq.n	800d422 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a13      	ldr	r2, [pc, #76]	; (800d450 <HAL_SD_WriteBlocks+0x308>)
 800d402:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d408:	f043 0210 	orr.w	r2, r3, #16
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2201      	movs	r2, #1
 800d414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2200      	movs	r2, #0
 800d41c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	e011      	b.n	800d446 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f240 523a 	movw	r2, #1338	; 0x53a
 800d42a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2201      	movs	r2, #1
 800d430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d434:	2300      	movs	r3, #0
 800d436:	e006      	b.n	800d446 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d43c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d444:	2301      	movs	r3, #1
  }
}
 800d446:	4618      	mov	r0, r3
 800d448:	3748      	adds	r7, #72	; 0x48
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	004005ff 	.word	0x004005ff

0800d454 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08c      	sub	sp, #48	; 0x30
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
 800d460:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d107      	bne.n	800d47c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d470:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d478:	2301      	movs	r3, #1
 800d47a:	e0be      	b.n	800d5fa <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d482:	b2db      	uxtb	r3, r3
 800d484:	2b01      	cmp	r3, #1
 800d486:	f040 80b7 	bne.w	800d5f8 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2200      	movs	r2, #0
 800d48e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	441a      	add	r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d907      	bls.n	800d4ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e0a5      	b.n	800d5fa <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2203      	movs	r2, #3
 800d4b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d4cc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d2:	4a4c      	ldr	r2, [pc, #304]	; (800d604 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800d4d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4da:	4a4b      	ldr	r2, [pc, #300]	; (800d608 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800d4dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4fe:	689a      	ldr	r2, [r3, #8]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	430a      	orrs	r2, r1
 800d508:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	3380      	adds	r3, #128	; 0x80
 800d514:	4619      	mov	r1, r3
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	025b      	lsls	r3, r3, #9
 800d51c:	089b      	lsrs	r3, r3, #2
 800d51e:	f7fb f85d 	bl	80085dc <HAL_DMA_Start_IT>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d017      	beq.n	800d558 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d536:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a33      	ldr	r2, [pc, #204]	; (800d60c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d53e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d544:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	e050      	b.n	800d5fa <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d558:	4b2d      	ldr	r3, [pc, #180]	; (800d610 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d55a:	2201      	movs	r2, #1
 800d55c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d562:	2b01      	cmp	r3, #1
 800d564:	d002      	beq.n	800d56c <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800d566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d568:	025b      	lsls	r3, r3, #9
 800d56a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d56c:	f04f 33ff 	mov.w	r3, #4294967295
 800d570:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	025b      	lsls	r3, r3, #9
 800d576:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d578:	2390      	movs	r3, #144	; 0x90
 800d57a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d57c:	2302      	movs	r3, #2
 800d57e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d580:	2300      	movs	r3, #0
 800d582:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d584:	2301      	movs	r3, #1
 800d586:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f107 0210 	add.w	r2, r7, #16
 800d590:	4611      	mov	r1, r2
 800d592:	4618      	mov	r0, r3
 800d594:	f001 fd98 	bl	800f0c8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d90a      	bls.n	800d5b4 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2282      	movs	r2, #130	; 0x82
 800d5a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f001 fdfc 	bl	800f1a8 <SDMMC_CmdReadMultiBlock>
 800d5b0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d5b2:	e009      	b.n	800d5c8 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2281      	movs	r2, #129	; 0x81
 800d5b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f001 fdcf 	bl	800f164 <SDMMC_CmdReadSingleBlock>
 800d5c6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d012      	beq.n	800d5f4 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a0e      	ldr	r2, [pc, #56]	; (800d60c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d5d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5dc:	431a      	orrs	r2, r3
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e002      	b.n	800d5fa <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	e000      	b.n	800d5fa <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d5f8:	2302      	movs	r3, #2
  }
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3730      	adds	r7, #48	; 0x30
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	0800e017 	.word	0x0800e017
 800d608:	0800e089 	.word	0x0800e089
 800d60c:	004005ff 	.word	0x004005ff
 800d610:	4225858c 	.word	0x4225858c

0800d614 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b08c      	sub	sp, #48	; 0x30
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d107      	bne.n	800d63c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d630:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d638:	2301      	movs	r3, #1
 800d63a:	e0c1      	b.n	800d7c0 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d642:	b2db      	uxtb	r3, r3
 800d644:	2b01      	cmp	r3, #1
 800d646:	f040 80ba 	bne.w	800d7be <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2200      	movs	r2, #0
 800d64e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	441a      	add	r2, r3
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d907      	bls.n	800d66e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d662:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	e0a8      	b.n	800d7c0 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2203      	movs	r2, #3
 800d672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2200      	movs	r2, #0
 800d67c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f042 021a 	orr.w	r2, r2, #26
 800d68c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d692:	4a4d      	ldr	r2, [pc, #308]	; (800d7c8 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800d694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d69a:	4a4c      	ldr	r2, [pc, #304]	; (800d7cc <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800d69c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d002      	beq.n	800d6b4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b0:	025b      	lsls	r3, r3, #9
 800d6b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d90a      	bls.n	800d6d0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	22a0      	movs	r2, #160	; 0xa0
 800d6be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f001 fdb2 	bl	800f230 <SDMMC_CmdWriteMultiBlock>
 800d6cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d6ce:	e009      	b.n	800d6e4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2290      	movs	r2, #144	; 0x90
 800d6d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f001 fd85 	bl	800f1ec <SDMMC_CmdWriteSingleBlock>
 800d6e2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d012      	beq.n	800d710 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4a38      	ldr	r2, [pc, #224]	; (800d7d0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800d6f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f8:	431a      	orrs	r2, r3
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2201      	movs	r2, #1
 800d702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2200      	movs	r2, #0
 800d70a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d70c:	2301      	movs	r3, #1
 800d70e:	e057      	b.n	800d7c0 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d710:	4b30      	ldr	r3, [pc, #192]	; (800d7d4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d712:	2201      	movs	r2, #1
 800d714:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d71a:	2240      	movs	r2, #64	; 0x40
 800d71c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d72e:	689a      	ldr	r2, [r3, #8]
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	430a      	orrs	r2, r1
 800d738:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d73e:	68b9      	ldr	r1, [r7, #8]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3380      	adds	r3, #128	; 0x80
 800d746:	461a      	mov	r2, r3
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	025b      	lsls	r3, r3, #9
 800d74c:	089b      	lsrs	r3, r3, #2
 800d74e:	f7fa ff45 	bl	80085dc <HAL_DMA_Start_IT>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d01a      	beq.n	800d78e <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f022 021a 	bic.w	r2, r2, #26
 800d766:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a18      	ldr	r2, [pc, #96]	; (800d7d0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800d76e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d774:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2201      	movs	r2, #1
 800d780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2200      	movs	r2, #0
 800d788:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d78a:	2301      	movs	r3, #1
 800d78c:	e018      	b.n	800d7c0 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d78e:	f04f 33ff 	mov.w	r3, #4294967295
 800d792:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	025b      	lsls	r3, r3, #9
 800d798:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d79a:	2390      	movs	r3, #144	; 0x90
 800d79c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f107 0210 	add.w	r2, r7, #16
 800d7b2:	4611      	mov	r1, r2
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f001 fc87 	bl	800f0c8 <SDIO_ConfigData>

      return HAL_OK;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	e000      	b.n	800d7c0 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800d7be:	2302      	movs	r3, #2
  }
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3730      	adds	r7, #48	; 0x30
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	0800dfed 	.word	0x0800dfed
 800d7cc:	0800e089 	.word	0x0800e089
 800d7d0:	004005ff 	.word	0x004005ff
 800d7d4:	4225858c 	.word	0x4225858c

0800d7d8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d008      	beq.n	800d806 <HAL_SD_IRQHandler+0x2e>
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f003 0308 	and.w	r3, r3, #8
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d003      	beq.n	800d806 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 ffed 	bl	800e7de <SD_Read_IT>
 800d804:	e155      	b.n	800dab2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d810:	2b00      	cmp	r3, #0
 800d812:	f000 808f 	beq.w	800d934 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d81e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	6812      	ldr	r2, [r2, #0]
 800d82a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d82e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d832:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f022 0201 	bic.w	r2, r2, #1
 800d842:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f003 0308 	and.w	r3, r3, #8
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d039      	beq.n	800d8c2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	f003 0302 	and.w	r3, r3, #2
 800d854:	2b00      	cmp	r3, #0
 800d856:	d104      	bne.n	800d862 <HAL_SD_IRQHandler+0x8a>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f003 0320 	and.w	r3, r3, #32
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d011      	beq.n	800d886 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	4618      	mov	r0, r3
 800d868:	f001 fd04 	bl	800f274 <SDMMC_CmdStopTransfer>
 800d86c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d008      	beq.n	800d886 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	431a      	orrs	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 f91f 	bl	800dac4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f240 523a 	movw	r2, #1338	; 0x53a
 800d88e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f003 0301 	and.w	r3, r3, #1
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d104      	bne.n	800d8b2 <HAL_SD_IRQHandler+0xda>
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f003 0302 	and.w	r3, r3, #2
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d003      	beq.n	800d8ba <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f003 fce6 	bl	8011284 <HAL_SD_RxCpltCallback>
 800d8b8:	e0fb      	b.n	800dab2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f003 fcd8 	bl	8011270 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d8c0:	e0f7      	b.n	800dab2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	f000 80f2 	beq.w	800dab2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	f003 0320 	and.w	r3, r3, #32
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d011      	beq.n	800d8fc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f001 fcc9 	bl	800f274 <SDMMC_CmdStopTransfer>
 800d8e2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d008      	beq.n	800d8fc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	431a      	orrs	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f8e4 	bl	800dac4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f003 0301 	and.w	r3, r3, #1
 800d902:	2b00      	cmp	r3, #0
 800d904:	f040 80d5 	bne.w	800dab2 <HAL_SD_IRQHandler+0x2da>
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f003 0302 	and.w	r3, r3, #2
 800d90e:	2b00      	cmp	r3, #0
 800d910:	f040 80cf 	bne.w	800dab2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f022 0208 	bic.w	r2, r2, #8
 800d922:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f003 fc9f 	bl	8011270 <HAL_SD_TxCpltCallback>
}
 800d932:	e0be      	b.n	800dab2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d93a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d008      	beq.n	800d954 <HAL_SD_IRQHandler+0x17c>
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	f003 0308 	and.w	r3, r3, #8
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d003      	beq.n	800d954 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 ff97 	bl	800e880 <SD_Write_IT>
 800d952:	e0ae      	b.n	800dab2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d95a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d95e:	2b00      	cmp	r3, #0
 800d960:	f000 80a7 	beq.w	800dab2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d96a:	f003 0302 	and.w	r3, r3, #2
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d005      	beq.n	800d97e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d976:	f043 0202 	orr.w	r2, r3, #2
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d984:	f003 0308 	and.w	r3, r3, #8
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d005      	beq.n	800d998 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d990:	f043 0208 	orr.w	r2, r3, #8
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d99e:	f003 0320 	and.w	r3, r3, #32
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d005      	beq.n	800d9b2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9aa:	f043 0220 	orr.w	r2, r3, #32
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9b8:	f003 0310 	and.w	r3, r3, #16
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d005      	beq.n	800d9cc <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c4:	f043 0210 	orr.w	r2, r3, #16
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f240 523a 	movw	r2, #1338	; 0x53a
 800d9d4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d9e4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f001 fc42 	bl	800f274 <SDMMC_CmdStopTransfer>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f6:	431a      	orrs	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f003 0308 	and.w	r3, r3, #8
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00a      	beq.n	800da1c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2201      	movs	r2, #1
 800da0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 f855 	bl	800dac4 <HAL_SD_ErrorCallback>
}
 800da1a:	e04a      	b.n	800dab2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da22:	2b00      	cmp	r3, #0
 800da24:	d045      	beq.n	800dab2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f003 0310 	and.w	r3, r3, #16
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d104      	bne.n	800da3a <HAL_SD_IRQHandler+0x262>
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f003 0320 	and.w	r3, r3, #32
 800da36:	2b00      	cmp	r3, #0
 800da38:	d011      	beq.n	800da5e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da3e:	4a1f      	ldr	r2, [pc, #124]	; (800dabc <HAL_SD_IRQHandler+0x2e4>)
 800da40:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da46:	4618      	mov	r0, r3
 800da48:	f7fa fe20 	bl	800868c <HAL_DMA_Abort_IT>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d02f      	beq.n	800dab2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da56:	4618      	mov	r0, r3
 800da58:	f000 fb68 	bl	800e12c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800da5c:	e029      	b.n	800dab2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f003 0301 	and.w	r3, r3, #1
 800da64:	2b00      	cmp	r3, #0
 800da66:	d104      	bne.n	800da72 <HAL_SD_IRQHandler+0x29a>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f003 0302 	and.w	r3, r3, #2
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d011      	beq.n	800da96 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da76:	4a12      	ldr	r2, [pc, #72]	; (800dac0 <HAL_SD_IRQHandler+0x2e8>)
 800da78:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fa fe04 	bl	800868c <HAL_DMA_Abort_IT>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d013      	beq.n	800dab2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da8e:	4618      	mov	r0, r3
 800da90:	f000 fb83 	bl	800e19a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800da94:	e00d      	b.n	800dab2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f003 fbd6 	bl	801125c <HAL_SD_AbortCallback>
}
 800dab0:	e7ff      	b.n	800dab2 <HAL_SD_IRQHandler+0x2da>
 800dab2:	bf00      	nop
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	0800e12d 	.word	0x0800e12d
 800dac0:	0800e19b 	.word	0x0800e19b

0800dac4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dacc:	bf00      	nop
 800dace:	370c      	adds	r7, #12
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dad8:	b480      	push	{r7}
 800dada:	b083      	sub	sp, #12
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dae6:	0f9b      	lsrs	r3, r3, #30
 800dae8:	b2da      	uxtb	r2, r3
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daf2:	0e9b      	lsrs	r3, r3, #26
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	f003 030f 	and.w	r3, r3, #15
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db04:	0e1b      	lsrs	r3, r3, #24
 800db06:	b2db      	uxtb	r3, r3
 800db08:	f003 0303 	and.w	r3, r3, #3
 800db0c:	b2da      	uxtb	r2, r3
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db16:	0c1b      	lsrs	r3, r3, #16
 800db18:	b2da      	uxtb	r2, r3
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db22:	0a1b      	lsrs	r3, r3, #8
 800db24:	b2da      	uxtb	r2, r3
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db38:	0d1b      	lsrs	r3, r3, #20
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db44:	0c1b      	lsrs	r3, r3, #16
 800db46:	b2db      	uxtb	r3, r3
 800db48:	f003 030f 	and.w	r3, r3, #15
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db56:	0bdb      	lsrs	r3, r3, #15
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	f003 0301 	and.w	r3, r3, #1
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db68:	0b9b      	lsrs	r3, r3, #14
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	f003 0301 	and.w	r3, r3, #1
 800db70:	b2da      	uxtb	r2, r3
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db7a:	0b5b      	lsrs	r3, r3, #13
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	f003 0301 	and.w	r3, r3, #1
 800db82:	b2da      	uxtb	r2, r3
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db8c:	0b1b      	lsrs	r3, r3, #12
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	f003 0301 	and.w	r3, r3, #1
 800db94:	b2da      	uxtb	r2, r3
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	2200      	movs	r2, #0
 800db9e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d163      	bne.n	800dc70 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbac:	009a      	lsls	r2, r3, #2
 800dbae:	f640 73fc 	movw	r3, #4092	; 0xffc
 800dbb2:	4013      	ands	r3, r2
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800dbb8:	0f92      	lsrs	r2, r2, #30
 800dbba:	431a      	orrs	r2, r3
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbc4:	0edb      	lsrs	r3, r3, #27
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	f003 0307 	and.w	r3, r3, #7
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbd6:	0e1b      	lsrs	r3, r3, #24
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	f003 0307 	and.w	r3, r3, #7
 800dbde:	b2da      	uxtb	r2, r3
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbe8:	0d5b      	lsrs	r3, r3, #21
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	f003 0307 	and.w	r3, r3, #7
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbfa:	0c9b      	lsrs	r3, r3, #18
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	f003 0307 	and.w	r3, r3, #7
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc0c:	0bdb      	lsrs	r3, r3, #15
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	f003 0307 	and.w	r3, r3, #7
 800dc14:	b2da      	uxtb	r2, r3
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	1c5a      	adds	r2, r3, #1
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	7e1b      	ldrb	r3, [r3, #24]
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	f003 0307 	and.w	r3, r3, #7
 800dc2e:	3302      	adds	r3, #2
 800dc30:	2201      	movs	r2, #1
 800dc32:	fa02 f303 	lsl.w	r3, r2, r3
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800dc3a:	fb02 f203 	mul.w	r2, r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	7a1b      	ldrb	r3, [r3, #8]
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	f003 030f 	and.w	r3, r3, #15
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	409a      	lsls	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800dc5c:	0a52      	lsrs	r2, r2, #9
 800dc5e:	fb02 f203 	mul.w	r2, r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc6c:	661a      	str	r2, [r3, #96]	; 0x60
 800dc6e:	e031      	b.n	800dcd4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d11d      	bne.n	800dcb4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc7c:	041b      	lsls	r3, r3, #16
 800dc7e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc86:	0c1b      	lsrs	r3, r3, #16
 800dc88:	431a      	orrs	r2, r3
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	691b      	ldr	r3, [r3, #16]
 800dc92:	3301      	adds	r3, #1
 800dc94:	029a      	lsls	r2, r3, #10
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dca8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	661a      	str	r2, [r3, #96]	; 0x60
 800dcb2:	e00f      	b.n	800dcd4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a58      	ldr	r2, [pc, #352]	; (800de1c <HAL_SD_GetCardCSD+0x344>)
 800dcba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2201      	movs	r2, #1
 800dccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e09d      	b.n	800de10 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcd8:	0b9b      	lsrs	r3, r3, #14
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f003 0301 	and.w	r3, r3, #1
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcea:	09db      	lsrs	r3, r3, #7
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd02:	b2da      	uxtb	r2, r3
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd0c:	0fdb      	lsrs	r3, r3, #31
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd18:	0f5b      	lsrs	r3, r3, #29
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	f003 0303 	and.w	r3, r3, #3
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd2a:	0e9b      	lsrs	r3, r3, #26
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	f003 0307 	and.w	r3, r3, #7
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd3c:	0d9b      	lsrs	r3, r3, #22
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	f003 030f 	and.w	r3, r3, #15
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd4e:	0d5b      	lsrs	r3, r3, #21
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	f003 0301 	and.w	r3, r3, #1
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd6a:	0c1b      	lsrs	r3, r3, #16
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	f003 0301 	and.w	r3, r3, #1
 800dd72:	b2da      	uxtb	r2, r3
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd7e:	0bdb      	lsrs	r3, r3, #15
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	f003 0301 	and.w	r3, r3, #1
 800dd86:	b2da      	uxtb	r2, r3
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd92:	0b9b      	lsrs	r3, r3, #14
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	f003 0301 	and.w	r3, r3, #1
 800dd9a:	b2da      	uxtb	r2, r3
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda6:	0b5b      	lsrs	r3, r3, #13
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	f003 0301 	and.w	r3, r3, #1
 800ddae:	b2da      	uxtb	r2, r3
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddba:	0b1b      	lsrs	r3, r3, #12
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	f003 0301 	and.w	r3, r3, #1
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddce:	0a9b      	lsrs	r3, r3, #10
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	f003 0303 	and.w	r3, r3, #3
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dde2:	0a1b      	lsrs	r3, r3, #8
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	f003 0303 	and.w	r3, r3, #3
 800ddea:	b2da      	uxtb	r2, r3
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddf6:	085b      	lsrs	r3, r3, #1
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddfe:	b2da      	uxtb	r2, r3
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	2201      	movs	r2, #1
 800de0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800de0e:	2300      	movs	r3, #0
}
 800de10:	4618      	mov	r0, r3
 800de12:	370c      	adds	r7, #12
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr
 800de1c:	004005ff 	.word	0x004005ff

0800de20 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800de20:	b480      	push	{r7}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800de6a:	2300      	movs	r3, #0
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	370c      	adds	r7, #12
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr

0800de78 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800de78:	b5b0      	push	{r4, r5, r7, lr}
 800de7a:	b08e      	sub	sp, #56	; 0x38
 800de7c:	af04      	add	r7, sp, #16
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800de82:	2300      	movs	r3, #0
 800de84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2203      	movs	r2, #3
 800de8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de94:	2b03      	cmp	r3, #3
 800de96:	d02e      	beq.n	800def6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de9e:	d106      	bne.n	800deae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	639a      	str	r2, [r3, #56]	; 0x38
 800deac:	e029      	b.n	800df02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800deb4:	d10a      	bne.n	800decc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 fb28 	bl	800e50c <SD_WideBus_Enable>
 800debc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dec2:	6a3b      	ldr	r3, [r7, #32]
 800dec4:	431a      	orrs	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	639a      	str	r2, [r3, #56]	; 0x38
 800deca:	e01a      	b.n	800df02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d10a      	bne.n	800dee8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 fb65 	bl	800e5a2 <SD_WideBus_Disable>
 800ded8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dede:	6a3b      	ldr	r3, [r7, #32]
 800dee0:	431a      	orrs	r2, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	639a      	str	r2, [r3, #56]	; 0x38
 800dee6:	e00c      	b.n	800df02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	639a      	str	r2, [r3, #56]	; 0x38
 800def4:	e005      	b.n	800df02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00b      	beq.n	800df22 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a26      	ldr	r2, [pc, #152]	; (800dfa8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800df10:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2201      	movs	r2, #1
 800df16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800df1a:	2301      	movs	r3, #1
 800df1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df20:	e01f      	b.n	800df62 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	689b      	ldr	r3, [r3, #8]
 800df2c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	695b      	ldr	r3, [r3, #20]
 800df3c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	699b      	ldr	r3, [r3, #24]
 800df42:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681d      	ldr	r5, [r3, #0]
 800df48:	466c      	mov	r4, sp
 800df4a:	f107 0314 	add.w	r3, r7, #20
 800df4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df56:	f107 0308 	add.w	r3, r7, #8
 800df5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df5c:	4628      	mov	r0, r5
 800df5e:	f001 f803 	bl	800ef68 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df6a:	4618      	mov	r0, r3
 800df6c:	f001 f8d8 	bl	800f120 <SDMMC_CmdBlockLength>
 800df70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df72:	6a3b      	ldr	r3, [r7, #32]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00c      	beq.n	800df92 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a0a      	ldr	r2, [pc, #40]	; (800dfa8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800df7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df84:	6a3b      	ldr	r3, [r7, #32]
 800df86:	431a      	orrs	r2, r3
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800df8c:	2301      	movs	r3, #1
 800df8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2201      	movs	r2, #1
 800df96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800df9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3728      	adds	r7, #40	; 0x28
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bdb0      	pop	{r4, r5, r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	004005ff 	.word	0x004005ff

0800dfac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dfb8:	f107 030c 	add.w	r3, r7, #12
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 fa7c 	bl	800e4bc <SD_SendStatus>
 800dfc4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d005      	beq.n	800dfd8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	431a      	orrs	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	0a5b      	lsrs	r3, r3, #9
 800dfdc:	f003 030f 	and.w	r3, r3, #15
 800dfe0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dfe2:	693b      	ldr	r3, [r7, #16]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3718      	adds	r7, #24
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dff8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e008:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e00a:	bf00      	nop
 800e00c:	3714      	adds	r7, #20
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr

0800e016 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b084      	sub	sp, #16
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e022:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e028:	2b82      	cmp	r3, #130	; 0x82
 800e02a:	d111      	bne.n	800e050 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4618      	mov	r0, r3
 800e032:	f001 f91f 	bl	800f274 <SDMMC_CmdStopTransfer>
 800e036:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d008      	beq.n	800e050 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	431a      	orrs	r2, r3
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f7ff fd3a 	bl	800dac4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f022 0208 	bic.w	r2, r2, #8
 800e05e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f240 523a 	movw	r2, #1338	; 0x53a
 800e068:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2201      	movs	r2, #1
 800e06e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2200      	movs	r2, #0
 800e076:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f003 f903 	bl	8011284 <HAL_SD_RxCpltCallback>
#endif
}
 800e07e:	bf00      	nop
 800e080:	3710      	adds	r7, #16
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
	...

0800e088 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b086      	sub	sp, #24
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e094:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7fa fca4 	bl	80089e4 <HAL_DMA_GetError>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b02      	cmp	r3, #2
 800e0a0:	d03e      	beq.n	800e120 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0a8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0b0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d002      	beq.n	800e0be <SD_DMAError+0x36>
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d12d      	bne.n	800e11a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4a19      	ldr	r2, [pc, #100]	; (800e128 <SD_DMAError+0xa0>)
 800e0c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e0d4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e0e2:	6978      	ldr	r0, [r7, #20]
 800e0e4:	f7ff ff62 	bl	800dfac <HAL_SD_GetCardState>
 800e0e8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	2b06      	cmp	r3, #6
 800e0ee:	d002      	beq.n	800e0f6 <SD_DMAError+0x6e>
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	2b05      	cmp	r3, #5
 800e0f4:	d10a      	bne.n	800e10c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f001 f8ba 	bl	800f274 <SDMMC_CmdStopTransfer>
 800e100:	4602      	mov	r2, r0
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e106:	431a      	orrs	r2, r3
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	2201      	movs	r2, #1
 800e110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	2200      	movs	r2, #0
 800e118:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e11a:	6978      	ldr	r0, [r7, #20]
 800e11c:	f7ff fcd2 	bl	800dac4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e120:	bf00      	nop
 800e122:	3718      	adds	r7, #24
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	004005ff 	.word	0x004005ff

0800e12c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e138:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f240 523a 	movw	r2, #1338	; 0x53a
 800e142:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e144:	68f8      	ldr	r0, [r7, #12]
 800e146:	f7ff ff31 	bl	800dfac <HAL_SD_GetCardState>
 800e14a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	2b06      	cmp	r3, #6
 800e15e:	d002      	beq.n	800e166 <SD_DMATxAbort+0x3a>
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	2b05      	cmp	r3, #5
 800e164:	d10a      	bne.n	800e17c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4618      	mov	r0, r3
 800e16c:	f001 f882 	bl	800f274 <SDMMC_CmdStopTransfer>
 800e170:	4602      	mov	r2, r0
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e176:	431a      	orrs	r2, r3
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e180:	2b00      	cmp	r3, #0
 800e182:	d103      	bne.n	800e18c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f003 f869 	bl	801125c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e18a:	e002      	b.n	800e192 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f7ff fc99 	bl	800dac4 <HAL_SD_ErrorCallback>
}
 800e192:	bf00      	nop
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b084      	sub	sp, #16
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1a6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f240 523a 	movw	r2, #1338	; 0x53a
 800e1b0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f7ff fefa 	bl	800dfac <HAL_SD_GetCardState>
 800e1b8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2201      	movs	r2, #1
 800e1be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	2b06      	cmp	r3, #6
 800e1cc:	d002      	beq.n	800e1d4 <SD_DMARxAbort+0x3a>
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	2b05      	cmp	r3, #5
 800e1d2:	d10a      	bne.n	800e1ea <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f001 f84b 	bl	800f274 <SDMMC_CmdStopTransfer>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e4:	431a      	orrs	r2, r3
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d103      	bne.n	800e1fa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f003 f832 	bl	801125c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e1f8:	e002      	b.n	800e200 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	f7ff fc62 	bl	800dac4 <HAL_SD_ErrorCallback>
}
 800e200:	bf00      	nop
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e208:	b5b0      	push	{r4, r5, r7, lr}
 800e20a:	b094      	sub	sp, #80	; 0x50
 800e20c:	af04      	add	r7, sp, #16
 800e20e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e210:	2301      	movs	r3, #1
 800e212:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4618      	mov	r0, r3
 800e21a:	f000 fefd 	bl	800f018 <SDIO_GetPowerState>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d102      	bne.n	800e22a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e224:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e228:	e0b6      	b.n	800e398 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e22e:	2b03      	cmp	r3, #3
 800e230:	d02f      	beq.n	800e292 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4618      	mov	r0, r3
 800e238:	f001 f926 	bl	800f488 <SDMMC_CmdSendCID>
 800e23c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e240:	2b00      	cmp	r3, #0
 800e242:	d001      	beq.n	800e248 <SD_InitCard+0x40>
    {
      return errorstate;
 800e244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e246:	e0a7      	b.n	800e398 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2100      	movs	r1, #0
 800e24e:	4618      	mov	r0, r3
 800e250:	f000 ff27 	bl	800f0a2 <SDIO_GetResponse>
 800e254:	4602      	mov	r2, r0
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2104      	movs	r1, #4
 800e260:	4618      	mov	r0, r3
 800e262:	f000 ff1e 	bl	800f0a2 <SDIO_GetResponse>
 800e266:	4602      	mov	r2, r0
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2108      	movs	r1, #8
 800e272:	4618      	mov	r0, r3
 800e274:	f000 ff15 	bl	800f0a2 <SDIO_GetResponse>
 800e278:	4602      	mov	r2, r0
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	210c      	movs	r1, #12
 800e284:	4618      	mov	r0, r3
 800e286:	f000 ff0c 	bl	800f0a2 <SDIO_GetResponse>
 800e28a:	4602      	mov	r2, r0
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e296:	2b03      	cmp	r3, #3
 800e298:	d00d      	beq.n	800e2b6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f107 020e 	add.w	r2, r7, #14
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f001 f92c 	bl	800f502 <SDMMC_CmdSetRelAdd>
 800e2aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <SD_InitCard+0xae>
    {
      return errorstate;
 800e2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b4:	e070      	b.n	800e398 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ba:	2b03      	cmp	r3, #3
 800e2bc:	d036      	beq.n	800e32c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e2be:	89fb      	ldrh	r3, [r7, #14]
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2ce:	041b      	lsls	r3, r3, #16
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	f001 f8f6 	bl	800f4c4 <SDMMC_CmdSendCSD>
 800e2d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d001      	beq.n	800e2e4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2e2:	e059      	b.n	800e398 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2100      	movs	r1, #0
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f000 fed9 	bl	800f0a2 <SDIO_GetResponse>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2104      	movs	r1, #4
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f000 fed0 	bl	800f0a2 <SDIO_GetResponse>
 800e302:	4602      	mov	r2, r0
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2108      	movs	r1, #8
 800e30e:	4618      	mov	r0, r3
 800e310:	f000 fec7 	bl	800f0a2 <SDIO_GetResponse>
 800e314:	4602      	mov	r2, r0
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	210c      	movs	r1, #12
 800e320:	4618      	mov	r0, r3
 800e322:	f000 febe 	bl	800f0a2 <SDIO_GetResponse>
 800e326:	4602      	mov	r2, r0
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2104      	movs	r1, #4
 800e332:	4618      	mov	r0, r3
 800e334:	f000 feb5 	bl	800f0a2 <SDIO_GetResponse>
 800e338:	4603      	mov	r3, r0
 800e33a:	0d1a      	lsrs	r2, r3, #20
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e340:	f107 0310 	add.w	r3, r7, #16
 800e344:	4619      	mov	r1, r3
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7ff fbc6 	bl	800dad8 <HAL_SD_GetCardCSD>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d002      	beq.n	800e358 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e352:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e356:	e01f      	b.n	800e398 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6819      	ldr	r1, [r3, #0]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e360:	041b      	lsls	r3, r3, #16
 800e362:	461a      	mov	r2, r3
 800e364:	f04f 0300 	mov.w	r3, #0
 800e368:	4608      	mov	r0, r1
 800e36a:	f000 ffa5 	bl	800f2b8 <SDMMC_CmdSelDesel>
 800e36e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e372:	2b00      	cmp	r3, #0
 800e374:	d001      	beq.n	800e37a <SD_InitCard+0x172>
  {
    return errorstate;
 800e376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e378:	e00e      	b.n	800e398 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681d      	ldr	r5, [r3, #0]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	466c      	mov	r4, sp
 800e382:	f103 0210 	add.w	r2, r3, #16
 800e386:	ca07      	ldmia	r2, {r0, r1, r2}
 800e388:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e38c:	3304      	adds	r3, #4
 800e38e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e390:	4628      	mov	r0, r5
 800e392:	f000 fde9 	bl	800ef68 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e396:	2300      	movs	r3, #0
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3740      	adds	r7, #64	; 0x40
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bdb0      	pop	{r4, r5, r7, pc}

0800e3a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b086      	sub	sp, #24
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	617b      	str	r3, [r7, #20]
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f000 ffa0 	bl	800f2fe <SDMMC_CmdGoIdleState>
 800e3be:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d001      	beq.n	800e3ca <SD_PowerON+0x2a>
  {
    return errorstate;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	e072      	b.n	800e4b0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f000 ffb3 	bl	800f33a <SDMMC_CmdOperCond>
 800e3d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00d      	beq.n	800e3f8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f000 ff89 	bl	800f2fe <SDMMC_CmdGoIdleState>
 800e3ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d004      	beq.n	800e3fe <SD_PowerON+0x5e>
    {
      return errorstate;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	e05b      	b.n	800e4b0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e402:	2b01      	cmp	r3, #1
 800e404:	d137      	bne.n	800e476 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2100      	movs	r1, #0
 800e40c:	4618      	mov	r0, r3
 800e40e:	f000 ffb3 	bl	800f378 <SDMMC_CmdAppCommand>
 800e412:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d02d      	beq.n	800e476 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e41a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e41e:	e047      	b.n	800e4b0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2100      	movs	r1, #0
 800e426:	4618      	mov	r0, r3
 800e428:	f000 ffa6 	bl	800f378 <SDMMC_CmdAppCommand>
 800e42c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d001      	beq.n	800e438 <SD_PowerON+0x98>
    {
      return errorstate;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	e03b      	b.n	800e4b0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	491e      	ldr	r1, [pc, #120]	; (800e4b8 <SD_PowerON+0x118>)
 800e43e:	4618      	mov	r0, r3
 800e440:	f000 ffbc 	bl	800f3bc <SDMMC_CmdAppOperCommand>
 800e444:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d002      	beq.n	800e452 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e44c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e450:	e02e      	b.n	800e4b0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2100      	movs	r1, #0
 800e458:	4618      	mov	r0, r3
 800e45a:	f000 fe22 	bl	800f0a2 <SDIO_GetResponse>
 800e45e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	0fdb      	lsrs	r3, r3, #31
 800e464:	2b01      	cmp	r3, #1
 800e466:	d101      	bne.n	800e46c <SD_PowerON+0xcc>
 800e468:	2301      	movs	r3, #1
 800e46a:	e000      	b.n	800e46e <SD_PowerON+0xce>
 800e46c:	2300      	movs	r3, #0
 800e46e:	613b      	str	r3, [r7, #16]

    count++;
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	3301      	adds	r3, #1
 800e474:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d802      	bhi.n	800e486 <SD_PowerON+0xe6>
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d0cc      	beq.n	800e420 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d902      	bls.n	800e496 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e494:	e00c      	b.n	800e4b0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d003      	beq.n	800e4a8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	645a      	str	r2, [r3, #68]	; 0x44
 800e4a6:	e002      	b.n	800e4ae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e4ae:	2300      	movs	r3, #0
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3718      	adds	r7, #24
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	c1100000 	.word	0xc1100000

0800e4bc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d102      	bne.n	800e4d2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e4cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e4d0:	e018      	b.n	800e504 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4da:	041b      	lsls	r3, r3, #16
 800e4dc:	4619      	mov	r1, r3
 800e4de:	4610      	mov	r0, r2
 800e4e0:	f001 f830 	bl	800f544 <SDMMC_CmdSendStatus>
 800e4e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d001      	beq.n	800e4f0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	e009      	b.n	800e504 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f000 fdd3 	bl	800f0a2 <SDIO_GetResponse>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b086      	sub	sp, #24
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e514:	2300      	movs	r3, #0
 800e516:	60fb      	str	r3, [r7, #12]
 800e518:	2300      	movs	r3, #0
 800e51a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2100      	movs	r1, #0
 800e522:	4618      	mov	r0, r3
 800e524:	f000 fdbd 	bl	800f0a2 <SDIO_GetResponse>
 800e528:	4603      	mov	r3, r0
 800e52a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e52e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e532:	d102      	bne.n	800e53a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e538:	e02f      	b.n	800e59a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e53a:	f107 030c 	add.w	r3, r7, #12
 800e53e:	4619      	mov	r1, r3
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f879 	bl	800e638 <SD_FindSCR>
 800e546:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d001      	beq.n	800e552 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	e023      	b.n	800e59a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d01c      	beq.n	800e596 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e564:	041b      	lsls	r3, r3, #16
 800e566:	4619      	mov	r1, r3
 800e568:	4610      	mov	r0, r2
 800e56a:	f000 ff05 	bl	800f378 <SDMMC_CmdAppCommand>
 800e56e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	e00f      	b.n	800e59a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2102      	movs	r1, #2
 800e580:	4618      	mov	r0, r3
 800e582:	f000 ff3e 	bl	800f402 <SDMMC_CmdBusWidth>
 800e586:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d001      	beq.n	800e592 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	e003      	b.n	800e59a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e592:	2300      	movs	r3, #0
 800e594:	e001      	b.n	800e59a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e596:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3718      	adds	r7, #24
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}

0800e5a2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e5a2:	b580      	push	{r7, lr}
 800e5a4:	b086      	sub	sp, #24
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	60fb      	str	r3, [r7, #12]
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f000 fd72 	bl	800f0a2 <SDIO_GetResponse>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e5c8:	d102      	bne.n	800e5d0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e5ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5ce:	e02f      	b.n	800e630 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e5d0:	f107 030c 	add.w	r3, r7, #12
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 f82e 	bl	800e638 <SD_FindSCR>
 800e5dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d001      	beq.n	800e5e8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	e023      	b.n	800e630 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d01c      	beq.n	800e62c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5fa:	041b      	lsls	r3, r3, #16
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	4610      	mov	r0, r2
 800e600:	f000 feba 	bl	800f378 <SDMMC_CmdAppCommand>
 800e604:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d001      	beq.n	800e610 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	e00f      	b.n	800e630 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2100      	movs	r1, #0
 800e616:	4618      	mov	r0, r3
 800e618:	f000 fef3 	bl	800f402 <SDMMC_CmdBusWidth>
 800e61c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d001      	beq.n	800e628 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	e003      	b.n	800e630 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e628:	2300      	movs	r3, #0
 800e62a:	e001      	b.n	800e630 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e62c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e630:	4618      	mov	r0, r3
 800e632:	3718      	adds	r7, #24
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e638:	b590      	push	{r4, r7, lr}
 800e63a:	b08f      	sub	sp, #60	; 0x3c
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e642:	f7f8 fb21 	bl	8006c88 <HAL_GetTick>
 800e646:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e648:	2300      	movs	r3, #0
 800e64a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e64c:	2300      	movs	r3, #0
 800e64e:	60bb      	str	r3, [r7, #8]
 800e650:	2300      	movs	r3, #0
 800e652:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2108      	movs	r1, #8
 800e65e:	4618      	mov	r0, r3
 800e660:	f000 fd5e 	bl	800f120 <SDMMC_CmdBlockLength>
 800e664:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d001      	beq.n	800e670 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	e0b2      	b.n	800e7d6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e678:	041b      	lsls	r3, r3, #16
 800e67a:	4619      	mov	r1, r3
 800e67c:	4610      	mov	r0, r2
 800e67e:	f000 fe7b 	bl	800f378 <SDMMC_CmdAppCommand>
 800e682:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e686:	2b00      	cmp	r3, #0
 800e688:	d001      	beq.n	800e68e <SD_FindSCR+0x56>
  {
    return errorstate;
 800e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68c:	e0a3      	b.n	800e7d6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e68e:	f04f 33ff 	mov.w	r3, #4294967295
 800e692:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e694:	2308      	movs	r3, #8
 800e696:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e698:	2330      	movs	r3, #48	; 0x30
 800e69a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e69c:	2302      	movs	r3, #2
 800e69e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f107 0210 	add.w	r2, r7, #16
 800e6b0:	4611      	mov	r1, r2
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f000 fd08 	bl	800f0c8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f000 fec2 	bl	800f446 <SDMMC_CmdSendSCR>
 800e6c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d02a      	beq.n	800e720 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6cc:	e083      	b.n	800e7d6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00f      	beq.n	800e6fc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6819      	ldr	r1, [r3, #0]
 800e6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	f107 0208 	add.w	r2, r7, #8
 800e6e8:	18d4      	adds	r4, r2, r3
 800e6ea:	4608      	mov	r0, r1
 800e6ec:	f000 fc67 	bl	800efbe <SDIO_ReadFIFO>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	6023      	str	r3, [r4, #0]
      index++;
 800e6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	637b      	str	r3, [r7, #52]	; 0x34
 800e6fa:	e006      	b.n	800e70a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e706:	2b00      	cmp	r3, #0
 800e708:	d012      	beq.n	800e730 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e70a:	f7f8 fabd 	bl	8006c88 <HAL_GetTick>
 800e70e:	4602      	mov	r2, r0
 800e710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e712:	1ad3      	subs	r3, r2, r3
 800e714:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e718:	d102      	bne.n	800e720 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e71a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e71e:	e05a      	b.n	800e7d6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e726:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d0cf      	beq.n	800e6ce <SD_FindSCR+0x96>
 800e72e:	e000      	b.n	800e732 <SD_FindSCR+0xfa>
      break;
 800e730:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e738:	f003 0308 	and.w	r3, r3, #8
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d005      	beq.n	800e74c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2208      	movs	r2, #8
 800e746:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e748:	2308      	movs	r3, #8
 800e74a:	e044      	b.n	800e7d6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e752:	f003 0302 	and.w	r3, r3, #2
 800e756:	2b00      	cmp	r3, #0
 800e758:	d005      	beq.n	800e766 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2202      	movs	r2, #2
 800e760:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e762:	2302      	movs	r3, #2
 800e764:	e037      	b.n	800e7d6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e76c:	f003 0320 	and.w	r3, r3, #32
 800e770:	2b00      	cmp	r3, #0
 800e772:	d005      	beq.n	800e780 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2220      	movs	r2, #32
 800e77a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e77c:	2320      	movs	r3, #32
 800e77e:	e02a      	b.n	800e7d6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f240 523a 	movw	r2, #1338	; 0x53a
 800e788:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	061a      	lsls	r2, r3, #24
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	021b      	lsls	r3, r3, #8
 800e792:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e796:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	0a1b      	lsrs	r3, r3, #8
 800e79c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7a0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	0e1b      	lsrs	r3, r3, #24
 800e7a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7aa:	601a      	str	r2, [r3, #0]
    scr++;
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	3304      	adds	r3, #4
 800e7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	061a      	lsls	r2, r3, #24
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	021b      	lsls	r3, r3, #8
 800e7ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	0a1b      	lsrs	r3, r3, #8
 800e7c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e7c8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	0e1b      	lsrs	r3, r3, #24
 800e7ce:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	373c      	adds	r7, #60	; 0x3c
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd90      	pop	{r4, r7, pc}

0800e7de <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b086      	sub	sp, #24
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d03f      	beq.n	800e878 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	617b      	str	r3, [r7, #20]
 800e7fc:	e033      	b.n	800e866 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4618      	mov	r0, r3
 800e804:	f000 fbdb 	bl	800efbe <SDIO_ReadFIFO>
 800e808:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	b2da      	uxtb	r2, r3
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	3301      	adds	r3, #1
 800e816:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	3b01      	subs	r3, #1
 800e81c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	0a1b      	lsrs	r3, r3, #8
 800e822:	b2da      	uxtb	r2, r3
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	3301      	adds	r3, #1
 800e82c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	3b01      	subs	r3, #1
 800e832:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	0c1b      	lsrs	r3, r3, #16
 800e838:	b2da      	uxtb	r2, r3
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	3301      	adds	r3, #1
 800e842:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	3b01      	subs	r3, #1
 800e848:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	0e1b      	lsrs	r3, r3, #24
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	3301      	adds	r3, #1
 800e858:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	3b01      	subs	r3, #1
 800e85e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	3301      	adds	r3, #1
 800e864:	617b      	str	r3, [r7, #20]
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	2b07      	cmp	r3, #7
 800e86a:	d9c8      	bls.n	800e7fe <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	68fa      	ldr	r2, [r7, #12]
 800e870:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	693a      	ldr	r2, [r7, #16]
 800e876:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e878:	bf00      	nop
 800e87a:	3718      	adds	r7, #24
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b086      	sub	sp, #24
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6a1b      	ldr	r3, [r3, #32]
 800e88c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e892:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d043      	beq.n	800e922 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e89a:	2300      	movs	r3, #0
 800e89c:	617b      	str	r3, [r7, #20]
 800e89e:	e037      	b.n	800e910 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	021a      	lsls	r2, r3, #8
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	041a      	lsls	r2, r3, #16
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	3b01      	subs	r3, #1
 800e8e0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	061a      	lsls	r2, r3, #24
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	3b01      	subs	r3, #1
 800e8f8:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f107 0208 	add.w	r2, r7, #8
 800e902:	4611      	mov	r1, r2
 800e904:	4618      	mov	r0, r3
 800e906:	f000 fb67 	bl	800efd8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	3301      	adds	r3, #1
 800e90e:	617b      	str	r3, [r7, #20]
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	2b07      	cmp	r3, #7
 800e914:	d9c4      	bls.n	800e8a0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	693a      	ldr	r2, [r7, #16]
 800e920:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e922:	bf00      	nop
 800e924:	3718      	adds	r7, #24
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b082      	sub	sp, #8
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d101      	bne.n	800e93c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e938:	2301      	movs	r3, #1
 800e93a:	e041      	b.n	800e9c0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e942:	b2db      	uxtb	r3, r3
 800e944:	2b00      	cmp	r3, #0
 800e946:	d106      	bne.n	800e956 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7f8 f813 	bl	800697c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2202      	movs	r2, #2
 800e95a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	3304      	adds	r3, #4
 800e966:	4619      	mov	r1, r3
 800e968:	4610      	mov	r0, r2
 800e96a:	f000 f9cd 	bl	800ed08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2201      	movs	r2, #1
 800e972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2201      	movs	r2, #1
 800e97a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2201      	movs	r2, #1
 800e982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2201      	movs	r2, #1
 800e98a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2201      	movs	r2, #1
 800e992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2201      	movs	r2, #1
 800e99a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e9be:	2300      	movs	r3, #0
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	d001      	beq.n	800e9e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	e04e      	b.n	800ea7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2202      	movs	r2, #2
 800e9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	68da      	ldr	r2, [r3, #12]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f042 0201 	orr.w	r2, r2, #1
 800e9f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a23      	ldr	r2, [pc, #140]	; (800ea8c <HAL_TIM_Base_Start_IT+0xc4>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d022      	beq.n	800ea48 <HAL_TIM_Base_Start_IT+0x80>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea0a:	d01d      	beq.n	800ea48 <HAL_TIM_Base_Start_IT+0x80>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4a1f      	ldr	r2, [pc, #124]	; (800ea90 <HAL_TIM_Base_Start_IT+0xc8>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d018      	beq.n	800ea48 <HAL_TIM_Base_Start_IT+0x80>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a1e      	ldr	r2, [pc, #120]	; (800ea94 <HAL_TIM_Base_Start_IT+0xcc>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d013      	beq.n	800ea48 <HAL_TIM_Base_Start_IT+0x80>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4a1c      	ldr	r2, [pc, #112]	; (800ea98 <HAL_TIM_Base_Start_IT+0xd0>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d00e      	beq.n	800ea48 <HAL_TIM_Base_Start_IT+0x80>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a1b      	ldr	r2, [pc, #108]	; (800ea9c <HAL_TIM_Base_Start_IT+0xd4>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d009      	beq.n	800ea48 <HAL_TIM_Base_Start_IT+0x80>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4a19      	ldr	r2, [pc, #100]	; (800eaa0 <HAL_TIM_Base_Start_IT+0xd8>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d004      	beq.n	800ea48 <HAL_TIM_Base_Start_IT+0x80>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	4a18      	ldr	r2, [pc, #96]	; (800eaa4 <HAL_TIM_Base_Start_IT+0xdc>)
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d111      	bne.n	800ea6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	f003 0307 	and.w	r3, r3, #7
 800ea52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2b06      	cmp	r3, #6
 800ea58:	d010      	beq.n	800ea7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f042 0201 	orr.w	r2, r2, #1
 800ea68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea6a:	e007      	b.n	800ea7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f042 0201 	orr.w	r2, r2, #1
 800ea7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3714      	adds	r7, #20
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	40010000 	.word	0x40010000
 800ea90:	40000400 	.word	0x40000400
 800ea94:	40000800 	.word	0x40000800
 800ea98:	40000c00 	.word	0x40000c00
 800ea9c:	40010400 	.word	0x40010400
 800eaa0:	40014000 	.word	0x40014000
 800eaa4:	40001800 	.word	0x40001800

0800eaa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	691b      	ldr	r3, [r3, #16]
 800eab6:	f003 0302 	and.w	r3, r3, #2
 800eaba:	2b02      	cmp	r3, #2
 800eabc:	d122      	bne.n	800eb04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	68db      	ldr	r3, [r3, #12]
 800eac4:	f003 0302 	and.w	r3, r3, #2
 800eac8:	2b02      	cmp	r3, #2
 800eaca:	d11b      	bne.n	800eb04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f06f 0202 	mvn.w	r2, #2
 800ead4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2201      	movs	r2, #1
 800eada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	699b      	ldr	r3, [r3, #24]
 800eae2:	f003 0303 	and.w	r3, r3, #3
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d003      	beq.n	800eaf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 f8ee 	bl	800eccc <HAL_TIM_IC_CaptureCallback>
 800eaf0:	e005      	b.n	800eafe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 f8e0 	bl	800ecb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 f8f1 	bl	800ece0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2200      	movs	r2, #0
 800eb02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	691b      	ldr	r3, [r3, #16]
 800eb0a:	f003 0304 	and.w	r3, r3, #4
 800eb0e:	2b04      	cmp	r3, #4
 800eb10:	d122      	bne.n	800eb58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	f003 0304 	and.w	r3, r3, #4
 800eb1c:	2b04      	cmp	r3, #4
 800eb1e:	d11b      	bne.n	800eb58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f06f 0204 	mvn.w	r2, #4
 800eb28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2202      	movs	r2, #2
 800eb2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	699b      	ldr	r3, [r3, #24]
 800eb36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d003      	beq.n	800eb46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 f8c4 	bl	800eccc <HAL_TIM_IC_CaptureCallback>
 800eb44:	e005      	b.n	800eb52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 f8b6 	bl	800ecb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f000 f8c7 	bl	800ece0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2200      	movs	r2, #0
 800eb56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	691b      	ldr	r3, [r3, #16]
 800eb5e:	f003 0308 	and.w	r3, r3, #8
 800eb62:	2b08      	cmp	r3, #8
 800eb64:	d122      	bne.n	800ebac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	f003 0308 	and.w	r3, r3, #8
 800eb70:	2b08      	cmp	r3, #8
 800eb72:	d11b      	bne.n	800ebac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f06f 0208 	mvn.w	r2, #8
 800eb7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2204      	movs	r2, #4
 800eb82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	69db      	ldr	r3, [r3, #28]
 800eb8a:	f003 0303 	and.w	r3, r3, #3
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d003      	beq.n	800eb9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 f89a 	bl	800eccc <HAL_TIM_IC_CaptureCallback>
 800eb98:	e005      	b.n	800eba6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 f88c 	bl	800ecb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f000 f89d 	bl	800ece0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	691b      	ldr	r3, [r3, #16]
 800ebb2:	f003 0310 	and.w	r3, r3, #16
 800ebb6:	2b10      	cmp	r3, #16
 800ebb8:	d122      	bne.n	800ec00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	f003 0310 	and.w	r3, r3, #16
 800ebc4:	2b10      	cmp	r3, #16
 800ebc6:	d11b      	bne.n	800ec00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f06f 0210 	mvn.w	r2, #16
 800ebd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2208      	movs	r2, #8
 800ebd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	69db      	ldr	r3, [r3, #28]
 800ebde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d003      	beq.n	800ebee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 f870 	bl	800eccc <HAL_TIM_IC_CaptureCallback>
 800ebec:	e005      	b.n	800ebfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 f862 	bl	800ecb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f000 f873 	bl	800ece0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	691b      	ldr	r3, [r3, #16]
 800ec06:	f003 0301 	and.w	r3, r3, #1
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d10e      	bne.n	800ec2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	f003 0301 	and.w	r3, r3, #1
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d107      	bne.n	800ec2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f06f 0201 	mvn.w	r2, #1
 800ec24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7f7 fb46 	bl	80062b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	691b      	ldr	r3, [r3, #16]
 800ec32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec36:	2b80      	cmp	r3, #128	; 0x80
 800ec38:	d10e      	bne.n	800ec58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec44:	2b80      	cmp	r3, #128	; 0x80
 800ec46:	d107      	bne.n	800ec58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ec50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 f97e 	bl	800ef54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec62:	2b40      	cmp	r3, #64	; 0x40
 800ec64:	d10e      	bne.n	800ec84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec70:	2b40      	cmp	r3, #64	; 0x40
 800ec72:	d107      	bne.n	800ec84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ec7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 f838 	bl	800ecf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	691b      	ldr	r3, [r3, #16]
 800ec8a:	f003 0320 	and.w	r3, r3, #32
 800ec8e:	2b20      	cmp	r3, #32
 800ec90:	d10e      	bne.n	800ecb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	f003 0320 	and.w	r3, r3, #32
 800ec9c:	2b20      	cmp	r3, #32
 800ec9e:	d107      	bne.n	800ecb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f06f 0220 	mvn.w	r2, #32
 800eca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 f948 	bl	800ef40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ecb0:	bf00      	nop
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ecc0:	bf00      	nop
 800ecc2:	370c      	adds	r7, #12
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr

0800eccc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b083      	sub	sp, #12
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ecd4:	bf00      	nop
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ece8:	bf00      	nop
 800ecea:	370c      	adds	r7, #12
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr

0800ecf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ecfc:	bf00      	nop
 800ecfe:	370c      	adds	r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b085      	sub	sp, #20
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	4a40      	ldr	r2, [pc, #256]	; (800ee1c <TIM_Base_SetConfig+0x114>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d013      	beq.n	800ed48 <TIM_Base_SetConfig+0x40>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed26:	d00f      	beq.n	800ed48 <TIM_Base_SetConfig+0x40>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	4a3d      	ldr	r2, [pc, #244]	; (800ee20 <TIM_Base_SetConfig+0x118>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d00b      	beq.n	800ed48 <TIM_Base_SetConfig+0x40>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	4a3c      	ldr	r2, [pc, #240]	; (800ee24 <TIM_Base_SetConfig+0x11c>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d007      	beq.n	800ed48 <TIM_Base_SetConfig+0x40>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	4a3b      	ldr	r2, [pc, #236]	; (800ee28 <TIM_Base_SetConfig+0x120>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d003      	beq.n	800ed48 <TIM_Base_SetConfig+0x40>
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	4a3a      	ldr	r2, [pc, #232]	; (800ee2c <TIM_Base_SetConfig+0x124>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d108      	bne.n	800ed5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	4313      	orrs	r3, r2
 800ed58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4a2f      	ldr	r2, [pc, #188]	; (800ee1c <TIM_Base_SetConfig+0x114>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d02b      	beq.n	800edba <TIM_Base_SetConfig+0xb2>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed68:	d027      	beq.n	800edba <TIM_Base_SetConfig+0xb2>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4a2c      	ldr	r2, [pc, #176]	; (800ee20 <TIM_Base_SetConfig+0x118>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d023      	beq.n	800edba <TIM_Base_SetConfig+0xb2>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	4a2b      	ldr	r2, [pc, #172]	; (800ee24 <TIM_Base_SetConfig+0x11c>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d01f      	beq.n	800edba <TIM_Base_SetConfig+0xb2>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4a2a      	ldr	r2, [pc, #168]	; (800ee28 <TIM_Base_SetConfig+0x120>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d01b      	beq.n	800edba <TIM_Base_SetConfig+0xb2>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4a29      	ldr	r2, [pc, #164]	; (800ee2c <TIM_Base_SetConfig+0x124>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d017      	beq.n	800edba <TIM_Base_SetConfig+0xb2>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	4a28      	ldr	r2, [pc, #160]	; (800ee30 <TIM_Base_SetConfig+0x128>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d013      	beq.n	800edba <TIM_Base_SetConfig+0xb2>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4a27      	ldr	r2, [pc, #156]	; (800ee34 <TIM_Base_SetConfig+0x12c>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d00f      	beq.n	800edba <TIM_Base_SetConfig+0xb2>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4a26      	ldr	r2, [pc, #152]	; (800ee38 <TIM_Base_SetConfig+0x130>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d00b      	beq.n	800edba <TIM_Base_SetConfig+0xb2>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4a25      	ldr	r2, [pc, #148]	; (800ee3c <TIM_Base_SetConfig+0x134>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d007      	beq.n	800edba <TIM_Base_SetConfig+0xb2>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4a24      	ldr	r2, [pc, #144]	; (800ee40 <TIM_Base_SetConfig+0x138>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d003      	beq.n	800edba <TIM_Base_SetConfig+0xb2>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	4a23      	ldr	r2, [pc, #140]	; (800ee44 <TIM_Base_SetConfig+0x13c>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d108      	bne.n	800edcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800edc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	68db      	ldr	r3, [r3, #12]
 800edc6:	68fa      	ldr	r2, [r7, #12]
 800edc8:	4313      	orrs	r3, r2
 800edca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	695b      	ldr	r3, [r3, #20]
 800edd6:	4313      	orrs	r3, r2
 800edd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	689a      	ldr	r2, [r3, #8]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4a0a      	ldr	r2, [pc, #40]	; (800ee1c <TIM_Base_SetConfig+0x114>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d003      	beq.n	800ee00 <TIM_Base_SetConfig+0xf8>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4a0c      	ldr	r2, [pc, #48]	; (800ee2c <TIM_Base_SetConfig+0x124>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d103      	bne.n	800ee08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	691a      	ldr	r2, [r3, #16]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	615a      	str	r2, [r3, #20]
}
 800ee0e:	bf00      	nop
 800ee10:	3714      	adds	r7, #20
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop
 800ee1c:	40010000 	.word	0x40010000
 800ee20:	40000400 	.word	0x40000400
 800ee24:	40000800 	.word	0x40000800
 800ee28:	40000c00 	.word	0x40000c00
 800ee2c:	40010400 	.word	0x40010400
 800ee30:	40014000 	.word	0x40014000
 800ee34:	40014400 	.word	0x40014400
 800ee38:	40014800 	.word	0x40014800
 800ee3c:	40001800 	.word	0x40001800
 800ee40:	40001c00 	.word	0x40001c00
 800ee44:	40002000 	.word	0x40002000

0800ee48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d101      	bne.n	800ee60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ee5c:	2302      	movs	r3, #2
 800ee5e:	e05a      	b.n	800ef16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2201      	movs	r2, #1
 800ee64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2202      	movs	r2, #2
 800ee6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	689b      	ldr	r3, [r3, #8]
 800ee7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	68fa      	ldr	r2, [r7, #12]
 800ee98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a21      	ldr	r2, [pc, #132]	; (800ef24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d022      	beq.n	800eeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eeac:	d01d      	beq.n	800eeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a1d      	ldr	r2, [pc, #116]	; (800ef28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d018      	beq.n	800eeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a1b      	ldr	r2, [pc, #108]	; (800ef2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d013      	beq.n	800eeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a1a      	ldr	r2, [pc, #104]	; (800ef30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d00e      	beq.n	800eeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a18      	ldr	r2, [pc, #96]	; (800ef34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d009      	beq.n	800eeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4a17      	ldr	r2, [pc, #92]	; (800ef38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d004      	beq.n	800eeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4a15      	ldr	r2, [pc, #84]	; (800ef3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d10c      	bne.n	800ef04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	68ba      	ldr	r2, [r7, #8]
 800eef8:	4313      	orrs	r3, r2
 800eefa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	68ba      	ldr	r2, [r7, #8]
 800ef02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2201      	movs	r2, #1
 800ef08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ef14:	2300      	movs	r3, #0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3714      	adds	r7, #20
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	40010000 	.word	0x40010000
 800ef28:	40000400 	.word	0x40000400
 800ef2c:	40000800 	.word	0x40000800
 800ef30:	40000c00 	.word	0x40000c00
 800ef34:	40010400 	.word	0x40010400
 800ef38:	40014000 	.word	0x40014000
 800ef3c:	40001800 	.word	0x40001800

0800ef40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ef40:	b480      	push	{r7}
 800ef42:	b083      	sub	sp, #12
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ef48:	bf00      	nop
 800ef4a:	370c      	adds	r7, #12
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr

0800ef54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b083      	sub	sp, #12
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ef5c:	bf00      	nop
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ef68:	b084      	sub	sp, #16
 800ef6a:	b480      	push	{r7}
 800ef6c:	b085      	sub	sp, #20
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
 800ef72:	f107 001c 	add.w	r0, r7, #28
 800ef76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ef7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ef80:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ef82:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ef84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ef86:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ef88:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ef8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ef8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ef8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ef90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ef92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ef94:	68fa      	ldr	r2, [r7, #12]
 800ef96:	4313      	orrs	r3, r2
 800ef98:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800efa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	431a      	orrs	r2, r3
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800efae:	2300      	movs	r3, #0
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3714      	adds	r7, #20
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	b004      	add	sp, #16
 800efbc:	4770      	bx	lr

0800efbe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800efbe:	b480      	push	{r7}
 800efc0:	b083      	sub	sp, #12
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800efcc:	4618      	mov	r0, r3
 800efce:	370c      	adds	r7, #12
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr

0800efd8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800efec:	2300      	movs	r3, #0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	370c      	adds	r7, #12
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr

0800effa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800effa:	b580      	push	{r7, lr}
 800effc:	b082      	sub	sp, #8
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2203      	movs	r2, #3
 800f006:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f008:	2002      	movs	r0, #2
 800f00a:	f7f7 fe49 	bl	8006ca0 <HAL_Delay>
  
  return HAL_OK;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f003 0303 	and.w	r3, r3, #3
}
 800f028:	4618      	mov	r0, r3
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f03e:	2300      	movs	r3, #0
 800f040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f052:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f058:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f05e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	4313      	orrs	r3, r2
 800f064:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f06e:	f023 030f 	bic.w	r3, r3, #15
 800f072:	68fa      	ldr	r2, [r7, #12]
 800f074:	431a      	orrs	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f07a:	2300      	movs	r3, #0
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3714      	adds	r7, #20
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f088:	b480      	push	{r7}
 800f08a:	b083      	sub	sp, #12
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	691b      	ldr	r3, [r3, #16]
 800f094:	b2db      	uxtb	r3, r3
}
 800f096:	4618      	mov	r0, r3
 800f098:	370c      	adds	r7, #12
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr

0800f0a2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f0a2:	b480      	push	{r7}
 800f0a4:	b085      	sub	sp, #20
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	3314      	adds	r3, #20
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	4413      	add	r3, r2
 800f0b6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
}  
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3714      	adds	r7, #20
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b085      	sub	sp, #20
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	681a      	ldr	r2, [r3, #0]
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	685a      	ldr	r2, [r3, #4]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f0ee:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f0f4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f0fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	4313      	orrs	r3, r2
 800f100:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f106:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	431a      	orrs	r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f112:	2300      	movs	r3, #0

}
 800f114:	4618      	mov	r0, r3
 800f116:	3714      	adds	r7, #20
 800f118:	46bd      	mov	sp, r7
 800f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11e:	4770      	bx	lr

0800f120 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b088      	sub	sp, #32
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f12e:	2310      	movs	r3, #16
 800f130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f132:	2340      	movs	r3, #64	; 0x40
 800f134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f136:	2300      	movs	r3, #0
 800f138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f13a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f13e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f140:	f107 0308 	add.w	r3, r7, #8
 800f144:	4619      	mov	r1, r3
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f7ff ff74 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f14c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f150:	2110      	movs	r1, #16
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 fa44 	bl	800f5e0 <SDMMC_GetCmdResp1>
 800f158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f15a:	69fb      	ldr	r3, [r7, #28]
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3720      	adds	r7, #32
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b088      	sub	sp, #32
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f172:	2311      	movs	r3, #17
 800f174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f176:	2340      	movs	r3, #64	; 0x40
 800f178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f17a:	2300      	movs	r3, #0
 800f17c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f17e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f182:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f184:	f107 0308 	add.w	r3, r7, #8
 800f188:	4619      	mov	r1, r3
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7ff ff52 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f190:	f241 3288 	movw	r2, #5000	; 0x1388
 800f194:	2111      	movs	r1, #17
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 fa22 	bl	800f5e0 <SDMMC_GetCmdResp1>
 800f19c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f19e:	69fb      	ldr	r3, [r7, #28]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3720      	adds	r7, #32
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b088      	sub	sp, #32
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f1b6:	2312      	movs	r3, #18
 800f1b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f1ba:	2340      	movs	r3, #64	; 0x40
 800f1bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f1c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f1c8:	f107 0308 	add.w	r3, r7, #8
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f7ff ff30 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f1d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1d8:	2112      	movs	r1, #18
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fa00 	bl	800f5e0 <SDMMC_GetCmdResp1>
 800f1e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f1e2:	69fb      	ldr	r3, [r7, #28]
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3720      	adds	r7, #32
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b088      	sub	sp, #32
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f1fa:	2318      	movs	r3, #24
 800f1fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f1fe:	2340      	movs	r3, #64	; 0x40
 800f200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f202:	2300      	movs	r3, #0
 800f204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f20a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f20c:	f107 0308 	add.w	r3, r7, #8
 800f210:	4619      	mov	r1, r3
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f7ff ff0e 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f218:	f241 3288 	movw	r2, #5000	; 0x1388
 800f21c:	2118      	movs	r1, #24
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 f9de 	bl	800f5e0 <SDMMC_GetCmdResp1>
 800f224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f226:	69fb      	ldr	r3, [r7, #28]
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3720      	adds	r7, #32
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b088      	sub	sp, #32
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f23e:	2319      	movs	r3, #25
 800f240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f242:	2340      	movs	r3, #64	; 0x40
 800f244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f246:	2300      	movs	r3, #0
 800f248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f24e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f250:	f107 0308 	add.w	r3, r7, #8
 800f254:	4619      	mov	r1, r3
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7ff feec 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f260:	2119      	movs	r1, #25
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 f9bc 	bl	800f5e0 <SDMMC_GetCmdResp1>
 800f268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f26a:	69fb      	ldr	r3, [r7, #28]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3720      	adds	r7, #32
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b088      	sub	sp, #32
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f27c:	2300      	movs	r3, #0
 800f27e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f280:	230c      	movs	r3, #12
 800f282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f284:	2340      	movs	r3, #64	; 0x40
 800f286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f288:	2300      	movs	r3, #0
 800f28a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f28c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f290:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f292:	f107 0308 	add.w	r3, r7, #8
 800f296:	4619      	mov	r1, r3
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7ff fecb 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f29e:	4a05      	ldr	r2, [pc, #20]	; (800f2b4 <SDMMC_CmdStopTransfer+0x40>)
 800f2a0:	210c      	movs	r1, #12
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 f99c 	bl	800f5e0 <SDMMC_GetCmdResp1>
 800f2a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2aa:	69fb      	ldr	r3, [r7, #28]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3720      	adds	r7, #32
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	05f5e100 	.word	0x05f5e100

0800f2b8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b08a      	sub	sp, #40	; 0x28
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f2c8:	2307      	movs	r3, #7
 800f2ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f2cc:	2340      	movs	r3, #64	; 0x40
 800f2ce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f2d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2d8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f2da:	f107 0310 	add.w	r3, r7, #16
 800f2de:	4619      	mov	r1, r3
 800f2e0:	68f8      	ldr	r0, [r7, #12]
 800f2e2:	f7ff fea7 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f2e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2ea:	2107      	movs	r1, #7
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f000 f977 	bl	800f5e0 <SDMMC_GetCmdResp1>
 800f2f2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3728      	adds	r7, #40	; 0x28
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b088      	sub	sp, #32
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f306:	2300      	movs	r3, #0
 800f308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f30a:	2300      	movs	r3, #0
 800f30c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f30e:	2300      	movs	r3, #0
 800f310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f312:	2300      	movs	r3, #0
 800f314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f31a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f31c:	f107 0308 	add.w	r3, r7, #8
 800f320:	4619      	mov	r1, r3
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f7ff fe86 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f000 f92d 	bl	800f588 <SDMMC_GetCmdError>
 800f32e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f330:	69fb      	ldr	r3, [r7, #28]
}
 800f332:	4618      	mov	r0, r3
 800f334:	3720      	adds	r7, #32
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b088      	sub	sp, #32
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f342:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f348:	2308      	movs	r3, #8
 800f34a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f34c:	2340      	movs	r3, #64	; 0x40
 800f34e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f350:	2300      	movs	r3, #0
 800f352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f358:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f35a:	f107 0308 	add.w	r3, r7, #8
 800f35e:	4619      	mov	r1, r3
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7ff fe67 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 fb24 	bl	800f9b4 <SDMMC_GetCmdResp7>
 800f36c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f36e:	69fb      	ldr	r3, [r7, #28]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3720      	adds	r7, #32
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b088      	sub	sp, #32
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f386:	2337      	movs	r3, #55	; 0x37
 800f388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f38a:	2340      	movs	r3, #64	; 0x40
 800f38c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f38e:	2300      	movs	r3, #0
 800f390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f396:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f398:	f107 0308 	add.w	r3, r7, #8
 800f39c:	4619      	mov	r1, r3
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7ff fe48 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800f3a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3a8:	2137      	movs	r1, #55	; 0x37
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 f918 	bl	800f5e0 <SDMMC_GetCmdResp1>
 800f3b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3b2:	69fb      	ldr	r3, [r7, #28]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3720      	adds	r7, #32
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b088      	sub	sp, #32
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f3cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f3d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f3d2:	2329      	movs	r3, #41	; 0x29
 800f3d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f3d6:	2340      	movs	r3, #64	; 0x40
 800f3d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f3e4:	f107 0308 	add.w	r3, r7, #8
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7ff fe22 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 fa2b 	bl	800f84c <SDMMC_GetCmdResp3>
 800f3f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3f8:	69fb      	ldr	r3, [r7, #28]
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3720      	adds	r7, #32
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}

0800f402 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800f402:	b580      	push	{r7, lr}
 800f404:	b088      	sub	sp, #32
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
 800f40a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f410:	2306      	movs	r3, #6
 800f412:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f414:	2340      	movs	r3, #64	; 0x40
 800f416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f418:	2300      	movs	r3, #0
 800f41a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f41c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f420:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f422:	f107 0308 	add.w	r3, r7, #8
 800f426:	4619      	mov	r1, r3
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f7ff fe03 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800f42e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f432:	2106      	movs	r1, #6
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 f8d3 	bl	800f5e0 <SDMMC_GetCmdResp1>
 800f43a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f43c:	69fb      	ldr	r3, [r7, #28]
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3720      	adds	r7, #32
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800f446:	b580      	push	{r7, lr}
 800f448:	b088      	sub	sp, #32
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f44e:	2300      	movs	r3, #0
 800f450:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f452:	2333      	movs	r3, #51	; 0x33
 800f454:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f456:	2340      	movs	r3, #64	; 0x40
 800f458:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f45a:	2300      	movs	r3, #0
 800f45c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f45e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f462:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f464:	f107 0308 	add.w	r3, r7, #8
 800f468:	4619      	mov	r1, r3
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f7ff fde2 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800f470:	f241 3288 	movw	r2, #5000	; 0x1388
 800f474:	2133      	movs	r1, #51	; 0x33
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f000 f8b2 	bl	800f5e0 <SDMMC_GetCmdResp1>
 800f47c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f47e:	69fb      	ldr	r3, [r7, #28]
}
 800f480:	4618      	mov	r0, r3
 800f482:	3720      	adds	r7, #32
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b088      	sub	sp, #32
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f490:	2300      	movs	r3, #0
 800f492:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f494:	2302      	movs	r3, #2
 800f496:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f498:	23c0      	movs	r3, #192	; 0xc0
 800f49a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f49c:	2300      	movs	r3, #0
 800f49e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f4a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f4a6:	f107 0308 	add.w	r3, r7, #8
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7ff fdc1 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 f982 	bl	800f7bc <SDMMC_GetCmdResp2>
 800f4b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4ba:	69fb      	ldr	r3, [r7, #28]
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3720      	adds	r7, #32
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b088      	sub	sp, #32
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f4d2:	2309      	movs	r3, #9
 800f4d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f4d6:	23c0      	movs	r3, #192	; 0xc0
 800f4d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f4de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f4e4:	f107 0308 	add.w	r3, r7, #8
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f7ff fda2 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 f963 	bl	800f7bc <SDMMC_GetCmdResp2>
 800f4f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4f8:	69fb      	ldr	r3, [r7, #28]
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3720      	adds	r7, #32
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800f502:	b580      	push	{r7, lr}
 800f504:	b088      	sub	sp, #32
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
 800f50a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f50c:	2300      	movs	r3, #0
 800f50e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f510:	2303      	movs	r3, #3
 800f512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f514:	2340      	movs	r3, #64	; 0x40
 800f516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f518:	2300      	movs	r3, #0
 800f51a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f51c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f520:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f522:	f107 0308 	add.w	r3, r7, #8
 800f526:	4619      	mov	r1, r3
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f7ff fd83 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f52e:	683a      	ldr	r2, [r7, #0]
 800f530:	2103      	movs	r1, #3
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f000 f9c8 	bl	800f8c8 <SDMMC_GetCmdResp6>
 800f538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f53a:	69fb      	ldr	r3, [r7, #28]
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3720      	adds	r7, #32
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b088      	sub	sp, #32
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f552:	230d      	movs	r3, #13
 800f554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f556:	2340      	movs	r3, #64	; 0x40
 800f558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f55a:	2300      	movs	r3, #0
 800f55c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f562:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f564:	f107 0308 	add.w	r3, r7, #8
 800f568:	4619      	mov	r1, r3
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f7ff fd62 	bl	800f034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800f570:	f241 3288 	movw	r2, #5000	; 0x1388
 800f574:	210d      	movs	r1, #13
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f000 f832 	bl	800f5e0 <SDMMC_GetCmdResp1>
 800f57c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f57e:	69fb      	ldr	r3, [r7, #28]
}
 800f580:	4618      	mov	r0, r3
 800f582:	3720      	adds	r7, #32
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f588:	b480      	push	{r7}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f590:	4b11      	ldr	r3, [pc, #68]	; (800f5d8 <SDMMC_GetCmdError+0x50>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	4a11      	ldr	r2, [pc, #68]	; (800f5dc <SDMMC_GetCmdError+0x54>)
 800f596:	fba2 2303 	umull	r2, r3, r2, r3
 800f59a:	0a5b      	lsrs	r3, r3, #9
 800f59c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5a0:	fb02 f303 	mul.w	r3, r2, r3
 800f5a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	1e5a      	subs	r2, r3, #1
 800f5aa:	60fa      	str	r2, [r7, #12]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d102      	bne.n	800f5b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f5b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f5b4:	e009      	b.n	800f5ca <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d0f1      	beq.n	800f5a6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	22c5      	movs	r2, #197	; 0xc5
 800f5c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f5c8:	2300      	movs	r3, #0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3714      	adds	r7, #20
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr
 800f5d6:	bf00      	nop
 800f5d8:	20000000 	.word	0x20000000
 800f5dc:	10624dd3 	.word	0x10624dd3

0800f5e0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b088      	sub	sp, #32
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	607a      	str	r2, [r7, #4]
 800f5ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f5ee:	4b70      	ldr	r3, [pc, #448]	; (800f7b0 <SDMMC_GetCmdResp1+0x1d0>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a70      	ldr	r2, [pc, #448]	; (800f7b4 <SDMMC_GetCmdResp1+0x1d4>)
 800f5f4:	fba2 2303 	umull	r2, r3, r2, r3
 800f5f8:	0a5a      	lsrs	r2, r3, #9
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	fb02 f303 	mul.w	r3, r2, r3
 800f600:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	1e5a      	subs	r2, r3, #1
 800f606:	61fa      	str	r2, [r7, #28]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d102      	bne.n	800f612 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f60c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f610:	e0c9      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f616:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d0ef      	beq.n	800f602 <SDMMC_GetCmdResp1+0x22>
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d1ea      	bne.n	800f602 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f630:	f003 0304 	and.w	r3, r3, #4
 800f634:	2b00      	cmp	r3, #0
 800f636:	d004      	beq.n	800f642 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2204      	movs	r2, #4
 800f63c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f63e:	2304      	movs	r3, #4
 800f640:	e0b1      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f646:	f003 0301 	and.w	r3, r3, #1
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d004      	beq.n	800f658 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2201      	movs	r2, #1
 800f652:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f654:	2301      	movs	r3, #1
 800f656:	e0a6      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	22c5      	movs	r2, #197	; 0xc5
 800f65c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f65e:	68f8      	ldr	r0, [r7, #12]
 800f660:	f7ff fd12 	bl	800f088 <SDIO_GetCommandResponse>
 800f664:	4603      	mov	r3, r0
 800f666:	461a      	mov	r2, r3
 800f668:	7afb      	ldrb	r3, [r7, #11]
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d001      	beq.n	800f672 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f66e:	2301      	movs	r3, #1
 800f670:	e099      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f672:	2100      	movs	r1, #0
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f7ff fd14 	bl	800f0a2 <SDIO_GetResponse>
 800f67a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f67c:	697a      	ldr	r2, [r7, #20]
 800f67e:	4b4e      	ldr	r3, [pc, #312]	; (800f7b8 <SDMMC_GetCmdResp1+0x1d8>)
 800f680:	4013      	ands	r3, r2
 800f682:	2b00      	cmp	r3, #0
 800f684:	d101      	bne.n	800f68a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f686:	2300      	movs	r3, #0
 800f688:	e08d      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	da02      	bge.n	800f696 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f694:	e087      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d001      	beq.n	800f6a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f6a0:	2340      	movs	r3, #64	; 0x40
 800f6a2:	e080      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d001      	beq.n	800f6b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f6ae:	2380      	movs	r3, #128	; 0x80
 800f6b0:	e079      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d002      	beq.n	800f6c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f6bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6c0:	e071      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d002      	beq.n	800f6d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f6cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f6d0:	e069      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d002      	beq.n	800f6e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f6dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6e0:	e061      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d002      	beq.n	800f6f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f6ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6f0:	e059      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d002      	beq.n	800f702 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f6fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f700:	e051      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d002      	beq.n	800f712 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f70c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f710:	e049      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d002      	beq.n	800f722 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f71c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f720:	e041      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d002      	beq.n	800f732 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f72c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f730:	e039      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d002      	beq.n	800f742 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f73c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f740:	e031      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d002      	beq.n	800f752 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f74c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f750:	e029      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d002      	beq.n	800f762 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f75c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f760:	e021      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d002      	beq.n	800f772 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f76c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f770:	e019      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d002      	beq.n	800f782 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f77c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f780:	e011      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d002      	beq.n	800f792 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f78c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f790:	e009      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	f003 0308 	and.w	r3, r3, #8
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d002      	beq.n	800f7a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f79c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f7a0:	e001      	b.n	800f7a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f7a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3720      	adds	r7, #32
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	20000000 	.word	0x20000000
 800f7b4:	10624dd3 	.word	0x10624dd3
 800f7b8:	fdffe008 	.word	0xfdffe008

0800f7bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b085      	sub	sp, #20
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f7c4:	4b1f      	ldr	r3, [pc, #124]	; (800f844 <SDMMC_GetCmdResp2+0x88>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	4a1f      	ldr	r2, [pc, #124]	; (800f848 <SDMMC_GetCmdResp2+0x8c>)
 800f7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800f7ce:	0a5b      	lsrs	r3, r3, #9
 800f7d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7d4:	fb02 f303 	mul.w	r3, r2, r3
 800f7d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	1e5a      	subs	r2, r3, #1
 800f7de:	60fa      	str	r2, [r7, #12]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d102      	bne.n	800f7ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f7e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f7e8:	e026      	b.n	800f838 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d0ef      	beq.n	800f7da <SDMMC_GetCmdResp2+0x1e>
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f800:	2b00      	cmp	r3, #0
 800f802:	d1ea      	bne.n	800f7da <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f808:	f003 0304 	and.w	r3, r3, #4
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d004      	beq.n	800f81a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2204      	movs	r2, #4
 800f814:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f816:	2304      	movs	r3, #4
 800f818:	e00e      	b.n	800f838 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f81e:	f003 0301 	and.w	r3, r3, #1
 800f822:	2b00      	cmp	r3, #0
 800f824:	d004      	beq.n	800f830 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2201      	movs	r2, #1
 800f82a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f82c:	2301      	movs	r3, #1
 800f82e:	e003      	b.n	800f838 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	22c5      	movs	r2, #197	; 0xc5
 800f834:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f836:	2300      	movs	r3, #0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3714      	adds	r7, #20
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr
 800f844:	20000000 	.word	0x20000000
 800f848:	10624dd3 	.word	0x10624dd3

0800f84c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b085      	sub	sp, #20
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f854:	4b1a      	ldr	r3, [pc, #104]	; (800f8c0 <SDMMC_GetCmdResp3+0x74>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	4a1a      	ldr	r2, [pc, #104]	; (800f8c4 <SDMMC_GetCmdResp3+0x78>)
 800f85a:	fba2 2303 	umull	r2, r3, r2, r3
 800f85e:	0a5b      	lsrs	r3, r3, #9
 800f860:	f241 3288 	movw	r2, #5000	; 0x1388
 800f864:	fb02 f303 	mul.w	r3, r2, r3
 800f868:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	1e5a      	subs	r2, r3, #1
 800f86e:	60fa      	str	r2, [r7, #12]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d102      	bne.n	800f87a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f874:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f878:	e01b      	b.n	800f8b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f87e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f886:	2b00      	cmp	r3, #0
 800f888:	d0ef      	beq.n	800f86a <SDMMC_GetCmdResp3+0x1e>
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f890:	2b00      	cmp	r3, #0
 800f892:	d1ea      	bne.n	800f86a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f898:	f003 0304 	and.w	r3, r3, #4
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d004      	beq.n	800f8aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2204      	movs	r2, #4
 800f8a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f8a6:	2304      	movs	r3, #4
 800f8a8:	e003      	b.n	800f8b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	22c5      	movs	r2, #197	; 0xc5
 800f8ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f8b0:	2300      	movs	r3, #0
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3714      	adds	r7, #20
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	20000000 	.word	0x20000000
 800f8c4:	10624dd3 	.word	0x10624dd3

0800f8c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b088      	sub	sp, #32
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	60f8      	str	r0, [r7, #12]
 800f8d0:	460b      	mov	r3, r1
 800f8d2:	607a      	str	r2, [r7, #4]
 800f8d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f8d6:	4b35      	ldr	r3, [pc, #212]	; (800f9ac <SDMMC_GetCmdResp6+0xe4>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4a35      	ldr	r2, [pc, #212]	; (800f9b0 <SDMMC_GetCmdResp6+0xe8>)
 800f8dc:	fba2 2303 	umull	r2, r3, r2, r3
 800f8e0:	0a5b      	lsrs	r3, r3, #9
 800f8e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8e6:	fb02 f303 	mul.w	r3, r2, r3
 800f8ea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	1e5a      	subs	r2, r3, #1
 800f8f0:	61fa      	str	r2, [r7, #28]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d102      	bne.n	800f8fc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f8f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f8fa:	e052      	b.n	800f9a2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f900:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f902:	69bb      	ldr	r3, [r7, #24]
 800f904:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d0ef      	beq.n	800f8ec <SDMMC_GetCmdResp6+0x24>
 800f90c:	69bb      	ldr	r3, [r7, #24]
 800f90e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f912:	2b00      	cmp	r3, #0
 800f914:	d1ea      	bne.n	800f8ec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f91a:	f003 0304 	and.w	r3, r3, #4
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d004      	beq.n	800f92c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2204      	movs	r2, #4
 800f926:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f928:	2304      	movs	r3, #4
 800f92a:	e03a      	b.n	800f9a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f930:	f003 0301 	and.w	r3, r3, #1
 800f934:	2b00      	cmp	r3, #0
 800f936:	d004      	beq.n	800f942 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2201      	movs	r2, #1
 800f93c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f93e:	2301      	movs	r3, #1
 800f940:	e02f      	b.n	800f9a2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f942:	68f8      	ldr	r0, [r7, #12]
 800f944:	f7ff fba0 	bl	800f088 <SDIO_GetCommandResponse>
 800f948:	4603      	mov	r3, r0
 800f94a:	461a      	mov	r2, r3
 800f94c:	7afb      	ldrb	r3, [r7, #11]
 800f94e:	4293      	cmp	r3, r2
 800f950:	d001      	beq.n	800f956 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f952:	2301      	movs	r3, #1
 800f954:	e025      	b.n	800f9a2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	22c5      	movs	r2, #197	; 0xc5
 800f95a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f95c:	2100      	movs	r1, #0
 800f95e:	68f8      	ldr	r0, [r7, #12]
 800f960:	f7ff fb9f 	bl	800f0a2 <SDIO_GetResponse>
 800f964:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d106      	bne.n	800f97e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	0c1b      	lsrs	r3, r3, #16
 800f974:	b29a      	uxth	r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f97a:	2300      	movs	r3, #0
 800f97c:	e011      	b.n	800f9a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f984:	2b00      	cmp	r3, #0
 800f986:	d002      	beq.n	800f98e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f98c:	e009      	b.n	800f9a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f994:	2b00      	cmp	r3, #0
 800f996:	d002      	beq.n	800f99e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f99c:	e001      	b.n	800f9a2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f99e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3720      	adds	r7, #32
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	20000000 	.word	0x20000000
 800f9b0:	10624dd3 	.word	0x10624dd3

0800f9b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	b085      	sub	sp, #20
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f9bc:	4b22      	ldr	r3, [pc, #136]	; (800fa48 <SDMMC_GetCmdResp7+0x94>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4a22      	ldr	r2, [pc, #136]	; (800fa4c <SDMMC_GetCmdResp7+0x98>)
 800f9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9c6:	0a5b      	lsrs	r3, r3, #9
 800f9c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9cc:	fb02 f303 	mul.w	r3, r2, r3
 800f9d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	1e5a      	subs	r2, r3, #1
 800f9d6:	60fa      	str	r2, [r7, #12]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d102      	bne.n	800f9e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f9dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f9e0:	e02c      	b.n	800fa3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d0ef      	beq.n	800f9d2 <SDMMC_GetCmdResp7+0x1e>
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d1ea      	bne.n	800f9d2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa00:	f003 0304 	and.w	r3, r3, #4
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d004      	beq.n	800fa12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2204      	movs	r2, #4
 800fa0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fa0e:	2304      	movs	r3, #4
 800fa10:	e014      	b.n	800fa3c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa16:	f003 0301 	and.w	r3, r3, #1
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d004      	beq.n	800fa28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2201      	movs	r2, #1
 800fa22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fa24:	2301      	movs	r3, #1
 800fa26:	e009      	b.n	800fa3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d002      	beq.n	800fa3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2240      	movs	r2, #64	; 0x40
 800fa38:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fa3a:	2300      	movs	r3, #0
  
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3714      	adds	r7, #20
 800fa40:	46bd      	mov	sp, r7
 800fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa46:	4770      	bx	lr
 800fa48:	20000000 	.word	0x20000000
 800fa4c:	10624dd3 	.word	0x10624dd3

0800fa50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fa50:	b084      	sub	sp, #16
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b084      	sub	sp, #16
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
 800fa5a:	f107 001c 	add.w	r0, r7, #28
 800fa5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d122      	bne.n	800faae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800fa7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fa90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d105      	bne.n	800faa2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f001 fb16 	bl	80110d4 <USB_CoreReset>
 800faa8:	4603      	mov	r3, r0
 800faaa:	73fb      	strb	r3, [r7, #15]
 800faac:	e01a      	b.n	800fae4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	68db      	ldr	r3, [r3, #12]
 800fab2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f001 fb0a 	bl	80110d4 <USB_CoreReset>
 800fac0:	4603      	mov	r3, r0
 800fac2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d106      	bne.n	800fad8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800face:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	639a      	str	r2, [r3, #56]	; 0x38
 800fad6:	e005      	b.n	800fae4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fadc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae6:	2b01      	cmp	r3, #1
 800fae8:	d10b      	bne.n	800fb02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	f043 0206 	orr.w	r2, r3, #6
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	689b      	ldr	r3, [r3, #8]
 800fafa:	f043 0220 	orr.w	r2, r3, #32
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb0e:	b004      	add	sp, #16
 800fb10:	4770      	bx	lr
	...

0800fb14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b087      	sub	sp, #28
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	60b9      	str	r1, [r7, #8]
 800fb1e:	4613      	mov	r3, r2
 800fb20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fb22:	79fb      	ldrb	r3, [r7, #7]
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	d165      	bne.n	800fbf4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	4a41      	ldr	r2, [pc, #260]	; (800fc30 <USB_SetTurnaroundTime+0x11c>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d906      	bls.n	800fb3e <USB_SetTurnaroundTime+0x2a>
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	4a40      	ldr	r2, [pc, #256]	; (800fc34 <USB_SetTurnaroundTime+0x120>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d202      	bcs.n	800fb3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fb38:	230f      	movs	r3, #15
 800fb3a:	617b      	str	r3, [r7, #20]
 800fb3c:	e062      	b.n	800fc04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	4a3c      	ldr	r2, [pc, #240]	; (800fc34 <USB_SetTurnaroundTime+0x120>)
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d306      	bcc.n	800fb54 <USB_SetTurnaroundTime+0x40>
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	4a3b      	ldr	r2, [pc, #236]	; (800fc38 <USB_SetTurnaroundTime+0x124>)
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d202      	bcs.n	800fb54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fb4e:	230e      	movs	r3, #14
 800fb50:	617b      	str	r3, [r7, #20]
 800fb52:	e057      	b.n	800fc04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	4a38      	ldr	r2, [pc, #224]	; (800fc38 <USB_SetTurnaroundTime+0x124>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d306      	bcc.n	800fb6a <USB_SetTurnaroundTime+0x56>
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	4a37      	ldr	r2, [pc, #220]	; (800fc3c <USB_SetTurnaroundTime+0x128>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d202      	bcs.n	800fb6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fb64:	230d      	movs	r3, #13
 800fb66:	617b      	str	r3, [r7, #20]
 800fb68:	e04c      	b.n	800fc04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	4a33      	ldr	r2, [pc, #204]	; (800fc3c <USB_SetTurnaroundTime+0x128>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d306      	bcc.n	800fb80 <USB_SetTurnaroundTime+0x6c>
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	4a32      	ldr	r2, [pc, #200]	; (800fc40 <USB_SetTurnaroundTime+0x12c>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d802      	bhi.n	800fb80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fb7a:	230c      	movs	r3, #12
 800fb7c:	617b      	str	r3, [r7, #20]
 800fb7e:	e041      	b.n	800fc04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	4a2f      	ldr	r2, [pc, #188]	; (800fc40 <USB_SetTurnaroundTime+0x12c>)
 800fb84:	4293      	cmp	r3, r2
 800fb86:	d906      	bls.n	800fb96 <USB_SetTurnaroundTime+0x82>
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	4a2e      	ldr	r2, [pc, #184]	; (800fc44 <USB_SetTurnaroundTime+0x130>)
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d802      	bhi.n	800fb96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fb90:	230b      	movs	r3, #11
 800fb92:	617b      	str	r3, [r7, #20]
 800fb94:	e036      	b.n	800fc04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	4a2a      	ldr	r2, [pc, #168]	; (800fc44 <USB_SetTurnaroundTime+0x130>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d906      	bls.n	800fbac <USB_SetTurnaroundTime+0x98>
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	4a29      	ldr	r2, [pc, #164]	; (800fc48 <USB_SetTurnaroundTime+0x134>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d802      	bhi.n	800fbac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fba6:	230a      	movs	r3, #10
 800fba8:	617b      	str	r3, [r7, #20]
 800fbaa:	e02b      	b.n	800fc04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	4a26      	ldr	r2, [pc, #152]	; (800fc48 <USB_SetTurnaroundTime+0x134>)
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d906      	bls.n	800fbc2 <USB_SetTurnaroundTime+0xae>
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	4a25      	ldr	r2, [pc, #148]	; (800fc4c <USB_SetTurnaroundTime+0x138>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d202      	bcs.n	800fbc2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fbbc:	2309      	movs	r3, #9
 800fbbe:	617b      	str	r3, [r7, #20]
 800fbc0:	e020      	b.n	800fc04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	4a21      	ldr	r2, [pc, #132]	; (800fc4c <USB_SetTurnaroundTime+0x138>)
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d306      	bcc.n	800fbd8 <USB_SetTurnaroundTime+0xc4>
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	4a20      	ldr	r2, [pc, #128]	; (800fc50 <USB_SetTurnaroundTime+0x13c>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d802      	bhi.n	800fbd8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fbd2:	2308      	movs	r3, #8
 800fbd4:	617b      	str	r3, [r7, #20]
 800fbd6:	e015      	b.n	800fc04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	4a1d      	ldr	r2, [pc, #116]	; (800fc50 <USB_SetTurnaroundTime+0x13c>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d906      	bls.n	800fbee <USB_SetTurnaroundTime+0xda>
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	4a1c      	ldr	r2, [pc, #112]	; (800fc54 <USB_SetTurnaroundTime+0x140>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d202      	bcs.n	800fbee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fbe8:	2307      	movs	r3, #7
 800fbea:	617b      	str	r3, [r7, #20]
 800fbec:	e00a      	b.n	800fc04 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fbee:	2306      	movs	r3, #6
 800fbf0:	617b      	str	r3, [r7, #20]
 800fbf2:	e007      	b.n	800fc04 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fbf4:	79fb      	ldrb	r3, [r7, #7]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d102      	bne.n	800fc00 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fbfa:	2309      	movs	r3, #9
 800fbfc:	617b      	str	r3, [r7, #20]
 800fbfe:	e001      	b.n	800fc04 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fc00:	2309      	movs	r3, #9
 800fc02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	68da      	ldr	r2, [r3, #12]
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	029b      	lsls	r3, r3, #10
 800fc18:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fc1c:	431a      	orrs	r2, r3
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fc22:	2300      	movs	r3, #0
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	371c      	adds	r7, #28
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr
 800fc30:	00d8acbf 	.word	0x00d8acbf
 800fc34:	00e4e1c0 	.word	0x00e4e1c0
 800fc38:	00f42400 	.word	0x00f42400
 800fc3c:	01067380 	.word	0x01067380
 800fc40:	011a499f 	.word	0x011a499f
 800fc44:	01312cff 	.word	0x01312cff
 800fc48:	014ca43f 	.word	0x014ca43f
 800fc4c:	016e3600 	.word	0x016e3600
 800fc50:	01a6ab1f 	.word	0x01a6ab1f
 800fc54:	01e84800 	.word	0x01e84800

0800fc58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	689b      	ldr	r3, [r3, #8]
 800fc64:	f043 0201 	orr.w	r2, r3, #1
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fc6c:	2300      	movs	r3, #0
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	370c      	adds	r7, #12
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr

0800fc7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fc7a:	b480      	push	{r7}
 800fc7c:	b083      	sub	sp, #12
 800fc7e:	af00      	add	r7, sp, #0
 800fc80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	689b      	ldr	r3, [r3, #8]
 800fc86:	f023 0201 	bic.w	r2, r3, #1
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fc8e:	2300      	movs	r3, #0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	370c      	adds	r7, #12
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr

0800fc9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	460b      	mov	r3, r1
 800fca6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fcb8:	78fb      	ldrb	r3, [r7, #3]
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d115      	bne.n	800fcea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fcca:	2001      	movs	r0, #1
 800fccc:	f7f6 ffe8 	bl	8006ca0 <HAL_Delay>
      ms++;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f001 f96c 	bl	8010fb4 <USB_GetMode>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d01e      	beq.n	800fd20 <USB_SetCurrentMode+0x84>
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2b31      	cmp	r3, #49	; 0x31
 800fce6:	d9f0      	bls.n	800fcca <USB_SetCurrentMode+0x2e>
 800fce8:	e01a      	b.n	800fd20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fcea:	78fb      	ldrb	r3, [r7, #3]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d115      	bne.n	800fd1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fcfc:	2001      	movs	r0, #1
 800fcfe:	f7f6 ffcf 	bl	8006ca0 <HAL_Delay>
      ms++;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	3301      	adds	r3, #1
 800fd06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f001 f953 	bl	8010fb4 <USB_GetMode>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d005      	beq.n	800fd20 <USB_SetCurrentMode+0x84>
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2b31      	cmp	r3, #49	; 0x31
 800fd18:	d9f0      	bls.n	800fcfc <USB_SetCurrentMode+0x60>
 800fd1a:	e001      	b.n	800fd20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	e005      	b.n	800fd2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2b32      	cmp	r3, #50	; 0x32
 800fd24:	d101      	bne.n	800fd2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fd26:	2301      	movs	r3, #1
 800fd28:	e000      	b.n	800fd2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fd2a:	2300      	movs	r3, #0
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3710      	adds	r7, #16
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fd34:	b084      	sub	sp, #16
 800fd36:	b580      	push	{r7, lr}
 800fd38:	b086      	sub	sp, #24
 800fd3a:	af00      	add	r7, sp, #0
 800fd3c:	6078      	str	r0, [r7, #4]
 800fd3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fd42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fd46:	2300      	movs	r3, #0
 800fd48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fd4e:	2300      	movs	r3, #0
 800fd50:	613b      	str	r3, [r7, #16]
 800fd52:	e009      	b.n	800fd68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fd54:	687a      	ldr	r2, [r7, #4]
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	3340      	adds	r3, #64	; 0x40
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	4413      	add	r3, r2
 800fd5e:	2200      	movs	r2, #0
 800fd60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	3301      	adds	r3, #1
 800fd66:	613b      	str	r3, [r7, #16]
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	2b0e      	cmp	r3, #14
 800fd6c:	d9f2      	bls.n	800fd54 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fd6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d11c      	bne.n	800fdae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	68fa      	ldr	r2, [r7, #12]
 800fd7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd82:	f043 0302 	orr.w	r3, r3, #2
 800fd86:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	601a      	str	r2, [r3, #0]
 800fdac:	e005      	b.n	800fdba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdcc:	4619      	mov	r1, r3
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	680b      	ldr	r3, [r1, #0]
 800fdd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fddc:	2b01      	cmp	r3, #1
 800fdde:	d10c      	bne.n	800fdfa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d104      	bne.n	800fdf0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fde6:	2100      	movs	r1, #0
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 f945 	bl	8010078 <USB_SetDevSpeed>
 800fdee:	e008      	b.n	800fe02 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fdf0:	2101      	movs	r1, #1
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 f940 	bl	8010078 <USB_SetDevSpeed>
 800fdf8:	e003      	b.n	800fe02 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fdfa:	2103      	movs	r1, #3
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f000 f93b 	bl	8010078 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fe02:	2110      	movs	r1, #16
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f000 f8f3 	bl	800fff0 <USB_FlushTxFifo>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d001      	beq.n	800fe14 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800fe10:	2301      	movs	r3, #1
 800fe12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f000 f90f 	bl	8010038 <USB_FlushRxFifo>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d001      	beq.n	800fe24 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800fe20:	2301      	movs	r3, #1
 800fe22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe36:	461a      	mov	r2, r3
 800fe38:	2300      	movs	r3, #0
 800fe3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe42:	461a      	mov	r2, r3
 800fe44:	2300      	movs	r3, #0
 800fe46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe48:	2300      	movs	r3, #0
 800fe4a:	613b      	str	r3, [r7, #16]
 800fe4c:	e043      	b.n	800fed6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	015a      	lsls	r2, r3, #5
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	4413      	add	r3, r2
 800fe56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe64:	d118      	bne.n	800fe98 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d10a      	bne.n	800fe82 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	015a      	lsls	r2, r3, #5
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	4413      	add	r3, r2
 800fe74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe78:	461a      	mov	r2, r3
 800fe7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fe7e:	6013      	str	r3, [r2, #0]
 800fe80:	e013      	b.n	800feaa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	015a      	lsls	r2, r3, #5
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	4413      	add	r3, r2
 800fe8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe8e:	461a      	mov	r2, r3
 800fe90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fe94:	6013      	str	r3, [r2, #0]
 800fe96:	e008      	b.n	800feaa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	015a      	lsls	r2, r3, #5
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	4413      	add	r3, r2
 800fea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fea4:	461a      	mov	r2, r3
 800fea6:	2300      	movs	r3, #0
 800fea8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	015a      	lsls	r2, r3, #5
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	4413      	add	r3, r2
 800feb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feb6:	461a      	mov	r2, r3
 800feb8:	2300      	movs	r3, #0
 800feba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	015a      	lsls	r2, r3, #5
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	4413      	add	r3, r2
 800fec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fec8:	461a      	mov	r2, r3
 800feca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fece:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	3301      	adds	r3, #1
 800fed4:	613b      	str	r3, [r7, #16]
 800fed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed8:	693a      	ldr	r2, [r7, #16]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d3b7      	bcc.n	800fe4e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fede:	2300      	movs	r3, #0
 800fee0:	613b      	str	r3, [r7, #16]
 800fee2:	e043      	b.n	800ff6c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	015a      	lsls	r2, r3, #5
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	4413      	add	r3, r2
 800feec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fefa:	d118      	bne.n	800ff2e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d10a      	bne.n	800ff18 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	015a      	lsls	r2, r3, #5
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	4413      	add	r3, r2
 800ff0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff0e:	461a      	mov	r2, r3
 800ff10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ff14:	6013      	str	r3, [r2, #0]
 800ff16:	e013      	b.n	800ff40 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	015a      	lsls	r2, r3, #5
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	4413      	add	r3, r2
 800ff20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff24:	461a      	mov	r2, r3
 800ff26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ff2a:	6013      	str	r3, [r2, #0]
 800ff2c:	e008      	b.n	800ff40 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	015a      	lsls	r2, r3, #5
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	4413      	add	r3, r2
 800ff36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	015a      	lsls	r2, r3, #5
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	4413      	add	r3, r2
 800ff48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	2300      	movs	r3, #0
 800ff50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	015a      	lsls	r2, r3, #5
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	4413      	add	r3, r2
 800ff5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff5e:	461a      	mov	r2, r3
 800ff60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ff64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	3301      	adds	r3, #1
 800ff6a:	613b      	str	r3, [r7, #16]
 800ff6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6e:	693a      	ldr	r2, [r7, #16]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d3b7      	bcc.n	800fee4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff7a:	691b      	ldr	r3, [r3, #16]
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ff94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ff96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d105      	bne.n	800ffa8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	699b      	ldr	r3, [r3, #24]
 800ffa0:	f043 0210 	orr.w	r2, r3, #16
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	699a      	ldr	r2, [r3, #24]
 800ffac:	4b0f      	ldr	r3, [pc, #60]	; (800ffec <USB_DevInit+0x2b8>)
 800ffae:	4313      	orrs	r3, r2
 800ffb0:	687a      	ldr	r2, [r7, #4]
 800ffb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ffb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d005      	beq.n	800ffc6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	699b      	ldr	r3, [r3, #24]
 800ffbe:	f043 0208 	orr.w	r2, r3, #8
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ffc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d107      	bne.n	800ffdc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	699b      	ldr	r3, [r3, #24]
 800ffd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ffd4:	f043 0304 	orr.w	r3, r3, #4
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ffdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3718      	adds	r7, #24
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ffe8:	b004      	add	sp, #16
 800ffea:	4770      	bx	lr
 800ffec:	803c3800 	.word	0x803c3800

0800fff0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b085      	sub	sp, #20
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fffa:	2300      	movs	r3, #0
 800fffc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	019b      	lsls	r3, r3, #6
 8010002:	f043 0220 	orr.w	r2, r3, #32
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	3301      	adds	r3, #1
 801000e:	60fb      	str	r3, [r7, #12]
 8010010:	4a08      	ldr	r2, [pc, #32]	; (8010034 <USB_FlushTxFifo+0x44>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d901      	bls.n	801001a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8010016:	2303      	movs	r3, #3
 8010018:	e006      	b.n	8010028 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	691b      	ldr	r3, [r3, #16]
 801001e:	f003 0320 	and.w	r3, r3, #32
 8010022:	2b20      	cmp	r3, #32
 8010024:	d0f1      	beq.n	801000a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010026:	2300      	movs	r3, #0
}
 8010028:	4618      	mov	r0, r3
 801002a:	3714      	adds	r7, #20
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr
 8010034:	00030d40 	.word	0x00030d40

08010038 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010038:	b480      	push	{r7}
 801003a:	b085      	sub	sp, #20
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010040:	2300      	movs	r3, #0
 8010042:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2210      	movs	r2, #16
 8010048:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	3301      	adds	r3, #1
 801004e:	60fb      	str	r3, [r7, #12]
 8010050:	4a08      	ldr	r2, [pc, #32]	; (8010074 <USB_FlushRxFifo+0x3c>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d901      	bls.n	801005a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8010056:	2303      	movs	r3, #3
 8010058:	e006      	b.n	8010068 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	691b      	ldr	r3, [r3, #16]
 801005e:	f003 0310 	and.w	r3, r3, #16
 8010062:	2b10      	cmp	r3, #16
 8010064:	d0f1      	beq.n	801004a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8010066:	2300      	movs	r3, #0
}
 8010068:	4618      	mov	r0, r3
 801006a:	3714      	adds	r7, #20
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr
 8010074:	00030d40 	.word	0x00030d40

08010078 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010078:	b480      	push	{r7}
 801007a:	b085      	sub	sp, #20
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	460b      	mov	r3, r1
 8010082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	78fb      	ldrb	r3, [r7, #3]
 8010092:	68f9      	ldr	r1, [r7, #12]
 8010094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010098:	4313      	orrs	r3, r2
 801009a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801009c:	2300      	movs	r3, #0
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3714      	adds	r7, #20
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr

080100aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80100aa:	b480      	push	{r7}
 80100ac:	b087      	sub	sp, #28
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100bc:	689b      	ldr	r3, [r3, #8]
 80100be:	f003 0306 	and.w	r3, r3, #6
 80100c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d102      	bne.n	80100d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80100ca:	2300      	movs	r3, #0
 80100cc:	75fb      	strb	r3, [r7, #23]
 80100ce:	e00a      	b.n	80100e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2b02      	cmp	r3, #2
 80100d4:	d002      	beq.n	80100dc <USB_GetDevSpeed+0x32>
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2b06      	cmp	r3, #6
 80100da:	d102      	bne.n	80100e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80100dc:	2302      	movs	r3, #2
 80100de:	75fb      	strb	r3, [r7, #23]
 80100e0:	e001      	b.n	80100e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80100e2:	230f      	movs	r3, #15
 80100e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80100e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	371c      	adds	r7, #28
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b085      	sub	sp, #20
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	785b      	ldrb	r3, [r3, #1]
 801010c:	2b01      	cmp	r3, #1
 801010e:	d13a      	bne.n	8010186 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010116:	69da      	ldr	r2, [r3, #28]
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	f003 030f 	and.w	r3, r3, #15
 8010120:	2101      	movs	r1, #1
 8010122:	fa01 f303 	lsl.w	r3, r1, r3
 8010126:	b29b      	uxth	r3, r3
 8010128:	68f9      	ldr	r1, [r7, #12]
 801012a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801012e:	4313      	orrs	r3, r2
 8010130:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	015a      	lsls	r2, r3, #5
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	4413      	add	r3, r2
 801013a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010144:	2b00      	cmp	r3, #0
 8010146:	d155      	bne.n	80101f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	015a      	lsls	r2, r3, #5
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	4413      	add	r3, r2
 8010150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	689b      	ldr	r3, [r3, #8]
 801015a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	78db      	ldrb	r3, [r3, #3]
 8010162:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010164:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	059b      	lsls	r3, r3, #22
 801016a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801016c:	4313      	orrs	r3, r2
 801016e:	68ba      	ldr	r2, [r7, #8]
 8010170:	0151      	lsls	r1, r2, #5
 8010172:	68fa      	ldr	r2, [r7, #12]
 8010174:	440a      	add	r2, r1
 8010176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801017a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801017e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010182:	6013      	str	r3, [r2, #0]
 8010184:	e036      	b.n	80101f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801018c:	69da      	ldr	r2, [r3, #28]
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	f003 030f 	and.w	r3, r3, #15
 8010196:	2101      	movs	r1, #1
 8010198:	fa01 f303 	lsl.w	r3, r1, r3
 801019c:	041b      	lsls	r3, r3, #16
 801019e:	68f9      	ldr	r1, [r7, #12]
 80101a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101a4:	4313      	orrs	r3, r2
 80101a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	015a      	lsls	r2, r3, #5
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	4413      	add	r3, r2
 80101b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d11a      	bne.n	80101f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	015a      	lsls	r2, r3, #5
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	4413      	add	r3, r2
 80101c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	78db      	ldrb	r3, [r3, #3]
 80101d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80101da:	430b      	orrs	r3, r1
 80101dc:	4313      	orrs	r3, r2
 80101de:	68ba      	ldr	r2, [r7, #8]
 80101e0:	0151      	lsls	r1, r2, #5
 80101e2:	68fa      	ldr	r2, [r7, #12]
 80101e4:	440a      	add	r2, r1
 80101e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80101f4:	2300      	movs	r3, #0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3714      	adds	r7, #20
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr
	...

08010204 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010204:	b480      	push	{r7}
 8010206:	b085      	sub	sp, #20
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	785b      	ldrb	r3, [r3, #1]
 801021c:	2b01      	cmp	r3, #1
 801021e:	d161      	bne.n	80102e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	015a      	lsls	r2, r3, #5
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	4413      	add	r3, r2
 8010228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010236:	d11f      	bne.n	8010278 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	015a      	lsls	r2, r3, #5
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	4413      	add	r3, r2
 8010240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	68ba      	ldr	r2, [r7, #8]
 8010248:	0151      	lsls	r1, r2, #5
 801024a:	68fa      	ldr	r2, [r7, #12]
 801024c:	440a      	add	r2, r1
 801024e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010252:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010256:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	015a      	lsls	r2, r3, #5
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	4413      	add	r3, r2
 8010260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	68ba      	ldr	r2, [r7, #8]
 8010268:	0151      	lsls	r1, r2, #5
 801026a:	68fa      	ldr	r2, [r7, #12]
 801026c:	440a      	add	r2, r1
 801026e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010276:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801027e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	f003 030f 	and.w	r3, r3, #15
 8010288:	2101      	movs	r1, #1
 801028a:	fa01 f303 	lsl.w	r3, r1, r3
 801028e:	b29b      	uxth	r3, r3
 8010290:	43db      	mvns	r3, r3
 8010292:	68f9      	ldr	r1, [r7, #12]
 8010294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010298:	4013      	ands	r3, r2
 801029a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102a2:	69da      	ldr	r2, [r3, #28]
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	f003 030f 	and.w	r3, r3, #15
 80102ac:	2101      	movs	r1, #1
 80102ae:	fa01 f303 	lsl.w	r3, r1, r3
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	43db      	mvns	r3, r3
 80102b6:	68f9      	ldr	r1, [r7, #12]
 80102b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102bc:	4013      	ands	r3, r2
 80102be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	015a      	lsls	r2, r3, #5
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	4413      	add	r3, r2
 80102c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	0159      	lsls	r1, r3, #5
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	440b      	add	r3, r1
 80102d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102da:	4619      	mov	r1, r3
 80102dc:	4b35      	ldr	r3, [pc, #212]	; (80103b4 <USB_DeactivateEndpoint+0x1b0>)
 80102de:	4013      	ands	r3, r2
 80102e0:	600b      	str	r3, [r1, #0]
 80102e2:	e060      	b.n	80103a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	015a      	lsls	r2, r3, #5
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	4413      	add	r3, r2
 80102ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80102f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80102fa:	d11f      	bne.n	801033c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	015a      	lsls	r2, r3, #5
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	4413      	add	r3, r2
 8010304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	68ba      	ldr	r2, [r7, #8]
 801030c:	0151      	lsls	r1, r2, #5
 801030e:	68fa      	ldr	r2, [r7, #12]
 8010310:	440a      	add	r2, r1
 8010312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801031a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	015a      	lsls	r2, r3, #5
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	4413      	add	r3, r2
 8010324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	68ba      	ldr	r2, [r7, #8]
 801032c:	0151      	lsls	r1, r2, #5
 801032e:	68fa      	ldr	r2, [r7, #12]
 8010330:	440a      	add	r2, r1
 8010332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010336:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801033a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	f003 030f 	and.w	r3, r3, #15
 801034c:	2101      	movs	r1, #1
 801034e:	fa01 f303 	lsl.w	r3, r1, r3
 8010352:	041b      	lsls	r3, r3, #16
 8010354:	43db      	mvns	r3, r3
 8010356:	68f9      	ldr	r1, [r7, #12]
 8010358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801035c:	4013      	ands	r3, r2
 801035e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010366:	69da      	ldr	r2, [r3, #28]
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	f003 030f 	and.w	r3, r3, #15
 8010370:	2101      	movs	r1, #1
 8010372:	fa01 f303 	lsl.w	r3, r1, r3
 8010376:	041b      	lsls	r3, r3, #16
 8010378:	43db      	mvns	r3, r3
 801037a:	68f9      	ldr	r1, [r7, #12]
 801037c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010380:	4013      	ands	r3, r2
 8010382:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	015a      	lsls	r2, r3, #5
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	4413      	add	r3, r2
 801038c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	0159      	lsls	r1, r3, #5
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	440b      	add	r3, r1
 801039a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801039e:	4619      	mov	r1, r3
 80103a0:	4b05      	ldr	r3, [pc, #20]	; (80103b8 <USB_DeactivateEndpoint+0x1b4>)
 80103a2:	4013      	ands	r3, r2
 80103a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80103a6:	2300      	movs	r3, #0
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3714      	adds	r7, #20
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr
 80103b4:	ec337800 	.word	0xec337800
 80103b8:	eff37800 	.word	0xeff37800

080103bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b08a      	sub	sp, #40	; 0x28
 80103c0:	af02      	add	r7, sp, #8
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	4613      	mov	r3, r2
 80103c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	781b      	ldrb	r3, [r3, #0]
 80103d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	785b      	ldrb	r3, [r3, #1]
 80103d8:	2b01      	cmp	r3, #1
 80103da:	f040 815c 	bne.w	8010696 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	695b      	ldr	r3, [r3, #20]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d132      	bne.n	801044c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	015a      	lsls	r2, r3, #5
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	4413      	add	r3, r2
 80103ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103f2:	691b      	ldr	r3, [r3, #16]
 80103f4:	69ba      	ldr	r2, [r7, #24]
 80103f6:	0151      	lsls	r1, r2, #5
 80103f8:	69fa      	ldr	r2, [r7, #28]
 80103fa:	440a      	add	r2, r1
 80103fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010400:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010404:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010408:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801040a:	69bb      	ldr	r3, [r7, #24]
 801040c:	015a      	lsls	r2, r3, #5
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	4413      	add	r3, r2
 8010412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010416:	691b      	ldr	r3, [r3, #16]
 8010418:	69ba      	ldr	r2, [r7, #24]
 801041a:	0151      	lsls	r1, r2, #5
 801041c:	69fa      	ldr	r2, [r7, #28]
 801041e:	440a      	add	r2, r1
 8010420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	015a      	lsls	r2, r3, #5
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	4413      	add	r3, r2
 8010432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010436:	691b      	ldr	r3, [r3, #16]
 8010438:	69ba      	ldr	r2, [r7, #24]
 801043a:	0151      	lsls	r1, r2, #5
 801043c:	69fa      	ldr	r2, [r7, #28]
 801043e:	440a      	add	r2, r1
 8010440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010444:	0cdb      	lsrs	r3, r3, #19
 8010446:	04db      	lsls	r3, r3, #19
 8010448:	6113      	str	r3, [r2, #16]
 801044a:	e074      	b.n	8010536 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801044c:	69bb      	ldr	r3, [r7, #24]
 801044e:	015a      	lsls	r2, r3, #5
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	4413      	add	r3, r2
 8010454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010458:	691b      	ldr	r3, [r3, #16]
 801045a:	69ba      	ldr	r2, [r7, #24]
 801045c:	0151      	lsls	r1, r2, #5
 801045e:	69fa      	ldr	r2, [r7, #28]
 8010460:	440a      	add	r2, r1
 8010462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010466:	0cdb      	lsrs	r3, r3, #19
 8010468:	04db      	lsls	r3, r3, #19
 801046a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801046c:	69bb      	ldr	r3, [r7, #24]
 801046e:	015a      	lsls	r2, r3, #5
 8010470:	69fb      	ldr	r3, [r7, #28]
 8010472:	4413      	add	r3, r2
 8010474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010478:	691b      	ldr	r3, [r3, #16]
 801047a:	69ba      	ldr	r2, [r7, #24]
 801047c:	0151      	lsls	r1, r2, #5
 801047e:	69fa      	ldr	r2, [r7, #28]
 8010480:	440a      	add	r2, r1
 8010482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010486:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801048a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801048e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010490:	69bb      	ldr	r3, [r7, #24]
 8010492:	015a      	lsls	r2, r3, #5
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	4413      	add	r3, r2
 8010498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801049c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	6959      	ldr	r1, [r3, #20]
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	689b      	ldr	r3, [r3, #8]
 80104a6:	440b      	add	r3, r1
 80104a8:	1e59      	subs	r1, r3, #1
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	689b      	ldr	r3, [r3, #8]
 80104ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80104b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80104b4:	4b9d      	ldr	r3, [pc, #628]	; (801072c <USB_EPStartXfer+0x370>)
 80104b6:	400b      	ands	r3, r1
 80104b8:	69b9      	ldr	r1, [r7, #24]
 80104ba:	0148      	lsls	r0, r1, #5
 80104bc:	69f9      	ldr	r1, [r7, #28]
 80104be:	4401      	add	r1, r0
 80104c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80104c4:	4313      	orrs	r3, r2
 80104c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80104c8:	69bb      	ldr	r3, [r7, #24]
 80104ca:	015a      	lsls	r2, r3, #5
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	4413      	add	r3, r2
 80104d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104d4:	691a      	ldr	r2, [r3, #16]
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	695b      	ldr	r3, [r3, #20]
 80104da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80104de:	69b9      	ldr	r1, [r7, #24]
 80104e0:	0148      	lsls	r0, r1, #5
 80104e2:	69f9      	ldr	r1, [r7, #28]
 80104e4:	4401      	add	r1, r0
 80104e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80104ea:	4313      	orrs	r3, r2
 80104ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	78db      	ldrb	r3, [r3, #3]
 80104f2:	2b01      	cmp	r3, #1
 80104f4:	d11f      	bne.n	8010536 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	015a      	lsls	r2, r3, #5
 80104fa:	69fb      	ldr	r3, [r7, #28]
 80104fc:	4413      	add	r3, r2
 80104fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010502:	691b      	ldr	r3, [r3, #16]
 8010504:	69ba      	ldr	r2, [r7, #24]
 8010506:	0151      	lsls	r1, r2, #5
 8010508:	69fa      	ldr	r2, [r7, #28]
 801050a:	440a      	add	r2, r1
 801050c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010510:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010514:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	015a      	lsls	r2, r3, #5
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	4413      	add	r3, r2
 801051e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010522:	691b      	ldr	r3, [r3, #16]
 8010524:	69ba      	ldr	r2, [r7, #24]
 8010526:	0151      	lsls	r1, r2, #5
 8010528:	69fa      	ldr	r2, [r7, #28]
 801052a:	440a      	add	r2, r1
 801052c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010530:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010534:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010536:	79fb      	ldrb	r3, [r7, #7]
 8010538:	2b01      	cmp	r3, #1
 801053a:	d14b      	bne.n	80105d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	691b      	ldr	r3, [r3, #16]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d009      	beq.n	8010558 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010544:	69bb      	ldr	r3, [r7, #24]
 8010546:	015a      	lsls	r2, r3, #5
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	4413      	add	r3, r2
 801054c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010550:	461a      	mov	r2, r3
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	691b      	ldr	r3, [r3, #16]
 8010556:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	78db      	ldrb	r3, [r3, #3]
 801055c:	2b01      	cmp	r3, #1
 801055e:	d128      	bne.n	80105b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010566:	689b      	ldr	r3, [r3, #8]
 8010568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801056c:	2b00      	cmp	r3, #0
 801056e:	d110      	bne.n	8010592 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	015a      	lsls	r2, r3, #5
 8010574:	69fb      	ldr	r3, [r7, #28]
 8010576:	4413      	add	r3, r2
 8010578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	69ba      	ldr	r2, [r7, #24]
 8010580:	0151      	lsls	r1, r2, #5
 8010582:	69fa      	ldr	r2, [r7, #28]
 8010584:	440a      	add	r2, r1
 8010586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801058a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801058e:	6013      	str	r3, [r2, #0]
 8010590:	e00f      	b.n	80105b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	015a      	lsls	r2, r3, #5
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	4413      	add	r3, r2
 801059a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	69ba      	ldr	r2, [r7, #24]
 80105a2:	0151      	lsls	r1, r2, #5
 80105a4:	69fa      	ldr	r2, [r7, #28]
 80105a6:	440a      	add	r2, r1
 80105a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	015a      	lsls	r2, r3, #5
 80105b6:	69fb      	ldr	r3, [r7, #28]
 80105b8:	4413      	add	r3, r2
 80105ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	69ba      	ldr	r2, [r7, #24]
 80105c2:	0151      	lsls	r1, r2, #5
 80105c4:	69fa      	ldr	r2, [r7, #28]
 80105c6:	440a      	add	r2, r1
 80105c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80105d0:	6013      	str	r3, [r2, #0]
 80105d2:	e12f      	b.n	8010834 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80105d4:	69bb      	ldr	r3, [r7, #24]
 80105d6:	015a      	lsls	r2, r3, #5
 80105d8:	69fb      	ldr	r3, [r7, #28]
 80105da:	4413      	add	r3, r2
 80105dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	69ba      	ldr	r2, [r7, #24]
 80105e4:	0151      	lsls	r1, r2, #5
 80105e6:	69fa      	ldr	r2, [r7, #28]
 80105e8:	440a      	add	r2, r1
 80105ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80105f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	78db      	ldrb	r3, [r3, #3]
 80105f8:	2b01      	cmp	r3, #1
 80105fa:	d015      	beq.n	8010628 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	695b      	ldr	r3, [r3, #20]
 8010600:	2b00      	cmp	r3, #0
 8010602:	f000 8117 	beq.w	8010834 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801060c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	f003 030f 	and.w	r3, r3, #15
 8010616:	2101      	movs	r1, #1
 8010618:	fa01 f303 	lsl.w	r3, r1, r3
 801061c:	69f9      	ldr	r1, [r7, #28]
 801061e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010622:	4313      	orrs	r3, r2
 8010624:	634b      	str	r3, [r1, #52]	; 0x34
 8010626:	e105      	b.n	8010834 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801062e:	689b      	ldr	r3, [r3, #8]
 8010630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010634:	2b00      	cmp	r3, #0
 8010636:	d110      	bne.n	801065a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010638:	69bb      	ldr	r3, [r7, #24]
 801063a:	015a      	lsls	r2, r3, #5
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	4413      	add	r3, r2
 8010640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	69ba      	ldr	r2, [r7, #24]
 8010648:	0151      	lsls	r1, r2, #5
 801064a:	69fa      	ldr	r2, [r7, #28]
 801064c:	440a      	add	r2, r1
 801064e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010652:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010656:	6013      	str	r3, [r2, #0]
 8010658:	e00f      	b.n	801067a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	015a      	lsls	r2, r3, #5
 801065e:	69fb      	ldr	r3, [r7, #28]
 8010660:	4413      	add	r3, r2
 8010662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	69ba      	ldr	r2, [r7, #24]
 801066a:	0151      	lsls	r1, r2, #5
 801066c:	69fa      	ldr	r2, [r7, #28]
 801066e:	440a      	add	r2, r1
 8010670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010678:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	68d9      	ldr	r1, [r3, #12]
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	781a      	ldrb	r2, [r3, #0]
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	695b      	ldr	r3, [r3, #20]
 8010686:	b298      	uxth	r0, r3
 8010688:	79fb      	ldrb	r3, [r7, #7]
 801068a:	9300      	str	r3, [sp, #0]
 801068c:	4603      	mov	r3, r0
 801068e:	68f8      	ldr	r0, [r7, #12]
 8010690:	f000 fa2b 	bl	8010aea <USB_WritePacket>
 8010694:	e0ce      	b.n	8010834 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	015a      	lsls	r2, r3, #5
 801069a:	69fb      	ldr	r3, [r7, #28]
 801069c:	4413      	add	r3, r2
 801069e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a2:	691b      	ldr	r3, [r3, #16]
 80106a4:	69ba      	ldr	r2, [r7, #24]
 80106a6:	0151      	lsls	r1, r2, #5
 80106a8:	69fa      	ldr	r2, [r7, #28]
 80106aa:	440a      	add	r2, r1
 80106ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106b0:	0cdb      	lsrs	r3, r3, #19
 80106b2:	04db      	lsls	r3, r3, #19
 80106b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80106b6:	69bb      	ldr	r3, [r7, #24]
 80106b8:	015a      	lsls	r2, r3, #5
 80106ba:	69fb      	ldr	r3, [r7, #28]
 80106bc:	4413      	add	r3, r2
 80106be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106c2:	691b      	ldr	r3, [r3, #16]
 80106c4:	69ba      	ldr	r2, [r7, #24]
 80106c6:	0151      	lsls	r1, r2, #5
 80106c8:	69fa      	ldr	r2, [r7, #28]
 80106ca:	440a      	add	r2, r1
 80106cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80106d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80106d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	695b      	ldr	r3, [r3, #20]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d126      	bne.n	8010730 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80106e2:	69bb      	ldr	r3, [r7, #24]
 80106e4:	015a      	lsls	r2, r3, #5
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	4413      	add	r3, r2
 80106ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106ee:	691a      	ldr	r2, [r3, #16]
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	689b      	ldr	r3, [r3, #8]
 80106f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106f8:	69b9      	ldr	r1, [r7, #24]
 80106fa:	0148      	lsls	r0, r1, #5
 80106fc:	69f9      	ldr	r1, [r7, #28]
 80106fe:	4401      	add	r1, r0
 8010700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010704:	4313      	orrs	r3, r2
 8010706:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010708:	69bb      	ldr	r3, [r7, #24]
 801070a:	015a      	lsls	r2, r3, #5
 801070c:	69fb      	ldr	r3, [r7, #28]
 801070e:	4413      	add	r3, r2
 8010710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010714:	691b      	ldr	r3, [r3, #16]
 8010716:	69ba      	ldr	r2, [r7, #24]
 8010718:	0151      	lsls	r1, r2, #5
 801071a:	69fa      	ldr	r2, [r7, #28]
 801071c:	440a      	add	r2, r1
 801071e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010726:	6113      	str	r3, [r2, #16]
 8010728:	e036      	b.n	8010798 <USB_EPStartXfer+0x3dc>
 801072a:	bf00      	nop
 801072c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	695a      	ldr	r2, [r3, #20]
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	689b      	ldr	r3, [r3, #8]
 8010738:	4413      	add	r3, r2
 801073a:	1e5a      	subs	r2, r3, #1
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	689b      	ldr	r3, [r3, #8]
 8010740:	fbb2 f3f3 	udiv	r3, r2, r3
 8010744:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010746:	69bb      	ldr	r3, [r7, #24]
 8010748:	015a      	lsls	r2, r3, #5
 801074a:	69fb      	ldr	r3, [r7, #28]
 801074c:	4413      	add	r3, r2
 801074e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010752:	691a      	ldr	r2, [r3, #16]
 8010754:	8afb      	ldrh	r3, [r7, #22]
 8010756:	04d9      	lsls	r1, r3, #19
 8010758:	4b39      	ldr	r3, [pc, #228]	; (8010840 <USB_EPStartXfer+0x484>)
 801075a:	400b      	ands	r3, r1
 801075c:	69b9      	ldr	r1, [r7, #24]
 801075e:	0148      	lsls	r0, r1, #5
 8010760:	69f9      	ldr	r1, [r7, #28]
 8010762:	4401      	add	r1, r0
 8010764:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010768:	4313      	orrs	r3, r2
 801076a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801076c:	69bb      	ldr	r3, [r7, #24]
 801076e:	015a      	lsls	r2, r3, #5
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	4413      	add	r3, r2
 8010774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010778:	691a      	ldr	r2, [r3, #16]
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	689b      	ldr	r3, [r3, #8]
 801077e:	8af9      	ldrh	r1, [r7, #22]
 8010780:	fb01 f303 	mul.w	r3, r1, r3
 8010784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010788:	69b9      	ldr	r1, [r7, #24]
 801078a:	0148      	lsls	r0, r1, #5
 801078c:	69f9      	ldr	r1, [r7, #28]
 801078e:	4401      	add	r1, r0
 8010790:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010794:	4313      	orrs	r3, r2
 8010796:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010798:	79fb      	ldrb	r3, [r7, #7]
 801079a:	2b01      	cmp	r3, #1
 801079c:	d10d      	bne.n	80107ba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d009      	beq.n	80107ba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	68d9      	ldr	r1, [r3, #12]
 80107aa:	69bb      	ldr	r3, [r7, #24]
 80107ac:	015a      	lsls	r2, r3, #5
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	4413      	add	r3, r2
 80107b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107b6:	460a      	mov	r2, r1
 80107b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	78db      	ldrb	r3, [r3, #3]
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d128      	bne.n	8010814 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107c8:	689b      	ldr	r3, [r3, #8]
 80107ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d110      	bne.n	80107f4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	015a      	lsls	r2, r3, #5
 80107d6:	69fb      	ldr	r3, [r7, #28]
 80107d8:	4413      	add	r3, r2
 80107da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	69ba      	ldr	r2, [r7, #24]
 80107e2:	0151      	lsls	r1, r2, #5
 80107e4:	69fa      	ldr	r2, [r7, #28]
 80107e6:	440a      	add	r2, r1
 80107e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80107f0:	6013      	str	r3, [r2, #0]
 80107f2:	e00f      	b.n	8010814 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	015a      	lsls	r2, r3, #5
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	4413      	add	r3, r2
 80107fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	69ba      	ldr	r2, [r7, #24]
 8010804:	0151      	lsls	r1, r2, #5
 8010806:	69fa      	ldr	r2, [r7, #28]
 8010808:	440a      	add	r2, r1
 801080a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801080e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010812:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010814:	69bb      	ldr	r3, [r7, #24]
 8010816:	015a      	lsls	r2, r3, #5
 8010818:	69fb      	ldr	r3, [r7, #28]
 801081a:	4413      	add	r3, r2
 801081c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	69ba      	ldr	r2, [r7, #24]
 8010824:	0151      	lsls	r1, r2, #5
 8010826:	69fa      	ldr	r2, [r7, #28]
 8010828:	440a      	add	r2, r1
 801082a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801082e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010832:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010834:	2300      	movs	r3, #0
}
 8010836:	4618      	mov	r0, r3
 8010838:	3720      	adds	r7, #32
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	1ff80000 	.word	0x1ff80000

08010844 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010844:	b480      	push	{r7}
 8010846:	b087      	sub	sp, #28
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	4613      	mov	r3, r2
 8010850:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	785b      	ldrb	r3, [r3, #1]
 8010860:	2b01      	cmp	r3, #1
 8010862:	f040 80cd 	bne.w	8010a00 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	695b      	ldr	r3, [r3, #20]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d132      	bne.n	80108d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	015a      	lsls	r2, r3, #5
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	4413      	add	r3, r2
 8010876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801087a:	691b      	ldr	r3, [r3, #16]
 801087c:	693a      	ldr	r2, [r7, #16]
 801087e:	0151      	lsls	r1, r2, #5
 8010880:	697a      	ldr	r2, [r7, #20]
 8010882:	440a      	add	r2, r1
 8010884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010888:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801088c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010890:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	015a      	lsls	r2, r3, #5
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	4413      	add	r3, r2
 801089a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801089e:	691b      	ldr	r3, [r3, #16]
 80108a0:	693a      	ldr	r2, [r7, #16]
 80108a2:	0151      	lsls	r1, r2, #5
 80108a4:	697a      	ldr	r2, [r7, #20]
 80108a6:	440a      	add	r2, r1
 80108a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80108b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	015a      	lsls	r2, r3, #5
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	4413      	add	r3, r2
 80108ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108be:	691b      	ldr	r3, [r3, #16]
 80108c0:	693a      	ldr	r2, [r7, #16]
 80108c2:	0151      	lsls	r1, r2, #5
 80108c4:	697a      	ldr	r2, [r7, #20]
 80108c6:	440a      	add	r2, r1
 80108c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108cc:	0cdb      	lsrs	r3, r3, #19
 80108ce:	04db      	lsls	r3, r3, #19
 80108d0:	6113      	str	r3, [r2, #16]
 80108d2:	e04e      	b.n	8010972 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	015a      	lsls	r2, r3, #5
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	4413      	add	r3, r2
 80108dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108e0:	691b      	ldr	r3, [r3, #16]
 80108e2:	693a      	ldr	r2, [r7, #16]
 80108e4:	0151      	lsls	r1, r2, #5
 80108e6:	697a      	ldr	r2, [r7, #20]
 80108e8:	440a      	add	r2, r1
 80108ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108ee:	0cdb      	lsrs	r3, r3, #19
 80108f0:	04db      	lsls	r3, r3, #19
 80108f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	015a      	lsls	r2, r3, #5
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	4413      	add	r3, r2
 80108fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010900:	691b      	ldr	r3, [r3, #16]
 8010902:	693a      	ldr	r2, [r7, #16]
 8010904:	0151      	lsls	r1, r2, #5
 8010906:	697a      	ldr	r2, [r7, #20]
 8010908:	440a      	add	r2, r1
 801090a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801090e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010912:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010916:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	695a      	ldr	r2, [r3, #20]
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	429a      	cmp	r2, r3
 8010922:	d903      	bls.n	801092c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	689a      	ldr	r2, [r3, #8]
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	015a      	lsls	r2, r3, #5
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	4413      	add	r3, r2
 8010934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010938:	691b      	ldr	r3, [r3, #16]
 801093a:	693a      	ldr	r2, [r7, #16]
 801093c:	0151      	lsls	r1, r2, #5
 801093e:	697a      	ldr	r2, [r7, #20]
 8010940:	440a      	add	r2, r1
 8010942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801094a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	015a      	lsls	r2, r3, #5
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	4413      	add	r3, r2
 8010954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010958:	691a      	ldr	r2, [r3, #16]
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	695b      	ldr	r3, [r3, #20]
 801095e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010962:	6939      	ldr	r1, [r7, #16]
 8010964:	0148      	lsls	r0, r1, #5
 8010966:	6979      	ldr	r1, [r7, #20]
 8010968:	4401      	add	r1, r0
 801096a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801096e:	4313      	orrs	r3, r2
 8010970:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010972:	79fb      	ldrb	r3, [r7, #7]
 8010974:	2b01      	cmp	r3, #1
 8010976:	d11e      	bne.n	80109b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	691b      	ldr	r3, [r3, #16]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d009      	beq.n	8010994 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	015a      	lsls	r2, r3, #5
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	4413      	add	r3, r2
 8010988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801098c:	461a      	mov	r2, r3
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	691b      	ldr	r3, [r3, #16]
 8010992:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	015a      	lsls	r2, r3, #5
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	4413      	add	r3, r2
 801099c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	693a      	ldr	r2, [r7, #16]
 80109a4:	0151      	lsls	r1, r2, #5
 80109a6:	697a      	ldr	r2, [r7, #20]
 80109a8:	440a      	add	r2, r1
 80109aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80109b2:	6013      	str	r3, [r2, #0]
 80109b4:	e092      	b.n	8010adc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	015a      	lsls	r2, r3, #5
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	4413      	add	r3, r2
 80109be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	693a      	ldr	r2, [r7, #16]
 80109c6:	0151      	lsls	r1, r2, #5
 80109c8:	697a      	ldr	r2, [r7, #20]
 80109ca:	440a      	add	r2, r1
 80109cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80109d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	695b      	ldr	r3, [r3, #20]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d07e      	beq.n	8010adc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	f003 030f 	and.w	r3, r3, #15
 80109ee:	2101      	movs	r1, #1
 80109f0:	fa01 f303 	lsl.w	r3, r1, r3
 80109f4:	6979      	ldr	r1, [r7, #20]
 80109f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80109fa:	4313      	orrs	r3, r2
 80109fc:	634b      	str	r3, [r1, #52]	; 0x34
 80109fe:	e06d      	b.n	8010adc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	015a      	lsls	r2, r3, #5
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	4413      	add	r3, r2
 8010a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a0c:	691b      	ldr	r3, [r3, #16]
 8010a0e:	693a      	ldr	r2, [r7, #16]
 8010a10:	0151      	lsls	r1, r2, #5
 8010a12:	697a      	ldr	r2, [r7, #20]
 8010a14:	440a      	add	r2, r1
 8010a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a1a:	0cdb      	lsrs	r3, r3, #19
 8010a1c:	04db      	lsls	r3, r3, #19
 8010a1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	015a      	lsls	r2, r3, #5
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	4413      	add	r3, r2
 8010a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a2c:	691b      	ldr	r3, [r3, #16]
 8010a2e:	693a      	ldr	r2, [r7, #16]
 8010a30:	0151      	lsls	r1, r2, #5
 8010a32:	697a      	ldr	r2, [r7, #20]
 8010a34:	440a      	add	r2, r1
 8010a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010a3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010a42:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	695b      	ldr	r3, [r3, #20]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d003      	beq.n	8010a54 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	689a      	ldr	r2, [r3, #8]
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	015a      	lsls	r2, r3, #5
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	4413      	add	r3, r2
 8010a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a60:	691b      	ldr	r3, [r3, #16]
 8010a62:	693a      	ldr	r2, [r7, #16]
 8010a64:	0151      	lsls	r1, r2, #5
 8010a66:	697a      	ldr	r2, [r7, #20]
 8010a68:	440a      	add	r2, r1
 8010a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010a72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	015a      	lsls	r2, r3, #5
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a80:	691a      	ldr	r2, [r3, #16]
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	689b      	ldr	r3, [r3, #8]
 8010a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010a8a:	6939      	ldr	r1, [r7, #16]
 8010a8c:	0148      	lsls	r0, r1, #5
 8010a8e:	6979      	ldr	r1, [r7, #20]
 8010a90:	4401      	add	r1, r0
 8010a92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010a96:	4313      	orrs	r3, r2
 8010a98:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010a9a:	79fb      	ldrb	r3, [r7, #7]
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d10d      	bne.n	8010abc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d009      	beq.n	8010abc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	68d9      	ldr	r1, [r3, #12]
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	015a      	lsls	r2, r3, #5
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ab8:	460a      	mov	r2, r1
 8010aba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	015a      	lsls	r2, r3, #5
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	4413      	add	r3, r2
 8010ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	693a      	ldr	r2, [r7, #16]
 8010acc:	0151      	lsls	r1, r2, #5
 8010ace:	697a      	ldr	r2, [r7, #20]
 8010ad0:	440a      	add	r2, r1
 8010ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ad6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010ada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010adc:	2300      	movs	r3, #0
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	371c      	adds	r7, #28
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae8:	4770      	bx	lr

08010aea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010aea:	b480      	push	{r7}
 8010aec:	b089      	sub	sp, #36	; 0x24
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	60f8      	str	r0, [r7, #12]
 8010af2:	60b9      	str	r1, [r7, #8]
 8010af4:	4611      	mov	r1, r2
 8010af6:	461a      	mov	r2, r3
 8010af8:	460b      	mov	r3, r1
 8010afa:	71fb      	strb	r3, [r7, #7]
 8010afc:	4613      	mov	r3, r2
 8010afe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010b08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d123      	bne.n	8010b58 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010b10:	88bb      	ldrh	r3, [r7, #4]
 8010b12:	3303      	adds	r3, #3
 8010b14:	089b      	lsrs	r3, r3, #2
 8010b16:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010b18:	2300      	movs	r3, #0
 8010b1a:	61bb      	str	r3, [r7, #24]
 8010b1c:	e018      	b.n	8010b50 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010b1e:	79fb      	ldrb	r3, [r7, #7]
 8010b20:	031a      	lsls	r2, r3, #12
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	4413      	add	r3, r2
 8010b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b2a:	461a      	mov	r2, r3
 8010b2c:	69fb      	ldr	r3, [r7, #28]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	3301      	adds	r3, #1
 8010b36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	3301      	adds	r3, #1
 8010b42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010b44:	69fb      	ldr	r3, [r7, #28]
 8010b46:	3301      	adds	r3, #1
 8010b48:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010b4a:	69bb      	ldr	r3, [r7, #24]
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	61bb      	str	r3, [r7, #24]
 8010b50:	69ba      	ldr	r2, [r7, #24]
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d3e2      	bcc.n	8010b1e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010b58:	2300      	movs	r3, #0
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3724      	adds	r7, #36	; 0x24
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr

08010b66 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010b66:	b480      	push	{r7}
 8010b68:	b08b      	sub	sp, #44	; 0x2c
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	60f8      	str	r0, [r7, #12]
 8010b6e:	60b9      	str	r1, [r7, #8]
 8010b70:	4613      	mov	r3, r2
 8010b72:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010b7c:	88fb      	ldrh	r3, [r7, #6]
 8010b7e:	089b      	lsrs	r3, r3, #2
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010b84:	88fb      	ldrh	r3, [r7, #6]
 8010b86:	f003 0303 	and.w	r3, r3, #3
 8010b8a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	623b      	str	r3, [r7, #32]
 8010b90:	e014      	b.n	8010bbc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010b92:	69bb      	ldr	r3, [r7, #24]
 8010b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9c:	601a      	str	r2, [r3, #0]
    pDest++;
 8010b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bac:	3301      	adds	r3, #1
 8010bae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010bb6:	6a3b      	ldr	r3, [r7, #32]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	623b      	str	r3, [r7, #32]
 8010bbc:	6a3a      	ldr	r2, [r7, #32]
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d3e6      	bcc.n	8010b92 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010bc4:	8bfb      	ldrh	r3, [r7, #30]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d01e      	beq.n	8010c08 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	f107 0310 	add.w	r3, r7, #16
 8010bda:	6812      	ldr	r2, [r2, #0]
 8010bdc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010bde:	693a      	ldr	r2, [r7, #16]
 8010be0:	6a3b      	ldr	r3, [r7, #32]
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	00db      	lsls	r3, r3, #3
 8010be6:	fa22 f303 	lsr.w	r3, r2, r3
 8010bea:	b2da      	uxtb	r2, r3
 8010bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bee:	701a      	strb	r2, [r3, #0]
      i++;
 8010bf0:	6a3b      	ldr	r3, [r7, #32]
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	623b      	str	r3, [r7, #32]
      pDest++;
 8010bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010bfc:	8bfb      	ldrh	r3, [r7, #30]
 8010bfe:	3b01      	subs	r3, #1
 8010c00:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010c02:	8bfb      	ldrh	r3, [r7, #30]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d1ea      	bne.n	8010bde <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	372c      	adds	r7, #44	; 0x2c
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr

08010c16 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010c16:	b480      	push	{r7}
 8010c18:	b085      	sub	sp, #20
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	6078      	str	r0, [r7, #4]
 8010c1e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	785b      	ldrb	r3, [r3, #1]
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	d12c      	bne.n	8010c8c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	015a      	lsls	r2, r3, #5
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	4413      	add	r3, r2
 8010c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	db12      	blt.n	8010c6a <USB_EPSetStall+0x54>
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d00f      	beq.n	8010c6a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	015a      	lsls	r2, r3, #5
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	4413      	add	r3, r2
 8010c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	68ba      	ldr	r2, [r7, #8]
 8010c5a:	0151      	lsls	r1, r2, #5
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	440a      	add	r2, r1
 8010c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010c68:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	015a      	lsls	r2, r3, #5
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	4413      	add	r3, r2
 8010c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	68ba      	ldr	r2, [r7, #8]
 8010c7a:	0151      	lsls	r1, r2, #5
 8010c7c:	68fa      	ldr	r2, [r7, #12]
 8010c7e:	440a      	add	r2, r1
 8010c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010c88:	6013      	str	r3, [r2, #0]
 8010c8a:	e02b      	b.n	8010ce4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	015a      	lsls	r2, r3, #5
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	4413      	add	r3, r2
 8010c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	db12      	blt.n	8010cc4 <USB_EPSetStall+0xae>
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00f      	beq.n	8010cc4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	015a      	lsls	r2, r3, #5
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	4413      	add	r3, r2
 8010cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	68ba      	ldr	r2, [r7, #8]
 8010cb4:	0151      	lsls	r1, r2, #5
 8010cb6:	68fa      	ldr	r2, [r7, #12]
 8010cb8:	440a      	add	r2, r1
 8010cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010cbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010cc2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	015a      	lsls	r2, r3, #5
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	4413      	add	r3, r2
 8010ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	68ba      	ldr	r2, [r7, #8]
 8010cd4:	0151      	lsls	r1, r2, #5
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	440a      	add	r2, r1
 8010cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010ce2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010ce4:	2300      	movs	r3, #0
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3714      	adds	r7, #20
 8010cea:	46bd      	mov	sp, r7
 8010cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf0:	4770      	bx	lr

08010cf2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010cf2:	b480      	push	{r7}
 8010cf4:	b085      	sub	sp, #20
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
 8010cfa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	785b      	ldrb	r3, [r3, #1]
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d128      	bne.n	8010d60 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	015a      	lsls	r2, r3, #5
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	4413      	add	r3, r2
 8010d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	68ba      	ldr	r2, [r7, #8]
 8010d1e:	0151      	lsls	r1, r2, #5
 8010d20:	68fa      	ldr	r2, [r7, #12]
 8010d22:	440a      	add	r2, r1
 8010d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010d2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	78db      	ldrb	r3, [r3, #3]
 8010d32:	2b03      	cmp	r3, #3
 8010d34:	d003      	beq.n	8010d3e <USB_EPClearStall+0x4c>
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	78db      	ldrb	r3, [r3, #3]
 8010d3a:	2b02      	cmp	r3, #2
 8010d3c:	d138      	bne.n	8010db0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	015a      	lsls	r2, r3, #5
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	4413      	add	r3, r2
 8010d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	68ba      	ldr	r2, [r7, #8]
 8010d4e:	0151      	lsls	r1, r2, #5
 8010d50:	68fa      	ldr	r2, [r7, #12]
 8010d52:	440a      	add	r2, r1
 8010d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d5c:	6013      	str	r3, [r2, #0]
 8010d5e:	e027      	b.n	8010db0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	015a      	lsls	r2, r3, #5
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	4413      	add	r3, r2
 8010d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	68ba      	ldr	r2, [r7, #8]
 8010d70:	0151      	lsls	r1, r2, #5
 8010d72:	68fa      	ldr	r2, [r7, #12]
 8010d74:	440a      	add	r2, r1
 8010d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010d7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	78db      	ldrb	r3, [r3, #3]
 8010d84:	2b03      	cmp	r3, #3
 8010d86:	d003      	beq.n	8010d90 <USB_EPClearStall+0x9e>
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	78db      	ldrb	r3, [r3, #3]
 8010d8c:	2b02      	cmp	r3, #2
 8010d8e:	d10f      	bne.n	8010db0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	015a      	lsls	r2, r3, #5
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	4413      	add	r3, r2
 8010d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	68ba      	ldr	r2, [r7, #8]
 8010da0:	0151      	lsls	r1, r2, #5
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	440a      	add	r2, r1
 8010da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010dae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010db0:	2300      	movs	r3, #0
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3714      	adds	r7, #20
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr

08010dbe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010dbe:	b480      	push	{r7}
 8010dc0:	b085      	sub	sp, #20
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	68fa      	ldr	r2, [r7, #12]
 8010dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ddc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010de0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010de8:	681a      	ldr	r2, [r3, #0]
 8010dea:	78fb      	ldrb	r3, [r7, #3]
 8010dec:	011b      	lsls	r3, r3, #4
 8010dee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010df2:	68f9      	ldr	r1, [r7, #12]
 8010df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010df8:	4313      	orrs	r3, r2
 8010dfa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010dfc:	2300      	movs	r3, #0
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3714      	adds	r7, #20
 8010e02:	46bd      	mov	sp, r7
 8010e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e08:	4770      	bx	lr

08010e0a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010e0a:	b480      	push	{r7}
 8010e0c:	b085      	sub	sp, #20
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	68fa      	ldr	r2, [r7, #12]
 8010e20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010e24:	f023 0303 	bic.w	r3, r3, #3
 8010e28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e30:	685b      	ldr	r3, [r3, #4]
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e38:	f023 0302 	bic.w	r3, r3, #2
 8010e3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010e3e:	2300      	movs	r3, #0
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3714      	adds	r7, #20
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr

08010e4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010e4c:	b480      	push	{r7}
 8010e4e:	b085      	sub	sp, #20
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	68fa      	ldr	r2, [r7, #12]
 8010e62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010e66:	f023 0303 	bic.w	r3, r3, #3
 8010e6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e7a:	f043 0302 	orr.w	r3, r3, #2
 8010e7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3714      	adds	r7, #20
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr

08010e8e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010e8e:	b480      	push	{r7}
 8010e90:	b085      	sub	sp, #20
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	695b      	ldr	r3, [r3, #20]
 8010e9a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	699b      	ldr	r3, [r3, #24]
 8010ea0:	68fa      	ldr	r2, [r7, #12]
 8010ea2:	4013      	ands	r3, r2
 8010ea4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3714      	adds	r7, #20
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr

08010eb4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b085      	sub	sp, #20
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ec6:	699b      	ldr	r3, [r3, #24]
 8010ec8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ed0:	69db      	ldr	r3, [r3, #28]
 8010ed2:	68ba      	ldr	r2, [r7, #8]
 8010ed4:	4013      	ands	r3, r2
 8010ed6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	0c1b      	lsrs	r3, r3, #16
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3714      	adds	r7, #20
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee6:	4770      	bx	lr

08010ee8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010efa:	699b      	ldr	r3, [r3, #24]
 8010efc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f04:	69db      	ldr	r3, [r3, #28]
 8010f06:	68ba      	ldr	r2, [r7, #8]
 8010f08:	4013      	ands	r3, r2
 8010f0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	b29b      	uxth	r3, r3
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3714      	adds	r7, #20
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr

08010f1c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b085      	sub	sp, #20
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	460b      	mov	r3, r1
 8010f26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010f2c:	78fb      	ldrb	r3, [r7, #3]
 8010f2e:	015a      	lsls	r2, r3, #5
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	4413      	add	r3, r2
 8010f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f38:	689b      	ldr	r3, [r3, #8]
 8010f3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f42:	695b      	ldr	r3, [r3, #20]
 8010f44:	68ba      	ldr	r2, [r7, #8]
 8010f46:	4013      	ands	r3, r2
 8010f48:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010f4a:	68bb      	ldr	r3, [r7, #8]
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3714      	adds	r7, #20
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr

08010f58 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b087      	sub	sp, #28
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
 8010f60:	460b      	mov	r3, r1
 8010f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f6e:	691b      	ldr	r3, [r3, #16]
 8010f70:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f7a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010f7c:	78fb      	ldrb	r3, [r7, #3]
 8010f7e:	f003 030f 	and.w	r3, r3, #15
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	fa22 f303 	lsr.w	r3, r2, r3
 8010f88:	01db      	lsls	r3, r3, #7
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	693a      	ldr	r2, [r7, #16]
 8010f8e:	4313      	orrs	r3, r2
 8010f90:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010f92:	78fb      	ldrb	r3, [r7, #3]
 8010f94:	015a      	lsls	r2, r3, #5
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	4413      	add	r3, r2
 8010f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f9e:	689b      	ldr	r3, [r3, #8]
 8010fa0:	693a      	ldr	r2, [r7, #16]
 8010fa2:	4013      	ands	r3, r2
 8010fa4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010fa6:	68bb      	ldr	r3, [r7, #8]
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	371c      	adds	r7, #28
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b083      	sub	sp, #12
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	695b      	ldr	r3, [r3, #20]
 8010fc0:	f003 0301 	and.w	r3, r3, #1
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr

08010fd0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b085      	sub	sp, #20
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	68fa      	ldr	r2, [r7, #12]
 8010fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010fee:	f023 0307 	bic.w	r3, r3, #7
 8010ff2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	68fa      	ldr	r2, [r7, #12]
 8010ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011006:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011008:	2300      	movs	r3, #0
}
 801100a:	4618      	mov	r0, r3
 801100c:	3714      	adds	r7, #20
 801100e:	46bd      	mov	sp, r7
 8011010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011014:	4770      	bx	lr
	...

08011018 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8011018:	b480      	push	{r7}
 801101a:	b087      	sub	sp, #28
 801101c:	af00      	add	r7, sp, #0
 801101e:	60f8      	str	r0, [r7, #12]
 8011020:	460b      	mov	r3, r1
 8011022:	607a      	str	r2, [r7, #4]
 8011024:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	333c      	adds	r3, #60	; 0x3c
 801102e:	3304      	adds	r3, #4
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	4a26      	ldr	r2, [pc, #152]	; (80110d0 <USB_EP0_OutStart+0xb8>)
 8011038:	4293      	cmp	r3, r2
 801103a:	d90a      	bls.n	8011052 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801103c:	697b      	ldr	r3, [r7, #20]
 801103e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801104c:	d101      	bne.n	8011052 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801104e:	2300      	movs	r3, #0
 8011050:	e037      	b.n	80110c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011058:	461a      	mov	r2, r3
 801105a:	2300      	movs	r3, #0
 801105c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011064:	691b      	ldr	r3, [r3, #16]
 8011066:	697a      	ldr	r2, [r7, #20]
 8011068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801106c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011070:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011078:	691b      	ldr	r3, [r3, #16]
 801107a:	697a      	ldr	r2, [r7, #20]
 801107c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011080:	f043 0318 	orr.w	r3, r3, #24
 8011084:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801108c:	691b      	ldr	r3, [r3, #16]
 801108e:	697a      	ldr	r2, [r7, #20]
 8011090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011094:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011098:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801109a:	7afb      	ldrb	r3, [r7, #11]
 801109c:	2b01      	cmp	r3, #1
 801109e:	d10f      	bne.n	80110c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110a6:	461a      	mov	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	697a      	ldr	r2, [r7, #20]
 80110b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80110be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80110c0:	2300      	movs	r3, #0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	371c      	adds	r7, #28
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr
 80110ce:	bf00      	nop
 80110d0:	4f54300a 	.word	0x4f54300a

080110d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b085      	sub	sp, #20
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80110dc:	2300      	movs	r3, #0
 80110de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	3301      	adds	r3, #1
 80110e4:	60fb      	str	r3, [r7, #12]
 80110e6:	4a13      	ldr	r2, [pc, #76]	; (8011134 <USB_CoreReset+0x60>)
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d901      	bls.n	80110f0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80110ec:	2303      	movs	r3, #3
 80110ee:	e01a      	b.n	8011126 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	691b      	ldr	r3, [r3, #16]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	daf3      	bge.n	80110e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80110f8:	2300      	movs	r3, #0
 80110fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	691b      	ldr	r3, [r3, #16]
 8011100:	f043 0201 	orr.w	r2, r3, #1
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	3301      	adds	r3, #1
 801110c:	60fb      	str	r3, [r7, #12]
 801110e:	4a09      	ldr	r2, [pc, #36]	; (8011134 <USB_CoreReset+0x60>)
 8011110:	4293      	cmp	r3, r2
 8011112:	d901      	bls.n	8011118 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8011114:	2303      	movs	r3, #3
 8011116:	e006      	b.n	8011126 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	691b      	ldr	r3, [r3, #16]
 801111c:	f003 0301 	and.w	r3, r3, #1
 8011120:	2b01      	cmp	r3, #1
 8011122:	d0f1      	beq.n	8011108 <USB_CoreReset+0x34>

  return HAL_OK;
 8011124:	2300      	movs	r3, #0
}
 8011126:	4618      	mov	r0, r3
 8011128:	3714      	adds	r7, #20
 801112a:	46bd      	mov	sp, r7
 801112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop
 8011134:	00030d40 	.word	0x00030d40

08011138 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801113c:	4904      	ldr	r1, [pc, #16]	; (8011150 <MX_FATFS_Init+0x18>)
 801113e:	4805      	ldr	r0, [pc, #20]	; (8011154 <MX_FATFS_Init+0x1c>)
 8011140:	f006 f800 	bl	8017144 <FATFS_LinkDriver>
 8011144:	4603      	mov	r3, r0
 8011146:	461a      	mov	r2, r3
 8011148:	4b03      	ldr	r3, [pc, #12]	; (8011158 <MX_FATFS_Init+0x20>)
 801114a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801114c:	bf00      	nop
 801114e:	bd80      	pop	{r7, pc}
 8011150:	20003cac 	.word	0x20003cac
 8011154:	08018784 	.word	0x08018784
 8011158:	20003ca8 	.word	0x20003ca8

0801115c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801115c:	b480      	push	{r7}
 801115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011160:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011162:	4618      	mov	r0, r3
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr

0801116c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011172:	2300      	movs	r3, #0
 8011174:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011176:	f000 f896 	bl	80112a6 <BSP_SD_IsDetected>
 801117a:	4603      	mov	r3, r0
 801117c:	2b01      	cmp	r3, #1
 801117e:	d001      	beq.n	8011184 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011180:	2301      	movs	r3, #1
 8011182:	e012      	b.n	80111aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8011184:	480b      	ldr	r0, [pc, #44]	; (80111b4 <BSP_SD_Init+0x48>)
 8011186:	f7fb fd53 	bl	800cc30 <HAL_SD_Init>
 801118a:	4603      	mov	r3, r0
 801118c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801118e:	79fb      	ldrb	r3, [r7, #7]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d109      	bne.n	80111a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8011194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011198:	4806      	ldr	r0, [pc, #24]	; (80111b4 <BSP_SD_Init+0x48>)
 801119a:	f7fc fe6d 	bl	800de78 <HAL_SD_ConfigWideBusOperation>
 801119e:	4603      	mov	r3, r0
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d001      	beq.n	80111a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80111a4:	2301      	movs	r3, #1
 80111a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80111a8:	79fb      	ldrb	r3, [r7, #7]
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3708      	adds	r7, #8
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	20002a78 	.word	0x20002a78

080111b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b086      	sub	sp, #24
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80111c4:	2300      	movs	r3, #0
 80111c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	68ba      	ldr	r2, [r7, #8]
 80111cc:	68f9      	ldr	r1, [r7, #12]
 80111ce:	4806      	ldr	r0, [pc, #24]	; (80111e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80111d0:	f7fc f940 	bl	800d454 <HAL_SD_ReadBlocks_DMA>
 80111d4:	4603      	mov	r3, r0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d001      	beq.n	80111de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80111da:	2301      	movs	r3, #1
 80111dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80111de:	7dfb      	ldrb	r3, [r7, #23]
}
 80111e0:	4618      	mov	r0, r3
 80111e2:	3718      	adds	r7, #24
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	20002a78 	.word	0x20002a78

080111ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b086      	sub	sp, #24
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80111f8:	2300      	movs	r3, #0
 80111fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	68ba      	ldr	r2, [r7, #8]
 8011200:	68f9      	ldr	r1, [r7, #12]
 8011202:	4806      	ldr	r0, [pc, #24]	; (801121c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011204:	f7fc fa06 	bl	800d614 <HAL_SD_WriteBlocks_DMA>
 8011208:	4603      	mov	r3, r0
 801120a:	2b00      	cmp	r3, #0
 801120c:	d001      	beq.n	8011212 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801120e:	2301      	movs	r3, #1
 8011210:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011212:	7dfb      	ldrb	r3, [r7, #23]
}
 8011214:	4618      	mov	r0, r3
 8011216:	3718      	adds	r7, #24
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}
 801121c:	20002a78 	.word	0x20002a78

08011220 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011224:	4805      	ldr	r0, [pc, #20]	; (801123c <BSP_SD_GetCardState+0x1c>)
 8011226:	f7fc fec1 	bl	800dfac <HAL_SD_GetCardState>
 801122a:	4603      	mov	r3, r0
 801122c:	2b04      	cmp	r3, #4
 801122e:	bf14      	ite	ne
 8011230:	2301      	movne	r3, #1
 8011232:	2300      	moveq	r3, #0
 8011234:	b2db      	uxtb	r3, r3
}
 8011236:	4618      	mov	r0, r3
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	20002a78 	.word	0x20002a78

08011240 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011248:	6879      	ldr	r1, [r7, #4]
 801124a:	4803      	ldr	r0, [pc, #12]	; (8011258 <BSP_SD_GetCardInfo+0x18>)
 801124c:	f7fc fde8 	bl	800de20 <HAL_SD_GetCardInfo>
}
 8011250:	bf00      	nop
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	20002a78 	.word	0x20002a78

0801125c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b082      	sub	sp, #8
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011264:	f000 f818 	bl	8011298 <BSP_SD_AbortCallback>
}
 8011268:	bf00      	nop
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011278:	f000 f9a8 	bl	80115cc <BSP_SD_WriteCpltCallback>
}
 801127c:	bf00      	nop
 801127e:	3708      	adds	r7, #8
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801128c:	f000 f9aa 	bl	80115e4 <BSP_SD_ReadCpltCallback>
}
 8011290:	bf00      	nop
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}

08011298 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011298:	b480      	push	{r7}
 801129a:	af00      	add	r7, sp, #0

}
 801129c:	bf00      	nop
 801129e:	46bd      	mov	sp, r7
 80112a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a4:	4770      	bx	lr

080112a6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80112a6:	b580      	push	{r7, lr}
 80112a8:	b082      	sub	sp, #8
 80112aa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80112ac:	2301      	movs	r3, #1
 80112ae:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80112b0:	f000 f80c 	bl	80112cc <BSP_PlatformIsDetected>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d101      	bne.n	80112be <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80112ba:	2300      	movs	r3, #0
 80112bc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80112be:	79fb      	ldrb	r3, [r7, #7]
 80112c0:	b2db      	uxtb	r3, r3
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3708      	adds	r7, #8
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
	...

080112cc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80112d2:	2301      	movs	r3, #1
 80112d4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80112d6:	2180      	movs	r1, #128	; 0x80
 80112d8:	4806      	ldr	r0, [pc, #24]	; (80112f4 <BSP_PlatformIsDetected+0x28>)
 80112da:	f7f7 fe03 	bl	8008ee4 <HAL_GPIO_ReadPin>
 80112de:	4603      	mov	r3, r0
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d001      	beq.n	80112e8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80112e4:	2300      	movs	r3, #0
 80112e6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80112e8:	79fb      	ldrb	r3, [r7, #7]
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3708      	adds	r7, #8
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	40020800 	.word	0x40020800

080112f8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011300:	f7f5 fcc2 	bl	8006c88 <HAL_GetTick>
 8011304:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011306:	e006      	b.n	8011316 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011308:	f7ff ff8a 	bl	8011220 <BSP_SD_GetCardState>
 801130c:	4603      	mov	r3, r0
 801130e:	2b00      	cmp	r3, #0
 8011310:	d101      	bne.n	8011316 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011312:	2300      	movs	r3, #0
 8011314:	e009      	b.n	801132a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011316:	f7f5 fcb7 	bl	8006c88 <HAL_GetTick>
 801131a:	4602      	mov	r2, r0
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	1ad3      	subs	r3, r2, r3
 8011320:	687a      	ldr	r2, [r7, #4]
 8011322:	429a      	cmp	r2, r3
 8011324:	d8f0      	bhi.n	8011308 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011326:	f04f 33ff 	mov.w	r3, #4294967295
}
 801132a:	4618      	mov	r0, r3
 801132c:	3710      	adds	r7, #16
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
	...

08011334 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	4603      	mov	r3, r0
 801133c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801133e:	4b0b      	ldr	r3, [pc, #44]	; (801136c <SD_CheckStatus+0x38>)
 8011340:	2201      	movs	r2, #1
 8011342:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011344:	f7ff ff6c 	bl	8011220 <BSP_SD_GetCardState>
 8011348:	4603      	mov	r3, r0
 801134a:	2b00      	cmp	r3, #0
 801134c:	d107      	bne.n	801135e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801134e:	4b07      	ldr	r3, [pc, #28]	; (801136c <SD_CheckStatus+0x38>)
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	b2db      	uxtb	r3, r3
 8011354:	f023 0301 	bic.w	r3, r3, #1
 8011358:	b2da      	uxtb	r2, r3
 801135a:	4b04      	ldr	r3, [pc, #16]	; (801136c <SD_CheckStatus+0x38>)
 801135c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801135e:	4b03      	ldr	r3, [pc, #12]	; (801136c <SD_CheckStatus+0x38>)
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	b2db      	uxtb	r3, r3
}
 8011364:	4618      	mov	r0, r3
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}
 801136c:	20000009 	.word	0x20000009

08011370 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	4603      	mov	r3, r0
 8011378:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801137a:	f7ff fef7 	bl	801116c <BSP_SD_Init>
 801137e:	4603      	mov	r3, r0
 8011380:	2b00      	cmp	r3, #0
 8011382:	d107      	bne.n	8011394 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011384:	79fb      	ldrb	r3, [r7, #7]
 8011386:	4618      	mov	r0, r3
 8011388:	f7ff ffd4 	bl	8011334 <SD_CheckStatus>
 801138c:	4603      	mov	r3, r0
 801138e:	461a      	mov	r2, r3
 8011390:	4b04      	ldr	r3, [pc, #16]	; (80113a4 <SD_initialize+0x34>)
 8011392:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011394:	4b03      	ldr	r3, [pc, #12]	; (80113a4 <SD_initialize+0x34>)
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	b2db      	uxtb	r3, r3
}
 801139a:	4618      	mov	r0, r3
 801139c:	3708      	adds	r7, #8
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	20000009 	.word	0x20000009

080113a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	4603      	mov	r3, r0
 80113b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80113b2:	79fb      	ldrb	r3, [r7, #7]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7ff ffbd 	bl	8011334 <SD_CheckStatus>
 80113ba:	4603      	mov	r3, r0
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3708      	adds	r7, #8
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b086      	sub	sp, #24
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	60b9      	str	r1, [r7, #8]
 80113cc:	607a      	str	r2, [r7, #4]
 80113ce:	603b      	str	r3, [r7, #0]
 80113d0:	4603      	mov	r3, r0
 80113d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80113d4:	2301      	movs	r3, #1
 80113d6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80113d8:	f247 5030 	movw	r0, #30000	; 0x7530
 80113dc:	f7ff ff8c 	bl	80112f8 <SD_CheckStatusWithTimeout>
 80113e0:	4603      	mov	r3, r0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	da01      	bge.n	80113ea <SD_read+0x26>
  {
    return res;
 80113e6:	7dfb      	ldrb	r3, [r7, #23]
 80113e8:	e03b      	b.n	8011462 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80113ea:	683a      	ldr	r2, [r7, #0]
 80113ec:	6879      	ldr	r1, [r7, #4]
 80113ee:	68b8      	ldr	r0, [r7, #8]
 80113f0:	f7ff fee2 	bl	80111b8 <BSP_SD_ReadBlocks_DMA>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d132      	bne.n	8011460 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80113fa:	4b1c      	ldr	r3, [pc, #112]	; (801146c <SD_read+0xa8>)
 80113fc:	2200      	movs	r2, #0
 80113fe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011400:	f7f5 fc42 	bl	8006c88 <HAL_GetTick>
 8011404:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011406:	bf00      	nop
 8011408:	4b18      	ldr	r3, [pc, #96]	; (801146c <SD_read+0xa8>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d108      	bne.n	8011422 <SD_read+0x5e>
 8011410:	f7f5 fc3a 	bl	8006c88 <HAL_GetTick>
 8011414:	4602      	mov	r2, r0
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	1ad3      	subs	r3, r2, r3
 801141a:	f247 522f 	movw	r2, #29999	; 0x752f
 801141e:	4293      	cmp	r3, r2
 8011420:	d9f2      	bls.n	8011408 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8011422:	4b12      	ldr	r3, [pc, #72]	; (801146c <SD_read+0xa8>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d102      	bne.n	8011430 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801142a:	2301      	movs	r3, #1
 801142c:	75fb      	strb	r3, [r7, #23]
 801142e:	e017      	b.n	8011460 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011430:	4b0e      	ldr	r3, [pc, #56]	; (801146c <SD_read+0xa8>)
 8011432:	2200      	movs	r2, #0
 8011434:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011436:	f7f5 fc27 	bl	8006c88 <HAL_GetTick>
 801143a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801143c:	e007      	b.n	801144e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801143e:	f7ff feef 	bl	8011220 <BSP_SD_GetCardState>
 8011442:	4603      	mov	r3, r0
 8011444:	2b00      	cmp	r3, #0
 8011446:	d102      	bne.n	801144e <SD_read+0x8a>
          {
            res = RES_OK;
 8011448:	2300      	movs	r3, #0
 801144a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801144c:	e008      	b.n	8011460 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801144e:	f7f5 fc1b 	bl	8006c88 <HAL_GetTick>
 8011452:	4602      	mov	r2, r0
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	1ad3      	subs	r3, r2, r3
 8011458:	f247 522f 	movw	r2, #29999	; 0x752f
 801145c:	4293      	cmp	r3, r2
 801145e:	d9ee      	bls.n	801143e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011460:	7dfb      	ldrb	r3, [r7, #23]
}
 8011462:	4618      	mov	r0, r3
 8011464:	3718      	adds	r7, #24
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	200001fc 	.word	0x200001fc

08011470 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b086      	sub	sp, #24
 8011474:	af00      	add	r7, sp, #0
 8011476:	60b9      	str	r1, [r7, #8]
 8011478:	607a      	str	r2, [r7, #4]
 801147a:	603b      	str	r3, [r7, #0]
 801147c:	4603      	mov	r3, r0
 801147e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011480:	2301      	movs	r3, #1
 8011482:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011484:	4b24      	ldr	r3, [pc, #144]	; (8011518 <SD_write+0xa8>)
 8011486:	2200      	movs	r2, #0
 8011488:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801148a:	f247 5030 	movw	r0, #30000	; 0x7530
 801148e:	f7ff ff33 	bl	80112f8 <SD_CheckStatusWithTimeout>
 8011492:	4603      	mov	r3, r0
 8011494:	2b00      	cmp	r3, #0
 8011496:	da01      	bge.n	801149c <SD_write+0x2c>
  {
    return res;
 8011498:	7dfb      	ldrb	r3, [r7, #23]
 801149a:	e038      	b.n	801150e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801149c:	683a      	ldr	r2, [r7, #0]
 801149e:	6879      	ldr	r1, [r7, #4]
 80114a0:	68b8      	ldr	r0, [r7, #8]
 80114a2:	f7ff fea3 	bl	80111ec <BSP_SD_WriteBlocks_DMA>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d12f      	bne.n	801150c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80114ac:	f7f5 fbec 	bl	8006c88 <HAL_GetTick>
 80114b0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80114b2:	bf00      	nop
 80114b4:	4b18      	ldr	r3, [pc, #96]	; (8011518 <SD_write+0xa8>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d108      	bne.n	80114ce <SD_write+0x5e>
 80114bc:	f7f5 fbe4 	bl	8006c88 <HAL_GetTick>
 80114c0:	4602      	mov	r2, r0
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d9f2      	bls.n	80114b4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80114ce:	4b12      	ldr	r3, [pc, #72]	; (8011518 <SD_write+0xa8>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d102      	bne.n	80114dc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80114d6:	2301      	movs	r3, #1
 80114d8:	75fb      	strb	r3, [r7, #23]
 80114da:	e017      	b.n	801150c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80114dc:	4b0e      	ldr	r3, [pc, #56]	; (8011518 <SD_write+0xa8>)
 80114de:	2200      	movs	r2, #0
 80114e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80114e2:	f7f5 fbd1 	bl	8006c88 <HAL_GetTick>
 80114e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80114e8:	e007      	b.n	80114fa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80114ea:	f7ff fe99 	bl	8011220 <BSP_SD_GetCardState>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d102      	bne.n	80114fa <SD_write+0x8a>
          {
            res = RES_OK;
 80114f4:	2300      	movs	r3, #0
 80114f6:	75fb      	strb	r3, [r7, #23]
            break;
 80114f8:	e008      	b.n	801150c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80114fa:	f7f5 fbc5 	bl	8006c88 <HAL_GetTick>
 80114fe:	4602      	mov	r2, r0
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	1ad3      	subs	r3, r2, r3
 8011504:	f247 522f 	movw	r2, #29999	; 0x752f
 8011508:	4293      	cmp	r3, r2
 801150a:	d9ee      	bls.n	80114ea <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801150c:	7dfb      	ldrb	r3, [r7, #23]
}
 801150e:	4618      	mov	r0, r3
 8011510:	3718      	adds	r7, #24
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	200001f8 	.word	0x200001f8

0801151c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b08c      	sub	sp, #48	; 0x30
 8011520:	af00      	add	r7, sp, #0
 8011522:	4603      	mov	r3, r0
 8011524:	603a      	str	r2, [r7, #0]
 8011526:	71fb      	strb	r3, [r7, #7]
 8011528:	460b      	mov	r3, r1
 801152a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801152c:	2301      	movs	r3, #1
 801152e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011532:	4b25      	ldr	r3, [pc, #148]	; (80115c8 <SD_ioctl+0xac>)
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	b2db      	uxtb	r3, r3
 8011538:	f003 0301 	and.w	r3, r3, #1
 801153c:	2b00      	cmp	r3, #0
 801153e:	d001      	beq.n	8011544 <SD_ioctl+0x28>
 8011540:	2303      	movs	r3, #3
 8011542:	e03c      	b.n	80115be <SD_ioctl+0xa2>

  switch (cmd)
 8011544:	79bb      	ldrb	r3, [r7, #6]
 8011546:	2b03      	cmp	r3, #3
 8011548:	d834      	bhi.n	80115b4 <SD_ioctl+0x98>
 801154a:	a201      	add	r2, pc, #4	; (adr r2, 8011550 <SD_ioctl+0x34>)
 801154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011550:	08011561 	.word	0x08011561
 8011554:	08011569 	.word	0x08011569
 8011558:	08011581 	.word	0x08011581
 801155c:	0801159b 	.word	0x0801159b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011560:	2300      	movs	r3, #0
 8011562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011566:	e028      	b.n	80115ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011568:	f107 030c 	add.w	r3, r7, #12
 801156c:	4618      	mov	r0, r3
 801156e:	f7ff fe67 	bl	8011240 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011578:	2300      	movs	r3, #0
 801157a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801157e:	e01c      	b.n	80115ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011580:	f107 030c 	add.w	r3, r7, #12
 8011584:	4618      	mov	r0, r3
 8011586:	f7ff fe5b 	bl	8011240 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158c:	b29a      	uxth	r2, r3
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011592:	2300      	movs	r3, #0
 8011594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011598:	e00f      	b.n	80115ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801159a:	f107 030c 	add.w	r3, r7, #12
 801159e:	4618      	mov	r0, r3
 80115a0:	f7ff fe4e 	bl	8011240 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80115a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a6:	0a5a      	lsrs	r2, r3, #9
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80115ac:	2300      	movs	r3, #0
 80115ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115b2:	e002      	b.n	80115ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80115b4:	2304      	movs	r3, #4
 80115b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80115ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3730      	adds	r7, #48	; 0x30
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}
 80115c6:	bf00      	nop
 80115c8:	20000009 	.word	0x20000009

080115cc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80115cc:	b480      	push	{r7}
 80115ce:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80115d0:	4b03      	ldr	r3, [pc, #12]	; (80115e0 <BSP_SD_WriteCpltCallback+0x14>)
 80115d2:	2201      	movs	r2, #1
 80115d4:	601a      	str	r2, [r3, #0]
}
 80115d6:	bf00      	nop
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr
 80115e0:	200001f8 	.word	0x200001f8

080115e4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80115e4:	b480      	push	{r7}
 80115e6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80115e8:	4b03      	ldr	r3, [pc, #12]	; (80115f8 <BSP_SD_ReadCpltCallback+0x14>)
 80115ea:	2201      	movs	r2, #1
 80115ec:	601a      	str	r2, [r3, #0]
}
 80115ee:	bf00      	nop
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr
 80115f8:	200001fc 	.word	0x200001fc

080115fc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b084      	sub	sp, #16
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	460b      	mov	r3, r1
 8011606:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8011608:	f44f 701d 	mov.w	r0, #628	; 0x274
 801160c:	f006 fb9a 	bl	8017d44 <USBD_static_malloc>
 8011610:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d105      	bne.n	8011624 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2200      	movs	r2, #0
 801161c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011620:	2302      	movs	r3, #2
 8011622:	e034      	b.n	801168e <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	68fa      	ldr	r2, [r7, #12]
 8011628:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	7c1b      	ldrb	r3, [r3, #16]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d115      	bne.n	8011660 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011638:	2202      	movs	r2, #2
 801163a:	2101      	movs	r1, #1
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f006 f9f0 	bl	8017a22 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2201      	movs	r2, #1
 8011646:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801164a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801164e:	2202      	movs	r2, #2
 8011650:	2181      	movs	r1, #129	; 0x81
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f006 f9e5 	bl	8017a22 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2201      	movs	r2, #1
 801165c:	871a      	strh	r2, [r3, #56]	; 0x38
 801165e:	e012      	b.n	8011686 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011660:	2340      	movs	r3, #64	; 0x40
 8011662:	2202      	movs	r2, #2
 8011664:	2101      	movs	r1, #1
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f006 f9db 	bl	8017a22 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2201      	movs	r2, #1
 8011670:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011674:	2340      	movs	r3, #64	; 0x40
 8011676:	2202      	movs	r2, #2
 8011678:	2181      	movs	r1, #129	; 0x81
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f006 f9d1 	bl	8017a22 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2201      	movs	r2, #1
 8011684:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f000 f999 	bl	80119be <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801168c:	2300      	movs	r3, #0
}
 801168e:	4618      	mov	r0, r3
 8011690:	3710      	adds	r7, #16
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}

08011696 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011696:	b580      	push	{r7, lr}
 8011698:	b082      	sub	sp, #8
 801169a:	af00      	add	r7, sp, #0
 801169c:	6078      	str	r0, [r7, #4]
 801169e:	460b      	mov	r3, r1
 80116a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80116a2:	2101      	movs	r1, #1
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f006 f9e2 	bl	8017a6e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2200      	movs	r2, #0
 80116ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80116b2:	2181      	movs	r1, #129	; 0x81
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f006 f9da 	bl	8017a6e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2200      	movs	r2, #0
 80116be:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00c      	beq.n	80116e4 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f000 f9d5 	bl	8011a7a <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116d6:	4618      	mov	r0, r3
 80116d8:	f006 fb42 	bl	8017d60 <USBD_static_free>
    pdev->pClassData = NULL;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2200      	movs	r2, #0
 80116e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80116e4:	2300      	movs	r3, #0
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3708      	adds	r7, #8
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
	...

080116f0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b086      	sub	sp, #24
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011700:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8011702:	2300      	movs	r3, #0
 8011704:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8011706:	2300      	movs	r3, #0
 8011708:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d101      	bne.n	8011714 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011710:	2303      	movs	r3, #3
 8011712:	e0db      	b.n	80118cc <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801171c:	2b00      	cmp	r3, #0
 801171e:	d04e      	beq.n	80117be <USBD_MSC_Setup+0xce>
 8011720:	2b20      	cmp	r3, #32
 8011722:	f040 80cb 	bne.w	80118bc <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	785b      	ldrb	r3, [r3, #1]
 801172a:	2bfe      	cmp	r3, #254	; 0xfe
 801172c:	d002      	beq.n	8011734 <USBD_MSC_Setup+0x44>
 801172e:	2bff      	cmp	r3, #255	; 0xff
 8011730:	d025      	beq.n	801177e <USBD_MSC_Setup+0x8e>
 8011732:	e03c      	b.n	80117ae <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	885b      	ldrh	r3, [r3, #2]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d119      	bne.n	8011770 <USBD_MSC_Setup+0x80>
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	88db      	ldrh	r3, [r3, #6]
 8011740:	2b01      	cmp	r3, #1
 8011742:	d115      	bne.n	8011770 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801174a:	2b00      	cmp	r3, #0
 801174c:	da10      	bge.n	8011770 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011754:	699b      	ldr	r3, [r3, #24]
 8011756:	4798      	blx	r3
 8011758:	4603      	mov	r3, r0
 801175a:	461a      	mov	r2, r3
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	2201      	movs	r2, #1
 8011764:	4619      	mov	r1, r3
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f002 fe3d 	bl	80143e6 <USBD_CtlSendData>
 801176c:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801176e:	e025      	b.n	80117bc <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8011770:	6839      	ldr	r1, [r7, #0]
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f002 fdc6 	bl	8014304 <USBD_CtlError>
            ret = USBD_FAIL;
 8011778:	2303      	movs	r3, #3
 801177a:	75fb      	strb	r3, [r7, #23]
          break;
 801177c:	e01e      	b.n	80117bc <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	885b      	ldrh	r3, [r3, #2]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d10c      	bne.n	80117a0 <USBD_MSC_Setup+0xb0>
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	88db      	ldrh	r3, [r3, #6]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d108      	bne.n	80117a0 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011794:	2b00      	cmp	r3, #0
 8011796:	db03      	blt.n	80117a0 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f000 f948 	bl	8011a2e <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801179e:	e00d      	b.n	80117bc <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80117a0:	6839      	ldr	r1, [r7, #0]
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f002 fdae 	bl	8014304 <USBD_CtlError>
            ret = USBD_FAIL;
 80117a8:	2303      	movs	r3, #3
 80117aa:	75fb      	strb	r3, [r7, #23]
          break;
 80117ac:	e006      	b.n	80117bc <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80117ae:	6839      	ldr	r1, [r7, #0]
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f002 fda7 	bl	8014304 <USBD_CtlError>
          ret = USBD_FAIL;
 80117b6:	2303      	movs	r3, #3
 80117b8:	75fb      	strb	r3, [r7, #23]
          break;
 80117ba:	bf00      	nop
      }
      break;
 80117bc:	e085      	b.n	80118ca <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	785b      	ldrb	r3, [r3, #1]
 80117c2:	2b0b      	cmp	r3, #11
 80117c4:	d871      	bhi.n	80118aa <USBD_MSC_Setup+0x1ba>
 80117c6:	a201      	add	r2, pc, #4	; (adr r2, 80117cc <USBD_MSC_Setup+0xdc>)
 80117c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117cc:	080117fd 	.word	0x080117fd
 80117d0:	08011879 	.word	0x08011879
 80117d4:	080118ab 	.word	0x080118ab
 80117d8:	080118ab 	.word	0x080118ab
 80117dc:	080118ab 	.word	0x080118ab
 80117e0:	080118ab 	.word	0x080118ab
 80117e4:	080118ab 	.word	0x080118ab
 80117e8:	080118ab 	.word	0x080118ab
 80117ec:	080118ab 	.word	0x080118ab
 80117f0:	080118ab 	.word	0x080118ab
 80117f4:	08011827 	.word	0x08011827
 80117f8:	08011851 	.word	0x08011851
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011802:	b2db      	uxtb	r3, r3
 8011804:	2b03      	cmp	r3, #3
 8011806:	d107      	bne.n	8011818 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011808:	f107 030e 	add.w	r3, r7, #14
 801180c:	2202      	movs	r2, #2
 801180e:	4619      	mov	r1, r3
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f002 fde8 	bl	80143e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011816:	e050      	b.n	80118ba <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8011818:	6839      	ldr	r1, [r7, #0]
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f002 fd72 	bl	8014304 <USBD_CtlError>
            ret = USBD_FAIL;
 8011820:	2303      	movs	r3, #3
 8011822:	75fb      	strb	r3, [r7, #23]
          break;
 8011824:	e049      	b.n	80118ba <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801182c:	b2db      	uxtb	r3, r3
 801182e:	2b03      	cmp	r3, #3
 8011830:	d107      	bne.n	8011842 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	3304      	adds	r3, #4
 8011836:	2201      	movs	r2, #1
 8011838:	4619      	mov	r1, r3
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f002 fdd3 	bl	80143e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011840:	e03b      	b.n	80118ba <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8011842:	6839      	ldr	r1, [r7, #0]
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f002 fd5d 	bl	8014304 <USBD_CtlError>
            ret = USBD_FAIL;
 801184a:	2303      	movs	r3, #3
 801184c:	75fb      	strb	r3, [r7, #23]
          break;
 801184e:	e034      	b.n	80118ba <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011856:	b2db      	uxtb	r3, r3
 8011858:	2b03      	cmp	r3, #3
 801185a:	d106      	bne.n	801186a <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	885b      	ldrh	r3, [r3, #2]
 8011860:	b2db      	uxtb	r3, r3
 8011862:	461a      	mov	r2, r3
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011868:	e027      	b.n	80118ba <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801186a:	6839      	ldr	r1, [r7, #0]
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f002 fd49 	bl	8014304 <USBD_CtlError>
            ret = USBD_FAIL;
 8011872:	2303      	movs	r3, #3
 8011874:	75fb      	strb	r3, [r7, #23]
          break;
 8011876:	e020      	b.n	80118ba <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801187e:	b2db      	uxtb	r3, r3
 8011880:	2b03      	cmp	r3, #3
 8011882:	d119      	bne.n	80118b8 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	885b      	ldrh	r3, [r3, #2]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d115      	bne.n	80118b8 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	889b      	ldrh	r3, [r3, #4]
 8011890:	b2db      	uxtb	r3, r3
 8011892:	4619      	mov	r1, r3
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f006 f909 	bl	8017aac <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	889b      	ldrh	r3, [r3, #4]
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	4619      	mov	r1, r3
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f000 fa82 	bl	8011dac <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80118a8:	e006      	b.n	80118b8 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 80118aa:	6839      	ldr	r1, [r7, #0]
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f002 fd29 	bl	8014304 <USBD_CtlError>
          ret = USBD_FAIL;
 80118b2:	2303      	movs	r3, #3
 80118b4:	75fb      	strb	r3, [r7, #23]
          break;
 80118b6:	e000      	b.n	80118ba <USBD_MSC_Setup+0x1ca>
          break;
 80118b8:	bf00      	nop
      }
      break;
 80118ba:	e006      	b.n	80118ca <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80118bc:	6839      	ldr	r1, [r7, #0]
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f002 fd20 	bl	8014304 <USBD_CtlError>
      ret = USBD_FAIL;
 80118c4:	2303      	movs	r3, #3
 80118c6:	75fb      	strb	r3, [r7, #23]
      break;
 80118c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80118ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3718      	adds	r7, #24
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	460b      	mov	r3, r1
 80118de:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80118e0:	78fb      	ldrb	r3, [r7, #3]
 80118e2:	4619      	mov	r1, r3
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f000 f8dc 	bl	8011aa2 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80118ea:	2300      	movs	r3, #0
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	460b      	mov	r3, r1
 80118fe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8011900:	78fb      	ldrb	r3, [r7, #3]
 8011902:	4619      	mov	r1, r3
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f000 f902 	bl	8011b0e <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801190a:	2300      	movs	r3, #0
}
 801190c:	4618      	mov	r0, r3
 801190e:	3708      	adds	r7, #8
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8011914:	b480      	push	{r7}
 8011916:	b083      	sub	sp, #12
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2220      	movs	r2, #32
 8011920:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8011922:	4b03      	ldr	r3, [pc, #12]	; (8011930 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8011924:	4618      	mov	r0, r3
 8011926:	370c      	adds	r7, #12
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr
 8011930:	20000044 	.word	0x20000044

08011934 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8011934:	b480      	push	{r7}
 8011936:	b083      	sub	sp, #12
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2220      	movs	r2, #32
 8011940:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8011942:	4b03      	ldr	r3, [pc, #12]	; (8011950 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8011944:	4618      	mov	r0, r3
 8011946:	370c      	adds	r7, #12
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr
 8011950:	20000064 	.word	0x20000064

08011954 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011954:	b480      	push	{r7}
 8011956:	b083      	sub	sp, #12
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2220      	movs	r2, #32
 8011960:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8011962:	4b03      	ldr	r3, [pc, #12]	; (8011970 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011964:	4618      	mov	r0, r3
 8011966:	370c      	adds	r7, #12
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr
 8011970:	20000084 	.word	0x20000084

08011974 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	220a      	movs	r2, #10
 8011980:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8011982:	4b03      	ldr	r3, [pc, #12]	; (8011990 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011984:	4618      	mov	r0, r3
 8011986:	370c      	adds	r7, #12
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr
 8011990:	200000a4 	.word	0x200000a4

08011994 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8011994:	b480      	push	{r7}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d101      	bne.n	80119a8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80119a4:	2303      	movs	r3, #3
 80119a6:	e004      	b.n	80119b2 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	683a      	ldr	r2, [r7, #0]
 80119ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80119b0:	2300      	movs	r3, #0
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	370c      	adds	r7, #12
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr

080119be <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80119be:	b580      	push	{r7, lr}
 80119c0:	b084      	sub	sp, #16
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119cc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d028      	beq.n	8011a26 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2200      	movs	r2, #0
 80119d8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	2200      	movs	r2, #0
 80119de:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2200      	movs	r2, #0
 80119e4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2200      	movs	r2, #0
 80119ec:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2200      	movs	r2, #0
 80119f4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2000      	movs	r0, #0
 8011a02:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8011a04:	2101      	movs	r1, #1
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f006 f850 	bl	8017aac <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8011a0c:	2181      	movs	r1, #129	; 0x81
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f006 f84c 	bl	8017aac <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011a1a:	231f      	movs	r3, #31
 8011a1c:	2101      	movs	r1, #1
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f006 f90d 	bl	8017c3e <USBD_LL_PrepareReceive>
 8011a24:	e000      	b.n	8011a28 <MSC_BOT_Init+0x6a>
    return;
 8011a26:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011a28:	3710      	adds	r7, #16
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}

08011a2e <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8011a2e:	b580      	push	{r7, lr}
 8011a30:	b084      	sub	sp, #16
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a3c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d016      	beq.n	8011a72 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2200      	movs	r2, #0
 8011a48:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8011a50:	2181      	movs	r1, #129	; 0x81
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f006 f868 	bl	8017b28 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8011a58:	2101      	movs	r1, #1
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	f006 f864 	bl	8017b28 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011a66:	231f      	movs	r3, #31
 8011a68:	2101      	movs	r1, #1
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f006 f8e7 	bl	8017c3e <USBD_LL_PrepareReceive>
 8011a70:	e000      	b.n	8011a74 <MSC_BOT_Reset+0x46>
    return;
 8011a72:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011a74:	3710      	adds	r7, #16
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}

08011a7a <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8011a7a:	b480      	push	{r7}
 8011a7c:	b085      	sub	sp, #20
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a88:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d002      	beq.n	8011a96 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2200      	movs	r2, #0
 8011a94:	721a      	strb	r2, [r3, #8]
  }
}
 8011a96:	bf00      	nop
 8011a98:	3714      	adds	r7, #20
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa0:	4770      	bx	lr

08011aa2 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011aa2:	b580      	push	{r7, lr}
 8011aa4:	b084      	sub	sp, #16
 8011aa6:	af00      	add	r7, sp, #0
 8011aa8:	6078      	str	r0, [r7, #4]
 8011aaa:	460b      	mov	r3, r1
 8011aac:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ab4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d020      	beq.n	8011afe <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	7a1b      	ldrb	r3, [r3, #8]
 8011ac0:	2b02      	cmp	r3, #2
 8011ac2:	d005      	beq.n	8011ad0 <MSC_BOT_DataIn+0x2e>
 8011ac4:	2b02      	cmp	r3, #2
 8011ac6:	db1c      	blt.n	8011b02 <MSC_BOT_DataIn+0x60>
 8011ac8:	3b03      	subs	r3, #3
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d819      	bhi.n	8011b02 <MSC_BOT_DataIn+0x60>
 8011ace:	e011      	b.n	8011af4 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011adc:	461a      	mov	r2, r3
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f000 f992 	bl	8011e08 <SCSI_ProcessCmd>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	da0d      	bge.n	8011b06 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011aea:	2101      	movs	r1, #1
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f000 f8fb 	bl	8011ce8 <MSC_BOT_SendCSW>
      }
      break;
 8011af2:	e008      	b.n	8011b06 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011af4:	2100      	movs	r1, #0
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f000 f8f6 	bl	8011ce8 <MSC_BOT_SendCSW>
      break;
 8011afc:	e004      	b.n	8011b08 <MSC_BOT_DataIn+0x66>
    return;
 8011afe:	bf00      	nop
 8011b00:	e002      	b.n	8011b08 <MSC_BOT_DataIn+0x66>

    default:
      break;
 8011b02:	bf00      	nop
 8011b04:	e000      	b.n	8011b08 <MSC_BOT_DataIn+0x66>
      break;
 8011b06:	bf00      	nop
  }
}
 8011b08:	3710      	adds	r7, #16
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b084      	sub	sp, #16
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
 8011b16:	460b      	mov	r3, r1
 8011b18:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b20:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d01c      	beq.n	8011b62 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	7a1b      	ldrb	r3, [r3, #8]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d002      	beq.n	8011b36 <MSC_BOT_DataOut+0x28>
 8011b30:	2b01      	cmp	r3, #1
 8011b32:	d004      	beq.n	8011b3e <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8011b34:	e018      	b.n	8011b68 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f000 f81a 	bl	8011b70 <MSC_BOT_CBW_Decode>
      break;
 8011b3c:	e014      	b.n	8011b68 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f000 f95b 	bl	8011e08 <SCSI_ProcessCmd>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	da06      	bge.n	8011b66 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011b58:	2101      	movs	r1, #1
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f000 f8c4 	bl	8011ce8 <MSC_BOT_SendCSW>
      break;
 8011b60:	e001      	b.n	8011b66 <MSC_BOT_DataOut+0x58>
    return;
 8011b62:	bf00      	nop
 8011b64:	e000      	b.n	8011b68 <MSC_BOT_DataOut+0x5a>
      break;
 8011b66:	bf00      	nop
  }
}
 8011b68:	3710      	adds	r7, #16
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
	...

08011b70 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b084      	sub	sp, #16
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b7e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d077      	beq.n	8011c76 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8011b9e:	2101      	movs	r1, #1
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f006 f86d 	bl	8017c80 <USBD_LL_GetRxDataSize>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	2b1f      	cmp	r3, #31
 8011baa:	d114      	bne.n	8011bd6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8011bb2:	4a34      	ldr	r2, [pc, #208]	; (8011c84 <MSC_BOT_CBW_Decode+0x114>)
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d10e      	bne.n	8011bd6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011bbe:	2b01      	cmp	r3, #1
 8011bc0:	d809      	bhi.n	8011bd6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d004      	beq.n	8011bd6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011bd2:	2b10      	cmp	r3, #16
 8011bd4:	d90e      	bls.n	8011bf4 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011bdc:	2320      	movs	r3, #32
 8011bde:	2205      	movs	r2, #5
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f000 fdbc 	bl	801275e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2202      	movs	r2, #2
 8011bea:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f000 f8ab 	bl	8011d48 <MSC_BOT_Abort>
 8011bf2:	e043      	b.n	8011c7c <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011c00:	461a      	mov	r2, r3
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f000 f900 	bl	8011e08 <SCSI_ProcessCmd>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	da0c      	bge.n	8011c28 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	7a1b      	ldrb	r3, [r3, #8]
 8011c12:	2b05      	cmp	r3, #5
 8011c14:	d104      	bne.n	8011c20 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011c16:	2101      	movs	r1, #1
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f000 f865 	bl	8011ce8 <MSC_BOT_SendCSW>
 8011c1e:	e02d      	b.n	8011c7c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	f000 f891 	bl	8011d48 <MSC_BOT_Abort>
 8011c26:	e029      	b.n	8011c7c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	7a1b      	ldrb	r3, [r3, #8]
 8011c2c:	2b02      	cmp	r3, #2
 8011c2e:	d024      	beq.n	8011c7a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8011c34:	2b01      	cmp	r3, #1
 8011c36:	d020      	beq.n	8011c7a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8011c3c:	2b03      	cmp	r3, #3
 8011c3e:	d01c      	beq.n	8011c7a <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	68db      	ldr	r3, [r3, #12]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d009      	beq.n	8011c5c <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	f103 0110 	add.w	r1, r3, #16
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	461a      	mov	r2, r3
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f000 f817 	bl	8011c88 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8011c5a:	e00f      	b.n	8011c7c <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	68db      	ldr	r3, [r3, #12]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d104      	bne.n	8011c6e <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011c64:	2100      	movs	r1, #0
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f000 f83e 	bl	8011ce8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8011c6c:	e006      	b.n	8011c7c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f000 f86a 	bl	8011d48 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8011c74:	e002      	b.n	8011c7c <MSC_BOT_CBW_Decode+0x10c>
    return;
 8011c76:	bf00      	nop
 8011c78:	e000      	b.n	8011c7c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 8011c7a:	bf00      	nop
    }
  }
}
 8011c7c:	3710      	adds	r7, #16
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}
 8011c82:	bf00      	nop
 8011c84:	43425355 	.word	0x43425355

08011c88 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b086      	sub	sp, #24
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	60f8      	str	r0, [r7, #12]
 8011c90:	60b9      	str	r1, [r7, #8]
 8011c92:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c9a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	4293      	cmp	r3, r2
 8011ca6:	bf28      	it	cs
 8011ca8:	4613      	movcs	r3, r2
 8011caa:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d015      	beq.n	8011cde <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	1ad2      	subs	r2, r2, r3
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	2204      	movs	r2, #4
 8011cce:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	68ba      	ldr	r2, [r7, #8]
 8011cd4:	2181      	movs	r1, #129	; 0x81
 8011cd6:	68f8      	ldr	r0, [r7, #12]
 8011cd8:	f005 ff90 	bl	8017bfc <USBD_LL_Transmit>
 8011cdc:	e000      	b.n	8011ce0 <MSC_BOT_SendData+0x58>
    return;
 8011cde:	bf00      	nop
}
 8011ce0:	3718      	adds	r7, #24
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
	...

08011ce8 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b084      	sub	sp, #16
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	460b      	mov	r3, r1
 8011cf2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011cfa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d01b      	beq.n	8011d3a <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	4a0f      	ldr	r2, [pc, #60]	; (8011d44 <MSC_BOT_SendCSW+0x5c>)
 8011d06:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	78fa      	ldrb	r2, [r7, #3]
 8011d0e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2200      	movs	r2, #0
 8011d16:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8011d1e:	230d      	movs	r3, #13
 8011d20:	2181      	movs	r1, #129	; 0x81
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f005 ff6a 	bl	8017bfc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011d2e:	231f      	movs	r3, #31
 8011d30:	2101      	movs	r1, #1
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f005 ff83 	bl	8017c3e <USBD_LL_PrepareReceive>
 8011d38:	e000      	b.n	8011d3c <MSC_BOT_SendCSW+0x54>
    return;
 8011d3a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011d3c:	3710      	adds	r7, #16
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
 8011d42:	bf00      	nop
 8011d44:	53425355 	.word	0x53425355

08011d48 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b084      	sub	sp, #16
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d56:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d022      	beq.n	8011da4 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d10c      	bne.n	8011d82 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d007      	beq.n	8011d82 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d103      	bne.n	8011d82 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8011d7a:	2101      	movs	r1, #1
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f005 feb4 	bl	8017aea <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8011d82:	2181      	movs	r1, #129	; 0x81
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f005 feb0 	bl	8017aea <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	7a5b      	ldrb	r3, [r3, #9]
 8011d8e:	2b02      	cmp	r3, #2
 8011d90:	d109      	bne.n	8011da6 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8011d92:	2181      	movs	r1, #129	; 0x81
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f005 fea8 	bl	8017aea <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8011d9a:	2101      	movs	r1, #1
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f005 fea4 	bl	8017aea <USBD_LL_StallEP>
 8011da2:	e000      	b.n	8011da6 <MSC_BOT_Abort+0x5e>
    return;
 8011da4:	bf00      	nop
  }
}
 8011da6:	3710      	adds	r7, #16
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b084      	sub	sp, #16
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	460b      	mov	r3, r1
 8011db6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011dbe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d019      	beq.n	8011dfa <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	7a5b      	ldrb	r3, [r3, #9]
 8011dca:	2b02      	cmp	r3, #2
 8011dcc:	d108      	bne.n	8011de0 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8011dce:	2181      	movs	r1, #129	; 0x81
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f005 fe8a 	bl	8017aea <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8011dd6:	2101      	movs	r1, #1
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f005 fe86 	bl	8017aea <USBD_LL_StallEP>
 8011dde:	e00f      	b.n	8011e00 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8011de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	da0a      	bge.n	8011dfe <MSC_BOT_CplClrFeature+0x52>
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	7a5b      	ldrb	r3, [r3, #9]
 8011dec:	2b01      	cmp	r3, #1
 8011dee:	d006      	beq.n	8011dfe <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011df0:	2101      	movs	r1, #1
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f7ff ff78 	bl	8011ce8 <MSC_BOT_SendCSW>
 8011df8:	e002      	b.n	8011e00 <MSC_BOT_CplClrFeature+0x54>
    return;
 8011dfa:	bf00      	nop
 8011dfc:	e000      	b.n	8011e00 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8011dfe:	bf00      	nop
  }
}
 8011e00:	3710      	adds	r7, #16
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
	...

08011e08 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b086      	sub	sp, #24
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	460b      	mov	r3, r1
 8011e12:	607a      	str	r2, [r7, #4]
 8011e14:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e1c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011e1e:	693b      	ldr	r3, [r7, #16]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d102      	bne.n	8011e2a <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8011e24:	f04f 33ff 	mov.w	r3, #4294967295
 8011e28:	e168      	b.n	80120fc <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	781b      	ldrb	r3, [r3, #0]
 8011e2e:	2baa      	cmp	r3, #170	; 0xaa
 8011e30:	f000 8144 	beq.w	80120bc <SCSI_ProcessCmd+0x2b4>
 8011e34:	2baa      	cmp	r3, #170	; 0xaa
 8011e36:	f300 8153 	bgt.w	80120e0 <SCSI_ProcessCmd+0x2d8>
 8011e3a:	2ba8      	cmp	r3, #168	; 0xa8
 8011e3c:	f000 812c 	beq.w	8012098 <SCSI_ProcessCmd+0x290>
 8011e40:	2ba8      	cmp	r3, #168	; 0xa8
 8011e42:	f300 814d 	bgt.w	80120e0 <SCSI_ProcessCmd+0x2d8>
 8011e46:	2b5a      	cmp	r3, #90	; 0x5a
 8011e48:	f300 80c0 	bgt.w	8011fcc <SCSI_ProcessCmd+0x1c4>
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	f2c0 8147 	blt.w	80120e0 <SCSI_ProcessCmd+0x2d8>
 8011e52:	2b5a      	cmp	r3, #90	; 0x5a
 8011e54:	f200 8144 	bhi.w	80120e0 <SCSI_ProcessCmd+0x2d8>
 8011e58:	a201      	add	r2, pc, #4	; (adr r2, 8011e60 <SCSI_ProcessCmd+0x58>)
 8011e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e5e:	bf00      	nop
 8011e60:	08011fd3 	.word	0x08011fd3
 8011e64:	080120e1 	.word	0x080120e1
 8011e68:	080120e1 	.word	0x080120e1
 8011e6c:	08011fe5 	.word	0x08011fe5
 8011e70:	080120e1 	.word	0x080120e1
 8011e74:	080120e1 	.word	0x080120e1
 8011e78:	080120e1 	.word	0x080120e1
 8011e7c:	080120e1 	.word	0x080120e1
 8011e80:	080120e1 	.word	0x080120e1
 8011e84:	080120e1 	.word	0x080120e1
 8011e88:	080120e1 	.word	0x080120e1
 8011e8c:	080120e1 	.word	0x080120e1
 8011e90:	080120e1 	.word	0x080120e1
 8011e94:	080120e1 	.word	0x080120e1
 8011e98:	080120e1 	.word	0x080120e1
 8011e9c:	080120e1 	.word	0x080120e1
 8011ea0:	080120e1 	.word	0x080120e1
 8011ea4:	080120e1 	.word	0x080120e1
 8011ea8:	08011ff7 	.word	0x08011ff7
 8011eac:	080120e1 	.word	0x080120e1
 8011eb0:	080120e1 	.word	0x080120e1
 8011eb4:	080120e1 	.word	0x080120e1
 8011eb8:	080120e1 	.word	0x080120e1
 8011ebc:	080120e1 	.word	0x080120e1
 8011ec0:	080120e1 	.word	0x080120e1
 8011ec4:	080120e1 	.word	0x080120e1
 8011ec8:	0801202d 	.word	0x0801202d
 8011ecc:	08012009 	.word	0x08012009
 8011ed0:	080120e1 	.word	0x080120e1
 8011ed4:	080120e1 	.word	0x080120e1
 8011ed8:	0801201b 	.word	0x0801201b
 8011edc:	080120e1 	.word	0x080120e1
 8011ee0:	080120e1 	.word	0x080120e1
 8011ee4:	080120e1 	.word	0x080120e1
 8011ee8:	080120e1 	.word	0x080120e1
 8011eec:	08012051 	.word	0x08012051
 8011ef0:	080120e1 	.word	0x080120e1
 8011ef4:	08012063 	.word	0x08012063
 8011ef8:	080120e1 	.word	0x080120e1
 8011efc:	080120e1 	.word	0x080120e1
 8011f00:	08012087 	.word	0x08012087
 8011f04:	080120e1 	.word	0x080120e1
 8011f08:	080120ab 	.word	0x080120ab
 8011f0c:	080120e1 	.word	0x080120e1
 8011f10:	080120e1 	.word	0x080120e1
 8011f14:	080120e1 	.word	0x080120e1
 8011f18:	080120e1 	.word	0x080120e1
 8011f1c:	080120cf 	.word	0x080120cf
 8011f20:	080120e1 	.word	0x080120e1
 8011f24:	080120e1 	.word	0x080120e1
 8011f28:	080120e1 	.word	0x080120e1
 8011f2c:	080120e1 	.word	0x080120e1
 8011f30:	080120e1 	.word	0x080120e1
 8011f34:	080120e1 	.word	0x080120e1
 8011f38:	080120e1 	.word	0x080120e1
 8011f3c:	080120e1 	.word	0x080120e1
 8011f40:	080120e1 	.word	0x080120e1
 8011f44:	080120e1 	.word	0x080120e1
 8011f48:	080120e1 	.word	0x080120e1
 8011f4c:	080120e1 	.word	0x080120e1
 8011f50:	080120e1 	.word	0x080120e1
 8011f54:	080120e1 	.word	0x080120e1
 8011f58:	080120e1 	.word	0x080120e1
 8011f5c:	080120e1 	.word	0x080120e1
 8011f60:	080120e1 	.word	0x080120e1
 8011f64:	080120e1 	.word	0x080120e1
 8011f68:	080120e1 	.word	0x080120e1
 8011f6c:	080120e1 	.word	0x080120e1
 8011f70:	080120e1 	.word	0x080120e1
 8011f74:	080120e1 	.word	0x080120e1
 8011f78:	080120e1 	.word	0x080120e1
 8011f7c:	080120e1 	.word	0x080120e1
 8011f80:	080120e1 	.word	0x080120e1
 8011f84:	080120e1 	.word	0x080120e1
 8011f88:	080120e1 	.word	0x080120e1
 8011f8c:	080120e1 	.word	0x080120e1
 8011f90:	080120e1 	.word	0x080120e1
 8011f94:	080120e1 	.word	0x080120e1
 8011f98:	080120e1 	.word	0x080120e1
 8011f9c:	080120e1 	.word	0x080120e1
 8011fa0:	080120e1 	.word	0x080120e1
 8011fa4:	080120e1 	.word	0x080120e1
 8011fa8:	080120e1 	.word	0x080120e1
 8011fac:	080120e1 	.word	0x080120e1
 8011fb0:	080120e1 	.word	0x080120e1
 8011fb4:	080120e1 	.word	0x080120e1
 8011fb8:	080120e1 	.word	0x080120e1
 8011fbc:	080120e1 	.word	0x080120e1
 8011fc0:	080120e1 	.word	0x080120e1
 8011fc4:	080120e1 	.word	0x080120e1
 8011fc8:	0801203f 	.word	0x0801203f
 8011fcc:	2b9e      	cmp	r3, #158	; 0x9e
 8011fce:	d051      	beq.n	8012074 <SCSI_ProcessCmd+0x26c>
 8011fd0:	e086      	b.n	80120e0 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8011fd2:	7afb      	ldrb	r3, [r7, #11]
 8011fd4:	687a      	ldr	r2, [r7, #4]
 8011fd6:	4619      	mov	r1, r3
 8011fd8:	68f8      	ldr	r0, [r7, #12]
 8011fda:	f000 f893 	bl	8012104 <SCSI_TestUnitReady>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8011fe2:	e089      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8011fe4:	7afb      	ldrb	r3, [r7, #11]
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	4619      	mov	r1, r3
 8011fea:	68f8      	ldr	r0, [r7, #12]
 8011fec:	f000 fb38 	bl	8012660 <SCSI_RequestSense>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8011ff4:	e080      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8011ff6:	7afb      	ldrb	r3, [r7, #11]
 8011ff8:	687a      	ldr	r2, [r7, #4]
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	68f8      	ldr	r0, [r7, #12]
 8011ffe:	f000 f8d1 	bl	80121a4 <SCSI_Inquiry>
 8012002:	4603      	mov	r3, r0
 8012004:	75fb      	strb	r3, [r7, #23]
      break;
 8012006:	e077      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8012008:	7afb      	ldrb	r3, [r7, #11]
 801200a:	687a      	ldr	r2, [r7, #4]
 801200c:	4619      	mov	r1, r3
 801200e:	68f8      	ldr	r0, [r7, #12]
 8012010:	f000 fbec 	bl	80127ec <SCSI_StartStopUnit>
 8012014:	4603      	mov	r3, r0
 8012016:	75fb      	strb	r3, [r7, #23]
      break;
 8012018:	e06e      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801201a:	7afb      	ldrb	r3, [r7, #11]
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	4619      	mov	r1, r3
 8012020:	68f8      	ldr	r0, [r7, #12]
 8012022:	f000 fc34 	bl	801288e <SCSI_AllowPreventRemovable>
 8012026:	4603      	mov	r3, r0
 8012028:	75fb      	strb	r3, [r7, #23]
      break;
 801202a:	e065      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801202c:	7afb      	ldrb	r3, [r7, #11]
 801202e:	687a      	ldr	r2, [r7, #4]
 8012030:	4619      	mov	r1, r3
 8012032:	68f8      	ldr	r0, [r7, #12]
 8012034:	f000 fabc 	bl	80125b0 <SCSI_ModeSense6>
 8012038:	4603      	mov	r3, r0
 801203a:	75fb      	strb	r3, [r7, #23]
      break;
 801203c:	e05c      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801203e:	7afb      	ldrb	r3, [r7, #11]
 8012040:	687a      	ldr	r2, [r7, #4]
 8012042:	4619      	mov	r1, r3
 8012044:	68f8      	ldr	r0, [r7, #12]
 8012046:	f000 fadf 	bl	8012608 <SCSI_ModeSense10>
 801204a:	4603      	mov	r3, r0
 801204c:	75fb      	strb	r3, [r7, #23]
      break;
 801204e:	e053      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8012050:	7afb      	ldrb	r3, [r7, #11]
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	4619      	mov	r1, r3
 8012056:	68f8      	ldr	r0, [r7, #12]
 8012058:	f000 fa37 	bl	80124ca <SCSI_ReadFormatCapacity>
 801205c:	4603      	mov	r3, r0
 801205e:	75fb      	strb	r3, [r7, #23]
      break;
 8012060:	e04a      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8012062:	7afb      	ldrb	r3, [r7, #11]
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	4619      	mov	r1, r3
 8012068:	68f8      	ldr	r0, [r7, #12]
 801206a:	f000 f90f 	bl	801228c <SCSI_ReadCapacity10>
 801206e:	4603      	mov	r3, r0
 8012070:	75fb      	strb	r3, [r7, #23]
      break;
 8012072:	e041      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8012074:	7afb      	ldrb	r3, [r7, #11]
 8012076:	687a      	ldr	r2, [r7, #4]
 8012078:	4619      	mov	r1, r3
 801207a:	68f8      	ldr	r0, [r7, #12]
 801207c:	f000 f97b 	bl	8012376 <SCSI_ReadCapacity16>
 8012080:	4603      	mov	r3, r0
 8012082:	75fb      	strb	r3, [r7, #23]
      break;
 8012084:	e038      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8012086:	7afb      	ldrb	r3, [r7, #11]
 8012088:	687a      	ldr	r2, [r7, #4]
 801208a:	4619      	mov	r1, r3
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f000 fc27 	bl	80128e0 <SCSI_Read10>
 8012092:	4603      	mov	r3, r0
 8012094:	75fb      	strb	r3, [r7, #23]
      break;
 8012096:	e02f      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8012098:	7afb      	ldrb	r3, [r7, #11]
 801209a:	687a      	ldr	r2, [r7, #4]
 801209c:	4619      	mov	r1, r3
 801209e:	68f8      	ldr	r0, [r7, #12]
 80120a0:	f000 fcbe 	bl	8012a20 <SCSI_Read12>
 80120a4:	4603      	mov	r3, r0
 80120a6:	75fb      	strb	r3, [r7, #23]
      break;
 80120a8:	e026      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80120aa:	7afb      	ldrb	r3, [r7, #11]
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	4619      	mov	r1, r3
 80120b0:	68f8      	ldr	r0, [r7, #12]
 80120b2:	f000 fd60 	bl	8012b76 <SCSI_Write10>
 80120b6:	4603      	mov	r3, r0
 80120b8:	75fb      	strb	r3, [r7, #23]
      break;
 80120ba:	e01d      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80120bc:	7afb      	ldrb	r3, [r7, #11]
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	4619      	mov	r1, r3
 80120c2:	68f8      	ldr	r0, [r7, #12]
 80120c4:	f000 fe1c 	bl	8012d00 <SCSI_Write12>
 80120c8:	4603      	mov	r3, r0
 80120ca:	75fb      	strb	r3, [r7, #23]
      break;
 80120cc:	e014      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80120ce:	7afb      	ldrb	r3, [r7, #11]
 80120d0:	687a      	ldr	r2, [r7, #4]
 80120d2:	4619      	mov	r1, r3
 80120d4:	68f8      	ldr	r0, [r7, #12]
 80120d6:	f000 fee8 	bl	8012eaa <SCSI_Verify10>
 80120da:	4603      	mov	r3, r0
 80120dc:	75fb      	strb	r3, [r7, #23]
      break;
 80120de:	e00b      	b.n	80120f8 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80120e0:	7af9      	ldrb	r1, [r7, #11]
 80120e2:	2320      	movs	r3, #32
 80120e4:	2205      	movs	r2, #5
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	f000 fb39 	bl	801275e <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80120ec:	693b      	ldr	r3, [r7, #16]
 80120ee:	2202      	movs	r2, #2
 80120f0:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80120f2:	23ff      	movs	r3, #255	; 0xff
 80120f4:	75fb      	strb	r3, [r7, #23]
      break;
 80120f6:	bf00      	nop
  }

  return ret;
 80120f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3718      	adds	r7, #24
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}

08012104 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b086      	sub	sp, #24
 8012108:	af00      	add	r7, sp, #0
 801210a:	60f8      	str	r0, [r7, #12]
 801210c:	460b      	mov	r3, r1
 801210e:	607a      	str	r2, [r7, #4]
 8012110:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012118:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801211a:	697b      	ldr	r3, [r7, #20]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d102      	bne.n	8012126 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8012120:	f04f 33ff 	mov.w	r3, #4294967295
 8012124:	e03a      	b.n	801219c <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00a      	beq.n	8012146 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012136:	2320      	movs	r3, #32
 8012138:	2205      	movs	r2, #5
 801213a:	68f8      	ldr	r0, [r7, #12]
 801213c:	f000 fb0f 	bl	801275e <SCSI_SenseCode>

    return -1;
 8012140:	f04f 33ff 	mov.w	r3, #4294967295
 8012144:	e02a      	b.n	801219c <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801214c:	2b02      	cmp	r3, #2
 801214e:	d10b      	bne.n	8012168 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012150:	7af9      	ldrb	r1, [r7, #11]
 8012152:	233a      	movs	r3, #58	; 0x3a
 8012154:	2202      	movs	r2, #2
 8012156:	68f8      	ldr	r0, [r7, #12]
 8012158:	f000 fb01 	bl	801275e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	2205      	movs	r2, #5
 8012160:	721a      	strb	r2, [r3, #8]
    return -1;
 8012162:	f04f 33ff 	mov.w	r3, #4294967295
 8012166:	e019      	b.n	801219c <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801216e:	689b      	ldr	r3, [r3, #8]
 8012170:	7afa      	ldrb	r2, [r7, #11]
 8012172:	4610      	mov	r0, r2
 8012174:	4798      	blx	r3
 8012176:	4603      	mov	r3, r0
 8012178:	2b00      	cmp	r3, #0
 801217a:	d00b      	beq.n	8012194 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801217c:	7af9      	ldrb	r1, [r7, #11]
 801217e:	233a      	movs	r3, #58	; 0x3a
 8012180:	2202      	movs	r2, #2
 8012182:	68f8      	ldr	r0, [r7, #12]
 8012184:	f000 faeb 	bl	801275e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	2205      	movs	r2, #5
 801218c:	721a      	strb	r2, [r3, #8]

    return -1;
 801218e:	f04f 33ff 	mov.w	r3, #4294967295
 8012192:	e003      	b.n	801219c <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	2200      	movs	r2, #0
 8012198:	60da      	str	r2, [r3, #12]

  return 0;
 801219a:	2300      	movs	r3, #0
}
 801219c:	4618      	mov	r0, r3
 801219e:	3718      	adds	r7, #24
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b088      	sub	sp, #32
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	60f8      	str	r0, [r7, #12]
 80121ac:	460b      	mov	r3, r1
 80121ae:	607a      	str	r2, [r7, #4]
 80121b0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80121b8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80121ba:	69bb      	ldr	r3, [r7, #24]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d102      	bne.n	80121c6 <SCSI_Inquiry+0x22>
  {
    return -1;
 80121c0:	f04f 33ff 	mov.w	r3, #4294967295
 80121c4:	e05a      	b.n	801227c <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d10a      	bne.n	80121e6 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80121d6:	2320      	movs	r3, #32
 80121d8:	2205      	movs	r2, #5
 80121da:	68f8      	ldr	r0, [r7, #12]
 80121dc:	f000 fabf 	bl	801275e <SCSI_SenseCode>
    return -1;
 80121e0:	f04f 33ff 	mov.w	r3, #4294967295
 80121e4:	e04a      	b.n	801227c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	3301      	adds	r3, #1
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	f003 0301 	and.w	r3, r3, #1
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d020      	beq.n	8012236 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	3302      	adds	r3, #2
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d105      	bne.n	801220a <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80121fe:	2206      	movs	r2, #6
 8012200:	4920      	ldr	r1, [pc, #128]	; (8012284 <SCSI_Inquiry+0xe0>)
 8012202:	69b8      	ldr	r0, [r7, #24]
 8012204:	f000 ffb4 	bl	8013170 <SCSI_UpdateBotData>
 8012208:	e037      	b.n	801227a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	3302      	adds	r3, #2
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	2b80      	cmp	r3, #128	; 0x80
 8012212:	d105      	bne.n	8012220 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8012214:	2208      	movs	r2, #8
 8012216:	491c      	ldr	r1, [pc, #112]	; (8012288 <SCSI_Inquiry+0xe4>)
 8012218:	69b8      	ldr	r0, [r7, #24]
 801221a:	f000 ffa9 	bl	8013170 <SCSI_UpdateBotData>
 801221e:	e02c      	b.n	801227a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8012220:	69bb      	ldr	r3, [r7, #24]
 8012222:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012226:	2324      	movs	r3, #36	; 0x24
 8012228:	2205      	movs	r2, #5
 801222a:	68f8      	ldr	r0, [r7, #12]
 801222c:	f000 fa97 	bl	801275e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8012230:	f04f 33ff 	mov.w	r3, #4294967295
 8012234:	e022      	b.n	801227c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801223c:	69d9      	ldr	r1, [r3, #28]
 801223e:	7afa      	ldrb	r2, [r7, #11]
 8012240:	4613      	mov	r3, r2
 8012242:	00db      	lsls	r3, r3, #3
 8012244:	4413      	add	r3, r2
 8012246:	009b      	lsls	r3, r3, #2
 8012248:	440b      	add	r3, r1
 801224a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801224c:	697b      	ldr	r3, [r7, #20]
 801224e:	3304      	adds	r3, #4
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	b29b      	uxth	r3, r3
 8012254:	3305      	adds	r3, #5
 8012256:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	3304      	adds	r3, #4
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	b29b      	uxth	r3, r3
 8012260:	8bfa      	ldrh	r2, [r7, #30]
 8012262:	429a      	cmp	r2, r3
 8012264:	d303      	bcc.n	801226e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	3304      	adds	r3, #4
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801226e:	8bfb      	ldrh	r3, [r7, #30]
 8012270:	461a      	mov	r2, r3
 8012272:	6979      	ldr	r1, [r7, #20]
 8012274:	69b8      	ldr	r0, [r7, #24]
 8012276:	f000 ff7b 	bl	8013170 <SCSI_UpdateBotData>
  }

  return 0;
 801227a:	2300      	movs	r3, #0
}
 801227c:	4618      	mov	r0, r3
 801227e:	3720      	adds	r7, #32
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}
 8012284:	200000b0 	.word	0x200000b0
 8012288:	200000b8 	.word	0x200000b8

0801228c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b086      	sub	sp, #24
 8012290:	af00      	add	r7, sp, #0
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	460b      	mov	r3, r1
 8012296:	607a      	str	r2, [r7, #4]
 8012298:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80122a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d102      	bne.n	80122ae <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 80122a8:	f04f 33ff 	mov.w	r3, #4294967295
 80122ac:	e05f      	b.n	801236e <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	697a      	ldr	r2, [r7, #20]
 80122b8:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80122bc:	697a      	ldr	r2, [r7, #20]
 80122be:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80122c2:	7af8      	ldrb	r0, [r7, #11]
 80122c4:	4798      	blx	r3
 80122c6:	4603      	mov	r3, r0
 80122c8:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80122ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d104      	bne.n	80122dc <SCSI_ReadCapacity10+0x50>
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80122d8:	2b02      	cmp	r3, #2
 80122da:	d108      	bne.n	80122ee <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80122dc:	7af9      	ldrb	r1, [r7, #11]
 80122de:	233a      	movs	r3, #58	; 0x3a
 80122e0:	2202      	movs	r2, #2
 80122e2:	68f8      	ldr	r0, [r7, #12]
 80122e4:	f000 fa3b 	bl	801275e <SCSI_SenseCode>
    return -1;
 80122e8:	f04f 33ff 	mov.w	r3, #4294967295
 80122ec:	e03f      	b.n	801236e <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80122f4:	3b01      	subs	r3, #1
 80122f6:	0e1b      	lsrs	r3, r3, #24
 80122f8:	b2da      	uxtb	r2, r3
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012304:	3b01      	subs	r3, #1
 8012306:	0c1b      	lsrs	r3, r3, #16
 8012308:	b2da      	uxtb	r2, r3
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012314:	3b01      	subs	r3, #1
 8012316:	0a1b      	lsrs	r3, r3, #8
 8012318:	b2da      	uxtb	r2, r3
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012324:	b2db      	uxtb	r3, r3
 8012326:	3b01      	subs	r3, #1
 8012328:	b2da      	uxtb	r2, r3
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012334:	161b      	asrs	r3, r3, #24
 8012336:	b2da      	uxtb	r2, r3
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012342:	141b      	asrs	r3, r3, #16
 8012344:	b2da      	uxtb	r2, r3
 8012346:	697b      	ldr	r3, [r7, #20]
 8012348:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012350:	0a1b      	lsrs	r3, r3, #8
 8012352:	b29b      	uxth	r3, r3
 8012354:	b2da      	uxtb	r2, r3
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801235a:	697b      	ldr	r3, [r7, #20]
 801235c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012360:	b2da      	uxtb	r2, r3
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	2208      	movs	r2, #8
 801236a:	60da      	str	r2, [r3, #12]

  return 0;
 801236c:	2300      	movs	r3, #0

}
 801236e:	4618      	mov	r0, r3
 8012370:	3718      	adds	r7, #24
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}

08012376 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012376:	b580      	push	{r7, lr}
 8012378:	b088      	sub	sp, #32
 801237a:	af00      	add	r7, sp, #0
 801237c:	60f8      	str	r0, [r7, #12]
 801237e:	460b      	mov	r3, r1
 8012380:	607a      	str	r2, [r7, #4]
 8012382:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801238a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801238c:	69bb      	ldr	r3, [r7, #24]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d102      	bne.n	8012398 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8012392:	f04f 33ff 	mov.w	r3, #4294967295
 8012396:	e094      	b.n	80124c2 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	69ba      	ldr	r2, [r7, #24]
 80123a2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80123a6:	69ba      	ldr	r2, [r7, #24]
 80123a8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80123ac:	7af8      	ldrb	r0, [r7, #11]
 80123ae:	4798      	blx	r3
 80123b0:	4603      	mov	r3, r0
 80123b2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80123b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d104      	bne.n	80123c6 <SCSI_ReadCapacity16+0x50>
 80123bc:	69bb      	ldr	r3, [r7, #24]
 80123be:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80123c2:	2b02      	cmp	r3, #2
 80123c4:	d108      	bne.n	80123d8 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80123c6:	7af9      	ldrb	r1, [r7, #11]
 80123c8:	233a      	movs	r3, #58	; 0x3a
 80123ca:	2202      	movs	r2, #2
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f000 f9c6 	bl	801275e <SCSI_SenseCode>
    return -1;
 80123d2:	f04f 33ff 	mov.w	r3, #4294967295
 80123d6:	e074      	b.n	80124c2 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	330a      	adds	r3, #10
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	330b      	adds	r3, #11
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80123e8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	330c      	adds	r3, #12
 80123ee:	781b      	ldrb	r3, [r3, #0]
 80123f0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80123f2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80123f4:	687a      	ldr	r2, [r7, #4]
 80123f6:	320d      	adds	r2, #13
 80123f8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80123fa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80123fc:	69bb      	ldr	r3, [r7, #24]
 80123fe:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012400:	2300      	movs	r3, #0
 8012402:	77fb      	strb	r3, [r7, #31]
 8012404:	e007      	b.n	8012416 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8012406:	7ffb      	ldrb	r3, [r7, #31]
 8012408:	69ba      	ldr	r2, [r7, #24]
 801240a:	4413      	add	r3, r2
 801240c:	2200      	movs	r2, #0
 801240e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012410:	7ffb      	ldrb	r3, [r7, #31]
 8012412:	3301      	adds	r3, #1
 8012414:	77fb      	strb	r3, [r7, #31]
 8012416:	7ffa      	ldrb	r2, [r7, #31]
 8012418:	69bb      	ldr	r3, [r7, #24]
 801241a:	68db      	ldr	r3, [r3, #12]
 801241c:	429a      	cmp	r2, r3
 801241e:	d3f2      	bcc.n	8012406 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012420:	69bb      	ldr	r3, [r7, #24]
 8012422:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012426:	3b01      	subs	r3, #1
 8012428:	0e1b      	lsrs	r3, r3, #24
 801242a:	b2da      	uxtb	r2, r3
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012430:	69bb      	ldr	r3, [r7, #24]
 8012432:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012436:	3b01      	subs	r3, #1
 8012438:	0c1b      	lsrs	r3, r3, #16
 801243a:	b2da      	uxtb	r2, r3
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012440:	69bb      	ldr	r3, [r7, #24]
 8012442:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012446:	3b01      	subs	r3, #1
 8012448:	0a1b      	lsrs	r3, r3, #8
 801244a:	b2da      	uxtb	r2, r3
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012450:	69bb      	ldr	r3, [r7, #24]
 8012452:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012456:	b2db      	uxtb	r3, r3
 8012458:	3b01      	subs	r3, #1
 801245a:	b2da      	uxtb	r2, r3
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012460:	69bb      	ldr	r3, [r7, #24]
 8012462:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012466:	161b      	asrs	r3, r3, #24
 8012468:	b2da      	uxtb	r2, r3
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801246e:	69bb      	ldr	r3, [r7, #24]
 8012470:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012474:	141b      	asrs	r3, r3, #16
 8012476:	b2da      	uxtb	r2, r3
 8012478:	69bb      	ldr	r3, [r7, #24]
 801247a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012482:	0a1b      	lsrs	r3, r3, #8
 8012484:	b29b      	uxth	r3, r3
 8012486:	b2da      	uxtb	r2, r3
 8012488:	69bb      	ldr	r3, [r7, #24]
 801248a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 801248c:	69bb      	ldr	r3, [r7, #24]
 801248e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012492:	b2da      	uxtb	r2, r3
 8012494:	69bb      	ldr	r3, [r7, #24]
 8012496:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	330a      	adds	r3, #10
 801249c:	781b      	ldrb	r3, [r3, #0]
 801249e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	330b      	adds	r3, #11
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80124a8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	330c      	adds	r3, #12
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80124b2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	320d      	adds	r2, #13
 80124b8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80124ba:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	60da      	str	r2, [r3, #12]

  return 0;
 80124c0:	2300      	movs	r3, #0
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3720      	adds	r7, #32
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}

080124ca <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80124ca:	b580      	push	{r7, lr}
 80124cc:	b088      	sub	sp, #32
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	60f8      	str	r0, [r7, #12]
 80124d2:	460b      	mov	r3, r1
 80124d4:	607a      	str	r2, [r7, #4]
 80124d6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80124de:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80124e0:	69bb      	ldr	r3, [r7, #24]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d102      	bne.n	80124ec <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80124e6:	f04f 33ff 	mov.w	r3, #4294967295
 80124ea:	e05c      	b.n	80125a6 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80124f2:	685b      	ldr	r3, [r3, #4]
 80124f4:	f107 0214 	add.w	r2, r7, #20
 80124f8:	f107 0110 	add.w	r1, r7, #16
 80124fc:	7af8      	ldrb	r0, [r7, #11]
 80124fe:	4798      	blx	r3
 8012500:	4603      	mov	r3, r0
 8012502:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012504:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d104      	bne.n	8012516 <SCSI_ReadFormatCapacity+0x4c>
 801250c:	69bb      	ldr	r3, [r7, #24]
 801250e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012512:	2b02      	cmp	r3, #2
 8012514:	d108      	bne.n	8012528 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012516:	7af9      	ldrb	r1, [r7, #11]
 8012518:	233a      	movs	r3, #58	; 0x3a
 801251a:	2202      	movs	r2, #2
 801251c:	68f8      	ldr	r0, [r7, #12]
 801251e:	f000 f91e 	bl	801275e <SCSI_SenseCode>
    return -1;
 8012522:	f04f 33ff 	mov.w	r3, #4294967295
 8012526:	e03e      	b.n	80125a6 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8012528:	2300      	movs	r3, #0
 801252a:	83fb      	strh	r3, [r7, #30]
 801252c:	e007      	b.n	801253e <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 801252e:	8bfb      	ldrh	r3, [r7, #30]
 8012530:	69ba      	ldr	r2, [r7, #24]
 8012532:	4413      	add	r3, r2
 8012534:	2200      	movs	r2, #0
 8012536:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8012538:	8bfb      	ldrh	r3, [r7, #30]
 801253a:	3301      	adds	r3, #1
 801253c:	83fb      	strh	r3, [r7, #30]
 801253e:	8bfb      	ldrh	r3, [r7, #30]
 8012540:	2b0b      	cmp	r3, #11
 8012542:	d9f4      	bls.n	801252e <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	2208      	movs	r2, #8
 8012548:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801254a:	693b      	ldr	r3, [r7, #16]
 801254c:	3b01      	subs	r3, #1
 801254e:	0e1b      	lsrs	r3, r3, #24
 8012550:	b2da      	uxtb	r2, r3
 8012552:	69bb      	ldr	r3, [r7, #24]
 8012554:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	3b01      	subs	r3, #1
 801255a:	0c1b      	lsrs	r3, r3, #16
 801255c:	b2da      	uxtb	r2, r3
 801255e:	69bb      	ldr	r3, [r7, #24]
 8012560:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	3b01      	subs	r3, #1
 8012566:	0a1b      	lsrs	r3, r3, #8
 8012568:	b2da      	uxtb	r2, r3
 801256a:	69bb      	ldr	r3, [r7, #24]
 801256c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	b2db      	uxtb	r3, r3
 8012572:	3b01      	subs	r3, #1
 8012574:	b2da      	uxtb	r2, r3
 8012576:	69bb      	ldr	r3, [r7, #24]
 8012578:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801257a:	69bb      	ldr	r3, [r7, #24]
 801257c:	2202      	movs	r2, #2
 801257e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8012580:	8abb      	ldrh	r3, [r7, #20]
 8012582:	141b      	asrs	r3, r3, #16
 8012584:	b2da      	uxtb	r2, r3
 8012586:	69bb      	ldr	r3, [r7, #24]
 8012588:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801258a:	8abb      	ldrh	r3, [r7, #20]
 801258c:	0a1b      	lsrs	r3, r3, #8
 801258e:	b29b      	uxth	r3, r3
 8012590:	b2da      	uxtb	r2, r3
 8012592:	69bb      	ldr	r3, [r7, #24]
 8012594:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8012596:	8abb      	ldrh	r3, [r7, #20]
 8012598:	b2da      	uxtb	r2, r3
 801259a:	69bb      	ldr	r3, [r7, #24]
 801259c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 801259e:	69bb      	ldr	r3, [r7, #24]
 80125a0:	220c      	movs	r2, #12
 80125a2:	60da      	str	r2, [r3, #12]

  return 0;
 80125a4:	2300      	movs	r3, #0
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3720      	adds	r7, #32
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
	...

080125b0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	460b      	mov	r3, r1
 80125ba:	607a      	str	r2, [r7, #4]
 80125bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80125c4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80125c6:	2317      	movs	r3, #23
 80125c8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d102      	bne.n	80125d6 <SCSI_ModeSense6+0x26>
  {
    return -1;
 80125d0:	f04f 33ff 	mov.w	r3, #4294967295
 80125d4:	e011      	b.n	80125fa <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	3304      	adds	r3, #4
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	b29b      	uxth	r3, r3
 80125de:	8afa      	ldrh	r2, [r7, #22]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d303      	bcc.n	80125ec <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	3304      	adds	r3, #4
 80125e8:	781b      	ldrb	r3, [r3, #0]
 80125ea:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80125ec:	8afb      	ldrh	r3, [r7, #22]
 80125ee:	461a      	mov	r2, r3
 80125f0:	4904      	ldr	r1, [pc, #16]	; (8012604 <SCSI_ModeSense6+0x54>)
 80125f2:	6938      	ldr	r0, [r7, #16]
 80125f4:	f000 fdbc 	bl	8013170 <SCSI_UpdateBotData>

  return 0;
 80125f8:	2300      	movs	r3, #0
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3718      	adds	r7, #24
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}
 8012602:	bf00      	nop
 8012604:	200000c0 	.word	0x200000c0

08012608 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b086      	sub	sp, #24
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	460b      	mov	r3, r1
 8012612:	607a      	str	r2, [r7, #4]
 8012614:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801261c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801261e:	231b      	movs	r3, #27
 8012620:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012622:	693b      	ldr	r3, [r7, #16]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d102      	bne.n	801262e <SCSI_ModeSense10+0x26>
  {
    return -1;
 8012628:	f04f 33ff 	mov.w	r3, #4294967295
 801262c:	e011      	b.n	8012652 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	3308      	adds	r3, #8
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	b29b      	uxth	r3, r3
 8012636:	8afa      	ldrh	r2, [r7, #22]
 8012638:	429a      	cmp	r2, r3
 801263a:	d303      	bcc.n	8012644 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	3308      	adds	r3, #8
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8012644:	8afb      	ldrh	r3, [r7, #22]
 8012646:	461a      	mov	r2, r3
 8012648:	4904      	ldr	r1, [pc, #16]	; (801265c <SCSI_ModeSense10+0x54>)
 801264a:	6938      	ldr	r0, [r7, #16]
 801264c:	f000 fd90 	bl	8013170 <SCSI_UpdateBotData>

  return 0;
 8012650:	2300      	movs	r3, #0
}
 8012652:	4618      	mov	r0, r3
 8012654:	3718      	adds	r7, #24
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
 801265a:	bf00      	nop
 801265c:	200000d8 	.word	0x200000d8

08012660 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b086      	sub	sp, #24
 8012664:	af00      	add	r7, sp, #0
 8012666:	60f8      	str	r0, [r7, #12]
 8012668:	460b      	mov	r3, r1
 801266a:	607a      	str	r2, [r7, #4]
 801266c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012674:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8012676:	693b      	ldr	r3, [r7, #16]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d102      	bne.n	8012682 <SCSI_RequestSense+0x22>
  {
    return -1;
 801267c:	f04f 33ff 	mov.w	r3, #4294967295
 8012680:	e069      	b.n	8012756 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012688:	2b00      	cmp	r3, #0
 801268a:	d10a      	bne.n	80126a2 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801268c:	693b      	ldr	r3, [r7, #16]
 801268e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012692:	2320      	movs	r3, #32
 8012694:	2205      	movs	r2, #5
 8012696:	68f8      	ldr	r0, [r7, #12]
 8012698:	f000 f861 	bl	801275e <SCSI_SenseCode>
    return -1;
 801269c:	f04f 33ff 	mov.w	r3, #4294967295
 80126a0:	e059      	b.n	8012756 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80126a2:	2300      	movs	r3, #0
 80126a4:	75fb      	strb	r3, [r7, #23]
 80126a6:	e007      	b.n	80126b8 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 80126a8:	7dfb      	ldrb	r3, [r7, #23]
 80126aa:	693a      	ldr	r2, [r7, #16]
 80126ac:	4413      	add	r3, r2
 80126ae:	2200      	movs	r2, #0
 80126b0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80126b2:	7dfb      	ldrb	r3, [r7, #23]
 80126b4:	3301      	adds	r3, #1
 80126b6:	75fb      	strb	r3, [r7, #23]
 80126b8:	7dfb      	ldrb	r3, [r7, #23]
 80126ba:	2b11      	cmp	r3, #17
 80126bc:	d9f4      	bls.n	80126a8 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	2270      	movs	r2, #112	; 0x70
 80126c2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80126c4:	693b      	ldr	r3, [r7, #16]
 80126c6:	220c      	movs	r2, #12
 80126c8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80126d0:	693b      	ldr	r3, [r7, #16]
 80126d2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d02e      	beq.n	8012738 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80126e0:	461a      	mov	r2, r3
 80126e2:	693b      	ldr	r3, [r7, #16]
 80126e4:	3248      	adds	r2, #72	; 0x48
 80126e6:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80126f4:	693a      	ldr	r2, [r7, #16]
 80126f6:	3348      	adds	r3, #72	; 0x48
 80126f8:	00db      	lsls	r3, r3, #3
 80126fa:	4413      	add	r3, r2
 80126fc:	791a      	ldrb	r2, [r3, #4]
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012708:	693a      	ldr	r2, [r7, #16]
 801270a:	3348      	adds	r3, #72	; 0x48
 801270c:	00db      	lsls	r3, r3, #3
 801270e:	4413      	add	r3, r2
 8012710:	795a      	ldrb	r2, [r3, #5]
 8012712:	693b      	ldr	r3, [r7, #16]
 8012714:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8012716:	693b      	ldr	r3, [r7, #16]
 8012718:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801271c:	3301      	adds	r3, #1
 801271e:	b2da      	uxtb	r2, r3
 8012720:	693b      	ldr	r3, [r7, #16]
 8012722:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8012726:	693b      	ldr	r3, [r7, #16]
 8012728:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801272c:	2b04      	cmp	r3, #4
 801272e:	d103      	bne.n	8012738 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	2200      	movs	r2, #0
 8012734:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	2212      	movs	r2, #18
 801273c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	3304      	adds	r3, #4
 8012742:	781b      	ldrb	r3, [r3, #0]
 8012744:	2b12      	cmp	r3, #18
 8012746:	d805      	bhi.n	8012754 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	3304      	adds	r3, #4
 801274c:	781b      	ldrb	r3, [r3, #0]
 801274e:	461a      	mov	r2, r3
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8012754:	2300      	movs	r3, #0
}
 8012756:	4618      	mov	r0, r3
 8012758:	3718      	adds	r7, #24
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}

0801275e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801275e:	b480      	push	{r7}
 8012760:	b085      	sub	sp, #20
 8012762:	af00      	add	r7, sp, #0
 8012764:	6078      	str	r0, [r7, #4]
 8012766:	4608      	mov	r0, r1
 8012768:	4611      	mov	r1, r2
 801276a:	461a      	mov	r2, r3
 801276c:	4603      	mov	r3, r0
 801276e:	70fb      	strb	r3, [r7, #3]
 8012770:	460b      	mov	r3, r1
 8012772:	70bb      	strb	r3, [r7, #2]
 8012774:	4613      	mov	r3, r2
 8012776:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801277e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d02c      	beq.n	80127e0 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801278c:	461a      	mov	r2, r3
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	3248      	adds	r2, #72	; 0x48
 8012792:	78b9      	ldrb	r1, [r7, #2]
 8012794:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801279e:	68fa      	ldr	r2, [r7, #12]
 80127a0:	3348      	adds	r3, #72	; 0x48
 80127a2:	00db      	lsls	r3, r3, #3
 80127a4:	4413      	add	r3, r2
 80127a6:	787a      	ldrb	r2, [r7, #1]
 80127a8:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80127b0:	68fa      	ldr	r2, [r7, #12]
 80127b2:	3348      	adds	r3, #72	; 0x48
 80127b4:	00db      	lsls	r3, r3, #3
 80127b6:	4413      	add	r3, r2
 80127b8:	2200      	movs	r2, #0
 80127ba:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80127c2:	3301      	adds	r3, #1
 80127c4:	b2da      	uxtb	r2, r3
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80127d2:	2b04      	cmp	r3, #4
 80127d4:	d105      	bne.n	80127e2 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	2200      	movs	r2, #0
 80127da:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80127de:	e000      	b.n	80127e2 <SCSI_SenseCode+0x84>
    return;
 80127e0:	bf00      	nop
  }
}
 80127e2:	3714      	adds	r7, #20
 80127e4:	46bd      	mov	sp, r7
 80127e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ea:	4770      	bx	lr

080127ec <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b086      	sub	sp, #24
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	60f8      	str	r0, [r7, #12]
 80127f4:	460b      	mov	r3, r1
 80127f6:	607a      	str	r2, [r7, #4]
 80127f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012800:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d102      	bne.n	801280e <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8012808:	f04f 33ff 	mov.w	r3, #4294967295
 801280c:	e03b      	b.n	8012886 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012814:	2b01      	cmp	r3, #1
 8012816:	d10f      	bne.n	8012838 <SCSI_StartStopUnit+0x4c>
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	3304      	adds	r3, #4
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	f003 0303 	and.w	r3, r3, #3
 8012822:	2b02      	cmp	r3, #2
 8012824:	d108      	bne.n	8012838 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8012826:	7af9      	ldrb	r1, [r7, #11]
 8012828:	2324      	movs	r3, #36	; 0x24
 801282a:	2205      	movs	r2, #5
 801282c:	68f8      	ldr	r0, [r7, #12]
 801282e:	f7ff ff96 	bl	801275e <SCSI_SenseCode>

    return -1;
 8012832:	f04f 33ff 	mov.w	r3, #4294967295
 8012836:	e026      	b.n	8012886 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	3304      	adds	r3, #4
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	f003 0303 	and.w	r3, r3, #3
 8012842:	2b01      	cmp	r3, #1
 8012844:	d104      	bne.n	8012850 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	2200      	movs	r2, #0
 801284a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801284e:	e016      	b.n	801287e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	3304      	adds	r3, #4
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	f003 0303 	and.w	r3, r3, #3
 801285a:	2b02      	cmp	r3, #2
 801285c:	d104      	bne.n	8012868 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	2202      	movs	r2, #2
 8012862:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8012866:	e00a      	b.n	801287e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	3304      	adds	r3, #4
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	f003 0303 	and.w	r3, r3, #3
 8012872:	2b03      	cmp	r3, #3
 8012874:	d103      	bne.n	801287e <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012876:	697b      	ldr	r3, [r7, #20]
 8012878:	2200      	movs	r2, #0
 801287a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	2200      	movs	r2, #0
 8012882:	60da      	str	r2, [r3, #12]

  return 0;
 8012884:	2300      	movs	r3, #0
}
 8012886:	4618      	mov	r0, r3
 8012888:	3718      	adds	r7, #24
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}

0801288e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801288e:	b480      	push	{r7}
 8012890:	b087      	sub	sp, #28
 8012892:	af00      	add	r7, sp, #0
 8012894:	60f8      	str	r0, [r7, #12]
 8012896:	460b      	mov	r3, r1
 8012898:	607a      	str	r2, [r7, #4]
 801289a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80128a2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d102      	bne.n	80128b0 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80128aa:	f04f 33ff 	mov.w	r3, #4294967295
 80128ae:	e011      	b.n	80128d4 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	3304      	adds	r3, #4
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d104      	bne.n	80128c4 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	2200      	movs	r2, #0
 80128be:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80128c2:	e003      	b.n	80128cc <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	2201      	movs	r2, #1
 80128c8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	2200      	movs	r2, #0
 80128d0:	60da      	str	r2, [r3, #12]

  return 0;
 80128d2:	2300      	movs	r3, #0
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	371c      	adds	r7, #28
 80128d8:	46bd      	mov	sp, r7
 80128da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128de:	4770      	bx	lr

080128e0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b086      	sub	sp, #24
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	60f8      	str	r0, [r7, #12]
 80128e8:	460b      	mov	r3, r1
 80128ea:	607a      	str	r2, [r7, #4]
 80128ec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80128f4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d102      	bne.n	8012902 <SCSI_Read10+0x22>
  {
    return -1;
 80128fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012900:	e08a      	b.n	8012a18 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	7a1b      	ldrb	r3, [r3, #8]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d17c      	bne.n	8012a04 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012910:	b25b      	sxtb	r3, r3
 8012912:	2b00      	cmp	r3, #0
 8012914:	db0a      	blt.n	801292c <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012916:	697b      	ldr	r3, [r7, #20]
 8012918:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801291c:	2320      	movs	r3, #32
 801291e:	2205      	movs	r2, #5
 8012920:	68f8      	ldr	r0, [r7, #12]
 8012922:	f7ff ff1c 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012926:	f04f 33ff 	mov.w	r3, #4294967295
 801292a:	e075      	b.n	8012a18 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012932:	2b02      	cmp	r3, #2
 8012934:	d108      	bne.n	8012948 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012936:	7af9      	ldrb	r1, [r7, #11]
 8012938:	233a      	movs	r3, #58	; 0x3a
 801293a:	2202      	movs	r2, #2
 801293c:	68f8      	ldr	r0, [r7, #12]
 801293e:	f7ff ff0e 	bl	801275e <SCSI_SenseCode>

      return -1;
 8012942:	f04f 33ff 	mov.w	r3, #4294967295
 8012946:	e067      	b.n	8012a18 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801294e:	689b      	ldr	r3, [r3, #8]
 8012950:	7afa      	ldrb	r2, [r7, #11]
 8012952:	4610      	mov	r0, r2
 8012954:	4798      	blx	r3
 8012956:	4603      	mov	r3, r0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d008      	beq.n	801296e <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801295c:	7af9      	ldrb	r1, [r7, #11]
 801295e:	233a      	movs	r3, #58	; 0x3a
 8012960:	2202      	movs	r2, #2
 8012962:	68f8      	ldr	r0, [r7, #12]
 8012964:	f7ff fefb 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012968:	f04f 33ff 	mov.w	r3, #4294967295
 801296c:	e054      	b.n	8012a18 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	3302      	adds	r3, #2
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	3303      	adds	r3, #3
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801297e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	3304      	adds	r3, #4
 8012984:	781b      	ldrb	r3, [r3, #0]
 8012986:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012988:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801298a:	687a      	ldr	r2, [r7, #4]
 801298c:	3205      	adds	r2, #5
 801298e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8012990:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	3307      	adds	r3, #7
 801299c:	781b      	ldrb	r3, [r3, #0]
 801299e:	021b      	lsls	r3, r3, #8
 80129a0:	687a      	ldr	r2, [r7, #4]
 80129a2:	3208      	adds	r2, #8
 80129a4:	7812      	ldrb	r2, [r2, #0]
 80129a6:	431a      	orrs	r2, r3
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80129ba:	7af9      	ldrb	r1, [r7, #11]
 80129bc:	68f8      	ldr	r0, [r7, #12]
 80129be:	f000 faad 	bl	8012f1c <SCSI_CheckAddressRange>
 80129c2:	4603      	mov	r3, r0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	da02      	bge.n	80129ce <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80129c8:	f04f 33ff 	mov.w	r3, #4294967295
 80129cc:	e024      	b.n	8012a18 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80129da:	6979      	ldr	r1, [r7, #20]
 80129dc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80129e0:	fb01 f303 	mul.w	r3, r1, r3
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d00a      	beq.n	80129fe <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80129ee:	2320      	movs	r3, #32
 80129f0:	2205      	movs	r2, #5
 80129f2:	68f8      	ldr	r0, [r7, #12]
 80129f4:	f7ff feb3 	bl	801275e <SCSI_SenseCode>
      return -1;
 80129f8:	f04f 33ff 	mov.w	r3, #4294967295
 80129fc:	e00c      	b.n	8012a18 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	2202      	movs	r2, #2
 8012a02:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012a0a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8012a0c:	7afb      	ldrb	r3, [r7, #11]
 8012a0e:	4619      	mov	r1, r3
 8012a10:	68f8      	ldr	r0, [r7, #12]
 8012a12:	f000 faab 	bl	8012f6c <SCSI_ProcessRead>
 8012a16:	4603      	mov	r3, r0
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3718      	adds	r7, #24
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b086      	sub	sp, #24
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	60f8      	str	r0, [r7, #12]
 8012a28:	460b      	mov	r3, r1
 8012a2a:	607a      	str	r2, [r7, #4]
 8012a2c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a34:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d102      	bne.n	8012a42 <SCSI_Read12+0x22>
  {
    return -1;
 8012a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a40:	e095      	b.n	8012b6e <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	7a1b      	ldrb	r3, [r3, #8]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	f040 8087 	bne.w	8012b5a <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012a52:	b25b      	sxtb	r3, r3
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	db0a      	blt.n	8012a6e <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012a5e:	2320      	movs	r3, #32
 8012a60:	2205      	movs	r2, #5
 8012a62:	68f8      	ldr	r0, [r7, #12]
 8012a64:	f7ff fe7b 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012a68:	f04f 33ff 	mov.w	r3, #4294967295
 8012a6c:	e07f      	b.n	8012b6e <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012a74:	2b02      	cmp	r3, #2
 8012a76:	d108      	bne.n	8012a8a <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012a78:	7af9      	ldrb	r1, [r7, #11]
 8012a7a:	233a      	movs	r3, #58	; 0x3a
 8012a7c:	2202      	movs	r2, #2
 8012a7e:	68f8      	ldr	r0, [r7, #12]
 8012a80:	f7ff fe6d 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012a84:	f04f 33ff 	mov.w	r3, #4294967295
 8012a88:	e071      	b.n	8012b6e <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a90:	689b      	ldr	r3, [r3, #8]
 8012a92:	7afa      	ldrb	r2, [r7, #11]
 8012a94:	4610      	mov	r0, r2
 8012a96:	4798      	blx	r3
 8012a98:	4603      	mov	r3, r0
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d008      	beq.n	8012ab0 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012a9e:	7af9      	ldrb	r1, [r7, #11]
 8012aa0:	233a      	movs	r3, #58	; 0x3a
 8012aa2:	2202      	movs	r2, #2
 8012aa4:	68f8      	ldr	r0, [r7, #12]
 8012aa6:	f7ff fe5a 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8012aae:	e05e      	b.n	8012b6e <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	3302      	adds	r3, #2
 8012ab4:	781b      	ldrb	r3, [r3, #0]
 8012ab6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	3303      	adds	r3, #3
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012ac0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	3304      	adds	r3, #4
 8012ac6:	781b      	ldrb	r3, [r3, #0]
 8012ac8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012aca:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012acc:	687a      	ldr	r2, [r7, #4]
 8012ace:	3205      	adds	r2, #5
 8012ad0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8012ad2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	3306      	adds	r3, #6
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	3307      	adds	r3, #7
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012aea:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	3308      	adds	r3, #8
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8012af4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	3209      	adds	r2, #9
 8012afa:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012afc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012b10:	7af9      	ldrb	r1, [r7, #11]
 8012b12:	68f8      	ldr	r0, [r7, #12]
 8012b14:	f000 fa02 	bl	8012f1c <SCSI_CheckAddressRange>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	da02      	bge.n	8012b24 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8012b22:	e024      	b.n	8012b6e <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012b30:	6979      	ldr	r1, [r7, #20]
 8012b32:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8012b36:	fb01 f303 	mul.w	r3, r1, r3
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d00a      	beq.n	8012b54 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012b44:	2320      	movs	r3, #32
 8012b46:	2205      	movs	r2, #5
 8012b48:	68f8      	ldr	r0, [r7, #12]
 8012b4a:	f7ff fe08 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012b52:	e00c      	b.n	8012b6e <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	2202      	movs	r2, #2
 8012b58:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b60:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8012b62:	7afb      	ldrb	r3, [r7, #11]
 8012b64:	4619      	mov	r1, r3
 8012b66:	68f8      	ldr	r0, [r7, #12]
 8012b68:	f000 fa00 	bl	8012f6c <SCSI_ProcessRead>
 8012b6c:	4603      	mov	r3, r0
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3718      	adds	r7, #24
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}

08012b76 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012b76:	b580      	push	{r7, lr}
 8012b78:	b086      	sub	sp, #24
 8012b7a:	af00      	add	r7, sp, #0
 8012b7c:	60f8      	str	r0, [r7, #12]
 8012b7e:	460b      	mov	r3, r1
 8012b80:	607a      	str	r2, [r7, #4]
 8012b82:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b8a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d102      	bne.n	8012b98 <SCSI_Write10+0x22>
  {
    return -1;
 8012b92:	f04f 33ff 	mov.w	r3, #4294967295
 8012b96:	e0af      	b.n	8012cf8 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	7a1b      	ldrb	r3, [r3, #8]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	f040 80a5 	bne.w	8012cec <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d10a      	bne.n	8012bc2 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012bb2:	2320      	movs	r3, #32
 8012bb4:	2205      	movs	r2, #5
 8012bb6:	68f8      	ldr	r0, [r7, #12]
 8012bb8:	f7ff fdd1 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8012bc0:	e09a      	b.n	8012cf8 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012bc8:	b25b      	sxtb	r3, r3
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	da0a      	bge.n	8012be4 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012bce:	697b      	ldr	r3, [r7, #20]
 8012bd0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012bd4:	2320      	movs	r3, #32
 8012bd6:	2205      	movs	r2, #5
 8012bd8:	68f8      	ldr	r0, [r7, #12]
 8012bda:	f7ff fdc0 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012bde:	f04f 33ff 	mov.w	r3, #4294967295
 8012be2:	e089      	b.n	8012cf8 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012bea:	689b      	ldr	r3, [r3, #8]
 8012bec:	7afa      	ldrb	r2, [r7, #11]
 8012bee:	4610      	mov	r0, r2
 8012bf0:	4798      	blx	r3
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d008      	beq.n	8012c0a <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012bf8:	7af9      	ldrb	r1, [r7, #11]
 8012bfa:	233a      	movs	r3, #58	; 0x3a
 8012bfc:	2202      	movs	r2, #2
 8012bfe:	68f8      	ldr	r0, [r7, #12]
 8012c00:	f7ff fdad 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012c04:	f04f 33ff 	mov.w	r3, #4294967295
 8012c08:	e076      	b.n	8012cf8 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	7afa      	ldrb	r2, [r7, #11]
 8012c14:	4610      	mov	r0, r2
 8012c16:	4798      	blx	r3
 8012c18:	4603      	mov	r3, r0
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d008      	beq.n	8012c30 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012c1e:	7af9      	ldrb	r1, [r7, #11]
 8012c20:	2327      	movs	r3, #39	; 0x27
 8012c22:	2202      	movs	r2, #2
 8012c24:	68f8      	ldr	r0, [r7, #12]
 8012c26:	f7ff fd9a 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8012c2e:	e063      	b.n	8012cf8 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	3302      	adds	r3, #2
 8012c34:	781b      	ldrb	r3, [r3, #0]
 8012c36:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	3303      	adds	r3, #3
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012c40:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	3304      	adds	r3, #4
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012c4a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012c4c:	687a      	ldr	r2, [r7, #4]
 8012c4e:	3205      	adds	r2, #5
 8012c50:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8012c52:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	3307      	adds	r3, #7
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8012c62:	687a      	ldr	r2, [r7, #4]
 8012c64:	3208      	adds	r2, #8
 8012c66:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012c68:	431a      	orrs	r2, r3
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012c76:	697b      	ldr	r3, [r7, #20]
 8012c78:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012c7c:	7af9      	ldrb	r1, [r7, #11]
 8012c7e:	68f8      	ldr	r0, [r7, #12]
 8012c80:	f000 f94c 	bl	8012f1c <SCSI_CheckAddressRange>
 8012c84:	4603      	mov	r3, r0
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	da02      	bge.n	8012c90 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8012c8e:	e033      	b.n	8012cf8 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012c96:	697a      	ldr	r2, [r7, #20]
 8012c98:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012c9c:	fb02 f303 	mul.w	r3, r2, r3
 8012ca0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012ca8:	693a      	ldr	r2, [r7, #16]
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d00a      	beq.n	8012cc4 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012cae:	697b      	ldr	r3, [r7, #20]
 8012cb0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012cb4:	2320      	movs	r3, #32
 8012cb6:	2205      	movs	r2, #5
 8012cb8:	68f8      	ldr	r0, [r7, #12]
 8012cba:	f7ff fd50 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8012cc2:	e019      	b.n	8012cf8 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012cca:	bf28      	it	cs
 8012ccc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012cd0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	2201      	movs	r2, #1
 8012cd6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	f103 0210 	add.w	r2, r3, #16
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	2101      	movs	r1, #1
 8012ce2:	68f8      	ldr	r0, [r7, #12]
 8012ce4:	f004 ffab 	bl	8017c3e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	e005      	b.n	8012cf8 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8012cec:	7afb      	ldrb	r3, [r7, #11]
 8012cee:	4619      	mov	r1, r3
 8012cf0:	68f8      	ldr	r0, [r7, #12]
 8012cf2:	f000 f9b4 	bl	801305e <SCSI_ProcessWrite>
 8012cf6:	4603      	mov	r3, r0
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3718      	adds	r7, #24
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b086      	sub	sp, #24
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	460b      	mov	r3, r1
 8012d0a:	607a      	str	r2, [r7, #4]
 8012d0c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d14:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d102      	bne.n	8012d22 <SCSI_Write12+0x22>
  {
    return -1;
 8012d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d20:	e0bf      	b.n	8012ea2 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	7a1b      	ldrb	r3, [r3, #8]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	f040 80b5 	bne.w	8012e96 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d10a      	bne.n	8012d4c <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012d36:	697b      	ldr	r3, [r7, #20]
 8012d38:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012d3c:	2320      	movs	r3, #32
 8012d3e:	2205      	movs	r2, #5
 8012d40:	68f8      	ldr	r0, [r7, #12]
 8012d42:	f7ff fd0c 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012d46:	f04f 33ff 	mov.w	r3, #4294967295
 8012d4a:	e0aa      	b.n	8012ea2 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012d52:	b25b      	sxtb	r3, r3
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	da0a      	bge.n	8012d6e <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012d5e:	2320      	movs	r3, #32
 8012d60:	2205      	movs	r2, #5
 8012d62:	68f8      	ldr	r0, [r7, #12]
 8012d64:	f7ff fcfb 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012d68:	f04f 33ff 	mov.w	r3, #4294967295
 8012d6c:	e099      	b.n	8012ea2 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d74:	689b      	ldr	r3, [r3, #8]
 8012d76:	7afa      	ldrb	r2, [r7, #11]
 8012d78:	4610      	mov	r0, r2
 8012d7a:	4798      	blx	r3
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d00b      	beq.n	8012d9a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012d82:	7af9      	ldrb	r1, [r7, #11]
 8012d84:	233a      	movs	r3, #58	; 0x3a
 8012d86:	2202      	movs	r2, #2
 8012d88:	68f8      	ldr	r0, [r7, #12]
 8012d8a:	f7ff fce8 	bl	801275e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	2205      	movs	r2, #5
 8012d92:	721a      	strb	r2, [r3, #8]
      return -1;
 8012d94:	f04f 33ff 	mov.w	r3, #4294967295
 8012d98:	e083      	b.n	8012ea2 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012da0:	68db      	ldr	r3, [r3, #12]
 8012da2:	7afa      	ldrb	r2, [r7, #11]
 8012da4:	4610      	mov	r0, r2
 8012da6:	4798      	blx	r3
 8012da8:	4603      	mov	r3, r0
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d00b      	beq.n	8012dc6 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012dae:	7af9      	ldrb	r1, [r7, #11]
 8012db0:	2327      	movs	r3, #39	; 0x27
 8012db2:	2202      	movs	r2, #2
 8012db4:	68f8      	ldr	r0, [r7, #12]
 8012db6:	f7ff fcd2 	bl	801275e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	2205      	movs	r2, #5
 8012dbe:	721a      	strb	r2, [r3, #8]
      return -1;
 8012dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8012dc4:	e06d      	b.n	8012ea2 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	3302      	adds	r3, #2
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	3303      	adds	r3, #3
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012dd6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	3304      	adds	r3, #4
 8012ddc:	781b      	ldrb	r3, [r3, #0]
 8012dde:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012de0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	3205      	adds	r2, #5
 8012de6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8012de8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012dea:	697b      	ldr	r3, [r7, #20]
 8012dec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	3306      	adds	r3, #6
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	3307      	adds	r3, #7
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012e00:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	3308      	adds	r3, #8
 8012e06:	781b      	ldrb	r3, [r3, #0]
 8012e08:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8012e0a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012e0c:	687a      	ldr	r2, [r7, #4]
 8012e0e:	3209      	adds	r2, #9
 8012e10:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012e12:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012e26:	7af9      	ldrb	r1, [r7, #11]
 8012e28:	68f8      	ldr	r0, [r7, #12]
 8012e2a:	f000 f877 	bl	8012f1c <SCSI_CheckAddressRange>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	da02      	bge.n	8012e3a <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012e34:	f04f 33ff 	mov.w	r3, #4294967295
 8012e38:	e033      	b.n	8012ea2 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012e40:	697a      	ldr	r2, [r7, #20]
 8012e42:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012e46:	fb02 f303 	mul.w	r3, r2, r3
 8012e4a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012e52:	693a      	ldr	r2, [r7, #16]
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d00a      	beq.n	8012e6e <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012e5e:	2320      	movs	r3, #32
 8012e60:	2205      	movs	r2, #5
 8012e62:	68f8      	ldr	r0, [r7, #12]
 8012e64:	f7ff fc7b 	bl	801275e <SCSI_SenseCode>
      return -1;
 8012e68:	f04f 33ff 	mov.w	r3, #4294967295
 8012e6c:	e019      	b.n	8012ea2 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e74:	bf28      	it	cs
 8012e76:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012e7a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	2201      	movs	r2, #1
 8012e80:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	f103 0210 	add.w	r2, r3, #16
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	2101      	movs	r1, #1
 8012e8c:	68f8      	ldr	r0, [r7, #12]
 8012e8e:	f004 fed6 	bl	8017c3e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012e92:	2300      	movs	r3, #0
 8012e94:	e005      	b.n	8012ea2 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8012e96:	7afb      	ldrb	r3, [r7, #11]
 8012e98:	4619      	mov	r1, r3
 8012e9a:	68f8      	ldr	r0, [r7, #12]
 8012e9c:	f000 f8df 	bl	801305e <SCSI_ProcessWrite>
 8012ea0:	4603      	mov	r3, r0
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3718      	adds	r7, #24
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}

08012eaa <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012eaa:	b580      	push	{r7, lr}
 8012eac:	b086      	sub	sp, #24
 8012eae:	af00      	add	r7, sp, #0
 8012eb0:	60f8      	str	r0, [r7, #12]
 8012eb2:	460b      	mov	r3, r1
 8012eb4:	607a      	str	r2, [r7, #4]
 8012eb6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ebe:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d102      	bne.n	8012ecc <SCSI_Verify10+0x22>
  {
    return -1;
 8012ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8012eca:	e023      	b.n	8012f14 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	3301      	adds	r3, #1
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	f003 0302 	and.w	r3, r3, #2
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d008      	beq.n	8012eec <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8012eda:	7af9      	ldrb	r1, [r7, #11]
 8012edc:	2324      	movs	r3, #36	; 0x24
 8012ede:	2205      	movs	r2, #5
 8012ee0:	68f8      	ldr	r0, [r7, #12]
 8012ee2:	f7ff fc3c 	bl	801275e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8012ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8012eea:	e013      	b.n	8012f14 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012ef8:	7af9      	ldrb	r1, [r7, #11]
 8012efa:	68f8      	ldr	r0, [r7, #12]
 8012efc:	f000 f80e 	bl	8012f1c <SCSI_CheckAddressRange>
 8012f00:	4603      	mov	r3, r0
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	da02      	bge.n	8012f0c <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8012f06:	f04f 33ff 	mov.w	r3, #4294967295
 8012f0a:	e003      	b.n	8012f14 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	60da      	str	r2, [r3, #12]

  return 0;
 8012f12:	2300      	movs	r3, #0
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3718      	adds	r7, #24
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b086      	sub	sp, #24
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	60f8      	str	r0, [r7, #12]
 8012f24:	607a      	str	r2, [r7, #4]
 8012f26:	603b      	str	r3, [r7, #0]
 8012f28:	460b      	mov	r3, r1
 8012f2a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f32:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d102      	bne.n	8012f40 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8012f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8012f3e:	e011      	b.n	8012f64 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8012f40:	687a      	ldr	r2, [r7, #4]
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	441a      	add	r2, r3
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012f4c:	429a      	cmp	r2, r3
 8012f4e:	d908      	bls.n	8012f62 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8012f50:	7af9      	ldrb	r1, [r7, #11]
 8012f52:	2321      	movs	r3, #33	; 0x21
 8012f54:	2205      	movs	r2, #5
 8012f56:	68f8      	ldr	r0, [r7, #12]
 8012f58:	f7ff fc01 	bl	801275e <SCSI_SenseCode>
    return -1;
 8012f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8012f60:	e000      	b.n	8012f64 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8012f62:	2300      	movs	r3, #0
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	3718      	adds	r7, #24
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}

08012f6c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012f6c:	b590      	push	{r4, r7, lr}
 8012f6e:	b085      	sub	sp, #20
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	460b      	mov	r3, r1
 8012f76:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f7e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012f86:	68fa      	ldr	r2, [r7, #12]
 8012f88:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012f8c:	fb02 f303 	mul.w	r3, r2, r3
 8012f90:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d102      	bne.n	8012f9e <SCSI_ProcessRead+0x32>
  {
    return -1;
 8012f98:	f04f 33ff 	mov.w	r3, #4294967295
 8012f9c:	e05b      	b.n	8013056 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012fa4:	bf28      	it	cs
 8012fa6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012faa:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012fb2:	691c      	ldr	r4, [r3, #16]
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	f103 0110 	add.w	r1, r3, #16
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8012fce:	b29b      	uxth	r3, r3
 8012fd0:	78f8      	ldrb	r0, [r7, #3]
 8012fd2:	47a0      	blx	r4
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	da08      	bge.n	8012fec <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8012fda:	78f9      	ldrb	r1, [r7, #3]
 8012fdc:	2311      	movs	r3, #17
 8012fde:	2204      	movs	r2, #4
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f7ff fbbc 	bl	801275e <SCSI_SenseCode>
    return -1;
 8012fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8012fea:	e034      	b.n	8013056 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	f103 0210 	add.w	r2, r3, #16
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	2181      	movs	r1, #129	; 0x81
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f004 fe00 	bl	8017bfc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013008:	4619      	mov	r1, r3
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013010:	441a      	add	r2, r3
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013024:	4619      	mov	r1, r3
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	fbb3 f3f1 	udiv	r3, r3, r1
 801302c:	1ad2      	subs	r2, r2, r3
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	1ad2      	subs	r2, r2, r3
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801304a:	2b00      	cmp	r3, #0
 801304c:	d102      	bne.n	8013054 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	2203      	movs	r2, #3
 8013052:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8013054:	2300      	movs	r3, #0
}
 8013056:	4618      	mov	r0, r3
 8013058:	3714      	adds	r7, #20
 801305a:	46bd      	mov	sp, r7
 801305c:	bd90      	pop	{r4, r7, pc}

0801305e <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801305e:	b590      	push	{r4, r7, lr}
 8013060:	b085      	sub	sp, #20
 8013062:	af00      	add	r7, sp, #0
 8013064:	6078      	str	r0, [r7, #4]
 8013066:	460b      	mov	r3, r1
 8013068:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013070:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013078:	68fa      	ldr	r2, [r7, #12]
 801307a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801307e:	fb02 f303 	mul.w	r3, r2, r3
 8013082:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d102      	bne.n	8013090 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 801308a:	f04f 33ff 	mov.w	r3, #4294967295
 801308e:	e06b      	b.n	8013168 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013096:	bf28      	it	cs
 8013098:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801309c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80130a4:	695c      	ldr	r4, [r3, #20]
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	f103 0110 	add.w	r1, r3, #16
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80130b8:	4618      	mov	r0, r3
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80130c0:	b29b      	uxth	r3, r3
 80130c2:	78f8      	ldrb	r0, [r7, #3]
 80130c4:	47a0      	blx	r4
 80130c6:	4603      	mov	r3, r0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	da08      	bge.n	80130de <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80130cc:	78f9      	ldrb	r1, [r7, #3]
 80130ce:	2303      	movs	r3, #3
 80130d0:	2204      	movs	r2, #4
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f7ff fb43 	bl	801275e <SCSI_SenseCode>
    return -1;
 80130d8:	f04f 33ff 	mov.w	r3, #4294967295
 80130dc:	e044      	b.n	8013168 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80130ea:	4619      	mov	r1, r3
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80130f2:	441a      	add	r2, r3
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013106:	4619      	mov	r1, r3
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	fbb3 f3f1 	udiv	r3, r3, r1
 801310e:	1ad2      	subs	r2, r2, r3
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	1ad2      	subs	r2, r2, r3
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801312c:	2b00      	cmp	r3, #0
 801312e:	d104      	bne.n	801313a <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013130:	2100      	movs	r1, #0
 8013132:	6878      	ldr	r0, [r7, #4]
 8013134:	f7fe fdd8 	bl	8011ce8 <MSC_BOT_SendCSW>
 8013138:	e015      	b.n	8013166 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013140:	68fa      	ldr	r2, [r7, #12]
 8013142:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8013146:	fb02 f303 	mul.w	r3, r2, r3
 801314a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801314e:	bf28      	it	cs
 8013150:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013154:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	f103 0210 	add.w	r2, r3, #16
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	2101      	movs	r1, #1
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f004 fd6c 	bl	8017c3e <USBD_LL_PrepareReceive>
  }

  return 0;
 8013166:	2300      	movs	r3, #0
}
 8013168:	4618      	mov	r0, r3
 801316a:	3714      	adds	r7, #20
 801316c:	46bd      	mov	sp, r7
 801316e:	bd90      	pop	{r4, r7, pc}

08013170 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8013170:	b480      	push	{r7}
 8013172:	b087      	sub	sp, #28
 8013174:	af00      	add	r7, sp, #0
 8013176:	60f8      	str	r0, [r7, #12]
 8013178:	60b9      	str	r1, [r7, #8]
 801317a:	4613      	mov	r3, r2
 801317c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801317e:	88fb      	ldrh	r3, [r7, #6]
 8013180:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d102      	bne.n	801318e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8013188:	f04f 33ff 	mov.w	r3, #4294967295
 801318c:	e013      	b.n	80131b6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 801318e:	8afa      	ldrh	r2, [r7, #22]
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8013194:	e00b      	b.n	80131ae <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8013196:	8afb      	ldrh	r3, [r7, #22]
 8013198:	3b01      	subs	r3, #1
 801319a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801319c:	8afb      	ldrh	r3, [r7, #22]
 801319e:	68ba      	ldr	r2, [r7, #8]
 80131a0:	441a      	add	r2, r3
 80131a2:	8afb      	ldrh	r3, [r7, #22]
 80131a4:	7811      	ldrb	r1, [r2, #0]
 80131a6:	68fa      	ldr	r2, [r7, #12]
 80131a8:	4413      	add	r3, r2
 80131aa:	460a      	mov	r2, r1
 80131ac:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80131ae:	8afb      	ldrh	r3, [r7, #22]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d1f0      	bne.n	8013196 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80131b4:	2300      	movs	r3, #0
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	371c      	adds	r7, #28
 80131ba:	46bd      	mov	sp, r7
 80131bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c0:	4770      	bx	lr

080131c2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80131c2:	b580      	push	{r7, lr}
 80131c4:	b086      	sub	sp, #24
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	60f8      	str	r0, [r7, #12]
 80131ca:	60b9      	str	r1, [r7, #8]
 80131cc:	4613      	mov	r3, r2
 80131ce:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d101      	bne.n	80131da <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80131d6:	2303      	movs	r3, #3
 80131d8:	e01f      	b.n	801321a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	2200      	movs	r2, #0
 80131de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	2200      	movs	r2, #0
 80131e6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2200      	movs	r2, #0
 80131ee:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d003      	beq.n	8013200 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	68ba      	ldr	r2, [r7, #8]
 80131fc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	2201      	movs	r2, #1
 8013204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	79fa      	ldrb	r2, [r7, #7]
 801320c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801320e:	68f8      	ldr	r0, [r7, #12]
 8013210:	f004 fba0 	bl	8017954 <USBD_LL_Init>
 8013214:	4603      	mov	r3, r0
 8013216:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013218:	7dfb      	ldrb	r3, [r7, #23]
}
 801321a:	4618      	mov	r0, r3
 801321c:	3718      	adds	r7, #24
 801321e:	46bd      	mov	sp, r7
 8013220:	bd80      	pop	{r7, pc}

08013222 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013222:	b580      	push	{r7, lr}
 8013224:	b084      	sub	sp, #16
 8013226:	af00      	add	r7, sp, #0
 8013228:	6078      	str	r0, [r7, #4]
 801322a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801322c:	2300      	movs	r3, #0
 801322e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d101      	bne.n	801323a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013236:	2303      	movs	r3, #3
 8013238:	e016      	b.n	8013268 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	683a      	ldr	r2, [r7, #0]
 801323e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801324a:	2b00      	cmp	r3, #0
 801324c:	d00b      	beq.n	8013266 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013256:	f107 020e 	add.w	r2, r7, #14
 801325a:	4610      	mov	r0, r2
 801325c:	4798      	blx	r3
 801325e:	4602      	mov	r2, r0
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013266:	2300      	movs	r3, #0
}
 8013268:	4618      	mov	r0, r3
 801326a:	3710      	adds	r7, #16
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f004 fbb7 	bl	80179ec <USBD_LL_Start>
 801327e:	4603      	mov	r3, r0
}
 8013280:	4618      	mov	r0, r3
 8013282:	3708      	adds	r7, #8
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}

08013288 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013288:	b480      	push	{r7}
 801328a:	b083      	sub	sp, #12
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013290:	2300      	movs	r3, #0
}
 8013292:	4618      	mov	r0, r3
 8013294:	370c      	adds	r7, #12
 8013296:	46bd      	mov	sp, r7
 8013298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329c:	4770      	bx	lr

0801329e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801329e:	b580      	push	{r7, lr}
 80132a0:	b084      	sub	sp, #16
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	6078      	str	r0, [r7, #4]
 80132a6:	460b      	mov	r3, r1
 80132a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80132aa:	2303      	movs	r3, #3
 80132ac:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d009      	beq.n	80132cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	78fa      	ldrb	r2, [r7, #3]
 80132c2:	4611      	mov	r1, r2
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	4798      	blx	r3
 80132c8:	4603      	mov	r3, r0
 80132ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80132cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3710      	adds	r7, #16
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}

080132d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80132d6:	b580      	push	{r7, lr}
 80132d8:	b082      	sub	sp, #8
 80132da:	af00      	add	r7, sp, #0
 80132dc:	6078      	str	r0, [r7, #4]
 80132de:	460b      	mov	r3, r1
 80132e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d007      	beq.n	80132fc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132f2:	685b      	ldr	r3, [r3, #4]
 80132f4:	78fa      	ldrb	r2, [r7, #3]
 80132f6:	4611      	mov	r1, r2
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	4798      	blx	r3
  }

  return USBD_OK;
 80132fc:	2300      	movs	r3, #0
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3708      	adds	r7, #8
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}

08013306 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013306:	b580      	push	{r7, lr}
 8013308:	b084      	sub	sp, #16
 801330a:	af00      	add	r7, sp, #0
 801330c:	6078      	str	r0, [r7, #4]
 801330e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013316:	6839      	ldr	r1, [r7, #0]
 8013318:	4618      	mov	r0, r3
 801331a:	f000 ffb9 	bl	8014290 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2201      	movs	r2, #1
 8013322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801332c:	461a      	mov	r2, r3
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801333a:	f003 031f 	and.w	r3, r3, #31
 801333e:	2b02      	cmp	r3, #2
 8013340:	d01a      	beq.n	8013378 <USBD_LL_SetupStage+0x72>
 8013342:	2b02      	cmp	r3, #2
 8013344:	d822      	bhi.n	801338c <USBD_LL_SetupStage+0x86>
 8013346:	2b00      	cmp	r3, #0
 8013348:	d002      	beq.n	8013350 <USBD_LL_SetupStage+0x4a>
 801334a:	2b01      	cmp	r3, #1
 801334c:	d00a      	beq.n	8013364 <USBD_LL_SetupStage+0x5e>
 801334e:	e01d      	b.n	801338c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013356:	4619      	mov	r1, r3
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f000 fa61 	bl	8013820 <USBD_StdDevReq>
 801335e:	4603      	mov	r3, r0
 8013360:	73fb      	strb	r3, [r7, #15]
      break;
 8013362:	e020      	b.n	80133a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801336a:	4619      	mov	r1, r3
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f000 fac5 	bl	80138fc <USBD_StdItfReq>
 8013372:	4603      	mov	r3, r0
 8013374:	73fb      	strb	r3, [r7, #15]
      break;
 8013376:	e016      	b.n	80133a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801337e:	4619      	mov	r1, r3
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f000 fb04 	bl	801398e <USBD_StdEPReq>
 8013386:	4603      	mov	r3, r0
 8013388:	73fb      	strb	r3, [r7, #15]
      break;
 801338a:	e00c      	b.n	80133a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013392:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013396:	b2db      	uxtb	r3, r3
 8013398:	4619      	mov	r1, r3
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f004 fba5 	bl	8017aea <USBD_LL_StallEP>
 80133a0:	4603      	mov	r3, r0
 80133a2:	73fb      	strb	r3, [r7, #15]
      break;
 80133a4:	bf00      	nop
  }

  return ret;
 80133a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	3710      	adds	r7, #16
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}

080133b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b086      	sub	sp, #24
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	460b      	mov	r3, r1
 80133ba:	607a      	str	r2, [r7, #4]
 80133bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80133be:	7afb      	ldrb	r3, [r7, #11]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d138      	bne.n	8013436 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80133ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80133d2:	2b03      	cmp	r3, #3
 80133d4:	d14a      	bne.n	801346c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80133d6:	693b      	ldr	r3, [r7, #16]
 80133d8:	689a      	ldr	r2, [r3, #8]
 80133da:	693b      	ldr	r3, [r7, #16]
 80133dc:	68db      	ldr	r3, [r3, #12]
 80133de:	429a      	cmp	r2, r3
 80133e0:	d913      	bls.n	801340a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	689a      	ldr	r2, [r3, #8]
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	68db      	ldr	r3, [r3, #12]
 80133ea:	1ad2      	subs	r2, r2, r3
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	68da      	ldr	r2, [r3, #12]
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	689b      	ldr	r3, [r3, #8]
 80133f8:	4293      	cmp	r3, r2
 80133fa:	bf28      	it	cs
 80133fc:	4613      	movcs	r3, r2
 80133fe:	461a      	mov	r2, r3
 8013400:	6879      	ldr	r1, [r7, #4]
 8013402:	68f8      	ldr	r0, [r7, #12]
 8013404:	f001 f81b 	bl	801443e <USBD_CtlContinueRx>
 8013408:	e030      	b.n	801346c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013410:	b2db      	uxtb	r3, r3
 8013412:	2b03      	cmp	r3, #3
 8013414:	d10b      	bne.n	801342e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801341c:	691b      	ldr	r3, [r3, #16]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d005      	beq.n	801342e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013428:	691b      	ldr	r3, [r3, #16]
 801342a:	68f8      	ldr	r0, [r7, #12]
 801342c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801342e:	68f8      	ldr	r0, [r7, #12]
 8013430:	f001 f816 	bl	8014460 <USBD_CtlSendStatus>
 8013434:	e01a      	b.n	801346c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801343c:	b2db      	uxtb	r3, r3
 801343e:	2b03      	cmp	r3, #3
 8013440:	d114      	bne.n	801346c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013448:	699b      	ldr	r3, [r3, #24]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d00e      	beq.n	801346c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013454:	699b      	ldr	r3, [r3, #24]
 8013456:	7afa      	ldrb	r2, [r7, #11]
 8013458:	4611      	mov	r1, r2
 801345a:	68f8      	ldr	r0, [r7, #12]
 801345c:	4798      	blx	r3
 801345e:	4603      	mov	r3, r0
 8013460:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013462:	7dfb      	ldrb	r3, [r7, #23]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d001      	beq.n	801346c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8013468:	7dfb      	ldrb	r3, [r7, #23]
 801346a:	e000      	b.n	801346e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801346c:	2300      	movs	r3, #0
}
 801346e:	4618      	mov	r0, r3
 8013470:	3718      	adds	r7, #24
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}

08013476 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013476:	b580      	push	{r7, lr}
 8013478:	b086      	sub	sp, #24
 801347a:	af00      	add	r7, sp, #0
 801347c:	60f8      	str	r0, [r7, #12]
 801347e:	460b      	mov	r3, r1
 8013480:	607a      	str	r2, [r7, #4]
 8013482:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013484:	7afb      	ldrb	r3, [r7, #11]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d16b      	bne.n	8013562 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	3314      	adds	r3, #20
 801348e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013496:	2b02      	cmp	r3, #2
 8013498:	d156      	bne.n	8013548 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	689a      	ldr	r2, [r3, #8]
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	68db      	ldr	r3, [r3, #12]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d914      	bls.n	80134d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	689a      	ldr	r2, [r3, #8]
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	68db      	ldr	r3, [r3, #12]
 80134ae:	1ad2      	subs	r2, r2, r3
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	689b      	ldr	r3, [r3, #8]
 80134b8:	461a      	mov	r2, r3
 80134ba:	6879      	ldr	r1, [r7, #4]
 80134bc:	68f8      	ldr	r0, [r7, #12]
 80134be:	f000 ffad 	bl	801441c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80134c2:	2300      	movs	r3, #0
 80134c4:	2200      	movs	r2, #0
 80134c6:	2100      	movs	r1, #0
 80134c8:	68f8      	ldr	r0, [r7, #12]
 80134ca:	f004 fbb8 	bl	8017c3e <USBD_LL_PrepareReceive>
 80134ce:	e03b      	b.n	8013548 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	68da      	ldr	r2, [r3, #12]
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d11c      	bne.n	8013516 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80134dc:	693b      	ldr	r3, [r7, #16]
 80134de:	685a      	ldr	r2, [r3, #4]
 80134e0:	693b      	ldr	r3, [r7, #16]
 80134e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d316      	bcc.n	8013516 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	685a      	ldr	r2, [r3, #4]
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d20f      	bcs.n	8013516 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80134f6:	2200      	movs	r2, #0
 80134f8:	2100      	movs	r1, #0
 80134fa:	68f8      	ldr	r0, [r7, #12]
 80134fc:	f000 ff8e 	bl	801441c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	2200      	movs	r2, #0
 8013504:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013508:	2300      	movs	r3, #0
 801350a:	2200      	movs	r2, #0
 801350c:	2100      	movs	r1, #0
 801350e:	68f8      	ldr	r0, [r7, #12]
 8013510:	f004 fb95 	bl	8017c3e <USBD_LL_PrepareReceive>
 8013514:	e018      	b.n	8013548 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801351c:	b2db      	uxtb	r3, r3
 801351e:	2b03      	cmp	r3, #3
 8013520:	d10b      	bne.n	801353a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013528:	68db      	ldr	r3, [r3, #12]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d005      	beq.n	801353a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013534:	68db      	ldr	r3, [r3, #12]
 8013536:	68f8      	ldr	r0, [r7, #12]
 8013538:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801353a:	2180      	movs	r1, #128	; 0x80
 801353c:	68f8      	ldr	r0, [r7, #12]
 801353e:	f004 fad4 	bl	8017aea <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013542:	68f8      	ldr	r0, [r7, #12]
 8013544:	f000 ff9f 	bl	8014486 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801354e:	2b01      	cmp	r3, #1
 8013550:	d122      	bne.n	8013598 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	f7ff fe98 	bl	8013288 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2200      	movs	r2, #0
 801355c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013560:	e01a      	b.n	8013598 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013568:	b2db      	uxtb	r3, r3
 801356a:	2b03      	cmp	r3, #3
 801356c:	d114      	bne.n	8013598 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013574:	695b      	ldr	r3, [r3, #20]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d00e      	beq.n	8013598 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013580:	695b      	ldr	r3, [r3, #20]
 8013582:	7afa      	ldrb	r2, [r7, #11]
 8013584:	4611      	mov	r1, r2
 8013586:	68f8      	ldr	r0, [r7, #12]
 8013588:	4798      	blx	r3
 801358a:	4603      	mov	r3, r0
 801358c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801358e:	7dfb      	ldrb	r3, [r7, #23]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d001      	beq.n	8013598 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8013594:	7dfb      	ldrb	r3, [r7, #23]
 8013596:	e000      	b.n	801359a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8013598:	2300      	movs	r3, #0
}
 801359a:	4618      	mov	r0, r3
 801359c:	3718      	adds	r7, #24
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}

080135a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80135a2:	b580      	push	{r7, lr}
 80135a4:	b082      	sub	sp, #8
 80135a6:	af00      	add	r7, sp, #0
 80135a8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2201      	movs	r2, #1
 80135ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	2200      	movs	r2, #0
 80135b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	2200      	movs	r2, #0
 80135be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2200      	movs	r2, #0
 80135c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d101      	bne.n	80135d6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80135d2:	2303      	movs	r3, #3
 80135d4:	e02f      	b.n	8013636 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d00f      	beq.n	8013600 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d009      	beq.n	8013600 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135f2:	685b      	ldr	r3, [r3, #4]
 80135f4:	687a      	ldr	r2, [r7, #4]
 80135f6:	6852      	ldr	r2, [r2, #4]
 80135f8:	b2d2      	uxtb	r2, r2
 80135fa:	4611      	mov	r1, r2
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013600:	2340      	movs	r3, #64	; 0x40
 8013602:	2200      	movs	r2, #0
 8013604:	2100      	movs	r1, #0
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f004 fa0b 	bl	8017a22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2201      	movs	r2, #1
 8013610:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2240      	movs	r2, #64	; 0x40
 8013618:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801361c:	2340      	movs	r3, #64	; 0x40
 801361e:	2200      	movs	r2, #0
 8013620:	2180      	movs	r1, #128	; 0x80
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f004 f9fd 	bl	8017a22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2201      	movs	r2, #1
 801362c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2240      	movs	r2, #64	; 0x40
 8013632:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8013634:	2300      	movs	r3, #0
}
 8013636:	4618      	mov	r0, r3
 8013638:	3708      	adds	r7, #8
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}

0801363e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801363e:	b480      	push	{r7}
 8013640:	b083      	sub	sp, #12
 8013642:	af00      	add	r7, sp, #0
 8013644:	6078      	str	r0, [r7, #4]
 8013646:	460b      	mov	r3, r1
 8013648:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	78fa      	ldrb	r2, [r7, #3]
 801364e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013650:	2300      	movs	r3, #0
}
 8013652:	4618      	mov	r0, r3
 8013654:	370c      	adds	r7, #12
 8013656:	46bd      	mov	sp, r7
 8013658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365c:	4770      	bx	lr

0801365e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801365e:	b480      	push	{r7}
 8013660:	b083      	sub	sp, #12
 8013662:	af00      	add	r7, sp, #0
 8013664:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801366c:	b2da      	uxtb	r2, r3
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2204      	movs	r2, #4
 8013678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801367c:	2300      	movs	r3, #0
}
 801367e:	4618      	mov	r0, r3
 8013680:	370c      	adds	r7, #12
 8013682:	46bd      	mov	sp, r7
 8013684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013688:	4770      	bx	lr

0801368a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801368a:	b480      	push	{r7}
 801368c:	b083      	sub	sp, #12
 801368e:	af00      	add	r7, sp, #0
 8013690:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013698:	b2db      	uxtb	r3, r3
 801369a:	2b04      	cmp	r3, #4
 801369c:	d106      	bne.n	80136ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80136a4:	b2da      	uxtb	r2, r3
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80136ac:	2300      	movs	r3, #0
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	370c      	adds	r7, #12
 80136b2:	46bd      	mov	sp, r7
 80136b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b8:	4770      	bx	lr

080136ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80136ba:	b580      	push	{r7, lr}
 80136bc:	b082      	sub	sp, #8
 80136be:	af00      	add	r7, sp, #0
 80136c0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d101      	bne.n	80136d0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80136cc:	2303      	movs	r3, #3
 80136ce:	e012      	b.n	80136f6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136d6:	b2db      	uxtb	r3, r3
 80136d8:	2b03      	cmp	r3, #3
 80136da:	d10b      	bne.n	80136f4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136e2:	69db      	ldr	r3, [r3, #28]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d005      	beq.n	80136f4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136ee:	69db      	ldr	r3, [r3, #28]
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80136f4:	2300      	movs	r3, #0
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3708      	adds	r7, #8
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}

080136fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80136fe:	b580      	push	{r7, lr}
 8013700:	b082      	sub	sp, #8
 8013702:	af00      	add	r7, sp, #0
 8013704:	6078      	str	r0, [r7, #4]
 8013706:	460b      	mov	r3, r1
 8013708:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013710:	2b00      	cmp	r3, #0
 8013712:	d101      	bne.n	8013718 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8013714:	2303      	movs	r3, #3
 8013716:	e014      	b.n	8013742 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801371e:	b2db      	uxtb	r3, r3
 8013720:	2b03      	cmp	r3, #3
 8013722:	d10d      	bne.n	8013740 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801372a:	6a1b      	ldr	r3, [r3, #32]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d007      	beq.n	8013740 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013736:	6a1b      	ldr	r3, [r3, #32]
 8013738:	78fa      	ldrb	r2, [r7, #3]
 801373a:	4611      	mov	r1, r2
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013740:	2300      	movs	r3, #0
}
 8013742:	4618      	mov	r0, r3
 8013744:	3708      	adds	r7, #8
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}

0801374a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801374a:	b580      	push	{r7, lr}
 801374c:	b082      	sub	sp, #8
 801374e:	af00      	add	r7, sp, #0
 8013750:	6078      	str	r0, [r7, #4]
 8013752:	460b      	mov	r3, r1
 8013754:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801375c:	2b00      	cmp	r3, #0
 801375e:	d101      	bne.n	8013764 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8013760:	2303      	movs	r3, #3
 8013762:	e014      	b.n	801378e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801376a:	b2db      	uxtb	r3, r3
 801376c:	2b03      	cmp	r3, #3
 801376e:	d10d      	bne.n	801378c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013778:	2b00      	cmp	r3, #0
 801377a:	d007      	beq.n	801378c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013784:	78fa      	ldrb	r2, [r7, #3]
 8013786:	4611      	mov	r1, r2
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801378c:	2300      	movs	r3, #0
}
 801378e:	4618      	mov	r0, r3
 8013790:	3708      	adds	r7, #8
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}

08013796 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013796:	b480      	push	{r7}
 8013798:	b083      	sub	sp, #12
 801379a:	af00      	add	r7, sp, #0
 801379c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801379e:	2300      	movs	r3, #0
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	370c      	adds	r7, #12
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b082      	sub	sp, #8
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2201      	movs	r2, #1
 80137b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d009      	beq.n	80137da <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137cc:	685b      	ldr	r3, [r3, #4]
 80137ce:	687a      	ldr	r2, [r7, #4]
 80137d0:	6852      	ldr	r2, [r2, #4]
 80137d2:	b2d2      	uxtb	r2, r2
 80137d4:	4611      	mov	r1, r2
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	4798      	blx	r3
  }

  return USBD_OK;
 80137da:	2300      	movs	r3, #0
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3708      	adds	r7, #8
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}

080137e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b087      	sub	sp, #28
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80137f0:	697b      	ldr	r3, [r7, #20]
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	3301      	adds	r3, #1
 80137fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	781b      	ldrb	r3, [r3, #0]
 8013800:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013802:	8a3b      	ldrh	r3, [r7, #16]
 8013804:	021b      	lsls	r3, r3, #8
 8013806:	b21a      	sxth	r2, r3
 8013808:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801380c:	4313      	orrs	r3, r2
 801380e:	b21b      	sxth	r3, r3
 8013810:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013812:	89fb      	ldrh	r3, [r7, #14]
}
 8013814:	4618      	mov	r0, r3
 8013816:	371c      	adds	r7, #28
 8013818:	46bd      	mov	sp, r7
 801381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381e:	4770      	bx	lr

08013820 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b084      	sub	sp, #16
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801382a:	2300      	movs	r3, #0
 801382c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013836:	2b40      	cmp	r3, #64	; 0x40
 8013838:	d005      	beq.n	8013846 <USBD_StdDevReq+0x26>
 801383a:	2b40      	cmp	r3, #64	; 0x40
 801383c:	d853      	bhi.n	80138e6 <USBD_StdDevReq+0xc6>
 801383e:	2b00      	cmp	r3, #0
 8013840:	d00b      	beq.n	801385a <USBD_StdDevReq+0x3a>
 8013842:	2b20      	cmp	r3, #32
 8013844:	d14f      	bne.n	80138e6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801384c:	689b      	ldr	r3, [r3, #8]
 801384e:	6839      	ldr	r1, [r7, #0]
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	4798      	blx	r3
 8013854:	4603      	mov	r3, r0
 8013856:	73fb      	strb	r3, [r7, #15]
      break;
 8013858:	e04a      	b.n	80138f0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	785b      	ldrb	r3, [r3, #1]
 801385e:	2b09      	cmp	r3, #9
 8013860:	d83b      	bhi.n	80138da <USBD_StdDevReq+0xba>
 8013862:	a201      	add	r2, pc, #4	; (adr r2, 8013868 <USBD_StdDevReq+0x48>)
 8013864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013868:	080138bd 	.word	0x080138bd
 801386c:	080138d1 	.word	0x080138d1
 8013870:	080138db 	.word	0x080138db
 8013874:	080138c7 	.word	0x080138c7
 8013878:	080138db 	.word	0x080138db
 801387c:	0801389b 	.word	0x0801389b
 8013880:	08013891 	.word	0x08013891
 8013884:	080138db 	.word	0x080138db
 8013888:	080138b3 	.word	0x080138b3
 801388c:	080138a5 	.word	0x080138a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013890:	6839      	ldr	r1, [r7, #0]
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f000 f9de 	bl	8013c54 <USBD_GetDescriptor>
          break;
 8013898:	e024      	b.n	80138e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801389a:	6839      	ldr	r1, [r7, #0]
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f000 fb6d 	bl	8013f7c <USBD_SetAddress>
          break;
 80138a2:	e01f      	b.n	80138e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80138a4:	6839      	ldr	r1, [r7, #0]
 80138a6:	6878      	ldr	r0, [r7, #4]
 80138a8:	f000 fbac 	bl	8014004 <USBD_SetConfig>
 80138ac:	4603      	mov	r3, r0
 80138ae:	73fb      	strb	r3, [r7, #15]
          break;
 80138b0:	e018      	b.n	80138e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80138b2:	6839      	ldr	r1, [r7, #0]
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f000 fc4b 	bl	8014150 <USBD_GetConfig>
          break;
 80138ba:	e013      	b.n	80138e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80138bc:	6839      	ldr	r1, [r7, #0]
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f000 fc7c 	bl	80141bc <USBD_GetStatus>
          break;
 80138c4:	e00e      	b.n	80138e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80138c6:	6839      	ldr	r1, [r7, #0]
 80138c8:	6878      	ldr	r0, [r7, #4]
 80138ca:	f000 fcab 	bl	8014224 <USBD_SetFeature>
          break;
 80138ce:	e009      	b.n	80138e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80138d0:	6839      	ldr	r1, [r7, #0]
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f000 fcba 	bl	801424c <USBD_ClrFeature>
          break;
 80138d8:	e004      	b.n	80138e4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80138da:	6839      	ldr	r1, [r7, #0]
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f000 fd11 	bl	8014304 <USBD_CtlError>
          break;
 80138e2:	bf00      	nop
      }
      break;
 80138e4:	e004      	b.n	80138f0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80138e6:	6839      	ldr	r1, [r7, #0]
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f000 fd0b 	bl	8014304 <USBD_CtlError>
      break;
 80138ee:	bf00      	nop
  }

  return ret;
 80138f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	3710      	adds	r7, #16
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}
 80138fa:	bf00      	nop

080138fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b084      	sub	sp, #16
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013906:	2300      	movs	r3, #0
 8013908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	781b      	ldrb	r3, [r3, #0]
 801390e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013912:	2b40      	cmp	r3, #64	; 0x40
 8013914:	d005      	beq.n	8013922 <USBD_StdItfReq+0x26>
 8013916:	2b40      	cmp	r3, #64	; 0x40
 8013918:	d82f      	bhi.n	801397a <USBD_StdItfReq+0x7e>
 801391a:	2b00      	cmp	r3, #0
 801391c:	d001      	beq.n	8013922 <USBD_StdItfReq+0x26>
 801391e:	2b20      	cmp	r3, #32
 8013920:	d12b      	bne.n	801397a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013928:	b2db      	uxtb	r3, r3
 801392a:	3b01      	subs	r3, #1
 801392c:	2b02      	cmp	r3, #2
 801392e:	d81d      	bhi.n	801396c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	889b      	ldrh	r3, [r3, #4]
 8013934:	b2db      	uxtb	r3, r3
 8013936:	2b01      	cmp	r3, #1
 8013938:	d813      	bhi.n	8013962 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013940:	689b      	ldr	r3, [r3, #8]
 8013942:	6839      	ldr	r1, [r7, #0]
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	4798      	blx	r3
 8013948:	4603      	mov	r3, r0
 801394a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	88db      	ldrh	r3, [r3, #6]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d110      	bne.n	8013976 <USBD_StdItfReq+0x7a>
 8013954:	7bfb      	ldrb	r3, [r7, #15]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d10d      	bne.n	8013976 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f000 fd80 	bl	8014460 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013960:	e009      	b.n	8013976 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8013962:	6839      	ldr	r1, [r7, #0]
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f000 fccd 	bl	8014304 <USBD_CtlError>
          break;
 801396a:	e004      	b.n	8013976 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801396c:	6839      	ldr	r1, [r7, #0]
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f000 fcc8 	bl	8014304 <USBD_CtlError>
          break;
 8013974:	e000      	b.n	8013978 <USBD_StdItfReq+0x7c>
          break;
 8013976:	bf00      	nop
      }
      break;
 8013978:	e004      	b.n	8013984 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801397a:	6839      	ldr	r1, [r7, #0]
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f000 fcc1 	bl	8014304 <USBD_CtlError>
      break;
 8013982:	bf00      	nop
  }

  return ret;
 8013984:	7bfb      	ldrb	r3, [r7, #15]
}
 8013986:	4618      	mov	r0, r3
 8013988:	3710      	adds	r7, #16
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}

0801398e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801398e:	b580      	push	{r7, lr}
 8013990:	b084      	sub	sp, #16
 8013992:	af00      	add	r7, sp, #0
 8013994:	6078      	str	r0, [r7, #4]
 8013996:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013998:	2300      	movs	r3, #0
 801399a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801399c:	683b      	ldr	r3, [r7, #0]
 801399e:	889b      	ldrh	r3, [r3, #4]
 80139a0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	781b      	ldrb	r3, [r3, #0]
 80139a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80139aa:	2b40      	cmp	r3, #64	; 0x40
 80139ac:	d007      	beq.n	80139be <USBD_StdEPReq+0x30>
 80139ae:	2b40      	cmp	r3, #64	; 0x40
 80139b0:	f200 8145 	bhi.w	8013c3e <USBD_StdEPReq+0x2b0>
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d00c      	beq.n	80139d2 <USBD_StdEPReq+0x44>
 80139b8:	2b20      	cmp	r3, #32
 80139ba:	f040 8140 	bne.w	8013c3e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139c4:	689b      	ldr	r3, [r3, #8]
 80139c6:	6839      	ldr	r1, [r7, #0]
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	4798      	blx	r3
 80139cc:	4603      	mov	r3, r0
 80139ce:	73fb      	strb	r3, [r7, #15]
      break;
 80139d0:	e13a      	b.n	8013c48 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	785b      	ldrb	r3, [r3, #1]
 80139d6:	2b03      	cmp	r3, #3
 80139d8:	d007      	beq.n	80139ea <USBD_StdEPReq+0x5c>
 80139da:	2b03      	cmp	r3, #3
 80139dc:	f300 8129 	bgt.w	8013c32 <USBD_StdEPReq+0x2a4>
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d07f      	beq.n	8013ae4 <USBD_StdEPReq+0x156>
 80139e4:	2b01      	cmp	r3, #1
 80139e6:	d03c      	beq.n	8013a62 <USBD_StdEPReq+0xd4>
 80139e8:	e123      	b.n	8013c32 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80139f0:	b2db      	uxtb	r3, r3
 80139f2:	2b02      	cmp	r3, #2
 80139f4:	d002      	beq.n	80139fc <USBD_StdEPReq+0x6e>
 80139f6:	2b03      	cmp	r3, #3
 80139f8:	d016      	beq.n	8013a28 <USBD_StdEPReq+0x9a>
 80139fa:	e02c      	b.n	8013a56 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80139fc:	7bbb      	ldrb	r3, [r7, #14]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d00d      	beq.n	8013a1e <USBD_StdEPReq+0x90>
 8013a02:	7bbb      	ldrb	r3, [r7, #14]
 8013a04:	2b80      	cmp	r3, #128	; 0x80
 8013a06:	d00a      	beq.n	8013a1e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a08:	7bbb      	ldrb	r3, [r7, #14]
 8013a0a:	4619      	mov	r1, r3
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f004 f86c 	bl	8017aea <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013a12:	2180      	movs	r1, #128	; 0x80
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f004 f868 	bl	8017aea <USBD_LL_StallEP>
 8013a1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013a1c:	e020      	b.n	8013a60 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8013a1e:	6839      	ldr	r1, [r7, #0]
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f000 fc6f 	bl	8014304 <USBD_CtlError>
              break;
 8013a26:	e01b      	b.n	8013a60 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	885b      	ldrh	r3, [r3, #2]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d10e      	bne.n	8013a4e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013a30:	7bbb      	ldrb	r3, [r7, #14]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d00b      	beq.n	8013a4e <USBD_StdEPReq+0xc0>
 8013a36:	7bbb      	ldrb	r3, [r7, #14]
 8013a38:	2b80      	cmp	r3, #128	; 0x80
 8013a3a:	d008      	beq.n	8013a4e <USBD_StdEPReq+0xc0>
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	88db      	ldrh	r3, [r3, #6]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d104      	bne.n	8013a4e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a44:	7bbb      	ldrb	r3, [r7, #14]
 8013a46:	4619      	mov	r1, r3
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f004 f84e 	bl	8017aea <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013a4e:	6878      	ldr	r0, [r7, #4]
 8013a50:	f000 fd06 	bl	8014460 <USBD_CtlSendStatus>

              break;
 8013a54:	e004      	b.n	8013a60 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8013a56:	6839      	ldr	r1, [r7, #0]
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f000 fc53 	bl	8014304 <USBD_CtlError>
              break;
 8013a5e:	bf00      	nop
          }
          break;
 8013a60:	e0ec      	b.n	8013c3c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a68:	b2db      	uxtb	r3, r3
 8013a6a:	2b02      	cmp	r3, #2
 8013a6c:	d002      	beq.n	8013a74 <USBD_StdEPReq+0xe6>
 8013a6e:	2b03      	cmp	r3, #3
 8013a70:	d016      	beq.n	8013aa0 <USBD_StdEPReq+0x112>
 8013a72:	e030      	b.n	8013ad6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013a74:	7bbb      	ldrb	r3, [r7, #14]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d00d      	beq.n	8013a96 <USBD_StdEPReq+0x108>
 8013a7a:	7bbb      	ldrb	r3, [r7, #14]
 8013a7c:	2b80      	cmp	r3, #128	; 0x80
 8013a7e:	d00a      	beq.n	8013a96 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a80:	7bbb      	ldrb	r3, [r7, #14]
 8013a82:	4619      	mov	r1, r3
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f004 f830 	bl	8017aea <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013a8a:	2180      	movs	r1, #128	; 0x80
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f004 f82c 	bl	8017aea <USBD_LL_StallEP>
 8013a92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013a94:	e025      	b.n	8013ae2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8013a96:	6839      	ldr	r1, [r7, #0]
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f000 fc33 	bl	8014304 <USBD_CtlError>
              break;
 8013a9e:	e020      	b.n	8013ae2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	885b      	ldrh	r3, [r3, #2]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d11b      	bne.n	8013ae0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013aa8:	7bbb      	ldrb	r3, [r7, #14]
 8013aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d004      	beq.n	8013abc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013ab2:	7bbb      	ldrb	r3, [r7, #14]
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f004 f836 	bl	8017b28 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f000 fccf 	bl	8014460 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ac8:	689b      	ldr	r3, [r3, #8]
 8013aca:	6839      	ldr	r1, [r7, #0]
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	4798      	blx	r3
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013ad4:	e004      	b.n	8013ae0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8013ad6:	6839      	ldr	r1, [r7, #0]
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f000 fc13 	bl	8014304 <USBD_CtlError>
              break;
 8013ade:	e000      	b.n	8013ae2 <USBD_StdEPReq+0x154>
              break;
 8013ae0:	bf00      	nop
          }
          break;
 8013ae2:	e0ab      	b.n	8013c3c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013aea:	b2db      	uxtb	r3, r3
 8013aec:	2b02      	cmp	r3, #2
 8013aee:	d002      	beq.n	8013af6 <USBD_StdEPReq+0x168>
 8013af0:	2b03      	cmp	r3, #3
 8013af2:	d032      	beq.n	8013b5a <USBD_StdEPReq+0x1cc>
 8013af4:	e097      	b.n	8013c26 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013af6:	7bbb      	ldrb	r3, [r7, #14]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d007      	beq.n	8013b0c <USBD_StdEPReq+0x17e>
 8013afc:	7bbb      	ldrb	r3, [r7, #14]
 8013afe:	2b80      	cmp	r3, #128	; 0x80
 8013b00:	d004      	beq.n	8013b0c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8013b02:	6839      	ldr	r1, [r7, #0]
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	f000 fbfd 	bl	8014304 <USBD_CtlError>
                break;
 8013b0a:	e091      	b.n	8013c30 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	da0b      	bge.n	8013b2c <USBD_StdEPReq+0x19e>
 8013b14:	7bbb      	ldrb	r3, [r7, #14]
 8013b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013b1a:	4613      	mov	r3, r2
 8013b1c:	009b      	lsls	r3, r3, #2
 8013b1e:	4413      	add	r3, r2
 8013b20:	009b      	lsls	r3, r3, #2
 8013b22:	3310      	adds	r3, #16
 8013b24:	687a      	ldr	r2, [r7, #4]
 8013b26:	4413      	add	r3, r2
 8013b28:	3304      	adds	r3, #4
 8013b2a:	e00b      	b.n	8013b44 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013b2c:	7bbb      	ldrb	r3, [r7, #14]
 8013b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b32:	4613      	mov	r3, r2
 8013b34:	009b      	lsls	r3, r3, #2
 8013b36:	4413      	add	r3, r2
 8013b38:	009b      	lsls	r3, r3, #2
 8013b3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013b3e:	687a      	ldr	r2, [r7, #4]
 8013b40:	4413      	add	r3, r2
 8013b42:	3304      	adds	r3, #4
 8013b44:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	2202      	movs	r2, #2
 8013b50:	4619      	mov	r1, r3
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f000 fc47 	bl	80143e6 <USBD_CtlSendData>
              break;
 8013b58:	e06a      	b.n	8013c30 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013b5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	da11      	bge.n	8013b86 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013b62:	7bbb      	ldrb	r3, [r7, #14]
 8013b64:	f003 020f 	and.w	r2, r3, #15
 8013b68:	6879      	ldr	r1, [r7, #4]
 8013b6a:	4613      	mov	r3, r2
 8013b6c:	009b      	lsls	r3, r3, #2
 8013b6e:	4413      	add	r3, r2
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	440b      	add	r3, r1
 8013b74:	3324      	adds	r3, #36	; 0x24
 8013b76:	881b      	ldrh	r3, [r3, #0]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d117      	bne.n	8013bac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013b7c:	6839      	ldr	r1, [r7, #0]
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f000 fbc0 	bl	8014304 <USBD_CtlError>
                  break;
 8013b84:	e054      	b.n	8013c30 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013b86:	7bbb      	ldrb	r3, [r7, #14]
 8013b88:	f003 020f 	and.w	r2, r3, #15
 8013b8c:	6879      	ldr	r1, [r7, #4]
 8013b8e:	4613      	mov	r3, r2
 8013b90:	009b      	lsls	r3, r3, #2
 8013b92:	4413      	add	r3, r2
 8013b94:	009b      	lsls	r3, r3, #2
 8013b96:	440b      	add	r3, r1
 8013b98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013b9c:	881b      	ldrh	r3, [r3, #0]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d104      	bne.n	8013bac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013ba2:	6839      	ldr	r1, [r7, #0]
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 fbad 	bl	8014304 <USBD_CtlError>
                  break;
 8013baa:	e041      	b.n	8013c30 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	da0b      	bge.n	8013bcc <USBD_StdEPReq+0x23e>
 8013bb4:	7bbb      	ldrb	r3, [r7, #14]
 8013bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013bba:	4613      	mov	r3, r2
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	4413      	add	r3, r2
 8013bc0:	009b      	lsls	r3, r3, #2
 8013bc2:	3310      	adds	r3, #16
 8013bc4:	687a      	ldr	r2, [r7, #4]
 8013bc6:	4413      	add	r3, r2
 8013bc8:	3304      	adds	r3, #4
 8013bca:	e00b      	b.n	8013be4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013bcc:	7bbb      	ldrb	r3, [r7, #14]
 8013bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013bd2:	4613      	mov	r3, r2
 8013bd4:	009b      	lsls	r3, r3, #2
 8013bd6:	4413      	add	r3, r2
 8013bd8:	009b      	lsls	r3, r3, #2
 8013bda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013bde:	687a      	ldr	r2, [r7, #4]
 8013be0:	4413      	add	r3, r2
 8013be2:	3304      	adds	r3, #4
 8013be4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013be6:	7bbb      	ldrb	r3, [r7, #14]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d002      	beq.n	8013bf2 <USBD_StdEPReq+0x264>
 8013bec:	7bbb      	ldrb	r3, [r7, #14]
 8013bee:	2b80      	cmp	r3, #128	; 0x80
 8013bf0:	d103      	bne.n	8013bfa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8013bf2:	68bb      	ldr	r3, [r7, #8]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	601a      	str	r2, [r3, #0]
 8013bf8:	e00e      	b.n	8013c18 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013bfa:	7bbb      	ldrb	r3, [r7, #14]
 8013bfc:	4619      	mov	r1, r3
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f003 ffb1 	bl	8017b66 <USBD_LL_IsStallEP>
 8013c04:	4603      	mov	r3, r0
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d003      	beq.n	8013c12 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	2201      	movs	r2, #1
 8013c0e:	601a      	str	r2, [r3, #0]
 8013c10:	e002      	b.n	8013c18 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	2200      	movs	r2, #0
 8013c16:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	2202      	movs	r2, #2
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f000 fbe1 	bl	80143e6 <USBD_CtlSendData>
              break;
 8013c24:	e004      	b.n	8013c30 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8013c26:	6839      	ldr	r1, [r7, #0]
 8013c28:	6878      	ldr	r0, [r7, #4]
 8013c2a:	f000 fb6b 	bl	8014304 <USBD_CtlError>
              break;
 8013c2e:	bf00      	nop
          }
          break;
 8013c30:	e004      	b.n	8013c3c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8013c32:	6839      	ldr	r1, [r7, #0]
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f000 fb65 	bl	8014304 <USBD_CtlError>
          break;
 8013c3a:	bf00      	nop
      }
      break;
 8013c3c:	e004      	b.n	8013c48 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8013c3e:	6839      	ldr	r1, [r7, #0]
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f000 fb5f 	bl	8014304 <USBD_CtlError>
      break;
 8013c46:	bf00      	nop
  }

  return ret;
 8013c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3710      	adds	r7, #16
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}
	...

08013c54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b084      	sub	sp, #16
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
 8013c5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013c62:	2300      	movs	r3, #0
 8013c64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013c66:	2300      	movs	r3, #0
 8013c68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	885b      	ldrh	r3, [r3, #2]
 8013c6e:	0a1b      	lsrs	r3, r3, #8
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	3b01      	subs	r3, #1
 8013c74:	2b0e      	cmp	r3, #14
 8013c76:	f200 8152 	bhi.w	8013f1e <USBD_GetDescriptor+0x2ca>
 8013c7a:	a201      	add	r2, pc, #4	; (adr r2, 8013c80 <USBD_GetDescriptor+0x2c>)
 8013c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c80:	08013cf1 	.word	0x08013cf1
 8013c84:	08013d09 	.word	0x08013d09
 8013c88:	08013d49 	.word	0x08013d49
 8013c8c:	08013f1f 	.word	0x08013f1f
 8013c90:	08013f1f 	.word	0x08013f1f
 8013c94:	08013ebf 	.word	0x08013ebf
 8013c98:	08013eeb 	.word	0x08013eeb
 8013c9c:	08013f1f 	.word	0x08013f1f
 8013ca0:	08013f1f 	.word	0x08013f1f
 8013ca4:	08013f1f 	.word	0x08013f1f
 8013ca8:	08013f1f 	.word	0x08013f1f
 8013cac:	08013f1f 	.word	0x08013f1f
 8013cb0:	08013f1f 	.word	0x08013f1f
 8013cb4:	08013f1f 	.word	0x08013f1f
 8013cb8:	08013cbd 	.word	0x08013cbd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cc2:	69db      	ldr	r3, [r3, #28]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d00b      	beq.n	8013ce0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cce:	69db      	ldr	r3, [r3, #28]
 8013cd0:	687a      	ldr	r2, [r7, #4]
 8013cd2:	7c12      	ldrb	r2, [r2, #16]
 8013cd4:	f107 0108 	add.w	r1, r7, #8
 8013cd8:	4610      	mov	r0, r2
 8013cda:	4798      	blx	r3
 8013cdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013cde:	e126      	b.n	8013f2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013ce0:	6839      	ldr	r1, [r7, #0]
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	f000 fb0e 	bl	8014304 <USBD_CtlError>
        err++;
 8013ce8:	7afb      	ldrb	r3, [r7, #11]
 8013cea:	3301      	adds	r3, #1
 8013cec:	72fb      	strb	r3, [r7, #11]
      break;
 8013cee:	e11e      	b.n	8013f2e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	687a      	ldr	r2, [r7, #4]
 8013cfa:	7c12      	ldrb	r2, [r2, #16]
 8013cfc:	f107 0108 	add.w	r1, r7, #8
 8013d00:	4610      	mov	r0, r2
 8013d02:	4798      	blx	r3
 8013d04:	60f8      	str	r0, [r7, #12]
      break;
 8013d06:	e112      	b.n	8013f2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	7c1b      	ldrb	r3, [r3, #16]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d10d      	bne.n	8013d2c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d18:	f107 0208 	add.w	r2, r7, #8
 8013d1c:	4610      	mov	r0, r2
 8013d1e:	4798      	blx	r3
 8013d20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	3301      	adds	r3, #1
 8013d26:	2202      	movs	r2, #2
 8013d28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013d2a:	e100      	b.n	8013f2e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d34:	f107 0208 	add.w	r2, r7, #8
 8013d38:	4610      	mov	r0, r2
 8013d3a:	4798      	blx	r3
 8013d3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	3301      	adds	r3, #1
 8013d42:	2202      	movs	r2, #2
 8013d44:	701a      	strb	r2, [r3, #0]
      break;
 8013d46:	e0f2      	b.n	8013f2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	885b      	ldrh	r3, [r3, #2]
 8013d4c:	b2db      	uxtb	r3, r3
 8013d4e:	2b05      	cmp	r3, #5
 8013d50:	f200 80ac 	bhi.w	8013eac <USBD_GetDescriptor+0x258>
 8013d54:	a201      	add	r2, pc, #4	; (adr r2, 8013d5c <USBD_GetDescriptor+0x108>)
 8013d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d5a:	bf00      	nop
 8013d5c:	08013d75 	.word	0x08013d75
 8013d60:	08013da9 	.word	0x08013da9
 8013d64:	08013ddd 	.word	0x08013ddd
 8013d68:	08013e11 	.word	0x08013e11
 8013d6c:	08013e45 	.word	0x08013e45
 8013d70:	08013e79 	.word	0x08013e79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d7a:	685b      	ldr	r3, [r3, #4]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d00b      	beq.n	8013d98 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d86:	685b      	ldr	r3, [r3, #4]
 8013d88:	687a      	ldr	r2, [r7, #4]
 8013d8a:	7c12      	ldrb	r2, [r2, #16]
 8013d8c:	f107 0108 	add.w	r1, r7, #8
 8013d90:	4610      	mov	r0, r2
 8013d92:	4798      	blx	r3
 8013d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d96:	e091      	b.n	8013ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013d98:	6839      	ldr	r1, [r7, #0]
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f000 fab2 	bl	8014304 <USBD_CtlError>
            err++;
 8013da0:	7afb      	ldrb	r3, [r7, #11]
 8013da2:	3301      	adds	r3, #1
 8013da4:	72fb      	strb	r3, [r7, #11]
          break;
 8013da6:	e089      	b.n	8013ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dae:	689b      	ldr	r3, [r3, #8]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d00b      	beq.n	8013dcc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dba:	689b      	ldr	r3, [r3, #8]
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	7c12      	ldrb	r2, [r2, #16]
 8013dc0:	f107 0108 	add.w	r1, r7, #8
 8013dc4:	4610      	mov	r0, r2
 8013dc6:	4798      	blx	r3
 8013dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013dca:	e077      	b.n	8013ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013dcc:	6839      	ldr	r1, [r7, #0]
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f000 fa98 	bl	8014304 <USBD_CtlError>
            err++;
 8013dd4:	7afb      	ldrb	r3, [r7, #11]
 8013dd6:	3301      	adds	r3, #1
 8013dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8013dda:	e06f      	b.n	8013ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013de2:	68db      	ldr	r3, [r3, #12]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d00b      	beq.n	8013e00 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dee:	68db      	ldr	r3, [r3, #12]
 8013df0:	687a      	ldr	r2, [r7, #4]
 8013df2:	7c12      	ldrb	r2, [r2, #16]
 8013df4:	f107 0108 	add.w	r1, r7, #8
 8013df8:	4610      	mov	r0, r2
 8013dfa:	4798      	blx	r3
 8013dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013dfe:	e05d      	b.n	8013ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e00:	6839      	ldr	r1, [r7, #0]
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f000 fa7e 	bl	8014304 <USBD_CtlError>
            err++;
 8013e08:	7afb      	ldrb	r3, [r7, #11]
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8013e0e:	e055      	b.n	8013ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e16:	691b      	ldr	r3, [r3, #16]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d00b      	beq.n	8013e34 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e22:	691b      	ldr	r3, [r3, #16]
 8013e24:	687a      	ldr	r2, [r7, #4]
 8013e26:	7c12      	ldrb	r2, [r2, #16]
 8013e28:	f107 0108 	add.w	r1, r7, #8
 8013e2c:	4610      	mov	r0, r2
 8013e2e:	4798      	blx	r3
 8013e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e32:	e043      	b.n	8013ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e34:	6839      	ldr	r1, [r7, #0]
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	f000 fa64 	bl	8014304 <USBD_CtlError>
            err++;
 8013e3c:	7afb      	ldrb	r3, [r7, #11]
 8013e3e:	3301      	adds	r3, #1
 8013e40:	72fb      	strb	r3, [r7, #11]
          break;
 8013e42:	e03b      	b.n	8013ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e4a:	695b      	ldr	r3, [r3, #20]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d00b      	beq.n	8013e68 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e56:	695b      	ldr	r3, [r3, #20]
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	7c12      	ldrb	r2, [r2, #16]
 8013e5c:	f107 0108 	add.w	r1, r7, #8
 8013e60:	4610      	mov	r0, r2
 8013e62:	4798      	blx	r3
 8013e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e66:	e029      	b.n	8013ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e68:	6839      	ldr	r1, [r7, #0]
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f000 fa4a 	bl	8014304 <USBD_CtlError>
            err++;
 8013e70:	7afb      	ldrb	r3, [r7, #11]
 8013e72:	3301      	adds	r3, #1
 8013e74:	72fb      	strb	r3, [r7, #11]
          break;
 8013e76:	e021      	b.n	8013ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e7e:	699b      	ldr	r3, [r3, #24]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d00b      	beq.n	8013e9c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e8a:	699b      	ldr	r3, [r3, #24]
 8013e8c:	687a      	ldr	r2, [r7, #4]
 8013e8e:	7c12      	ldrb	r2, [r2, #16]
 8013e90:	f107 0108 	add.w	r1, r7, #8
 8013e94:	4610      	mov	r0, r2
 8013e96:	4798      	blx	r3
 8013e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e9a:	e00f      	b.n	8013ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e9c:	6839      	ldr	r1, [r7, #0]
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f000 fa30 	bl	8014304 <USBD_CtlError>
            err++;
 8013ea4:	7afb      	ldrb	r3, [r7, #11]
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8013eaa:	e007      	b.n	8013ebc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013eac:	6839      	ldr	r1, [r7, #0]
 8013eae:	6878      	ldr	r0, [r7, #4]
 8013eb0:	f000 fa28 	bl	8014304 <USBD_CtlError>
          err++;
 8013eb4:	7afb      	ldrb	r3, [r7, #11]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013eba:	bf00      	nop
      }
      break;
 8013ebc:	e037      	b.n	8013f2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	7c1b      	ldrb	r3, [r3, #16]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d109      	bne.n	8013eda <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ece:	f107 0208 	add.w	r2, r7, #8
 8013ed2:	4610      	mov	r0, r2
 8013ed4:	4798      	blx	r3
 8013ed6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013ed8:	e029      	b.n	8013f2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013eda:	6839      	ldr	r1, [r7, #0]
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f000 fa11 	bl	8014304 <USBD_CtlError>
        err++;
 8013ee2:	7afb      	ldrb	r3, [r7, #11]
 8013ee4:	3301      	adds	r3, #1
 8013ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8013ee8:	e021      	b.n	8013f2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	7c1b      	ldrb	r3, [r3, #16]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d10d      	bne.n	8013f0e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013efa:	f107 0208 	add.w	r2, r7, #8
 8013efe:	4610      	mov	r0, r2
 8013f00:	4798      	blx	r3
 8013f02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	3301      	adds	r3, #1
 8013f08:	2207      	movs	r2, #7
 8013f0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013f0c:	e00f      	b.n	8013f2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013f0e:	6839      	ldr	r1, [r7, #0]
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f000 f9f7 	bl	8014304 <USBD_CtlError>
        err++;
 8013f16:	7afb      	ldrb	r3, [r7, #11]
 8013f18:	3301      	adds	r3, #1
 8013f1a:	72fb      	strb	r3, [r7, #11]
      break;
 8013f1c:	e007      	b.n	8013f2e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013f1e:	6839      	ldr	r1, [r7, #0]
 8013f20:	6878      	ldr	r0, [r7, #4]
 8013f22:	f000 f9ef 	bl	8014304 <USBD_CtlError>
      err++;
 8013f26:	7afb      	ldrb	r3, [r7, #11]
 8013f28:	3301      	adds	r3, #1
 8013f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8013f2c:	bf00      	nop
  }

  if (err != 0U)
 8013f2e:	7afb      	ldrb	r3, [r7, #11]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d11e      	bne.n	8013f72 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	88db      	ldrh	r3, [r3, #6]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d016      	beq.n	8013f6a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013f3c:	893b      	ldrh	r3, [r7, #8]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d00e      	beq.n	8013f60 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	88da      	ldrh	r2, [r3, #6]
 8013f46:	893b      	ldrh	r3, [r7, #8]
 8013f48:	4293      	cmp	r3, r2
 8013f4a:	bf28      	it	cs
 8013f4c:	4613      	movcs	r3, r2
 8013f4e:	b29b      	uxth	r3, r3
 8013f50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013f52:	893b      	ldrh	r3, [r7, #8]
 8013f54:	461a      	mov	r2, r3
 8013f56:	68f9      	ldr	r1, [r7, #12]
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f000 fa44 	bl	80143e6 <USBD_CtlSendData>
 8013f5e:	e009      	b.n	8013f74 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013f60:	6839      	ldr	r1, [r7, #0]
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f000 f9ce 	bl	8014304 <USBD_CtlError>
 8013f68:	e004      	b.n	8013f74 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013f6a:	6878      	ldr	r0, [r7, #4]
 8013f6c:	f000 fa78 	bl	8014460 <USBD_CtlSendStatus>
 8013f70:	e000      	b.n	8013f74 <USBD_GetDescriptor+0x320>
    return;
 8013f72:	bf00      	nop
  }
}
 8013f74:	3710      	adds	r7, #16
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}
 8013f7a:	bf00      	nop

08013f7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	889b      	ldrh	r3, [r3, #4]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d131      	bne.n	8013ff2 <USBD_SetAddress+0x76>
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	88db      	ldrh	r3, [r3, #6]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d12d      	bne.n	8013ff2 <USBD_SetAddress+0x76>
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	885b      	ldrh	r3, [r3, #2]
 8013f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8013f9c:	d829      	bhi.n	8013ff2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	885b      	ldrh	r3, [r3, #2]
 8013fa2:	b2db      	uxtb	r3, r3
 8013fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fa8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fb0:	b2db      	uxtb	r3, r3
 8013fb2:	2b03      	cmp	r3, #3
 8013fb4:	d104      	bne.n	8013fc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013fb6:	6839      	ldr	r1, [r7, #0]
 8013fb8:	6878      	ldr	r0, [r7, #4]
 8013fba:	f000 f9a3 	bl	8014304 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fbe:	e01d      	b.n	8013ffc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	7bfa      	ldrb	r2, [r7, #15]
 8013fc4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013fc8:	7bfb      	ldrb	r3, [r7, #15]
 8013fca:	4619      	mov	r1, r3
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f003 fdf6 	bl	8017bbe <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f000 fa44 	bl	8014460 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013fd8:	7bfb      	ldrb	r3, [r7, #15]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d004      	beq.n	8013fe8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	2202      	movs	r2, #2
 8013fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fe6:	e009      	b.n	8013ffc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2201      	movs	r2, #1
 8013fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ff0:	e004      	b.n	8013ffc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013ff2:	6839      	ldr	r1, [r7, #0]
 8013ff4:	6878      	ldr	r0, [r7, #4]
 8013ff6:	f000 f985 	bl	8014304 <USBD_CtlError>
  }
}
 8013ffa:	bf00      	nop
 8013ffc:	bf00      	nop
 8013ffe:	3710      	adds	r7, #16
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}

08014004 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b084      	sub	sp, #16
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801400e:	2300      	movs	r3, #0
 8014010:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	885b      	ldrh	r3, [r3, #2]
 8014016:	b2da      	uxtb	r2, r3
 8014018:	4b4c      	ldr	r3, [pc, #304]	; (801414c <USBD_SetConfig+0x148>)
 801401a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801401c:	4b4b      	ldr	r3, [pc, #300]	; (801414c <USBD_SetConfig+0x148>)
 801401e:	781b      	ldrb	r3, [r3, #0]
 8014020:	2b01      	cmp	r3, #1
 8014022:	d905      	bls.n	8014030 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014024:	6839      	ldr	r1, [r7, #0]
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f000 f96c 	bl	8014304 <USBD_CtlError>
    return USBD_FAIL;
 801402c:	2303      	movs	r3, #3
 801402e:	e088      	b.n	8014142 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014036:	b2db      	uxtb	r3, r3
 8014038:	2b02      	cmp	r3, #2
 801403a:	d002      	beq.n	8014042 <USBD_SetConfig+0x3e>
 801403c:	2b03      	cmp	r3, #3
 801403e:	d025      	beq.n	801408c <USBD_SetConfig+0x88>
 8014040:	e071      	b.n	8014126 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014042:	4b42      	ldr	r3, [pc, #264]	; (801414c <USBD_SetConfig+0x148>)
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d01c      	beq.n	8014084 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801404a:	4b40      	ldr	r3, [pc, #256]	; (801414c <USBD_SetConfig+0x148>)
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	461a      	mov	r2, r3
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014054:	4b3d      	ldr	r3, [pc, #244]	; (801414c <USBD_SetConfig+0x148>)
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	4619      	mov	r1, r3
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f7ff f91f 	bl	801329e <USBD_SetClassConfig>
 8014060:	4603      	mov	r3, r0
 8014062:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014064:	7bfb      	ldrb	r3, [r7, #15]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d004      	beq.n	8014074 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801406a:	6839      	ldr	r1, [r7, #0]
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f000 f949 	bl	8014304 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014072:	e065      	b.n	8014140 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	f000 f9f3 	bl	8014460 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2203      	movs	r2, #3
 801407e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014082:	e05d      	b.n	8014140 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f000 f9eb 	bl	8014460 <USBD_CtlSendStatus>
      break;
 801408a:	e059      	b.n	8014140 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801408c:	4b2f      	ldr	r3, [pc, #188]	; (801414c <USBD_SetConfig+0x148>)
 801408e:	781b      	ldrb	r3, [r3, #0]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d112      	bne.n	80140ba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2202      	movs	r2, #2
 8014098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801409c:	4b2b      	ldr	r3, [pc, #172]	; (801414c <USBD_SetConfig+0x148>)
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	461a      	mov	r2, r3
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80140a6:	4b29      	ldr	r3, [pc, #164]	; (801414c <USBD_SetConfig+0x148>)
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	4619      	mov	r1, r3
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f7ff f912 	bl	80132d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	f000 f9d4 	bl	8014460 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80140b8:	e042      	b.n	8014140 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80140ba:	4b24      	ldr	r3, [pc, #144]	; (801414c <USBD_SetConfig+0x148>)
 80140bc:	781b      	ldrb	r3, [r3, #0]
 80140be:	461a      	mov	r2, r3
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d02a      	beq.n	801411e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	685b      	ldr	r3, [r3, #4]
 80140cc:	b2db      	uxtb	r3, r3
 80140ce:	4619      	mov	r1, r3
 80140d0:	6878      	ldr	r0, [r7, #4]
 80140d2:	f7ff f900 	bl	80132d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80140d6:	4b1d      	ldr	r3, [pc, #116]	; (801414c <USBD_SetConfig+0x148>)
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	461a      	mov	r2, r3
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80140e0:	4b1a      	ldr	r3, [pc, #104]	; (801414c <USBD_SetConfig+0x148>)
 80140e2:	781b      	ldrb	r3, [r3, #0]
 80140e4:	4619      	mov	r1, r3
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f7ff f8d9 	bl	801329e <USBD_SetClassConfig>
 80140ec:	4603      	mov	r3, r0
 80140ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80140f0:	7bfb      	ldrb	r3, [r7, #15]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d00f      	beq.n	8014116 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80140f6:	6839      	ldr	r1, [r7, #0]
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f000 f903 	bl	8014304 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	685b      	ldr	r3, [r3, #4]
 8014102:	b2db      	uxtb	r3, r3
 8014104:	4619      	mov	r1, r3
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f7ff f8e5 	bl	80132d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2202      	movs	r2, #2
 8014110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014114:	e014      	b.n	8014140 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f000 f9a2 	bl	8014460 <USBD_CtlSendStatus>
      break;
 801411c:	e010      	b.n	8014140 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f000 f99e 	bl	8014460 <USBD_CtlSendStatus>
      break;
 8014124:	e00c      	b.n	8014140 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8014126:	6839      	ldr	r1, [r7, #0]
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f000 f8eb 	bl	8014304 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801412e:	4b07      	ldr	r3, [pc, #28]	; (801414c <USBD_SetConfig+0x148>)
 8014130:	781b      	ldrb	r3, [r3, #0]
 8014132:	4619      	mov	r1, r3
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f7ff f8ce 	bl	80132d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801413a:	2303      	movs	r3, #3
 801413c:	73fb      	strb	r3, [r7, #15]
      break;
 801413e:	bf00      	nop
  }

  return ret;
 8014140:	7bfb      	ldrb	r3, [r7, #15]
}
 8014142:	4618      	mov	r0, r3
 8014144:	3710      	adds	r7, #16
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}
 801414a:	bf00      	nop
 801414c:	20000200 	.word	0x20000200

08014150 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801415a:	683b      	ldr	r3, [r7, #0]
 801415c:	88db      	ldrh	r3, [r3, #6]
 801415e:	2b01      	cmp	r3, #1
 8014160:	d004      	beq.n	801416c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014162:	6839      	ldr	r1, [r7, #0]
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f000 f8cd 	bl	8014304 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801416a:	e023      	b.n	80141b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014172:	b2db      	uxtb	r3, r3
 8014174:	2b02      	cmp	r3, #2
 8014176:	dc02      	bgt.n	801417e <USBD_GetConfig+0x2e>
 8014178:	2b00      	cmp	r3, #0
 801417a:	dc03      	bgt.n	8014184 <USBD_GetConfig+0x34>
 801417c:	e015      	b.n	80141aa <USBD_GetConfig+0x5a>
 801417e:	2b03      	cmp	r3, #3
 8014180:	d00b      	beq.n	801419a <USBD_GetConfig+0x4a>
 8014182:	e012      	b.n	80141aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2200      	movs	r2, #0
 8014188:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	3308      	adds	r3, #8
 801418e:	2201      	movs	r2, #1
 8014190:	4619      	mov	r1, r3
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	f000 f927 	bl	80143e6 <USBD_CtlSendData>
        break;
 8014198:	e00c      	b.n	80141b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	3304      	adds	r3, #4
 801419e:	2201      	movs	r2, #1
 80141a0:	4619      	mov	r1, r3
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f000 f91f 	bl	80143e6 <USBD_CtlSendData>
        break;
 80141a8:	e004      	b.n	80141b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80141aa:	6839      	ldr	r1, [r7, #0]
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	f000 f8a9 	bl	8014304 <USBD_CtlError>
        break;
 80141b2:	bf00      	nop
}
 80141b4:	bf00      	nop
 80141b6:	3708      	adds	r7, #8
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
 80141c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	3b01      	subs	r3, #1
 80141d0:	2b02      	cmp	r3, #2
 80141d2:	d81e      	bhi.n	8014212 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	88db      	ldrh	r3, [r3, #6]
 80141d8:	2b02      	cmp	r3, #2
 80141da:	d004      	beq.n	80141e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80141dc:	6839      	ldr	r1, [r7, #0]
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f000 f890 	bl	8014304 <USBD_CtlError>
        break;
 80141e4:	e01a      	b.n	801421c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	2201      	movs	r2, #1
 80141ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d005      	beq.n	8014202 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	68db      	ldr	r3, [r3, #12]
 80141fa:	f043 0202 	orr.w	r2, r3, #2
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	330c      	adds	r3, #12
 8014206:	2202      	movs	r2, #2
 8014208:	4619      	mov	r1, r3
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f000 f8eb 	bl	80143e6 <USBD_CtlSendData>
      break;
 8014210:	e004      	b.n	801421c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014212:	6839      	ldr	r1, [r7, #0]
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f000 f875 	bl	8014304 <USBD_CtlError>
      break;
 801421a:	bf00      	nop
  }
}
 801421c:	bf00      	nop
 801421e:	3708      	adds	r7, #8
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	885b      	ldrh	r3, [r3, #2]
 8014232:	2b01      	cmp	r3, #1
 8014234:	d106      	bne.n	8014244 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2201      	movs	r2, #1
 801423a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f000 f90e 	bl	8014460 <USBD_CtlSendStatus>
  }
}
 8014244:	bf00      	nop
 8014246:	3708      	adds	r7, #8
 8014248:	46bd      	mov	sp, r7
 801424a:	bd80      	pop	{r7, pc}

0801424c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b082      	sub	sp, #8
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
 8014254:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801425c:	b2db      	uxtb	r3, r3
 801425e:	3b01      	subs	r3, #1
 8014260:	2b02      	cmp	r3, #2
 8014262:	d80b      	bhi.n	801427c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	885b      	ldrh	r3, [r3, #2]
 8014268:	2b01      	cmp	r3, #1
 801426a:	d10c      	bne.n	8014286 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2200      	movs	r2, #0
 8014270:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f000 f8f3 	bl	8014460 <USBD_CtlSendStatus>
      }
      break;
 801427a:	e004      	b.n	8014286 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801427c:	6839      	ldr	r1, [r7, #0]
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f000 f840 	bl	8014304 <USBD_CtlError>
      break;
 8014284:	e000      	b.n	8014288 <USBD_ClrFeature+0x3c>
      break;
 8014286:	bf00      	nop
  }
}
 8014288:	bf00      	nop
 801428a:	3708      	adds	r7, #8
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}

08014290 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b084      	sub	sp, #16
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	781a      	ldrb	r2, [r3, #0]
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	3301      	adds	r3, #1
 80142aa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	781a      	ldrb	r2, [r3, #0]
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	3301      	adds	r3, #1
 80142b8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80142ba:	68f8      	ldr	r0, [r7, #12]
 80142bc:	f7ff fa92 	bl	80137e4 <SWAPBYTE>
 80142c0:	4603      	mov	r3, r0
 80142c2:	461a      	mov	r2, r3
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	3301      	adds	r3, #1
 80142cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	3301      	adds	r3, #1
 80142d2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80142d4:	68f8      	ldr	r0, [r7, #12]
 80142d6:	f7ff fa85 	bl	80137e4 <SWAPBYTE>
 80142da:	4603      	mov	r3, r0
 80142dc:	461a      	mov	r2, r3
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	3301      	adds	r3, #1
 80142e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	3301      	adds	r3, #1
 80142ec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80142ee:	68f8      	ldr	r0, [r7, #12]
 80142f0:	f7ff fa78 	bl	80137e4 <SWAPBYTE>
 80142f4:	4603      	mov	r3, r0
 80142f6:	461a      	mov	r2, r3
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	80da      	strh	r2, [r3, #6]
}
 80142fc:	bf00      	nop
 80142fe:	3710      	adds	r7, #16
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801430e:	2180      	movs	r1, #128	; 0x80
 8014310:	6878      	ldr	r0, [r7, #4]
 8014312:	f003 fbea 	bl	8017aea <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014316:	2100      	movs	r1, #0
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f003 fbe6 	bl	8017aea <USBD_LL_StallEP>
}
 801431e:	bf00      	nop
 8014320:	3708      	adds	r7, #8
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}

08014326 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014326:	b580      	push	{r7, lr}
 8014328:	b086      	sub	sp, #24
 801432a:	af00      	add	r7, sp, #0
 801432c:	60f8      	str	r0, [r7, #12]
 801432e:	60b9      	str	r1, [r7, #8]
 8014330:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014332:	2300      	movs	r3, #0
 8014334:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d036      	beq.n	80143aa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014340:	6938      	ldr	r0, [r7, #16]
 8014342:	f000 f836 	bl	80143b2 <USBD_GetLen>
 8014346:	4603      	mov	r3, r0
 8014348:	3301      	adds	r3, #1
 801434a:	b29b      	uxth	r3, r3
 801434c:	005b      	lsls	r3, r3, #1
 801434e:	b29a      	uxth	r2, r3
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014354:	7dfb      	ldrb	r3, [r7, #23]
 8014356:	68ba      	ldr	r2, [r7, #8]
 8014358:	4413      	add	r3, r2
 801435a:	687a      	ldr	r2, [r7, #4]
 801435c:	7812      	ldrb	r2, [r2, #0]
 801435e:	701a      	strb	r2, [r3, #0]
  idx++;
 8014360:	7dfb      	ldrb	r3, [r7, #23]
 8014362:	3301      	adds	r3, #1
 8014364:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014366:	7dfb      	ldrb	r3, [r7, #23]
 8014368:	68ba      	ldr	r2, [r7, #8]
 801436a:	4413      	add	r3, r2
 801436c:	2203      	movs	r2, #3
 801436e:	701a      	strb	r2, [r3, #0]
  idx++;
 8014370:	7dfb      	ldrb	r3, [r7, #23]
 8014372:	3301      	adds	r3, #1
 8014374:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014376:	e013      	b.n	80143a0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014378:	7dfb      	ldrb	r3, [r7, #23]
 801437a:	68ba      	ldr	r2, [r7, #8]
 801437c:	4413      	add	r3, r2
 801437e:	693a      	ldr	r2, [r7, #16]
 8014380:	7812      	ldrb	r2, [r2, #0]
 8014382:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	3301      	adds	r3, #1
 8014388:	613b      	str	r3, [r7, #16]
    idx++;
 801438a:	7dfb      	ldrb	r3, [r7, #23]
 801438c:	3301      	adds	r3, #1
 801438e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014390:	7dfb      	ldrb	r3, [r7, #23]
 8014392:	68ba      	ldr	r2, [r7, #8]
 8014394:	4413      	add	r3, r2
 8014396:	2200      	movs	r2, #0
 8014398:	701a      	strb	r2, [r3, #0]
    idx++;
 801439a:	7dfb      	ldrb	r3, [r7, #23]
 801439c:	3301      	adds	r3, #1
 801439e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d1e7      	bne.n	8014378 <USBD_GetString+0x52>
 80143a8:	e000      	b.n	80143ac <USBD_GetString+0x86>
    return;
 80143aa:	bf00      	nop
  }
}
 80143ac:	3718      	adds	r7, #24
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}

080143b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80143b2:	b480      	push	{r7}
 80143b4:	b085      	sub	sp, #20
 80143b6:	af00      	add	r7, sp, #0
 80143b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80143ba:	2300      	movs	r3, #0
 80143bc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80143c2:	e005      	b.n	80143d0 <USBD_GetLen+0x1e>
  {
    len++;
 80143c4:	7bfb      	ldrb	r3, [r7, #15]
 80143c6:	3301      	adds	r3, #1
 80143c8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	3301      	adds	r3, #1
 80143ce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	781b      	ldrb	r3, [r3, #0]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d1f5      	bne.n	80143c4 <USBD_GetLen+0x12>
  }

  return len;
 80143d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80143da:	4618      	mov	r0, r3
 80143dc:	3714      	adds	r7, #20
 80143de:	46bd      	mov	sp, r7
 80143e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e4:	4770      	bx	lr

080143e6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80143e6:	b580      	push	{r7, lr}
 80143e8:	b084      	sub	sp, #16
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	60f8      	str	r0, [r7, #12]
 80143ee:	60b9      	str	r1, [r7, #8]
 80143f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	2202      	movs	r2, #2
 80143f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	687a      	ldr	r2, [r7, #4]
 80143fe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	687a      	ldr	r2, [r7, #4]
 8014404:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	68ba      	ldr	r2, [r7, #8]
 801440a:	2100      	movs	r1, #0
 801440c:	68f8      	ldr	r0, [r7, #12]
 801440e:	f003 fbf5 	bl	8017bfc <USBD_LL_Transmit>

  return USBD_OK;
 8014412:	2300      	movs	r3, #0
}
 8014414:	4618      	mov	r0, r3
 8014416:	3710      	adds	r7, #16
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b084      	sub	sp, #16
 8014420:	af00      	add	r7, sp, #0
 8014422:	60f8      	str	r0, [r7, #12]
 8014424:	60b9      	str	r1, [r7, #8]
 8014426:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	68ba      	ldr	r2, [r7, #8]
 801442c:	2100      	movs	r1, #0
 801442e:	68f8      	ldr	r0, [r7, #12]
 8014430:	f003 fbe4 	bl	8017bfc <USBD_LL_Transmit>

  return USBD_OK;
 8014434:	2300      	movs	r3, #0
}
 8014436:	4618      	mov	r0, r3
 8014438:	3710      	adds	r7, #16
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}

0801443e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801443e:	b580      	push	{r7, lr}
 8014440:	b084      	sub	sp, #16
 8014442:	af00      	add	r7, sp, #0
 8014444:	60f8      	str	r0, [r7, #12]
 8014446:	60b9      	str	r1, [r7, #8]
 8014448:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	68ba      	ldr	r2, [r7, #8]
 801444e:	2100      	movs	r1, #0
 8014450:	68f8      	ldr	r0, [r7, #12]
 8014452:	f003 fbf4 	bl	8017c3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014456:	2300      	movs	r3, #0
}
 8014458:	4618      	mov	r0, r3
 801445a:	3710      	adds	r7, #16
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}

08014460 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b082      	sub	sp, #8
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2204      	movs	r2, #4
 801446c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014470:	2300      	movs	r3, #0
 8014472:	2200      	movs	r2, #0
 8014474:	2100      	movs	r1, #0
 8014476:	6878      	ldr	r0, [r7, #4]
 8014478:	f003 fbc0 	bl	8017bfc <USBD_LL_Transmit>

  return USBD_OK;
 801447c:	2300      	movs	r3, #0
}
 801447e:	4618      	mov	r0, r3
 8014480:	3708      	adds	r7, #8
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}

08014486 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014486:	b580      	push	{r7, lr}
 8014488:	b082      	sub	sp, #8
 801448a:	af00      	add	r7, sp, #0
 801448c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2205      	movs	r2, #5
 8014492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014496:	2300      	movs	r3, #0
 8014498:	2200      	movs	r2, #0
 801449a:	2100      	movs	r1, #0
 801449c:	6878      	ldr	r0, [r7, #4]
 801449e:	f003 fbce 	bl	8017c3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80144a2:	2300      	movs	r3, #0
}
 80144a4:	4618      	mov	r0, r3
 80144a6:	3708      	adds	r7, #8
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd80      	pop	{r7, pc}

080144ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b084      	sub	sp, #16
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	4603      	mov	r3, r0
 80144b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80144b6:	79fb      	ldrb	r3, [r7, #7]
 80144b8:	4a08      	ldr	r2, [pc, #32]	; (80144dc <disk_status+0x30>)
 80144ba:	009b      	lsls	r3, r3, #2
 80144bc:	4413      	add	r3, r2
 80144be:	685b      	ldr	r3, [r3, #4]
 80144c0:	685b      	ldr	r3, [r3, #4]
 80144c2:	79fa      	ldrb	r2, [r7, #7]
 80144c4:	4905      	ldr	r1, [pc, #20]	; (80144dc <disk_status+0x30>)
 80144c6:	440a      	add	r2, r1
 80144c8:	7a12      	ldrb	r2, [r2, #8]
 80144ca:	4610      	mov	r0, r2
 80144cc:	4798      	blx	r3
 80144ce:	4603      	mov	r3, r0
 80144d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80144d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	3710      	adds	r7, #16
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd80      	pop	{r7, pc}
 80144dc:	2000040c 	.word	0x2000040c

080144e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b084      	sub	sp, #16
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	4603      	mov	r3, r0
 80144e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80144ea:	2300      	movs	r3, #0
 80144ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80144ee:	79fb      	ldrb	r3, [r7, #7]
 80144f0:	4a0d      	ldr	r2, [pc, #52]	; (8014528 <disk_initialize+0x48>)
 80144f2:	5cd3      	ldrb	r3, [r2, r3]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d111      	bne.n	801451c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80144f8:	79fb      	ldrb	r3, [r7, #7]
 80144fa:	4a0b      	ldr	r2, [pc, #44]	; (8014528 <disk_initialize+0x48>)
 80144fc:	2101      	movs	r1, #1
 80144fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014500:	79fb      	ldrb	r3, [r7, #7]
 8014502:	4a09      	ldr	r2, [pc, #36]	; (8014528 <disk_initialize+0x48>)
 8014504:	009b      	lsls	r3, r3, #2
 8014506:	4413      	add	r3, r2
 8014508:	685b      	ldr	r3, [r3, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	79fa      	ldrb	r2, [r7, #7]
 801450e:	4906      	ldr	r1, [pc, #24]	; (8014528 <disk_initialize+0x48>)
 8014510:	440a      	add	r2, r1
 8014512:	7a12      	ldrb	r2, [r2, #8]
 8014514:	4610      	mov	r0, r2
 8014516:	4798      	blx	r3
 8014518:	4603      	mov	r3, r0
 801451a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801451c:	7bfb      	ldrb	r3, [r7, #15]
}
 801451e:	4618      	mov	r0, r3
 8014520:	3710      	adds	r7, #16
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	2000040c 	.word	0x2000040c

0801452c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801452c:	b590      	push	{r4, r7, lr}
 801452e:	b087      	sub	sp, #28
 8014530:	af00      	add	r7, sp, #0
 8014532:	60b9      	str	r1, [r7, #8]
 8014534:	607a      	str	r2, [r7, #4]
 8014536:	603b      	str	r3, [r7, #0]
 8014538:	4603      	mov	r3, r0
 801453a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801453c:	7bfb      	ldrb	r3, [r7, #15]
 801453e:	4a0a      	ldr	r2, [pc, #40]	; (8014568 <disk_read+0x3c>)
 8014540:	009b      	lsls	r3, r3, #2
 8014542:	4413      	add	r3, r2
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	689c      	ldr	r4, [r3, #8]
 8014548:	7bfb      	ldrb	r3, [r7, #15]
 801454a:	4a07      	ldr	r2, [pc, #28]	; (8014568 <disk_read+0x3c>)
 801454c:	4413      	add	r3, r2
 801454e:	7a18      	ldrb	r0, [r3, #8]
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	687a      	ldr	r2, [r7, #4]
 8014554:	68b9      	ldr	r1, [r7, #8]
 8014556:	47a0      	blx	r4
 8014558:	4603      	mov	r3, r0
 801455a:	75fb      	strb	r3, [r7, #23]
  return res;
 801455c:	7dfb      	ldrb	r3, [r7, #23]
}
 801455e:	4618      	mov	r0, r3
 8014560:	371c      	adds	r7, #28
 8014562:	46bd      	mov	sp, r7
 8014564:	bd90      	pop	{r4, r7, pc}
 8014566:	bf00      	nop
 8014568:	2000040c 	.word	0x2000040c

0801456c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801456c:	b590      	push	{r4, r7, lr}
 801456e:	b087      	sub	sp, #28
 8014570:	af00      	add	r7, sp, #0
 8014572:	60b9      	str	r1, [r7, #8]
 8014574:	607a      	str	r2, [r7, #4]
 8014576:	603b      	str	r3, [r7, #0]
 8014578:	4603      	mov	r3, r0
 801457a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801457c:	7bfb      	ldrb	r3, [r7, #15]
 801457e:	4a0a      	ldr	r2, [pc, #40]	; (80145a8 <disk_write+0x3c>)
 8014580:	009b      	lsls	r3, r3, #2
 8014582:	4413      	add	r3, r2
 8014584:	685b      	ldr	r3, [r3, #4]
 8014586:	68dc      	ldr	r4, [r3, #12]
 8014588:	7bfb      	ldrb	r3, [r7, #15]
 801458a:	4a07      	ldr	r2, [pc, #28]	; (80145a8 <disk_write+0x3c>)
 801458c:	4413      	add	r3, r2
 801458e:	7a18      	ldrb	r0, [r3, #8]
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	687a      	ldr	r2, [r7, #4]
 8014594:	68b9      	ldr	r1, [r7, #8]
 8014596:	47a0      	blx	r4
 8014598:	4603      	mov	r3, r0
 801459a:	75fb      	strb	r3, [r7, #23]
  return res;
 801459c:	7dfb      	ldrb	r3, [r7, #23]
}
 801459e:	4618      	mov	r0, r3
 80145a0:	371c      	adds	r7, #28
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd90      	pop	{r4, r7, pc}
 80145a6:	bf00      	nop
 80145a8:	2000040c 	.word	0x2000040c

080145ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	4603      	mov	r3, r0
 80145b4:	603a      	str	r2, [r7, #0]
 80145b6:	71fb      	strb	r3, [r7, #7]
 80145b8:	460b      	mov	r3, r1
 80145ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80145bc:	79fb      	ldrb	r3, [r7, #7]
 80145be:	4a09      	ldr	r2, [pc, #36]	; (80145e4 <disk_ioctl+0x38>)
 80145c0:	009b      	lsls	r3, r3, #2
 80145c2:	4413      	add	r3, r2
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	691b      	ldr	r3, [r3, #16]
 80145c8:	79fa      	ldrb	r2, [r7, #7]
 80145ca:	4906      	ldr	r1, [pc, #24]	; (80145e4 <disk_ioctl+0x38>)
 80145cc:	440a      	add	r2, r1
 80145ce:	7a10      	ldrb	r0, [r2, #8]
 80145d0:	79b9      	ldrb	r1, [r7, #6]
 80145d2:	683a      	ldr	r2, [r7, #0]
 80145d4:	4798      	blx	r3
 80145d6:	4603      	mov	r3, r0
 80145d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80145da:	7bfb      	ldrb	r3, [r7, #15]
}
 80145dc:	4618      	mov	r0, r3
 80145de:	3710      	adds	r7, #16
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}
 80145e4:	2000040c 	.word	0x2000040c

080145e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80145e8:	b480      	push	{r7}
 80145ea:	b085      	sub	sp, #20
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	3301      	adds	r3, #1
 80145f4:	781b      	ldrb	r3, [r3, #0]
 80145f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80145f8:	89fb      	ldrh	r3, [r7, #14]
 80145fa:	021b      	lsls	r3, r3, #8
 80145fc:	b21a      	sxth	r2, r3
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	781b      	ldrb	r3, [r3, #0]
 8014602:	b21b      	sxth	r3, r3
 8014604:	4313      	orrs	r3, r2
 8014606:	b21b      	sxth	r3, r3
 8014608:	81fb      	strh	r3, [r7, #14]
	return rv;
 801460a:	89fb      	ldrh	r3, [r7, #14]
}
 801460c:	4618      	mov	r0, r3
 801460e:	3714      	adds	r7, #20
 8014610:	46bd      	mov	sp, r7
 8014612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014616:	4770      	bx	lr

08014618 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014618:	b480      	push	{r7}
 801461a:	b085      	sub	sp, #20
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	3303      	adds	r3, #3
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	021b      	lsls	r3, r3, #8
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	3202      	adds	r2, #2
 8014630:	7812      	ldrb	r2, [r2, #0]
 8014632:	4313      	orrs	r3, r2
 8014634:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	021b      	lsls	r3, r3, #8
 801463a:	687a      	ldr	r2, [r7, #4]
 801463c:	3201      	adds	r2, #1
 801463e:	7812      	ldrb	r2, [r2, #0]
 8014640:	4313      	orrs	r3, r2
 8014642:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	021b      	lsls	r3, r3, #8
 8014648:	687a      	ldr	r2, [r7, #4]
 801464a:	7812      	ldrb	r2, [r2, #0]
 801464c:	4313      	orrs	r3, r2
 801464e:	60fb      	str	r3, [r7, #12]
	return rv;
 8014650:	68fb      	ldr	r3, [r7, #12]
}
 8014652:	4618      	mov	r0, r3
 8014654:	3714      	adds	r7, #20
 8014656:	46bd      	mov	sp, r7
 8014658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465c:	4770      	bx	lr

0801465e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801465e:	b480      	push	{r7}
 8014660:	b083      	sub	sp, #12
 8014662:	af00      	add	r7, sp, #0
 8014664:	6078      	str	r0, [r7, #4]
 8014666:	460b      	mov	r3, r1
 8014668:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	1c5a      	adds	r2, r3, #1
 801466e:	607a      	str	r2, [r7, #4]
 8014670:	887a      	ldrh	r2, [r7, #2]
 8014672:	b2d2      	uxtb	r2, r2
 8014674:	701a      	strb	r2, [r3, #0]
 8014676:	887b      	ldrh	r3, [r7, #2]
 8014678:	0a1b      	lsrs	r3, r3, #8
 801467a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	1c5a      	adds	r2, r3, #1
 8014680:	607a      	str	r2, [r7, #4]
 8014682:	887a      	ldrh	r2, [r7, #2]
 8014684:	b2d2      	uxtb	r2, r2
 8014686:	701a      	strb	r2, [r3, #0]
}
 8014688:	bf00      	nop
 801468a:	370c      	adds	r7, #12
 801468c:	46bd      	mov	sp, r7
 801468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014692:	4770      	bx	lr

08014694 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014694:	b480      	push	{r7}
 8014696:	b083      	sub	sp, #12
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
 801469c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	1c5a      	adds	r2, r3, #1
 80146a2:	607a      	str	r2, [r7, #4]
 80146a4:	683a      	ldr	r2, [r7, #0]
 80146a6:	b2d2      	uxtb	r2, r2
 80146a8:	701a      	strb	r2, [r3, #0]
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	0a1b      	lsrs	r3, r3, #8
 80146ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	1c5a      	adds	r2, r3, #1
 80146b4:	607a      	str	r2, [r7, #4]
 80146b6:	683a      	ldr	r2, [r7, #0]
 80146b8:	b2d2      	uxtb	r2, r2
 80146ba:	701a      	strb	r2, [r3, #0]
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	0a1b      	lsrs	r3, r3, #8
 80146c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	1c5a      	adds	r2, r3, #1
 80146c6:	607a      	str	r2, [r7, #4]
 80146c8:	683a      	ldr	r2, [r7, #0]
 80146ca:	b2d2      	uxtb	r2, r2
 80146cc:	701a      	strb	r2, [r3, #0]
 80146ce:	683b      	ldr	r3, [r7, #0]
 80146d0:	0a1b      	lsrs	r3, r3, #8
 80146d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	1c5a      	adds	r2, r3, #1
 80146d8:	607a      	str	r2, [r7, #4]
 80146da:	683a      	ldr	r2, [r7, #0]
 80146dc:	b2d2      	uxtb	r2, r2
 80146de:	701a      	strb	r2, [r3, #0]
}
 80146e0:	bf00      	nop
 80146e2:	370c      	adds	r7, #12
 80146e4:	46bd      	mov	sp, r7
 80146e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ea:	4770      	bx	lr

080146ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80146ec:	b480      	push	{r7}
 80146ee:	b087      	sub	sp, #28
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	60f8      	str	r0, [r7, #12]
 80146f4:	60b9      	str	r1, [r7, #8]
 80146f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d00d      	beq.n	8014722 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014706:	693a      	ldr	r2, [r7, #16]
 8014708:	1c53      	adds	r3, r2, #1
 801470a:	613b      	str	r3, [r7, #16]
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	1c59      	adds	r1, r3, #1
 8014710:	6179      	str	r1, [r7, #20]
 8014712:	7812      	ldrb	r2, [r2, #0]
 8014714:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	3b01      	subs	r3, #1
 801471a:	607b      	str	r3, [r7, #4]
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d1f1      	bne.n	8014706 <mem_cpy+0x1a>
	}
}
 8014722:	bf00      	nop
 8014724:	371c      	adds	r7, #28
 8014726:	46bd      	mov	sp, r7
 8014728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472c:	4770      	bx	lr

0801472e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801472e:	b480      	push	{r7}
 8014730:	b087      	sub	sp, #28
 8014732:	af00      	add	r7, sp, #0
 8014734:	60f8      	str	r0, [r7, #12]
 8014736:	60b9      	str	r1, [r7, #8]
 8014738:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801473e:	697b      	ldr	r3, [r7, #20]
 8014740:	1c5a      	adds	r2, r3, #1
 8014742:	617a      	str	r2, [r7, #20]
 8014744:	68ba      	ldr	r2, [r7, #8]
 8014746:	b2d2      	uxtb	r2, r2
 8014748:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	3b01      	subs	r3, #1
 801474e:	607b      	str	r3, [r7, #4]
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d1f3      	bne.n	801473e <mem_set+0x10>
}
 8014756:	bf00      	nop
 8014758:	bf00      	nop
 801475a:	371c      	adds	r7, #28
 801475c:	46bd      	mov	sp, r7
 801475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014762:	4770      	bx	lr

08014764 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014764:	b480      	push	{r7}
 8014766:	b089      	sub	sp, #36	; 0x24
 8014768:	af00      	add	r7, sp, #0
 801476a:	60f8      	str	r0, [r7, #12]
 801476c:	60b9      	str	r1, [r7, #8]
 801476e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	61fb      	str	r3, [r7, #28]
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014778:	2300      	movs	r3, #0
 801477a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801477c:	69fb      	ldr	r3, [r7, #28]
 801477e:	1c5a      	adds	r2, r3, #1
 8014780:	61fa      	str	r2, [r7, #28]
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	4619      	mov	r1, r3
 8014786:	69bb      	ldr	r3, [r7, #24]
 8014788:	1c5a      	adds	r2, r3, #1
 801478a:	61ba      	str	r2, [r7, #24]
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	1acb      	subs	r3, r1, r3
 8014790:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	3b01      	subs	r3, #1
 8014796:	607b      	str	r3, [r7, #4]
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d002      	beq.n	80147a4 <mem_cmp+0x40>
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d0eb      	beq.n	801477c <mem_cmp+0x18>

	return r;
 80147a4:	697b      	ldr	r3, [r7, #20]
}
 80147a6:	4618      	mov	r0, r3
 80147a8:	3724      	adds	r7, #36	; 0x24
 80147aa:	46bd      	mov	sp, r7
 80147ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b0:	4770      	bx	lr

080147b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80147b2:	b480      	push	{r7}
 80147b4:	b083      	sub	sp, #12
 80147b6:	af00      	add	r7, sp, #0
 80147b8:	6078      	str	r0, [r7, #4]
 80147ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80147bc:	e002      	b.n	80147c4 <chk_chr+0x12>
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	3301      	adds	r3, #1
 80147c2:	607b      	str	r3, [r7, #4]
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d005      	beq.n	80147d8 <chk_chr+0x26>
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	781b      	ldrb	r3, [r3, #0]
 80147d0:	461a      	mov	r2, r3
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	4293      	cmp	r3, r2
 80147d6:	d1f2      	bne.n	80147be <chk_chr+0xc>
	return *str;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	781b      	ldrb	r3, [r3, #0]
}
 80147dc:	4618      	mov	r0, r3
 80147de:	370c      	adds	r7, #12
 80147e0:	46bd      	mov	sp, r7
 80147e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e6:	4770      	bx	lr

080147e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b086      	sub	sp, #24
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80147f0:	2300      	movs	r3, #0
 80147f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	78db      	ldrb	r3, [r3, #3]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d034      	beq.n	8014866 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014800:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	7858      	ldrb	r0, [r3, #1]
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801480c:	2301      	movs	r3, #1
 801480e:	697a      	ldr	r2, [r7, #20]
 8014810:	f7ff feac 	bl	801456c <disk_write>
 8014814:	4603      	mov	r3, r0
 8014816:	2b00      	cmp	r3, #0
 8014818:	d002      	beq.n	8014820 <sync_window+0x38>
			res = FR_DISK_ERR;
 801481a:	2301      	movs	r3, #1
 801481c:	73fb      	strb	r3, [r7, #15]
 801481e:	e022      	b.n	8014866 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2200      	movs	r2, #0
 8014824:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801482a:	697a      	ldr	r2, [r7, #20]
 801482c:	1ad2      	subs	r2, r2, r3
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	6a1b      	ldr	r3, [r3, #32]
 8014832:	429a      	cmp	r2, r3
 8014834:	d217      	bcs.n	8014866 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	789b      	ldrb	r3, [r3, #2]
 801483a:	613b      	str	r3, [r7, #16]
 801483c:	e010      	b.n	8014860 <sync_window+0x78>
					wsect += fs->fsize;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	6a1b      	ldr	r3, [r3, #32]
 8014842:	697a      	ldr	r2, [r7, #20]
 8014844:	4413      	add	r3, r2
 8014846:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	7858      	ldrb	r0, [r3, #1]
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014852:	2301      	movs	r3, #1
 8014854:	697a      	ldr	r2, [r7, #20]
 8014856:	f7ff fe89 	bl	801456c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	3b01      	subs	r3, #1
 801485e:	613b      	str	r3, [r7, #16]
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	2b01      	cmp	r3, #1
 8014864:	d8eb      	bhi.n	801483e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8014866:	7bfb      	ldrb	r3, [r7, #15]
}
 8014868:	4618      	mov	r0, r3
 801486a:	3718      	adds	r7, #24
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}

08014870 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b084      	sub	sp, #16
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801487a:	2300      	movs	r3, #0
 801487c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014882:	683a      	ldr	r2, [r7, #0]
 8014884:	429a      	cmp	r2, r3
 8014886:	d01b      	beq.n	80148c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f7ff ffad 	bl	80147e8 <sync_window>
 801488e:	4603      	mov	r3, r0
 8014890:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014892:	7bfb      	ldrb	r3, [r7, #15]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d113      	bne.n	80148c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	7858      	ldrb	r0, [r3, #1]
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80148a2:	2301      	movs	r3, #1
 80148a4:	683a      	ldr	r2, [r7, #0]
 80148a6:	f7ff fe41 	bl	801452c <disk_read>
 80148aa:	4603      	mov	r3, r0
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d004      	beq.n	80148ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80148b0:	f04f 33ff 	mov.w	r3, #4294967295
 80148b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80148b6:	2301      	movs	r3, #1
 80148b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	683a      	ldr	r2, [r7, #0]
 80148be:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80148c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80148c2:	4618      	mov	r0, r3
 80148c4:	3710      	adds	r7, #16
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}
	...

080148cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b084      	sub	sp, #16
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80148d4:	6878      	ldr	r0, [r7, #4]
 80148d6:	f7ff ff87 	bl	80147e8 <sync_window>
 80148da:	4603      	mov	r3, r0
 80148dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80148de:	7bfb      	ldrb	r3, [r7, #15]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d159      	bne.n	8014998 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	781b      	ldrb	r3, [r3, #0]
 80148e8:	2b03      	cmp	r3, #3
 80148ea:	d149      	bne.n	8014980 <sync_fs+0xb4>
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	791b      	ldrb	r3, [r3, #4]
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d145      	bne.n	8014980 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	899b      	ldrh	r3, [r3, #12]
 80148fe:	461a      	mov	r2, r3
 8014900:	2100      	movs	r1, #0
 8014902:	f7ff ff14 	bl	801472e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	3338      	adds	r3, #56	; 0x38
 801490a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801490e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014912:	4618      	mov	r0, r3
 8014914:	f7ff fea3 	bl	801465e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	3338      	adds	r3, #56	; 0x38
 801491c:	4921      	ldr	r1, [pc, #132]	; (80149a4 <sync_fs+0xd8>)
 801491e:	4618      	mov	r0, r3
 8014920:	f7ff feb8 	bl	8014694 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	3338      	adds	r3, #56	; 0x38
 8014928:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801492c:	491e      	ldr	r1, [pc, #120]	; (80149a8 <sync_fs+0xdc>)
 801492e:	4618      	mov	r0, r3
 8014930:	f7ff feb0 	bl	8014694 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	3338      	adds	r3, #56	; 0x38
 8014938:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	699b      	ldr	r3, [r3, #24]
 8014940:	4619      	mov	r1, r3
 8014942:	4610      	mov	r0, r2
 8014944:	f7ff fea6 	bl	8014694 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	3338      	adds	r3, #56	; 0x38
 801494c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	695b      	ldr	r3, [r3, #20]
 8014954:	4619      	mov	r1, r3
 8014956:	4610      	mov	r0, r2
 8014958:	f7ff fe9c 	bl	8014694 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014960:	1c5a      	adds	r2, r3, #1
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	7858      	ldrb	r0, [r3, #1]
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014974:	2301      	movs	r3, #1
 8014976:	f7ff fdf9 	bl	801456c <disk_write>
			fs->fsi_flag = 0;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	2200      	movs	r2, #0
 801497e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	785b      	ldrb	r3, [r3, #1]
 8014984:	2200      	movs	r2, #0
 8014986:	2100      	movs	r1, #0
 8014988:	4618      	mov	r0, r3
 801498a:	f7ff fe0f 	bl	80145ac <disk_ioctl>
 801498e:	4603      	mov	r3, r0
 8014990:	2b00      	cmp	r3, #0
 8014992:	d001      	beq.n	8014998 <sync_fs+0xcc>
 8014994:	2301      	movs	r3, #1
 8014996:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014998:	7bfb      	ldrb	r3, [r7, #15]
}
 801499a:	4618      	mov	r0, r3
 801499c:	3710      	adds	r7, #16
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}
 80149a2:	bf00      	nop
 80149a4:	41615252 	.word	0x41615252
 80149a8:	61417272 	.word	0x61417272

080149ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80149ac:	b480      	push	{r7}
 80149ae:	b083      	sub	sp, #12
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	3b02      	subs	r3, #2
 80149ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	69db      	ldr	r3, [r3, #28]
 80149c0:	3b02      	subs	r3, #2
 80149c2:	683a      	ldr	r2, [r7, #0]
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d301      	bcc.n	80149cc <clust2sect+0x20>
 80149c8:	2300      	movs	r3, #0
 80149ca:	e008      	b.n	80149de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	895b      	ldrh	r3, [r3, #10]
 80149d0:	461a      	mov	r2, r3
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	fb03 f202 	mul.w	r2, r3, r2
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149dc:	4413      	add	r3, r2
}
 80149de:	4618      	mov	r0, r3
 80149e0:	370c      	adds	r7, #12
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr

080149ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80149ea:	b580      	push	{r7, lr}
 80149ec:	b086      	sub	sp, #24
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
 80149f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	d904      	bls.n	8014a0a <get_fat+0x20>
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	69db      	ldr	r3, [r3, #28]
 8014a04:	683a      	ldr	r2, [r7, #0]
 8014a06:	429a      	cmp	r2, r3
 8014a08:	d302      	bcc.n	8014a10 <get_fat+0x26>
		val = 1;	/* Internal error */
 8014a0a:	2301      	movs	r3, #1
 8014a0c:	617b      	str	r3, [r7, #20]
 8014a0e:	e0bb      	b.n	8014b88 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014a10:	f04f 33ff 	mov.w	r3, #4294967295
 8014a14:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	781b      	ldrb	r3, [r3, #0]
 8014a1a:	2b03      	cmp	r3, #3
 8014a1c:	f000 8083 	beq.w	8014b26 <get_fat+0x13c>
 8014a20:	2b03      	cmp	r3, #3
 8014a22:	f300 80a7 	bgt.w	8014b74 <get_fat+0x18a>
 8014a26:	2b01      	cmp	r3, #1
 8014a28:	d002      	beq.n	8014a30 <get_fat+0x46>
 8014a2a:	2b02      	cmp	r3, #2
 8014a2c:	d056      	beq.n	8014adc <get_fat+0xf2>
 8014a2e:	e0a1      	b.n	8014b74 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	60fb      	str	r3, [r7, #12]
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	085b      	lsrs	r3, r3, #1
 8014a38:	68fa      	ldr	r2, [r7, #12]
 8014a3a:	4413      	add	r3, r2
 8014a3c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014a3e:	693b      	ldr	r3, [r7, #16]
 8014a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	899b      	ldrh	r3, [r3, #12]
 8014a46:	4619      	mov	r1, r3
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8014a4e:	4413      	add	r3, r2
 8014a50:	4619      	mov	r1, r3
 8014a52:	6938      	ldr	r0, [r7, #16]
 8014a54:	f7ff ff0c 	bl	8014870 <move_window>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	f040 808d 	bne.w	8014b7a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	1c5a      	adds	r2, r3, #1
 8014a64:	60fa      	str	r2, [r7, #12]
 8014a66:	693a      	ldr	r2, [r7, #16]
 8014a68:	8992      	ldrh	r2, [r2, #12]
 8014a6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8014a6e:	fb02 f201 	mul.w	r2, r2, r1
 8014a72:	1a9b      	subs	r3, r3, r2
 8014a74:	693a      	ldr	r2, [r7, #16]
 8014a76:	4413      	add	r3, r2
 8014a78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014a7c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014a7e:	693b      	ldr	r3, [r7, #16]
 8014a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	899b      	ldrh	r3, [r3, #12]
 8014a86:	4619      	mov	r1, r3
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8014a8e:	4413      	add	r3, r2
 8014a90:	4619      	mov	r1, r3
 8014a92:	6938      	ldr	r0, [r7, #16]
 8014a94:	f7ff feec 	bl	8014870 <move_window>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d16f      	bne.n	8014b7e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014a9e:	693b      	ldr	r3, [r7, #16]
 8014aa0:	899b      	ldrh	r3, [r3, #12]
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8014aaa:	fb02 f201 	mul.w	r2, r2, r1
 8014aae:	1a9b      	subs	r3, r3, r2
 8014ab0:	693a      	ldr	r2, [r7, #16]
 8014ab2:	4413      	add	r3, r2
 8014ab4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014ab8:	021b      	lsls	r3, r3, #8
 8014aba:	461a      	mov	r2, r3
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	4313      	orrs	r3, r2
 8014ac0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	f003 0301 	and.w	r3, r3, #1
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d002      	beq.n	8014ad2 <get_fat+0xe8>
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	091b      	lsrs	r3, r3, #4
 8014ad0:	e002      	b.n	8014ad8 <get_fat+0xee>
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014ad8:	617b      	str	r3, [r7, #20]
			break;
 8014ada:	e055      	b.n	8014b88 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014adc:	693b      	ldr	r3, [r7, #16]
 8014ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	899b      	ldrh	r3, [r3, #12]
 8014ae4:	085b      	lsrs	r3, r3, #1
 8014ae6:	b29b      	uxth	r3, r3
 8014ae8:	4619      	mov	r1, r3
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	fbb3 f3f1 	udiv	r3, r3, r1
 8014af0:	4413      	add	r3, r2
 8014af2:	4619      	mov	r1, r3
 8014af4:	6938      	ldr	r0, [r7, #16]
 8014af6:	f7ff febb 	bl	8014870 <move_window>
 8014afa:	4603      	mov	r3, r0
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d140      	bne.n	8014b82 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014b00:	693b      	ldr	r3, [r7, #16]
 8014b02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	005b      	lsls	r3, r3, #1
 8014b0a:	693a      	ldr	r2, [r7, #16]
 8014b0c:	8992      	ldrh	r2, [r2, #12]
 8014b0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8014b12:	fb02 f200 	mul.w	r2, r2, r0
 8014b16:	1a9b      	subs	r3, r3, r2
 8014b18:	440b      	add	r3, r1
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f7ff fd64 	bl	80145e8 <ld_word>
 8014b20:	4603      	mov	r3, r0
 8014b22:	617b      	str	r3, [r7, #20]
			break;
 8014b24:	e030      	b.n	8014b88 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014b26:	693b      	ldr	r3, [r7, #16]
 8014b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	899b      	ldrh	r3, [r3, #12]
 8014b2e:	089b      	lsrs	r3, r3, #2
 8014b30:	b29b      	uxth	r3, r3
 8014b32:	4619      	mov	r1, r3
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b3a:	4413      	add	r3, r2
 8014b3c:	4619      	mov	r1, r3
 8014b3e:	6938      	ldr	r0, [r7, #16]
 8014b40:	f7ff fe96 	bl	8014870 <move_window>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d11d      	bne.n	8014b86 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	693a      	ldr	r2, [r7, #16]
 8014b56:	8992      	ldrh	r2, [r2, #12]
 8014b58:	fbb3 f0f2 	udiv	r0, r3, r2
 8014b5c:	fb02 f200 	mul.w	r2, r2, r0
 8014b60:	1a9b      	subs	r3, r3, r2
 8014b62:	440b      	add	r3, r1
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7ff fd57 	bl	8014618 <ld_dword>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014b70:	617b      	str	r3, [r7, #20]
			break;
 8014b72:	e009      	b.n	8014b88 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014b74:	2301      	movs	r3, #1
 8014b76:	617b      	str	r3, [r7, #20]
 8014b78:	e006      	b.n	8014b88 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014b7a:	bf00      	nop
 8014b7c:	e004      	b.n	8014b88 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014b7e:	bf00      	nop
 8014b80:	e002      	b.n	8014b88 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014b82:	bf00      	nop
 8014b84:	e000      	b.n	8014b88 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014b86:	bf00      	nop
		}
	}

	return val;
 8014b88:	697b      	ldr	r3, [r7, #20]
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3718      	adds	r7, #24
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}

08014b92 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8014b92:	b590      	push	{r4, r7, lr}
 8014b94:	b089      	sub	sp, #36	; 0x24
 8014b96:	af00      	add	r7, sp, #0
 8014b98:	60f8      	str	r0, [r7, #12]
 8014b9a:	60b9      	str	r1, [r7, #8]
 8014b9c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8014b9e:	2302      	movs	r3, #2
 8014ba0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	2b01      	cmp	r3, #1
 8014ba6:	f240 8102 	bls.w	8014dae <put_fat+0x21c>
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	69db      	ldr	r3, [r3, #28]
 8014bae:	68ba      	ldr	r2, [r7, #8]
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	f080 80fc 	bcs.w	8014dae <put_fat+0x21c>
		switch (fs->fs_type) {
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	781b      	ldrb	r3, [r3, #0]
 8014bba:	2b03      	cmp	r3, #3
 8014bbc:	f000 80b6 	beq.w	8014d2c <put_fat+0x19a>
 8014bc0:	2b03      	cmp	r3, #3
 8014bc2:	f300 80fd 	bgt.w	8014dc0 <put_fat+0x22e>
 8014bc6:	2b01      	cmp	r3, #1
 8014bc8:	d003      	beq.n	8014bd2 <put_fat+0x40>
 8014bca:	2b02      	cmp	r3, #2
 8014bcc:	f000 8083 	beq.w	8014cd6 <put_fat+0x144>
 8014bd0:	e0f6      	b.n	8014dc0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	61bb      	str	r3, [r7, #24]
 8014bd6:	69bb      	ldr	r3, [r7, #24]
 8014bd8:	085b      	lsrs	r3, r3, #1
 8014bda:	69ba      	ldr	r2, [r7, #24]
 8014bdc:	4413      	add	r3, r2
 8014bde:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	899b      	ldrh	r3, [r3, #12]
 8014be8:	4619      	mov	r1, r3
 8014bea:	69bb      	ldr	r3, [r7, #24]
 8014bec:	fbb3 f3f1 	udiv	r3, r3, r1
 8014bf0:	4413      	add	r3, r2
 8014bf2:	4619      	mov	r1, r3
 8014bf4:	68f8      	ldr	r0, [r7, #12]
 8014bf6:	f7ff fe3b 	bl	8014870 <move_window>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014bfe:	7ffb      	ldrb	r3, [r7, #31]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	f040 80d6 	bne.w	8014db2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014c0c:	69bb      	ldr	r3, [r7, #24]
 8014c0e:	1c5a      	adds	r2, r3, #1
 8014c10:	61ba      	str	r2, [r7, #24]
 8014c12:	68fa      	ldr	r2, [r7, #12]
 8014c14:	8992      	ldrh	r2, [r2, #12]
 8014c16:	fbb3 f0f2 	udiv	r0, r3, r2
 8014c1a:	fb02 f200 	mul.w	r2, r2, r0
 8014c1e:	1a9b      	subs	r3, r3, r2
 8014c20:	440b      	add	r3, r1
 8014c22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	f003 0301 	and.w	r3, r3, #1
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d00d      	beq.n	8014c4a <put_fat+0xb8>
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	781b      	ldrb	r3, [r3, #0]
 8014c32:	b25b      	sxtb	r3, r3
 8014c34:	f003 030f 	and.w	r3, r3, #15
 8014c38:	b25a      	sxtb	r2, r3
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	b2db      	uxtb	r3, r3
 8014c3e:	011b      	lsls	r3, r3, #4
 8014c40:	b25b      	sxtb	r3, r3
 8014c42:	4313      	orrs	r3, r2
 8014c44:	b25b      	sxtb	r3, r3
 8014c46:	b2db      	uxtb	r3, r3
 8014c48:	e001      	b.n	8014c4e <put_fat+0xbc>
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	b2db      	uxtb	r3, r3
 8014c4e:	697a      	ldr	r2, [r7, #20]
 8014c50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	2201      	movs	r2, #1
 8014c56:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	899b      	ldrh	r3, [r3, #12]
 8014c60:	4619      	mov	r1, r3
 8014c62:	69bb      	ldr	r3, [r7, #24]
 8014c64:	fbb3 f3f1 	udiv	r3, r3, r1
 8014c68:	4413      	add	r3, r2
 8014c6a:	4619      	mov	r1, r3
 8014c6c:	68f8      	ldr	r0, [r7, #12]
 8014c6e:	f7ff fdff 	bl	8014870 <move_window>
 8014c72:	4603      	mov	r3, r0
 8014c74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014c76:	7ffb      	ldrb	r3, [r7, #31]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	f040 809c 	bne.w	8014db6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	899b      	ldrh	r3, [r3, #12]
 8014c88:	461a      	mov	r2, r3
 8014c8a:	69bb      	ldr	r3, [r7, #24]
 8014c8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8014c90:	fb02 f200 	mul.w	r2, r2, r0
 8014c94:	1a9b      	subs	r3, r3, r2
 8014c96:	440b      	add	r3, r1
 8014c98:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	f003 0301 	and.w	r3, r3, #1
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d003      	beq.n	8014cac <put_fat+0x11a>
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	091b      	lsrs	r3, r3, #4
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	e00e      	b.n	8014cca <put_fat+0x138>
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	781b      	ldrb	r3, [r3, #0]
 8014cb0:	b25b      	sxtb	r3, r3
 8014cb2:	f023 030f 	bic.w	r3, r3, #15
 8014cb6:	b25a      	sxtb	r2, r3
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	0a1b      	lsrs	r3, r3, #8
 8014cbc:	b25b      	sxtb	r3, r3
 8014cbe:	f003 030f 	and.w	r3, r3, #15
 8014cc2:	b25b      	sxtb	r3, r3
 8014cc4:	4313      	orrs	r3, r2
 8014cc6:	b25b      	sxtb	r3, r3
 8014cc8:	b2db      	uxtb	r3, r3
 8014cca:	697a      	ldr	r2, [r7, #20]
 8014ccc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	2201      	movs	r2, #1
 8014cd2:	70da      	strb	r2, [r3, #3]
			break;
 8014cd4:	e074      	b.n	8014dc0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	899b      	ldrh	r3, [r3, #12]
 8014cde:	085b      	lsrs	r3, r3, #1
 8014ce0:	b29b      	uxth	r3, r3
 8014ce2:	4619      	mov	r1, r3
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8014cea:	4413      	add	r3, r2
 8014cec:	4619      	mov	r1, r3
 8014cee:	68f8      	ldr	r0, [r7, #12]
 8014cf0:	f7ff fdbe 	bl	8014870 <move_window>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014cf8:	7ffb      	ldrb	r3, [r7, #31]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d15d      	bne.n	8014dba <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	005b      	lsls	r3, r3, #1
 8014d08:	68fa      	ldr	r2, [r7, #12]
 8014d0a:	8992      	ldrh	r2, [r2, #12]
 8014d0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8014d10:	fb02 f200 	mul.w	r2, r2, r0
 8014d14:	1a9b      	subs	r3, r3, r2
 8014d16:	440b      	add	r3, r1
 8014d18:	687a      	ldr	r2, [r7, #4]
 8014d1a:	b292      	uxth	r2, r2
 8014d1c:	4611      	mov	r1, r2
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f7ff fc9d 	bl	801465e <st_word>
			fs->wflag = 1;
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	2201      	movs	r2, #1
 8014d28:	70da      	strb	r2, [r3, #3]
			break;
 8014d2a:	e049      	b.n	8014dc0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	899b      	ldrh	r3, [r3, #12]
 8014d34:	089b      	lsrs	r3, r3, #2
 8014d36:	b29b      	uxth	r3, r3
 8014d38:	4619      	mov	r1, r3
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014d40:	4413      	add	r3, r2
 8014d42:	4619      	mov	r1, r3
 8014d44:	68f8      	ldr	r0, [r7, #12]
 8014d46:	f7ff fd93 	bl	8014870 <move_window>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014d4e:	7ffb      	ldrb	r3, [r7, #31]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d134      	bne.n	8014dbe <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	009b      	lsls	r3, r3, #2
 8014d64:	68fa      	ldr	r2, [r7, #12]
 8014d66:	8992      	ldrh	r2, [r2, #12]
 8014d68:	fbb3 f0f2 	udiv	r0, r3, r2
 8014d6c:	fb02 f200 	mul.w	r2, r2, r0
 8014d70:	1a9b      	subs	r3, r3, r2
 8014d72:	440b      	add	r3, r1
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7ff fc4f 	bl	8014618 <ld_dword>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014d80:	4323      	orrs	r3, r4
 8014d82:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	009b      	lsls	r3, r3, #2
 8014d8e:	68fa      	ldr	r2, [r7, #12]
 8014d90:	8992      	ldrh	r2, [r2, #12]
 8014d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8014d96:	fb02 f200 	mul.w	r2, r2, r0
 8014d9a:	1a9b      	subs	r3, r3, r2
 8014d9c:	440b      	add	r3, r1
 8014d9e:	6879      	ldr	r1, [r7, #4]
 8014da0:	4618      	mov	r0, r3
 8014da2:	f7ff fc77 	bl	8014694 <st_dword>
			fs->wflag = 1;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	2201      	movs	r2, #1
 8014daa:	70da      	strb	r2, [r3, #3]
			break;
 8014dac:	e008      	b.n	8014dc0 <put_fat+0x22e>
		}
	}
 8014dae:	bf00      	nop
 8014db0:	e006      	b.n	8014dc0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014db2:	bf00      	nop
 8014db4:	e004      	b.n	8014dc0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014db6:	bf00      	nop
 8014db8:	e002      	b.n	8014dc0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014dba:	bf00      	nop
 8014dbc:	e000      	b.n	8014dc0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014dbe:	bf00      	nop
	return res;
 8014dc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3724      	adds	r7, #36	; 0x24
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd90      	pop	{r4, r7, pc}

08014dca <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014dca:	b580      	push	{r7, lr}
 8014dcc:	b088      	sub	sp, #32
 8014dce:	af00      	add	r7, sp, #0
 8014dd0:	60f8      	str	r0, [r7, #12]
 8014dd2:	60b9      	str	r1, [r7, #8]
 8014dd4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	2b01      	cmp	r3, #1
 8014de4:	d904      	bls.n	8014df0 <remove_chain+0x26>
 8014de6:	69bb      	ldr	r3, [r7, #24]
 8014de8:	69db      	ldr	r3, [r3, #28]
 8014dea:	68ba      	ldr	r2, [r7, #8]
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d301      	bcc.n	8014df4 <remove_chain+0x2a>
 8014df0:	2302      	movs	r3, #2
 8014df2:	e04b      	b.n	8014e8c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d00c      	beq.n	8014e14 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8014dfe:	6879      	ldr	r1, [r7, #4]
 8014e00:	69b8      	ldr	r0, [r7, #24]
 8014e02:	f7ff fec6 	bl	8014b92 <put_fat>
 8014e06:	4603      	mov	r3, r0
 8014e08:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014e0a:	7ffb      	ldrb	r3, [r7, #31]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d001      	beq.n	8014e14 <remove_chain+0x4a>
 8014e10:	7ffb      	ldrb	r3, [r7, #31]
 8014e12:	e03b      	b.n	8014e8c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014e14:	68b9      	ldr	r1, [r7, #8]
 8014e16:	68f8      	ldr	r0, [r7, #12]
 8014e18:	f7ff fde7 	bl	80149ea <get_fat>
 8014e1c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d031      	beq.n	8014e88 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	2b01      	cmp	r3, #1
 8014e28:	d101      	bne.n	8014e2e <remove_chain+0x64>
 8014e2a:	2302      	movs	r3, #2
 8014e2c:	e02e      	b.n	8014e8c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e34:	d101      	bne.n	8014e3a <remove_chain+0x70>
 8014e36:	2301      	movs	r3, #1
 8014e38:	e028      	b.n	8014e8c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	68b9      	ldr	r1, [r7, #8]
 8014e3e:	69b8      	ldr	r0, [r7, #24]
 8014e40:	f7ff fea7 	bl	8014b92 <put_fat>
 8014e44:	4603      	mov	r3, r0
 8014e46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014e48:	7ffb      	ldrb	r3, [r7, #31]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d001      	beq.n	8014e52 <remove_chain+0x88>
 8014e4e:	7ffb      	ldrb	r3, [r7, #31]
 8014e50:	e01c      	b.n	8014e8c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014e52:	69bb      	ldr	r3, [r7, #24]
 8014e54:	699a      	ldr	r2, [r3, #24]
 8014e56:	69bb      	ldr	r3, [r7, #24]
 8014e58:	69db      	ldr	r3, [r3, #28]
 8014e5a:	3b02      	subs	r3, #2
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d20b      	bcs.n	8014e78 <remove_chain+0xae>
			fs->free_clst++;
 8014e60:	69bb      	ldr	r3, [r7, #24]
 8014e62:	699b      	ldr	r3, [r3, #24]
 8014e64:	1c5a      	adds	r2, r3, #1
 8014e66:	69bb      	ldr	r3, [r7, #24]
 8014e68:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8014e6a:	69bb      	ldr	r3, [r7, #24]
 8014e6c:	791b      	ldrb	r3, [r3, #4]
 8014e6e:	f043 0301 	orr.w	r3, r3, #1
 8014e72:	b2da      	uxtb	r2, r3
 8014e74:	69bb      	ldr	r3, [r7, #24]
 8014e76:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014e7c:	69bb      	ldr	r3, [r7, #24]
 8014e7e:	69db      	ldr	r3, [r3, #28]
 8014e80:	68ba      	ldr	r2, [r7, #8]
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d3c6      	bcc.n	8014e14 <remove_chain+0x4a>
 8014e86:	e000      	b.n	8014e8a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014e88:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014e8a:	2300      	movs	r3, #0
}
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	3720      	adds	r7, #32
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}

08014e94 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b088      	sub	sp, #32
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
 8014e9c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d10d      	bne.n	8014ec6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014eaa:	693b      	ldr	r3, [r7, #16]
 8014eac:	695b      	ldr	r3, [r3, #20]
 8014eae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014eb0:	69bb      	ldr	r3, [r7, #24]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d004      	beq.n	8014ec0 <create_chain+0x2c>
 8014eb6:	693b      	ldr	r3, [r7, #16]
 8014eb8:	69db      	ldr	r3, [r3, #28]
 8014eba:	69ba      	ldr	r2, [r7, #24]
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d31b      	bcc.n	8014ef8 <create_chain+0x64>
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	61bb      	str	r3, [r7, #24]
 8014ec4:	e018      	b.n	8014ef8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014ec6:	6839      	ldr	r1, [r7, #0]
 8014ec8:	6878      	ldr	r0, [r7, #4]
 8014eca:	f7ff fd8e 	bl	80149ea <get_fat>
 8014ece:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	2b01      	cmp	r3, #1
 8014ed4:	d801      	bhi.n	8014eda <create_chain+0x46>
 8014ed6:	2301      	movs	r3, #1
 8014ed8:	e070      	b.n	8014fbc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ee0:	d101      	bne.n	8014ee6 <create_chain+0x52>
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	e06a      	b.n	8014fbc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	69db      	ldr	r3, [r3, #28]
 8014eea:	68fa      	ldr	r2, [r7, #12]
 8014eec:	429a      	cmp	r2, r3
 8014eee:	d201      	bcs.n	8014ef4 <create_chain+0x60>
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	e063      	b.n	8014fbc <create_chain+0x128>
		scl = clst;
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014ef8:	69bb      	ldr	r3, [r7, #24]
 8014efa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014efc:	69fb      	ldr	r3, [r7, #28]
 8014efe:	3301      	adds	r3, #1
 8014f00:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014f02:	693b      	ldr	r3, [r7, #16]
 8014f04:	69db      	ldr	r3, [r3, #28]
 8014f06:	69fa      	ldr	r2, [r7, #28]
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	d307      	bcc.n	8014f1c <create_chain+0x88>
				ncl = 2;
 8014f0c:	2302      	movs	r3, #2
 8014f0e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014f10:	69fa      	ldr	r2, [r7, #28]
 8014f12:	69bb      	ldr	r3, [r7, #24]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d901      	bls.n	8014f1c <create_chain+0x88>
 8014f18:	2300      	movs	r3, #0
 8014f1a:	e04f      	b.n	8014fbc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014f1c:	69f9      	ldr	r1, [r7, #28]
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f7ff fd63 	bl	80149ea <get_fat>
 8014f24:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d00e      	beq.n	8014f4a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	2b01      	cmp	r3, #1
 8014f30:	d003      	beq.n	8014f3a <create_chain+0xa6>
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f38:	d101      	bne.n	8014f3e <create_chain+0xaa>
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	e03e      	b.n	8014fbc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8014f3e:	69fa      	ldr	r2, [r7, #28]
 8014f40:	69bb      	ldr	r3, [r7, #24]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d1da      	bne.n	8014efc <create_chain+0x68>
 8014f46:	2300      	movs	r3, #0
 8014f48:	e038      	b.n	8014fbc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014f4a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8014f50:	69f9      	ldr	r1, [r7, #28]
 8014f52:	6938      	ldr	r0, [r7, #16]
 8014f54:	f7ff fe1d 	bl	8014b92 <put_fat>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014f5c:	7dfb      	ldrb	r3, [r7, #23]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d109      	bne.n	8014f76 <create_chain+0xe2>
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d006      	beq.n	8014f76 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014f68:	69fa      	ldr	r2, [r7, #28]
 8014f6a:	6839      	ldr	r1, [r7, #0]
 8014f6c:	6938      	ldr	r0, [r7, #16]
 8014f6e:	f7ff fe10 	bl	8014b92 <put_fat>
 8014f72:	4603      	mov	r3, r0
 8014f74:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014f76:	7dfb      	ldrb	r3, [r7, #23]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d116      	bne.n	8014faa <create_chain+0x116>
		fs->last_clst = ncl;
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	69fa      	ldr	r2, [r7, #28]
 8014f80:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	699a      	ldr	r2, [r3, #24]
 8014f86:	693b      	ldr	r3, [r7, #16]
 8014f88:	69db      	ldr	r3, [r3, #28]
 8014f8a:	3b02      	subs	r3, #2
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	d804      	bhi.n	8014f9a <create_chain+0x106>
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	699b      	ldr	r3, [r3, #24]
 8014f94:	1e5a      	subs	r2, r3, #1
 8014f96:	693b      	ldr	r3, [r7, #16]
 8014f98:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8014f9a:	693b      	ldr	r3, [r7, #16]
 8014f9c:	791b      	ldrb	r3, [r3, #4]
 8014f9e:	f043 0301 	orr.w	r3, r3, #1
 8014fa2:	b2da      	uxtb	r2, r3
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	711a      	strb	r2, [r3, #4]
 8014fa8:	e007      	b.n	8014fba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014faa:	7dfb      	ldrb	r3, [r7, #23]
 8014fac:	2b01      	cmp	r3, #1
 8014fae:	d102      	bne.n	8014fb6 <create_chain+0x122>
 8014fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8014fb4:	e000      	b.n	8014fb8 <create_chain+0x124>
 8014fb6:	2301      	movs	r3, #1
 8014fb8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8014fba:	69fb      	ldr	r3, [r7, #28]
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	3720      	adds	r7, #32
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}

08014fc4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014fc4:	b480      	push	{r7}
 8014fc6:	b087      	sub	sp, #28
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
 8014fcc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fd8:	3304      	adds	r3, #4
 8014fda:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	899b      	ldrh	r3, [r3, #12]
 8014fe0:	461a      	mov	r2, r3
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8014fe8:	68fa      	ldr	r2, [r7, #12]
 8014fea:	8952      	ldrh	r2, [r2, #10]
 8014fec:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ff0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014ff2:	693b      	ldr	r3, [r7, #16]
 8014ff4:	1d1a      	adds	r2, r3, #4
 8014ff6:	613a      	str	r2, [r7, #16]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d101      	bne.n	8015006 <clmt_clust+0x42>
 8015002:	2300      	movs	r3, #0
 8015004:	e010      	b.n	8015028 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8015006:	697a      	ldr	r2, [r7, #20]
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	429a      	cmp	r2, r3
 801500c:	d307      	bcc.n	801501e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801500e:	697a      	ldr	r2, [r7, #20]
 8015010:	68bb      	ldr	r3, [r7, #8]
 8015012:	1ad3      	subs	r3, r2, r3
 8015014:	617b      	str	r3, [r7, #20]
 8015016:	693b      	ldr	r3, [r7, #16]
 8015018:	3304      	adds	r3, #4
 801501a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801501c:	e7e9      	b.n	8014ff2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801501e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015020:	693b      	ldr	r3, [r7, #16]
 8015022:	681a      	ldr	r2, [r3, #0]
 8015024:	697b      	ldr	r3, [r7, #20]
 8015026:	4413      	add	r3, r2
}
 8015028:	4618      	mov	r0, r3
 801502a:	371c      	adds	r7, #28
 801502c:	46bd      	mov	sp, r7
 801502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015032:	4770      	bx	lr

08015034 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b086      	sub	sp, #24
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801504a:	d204      	bcs.n	8015056 <dir_sdi+0x22>
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	f003 031f 	and.w	r3, r3, #31
 8015052:	2b00      	cmp	r3, #0
 8015054:	d001      	beq.n	801505a <dir_sdi+0x26>
		return FR_INT_ERR;
 8015056:	2302      	movs	r3, #2
 8015058:	e071      	b.n	801513e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	683a      	ldr	r2, [r7, #0]
 801505e:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	689b      	ldr	r3, [r3, #8]
 8015064:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d106      	bne.n	801507a <dir_sdi+0x46>
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	781b      	ldrb	r3, [r3, #0]
 8015070:	2b02      	cmp	r3, #2
 8015072:	d902      	bls.n	801507a <dir_sdi+0x46>
		clst = fs->dirbase;
 8015074:	693b      	ldr	r3, [r7, #16]
 8015076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015078:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801507a:	697b      	ldr	r3, [r7, #20]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d10c      	bne.n	801509a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	095b      	lsrs	r3, r3, #5
 8015084:	693a      	ldr	r2, [r7, #16]
 8015086:	8912      	ldrh	r2, [r2, #8]
 8015088:	4293      	cmp	r3, r2
 801508a:	d301      	bcc.n	8015090 <dir_sdi+0x5c>
 801508c:	2302      	movs	r3, #2
 801508e:	e056      	b.n	801513e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8015090:	693b      	ldr	r3, [r7, #16]
 8015092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	619a      	str	r2, [r3, #24]
 8015098:	e02d      	b.n	80150f6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801509a:	693b      	ldr	r3, [r7, #16]
 801509c:	895b      	ldrh	r3, [r3, #10]
 801509e:	461a      	mov	r2, r3
 80150a0:	693b      	ldr	r3, [r7, #16]
 80150a2:	899b      	ldrh	r3, [r3, #12]
 80150a4:	fb03 f302 	mul.w	r3, r3, r2
 80150a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80150aa:	e019      	b.n	80150e0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	6979      	ldr	r1, [r7, #20]
 80150b0:	4618      	mov	r0, r3
 80150b2:	f7ff fc9a 	bl	80149ea <get_fat>
 80150b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80150b8:	697b      	ldr	r3, [r7, #20]
 80150ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150be:	d101      	bne.n	80150c4 <dir_sdi+0x90>
 80150c0:	2301      	movs	r3, #1
 80150c2:	e03c      	b.n	801513e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	2b01      	cmp	r3, #1
 80150c8:	d904      	bls.n	80150d4 <dir_sdi+0xa0>
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	69db      	ldr	r3, [r3, #28]
 80150ce:	697a      	ldr	r2, [r7, #20]
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d301      	bcc.n	80150d8 <dir_sdi+0xa4>
 80150d4:	2302      	movs	r3, #2
 80150d6:	e032      	b.n	801513e <dir_sdi+0x10a>
			ofs -= csz;
 80150d8:	683a      	ldr	r2, [r7, #0]
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	1ad3      	subs	r3, r2, r3
 80150de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80150e0:	683a      	ldr	r2, [r7, #0]
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	429a      	cmp	r2, r3
 80150e6:	d2e1      	bcs.n	80150ac <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80150e8:	6979      	ldr	r1, [r7, #20]
 80150ea:	6938      	ldr	r0, [r7, #16]
 80150ec:	f7ff fc5e 	bl	80149ac <clust2sect>
 80150f0:	4602      	mov	r2, r0
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	697a      	ldr	r2, [r7, #20]
 80150fa:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	699b      	ldr	r3, [r3, #24]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d101      	bne.n	8015108 <dir_sdi+0xd4>
 8015104:	2302      	movs	r3, #2
 8015106:	e01a      	b.n	801513e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	699a      	ldr	r2, [r3, #24]
 801510c:	693b      	ldr	r3, [r7, #16]
 801510e:	899b      	ldrh	r3, [r3, #12]
 8015110:	4619      	mov	r1, r3
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	fbb3 f3f1 	udiv	r3, r3, r1
 8015118:	441a      	add	r2, r3
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801511e:	693b      	ldr	r3, [r7, #16]
 8015120:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	899b      	ldrh	r3, [r3, #12]
 8015128:	461a      	mov	r2, r3
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	fbb3 f0f2 	udiv	r0, r3, r2
 8015130:	fb02 f200 	mul.w	r2, r2, r0
 8015134:	1a9b      	subs	r3, r3, r2
 8015136:	18ca      	adds	r2, r1, r3
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	61da      	str	r2, [r3, #28]

	return FR_OK;
 801513c:	2300      	movs	r3, #0
}
 801513e:	4618      	mov	r0, r3
 8015140:	3718      	adds	r7, #24
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}

08015146 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015146:	b580      	push	{r7, lr}
 8015148:	b086      	sub	sp, #24
 801514a:	af00      	add	r7, sp, #0
 801514c:	6078      	str	r0, [r7, #4]
 801514e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	691b      	ldr	r3, [r3, #16]
 801515a:	3320      	adds	r3, #32
 801515c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	699b      	ldr	r3, [r3, #24]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d003      	beq.n	801516e <dir_next+0x28>
 8015166:	68bb      	ldr	r3, [r7, #8]
 8015168:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801516c:	d301      	bcc.n	8015172 <dir_next+0x2c>
 801516e:	2304      	movs	r3, #4
 8015170:	e0bb      	b.n	80152ea <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	899b      	ldrh	r3, [r3, #12]
 8015176:	461a      	mov	r2, r3
 8015178:	68bb      	ldr	r3, [r7, #8]
 801517a:	fbb3 f1f2 	udiv	r1, r3, r2
 801517e:	fb02 f201 	mul.w	r2, r2, r1
 8015182:	1a9b      	subs	r3, r3, r2
 8015184:	2b00      	cmp	r3, #0
 8015186:	f040 809d 	bne.w	80152c4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	699b      	ldr	r3, [r3, #24]
 801518e:	1c5a      	adds	r2, r3, #1
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	695b      	ldr	r3, [r3, #20]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d10b      	bne.n	80151b4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	095b      	lsrs	r3, r3, #5
 80151a0:	68fa      	ldr	r2, [r7, #12]
 80151a2:	8912      	ldrh	r2, [r2, #8]
 80151a4:	4293      	cmp	r3, r2
 80151a6:	f0c0 808d 	bcc.w	80152c4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2200      	movs	r2, #0
 80151ae:	619a      	str	r2, [r3, #24]
 80151b0:	2304      	movs	r3, #4
 80151b2:	e09a      	b.n	80152ea <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	899b      	ldrh	r3, [r3, #12]
 80151b8:	461a      	mov	r2, r3
 80151ba:	68bb      	ldr	r3, [r7, #8]
 80151bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80151c0:	68fa      	ldr	r2, [r7, #12]
 80151c2:	8952      	ldrh	r2, [r2, #10]
 80151c4:	3a01      	subs	r2, #1
 80151c6:	4013      	ands	r3, r2
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d17b      	bne.n	80152c4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80151cc:	687a      	ldr	r2, [r7, #4]
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	695b      	ldr	r3, [r3, #20]
 80151d2:	4619      	mov	r1, r3
 80151d4:	4610      	mov	r0, r2
 80151d6:	f7ff fc08 	bl	80149ea <get_fat>
 80151da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	2b01      	cmp	r3, #1
 80151e0:	d801      	bhi.n	80151e6 <dir_next+0xa0>
 80151e2:	2302      	movs	r3, #2
 80151e4:	e081      	b.n	80152ea <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80151e6:	697b      	ldr	r3, [r7, #20]
 80151e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151ec:	d101      	bne.n	80151f2 <dir_next+0xac>
 80151ee:	2301      	movs	r3, #1
 80151f0:	e07b      	b.n	80152ea <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	69db      	ldr	r3, [r3, #28]
 80151f6:	697a      	ldr	r2, [r7, #20]
 80151f8:	429a      	cmp	r2, r3
 80151fa:	d359      	bcc.n	80152b0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80151fc:	683b      	ldr	r3, [r7, #0]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d104      	bne.n	801520c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2200      	movs	r2, #0
 8015206:	619a      	str	r2, [r3, #24]
 8015208:	2304      	movs	r3, #4
 801520a:	e06e      	b.n	80152ea <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	695b      	ldr	r3, [r3, #20]
 8015212:	4619      	mov	r1, r3
 8015214:	4610      	mov	r0, r2
 8015216:	f7ff fe3d 	bl	8014e94 <create_chain>
 801521a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801521c:	697b      	ldr	r3, [r7, #20]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d101      	bne.n	8015226 <dir_next+0xe0>
 8015222:	2307      	movs	r3, #7
 8015224:	e061      	b.n	80152ea <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015226:	697b      	ldr	r3, [r7, #20]
 8015228:	2b01      	cmp	r3, #1
 801522a:	d101      	bne.n	8015230 <dir_next+0xea>
 801522c:	2302      	movs	r3, #2
 801522e:	e05c      	b.n	80152ea <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015236:	d101      	bne.n	801523c <dir_next+0xf6>
 8015238:	2301      	movs	r3, #1
 801523a:	e056      	b.n	80152ea <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801523c:	68f8      	ldr	r0, [r7, #12]
 801523e:	f7ff fad3 	bl	80147e8 <sync_window>
 8015242:	4603      	mov	r3, r0
 8015244:	2b00      	cmp	r3, #0
 8015246:	d001      	beq.n	801524c <dir_next+0x106>
 8015248:	2301      	movs	r3, #1
 801524a:	e04e      	b.n	80152ea <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	899b      	ldrh	r3, [r3, #12]
 8015256:	461a      	mov	r2, r3
 8015258:	2100      	movs	r1, #0
 801525a:	f7ff fa68 	bl	801472e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801525e:	2300      	movs	r3, #0
 8015260:	613b      	str	r3, [r7, #16]
 8015262:	6979      	ldr	r1, [r7, #20]
 8015264:	68f8      	ldr	r0, [r7, #12]
 8015266:	f7ff fba1 	bl	80149ac <clust2sect>
 801526a:	4602      	mov	r2, r0
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	635a      	str	r2, [r3, #52]	; 0x34
 8015270:	e012      	b.n	8015298 <dir_next+0x152>
						fs->wflag = 1;
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	2201      	movs	r2, #1
 8015276:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015278:	68f8      	ldr	r0, [r7, #12]
 801527a:	f7ff fab5 	bl	80147e8 <sync_window>
 801527e:	4603      	mov	r3, r0
 8015280:	2b00      	cmp	r3, #0
 8015282:	d001      	beq.n	8015288 <dir_next+0x142>
 8015284:	2301      	movs	r3, #1
 8015286:	e030      	b.n	80152ea <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015288:	693b      	ldr	r3, [r7, #16]
 801528a:	3301      	adds	r3, #1
 801528c:	613b      	str	r3, [r7, #16]
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015292:	1c5a      	adds	r2, r3, #1
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	635a      	str	r2, [r3, #52]	; 0x34
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	895b      	ldrh	r3, [r3, #10]
 801529c:	461a      	mov	r2, r3
 801529e:	693b      	ldr	r3, [r7, #16]
 80152a0:	4293      	cmp	r3, r2
 80152a2:	d3e6      	bcc.n	8015272 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80152a8:	693b      	ldr	r3, [r7, #16]
 80152aa:	1ad2      	subs	r2, r2, r3
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	697a      	ldr	r2, [r7, #20]
 80152b4:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 80152b6:	6979      	ldr	r1, [r7, #20]
 80152b8:	68f8      	ldr	r0, [r7, #12]
 80152ba:	f7ff fb77 	bl	80149ac <clust2sect>
 80152be:	4602      	mov	r2, r0
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	68ba      	ldr	r2, [r7, #8]
 80152c8:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	899b      	ldrh	r3, [r3, #12]
 80152d4:	461a      	mov	r2, r3
 80152d6:	68bb      	ldr	r3, [r7, #8]
 80152d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80152dc:	fb02 f200 	mul.w	r2, r2, r0
 80152e0:	1a9b      	subs	r3, r3, r2
 80152e2:	18ca      	adds	r2, r1, r3
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80152e8:	2300      	movs	r3, #0
}
 80152ea:	4618      	mov	r0, r3
 80152ec:	3718      	adds	r7, #24
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}

080152f2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80152f2:	b580      	push	{r7, lr}
 80152f4:	b086      	sub	sp, #24
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
 80152fa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015302:	2100      	movs	r1, #0
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	f7ff fe95 	bl	8015034 <dir_sdi>
 801530a:	4603      	mov	r3, r0
 801530c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801530e:	7dfb      	ldrb	r3, [r7, #23]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d12b      	bne.n	801536c <dir_alloc+0x7a>
		n = 0;
 8015314:	2300      	movs	r3, #0
 8015316:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	699b      	ldr	r3, [r3, #24]
 801531c:	4619      	mov	r1, r3
 801531e:	68f8      	ldr	r0, [r7, #12]
 8015320:	f7ff faa6 	bl	8014870 <move_window>
 8015324:	4603      	mov	r3, r0
 8015326:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015328:	7dfb      	ldrb	r3, [r7, #23]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d11d      	bne.n	801536a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	69db      	ldr	r3, [r3, #28]
 8015332:	781b      	ldrb	r3, [r3, #0]
 8015334:	2be5      	cmp	r3, #229	; 0xe5
 8015336:	d004      	beq.n	8015342 <dir_alloc+0x50>
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	69db      	ldr	r3, [r3, #28]
 801533c:	781b      	ldrb	r3, [r3, #0]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d107      	bne.n	8015352 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	3301      	adds	r3, #1
 8015346:	613b      	str	r3, [r7, #16]
 8015348:	693a      	ldr	r2, [r7, #16]
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	429a      	cmp	r2, r3
 801534e:	d102      	bne.n	8015356 <dir_alloc+0x64>
 8015350:	e00c      	b.n	801536c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015352:	2300      	movs	r3, #0
 8015354:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015356:	2101      	movs	r1, #1
 8015358:	6878      	ldr	r0, [r7, #4]
 801535a:	f7ff fef4 	bl	8015146 <dir_next>
 801535e:	4603      	mov	r3, r0
 8015360:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015362:	7dfb      	ldrb	r3, [r7, #23]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d0d7      	beq.n	8015318 <dir_alloc+0x26>
 8015368:	e000      	b.n	801536c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801536a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801536c:	7dfb      	ldrb	r3, [r7, #23]
 801536e:	2b04      	cmp	r3, #4
 8015370:	d101      	bne.n	8015376 <dir_alloc+0x84>
 8015372:	2307      	movs	r3, #7
 8015374:	75fb      	strb	r3, [r7, #23]
	return res;
 8015376:	7dfb      	ldrb	r3, [r7, #23]
}
 8015378:	4618      	mov	r0, r3
 801537a:	3718      	adds	r7, #24
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b084      	sub	sp, #16
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
 8015388:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	331a      	adds	r3, #26
 801538e:	4618      	mov	r0, r3
 8015390:	f7ff f92a 	bl	80145e8 <ld_word>
 8015394:	4603      	mov	r3, r0
 8015396:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	781b      	ldrb	r3, [r3, #0]
 801539c:	2b03      	cmp	r3, #3
 801539e:	d109      	bne.n	80153b4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	3314      	adds	r3, #20
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7ff f91f 	bl	80145e8 <ld_word>
 80153aa:	4603      	mov	r3, r0
 80153ac:	041b      	lsls	r3, r3, #16
 80153ae:	68fa      	ldr	r2, [r7, #12]
 80153b0:	4313      	orrs	r3, r2
 80153b2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80153b4:	68fb      	ldr	r3, [r7, #12]
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3710      	adds	r7, #16
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}

080153be <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80153be:	b580      	push	{r7, lr}
 80153c0:	b084      	sub	sp, #16
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	60f8      	str	r0, [r7, #12]
 80153c6:	60b9      	str	r1, [r7, #8]
 80153c8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80153ca:	68bb      	ldr	r3, [r7, #8]
 80153cc:	331a      	adds	r3, #26
 80153ce:	687a      	ldr	r2, [r7, #4]
 80153d0:	b292      	uxth	r2, r2
 80153d2:	4611      	mov	r1, r2
 80153d4:	4618      	mov	r0, r3
 80153d6:	f7ff f942 	bl	801465e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	781b      	ldrb	r3, [r3, #0]
 80153de:	2b03      	cmp	r3, #3
 80153e0:	d109      	bne.n	80153f6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80153e2:	68bb      	ldr	r3, [r7, #8]
 80153e4:	f103 0214 	add.w	r2, r3, #20
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	0c1b      	lsrs	r3, r3, #16
 80153ec:	b29b      	uxth	r3, r3
 80153ee:	4619      	mov	r1, r3
 80153f0:	4610      	mov	r0, r2
 80153f2:	f7ff f934 	bl	801465e <st_word>
	}
}
 80153f6:	bf00      	nop
 80153f8:	3710      	adds	r7, #16
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}
	...

08015400 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8015400:	b590      	push	{r4, r7, lr}
 8015402:	b087      	sub	sp, #28
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	331a      	adds	r3, #26
 801540e:	4618      	mov	r0, r3
 8015410:	f7ff f8ea 	bl	80145e8 <ld_word>
 8015414:	4603      	mov	r3, r0
 8015416:	2b00      	cmp	r3, #0
 8015418:	d001      	beq.n	801541e <cmp_lfn+0x1e>
 801541a:	2300      	movs	r3, #0
 801541c:	e059      	b.n	80154d2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	781b      	ldrb	r3, [r3, #0]
 8015422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015426:	1e5a      	subs	r2, r3, #1
 8015428:	4613      	mov	r3, r2
 801542a:	005b      	lsls	r3, r3, #1
 801542c:	4413      	add	r3, r2
 801542e:	009b      	lsls	r3, r3, #2
 8015430:	4413      	add	r3, r2
 8015432:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015434:	2301      	movs	r3, #1
 8015436:	81fb      	strh	r3, [r7, #14]
 8015438:	2300      	movs	r3, #0
 801543a:	613b      	str	r3, [r7, #16]
 801543c:	e033      	b.n	80154a6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801543e:	4a27      	ldr	r2, [pc, #156]	; (80154dc <cmp_lfn+0xdc>)
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	4413      	add	r3, r2
 8015444:	781b      	ldrb	r3, [r3, #0]
 8015446:	461a      	mov	r2, r3
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	4413      	add	r3, r2
 801544c:	4618      	mov	r0, r3
 801544e:	f7ff f8cb 	bl	80145e8 <ld_word>
 8015452:	4603      	mov	r3, r0
 8015454:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8015456:	89fb      	ldrh	r3, [r7, #14]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d01a      	beq.n	8015492 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	2bfe      	cmp	r3, #254	; 0xfe
 8015460:	d812      	bhi.n	8015488 <cmp_lfn+0x88>
 8015462:	89bb      	ldrh	r3, [r7, #12]
 8015464:	4618      	mov	r0, r3
 8015466:	f001 feb9 	bl	80171dc <ff_wtoupper>
 801546a:	4603      	mov	r3, r0
 801546c:	461c      	mov	r4, r3
 801546e:	697b      	ldr	r3, [r7, #20]
 8015470:	1c5a      	adds	r2, r3, #1
 8015472:	617a      	str	r2, [r7, #20]
 8015474:	005b      	lsls	r3, r3, #1
 8015476:	687a      	ldr	r2, [r7, #4]
 8015478:	4413      	add	r3, r2
 801547a:	881b      	ldrh	r3, [r3, #0]
 801547c:	4618      	mov	r0, r3
 801547e:	f001 fead 	bl	80171dc <ff_wtoupper>
 8015482:	4603      	mov	r3, r0
 8015484:	429c      	cmp	r4, r3
 8015486:	d001      	beq.n	801548c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8015488:	2300      	movs	r3, #0
 801548a:	e022      	b.n	80154d2 <cmp_lfn+0xd2>
			}
			wc = uc;
 801548c:	89bb      	ldrh	r3, [r7, #12]
 801548e:	81fb      	strh	r3, [r7, #14]
 8015490:	e006      	b.n	80154a0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015492:	89bb      	ldrh	r3, [r7, #12]
 8015494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015498:	4293      	cmp	r3, r2
 801549a:	d001      	beq.n	80154a0 <cmp_lfn+0xa0>
 801549c:	2300      	movs	r3, #0
 801549e:	e018      	b.n	80154d2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80154a0:	693b      	ldr	r3, [r7, #16]
 80154a2:	3301      	adds	r3, #1
 80154a4:	613b      	str	r3, [r7, #16]
 80154a6:	693b      	ldr	r3, [r7, #16]
 80154a8:	2b0c      	cmp	r3, #12
 80154aa:	d9c8      	bls.n	801543e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d00b      	beq.n	80154d0 <cmp_lfn+0xd0>
 80154b8:	89fb      	ldrh	r3, [r7, #14]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d008      	beq.n	80154d0 <cmp_lfn+0xd0>
 80154be:	697b      	ldr	r3, [r7, #20]
 80154c0:	005b      	lsls	r3, r3, #1
 80154c2:	687a      	ldr	r2, [r7, #4]
 80154c4:	4413      	add	r3, r2
 80154c6:	881b      	ldrh	r3, [r3, #0]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d001      	beq.n	80154d0 <cmp_lfn+0xd0>
 80154cc:	2300      	movs	r3, #0
 80154ce:	e000      	b.n	80154d2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80154d0:	2301      	movs	r3, #1
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	371c      	adds	r7, #28
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd90      	pop	{r4, r7, pc}
 80154da:	bf00      	nop
 80154dc:	08018818 	.word	0x08018818

080154e0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b088      	sub	sp, #32
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	60f8      	str	r0, [r7, #12]
 80154e8:	60b9      	str	r1, [r7, #8]
 80154ea:	4611      	mov	r1, r2
 80154ec:	461a      	mov	r2, r3
 80154ee:	460b      	mov	r3, r1
 80154f0:	71fb      	strb	r3, [r7, #7]
 80154f2:	4613      	mov	r3, r2
 80154f4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	330d      	adds	r3, #13
 80154fa:	79ba      	ldrb	r2, [r7, #6]
 80154fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80154fe:	68bb      	ldr	r3, [r7, #8]
 8015500:	330b      	adds	r3, #11
 8015502:	220f      	movs	r2, #15
 8015504:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8015506:	68bb      	ldr	r3, [r7, #8]
 8015508:	330c      	adds	r3, #12
 801550a:	2200      	movs	r2, #0
 801550c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	331a      	adds	r3, #26
 8015512:	2100      	movs	r1, #0
 8015514:	4618      	mov	r0, r3
 8015516:	f7ff f8a2 	bl	801465e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801551a:	79fb      	ldrb	r3, [r7, #7]
 801551c:	1e5a      	subs	r2, r3, #1
 801551e:	4613      	mov	r3, r2
 8015520:	005b      	lsls	r3, r3, #1
 8015522:	4413      	add	r3, r2
 8015524:	009b      	lsls	r3, r3, #2
 8015526:	4413      	add	r3, r2
 8015528:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801552a:	2300      	movs	r3, #0
 801552c:	82fb      	strh	r3, [r7, #22]
 801552e:	2300      	movs	r3, #0
 8015530:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015532:	8afb      	ldrh	r3, [r7, #22]
 8015534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015538:	4293      	cmp	r3, r2
 801553a:	d007      	beq.n	801554c <put_lfn+0x6c>
 801553c:	69fb      	ldr	r3, [r7, #28]
 801553e:	1c5a      	adds	r2, r3, #1
 8015540:	61fa      	str	r2, [r7, #28]
 8015542:	005b      	lsls	r3, r3, #1
 8015544:	68fa      	ldr	r2, [r7, #12]
 8015546:	4413      	add	r3, r2
 8015548:	881b      	ldrh	r3, [r3, #0]
 801554a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801554c:	4a17      	ldr	r2, [pc, #92]	; (80155ac <put_lfn+0xcc>)
 801554e:	69bb      	ldr	r3, [r7, #24]
 8015550:	4413      	add	r3, r2
 8015552:	781b      	ldrb	r3, [r3, #0]
 8015554:	461a      	mov	r2, r3
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	4413      	add	r3, r2
 801555a:	8afa      	ldrh	r2, [r7, #22]
 801555c:	4611      	mov	r1, r2
 801555e:	4618      	mov	r0, r3
 8015560:	f7ff f87d 	bl	801465e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015564:	8afb      	ldrh	r3, [r7, #22]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d102      	bne.n	8015570 <put_lfn+0x90>
 801556a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801556e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8015570:	69bb      	ldr	r3, [r7, #24]
 8015572:	3301      	adds	r3, #1
 8015574:	61bb      	str	r3, [r7, #24]
 8015576:	69bb      	ldr	r3, [r7, #24]
 8015578:	2b0c      	cmp	r3, #12
 801557a:	d9da      	bls.n	8015532 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801557c:	8afb      	ldrh	r3, [r7, #22]
 801557e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015582:	4293      	cmp	r3, r2
 8015584:	d006      	beq.n	8015594 <put_lfn+0xb4>
 8015586:	69fb      	ldr	r3, [r7, #28]
 8015588:	005b      	lsls	r3, r3, #1
 801558a:	68fa      	ldr	r2, [r7, #12]
 801558c:	4413      	add	r3, r2
 801558e:	881b      	ldrh	r3, [r3, #0]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d103      	bne.n	801559c <put_lfn+0xbc>
 8015594:	79fb      	ldrb	r3, [r7, #7]
 8015596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801559a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801559c:	68bb      	ldr	r3, [r7, #8]
 801559e:	79fa      	ldrb	r2, [r7, #7]
 80155a0:	701a      	strb	r2, [r3, #0]
}
 80155a2:	bf00      	nop
 80155a4:	3720      	adds	r7, #32
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}
 80155aa:	bf00      	nop
 80155ac:	08018818 	.word	0x08018818

080155b0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b08c      	sub	sp, #48	; 0x30
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	607a      	str	r2, [r7, #4]
 80155bc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80155be:	220b      	movs	r2, #11
 80155c0:	68b9      	ldr	r1, [r7, #8]
 80155c2:	68f8      	ldr	r0, [r7, #12]
 80155c4:	f7ff f892 	bl	80146ec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	2b05      	cmp	r3, #5
 80155cc:	d92b      	bls.n	8015626 <gen_numname+0x76>
		sr = seq;
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80155d2:	e022      	b.n	801561a <gen_numname+0x6a>
			wc = *lfn++;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	1c9a      	adds	r2, r3, #2
 80155d8:	607a      	str	r2, [r7, #4]
 80155da:	881b      	ldrh	r3, [r3, #0]
 80155dc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80155de:	2300      	movs	r3, #0
 80155e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80155e2:	e017      	b.n	8015614 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80155e4:	69fb      	ldr	r3, [r7, #28]
 80155e6:	005a      	lsls	r2, r3, #1
 80155e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155ea:	f003 0301 	and.w	r3, r3, #1
 80155ee:	4413      	add	r3, r2
 80155f0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80155f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155f4:	085b      	lsrs	r3, r3, #1
 80155f6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80155f8:	69fb      	ldr	r3, [r7, #28]
 80155fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d005      	beq.n	801560e <gen_numname+0x5e>
 8015602:	69fb      	ldr	r3, [r7, #28]
 8015604:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8015608:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 801560c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015610:	3301      	adds	r3, #1
 8015612:	62bb      	str	r3, [r7, #40]	; 0x28
 8015614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015616:	2b0f      	cmp	r3, #15
 8015618:	d9e4      	bls.n	80155e4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	881b      	ldrh	r3, [r3, #0]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d1d8      	bne.n	80155d4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8015622:	69fb      	ldr	r3, [r7, #28]
 8015624:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8015626:	2307      	movs	r3, #7
 8015628:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	b2db      	uxtb	r3, r3
 801562e:	f003 030f 	and.w	r3, r3, #15
 8015632:	b2db      	uxtb	r3, r3
 8015634:	3330      	adds	r3, #48	; 0x30
 8015636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801563a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801563e:	2b39      	cmp	r3, #57	; 0x39
 8015640:	d904      	bls.n	801564c <gen_numname+0x9c>
 8015642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015646:	3307      	adds	r3, #7
 8015648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801564e:	1e5a      	subs	r2, r3, #1
 8015650:	62ba      	str	r2, [r7, #40]	; 0x28
 8015652:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015656:	4413      	add	r3, r2
 8015658:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801565c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	091b      	lsrs	r3, r3, #4
 8015664:	603b      	str	r3, [r7, #0]
	} while (seq);
 8015666:	683b      	ldr	r3, [r7, #0]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d1de      	bne.n	801562a <gen_numname+0x7a>
	ns[i] = '~';
 801566c:	f107 0214 	add.w	r2, r7, #20
 8015670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015672:	4413      	add	r3, r2
 8015674:	227e      	movs	r2, #126	; 0x7e
 8015676:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015678:	2300      	movs	r3, #0
 801567a:	627b      	str	r3, [r7, #36]	; 0x24
 801567c:	e002      	b.n	8015684 <gen_numname+0xd4>
 801567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015680:	3301      	adds	r3, #1
 8015682:	627b      	str	r3, [r7, #36]	; 0x24
 8015684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015688:	429a      	cmp	r2, r3
 801568a:	d205      	bcs.n	8015698 <gen_numname+0xe8>
 801568c:	68fa      	ldr	r2, [r7, #12]
 801568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015690:	4413      	add	r3, r2
 8015692:	781b      	ldrb	r3, [r3, #0]
 8015694:	2b20      	cmp	r3, #32
 8015696:	d1f2      	bne.n	801567e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801569a:	2b07      	cmp	r3, #7
 801569c:	d808      	bhi.n	80156b0 <gen_numname+0x100>
 801569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a0:	1c5a      	adds	r2, r3, #1
 80156a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80156a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80156a8:	4413      	add	r3, r2
 80156aa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80156ae:	e000      	b.n	80156b2 <gen_numname+0x102>
 80156b0:	2120      	movs	r1, #32
 80156b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b4:	1c5a      	adds	r2, r3, #1
 80156b6:	627a      	str	r2, [r7, #36]	; 0x24
 80156b8:	68fa      	ldr	r2, [r7, #12]
 80156ba:	4413      	add	r3, r2
 80156bc:	460a      	mov	r2, r1
 80156be:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80156c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c2:	2b07      	cmp	r3, #7
 80156c4:	d9e8      	bls.n	8015698 <gen_numname+0xe8>
}
 80156c6:	bf00      	nop
 80156c8:	bf00      	nop
 80156ca:	3730      	adds	r7, #48	; 0x30
 80156cc:	46bd      	mov	sp, r7
 80156ce:	bd80      	pop	{r7, pc}

080156d0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80156d0:	b480      	push	{r7}
 80156d2:	b085      	sub	sp, #20
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80156d8:	2300      	movs	r3, #0
 80156da:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80156dc:	230b      	movs	r3, #11
 80156de:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80156e0:	7bfb      	ldrb	r3, [r7, #15]
 80156e2:	b2da      	uxtb	r2, r3
 80156e4:	0852      	lsrs	r2, r2, #1
 80156e6:	01db      	lsls	r3, r3, #7
 80156e8:	4313      	orrs	r3, r2
 80156ea:	b2da      	uxtb	r2, r3
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	1c59      	adds	r1, r3, #1
 80156f0:	6079      	str	r1, [r7, #4]
 80156f2:	781b      	ldrb	r3, [r3, #0]
 80156f4:	4413      	add	r3, r2
 80156f6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80156f8:	68bb      	ldr	r3, [r7, #8]
 80156fa:	3b01      	subs	r3, #1
 80156fc:	60bb      	str	r3, [r7, #8]
 80156fe:	68bb      	ldr	r3, [r7, #8]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d1ed      	bne.n	80156e0 <sum_sfn+0x10>
	return sum;
 8015704:	7bfb      	ldrb	r3, [r7, #15]
}
 8015706:	4618      	mov	r0, r3
 8015708:	3714      	adds	r7, #20
 801570a:	46bd      	mov	sp, r7
 801570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015710:	4770      	bx	lr

08015712 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015712:	b580      	push	{r7, lr}
 8015714:	b086      	sub	sp, #24
 8015716:	af00      	add	r7, sp, #0
 8015718:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015720:	2100      	movs	r1, #0
 8015722:	6878      	ldr	r0, [r7, #4]
 8015724:	f7ff fc86 	bl	8015034 <dir_sdi>
 8015728:	4603      	mov	r3, r0
 801572a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801572c:	7dfb      	ldrb	r3, [r7, #23]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d001      	beq.n	8015736 <dir_find+0x24>
 8015732:	7dfb      	ldrb	r3, [r7, #23]
 8015734:	e0a9      	b.n	801588a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015736:	23ff      	movs	r3, #255	; 0xff
 8015738:	753b      	strb	r3, [r7, #20]
 801573a:	7d3b      	ldrb	r3, [r7, #20]
 801573c:	757b      	strb	r3, [r7, #21]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f04f 32ff 	mov.w	r2, #4294967295
 8015744:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	699b      	ldr	r3, [r3, #24]
 801574a:	4619      	mov	r1, r3
 801574c:	6938      	ldr	r0, [r7, #16]
 801574e:	f7ff f88f 	bl	8014870 <move_window>
 8015752:	4603      	mov	r3, r0
 8015754:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015756:	7dfb      	ldrb	r3, [r7, #23]
 8015758:	2b00      	cmp	r3, #0
 801575a:	f040 8090 	bne.w	801587e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	69db      	ldr	r3, [r3, #28]
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015766:	7dbb      	ldrb	r3, [r7, #22]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d102      	bne.n	8015772 <dir_find+0x60>
 801576c:	2304      	movs	r3, #4
 801576e:	75fb      	strb	r3, [r7, #23]
 8015770:	e08a      	b.n	8015888 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	69db      	ldr	r3, [r3, #28]
 8015776:	330b      	adds	r3, #11
 8015778:	781b      	ldrb	r3, [r3, #0]
 801577a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801577e:	73fb      	strb	r3, [r7, #15]
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	7bfa      	ldrb	r2, [r7, #15]
 8015784:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015786:	7dbb      	ldrb	r3, [r7, #22]
 8015788:	2be5      	cmp	r3, #229	; 0xe5
 801578a:	d007      	beq.n	801579c <dir_find+0x8a>
 801578c:	7bfb      	ldrb	r3, [r7, #15]
 801578e:	f003 0308 	and.w	r3, r3, #8
 8015792:	2b00      	cmp	r3, #0
 8015794:	d009      	beq.n	80157aa <dir_find+0x98>
 8015796:	7bfb      	ldrb	r3, [r7, #15]
 8015798:	2b0f      	cmp	r3, #15
 801579a:	d006      	beq.n	80157aa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801579c:	23ff      	movs	r3, #255	; 0xff
 801579e:	757b      	strb	r3, [r7, #21]
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f04f 32ff 	mov.w	r2, #4294967295
 80157a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80157a8:	e05e      	b.n	8015868 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80157aa:	7bfb      	ldrb	r3, [r7, #15]
 80157ac:	2b0f      	cmp	r3, #15
 80157ae:	d136      	bne.n	801581e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80157b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d154      	bne.n	8015868 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80157be:	7dbb      	ldrb	r3, [r7, #22]
 80157c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d00d      	beq.n	80157e4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	69db      	ldr	r3, [r3, #28]
 80157cc:	7b5b      	ldrb	r3, [r3, #13]
 80157ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80157d0:	7dbb      	ldrb	r3, [r7, #22]
 80157d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80157d6:	75bb      	strb	r3, [r7, #22]
 80157d8:	7dbb      	ldrb	r3, [r7, #22]
 80157da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	691a      	ldr	r2, [r3, #16]
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80157e4:	7dba      	ldrb	r2, [r7, #22]
 80157e6:	7d7b      	ldrb	r3, [r7, #21]
 80157e8:	429a      	cmp	r2, r3
 80157ea:	d115      	bne.n	8015818 <dir_find+0x106>
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	69db      	ldr	r3, [r3, #28]
 80157f0:	330d      	adds	r3, #13
 80157f2:	781b      	ldrb	r3, [r3, #0]
 80157f4:	7d3a      	ldrb	r2, [r7, #20]
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d10e      	bne.n	8015818 <dir_find+0x106>
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	691a      	ldr	r2, [r3, #16]
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	69db      	ldr	r3, [r3, #28]
 8015802:	4619      	mov	r1, r3
 8015804:	4610      	mov	r0, r2
 8015806:	f7ff fdfb 	bl	8015400 <cmp_lfn>
 801580a:	4603      	mov	r3, r0
 801580c:	2b00      	cmp	r3, #0
 801580e:	d003      	beq.n	8015818 <dir_find+0x106>
 8015810:	7d7b      	ldrb	r3, [r7, #21]
 8015812:	3b01      	subs	r3, #1
 8015814:	b2db      	uxtb	r3, r3
 8015816:	e000      	b.n	801581a <dir_find+0x108>
 8015818:	23ff      	movs	r3, #255	; 0xff
 801581a:	757b      	strb	r3, [r7, #21]
 801581c:	e024      	b.n	8015868 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801581e:	7d7b      	ldrb	r3, [r7, #21]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d109      	bne.n	8015838 <dir_find+0x126>
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	69db      	ldr	r3, [r3, #28]
 8015828:	4618      	mov	r0, r3
 801582a:	f7ff ff51 	bl	80156d0 <sum_sfn>
 801582e:	4603      	mov	r3, r0
 8015830:	461a      	mov	r2, r3
 8015832:	7d3b      	ldrb	r3, [r7, #20]
 8015834:	4293      	cmp	r3, r2
 8015836:	d024      	beq.n	8015882 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801583e:	f003 0301 	and.w	r3, r3, #1
 8015842:	2b00      	cmp	r3, #0
 8015844:	d10a      	bne.n	801585c <dir_find+0x14a>
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	69d8      	ldr	r0, [r3, #28]
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	3320      	adds	r3, #32
 801584e:	220b      	movs	r2, #11
 8015850:	4619      	mov	r1, r3
 8015852:	f7fe ff87 	bl	8014764 <mem_cmp>
 8015856:	4603      	mov	r3, r0
 8015858:	2b00      	cmp	r3, #0
 801585a:	d014      	beq.n	8015886 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801585c:	23ff      	movs	r3, #255	; 0xff
 801585e:	757b      	strb	r3, [r7, #21]
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	f04f 32ff 	mov.w	r2, #4294967295
 8015866:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015868:	2100      	movs	r1, #0
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	f7ff fc6b 	bl	8015146 <dir_next>
 8015870:	4603      	mov	r3, r0
 8015872:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015874:	7dfb      	ldrb	r3, [r7, #23]
 8015876:	2b00      	cmp	r3, #0
 8015878:	f43f af65 	beq.w	8015746 <dir_find+0x34>
 801587c:	e004      	b.n	8015888 <dir_find+0x176>
		if (res != FR_OK) break;
 801587e:	bf00      	nop
 8015880:	e002      	b.n	8015888 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015882:	bf00      	nop
 8015884:	e000      	b.n	8015888 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015886:	bf00      	nop

	return res;
 8015888:	7dfb      	ldrb	r3, [r7, #23]
}
 801588a:	4618      	mov	r0, r3
 801588c:	3718      	adds	r7, #24
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}
	...

08015894 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b08c      	sub	sp, #48	; 0x30
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80158a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d001      	beq.n	80158b4 <dir_register+0x20>
 80158b0:	2306      	movs	r3, #6
 80158b2:	e0e0      	b.n	8015a76 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80158b4:	2300      	movs	r3, #0
 80158b6:	627b      	str	r3, [r7, #36]	; 0x24
 80158b8:	e002      	b.n	80158c0 <dir_register+0x2c>
 80158ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158bc:	3301      	adds	r3, #1
 80158be:	627b      	str	r3, [r7, #36]	; 0x24
 80158c0:	69fb      	ldr	r3, [r7, #28]
 80158c2:	691a      	ldr	r2, [r3, #16]
 80158c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158c6:	005b      	lsls	r3, r3, #1
 80158c8:	4413      	add	r3, r2
 80158ca:	881b      	ldrh	r3, [r3, #0]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d1f4      	bne.n	80158ba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	f103 0120 	add.w	r1, r3, #32
 80158d6:	f107 030c 	add.w	r3, r7, #12
 80158da:	220c      	movs	r2, #12
 80158dc:	4618      	mov	r0, r3
 80158de:	f7fe ff05 	bl	80146ec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80158e2:	7dfb      	ldrb	r3, [r7, #23]
 80158e4:	f003 0301 	and.w	r3, r3, #1
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d032      	beq.n	8015952 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2240      	movs	r2, #64	; 0x40
 80158f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 80158f4:	2301      	movs	r3, #1
 80158f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80158f8:	e016      	b.n	8015928 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	f103 0020 	add.w	r0, r3, #32
 8015900:	69fb      	ldr	r3, [r7, #28]
 8015902:	691a      	ldr	r2, [r3, #16]
 8015904:	f107 010c 	add.w	r1, r7, #12
 8015908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801590a:	f7ff fe51 	bl	80155b0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f7ff feff 	bl	8015712 <dir_find>
 8015914:	4603      	mov	r3, r0
 8015916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801591a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801591e:	2b00      	cmp	r3, #0
 8015920:	d106      	bne.n	8015930 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8015922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015924:	3301      	adds	r3, #1
 8015926:	62bb      	str	r3, [r7, #40]	; 0x28
 8015928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801592a:	2b63      	cmp	r3, #99	; 0x63
 801592c:	d9e5      	bls.n	80158fa <dir_register+0x66>
 801592e:	e000      	b.n	8015932 <dir_register+0x9e>
			if (res != FR_OK) break;
 8015930:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8015932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015934:	2b64      	cmp	r3, #100	; 0x64
 8015936:	d101      	bne.n	801593c <dir_register+0xa8>
 8015938:	2307      	movs	r3, #7
 801593a:	e09c      	b.n	8015a76 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801593c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015940:	2b04      	cmp	r3, #4
 8015942:	d002      	beq.n	801594a <dir_register+0xb6>
 8015944:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015948:	e095      	b.n	8015a76 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801594a:	7dfa      	ldrb	r2, [r7, #23]
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015952:	7dfb      	ldrb	r3, [r7, #23]
 8015954:	f003 0302 	and.w	r3, r3, #2
 8015958:	2b00      	cmp	r3, #0
 801595a:	d007      	beq.n	801596c <dir_register+0xd8>
 801595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801595e:	330c      	adds	r3, #12
 8015960:	4a47      	ldr	r2, [pc, #284]	; (8015a80 <dir_register+0x1ec>)
 8015962:	fba2 2303 	umull	r2, r3, r2, r3
 8015966:	089b      	lsrs	r3, r3, #2
 8015968:	3301      	adds	r3, #1
 801596a:	e000      	b.n	801596e <dir_register+0xda>
 801596c:	2301      	movs	r3, #1
 801596e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015970:	6a39      	ldr	r1, [r7, #32]
 8015972:	6878      	ldr	r0, [r7, #4]
 8015974:	f7ff fcbd 	bl	80152f2 <dir_alloc>
 8015978:	4603      	mov	r3, r0
 801597a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801597e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015982:	2b00      	cmp	r3, #0
 8015984:	d148      	bne.n	8015a18 <dir_register+0x184>
 8015986:	6a3b      	ldr	r3, [r7, #32]
 8015988:	3b01      	subs	r3, #1
 801598a:	623b      	str	r3, [r7, #32]
 801598c:	6a3b      	ldr	r3, [r7, #32]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d042      	beq.n	8015a18 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	691a      	ldr	r2, [r3, #16]
 8015996:	6a3b      	ldr	r3, [r7, #32]
 8015998:	015b      	lsls	r3, r3, #5
 801599a:	1ad3      	subs	r3, r2, r3
 801599c:	4619      	mov	r1, r3
 801599e:	6878      	ldr	r0, [r7, #4]
 80159a0:	f7ff fb48 	bl	8015034 <dir_sdi>
 80159a4:	4603      	mov	r3, r0
 80159a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80159aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d132      	bne.n	8015a18 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	3320      	adds	r3, #32
 80159b6:	4618      	mov	r0, r3
 80159b8:	f7ff fe8a 	bl	80156d0 <sum_sfn>
 80159bc:	4603      	mov	r3, r0
 80159be:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	699b      	ldr	r3, [r3, #24]
 80159c4:	4619      	mov	r1, r3
 80159c6:	69f8      	ldr	r0, [r7, #28]
 80159c8:	f7fe ff52 	bl	8014870 <move_window>
 80159cc:	4603      	mov	r3, r0
 80159ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80159d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d11d      	bne.n	8015a16 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80159da:	69fb      	ldr	r3, [r7, #28]
 80159dc:	6918      	ldr	r0, [r3, #16]
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	69d9      	ldr	r1, [r3, #28]
 80159e2:	6a3b      	ldr	r3, [r7, #32]
 80159e4:	b2da      	uxtb	r2, r3
 80159e6:	7efb      	ldrb	r3, [r7, #27]
 80159e8:	f7ff fd7a 	bl	80154e0 <put_lfn>
				fs->wflag = 1;
 80159ec:	69fb      	ldr	r3, [r7, #28]
 80159ee:	2201      	movs	r2, #1
 80159f0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80159f2:	2100      	movs	r1, #0
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f7ff fba6 	bl	8015146 <dir_next>
 80159fa:	4603      	mov	r3, r0
 80159fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015a00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d107      	bne.n	8015a18 <dir_register+0x184>
 8015a08:	6a3b      	ldr	r3, [r7, #32]
 8015a0a:	3b01      	subs	r3, #1
 8015a0c:	623b      	str	r3, [r7, #32]
 8015a0e:	6a3b      	ldr	r3, [r7, #32]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d1d5      	bne.n	80159c0 <dir_register+0x12c>
 8015a14:	e000      	b.n	8015a18 <dir_register+0x184>
				if (res != FR_OK) break;
 8015a16:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015a18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d128      	bne.n	8015a72 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	699b      	ldr	r3, [r3, #24]
 8015a24:	4619      	mov	r1, r3
 8015a26:	69f8      	ldr	r0, [r7, #28]
 8015a28:	f7fe ff22 	bl	8014870 <move_window>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d11b      	bne.n	8015a72 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	69db      	ldr	r3, [r3, #28]
 8015a3e:	2220      	movs	r2, #32
 8015a40:	2100      	movs	r1, #0
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7fe fe73 	bl	801472e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	69d8      	ldr	r0, [r3, #28]
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	3320      	adds	r3, #32
 8015a50:	220b      	movs	r2, #11
 8015a52:	4619      	mov	r1, r3
 8015a54:	f7fe fe4a 	bl	80146ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	69db      	ldr	r3, [r3, #28]
 8015a62:	330c      	adds	r3, #12
 8015a64:	f002 0218 	and.w	r2, r2, #24
 8015a68:	b2d2      	uxtb	r2, r2
 8015a6a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015a6c:	69fb      	ldr	r3, [r7, #28]
 8015a6e:	2201      	movs	r2, #1
 8015a70:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3730      	adds	r7, #48	; 0x30
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}
 8015a7e:	bf00      	nop
 8015a80:	4ec4ec4f 	.word	0x4ec4ec4f

08015a84 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b08a      	sub	sp, #40	; 0x28
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015a8e:	683b      	ldr	r3, [r7, #0]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	613b      	str	r3, [r7, #16]
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	691b      	ldr	r3, [r3, #16]
 8015a9a:	60fb      	str	r3, [r7, #12]
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	617b      	str	r3, [r7, #20]
 8015aa0:	697b      	ldr	r3, [r7, #20]
 8015aa2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8015aa4:	69bb      	ldr	r3, [r7, #24]
 8015aa6:	1c5a      	adds	r2, r3, #1
 8015aa8:	61ba      	str	r2, [r7, #24]
 8015aaa:	693a      	ldr	r2, [r7, #16]
 8015aac:	4413      	add	r3, r2
 8015aae:	781b      	ldrb	r3, [r3, #0]
 8015ab0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8015ab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ab4:	2b1f      	cmp	r3, #31
 8015ab6:	d940      	bls.n	8015b3a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8015ab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015aba:	2b2f      	cmp	r3, #47	; 0x2f
 8015abc:	d006      	beq.n	8015acc <create_name+0x48>
 8015abe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ac0:	2b5c      	cmp	r3, #92	; 0x5c
 8015ac2:	d110      	bne.n	8015ae6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015ac4:	e002      	b.n	8015acc <create_name+0x48>
 8015ac6:	69bb      	ldr	r3, [r7, #24]
 8015ac8:	3301      	adds	r3, #1
 8015aca:	61bb      	str	r3, [r7, #24]
 8015acc:	693a      	ldr	r2, [r7, #16]
 8015ace:	69bb      	ldr	r3, [r7, #24]
 8015ad0:	4413      	add	r3, r2
 8015ad2:	781b      	ldrb	r3, [r3, #0]
 8015ad4:	2b2f      	cmp	r3, #47	; 0x2f
 8015ad6:	d0f6      	beq.n	8015ac6 <create_name+0x42>
 8015ad8:	693a      	ldr	r2, [r7, #16]
 8015ada:	69bb      	ldr	r3, [r7, #24]
 8015adc:	4413      	add	r3, r2
 8015ade:	781b      	ldrb	r3, [r3, #0]
 8015ae0:	2b5c      	cmp	r3, #92	; 0x5c
 8015ae2:	d0f0      	beq.n	8015ac6 <create_name+0x42>
			break;
 8015ae4:	e02a      	b.n	8015b3c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8015ae6:	697b      	ldr	r3, [r7, #20]
 8015ae8:	2bfe      	cmp	r3, #254	; 0xfe
 8015aea:	d901      	bls.n	8015af0 <create_name+0x6c>
 8015aec:	2306      	movs	r3, #6
 8015aee:	e177      	b.n	8015de0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8015af0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015af2:	b2db      	uxtb	r3, r3
 8015af4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8015af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015af8:	2101      	movs	r1, #1
 8015afa:	4618      	mov	r0, r3
 8015afc:	f001 fb32 	bl	8017164 <ff_convert>
 8015b00:	4603      	mov	r3, r0
 8015b02:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015b04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d101      	bne.n	8015b0e <create_name+0x8a>
 8015b0a:	2306      	movs	r3, #6
 8015b0c:	e168      	b.n	8015de0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8015b0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b10:	2b7f      	cmp	r3, #127	; 0x7f
 8015b12:	d809      	bhi.n	8015b28 <create_name+0xa4>
 8015b14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b16:	4619      	mov	r1, r3
 8015b18:	48b3      	ldr	r0, [pc, #716]	; (8015de8 <create_name+0x364>)
 8015b1a:	f7fe fe4a 	bl	80147b2 <chk_chr>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d001      	beq.n	8015b28 <create_name+0xa4>
 8015b24:	2306      	movs	r3, #6
 8015b26:	e15b      	b.n	8015de0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8015b28:	697b      	ldr	r3, [r7, #20]
 8015b2a:	1c5a      	adds	r2, r3, #1
 8015b2c:	617a      	str	r2, [r7, #20]
 8015b2e:	005b      	lsls	r3, r3, #1
 8015b30:	68fa      	ldr	r2, [r7, #12]
 8015b32:	4413      	add	r3, r2
 8015b34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015b36:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8015b38:	e7b4      	b.n	8015aa4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8015b3a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8015b3c:	693a      	ldr	r2, [r7, #16]
 8015b3e:	69bb      	ldr	r3, [r7, #24]
 8015b40:	441a      	add	r2, r3
 8015b42:	683b      	ldr	r3, [r7, #0]
 8015b44:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015b46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b48:	2b1f      	cmp	r3, #31
 8015b4a:	d801      	bhi.n	8015b50 <create_name+0xcc>
 8015b4c:	2304      	movs	r3, #4
 8015b4e:	e000      	b.n	8015b52 <create_name+0xce>
 8015b50:	2300      	movs	r3, #0
 8015b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015b56:	e011      	b.n	8015b7c <create_name+0xf8>
		w = lfn[di - 1];
 8015b58:	697b      	ldr	r3, [r7, #20]
 8015b5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015b5e:	3b01      	subs	r3, #1
 8015b60:	005b      	lsls	r3, r3, #1
 8015b62:	68fa      	ldr	r2, [r7, #12]
 8015b64:	4413      	add	r3, r2
 8015b66:	881b      	ldrh	r3, [r3, #0]
 8015b68:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8015b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b6c:	2b20      	cmp	r3, #32
 8015b6e:	d002      	beq.n	8015b76 <create_name+0xf2>
 8015b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b72:	2b2e      	cmp	r3, #46	; 0x2e
 8015b74:	d106      	bne.n	8015b84 <create_name+0x100>
		di--;
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	3b01      	subs	r3, #1
 8015b7a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d1ea      	bne.n	8015b58 <create_name+0xd4>
 8015b82:	e000      	b.n	8015b86 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8015b84:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8015b86:	697b      	ldr	r3, [r7, #20]
 8015b88:	005b      	lsls	r3, r3, #1
 8015b8a:	68fa      	ldr	r2, [r7, #12]
 8015b8c:	4413      	add	r3, r2
 8015b8e:	2200      	movs	r2, #0
 8015b90:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015b92:	697b      	ldr	r3, [r7, #20]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d101      	bne.n	8015b9c <create_name+0x118>
 8015b98:	2306      	movs	r3, #6
 8015b9a:	e121      	b.n	8015de0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	3320      	adds	r3, #32
 8015ba0:	220b      	movs	r2, #11
 8015ba2:	2120      	movs	r1, #32
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7fe fdc2 	bl	801472e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015baa:	2300      	movs	r3, #0
 8015bac:	61bb      	str	r3, [r7, #24]
 8015bae:	e002      	b.n	8015bb6 <create_name+0x132>
 8015bb0:	69bb      	ldr	r3, [r7, #24]
 8015bb2:	3301      	adds	r3, #1
 8015bb4:	61bb      	str	r3, [r7, #24]
 8015bb6:	69bb      	ldr	r3, [r7, #24]
 8015bb8:	005b      	lsls	r3, r3, #1
 8015bba:	68fa      	ldr	r2, [r7, #12]
 8015bbc:	4413      	add	r3, r2
 8015bbe:	881b      	ldrh	r3, [r3, #0]
 8015bc0:	2b20      	cmp	r3, #32
 8015bc2:	d0f5      	beq.n	8015bb0 <create_name+0x12c>
 8015bc4:	69bb      	ldr	r3, [r7, #24]
 8015bc6:	005b      	lsls	r3, r3, #1
 8015bc8:	68fa      	ldr	r2, [r7, #12]
 8015bca:	4413      	add	r3, r2
 8015bcc:	881b      	ldrh	r3, [r3, #0]
 8015bce:	2b2e      	cmp	r3, #46	; 0x2e
 8015bd0:	d0ee      	beq.n	8015bb0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8015bd2:	69bb      	ldr	r3, [r7, #24]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d009      	beq.n	8015bec <create_name+0x168>
 8015bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bdc:	f043 0303 	orr.w	r3, r3, #3
 8015be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015be4:	e002      	b.n	8015bec <create_name+0x168>
 8015be6:	697b      	ldr	r3, [r7, #20]
 8015be8:	3b01      	subs	r3, #1
 8015bea:	617b      	str	r3, [r7, #20]
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d009      	beq.n	8015c06 <create_name+0x182>
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015bf8:	3b01      	subs	r3, #1
 8015bfa:	005b      	lsls	r3, r3, #1
 8015bfc:	68fa      	ldr	r2, [r7, #12]
 8015bfe:	4413      	add	r3, r2
 8015c00:	881b      	ldrh	r3, [r3, #0]
 8015c02:	2b2e      	cmp	r3, #46	; 0x2e
 8015c04:	d1ef      	bne.n	8015be6 <create_name+0x162>

	i = b = 0; ni = 8;
 8015c06:	2300      	movs	r3, #0
 8015c08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	623b      	str	r3, [r7, #32]
 8015c10:	2308      	movs	r3, #8
 8015c12:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8015c14:	69bb      	ldr	r3, [r7, #24]
 8015c16:	1c5a      	adds	r2, r3, #1
 8015c18:	61ba      	str	r2, [r7, #24]
 8015c1a:	005b      	lsls	r3, r3, #1
 8015c1c:	68fa      	ldr	r2, [r7, #12]
 8015c1e:	4413      	add	r3, r2
 8015c20:	881b      	ldrh	r3, [r3, #0]
 8015c22:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8015c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	f000 8090 	beq.w	8015d4c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8015c2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c2e:	2b20      	cmp	r3, #32
 8015c30:	d006      	beq.n	8015c40 <create_name+0x1bc>
 8015c32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c34:	2b2e      	cmp	r3, #46	; 0x2e
 8015c36:	d10a      	bne.n	8015c4e <create_name+0x1ca>
 8015c38:	69ba      	ldr	r2, [r7, #24]
 8015c3a:	697b      	ldr	r3, [r7, #20]
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	d006      	beq.n	8015c4e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8015c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c44:	f043 0303 	orr.w	r3, r3, #3
 8015c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c4c:	e07d      	b.n	8015d4a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8015c4e:	6a3a      	ldr	r2, [r7, #32]
 8015c50:	69fb      	ldr	r3, [r7, #28]
 8015c52:	429a      	cmp	r2, r3
 8015c54:	d203      	bcs.n	8015c5e <create_name+0x1da>
 8015c56:	69ba      	ldr	r2, [r7, #24]
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d123      	bne.n	8015ca6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8015c5e:	69fb      	ldr	r3, [r7, #28]
 8015c60:	2b0b      	cmp	r3, #11
 8015c62:	d106      	bne.n	8015c72 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8015c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c68:	f043 0303 	orr.w	r3, r3, #3
 8015c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c70:	e06f      	b.n	8015d52 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8015c72:	69ba      	ldr	r2, [r7, #24]
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	429a      	cmp	r2, r3
 8015c78:	d005      	beq.n	8015c86 <create_name+0x202>
 8015c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c7e:	f043 0303 	orr.w	r3, r3, #3
 8015c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8015c86:	69ba      	ldr	r2, [r7, #24]
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	d860      	bhi.n	8015d50 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8015c8e:	697b      	ldr	r3, [r7, #20]
 8015c90:	61bb      	str	r3, [r7, #24]
 8015c92:	2308      	movs	r3, #8
 8015c94:	623b      	str	r3, [r7, #32]
 8015c96:	230b      	movs	r3, #11
 8015c98:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8015c9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015c9e:	009b      	lsls	r3, r3, #2
 8015ca0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015ca4:	e051      	b.n	8015d4a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8015ca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8015caa:	d914      	bls.n	8015cd6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8015cac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015cae:	2100      	movs	r1, #0
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f001 fa57 	bl	8017164 <ff_convert>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015cba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d004      	beq.n	8015cca <create_name+0x246>
 8015cc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015cc2:	3b80      	subs	r3, #128	; 0x80
 8015cc4:	4a49      	ldr	r2, [pc, #292]	; (8015dec <create_name+0x368>)
 8015cc6:	5cd3      	ldrb	r3, [r2, r3]
 8015cc8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8015cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cce:	f043 0302 	orr.w	r3, r3, #2
 8015cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015cd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d007      	beq.n	8015cec <create_name+0x268>
 8015cdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015cde:	4619      	mov	r1, r3
 8015ce0:	4843      	ldr	r0, [pc, #268]	; (8015df0 <create_name+0x36c>)
 8015ce2:	f7fe fd66 	bl	80147b2 <chk_chr>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d008      	beq.n	8015cfe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8015cec:	235f      	movs	r3, #95	; 0x5f
 8015cee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8015cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cf4:	f043 0303 	orr.w	r3, r3, #3
 8015cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015cfc:	e01b      	b.n	8015d36 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8015cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d00:	2b40      	cmp	r3, #64	; 0x40
 8015d02:	d909      	bls.n	8015d18 <create_name+0x294>
 8015d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d06:	2b5a      	cmp	r3, #90	; 0x5a
 8015d08:	d806      	bhi.n	8015d18 <create_name+0x294>
					b |= 2;
 8015d0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d0e:	f043 0302 	orr.w	r3, r3, #2
 8015d12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015d16:	e00e      	b.n	8015d36 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8015d18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d1a:	2b60      	cmp	r3, #96	; 0x60
 8015d1c:	d90b      	bls.n	8015d36 <create_name+0x2b2>
 8015d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d20:	2b7a      	cmp	r3, #122	; 0x7a
 8015d22:	d808      	bhi.n	8015d36 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8015d24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d28:	f043 0301 	orr.w	r3, r3, #1
 8015d2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d32:	3b20      	subs	r3, #32
 8015d34:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8015d36:	6a3b      	ldr	r3, [r7, #32]
 8015d38:	1c5a      	adds	r2, r3, #1
 8015d3a:	623a      	str	r2, [r7, #32]
 8015d3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015d3e:	b2d1      	uxtb	r1, r2
 8015d40:	687a      	ldr	r2, [r7, #4]
 8015d42:	4413      	add	r3, r2
 8015d44:	460a      	mov	r2, r1
 8015d46:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 8015d4a:	e763      	b.n	8015c14 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8015d4c:	bf00      	nop
 8015d4e:	e000      	b.n	8015d52 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8015d50:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015d58:	2be5      	cmp	r3, #229	; 0xe5
 8015d5a:	d103      	bne.n	8015d64 <create_name+0x2e0>
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	2205      	movs	r2, #5
 8015d60:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 8015d64:	69fb      	ldr	r3, [r7, #28]
 8015d66:	2b08      	cmp	r3, #8
 8015d68:	d104      	bne.n	8015d74 <create_name+0x2f0>
 8015d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d6e:	009b      	lsls	r3, r3, #2
 8015d70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015d74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d78:	f003 030c 	and.w	r3, r3, #12
 8015d7c:	2b0c      	cmp	r3, #12
 8015d7e:	d005      	beq.n	8015d8c <create_name+0x308>
 8015d80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d84:	f003 0303 	and.w	r3, r3, #3
 8015d88:	2b03      	cmp	r3, #3
 8015d8a:	d105      	bne.n	8015d98 <create_name+0x314>
 8015d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d90:	f043 0302 	orr.w	r3, r3, #2
 8015d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d9c:	f003 0302 	and.w	r3, r3, #2
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d117      	bne.n	8015dd4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8015da4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015da8:	f003 0303 	and.w	r3, r3, #3
 8015dac:	2b01      	cmp	r3, #1
 8015dae:	d105      	bne.n	8015dbc <create_name+0x338>
 8015db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015db4:	f043 0310 	orr.w	r3, r3, #16
 8015db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8015dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015dc0:	f003 030c 	and.w	r3, r3, #12
 8015dc4:	2b04      	cmp	r3, #4
 8015dc6:	d105      	bne.n	8015dd4 <create_name+0x350>
 8015dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015dcc:	f043 0308 	orr.w	r3, r3, #8
 8015dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015dda:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 8015dde:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3728      	adds	r7, #40	; 0x28
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}
 8015de8:	080186d8 	.word	0x080186d8
 8015dec:	08018798 	.word	0x08018798
 8015df0:	080186e4 	.word	0x080186e4

08015df4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b086      	sub	sp, #24
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
 8015dfc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8015e02:	693b      	ldr	r3, [r7, #16]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015e08:	e002      	b.n	8015e10 <follow_path+0x1c>
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	603b      	str	r3, [r7, #0]
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	781b      	ldrb	r3, [r3, #0]
 8015e14:	2b2f      	cmp	r3, #47	; 0x2f
 8015e16:	d0f8      	beq.n	8015e0a <follow_path+0x16>
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	781b      	ldrb	r3, [r3, #0]
 8015e1c:	2b5c      	cmp	r3, #92	; 0x5c
 8015e1e:	d0f4      	beq.n	8015e0a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	2200      	movs	r2, #0
 8015e24:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	781b      	ldrb	r3, [r3, #0]
 8015e2a:	2b1f      	cmp	r3, #31
 8015e2c:	d80a      	bhi.n	8015e44 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	2280      	movs	r2, #128	; 0x80
 8015e32:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8015e36:	2100      	movs	r1, #0
 8015e38:	6878      	ldr	r0, [r7, #4]
 8015e3a:	f7ff f8fb 	bl	8015034 <dir_sdi>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	75fb      	strb	r3, [r7, #23]
 8015e42:	e048      	b.n	8015ed6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015e44:	463b      	mov	r3, r7
 8015e46:	4619      	mov	r1, r3
 8015e48:	6878      	ldr	r0, [r7, #4]
 8015e4a:	f7ff fe1b 	bl	8015a84 <create_name>
 8015e4e:	4603      	mov	r3, r0
 8015e50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015e52:	7dfb      	ldrb	r3, [r7, #23]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d139      	bne.n	8015ecc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015e58:	6878      	ldr	r0, [r7, #4]
 8015e5a:	f7ff fc5a 	bl	8015712 <dir_find>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015e68:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8015e6a:	7dfb      	ldrb	r3, [r7, #23]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d00a      	beq.n	8015e86 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015e70:	7dfb      	ldrb	r3, [r7, #23]
 8015e72:	2b04      	cmp	r3, #4
 8015e74:	d12c      	bne.n	8015ed0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015e76:	7afb      	ldrb	r3, [r7, #11]
 8015e78:	f003 0304 	and.w	r3, r3, #4
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d127      	bne.n	8015ed0 <follow_path+0xdc>
 8015e80:	2305      	movs	r3, #5
 8015e82:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015e84:	e024      	b.n	8015ed0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015e86:	7afb      	ldrb	r3, [r7, #11]
 8015e88:	f003 0304 	and.w	r3, r3, #4
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d121      	bne.n	8015ed4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015e90:	693b      	ldr	r3, [r7, #16]
 8015e92:	799b      	ldrb	r3, [r3, #6]
 8015e94:	f003 0310 	and.w	r3, r3, #16
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d102      	bne.n	8015ea2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015e9c:	2305      	movs	r3, #5
 8015e9e:	75fb      	strb	r3, [r7, #23]
 8015ea0:	e019      	b.n	8015ed6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	691b      	ldr	r3, [r3, #16]
 8015eac:	68fa      	ldr	r2, [r7, #12]
 8015eae:	8992      	ldrh	r2, [r2, #12]
 8015eb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8015eb4:	fb02 f200 	mul.w	r2, r2, r0
 8015eb8:	1a9b      	subs	r3, r3, r2
 8015eba:	440b      	add	r3, r1
 8015ebc:	4619      	mov	r1, r3
 8015ebe:	68f8      	ldr	r0, [r7, #12]
 8015ec0:	f7ff fa5e 	bl	8015380 <ld_clust>
 8015ec4:	4602      	mov	r2, r0
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015eca:	e7bb      	b.n	8015e44 <follow_path+0x50>
			if (res != FR_OK) break;
 8015ecc:	bf00      	nop
 8015ece:	e002      	b.n	8015ed6 <follow_path+0xe2>
				break;
 8015ed0:	bf00      	nop
 8015ed2:	e000      	b.n	8015ed6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015ed4:	bf00      	nop
			}
		}
	}

	return res;
 8015ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ed8:	4618      	mov	r0, r3
 8015eda:	3718      	adds	r7, #24
 8015edc:	46bd      	mov	sp, r7
 8015ede:	bd80      	pop	{r7, pc}

08015ee0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015ee0:	b480      	push	{r7}
 8015ee2:	b087      	sub	sp, #28
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8015ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8015eec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d031      	beq.n	8015f5a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	617b      	str	r3, [r7, #20]
 8015efc:	e002      	b.n	8015f04 <get_ldnumber+0x24>
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	3301      	adds	r3, #1
 8015f02:	617b      	str	r3, [r7, #20]
 8015f04:	697b      	ldr	r3, [r7, #20]
 8015f06:	781b      	ldrb	r3, [r3, #0]
 8015f08:	2b1f      	cmp	r3, #31
 8015f0a:	d903      	bls.n	8015f14 <get_ldnumber+0x34>
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	781b      	ldrb	r3, [r3, #0]
 8015f10:	2b3a      	cmp	r3, #58	; 0x3a
 8015f12:	d1f4      	bne.n	8015efe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8015f14:	697b      	ldr	r3, [r7, #20]
 8015f16:	781b      	ldrb	r3, [r3, #0]
 8015f18:	2b3a      	cmp	r3, #58	; 0x3a
 8015f1a:	d11c      	bne.n	8015f56 <get_ldnumber+0x76>
			tp = *path;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	1c5a      	adds	r2, r3, #1
 8015f26:	60fa      	str	r2, [r7, #12]
 8015f28:	781b      	ldrb	r3, [r3, #0]
 8015f2a:	3b30      	subs	r3, #48	; 0x30
 8015f2c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	2b09      	cmp	r3, #9
 8015f32:	d80e      	bhi.n	8015f52 <get_ldnumber+0x72>
 8015f34:	68fa      	ldr	r2, [r7, #12]
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d10a      	bne.n	8015f52 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d107      	bne.n	8015f52 <get_ldnumber+0x72>
					vol = (int)i;
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8015f46:	697b      	ldr	r3, [r7, #20]
 8015f48:	3301      	adds	r3, #1
 8015f4a:	617b      	str	r3, [r7, #20]
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	697a      	ldr	r2, [r7, #20]
 8015f50:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8015f52:	693b      	ldr	r3, [r7, #16]
 8015f54:	e002      	b.n	8015f5c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8015f56:	2300      	movs	r3, #0
 8015f58:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8015f5a:	693b      	ldr	r3, [r7, #16]
}
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	371c      	adds	r7, #28
 8015f60:	46bd      	mov	sp, r7
 8015f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f66:	4770      	bx	lr

08015f68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b082      	sub	sp, #8
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
 8015f70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2200      	movs	r2, #0
 8015f76:	70da      	strb	r2, [r3, #3]
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8015f7e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015f80:	6839      	ldr	r1, [r7, #0]
 8015f82:	6878      	ldr	r0, [r7, #4]
 8015f84:	f7fe fc74 	bl	8014870 <move_window>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d001      	beq.n	8015f92 <check_fs+0x2a>
 8015f8e:	2304      	movs	r3, #4
 8015f90:	e038      	b.n	8016004 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	3338      	adds	r3, #56	; 0x38
 8015f96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f7fe fb24 	bl	80145e8 <ld_word>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	461a      	mov	r2, r3
 8015fa4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d001      	beq.n	8015fb0 <check_fs+0x48>
 8015fac:	2303      	movs	r3, #3
 8015fae:	e029      	b.n	8016004 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015fb6:	2be9      	cmp	r3, #233	; 0xe9
 8015fb8:	d009      	beq.n	8015fce <check_fs+0x66>
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015fc0:	2beb      	cmp	r3, #235	; 0xeb
 8015fc2:	d11e      	bne.n	8016002 <check_fs+0x9a>
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8015fca:	2b90      	cmp	r3, #144	; 0x90
 8015fcc:	d119      	bne.n	8016002 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	3338      	adds	r3, #56	; 0x38
 8015fd2:	3336      	adds	r3, #54	; 0x36
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7fe fb1f 	bl	8014618 <ld_dword>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015fe0:	4a0a      	ldr	r2, [pc, #40]	; (801600c <check_fs+0xa4>)
 8015fe2:	4293      	cmp	r3, r2
 8015fe4:	d101      	bne.n	8015fea <check_fs+0x82>
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	e00c      	b.n	8016004 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	3338      	adds	r3, #56	; 0x38
 8015fee:	3352      	adds	r3, #82	; 0x52
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f7fe fb11 	bl	8014618 <ld_dword>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	4a05      	ldr	r2, [pc, #20]	; (8016010 <check_fs+0xa8>)
 8015ffa:	4293      	cmp	r3, r2
 8015ffc:	d101      	bne.n	8016002 <check_fs+0x9a>
 8015ffe:	2300      	movs	r3, #0
 8016000:	e000      	b.n	8016004 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016002:	2302      	movs	r3, #2
}
 8016004:	4618      	mov	r0, r3
 8016006:	3708      	adds	r7, #8
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}
 801600c:	00544146 	.word	0x00544146
 8016010:	33544146 	.word	0x33544146

08016014 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b096      	sub	sp, #88	; 0x58
 8016018:	af00      	add	r7, sp, #0
 801601a:	60f8      	str	r0, [r7, #12]
 801601c:	60b9      	str	r1, [r7, #8]
 801601e:	4613      	mov	r3, r2
 8016020:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	2200      	movs	r2, #0
 8016026:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016028:	68f8      	ldr	r0, [r7, #12]
 801602a:	f7ff ff59 	bl	8015ee0 <get_ldnumber>
 801602e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016032:	2b00      	cmp	r3, #0
 8016034:	da01      	bge.n	801603a <find_volume+0x26>
 8016036:	230b      	movs	r3, #11
 8016038:	e265      	b.n	8016506 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801603a:	4ab0      	ldr	r2, [pc, #704]	; (80162fc <find_volume+0x2e8>)
 801603c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801603e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016042:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016046:	2b00      	cmp	r3, #0
 8016048:	d101      	bne.n	801604e <find_volume+0x3a>
 801604a:	230c      	movs	r3, #12
 801604c:	e25b      	b.n	8016506 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016052:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016054:	79fb      	ldrb	r3, [r7, #7]
 8016056:	f023 0301 	bic.w	r3, r3, #1
 801605a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801605c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801605e:	781b      	ldrb	r3, [r3, #0]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d01a      	beq.n	801609a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016066:	785b      	ldrb	r3, [r3, #1]
 8016068:	4618      	mov	r0, r3
 801606a:	f7fe fa1f 	bl	80144ac <disk_status>
 801606e:	4603      	mov	r3, r0
 8016070:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016074:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016078:	f003 0301 	and.w	r3, r3, #1
 801607c:	2b00      	cmp	r3, #0
 801607e:	d10c      	bne.n	801609a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016080:	79fb      	ldrb	r3, [r7, #7]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d007      	beq.n	8016096 <find_volume+0x82>
 8016086:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801608a:	f003 0304 	and.w	r3, r3, #4
 801608e:	2b00      	cmp	r3, #0
 8016090:	d001      	beq.n	8016096 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8016092:	230a      	movs	r3, #10
 8016094:	e237      	b.n	8016506 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8016096:	2300      	movs	r3, #0
 8016098:	e235      	b.n	8016506 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801609c:	2200      	movs	r2, #0
 801609e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80160a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160a2:	b2da      	uxtb	r2, r3
 80160a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80160a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160aa:	785b      	ldrb	r3, [r3, #1]
 80160ac:	4618      	mov	r0, r3
 80160ae:	f7fe fa17 	bl	80144e0 <disk_initialize>
 80160b2:	4603      	mov	r3, r0
 80160b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80160b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80160bc:	f003 0301 	and.w	r3, r3, #1
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d001      	beq.n	80160c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80160c4:	2303      	movs	r3, #3
 80160c6:	e21e      	b.n	8016506 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80160c8:	79fb      	ldrb	r3, [r7, #7]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d007      	beq.n	80160de <find_volume+0xca>
 80160ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80160d2:	f003 0304 	and.w	r3, r3, #4
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d001      	beq.n	80160de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80160da:	230a      	movs	r3, #10
 80160dc:	e213      	b.n	8016506 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80160de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160e0:	7858      	ldrb	r0, [r3, #1]
 80160e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160e4:	330c      	adds	r3, #12
 80160e6:	461a      	mov	r2, r3
 80160e8:	2102      	movs	r1, #2
 80160ea:	f7fe fa5f 	bl	80145ac <disk_ioctl>
 80160ee:	4603      	mov	r3, r0
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d001      	beq.n	80160f8 <find_volume+0xe4>
 80160f4:	2301      	movs	r3, #1
 80160f6:	e206      	b.n	8016506 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80160f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160fa:	899b      	ldrh	r3, [r3, #12]
 80160fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016100:	d80d      	bhi.n	801611e <find_volume+0x10a>
 8016102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016104:	899b      	ldrh	r3, [r3, #12]
 8016106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801610a:	d308      	bcc.n	801611e <find_volume+0x10a>
 801610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801610e:	899b      	ldrh	r3, [r3, #12]
 8016110:	461a      	mov	r2, r3
 8016112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016114:	899b      	ldrh	r3, [r3, #12]
 8016116:	3b01      	subs	r3, #1
 8016118:	4013      	ands	r3, r2
 801611a:	2b00      	cmp	r3, #0
 801611c:	d001      	beq.n	8016122 <find_volume+0x10e>
 801611e:	2301      	movs	r3, #1
 8016120:	e1f1      	b.n	8016506 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016122:	2300      	movs	r3, #0
 8016124:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016126:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801612a:	f7ff ff1d 	bl	8015f68 <check_fs>
 801612e:	4603      	mov	r3, r0
 8016130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016134:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016138:	2b02      	cmp	r3, #2
 801613a:	d14b      	bne.n	80161d4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801613c:	2300      	movs	r3, #0
 801613e:	643b      	str	r3, [r7, #64]	; 0x40
 8016140:	e01f      	b.n	8016182 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016144:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801614a:	011b      	lsls	r3, r3, #4
 801614c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016150:	4413      	add	r3, r2
 8016152:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016156:	3304      	adds	r3, #4
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d006      	beq.n	801616c <find_volume+0x158>
 801615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016160:	3308      	adds	r3, #8
 8016162:	4618      	mov	r0, r3
 8016164:	f7fe fa58 	bl	8014618 <ld_dword>
 8016168:	4602      	mov	r2, r0
 801616a:	e000      	b.n	801616e <find_volume+0x15a>
 801616c:	2200      	movs	r2, #0
 801616e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016170:	009b      	lsls	r3, r3, #2
 8016172:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016176:	440b      	add	r3, r1
 8016178:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801617c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801617e:	3301      	adds	r3, #1
 8016180:	643b      	str	r3, [r7, #64]	; 0x40
 8016182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016184:	2b03      	cmp	r3, #3
 8016186:	d9dc      	bls.n	8016142 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016188:	2300      	movs	r3, #0
 801618a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801618c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801618e:	2b00      	cmp	r3, #0
 8016190:	d002      	beq.n	8016198 <find_volume+0x184>
 8016192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016194:	3b01      	subs	r3, #1
 8016196:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801619a:	009b      	lsls	r3, r3, #2
 801619c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80161a0:	4413      	add	r3, r2
 80161a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80161a6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80161a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d005      	beq.n	80161ba <find_volume+0x1a6>
 80161ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80161b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80161b2:	f7ff fed9 	bl	8015f68 <check_fs>
 80161b6:	4603      	mov	r3, r0
 80161b8:	e000      	b.n	80161bc <find_volume+0x1a8>
 80161ba:	2303      	movs	r3, #3
 80161bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80161c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80161c4:	2b01      	cmp	r3, #1
 80161c6:	d905      	bls.n	80161d4 <find_volume+0x1c0>
 80161c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161ca:	3301      	adds	r3, #1
 80161cc:	643b      	str	r3, [r7, #64]	; 0x40
 80161ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161d0:	2b03      	cmp	r3, #3
 80161d2:	d9e1      	bls.n	8016198 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80161d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80161d8:	2b04      	cmp	r3, #4
 80161da:	d101      	bne.n	80161e0 <find_volume+0x1cc>
 80161dc:	2301      	movs	r3, #1
 80161de:	e192      	b.n	8016506 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80161e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80161e4:	2b01      	cmp	r3, #1
 80161e6:	d901      	bls.n	80161ec <find_volume+0x1d8>
 80161e8:	230d      	movs	r3, #13
 80161ea:	e18c      	b.n	8016506 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80161ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ee:	3338      	adds	r3, #56	; 0x38
 80161f0:	330b      	adds	r3, #11
 80161f2:	4618      	mov	r0, r3
 80161f4:	f7fe f9f8 	bl	80145e8 <ld_word>
 80161f8:	4603      	mov	r3, r0
 80161fa:	461a      	mov	r2, r3
 80161fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161fe:	899b      	ldrh	r3, [r3, #12]
 8016200:	429a      	cmp	r2, r3
 8016202:	d001      	beq.n	8016208 <find_volume+0x1f4>
 8016204:	230d      	movs	r3, #13
 8016206:	e17e      	b.n	8016506 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801620a:	3338      	adds	r3, #56	; 0x38
 801620c:	3316      	adds	r3, #22
 801620e:	4618      	mov	r0, r3
 8016210:	f7fe f9ea 	bl	80145e8 <ld_word>
 8016214:	4603      	mov	r3, r0
 8016216:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801621a:	2b00      	cmp	r3, #0
 801621c:	d106      	bne.n	801622c <find_volume+0x218>
 801621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016220:	3338      	adds	r3, #56	; 0x38
 8016222:	3324      	adds	r3, #36	; 0x24
 8016224:	4618      	mov	r0, r3
 8016226:	f7fe f9f7 	bl	8014618 <ld_dword>
 801622a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801622e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016230:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016234:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8016238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801623a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801623e:	789b      	ldrb	r3, [r3, #2]
 8016240:	2b01      	cmp	r3, #1
 8016242:	d005      	beq.n	8016250 <find_volume+0x23c>
 8016244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016246:	789b      	ldrb	r3, [r3, #2]
 8016248:	2b02      	cmp	r3, #2
 801624a:	d001      	beq.n	8016250 <find_volume+0x23c>
 801624c:	230d      	movs	r3, #13
 801624e:	e15a      	b.n	8016506 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016252:	789b      	ldrb	r3, [r3, #2]
 8016254:	461a      	mov	r2, r3
 8016256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016258:	fb02 f303 	mul.w	r3, r2, r3
 801625c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016264:	b29a      	uxth	r2, r3
 8016266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016268:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801626c:	895b      	ldrh	r3, [r3, #10]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d008      	beq.n	8016284 <find_volume+0x270>
 8016272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016274:	895b      	ldrh	r3, [r3, #10]
 8016276:	461a      	mov	r2, r3
 8016278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801627a:	895b      	ldrh	r3, [r3, #10]
 801627c:	3b01      	subs	r3, #1
 801627e:	4013      	ands	r3, r2
 8016280:	2b00      	cmp	r3, #0
 8016282:	d001      	beq.n	8016288 <find_volume+0x274>
 8016284:	230d      	movs	r3, #13
 8016286:	e13e      	b.n	8016506 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801628a:	3338      	adds	r3, #56	; 0x38
 801628c:	3311      	adds	r3, #17
 801628e:	4618      	mov	r0, r3
 8016290:	f7fe f9aa 	bl	80145e8 <ld_word>
 8016294:	4603      	mov	r3, r0
 8016296:	461a      	mov	r2, r3
 8016298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801629a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801629e:	891b      	ldrh	r3, [r3, #8]
 80162a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80162a2:	8992      	ldrh	r2, [r2, #12]
 80162a4:	0952      	lsrs	r2, r2, #5
 80162a6:	b292      	uxth	r2, r2
 80162a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80162ac:	fb02 f201 	mul.w	r2, r2, r1
 80162b0:	1a9b      	subs	r3, r3, r2
 80162b2:	b29b      	uxth	r3, r3
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d001      	beq.n	80162bc <find_volume+0x2a8>
 80162b8:	230d      	movs	r3, #13
 80162ba:	e124      	b.n	8016506 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80162bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162be:	3338      	adds	r3, #56	; 0x38
 80162c0:	3313      	adds	r3, #19
 80162c2:	4618      	mov	r0, r3
 80162c4:	f7fe f990 	bl	80145e8 <ld_word>
 80162c8:	4603      	mov	r3, r0
 80162ca:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80162cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d106      	bne.n	80162e0 <find_volume+0x2cc>
 80162d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162d4:	3338      	adds	r3, #56	; 0x38
 80162d6:	3320      	adds	r3, #32
 80162d8:	4618      	mov	r0, r3
 80162da:	f7fe f99d 	bl	8014618 <ld_dword>
 80162de:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80162e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162e2:	3338      	adds	r3, #56	; 0x38
 80162e4:	330e      	adds	r3, #14
 80162e6:	4618      	mov	r0, r3
 80162e8:	f7fe f97e 	bl	80145e8 <ld_word>
 80162ec:	4603      	mov	r3, r0
 80162ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80162f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d104      	bne.n	8016300 <find_volume+0x2ec>
 80162f6:	230d      	movs	r3, #13
 80162f8:	e105      	b.n	8016506 <find_volume+0x4f2>
 80162fa:	bf00      	nop
 80162fc:	20000204 	.word	0x20000204

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016300:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016304:	4413      	add	r3, r2
 8016306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016308:	8911      	ldrh	r1, [r2, #8]
 801630a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801630c:	8992      	ldrh	r2, [r2, #12]
 801630e:	0952      	lsrs	r2, r2, #5
 8016310:	b292      	uxth	r2, r2
 8016312:	fbb1 f2f2 	udiv	r2, r1, r2
 8016316:	b292      	uxth	r2, r2
 8016318:	4413      	add	r3, r2
 801631a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801631c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016320:	429a      	cmp	r2, r3
 8016322:	d201      	bcs.n	8016328 <find_volume+0x314>
 8016324:	230d      	movs	r3, #13
 8016326:	e0ee      	b.n	8016506 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801632c:	1ad3      	subs	r3, r2, r3
 801632e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016330:	8952      	ldrh	r2, [r2, #10]
 8016332:	fbb3 f3f2 	udiv	r3, r3, r2
 8016336:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801633a:	2b00      	cmp	r3, #0
 801633c:	d101      	bne.n	8016342 <find_volume+0x32e>
 801633e:	230d      	movs	r3, #13
 8016340:	e0e1      	b.n	8016506 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8016342:	2303      	movs	r3, #3
 8016344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801634e:	4293      	cmp	r3, r2
 8016350:	d802      	bhi.n	8016358 <find_volume+0x344>
 8016352:	2302      	movs	r3, #2
 8016354:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801635a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801635e:	4293      	cmp	r3, r2
 8016360:	d802      	bhi.n	8016368 <find_volume+0x354>
 8016362:	2301      	movs	r3, #1
 8016364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801636a:	1c9a      	adds	r2, r3, #2
 801636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801636e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8016370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016372:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016374:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016376:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801637a:	441a      	add	r2, r3
 801637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801637e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8016380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016384:	441a      	add	r2, r3
 8016386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016388:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801638a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801638e:	2b03      	cmp	r3, #3
 8016390:	d11e      	bne.n	80163d0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016394:	3338      	adds	r3, #56	; 0x38
 8016396:	332a      	adds	r3, #42	; 0x2a
 8016398:	4618      	mov	r0, r3
 801639a:	f7fe f925 	bl	80145e8 <ld_word>
 801639e:	4603      	mov	r3, r0
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d001      	beq.n	80163a8 <find_volume+0x394>
 80163a4:	230d      	movs	r3, #13
 80163a6:	e0ae      	b.n	8016506 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80163a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163aa:	891b      	ldrh	r3, [r3, #8]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d001      	beq.n	80163b4 <find_volume+0x3a0>
 80163b0:	230d      	movs	r3, #13
 80163b2:	e0a8      	b.n	8016506 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80163b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163b6:	3338      	adds	r3, #56	; 0x38
 80163b8:	332c      	adds	r3, #44	; 0x2c
 80163ba:	4618      	mov	r0, r3
 80163bc:	f7fe f92c 	bl	8014618 <ld_dword>
 80163c0:	4602      	mov	r2, r0
 80163c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163c4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80163c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163c8:	69db      	ldr	r3, [r3, #28]
 80163ca:	009b      	lsls	r3, r3, #2
 80163cc:	647b      	str	r3, [r7, #68]	; 0x44
 80163ce:	e01f      	b.n	8016410 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80163d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163d2:	891b      	ldrh	r3, [r3, #8]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d101      	bne.n	80163dc <find_volume+0x3c8>
 80163d8:	230d      	movs	r3, #13
 80163da:	e094      	b.n	8016506 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80163dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80163e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163e2:	441a      	add	r2, r3
 80163e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80163e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80163ec:	2b02      	cmp	r3, #2
 80163ee:	d103      	bne.n	80163f8 <find_volume+0x3e4>
 80163f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163f2:	69db      	ldr	r3, [r3, #28]
 80163f4:	005b      	lsls	r3, r3, #1
 80163f6:	e00a      	b.n	801640e <find_volume+0x3fa>
 80163f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163fa:	69da      	ldr	r2, [r3, #28]
 80163fc:	4613      	mov	r3, r2
 80163fe:	005b      	lsls	r3, r3, #1
 8016400:	4413      	add	r3, r2
 8016402:	085a      	lsrs	r2, r3, #1
 8016404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016406:	69db      	ldr	r3, [r3, #28]
 8016408:	f003 0301 	and.w	r3, r3, #1
 801640c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801640e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016412:	6a1a      	ldr	r2, [r3, #32]
 8016414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016416:	899b      	ldrh	r3, [r3, #12]
 8016418:	4619      	mov	r1, r3
 801641a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801641c:	440b      	add	r3, r1
 801641e:	3b01      	subs	r3, #1
 8016420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016422:	8989      	ldrh	r1, [r1, #12]
 8016424:	fbb3 f3f1 	udiv	r3, r3, r1
 8016428:	429a      	cmp	r2, r3
 801642a:	d201      	bcs.n	8016430 <find_volume+0x41c>
 801642c:	230d      	movs	r3, #13
 801642e:	e06a      	b.n	8016506 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016432:	f04f 32ff 	mov.w	r2, #4294967295
 8016436:	619a      	str	r2, [r3, #24]
 8016438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801643a:	699a      	ldr	r2, [r3, #24]
 801643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801643e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8016440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016442:	2280      	movs	r2, #128	; 0x80
 8016444:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016446:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801644a:	2b03      	cmp	r3, #3
 801644c:	d149      	bne.n	80164e2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016450:	3338      	adds	r3, #56	; 0x38
 8016452:	3330      	adds	r3, #48	; 0x30
 8016454:	4618      	mov	r0, r3
 8016456:	f7fe f8c7 	bl	80145e8 <ld_word>
 801645a:	4603      	mov	r3, r0
 801645c:	2b01      	cmp	r3, #1
 801645e:	d140      	bne.n	80164e2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016462:	3301      	adds	r3, #1
 8016464:	4619      	mov	r1, r3
 8016466:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016468:	f7fe fa02 	bl	8014870 <move_window>
 801646c:	4603      	mov	r3, r0
 801646e:	2b00      	cmp	r3, #0
 8016470:	d137      	bne.n	80164e2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8016472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016474:	2200      	movs	r2, #0
 8016476:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801647a:	3338      	adds	r3, #56	; 0x38
 801647c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016480:	4618      	mov	r0, r3
 8016482:	f7fe f8b1 	bl	80145e8 <ld_word>
 8016486:	4603      	mov	r3, r0
 8016488:	461a      	mov	r2, r3
 801648a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801648e:	429a      	cmp	r2, r3
 8016490:	d127      	bne.n	80164e2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016494:	3338      	adds	r3, #56	; 0x38
 8016496:	4618      	mov	r0, r3
 8016498:	f7fe f8be 	bl	8014618 <ld_dword>
 801649c:	4603      	mov	r3, r0
 801649e:	4a1c      	ldr	r2, [pc, #112]	; (8016510 <find_volume+0x4fc>)
 80164a0:	4293      	cmp	r3, r2
 80164a2:	d11e      	bne.n	80164e2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80164a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164a6:	3338      	adds	r3, #56	; 0x38
 80164a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80164ac:	4618      	mov	r0, r3
 80164ae:	f7fe f8b3 	bl	8014618 <ld_dword>
 80164b2:	4603      	mov	r3, r0
 80164b4:	4a17      	ldr	r2, [pc, #92]	; (8016514 <find_volume+0x500>)
 80164b6:	4293      	cmp	r3, r2
 80164b8:	d113      	bne.n	80164e2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80164ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164bc:	3338      	adds	r3, #56	; 0x38
 80164be:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7fe f8a8 	bl	8014618 <ld_dword>
 80164c8:	4602      	mov	r2, r0
 80164ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164cc:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80164ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164d0:	3338      	adds	r3, #56	; 0x38
 80164d2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80164d6:	4618      	mov	r0, r3
 80164d8:	f7fe f89e 	bl	8014618 <ld_dword>
 80164dc:	4602      	mov	r2, r0
 80164de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164e0:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80164e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164e4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80164e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80164ea:	4b0b      	ldr	r3, [pc, #44]	; (8016518 <find_volume+0x504>)
 80164ec:	881b      	ldrh	r3, [r3, #0]
 80164ee:	3301      	adds	r3, #1
 80164f0:	b29a      	uxth	r2, r3
 80164f2:	4b09      	ldr	r3, [pc, #36]	; (8016518 <find_volume+0x504>)
 80164f4:	801a      	strh	r2, [r3, #0]
 80164f6:	4b08      	ldr	r3, [pc, #32]	; (8016518 <find_volume+0x504>)
 80164f8:	881a      	ldrh	r2, [r3, #0]
 80164fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164fc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80164fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016500:	4a06      	ldr	r2, [pc, #24]	; (801651c <find_volume+0x508>)
 8016502:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8016504:	2300      	movs	r3, #0
}
 8016506:	4618      	mov	r0, r3
 8016508:	3758      	adds	r7, #88	; 0x58
 801650a:	46bd      	mov	sp, r7
 801650c:	bd80      	pop	{r7, pc}
 801650e:	bf00      	nop
 8016510:	41615252 	.word	0x41615252
 8016514:	61417272 	.word	0x61417272
 8016518:	20000208 	.word	0x20000208
 801651c:	2000020c 	.word	0x2000020c

08016520 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b084      	sub	sp, #16
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
 8016528:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801652a:	2309      	movs	r3, #9
 801652c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d01c      	beq.n	801656e <validate+0x4e>
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d018      	beq.n	801656e <validate+0x4e>
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d013      	beq.n	801656e <validate+0x4e>
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	889a      	ldrh	r2, [r3, #4]
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	88db      	ldrh	r3, [r3, #6]
 8016550:	429a      	cmp	r2, r3
 8016552:	d10c      	bne.n	801656e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	785b      	ldrb	r3, [r3, #1]
 801655a:	4618      	mov	r0, r3
 801655c:	f7fd ffa6 	bl	80144ac <disk_status>
 8016560:	4603      	mov	r3, r0
 8016562:	f003 0301 	and.w	r3, r3, #1
 8016566:	2b00      	cmp	r3, #0
 8016568:	d101      	bne.n	801656e <validate+0x4e>
			res = FR_OK;
 801656a:	2300      	movs	r3, #0
 801656c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801656e:	7bfb      	ldrb	r3, [r7, #15]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d102      	bne.n	801657a <validate+0x5a>
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	e000      	b.n	801657c <validate+0x5c>
 801657a:	2300      	movs	r3, #0
 801657c:	683a      	ldr	r2, [r7, #0]
 801657e:	6013      	str	r3, [r2, #0]
	return res;
 8016580:	7bfb      	ldrb	r3, [r7, #15]
}
 8016582:	4618      	mov	r0, r3
 8016584:	3710      	adds	r7, #16
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
	...

0801658c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b088      	sub	sp, #32
 8016590:	af00      	add	r7, sp, #0
 8016592:	60f8      	str	r0, [r7, #12]
 8016594:	60b9      	str	r1, [r7, #8]
 8016596:	4613      	mov	r3, r2
 8016598:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801659a:	68bb      	ldr	r3, [r7, #8]
 801659c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801659e:	f107 0310 	add.w	r3, r7, #16
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7ff fc9c 	bl	8015ee0 <get_ldnumber>
 80165a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80165aa:	69fb      	ldr	r3, [r7, #28]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	da01      	bge.n	80165b4 <f_mount+0x28>
 80165b0:	230b      	movs	r3, #11
 80165b2:	e028      	b.n	8016606 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80165b4:	4a16      	ldr	r2, [pc, #88]	; (8016610 <f_mount+0x84>)
 80165b6:	69fb      	ldr	r3, [r7, #28]
 80165b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80165bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80165be:	69bb      	ldr	r3, [r7, #24]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d002      	beq.n	80165ca <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80165c4:	69bb      	ldr	r3, [r7, #24]
 80165c6:	2200      	movs	r2, #0
 80165c8:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d002      	beq.n	80165d6 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	2200      	movs	r2, #0
 80165d4:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80165d6:	68fa      	ldr	r2, [r7, #12]
 80165d8:	490d      	ldr	r1, [pc, #52]	; (8016610 <f_mount+0x84>)
 80165da:	69fb      	ldr	r3, [r7, #28]
 80165dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d002      	beq.n	80165ec <f_mount+0x60>
 80165e6:	79fb      	ldrb	r3, [r7, #7]
 80165e8:	2b01      	cmp	r3, #1
 80165ea:	d001      	beq.n	80165f0 <f_mount+0x64>
 80165ec:	2300      	movs	r3, #0
 80165ee:	e00a      	b.n	8016606 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80165f0:	f107 010c 	add.w	r1, r7, #12
 80165f4:	f107 0308 	add.w	r3, r7, #8
 80165f8:	2200      	movs	r2, #0
 80165fa:	4618      	mov	r0, r3
 80165fc:	f7ff fd0a 	bl	8016014 <find_volume>
 8016600:	4603      	mov	r3, r0
 8016602:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016604:	7dfb      	ldrb	r3, [r7, #23]
}
 8016606:	4618      	mov	r0, r3
 8016608:	3720      	adds	r7, #32
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	20000204 	.word	0x20000204

08016614 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b098      	sub	sp, #96	; 0x60
 8016618:	af00      	add	r7, sp, #0
 801661a:	60f8      	str	r0, [r7, #12]
 801661c:	60b9      	str	r1, [r7, #8]
 801661e:	4613      	mov	r3, r2
 8016620:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d101      	bne.n	801662c <f_open+0x18>
 8016628:	2309      	movs	r3, #9
 801662a:	e188      	b.n	801693e <f_open+0x32a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801662c:	79fb      	ldrb	r3, [r7, #7]
 801662e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016632:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016634:	79fa      	ldrb	r2, [r7, #7]
 8016636:	f107 0110 	add.w	r1, r7, #16
 801663a:	f107 0308 	add.w	r3, r7, #8
 801663e:	4618      	mov	r0, r3
 8016640:	f7ff fce8 	bl	8016014 <find_volume>
 8016644:	4603      	mov	r3, r0
 8016646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801664a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801664e:	2b00      	cmp	r3, #0
 8016650:	f040 816c 	bne.w	801692c <f_open+0x318>
		dj.obj.fs = fs;
 8016654:	693b      	ldr	r3, [r7, #16]
 8016656:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016658:	68ba      	ldr	r2, [r7, #8]
 801665a:	f107 0314 	add.w	r3, r7, #20
 801665e:	4611      	mov	r1, r2
 8016660:	4618      	mov	r0, r3
 8016662:	f7ff fbc7 	bl	8015df4 <follow_path>
 8016666:	4603      	mov	r3, r0
 8016668:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801666c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016670:	2b00      	cmp	r3, #0
 8016672:	d107      	bne.n	8016684 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016674:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016678:	b25b      	sxtb	r3, r3
 801667a:	2b00      	cmp	r3, #0
 801667c:	da02      	bge.n	8016684 <f_open+0x70>
				res = FR_INVALID_NAME;
 801667e:	2306      	movs	r3, #6
 8016680:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016684:	79fb      	ldrb	r3, [r7, #7]
 8016686:	f003 031c 	and.w	r3, r3, #28
 801668a:	2b00      	cmp	r3, #0
 801668c:	d078      	beq.n	8016780 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 801668e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016692:	2b00      	cmp	r3, #0
 8016694:	d010      	beq.n	80166b8 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016696:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801669a:	2b04      	cmp	r3, #4
 801669c:	d107      	bne.n	80166ae <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 801669e:	f107 0314 	add.w	r3, r7, #20
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7ff f8f6 	bl	8015894 <dir_register>
 80166a8:	4603      	mov	r3, r0
 80166aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80166ae:	79fb      	ldrb	r3, [r7, #7]
 80166b0:	f043 0308 	orr.w	r3, r3, #8
 80166b4:	71fb      	strb	r3, [r7, #7]
 80166b6:	e010      	b.n	80166da <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80166b8:	7ebb      	ldrb	r3, [r7, #26]
 80166ba:	f003 0311 	and.w	r3, r3, #17
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d003      	beq.n	80166ca <f_open+0xb6>
					res = FR_DENIED;
 80166c2:	2307      	movs	r3, #7
 80166c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80166c8:	e007      	b.n	80166da <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80166ca:	79fb      	ldrb	r3, [r7, #7]
 80166cc:	f003 0304 	and.w	r3, r3, #4
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d002      	beq.n	80166da <f_open+0xc6>
 80166d4:	2308      	movs	r3, #8
 80166d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80166da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d168      	bne.n	80167b4 <f_open+0x1a0>
 80166e2:	79fb      	ldrb	r3, [r7, #7]
 80166e4:	f003 0308 	and.w	r3, r3, #8
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d063      	beq.n	80167b4 <f_open+0x1a0>
				dw = GET_FATTIME();
 80166ec:	f7fa fd36 	bl	801115c <get_fattime>
 80166f0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80166f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166f4:	330e      	adds	r3, #14
 80166f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80166f8:	4618      	mov	r0, r3
 80166fa:	f7fd ffcb 	bl	8014694 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80166fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016700:	3316      	adds	r3, #22
 8016702:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016704:	4618      	mov	r0, r3
 8016706:	f7fd ffc5 	bl	8014694 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801670c:	330b      	adds	r3, #11
 801670e:	2220      	movs	r2, #32
 8016710:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016712:	693b      	ldr	r3, [r7, #16]
 8016714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016716:	4611      	mov	r1, r2
 8016718:	4618      	mov	r0, r3
 801671a:	f7fe fe31 	bl	8015380 <ld_clust>
 801671e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016720:	693b      	ldr	r3, [r7, #16]
 8016722:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016724:	2200      	movs	r2, #0
 8016726:	4618      	mov	r0, r3
 8016728:	f7fe fe49 	bl	80153be <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801672e:	331c      	adds	r3, #28
 8016730:	2100      	movs	r1, #0
 8016732:	4618      	mov	r0, r3
 8016734:	f7fd ffae 	bl	8014694 <st_dword>
					fs->wflag = 1;
 8016738:	693b      	ldr	r3, [r7, #16]
 801673a:	2201      	movs	r2, #1
 801673c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801673e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016740:	2b00      	cmp	r3, #0
 8016742:	d037      	beq.n	80167b4 <f_open+0x1a0>
						dw = fs->winsect;
 8016744:	693b      	ldr	r3, [r7, #16]
 8016746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016748:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801674a:	f107 0314 	add.w	r3, r7, #20
 801674e:	2200      	movs	r2, #0
 8016750:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016752:	4618      	mov	r0, r3
 8016754:	f7fe fb39 	bl	8014dca <remove_chain>
 8016758:	4603      	mov	r3, r0
 801675a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801675e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016762:	2b00      	cmp	r3, #0
 8016764:	d126      	bne.n	80167b4 <f_open+0x1a0>
							res = move_window(fs, dw);
 8016766:	693b      	ldr	r3, [r7, #16]
 8016768:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801676a:	4618      	mov	r0, r3
 801676c:	f7fe f880 	bl	8014870 <move_window>
 8016770:	4603      	mov	r3, r0
 8016772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016776:	693b      	ldr	r3, [r7, #16]
 8016778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801677a:	3a01      	subs	r2, #1
 801677c:	615a      	str	r2, [r3, #20]
 801677e:	e019      	b.n	80167b4 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016784:	2b00      	cmp	r3, #0
 8016786:	d115      	bne.n	80167b4 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016788:	7ebb      	ldrb	r3, [r7, #26]
 801678a:	f003 0310 	and.w	r3, r3, #16
 801678e:	2b00      	cmp	r3, #0
 8016790:	d003      	beq.n	801679a <f_open+0x186>
					res = FR_NO_FILE;
 8016792:	2304      	movs	r3, #4
 8016794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016798:	e00c      	b.n	80167b4 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801679a:	79fb      	ldrb	r3, [r7, #7]
 801679c:	f003 0302 	and.w	r3, r3, #2
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d007      	beq.n	80167b4 <f_open+0x1a0>
 80167a4:	7ebb      	ldrb	r3, [r7, #26]
 80167a6:	f003 0301 	and.w	r3, r3, #1
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d002      	beq.n	80167b4 <f_open+0x1a0>
						res = FR_DENIED;
 80167ae:	2307      	movs	r3, #7
 80167b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80167b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d10f      	bne.n	80167dc <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80167bc:	79fb      	ldrb	r3, [r7, #7]
 80167be:	f003 0308 	and.w	r3, r3, #8
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d003      	beq.n	80167ce <f_open+0x1ba>
				mode |= FA_MODIFIED;
 80167c6:	79fb      	ldrb	r3, [r7, #7]
 80167c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80167ce:	693b      	ldr	r3, [r7, #16]
 80167d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80167d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80167dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	f040 80a3 	bne.w	801692c <f_open+0x318>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80167e6:	693b      	ldr	r3, [r7, #16]
 80167e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167ea:	4611      	mov	r1, r2
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7fe fdc7 	bl	8015380 <ld_clust>
 80167f2:	4602      	mov	r2, r0
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80167f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167fa:	331c      	adds	r3, #28
 80167fc:	4618      	mov	r0, r3
 80167fe:	f7fd ff0b 	bl	8014618 <ld_dword>
 8016802:	4602      	mov	r2, r0
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	2200      	movs	r2, #0
 801680c:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801680e:	693a      	ldr	r2, [r7, #16]
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	88da      	ldrh	r2, [r3, #6]
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	79fa      	ldrb	r2, [r7, #7]
 8016820:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	2200      	movs	r2, #0
 8016826:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	2200      	movs	r2, #0
 801682c:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	2200      	movs	r2, #0
 8016832:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	332c      	adds	r3, #44	; 0x2c
 8016838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801683c:	2100      	movs	r1, #0
 801683e:	4618      	mov	r0, r3
 8016840:	f7fd ff75 	bl	801472e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016844:	79fb      	ldrb	r3, [r7, #7]
 8016846:	f003 0320 	and.w	r3, r3, #32
 801684a:	2b00      	cmp	r3, #0
 801684c:	d06e      	beq.n	801692c <f_open+0x318>
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	68db      	ldr	r3, [r3, #12]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d06a      	beq.n	801692c <f_open+0x318>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	68da      	ldr	r2, [r3, #12]
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801685e:	693b      	ldr	r3, [r7, #16]
 8016860:	895b      	ldrh	r3, [r3, #10]
 8016862:	461a      	mov	r2, r3
 8016864:	693b      	ldr	r3, [r7, #16]
 8016866:	899b      	ldrh	r3, [r3, #12]
 8016868:	fb03 f302 	mul.w	r3, r3, r2
 801686c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	689b      	ldr	r3, [r3, #8]
 8016872:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	68db      	ldr	r3, [r3, #12]
 8016878:	657b      	str	r3, [r7, #84]	; 0x54
 801687a:	e016      	b.n	80168aa <f_open+0x296>
					clst = get_fat(&fp->obj, clst);
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016880:	4618      	mov	r0, r3
 8016882:	f7fe f8b2 	bl	80149ea <get_fat>
 8016886:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8016888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801688a:	2b01      	cmp	r3, #1
 801688c:	d802      	bhi.n	8016894 <f_open+0x280>
 801688e:	2302      	movs	r3, #2
 8016890:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016896:	f1b3 3fff 	cmp.w	r3, #4294967295
 801689a:	d102      	bne.n	80168a2 <f_open+0x28e>
 801689c:	2301      	movs	r3, #1
 801689e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80168a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80168a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168a6:	1ad3      	subs	r3, r2, r3
 80168a8:	657b      	str	r3, [r7, #84]	; 0x54
 80168aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d103      	bne.n	80168ba <f_open+0x2a6>
 80168b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80168b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168b6:	429a      	cmp	r2, r3
 80168b8:	d8e0      	bhi.n	801687c <f_open+0x268>
				}
				fp->clust = clst;
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80168be:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80168c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d131      	bne.n	801692c <f_open+0x318>
 80168c8:	693b      	ldr	r3, [r7, #16]
 80168ca:	899b      	ldrh	r3, [r3, #12]
 80168cc:	461a      	mov	r2, r3
 80168ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80168d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80168d4:	fb02 f201 	mul.w	r2, r2, r1
 80168d8:	1a9b      	subs	r3, r3, r2
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d026      	beq.n	801692c <f_open+0x318>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80168de:	693b      	ldr	r3, [r7, #16]
 80168e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7fe f862 	bl	80149ac <clust2sect>
 80168e8:	6478      	str	r0, [r7, #68]	; 0x44
 80168ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d103      	bne.n	80168f8 <f_open+0x2e4>
						res = FR_INT_ERR;
 80168f0:	2302      	movs	r3, #2
 80168f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80168f6:	e019      	b.n	801692c <f_open+0x318>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80168f8:	693b      	ldr	r3, [r7, #16]
 80168fa:	899b      	ldrh	r3, [r3, #12]
 80168fc:	461a      	mov	r2, r3
 80168fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016900:	fbb3 f2f2 	udiv	r2, r3, r2
 8016904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016906:	441a      	add	r2, r3
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801690c:	693b      	ldr	r3, [r7, #16]
 801690e:	7858      	ldrb	r0, [r3, #1]
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	69da      	ldr	r2, [r3, #28]
 801691a:	2301      	movs	r3, #1
 801691c:	f7fd fe06 	bl	801452c <disk_read>
 8016920:	4603      	mov	r3, r0
 8016922:	2b00      	cmp	r3, #0
 8016924:	d002      	beq.n	801692c <f_open+0x318>
 8016926:	2301      	movs	r3, #1
 8016928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801692c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016930:	2b00      	cmp	r3, #0
 8016932:	d002      	beq.n	801693a <f_open+0x326>
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	2200      	movs	r2, #0
 8016938:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801693a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801693e:	4618      	mov	r0, r3
 8016940:	3760      	adds	r7, #96	; 0x60
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}

08016946 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016946:	b580      	push	{r7, lr}
 8016948:	b08c      	sub	sp, #48	; 0x30
 801694a:	af00      	add	r7, sp, #0
 801694c:	60f8      	str	r0, [r7, #12]
 801694e:	60b9      	str	r1, [r7, #8]
 8016950:	607a      	str	r2, [r7, #4]
 8016952:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016954:	68bb      	ldr	r3, [r7, #8]
 8016956:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016958:	683b      	ldr	r3, [r7, #0]
 801695a:	2200      	movs	r2, #0
 801695c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	f107 0210 	add.w	r2, r7, #16
 8016964:	4611      	mov	r1, r2
 8016966:	4618      	mov	r0, r3
 8016968:	f7ff fdda 	bl	8016520 <validate>
 801696c:	4603      	mov	r3, r0
 801696e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016976:	2b00      	cmp	r3, #0
 8016978:	d107      	bne.n	801698a <f_write+0x44>
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	7c5b      	ldrb	r3, [r3, #17]
 801697e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016986:	2b00      	cmp	r3, #0
 8016988:	d002      	beq.n	8016990 <f_write+0x4a>
 801698a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801698e:	e16a      	b.n	8016c66 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	7c1b      	ldrb	r3, [r3, #16]
 8016994:	f003 0302 	and.w	r3, r3, #2
 8016998:	2b00      	cmp	r3, #0
 801699a:	d101      	bne.n	80169a0 <f_write+0x5a>
 801699c:	2307      	movs	r3, #7
 801699e:	e162      	b.n	8016c66 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	695a      	ldr	r2, [r3, #20]
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	441a      	add	r2, r3
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	695b      	ldr	r3, [r3, #20]
 80169ac:	429a      	cmp	r2, r3
 80169ae:	f080 814c 	bcs.w	8016c4a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	695b      	ldr	r3, [r3, #20]
 80169b6:	43db      	mvns	r3, r3
 80169b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80169ba:	e146      	b.n	8016c4a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	695b      	ldr	r3, [r3, #20]
 80169c0:	693a      	ldr	r2, [r7, #16]
 80169c2:	8992      	ldrh	r2, [r2, #12]
 80169c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80169c8:	fb02 f201 	mul.w	r2, r2, r1
 80169cc:	1a9b      	subs	r3, r3, r2
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	f040 80f1 	bne.w	8016bb6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	695b      	ldr	r3, [r3, #20]
 80169d8:	693a      	ldr	r2, [r7, #16]
 80169da:	8992      	ldrh	r2, [r2, #12]
 80169dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80169e0:	693a      	ldr	r2, [r7, #16]
 80169e2:	8952      	ldrh	r2, [r2, #10]
 80169e4:	3a01      	subs	r2, #1
 80169e6:	4013      	ands	r3, r2
 80169e8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80169ea:	69bb      	ldr	r3, [r7, #24]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d143      	bne.n	8016a78 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	695b      	ldr	r3, [r3, #20]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d10c      	bne.n	8016a12 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	689b      	ldr	r3, [r3, #8]
 80169fc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80169fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d11a      	bne.n	8016a3a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	2100      	movs	r1, #0
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7fe fa43 	bl	8014e94 <create_chain>
 8016a0e:	62b8      	str	r0, [r7, #40]	; 0x28
 8016a10:	e013      	b.n	8016a3a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d007      	beq.n	8016a2a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	695b      	ldr	r3, [r3, #20]
 8016a1e:	4619      	mov	r1, r3
 8016a20:	68f8      	ldr	r0, [r7, #12]
 8016a22:	f7fe facf 	bl	8014fc4 <clmt_clust>
 8016a26:	62b8      	str	r0, [r7, #40]	; 0x28
 8016a28:	e007      	b.n	8016a3a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016a2a:	68fa      	ldr	r2, [r7, #12]
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	699b      	ldr	r3, [r3, #24]
 8016a30:	4619      	mov	r1, r3
 8016a32:	4610      	mov	r0, r2
 8016a34:	f7fe fa2e 	bl	8014e94 <create_chain>
 8016a38:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	f000 8109 	beq.w	8016c54 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a44:	2b01      	cmp	r3, #1
 8016a46:	d104      	bne.n	8016a52 <f_write+0x10c>
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	2202      	movs	r2, #2
 8016a4c:	745a      	strb	r2, [r3, #17]
 8016a4e:	2302      	movs	r3, #2
 8016a50:	e109      	b.n	8016c66 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a58:	d104      	bne.n	8016a64 <f_write+0x11e>
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	2201      	movs	r2, #1
 8016a5e:	745a      	strb	r2, [r3, #17]
 8016a60:	2301      	movs	r3, #1
 8016a62:	e100      	b.n	8016c66 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a68:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	689b      	ldr	r3, [r3, #8]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d102      	bne.n	8016a78 <f_write+0x132>
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a76:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	7c1b      	ldrb	r3, [r3, #16]
 8016a7c:	b25b      	sxtb	r3, r3
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	da18      	bge.n	8016ab4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	7858      	ldrb	r0, [r3, #1]
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	69da      	ldr	r2, [r3, #28]
 8016a90:	2301      	movs	r3, #1
 8016a92:	f7fd fd6b 	bl	801456c <disk_write>
 8016a96:	4603      	mov	r3, r0
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d004      	beq.n	8016aa6 <f_write+0x160>
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	2201      	movs	r2, #1
 8016aa0:	745a      	strb	r2, [r3, #17]
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	e0df      	b.n	8016c66 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	7c1b      	ldrb	r3, [r3, #16]
 8016aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016aae:	b2da      	uxtb	r2, r3
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016ab4:	693a      	ldr	r2, [r7, #16]
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	699b      	ldr	r3, [r3, #24]
 8016aba:	4619      	mov	r1, r3
 8016abc:	4610      	mov	r0, r2
 8016abe:	f7fd ff75 	bl	80149ac <clust2sect>
 8016ac2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016ac4:	697b      	ldr	r3, [r7, #20]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d104      	bne.n	8016ad4 <f_write+0x18e>
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	2202      	movs	r2, #2
 8016ace:	745a      	strb	r2, [r3, #17]
 8016ad0:	2302      	movs	r3, #2
 8016ad2:	e0c8      	b.n	8016c66 <f_write+0x320>
			sect += csect;
 8016ad4:	697a      	ldr	r2, [r7, #20]
 8016ad6:	69bb      	ldr	r3, [r7, #24]
 8016ad8:	4413      	add	r3, r2
 8016ada:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016adc:	693b      	ldr	r3, [r7, #16]
 8016ade:	899b      	ldrh	r3, [r3, #12]
 8016ae0:	461a      	mov	r2, r3
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8016ae8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016aea:	6a3b      	ldr	r3, [r7, #32]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d043      	beq.n	8016b78 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016af0:	69ba      	ldr	r2, [r7, #24]
 8016af2:	6a3b      	ldr	r3, [r7, #32]
 8016af4:	4413      	add	r3, r2
 8016af6:	693a      	ldr	r2, [r7, #16]
 8016af8:	8952      	ldrh	r2, [r2, #10]
 8016afa:	4293      	cmp	r3, r2
 8016afc:	d905      	bls.n	8016b0a <f_write+0x1c4>
					cc = fs->csize - csect;
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	895b      	ldrh	r3, [r3, #10]
 8016b02:	461a      	mov	r2, r3
 8016b04:	69bb      	ldr	r3, [r7, #24]
 8016b06:	1ad3      	subs	r3, r2, r3
 8016b08:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016b0a:	693b      	ldr	r3, [r7, #16]
 8016b0c:	7858      	ldrb	r0, [r3, #1]
 8016b0e:	6a3b      	ldr	r3, [r7, #32]
 8016b10:	697a      	ldr	r2, [r7, #20]
 8016b12:	69f9      	ldr	r1, [r7, #28]
 8016b14:	f7fd fd2a 	bl	801456c <disk_write>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d004      	beq.n	8016b28 <f_write+0x1e2>
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	2201      	movs	r2, #1
 8016b22:	745a      	strb	r2, [r3, #17]
 8016b24:	2301      	movs	r3, #1
 8016b26:	e09e      	b.n	8016c66 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	69da      	ldr	r2, [r3, #28]
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	1ad3      	subs	r3, r2, r3
 8016b30:	6a3a      	ldr	r2, [r7, #32]
 8016b32:	429a      	cmp	r2, r3
 8016b34:	d918      	bls.n	8016b68 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	69da      	ldr	r2, [r3, #28]
 8016b40:	697b      	ldr	r3, [r7, #20]
 8016b42:	1ad3      	subs	r3, r2, r3
 8016b44:	693a      	ldr	r2, [r7, #16]
 8016b46:	8992      	ldrh	r2, [r2, #12]
 8016b48:	fb02 f303 	mul.w	r3, r2, r3
 8016b4c:	69fa      	ldr	r2, [r7, #28]
 8016b4e:	18d1      	adds	r1, r2, r3
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	899b      	ldrh	r3, [r3, #12]
 8016b54:	461a      	mov	r2, r3
 8016b56:	f7fd fdc9 	bl	80146ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	7c1b      	ldrb	r3, [r3, #16]
 8016b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016b62:	b2da      	uxtb	r2, r3
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016b68:	693b      	ldr	r3, [r7, #16]
 8016b6a:	899b      	ldrh	r3, [r3, #12]
 8016b6c:	461a      	mov	r2, r3
 8016b6e:	6a3b      	ldr	r3, [r7, #32]
 8016b70:	fb02 f303 	mul.w	r3, r2, r3
 8016b74:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8016b76:	e04b      	b.n	8016c10 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	69db      	ldr	r3, [r3, #28]
 8016b7c:	697a      	ldr	r2, [r7, #20]
 8016b7e:	429a      	cmp	r2, r3
 8016b80:	d016      	beq.n	8016bb0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	695a      	ldr	r2, [r3, #20]
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016b8a:	429a      	cmp	r2, r3
 8016b8c:	d210      	bcs.n	8016bb0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8016b8e:	693b      	ldr	r3, [r7, #16]
 8016b90:	7858      	ldrb	r0, [r3, #1]
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016b98:	2301      	movs	r3, #1
 8016b9a:	697a      	ldr	r2, [r7, #20]
 8016b9c:	f7fd fcc6 	bl	801452c <disk_read>
 8016ba0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d004      	beq.n	8016bb0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	2201      	movs	r2, #1
 8016baa:	745a      	strb	r2, [r3, #17]
 8016bac:	2301      	movs	r3, #1
 8016bae:	e05a      	b.n	8016c66 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	697a      	ldr	r2, [r7, #20]
 8016bb4:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016bb6:	693b      	ldr	r3, [r7, #16]
 8016bb8:	899b      	ldrh	r3, [r3, #12]
 8016bba:	4618      	mov	r0, r3
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	695b      	ldr	r3, [r3, #20]
 8016bc0:	693a      	ldr	r2, [r7, #16]
 8016bc2:	8992      	ldrh	r2, [r2, #12]
 8016bc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8016bc8:	fb02 f201 	mul.w	r2, r2, r1
 8016bcc:	1a9b      	subs	r3, r3, r2
 8016bce:	1ac3      	subs	r3, r0, r3
 8016bd0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	429a      	cmp	r2, r3
 8016bd8:	d901      	bls.n	8016bde <f_write+0x298>
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	695b      	ldr	r3, [r3, #20]
 8016be8:	693a      	ldr	r2, [r7, #16]
 8016bea:	8992      	ldrh	r2, [r2, #12]
 8016bec:	fbb3 f0f2 	udiv	r0, r3, r2
 8016bf0:	fb02 f200 	mul.w	r2, r2, r0
 8016bf4:	1a9b      	subs	r3, r3, r2
 8016bf6:	440b      	add	r3, r1
 8016bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bfa:	69f9      	ldr	r1, [r7, #28]
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f7fd fd75 	bl	80146ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	7c1b      	ldrb	r3, [r3, #16]
 8016c06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016c0a:	b2da      	uxtb	r2, r3
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016c10:	69fa      	ldr	r2, [r7, #28]
 8016c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c14:	4413      	add	r3, r2
 8016c16:	61fb      	str	r3, [r7, #28]
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	695a      	ldr	r2, [r3, #20]
 8016c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c1e:	441a      	add	r2, r3
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	615a      	str	r2, [r3, #20]
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	68da      	ldr	r2, [r3, #12]
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	695b      	ldr	r3, [r3, #20]
 8016c2c:	429a      	cmp	r2, r3
 8016c2e:	bf38      	it	cc
 8016c30:	461a      	movcc	r2, r3
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	60da      	str	r2, [r3, #12]
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	681a      	ldr	r2, [r3, #0]
 8016c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c3c:	441a      	add	r2, r3
 8016c3e:	683b      	ldr	r3, [r7, #0]
 8016c40:	601a      	str	r2, [r3, #0]
 8016c42:	687a      	ldr	r2, [r7, #4]
 8016c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c46:	1ad3      	subs	r3, r2, r3
 8016c48:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	f47f aeb5 	bne.w	80169bc <f_write+0x76>
 8016c52:	e000      	b.n	8016c56 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016c54:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	7c1b      	ldrb	r3, [r3, #16]
 8016c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c5e:	b2da      	uxtb	r2, r3
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8016c64:	2300      	movs	r3, #0
}
 8016c66:	4618      	mov	r0, r3
 8016c68:	3730      	adds	r7, #48	; 0x30
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	bd80      	pop	{r7, pc}

08016c6e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016c6e:	b580      	push	{r7, lr}
 8016c70:	b086      	sub	sp, #24
 8016c72:	af00      	add	r7, sp, #0
 8016c74:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	f107 0208 	add.w	r2, r7, #8
 8016c7c:	4611      	mov	r1, r2
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f7ff fc4e 	bl	8016520 <validate>
 8016c84:	4603      	mov	r3, r0
 8016c86:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016c88:	7dfb      	ldrb	r3, [r7, #23]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d168      	bne.n	8016d60 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	7c1b      	ldrb	r3, [r3, #16]
 8016c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d062      	beq.n	8016d60 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	7c1b      	ldrb	r3, [r3, #16]
 8016c9e:	b25b      	sxtb	r3, r3
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	da15      	bge.n	8016cd0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016ca4:	68bb      	ldr	r3, [r7, #8]
 8016ca6:	7858      	ldrb	r0, [r3, #1]
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	69da      	ldr	r2, [r3, #28]
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	f7fd fc5a 	bl	801456c <disk_write>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d001      	beq.n	8016cc2 <f_sync+0x54>
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	e04f      	b.n	8016d62 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	7c1b      	ldrb	r3, [r3, #16]
 8016cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016cca:	b2da      	uxtb	r2, r3
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8016cd0:	f7fa fa44 	bl	801115c <get_fattime>
 8016cd4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8016cd6:	68ba      	ldr	r2, [r7, #8]
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	6a1b      	ldr	r3, [r3, #32]
 8016cdc:	4619      	mov	r1, r3
 8016cde:	4610      	mov	r0, r2
 8016ce0:	f7fd fdc6 	bl	8014870 <move_window>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8016ce8:	7dfb      	ldrb	r3, [r7, #23]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d138      	bne.n	8016d60 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cf2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	330b      	adds	r3, #11
 8016cf8:	781a      	ldrb	r2, [r3, #0]
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	330b      	adds	r3, #11
 8016cfe:	f042 0220 	orr.w	r2, r2, #32
 8016d02:	b2d2      	uxtb	r2, r2
 8016d04:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	6818      	ldr	r0, [r3, #0]
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	689b      	ldr	r3, [r3, #8]
 8016d0e:	461a      	mov	r2, r3
 8016d10:	68f9      	ldr	r1, [r7, #12]
 8016d12:	f7fe fb54 	bl	80153be <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	f103 021c 	add.w	r2, r3, #28
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	68db      	ldr	r3, [r3, #12]
 8016d20:	4619      	mov	r1, r3
 8016d22:	4610      	mov	r0, r2
 8016d24:	f7fd fcb6 	bl	8014694 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	3316      	adds	r3, #22
 8016d2c:	6939      	ldr	r1, [r7, #16]
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7fd fcb0 	bl	8014694 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	3312      	adds	r3, #18
 8016d38:	2100      	movs	r1, #0
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7fd fc8f 	bl	801465e <st_word>
					fs->wflag = 1;
 8016d40:	68bb      	ldr	r3, [r7, #8]
 8016d42:	2201      	movs	r2, #1
 8016d44:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8016d46:	68bb      	ldr	r3, [r7, #8]
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f7fd fdbf 	bl	80148cc <sync_fs>
 8016d4e:	4603      	mov	r3, r0
 8016d50:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	7c1b      	ldrb	r3, [r3, #16]
 8016d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016d5a:	b2da      	uxtb	r2, r3
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8016d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d62:	4618      	mov	r0, r3
 8016d64:	3718      	adds	r7, #24
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}

08016d6a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8016d6a:	b580      	push	{r7, lr}
 8016d6c:	b084      	sub	sp, #16
 8016d6e:	af00      	add	r7, sp, #0
 8016d70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8016d72:	6878      	ldr	r0, [r7, #4]
 8016d74:	f7ff ff7b 	bl	8016c6e <f_sync>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8016d7c:	7bfb      	ldrb	r3, [r7, #15]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d10e      	bne.n	8016da0 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	f107 0208 	add.w	r2, r7, #8
 8016d88:	4611      	mov	r1, r2
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f7ff fbc8 	bl	8016520 <validate>
 8016d90:	4603      	mov	r3, r0
 8016d92:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8016d94:	7bfb      	ldrb	r3, [r7, #15]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d102      	bne.n	8016da0 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8016da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016da2:	4618      	mov	r0, r3
 8016da4:	3710      	adds	r7, #16
 8016da6:	46bd      	mov	sp, r7
 8016da8:	bd80      	pop	{r7, pc}

08016daa <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8016daa:	b580      	push	{r7, lr}
 8016dac:	b086      	sub	sp, #24
 8016dae:	af00      	add	r7, sp, #0
 8016db0:	6078      	str	r0, [r7, #4]
 8016db2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d101      	bne.n	8016dbe <f_opendir+0x14>
 8016dba:	2309      	movs	r3, #9
 8016dbc:	e04c      	b.n	8016e58 <f_opendir+0xae>

	/* Get logical drive */
	obj = &dp->obj;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8016dc2:	f107 010c 	add.w	r1, r7, #12
 8016dc6:	463b      	mov	r3, r7
 8016dc8:	2200      	movs	r2, #0
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f7ff f922 	bl	8016014 <find_volume>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016dd4:	7dfb      	ldrb	r3, [r7, #23]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d137      	bne.n	8016e4a <f_opendir+0xa0>
		obj->fs = fs;
 8016dda:	68fa      	ldr	r2, [r7, #12]
 8016ddc:	693b      	ldr	r3, [r7, #16]
 8016dde:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8016de0:	683b      	ldr	r3, [r7, #0]
 8016de2:	4619      	mov	r1, r3
 8016de4:	6878      	ldr	r0, [r7, #4]
 8016de6:	f7ff f805 	bl	8015df4 <follow_path>
 8016dea:	4603      	mov	r3, r0
 8016dec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8016dee:	7dfb      	ldrb	r3, [r7, #23]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d125      	bne.n	8016e40 <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8016dfa:	b25b      	sxtb	r3, r3
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	db12      	blt.n	8016e26 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8016e00:	693b      	ldr	r3, [r7, #16]
 8016e02:	799b      	ldrb	r3, [r3, #6]
 8016e04:	f003 0310 	and.w	r3, r3, #16
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d00a      	beq.n	8016e22 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8016e0c:	68fa      	ldr	r2, [r7, #12]
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	69db      	ldr	r3, [r3, #28]
 8016e12:	4619      	mov	r1, r3
 8016e14:	4610      	mov	r0, r2
 8016e16:	f7fe fab3 	bl	8015380 <ld_clust>
 8016e1a:	4602      	mov	r2, r0
 8016e1c:	693b      	ldr	r3, [r7, #16]
 8016e1e:	609a      	str	r2, [r3, #8]
 8016e20:	e001      	b.n	8016e26 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8016e22:	2305      	movs	r3, #5
 8016e24:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8016e26:	7dfb      	ldrb	r3, [r7, #23]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d109      	bne.n	8016e40 <f_opendir+0x96>
				obj->id = fs->id;
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	88da      	ldrh	r2, [r3, #6]
 8016e30:	693b      	ldr	r3, [r7, #16]
 8016e32:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8016e34:	2100      	movs	r1, #0
 8016e36:	6878      	ldr	r0, [r7, #4]
 8016e38:	f7fe f8fc 	bl	8015034 <dir_sdi>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	75fb      	strb	r3, [r7, #23]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8016e40:	7dfb      	ldrb	r3, [r7, #23]
 8016e42:	2b04      	cmp	r3, #4
 8016e44:	d101      	bne.n	8016e4a <f_opendir+0xa0>
 8016e46:	2305      	movs	r3, #5
 8016e48:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8016e4a:	7dfb      	ldrb	r3, [r7, #23]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d002      	beq.n	8016e56 <f_opendir+0xac>
 8016e50:	693b      	ldr	r3, [r7, #16]
 8016e52:	2200      	movs	r2, #0
 8016e54:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e58:	4618      	mov	r0, r3
 8016e5a:	3718      	adds	r7, #24
 8016e5c:	46bd      	mov	sp, r7
 8016e5e:	bd80      	pop	{r7, pc}

08016e60 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b084      	sub	sp, #16
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	f107 0208 	add.w	r2, r7, #8
 8016e6e:	4611      	mov	r1, r2
 8016e70:	4618      	mov	r0, r3
 8016e72:	f7ff fb55 	bl	8016520 <validate>
 8016e76:	4603      	mov	r3, r0
 8016e78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016e7a:	7bfb      	ldrb	r3, [r7, #15]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d102      	bne.n	8016e86 <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	2200      	movs	r2, #0
 8016e84:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8016e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3710      	adds	r7, #16
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}

08016e90 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b096      	sub	sp, #88	; 0x58
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8016e98:	f107 0108 	add.w	r1, r7, #8
 8016e9c:	1d3b      	adds	r3, r7, #4
 8016e9e:	2202      	movs	r2, #2
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f7ff f8b7 	bl	8016014 <find_volume>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8016eac:	68bb      	ldr	r3, [r7, #8]
 8016eae:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8016eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	f040 80f2 	bne.w	801709e <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8016eba:	687a      	ldr	r2, [r7, #4]
 8016ebc:	f107 030c 	add.w	r3, r7, #12
 8016ec0:	4611      	mov	r1, r2
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7fe ff96 	bl	8015df4 <follow_path>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8016ece:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d102      	bne.n	8016edc <f_mkdir+0x4c>
 8016ed6:	2308      	movs	r3, #8
 8016ed8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8016edc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ee0:	2b04      	cmp	r3, #4
 8016ee2:	f040 80dc 	bne.w	801709e <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8016ee6:	f107 030c 	add.w	r3, r7, #12
 8016eea:	2100      	movs	r1, #0
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7fd ffd1 	bl	8014e94 <create_chain>
 8016ef2:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8016ef4:	68bb      	ldr	r3, [r7, #8]
 8016ef6:	895b      	ldrh	r3, [r3, #10]
 8016ef8:	461a      	mov	r2, r3
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	899b      	ldrh	r3, [r3, #12]
 8016efe:	fb03 f302 	mul.w	r3, r3, r2
 8016f02:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8016f04:	2300      	movs	r3, #0
 8016f06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8016f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d102      	bne.n	8016f16 <f_mkdir+0x86>
 8016f10:	2307      	movs	r3, #7
 8016f12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8016f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f18:	2b01      	cmp	r3, #1
 8016f1a:	d102      	bne.n	8016f22 <f_mkdir+0x92>
 8016f1c:	2302      	movs	r3, #2
 8016f1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f28:	d102      	bne.n	8016f30 <f_mkdir+0xa0>
 8016f2a:	2301      	movs	r3, #1
 8016f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8016f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d106      	bne.n	8016f46 <f_mkdir+0xb6>
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f7fd fc54 	bl	80147e8 <sync_window>
 8016f40:	4603      	mov	r3, r0
 8016f42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8016f46:	f7fa f909 	bl	801115c <get_fattime>
 8016f4a:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8016f4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d16c      	bne.n	801702e <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8016f54:	68bb      	ldr	r3, [r7, #8]
 8016f56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f7fd fd27 	bl	80149ac <clust2sect>
 8016f5e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8016f60:	68bb      	ldr	r3, [r7, #8]
 8016f62:	3338      	adds	r3, #56	; 0x38
 8016f64:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8016f66:	68bb      	ldr	r3, [r7, #8]
 8016f68:	899b      	ldrh	r3, [r3, #12]
 8016f6a:	461a      	mov	r2, r3
 8016f6c:	2100      	movs	r1, #0
 8016f6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016f70:	f7fd fbdd 	bl	801472e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8016f74:	220b      	movs	r2, #11
 8016f76:	2120      	movs	r1, #32
 8016f78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016f7a:	f7fd fbd8 	bl	801472e <mem_set>
					dir[DIR_Name] = '.';
 8016f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f80:	222e      	movs	r2, #46	; 0x2e
 8016f82:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8016f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f86:	330b      	adds	r3, #11
 8016f88:	2210      	movs	r2, #16
 8016f8a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8016f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f8e:	3316      	adds	r3, #22
 8016f90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016f92:	4618      	mov	r0, r3
 8016f94:	f7fd fb7e 	bl	8014694 <st_dword>
					st_clust(fs, dir, dcl);
 8016f98:	68bb      	ldr	r3, [r7, #8]
 8016f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f7fe fa0d 	bl	80153be <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8016fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fa6:	3320      	adds	r3, #32
 8016fa8:	2220      	movs	r2, #32
 8016faa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7fd fb9d 	bl	80146ec <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8016fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fb4:	3321      	adds	r3, #33	; 0x21
 8016fb6:	222e      	movs	r2, #46	; 0x2e
 8016fb8:	701a      	strb	r2, [r3, #0]
 8016fba:	697b      	ldr	r3, [r7, #20]
 8016fbc:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8016fbe:	68bb      	ldr	r3, [r7, #8]
 8016fc0:	781b      	ldrb	r3, [r3, #0]
 8016fc2:	2b03      	cmp	r3, #3
 8016fc4:	d106      	bne.n	8016fd4 <f_mkdir+0x144>
 8016fc6:	68bb      	ldr	r3, [r7, #8]
 8016fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016fcc:	429a      	cmp	r2, r3
 8016fce:	d101      	bne.n	8016fd4 <f_mkdir+0x144>
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8016fd4:	68b8      	ldr	r0, [r7, #8]
 8016fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fd8:	3320      	adds	r3, #32
 8016fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016fdc:	4619      	mov	r1, r3
 8016fde:	f7fe f9ee 	bl	80153be <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016fe2:	68bb      	ldr	r3, [r7, #8]
 8016fe4:	895b      	ldrh	r3, [r3, #10]
 8016fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8016fe8:	e01c      	b.n	8017024 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8016fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fec:	1c5a      	adds	r2, r3, #1
 8016fee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016ff0:	68ba      	ldr	r2, [r7, #8]
 8016ff2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8016ff4:	68bb      	ldr	r3, [r7, #8]
 8016ff6:	2201      	movs	r2, #1
 8016ff8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8016ffa:	68bb      	ldr	r3, [r7, #8]
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f7fd fbf3 	bl	80147e8 <sync_window>
 8017002:	4603      	mov	r3, r0
 8017004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8017008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801700c:	2b00      	cmp	r3, #0
 801700e:	d10d      	bne.n	801702c <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8017010:	68bb      	ldr	r3, [r7, #8]
 8017012:	899b      	ldrh	r3, [r3, #12]
 8017014:	461a      	mov	r2, r3
 8017016:	2100      	movs	r1, #0
 8017018:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801701a:	f7fd fb88 	bl	801472e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801701e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017020:	3b01      	subs	r3, #1
 8017022:	653b      	str	r3, [r7, #80]	; 0x50
 8017024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017026:	2b00      	cmp	r3, #0
 8017028:	d1df      	bne.n	8016fea <f_mkdir+0x15a>
 801702a:	e000      	b.n	801702e <f_mkdir+0x19e>
					if (res != FR_OK) break;
 801702c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801702e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017032:	2b00      	cmp	r3, #0
 8017034:	d107      	bne.n	8017046 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8017036:	f107 030c 	add.w	r3, r7, #12
 801703a:	4618      	mov	r0, r3
 801703c:	f7fe fc2a 	bl	8015894 <dir_register>
 8017040:	4603      	mov	r3, r0
 8017042:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8017046:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801704a:	2b00      	cmp	r3, #0
 801704c:	d120      	bne.n	8017090 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017050:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8017052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017054:	3316      	adds	r3, #22
 8017056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017058:	4618      	mov	r0, r3
 801705a:	f7fd fb1b 	bl	8014694 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801705e:	68bb      	ldr	r3, [r7, #8]
 8017060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017062:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017064:	4618      	mov	r0, r3
 8017066:	f7fe f9aa 	bl	80153be <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801706a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801706c:	330b      	adds	r3, #11
 801706e:	2210      	movs	r2, #16
 8017070:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8017072:	68bb      	ldr	r3, [r7, #8]
 8017074:	2201      	movs	r2, #1
 8017076:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8017078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801707c:	2b00      	cmp	r3, #0
 801707e:	d10e      	bne.n	801709e <f_mkdir+0x20e>
					res = sync_fs(fs);
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	4618      	mov	r0, r3
 8017084:	f7fd fc22 	bl	80148cc <sync_fs>
 8017088:	4603      	mov	r3, r0
 801708a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801708e:	e006      	b.n	801709e <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8017090:	f107 030c 	add.w	r3, r7, #12
 8017094:	2200      	movs	r2, #0
 8017096:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017098:	4618      	mov	r0, r3
 801709a:	f7fd fe96 	bl	8014dca <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801709e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80170a2:	4618      	mov	r0, r3
 80170a4:	3758      	adds	r7, #88	; 0x58
 80170a6:	46bd      	mov	sp, r7
 80170a8:	bd80      	pop	{r7, pc}
	...

080170ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80170ac:	b480      	push	{r7}
 80170ae:	b087      	sub	sp, #28
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	60f8      	str	r0, [r7, #12]
 80170b4:	60b9      	str	r1, [r7, #8]
 80170b6:	4613      	mov	r3, r2
 80170b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80170ba:	2301      	movs	r3, #1
 80170bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80170be:	2300      	movs	r3, #0
 80170c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80170c2:	4b1f      	ldr	r3, [pc, #124]	; (8017140 <FATFS_LinkDriverEx+0x94>)
 80170c4:	7a5b      	ldrb	r3, [r3, #9]
 80170c6:	b2db      	uxtb	r3, r3
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d131      	bne.n	8017130 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80170cc:	4b1c      	ldr	r3, [pc, #112]	; (8017140 <FATFS_LinkDriverEx+0x94>)
 80170ce:	7a5b      	ldrb	r3, [r3, #9]
 80170d0:	b2db      	uxtb	r3, r3
 80170d2:	461a      	mov	r2, r3
 80170d4:	4b1a      	ldr	r3, [pc, #104]	; (8017140 <FATFS_LinkDriverEx+0x94>)
 80170d6:	2100      	movs	r1, #0
 80170d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80170da:	4b19      	ldr	r3, [pc, #100]	; (8017140 <FATFS_LinkDriverEx+0x94>)
 80170dc:	7a5b      	ldrb	r3, [r3, #9]
 80170de:	b2db      	uxtb	r3, r3
 80170e0:	4a17      	ldr	r2, [pc, #92]	; (8017140 <FATFS_LinkDriverEx+0x94>)
 80170e2:	009b      	lsls	r3, r3, #2
 80170e4:	4413      	add	r3, r2
 80170e6:	68fa      	ldr	r2, [r7, #12]
 80170e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80170ea:	4b15      	ldr	r3, [pc, #84]	; (8017140 <FATFS_LinkDriverEx+0x94>)
 80170ec:	7a5b      	ldrb	r3, [r3, #9]
 80170ee:	b2db      	uxtb	r3, r3
 80170f0:	461a      	mov	r2, r3
 80170f2:	4b13      	ldr	r3, [pc, #76]	; (8017140 <FATFS_LinkDriverEx+0x94>)
 80170f4:	4413      	add	r3, r2
 80170f6:	79fa      	ldrb	r2, [r7, #7]
 80170f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80170fa:	4b11      	ldr	r3, [pc, #68]	; (8017140 <FATFS_LinkDriverEx+0x94>)
 80170fc:	7a5b      	ldrb	r3, [r3, #9]
 80170fe:	b2db      	uxtb	r3, r3
 8017100:	1c5a      	adds	r2, r3, #1
 8017102:	b2d1      	uxtb	r1, r2
 8017104:	4a0e      	ldr	r2, [pc, #56]	; (8017140 <FATFS_LinkDriverEx+0x94>)
 8017106:	7251      	strb	r1, [r2, #9]
 8017108:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801710a:	7dbb      	ldrb	r3, [r7, #22]
 801710c:	3330      	adds	r3, #48	; 0x30
 801710e:	b2da      	uxtb	r2, r3
 8017110:	68bb      	ldr	r3, [r7, #8]
 8017112:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017114:	68bb      	ldr	r3, [r7, #8]
 8017116:	3301      	adds	r3, #1
 8017118:	223a      	movs	r2, #58	; 0x3a
 801711a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801711c:	68bb      	ldr	r3, [r7, #8]
 801711e:	3302      	adds	r3, #2
 8017120:	222f      	movs	r2, #47	; 0x2f
 8017122:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	3303      	adds	r3, #3
 8017128:	2200      	movs	r2, #0
 801712a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801712c:	2300      	movs	r3, #0
 801712e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017130:	7dfb      	ldrb	r3, [r7, #23]
}
 8017132:	4618      	mov	r0, r3
 8017134:	371c      	adds	r7, #28
 8017136:	46bd      	mov	sp, r7
 8017138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801713c:	4770      	bx	lr
 801713e:	bf00      	nop
 8017140:	2000040c 	.word	0x2000040c

08017144 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b082      	sub	sp, #8
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
 801714c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801714e:	2200      	movs	r2, #0
 8017150:	6839      	ldr	r1, [r7, #0]
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f7ff ffaa 	bl	80170ac <FATFS_LinkDriverEx>
 8017158:	4603      	mov	r3, r0
}
 801715a:	4618      	mov	r0, r3
 801715c:	3708      	adds	r7, #8
 801715e:	46bd      	mov	sp, r7
 8017160:	bd80      	pop	{r7, pc}
	...

08017164 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8017164:	b480      	push	{r7}
 8017166:	b085      	sub	sp, #20
 8017168:	af00      	add	r7, sp, #0
 801716a:	4603      	mov	r3, r0
 801716c:	6039      	str	r1, [r7, #0]
 801716e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8017170:	88fb      	ldrh	r3, [r7, #6]
 8017172:	2b7f      	cmp	r3, #127	; 0x7f
 8017174:	d802      	bhi.n	801717c <ff_convert+0x18>
		c = chr;
 8017176:	88fb      	ldrh	r3, [r7, #6]
 8017178:	81fb      	strh	r3, [r7, #14]
 801717a:	e025      	b.n	80171c8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801717c:	683b      	ldr	r3, [r7, #0]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d00b      	beq.n	801719a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8017182:	88fb      	ldrh	r3, [r7, #6]
 8017184:	2bff      	cmp	r3, #255	; 0xff
 8017186:	d805      	bhi.n	8017194 <ff_convert+0x30>
 8017188:	88fb      	ldrh	r3, [r7, #6]
 801718a:	3b80      	subs	r3, #128	; 0x80
 801718c:	4a12      	ldr	r2, [pc, #72]	; (80171d8 <ff_convert+0x74>)
 801718e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017192:	e000      	b.n	8017196 <ff_convert+0x32>
 8017194:	2300      	movs	r3, #0
 8017196:	81fb      	strh	r3, [r7, #14]
 8017198:	e016      	b.n	80171c8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801719a:	2300      	movs	r3, #0
 801719c:	81fb      	strh	r3, [r7, #14]
 801719e:	e009      	b.n	80171b4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80171a0:	89fb      	ldrh	r3, [r7, #14]
 80171a2:	4a0d      	ldr	r2, [pc, #52]	; (80171d8 <ff_convert+0x74>)
 80171a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80171a8:	88fa      	ldrh	r2, [r7, #6]
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d006      	beq.n	80171bc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80171ae:	89fb      	ldrh	r3, [r7, #14]
 80171b0:	3301      	adds	r3, #1
 80171b2:	81fb      	strh	r3, [r7, #14]
 80171b4:	89fb      	ldrh	r3, [r7, #14]
 80171b6:	2b7f      	cmp	r3, #127	; 0x7f
 80171b8:	d9f2      	bls.n	80171a0 <ff_convert+0x3c>
 80171ba:	e000      	b.n	80171be <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80171bc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80171be:	89fb      	ldrh	r3, [r7, #14]
 80171c0:	3380      	adds	r3, #128	; 0x80
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	b2db      	uxtb	r3, r3
 80171c6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80171c8:	89fb      	ldrh	r3, [r7, #14]
}
 80171ca:	4618      	mov	r0, r3
 80171cc:	3714      	adds	r7, #20
 80171ce:	46bd      	mov	sp, r7
 80171d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d4:	4770      	bx	lr
 80171d6:	bf00      	nop
 80171d8:	08018828 	.word	0x08018828

080171dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80171dc:	b480      	push	{r7}
 80171de:	b087      	sub	sp, #28
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	4603      	mov	r3, r0
 80171e4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80171e6:	88fb      	ldrh	r3, [r7, #6]
 80171e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80171ec:	d201      	bcs.n	80171f2 <ff_wtoupper+0x16>
 80171ee:	4b3e      	ldr	r3, [pc, #248]	; (80172e8 <ff_wtoupper+0x10c>)
 80171f0:	e000      	b.n	80171f4 <ff_wtoupper+0x18>
 80171f2:	4b3e      	ldr	r3, [pc, #248]	; (80172ec <ff_wtoupper+0x110>)
 80171f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80171f6:	697b      	ldr	r3, [r7, #20]
 80171f8:	1c9a      	adds	r2, r3, #2
 80171fa:	617a      	str	r2, [r7, #20]
 80171fc:	881b      	ldrh	r3, [r3, #0]
 80171fe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8017200:	8a7b      	ldrh	r3, [r7, #18]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d068      	beq.n	80172d8 <ff_wtoupper+0xfc>
 8017206:	88fa      	ldrh	r2, [r7, #6]
 8017208:	8a7b      	ldrh	r3, [r7, #18]
 801720a:	429a      	cmp	r2, r3
 801720c:	d364      	bcc.n	80172d8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801720e:	697b      	ldr	r3, [r7, #20]
 8017210:	1c9a      	adds	r2, r3, #2
 8017212:	617a      	str	r2, [r7, #20]
 8017214:	881b      	ldrh	r3, [r3, #0]
 8017216:	823b      	strh	r3, [r7, #16]
 8017218:	8a3b      	ldrh	r3, [r7, #16]
 801721a:	0a1b      	lsrs	r3, r3, #8
 801721c:	81fb      	strh	r3, [r7, #14]
 801721e:	8a3b      	ldrh	r3, [r7, #16]
 8017220:	b2db      	uxtb	r3, r3
 8017222:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8017224:	88fa      	ldrh	r2, [r7, #6]
 8017226:	8a79      	ldrh	r1, [r7, #18]
 8017228:	8a3b      	ldrh	r3, [r7, #16]
 801722a:	440b      	add	r3, r1
 801722c:	429a      	cmp	r2, r3
 801722e:	da49      	bge.n	80172c4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8017230:	89fb      	ldrh	r3, [r7, #14]
 8017232:	2b08      	cmp	r3, #8
 8017234:	d84f      	bhi.n	80172d6 <ff_wtoupper+0xfa>
 8017236:	a201      	add	r2, pc, #4	; (adr r2, 801723c <ff_wtoupper+0x60>)
 8017238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801723c:	08017261 	.word	0x08017261
 8017240:	08017273 	.word	0x08017273
 8017244:	08017289 	.word	0x08017289
 8017248:	08017291 	.word	0x08017291
 801724c:	08017299 	.word	0x08017299
 8017250:	080172a1 	.word	0x080172a1
 8017254:	080172a9 	.word	0x080172a9
 8017258:	080172b1 	.word	0x080172b1
 801725c:	080172b9 	.word	0x080172b9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8017260:	88fa      	ldrh	r2, [r7, #6]
 8017262:	8a7b      	ldrh	r3, [r7, #18]
 8017264:	1ad3      	subs	r3, r2, r3
 8017266:	005b      	lsls	r3, r3, #1
 8017268:	697a      	ldr	r2, [r7, #20]
 801726a:	4413      	add	r3, r2
 801726c:	881b      	ldrh	r3, [r3, #0]
 801726e:	80fb      	strh	r3, [r7, #6]
 8017270:	e027      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017272:	88fa      	ldrh	r2, [r7, #6]
 8017274:	8a7b      	ldrh	r3, [r7, #18]
 8017276:	1ad3      	subs	r3, r2, r3
 8017278:	b29b      	uxth	r3, r3
 801727a:	f003 0301 	and.w	r3, r3, #1
 801727e:	b29b      	uxth	r3, r3
 8017280:	88fa      	ldrh	r2, [r7, #6]
 8017282:	1ad3      	subs	r3, r2, r3
 8017284:	80fb      	strh	r3, [r7, #6]
 8017286:	e01c      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8017288:	88fb      	ldrh	r3, [r7, #6]
 801728a:	3b10      	subs	r3, #16
 801728c:	80fb      	strh	r3, [r7, #6]
 801728e:	e018      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8017290:	88fb      	ldrh	r3, [r7, #6]
 8017292:	3b20      	subs	r3, #32
 8017294:	80fb      	strh	r3, [r7, #6]
 8017296:	e014      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8017298:	88fb      	ldrh	r3, [r7, #6]
 801729a:	3b30      	subs	r3, #48	; 0x30
 801729c:	80fb      	strh	r3, [r7, #6]
 801729e:	e010      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80172a0:	88fb      	ldrh	r3, [r7, #6]
 80172a2:	3b1a      	subs	r3, #26
 80172a4:	80fb      	strh	r3, [r7, #6]
 80172a6:	e00c      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80172a8:	88fb      	ldrh	r3, [r7, #6]
 80172aa:	3308      	adds	r3, #8
 80172ac:	80fb      	strh	r3, [r7, #6]
 80172ae:	e008      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80172b0:	88fb      	ldrh	r3, [r7, #6]
 80172b2:	3b50      	subs	r3, #80	; 0x50
 80172b4:	80fb      	strh	r3, [r7, #6]
 80172b6:	e004      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80172b8:	88fb      	ldrh	r3, [r7, #6]
 80172ba:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80172be:	80fb      	strh	r3, [r7, #6]
 80172c0:	bf00      	nop
			}
			break;
 80172c2:	e008      	b.n	80172d6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80172c4:	89fb      	ldrh	r3, [r7, #14]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d195      	bne.n	80171f6 <ff_wtoupper+0x1a>
 80172ca:	8a3b      	ldrh	r3, [r7, #16]
 80172cc:	005b      	lsls	r3, r3, #1
 80172ce:	697a      	ldr	r2, [r7, #20]
 80172d0:	4413      	add	r3, r2
 80172d2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80172d4:	e78f      	b.n	80171f6 <ff_wtoupper+0x1a>
			break;
 80172d6:	bf00      	nop
	}

	return chr;
 80172d8:	88fb      	ldrh	r3, [r7, #6]
}
 80172da:	4618      	mov	r0, r3
 80172dc:	371c      	adds	r7, #28
 80172de:	46bd      	mov	sp, r7
 80172e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e4:	4770      	bx	lr
 80172e6:	bf00      	nop
 80172e8:	08018928 	.word	0x08018928
 80172ec:	08018b1c 	.word	0x08018b1c

080172f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80172f4:	2200      	movs	r2, #0
 80172f6:	4912      	ldr	r1, [pc, #72]	; (8017340 <MX_USB_DEVICE_Init+0x50>)
 80172f8:	4812      	ldr	r0, [pc, #72]	; (8017344 <MX_USB_DEVICE_Init+0x54>)
 80172fa:	f7fb ff62 	bl	80131c2 <USBD_Init>
 80172fe:	4603      	mov	r3, r0
 8017300:	2b00      	cmp	r3, #0
 8017302:	d001      	beq.n	8017308 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017304:	f7ea fc9a 	bl	8001c3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8017308:	490f      	ldr	r1, [pc, #60]	; (8017348 <MX_USB_DEVICE_Init+0x58>)
 801730a:	480e      	ldr	r0, [pc, #56]	; (8017344 <MX_USB_DEVICE_Init+0x54>)
 801730c:	f7fb ff89 	bl	8013222 <USBD_RegisterClass>
 8017310:	4603      	mov	r3, r0
 8017312:	2b00      	cmp	r3, #0
 8017314:	d001      	beq.n	801731a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017316:	f7ea fc91 	bl	8001c3c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801731a:	490c      	ldr	r1, [pc, #48]	; (801734c <MX_USB_DEVICE_Init+0x5c>)
 801731c:	4809      	ldr	r0, [pc, #36]	; (8017344 <MX_USB_DEVICE_Init+0x54>)
 801731e:	f7fa fb39 	bl	8011994 <USBD_MSC_RegisterStorage>
 8017322:	4603      	mov	r3, r0
 8017324:	2b00      	cmp	r3, #0
 8017326:	d001      	beq.n	801732c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017328:	f7ea fc88 	bl	8001c3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801732c:	4805      	ldr	r0, [pc, #20]	; (8017344 <MX_USB_DEVICE_Init+0x54>)
 801732e:	f7fb ff9f 	bl	8013270 <USBD_Start>
 8017332:	4603      	mov	r3, r0
 8017334:	2b00      	cmp	r3, #0
 8017336:	d001      	beq.n	801733c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017338:	f7ea fc80 	bl	8001c3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801733c:	bf00      	nop
 801733e:	bd80      	pop	{r7, pc}
 8017340:	200000f4 	.word	0x200000f4
 8017344:	20005d14 	.word	0x20005d14
 8017348:	2000000c 	.word	0x2000000c
 801734c:	20000154 	.word	0x20000154

08017350 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017350:	b480      	push	{r7}
 8017352:	b083      	sub	sp, #12
 8017354:	af00      	add	r7, sp, #0
 8017356:	4603      	mov	r3, r0
 8017358:	6039      	str	r1, [r7, #0]
 801735a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801735c:	683b      	ldr	r3, [r7, #0]
 801735e:	2212      	movs	r2, #18
 8017360:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017362:	4b03      	ldr	r3, [pc, #12]	; (8017370 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017364:	4618      	mov	r0, r3
 8017366:	370c      	adds	r7, #12
 8017368:	46bd      	mov	sp, r7
 801736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736e:	4770      	bx	lr
 8017370:	20000114 	.word	0x20000114

08017374 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017374:	b480      	push	{r7}
 8017376:	b083      	sub	sp, #12
 8017378:	af00      	add	r7, sp, #0
 801737a:	4603      	mov	r3, r0
 801737c:	6039      	str	r1, [r7, #0]
 801737e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	2204      	movs	r2, #4
 8017384:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017386:	4b03      	ldr	r3, [pc, #12]	; (8017394 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017388:	4618      	mov	r0, r3
 801738a:	370c      	adds	r7, #12
 801738c:	46bd      	mov	sp, r7
 801738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017392:	4770      	bx	lr
 8017394:	20000134 	.word	0x20000134

08017398 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b082      	sub	sp, #8
 801739c:	af00      	add	r7, sp, #0
 801739e:	4603      	mov	r3, r0
 80173a0:	6039      	str	r1, [r7, #0]
 80173a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80173a4:	79fb      	ldrb	r3, [r7, #7]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d105      	bne.n	80173b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80173aa:	683a      	ldr	r2, [r7, #0]
 80173ac:	4907      	ldr	r1, [pc, #28]	; (80173cc <USBD_FS_ProductStrDescriptor+0x34>)
 80173ae:	4808      	ldr	r0, [pc, #32]	; (80173d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80173b0:	f7fc ffb9 	bl	8014326 <USBD_GetString>
 80173b4:	e004      	b.n	80173c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80173b6:	683a      	ldr	r2, [r7, #0]
 80173b8:	4904      	ldr	r1, [pc, #16]	; (80173cc <USBD_FS_ProductStrDescriptor+0x34>)
 80173ba:	4805      	ldr	r0, [pc, #20]	; (80173d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80173bc:	f7fc ffb3 	bl	8014326 <USBD_GetString>
  }
  return USBD_StrDesc;
 80173c0:	4b02      	ldr	r3, [pc, #8]	; (80173cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80173c2:	4618      	mov	r0, r3
 80173c4:	3708      	adds	r7, #8
 80173c6:	46bd      	mov	sp, r7
 80173c8:	bd80      	pop	{r7, pc}
 80173ca:	bf00      	nop
 80173cc:	20005fe4 	.word	0x20005fe4
 80173d0:	08018720 	.word	0x08018720

080173d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b082      	sub	sp, #8
 80173d8:	af00      	add	r7, sp, #0
 80173da:	4603      	mov	r3, r0
 80173dc:	6039      	str	r1, [r7, #0]
 80173de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80173e0:	683a      	ldr	r2, [r7, #0]
 80173e2:	4904      	ldr	r1, [pc, #16]	; (80173f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80173e4:	4804      	ldr	r0, [pc, #16]	; (80173f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80173e6:	f7fc ff9e 	bl	8014326 <USBD_GetString>
  return USBD_StrDesc;
 80173ea:	4b02      	ldr	r3, [pc, #8]	; (80173f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80173ec:	4618      	mov	r0, r3
 80173ee:	3708      	adds	r7, #8
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}
 80173f4:	20005fe4 	.word	0x20005fe4
 80173f8:	08018734 	.word	0x08018734

080173fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b082      	sub	sp, #8
 8017400:	af00      	add	r7, sp, #0
 8017402:	4603      	mov	r3, r0
 8017404:	6039      	str	r1, [r7, #0]
 8017406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	221a      	movs	r2, #26
 801740c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801740e:	f000 f855 	bl	80174bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017412:	4b02      	ldr	r3, [pc, #8]	; (801741c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017414:	4618      	mov	r0, r3
 8017416:	3708      	adds	r7, #8
 8017418:	46bd      	mov	sp, r7
 801741a:	bd80      	pop	{r7, pc}
 801741c:	20000138 	.word	0x20000138

08017420 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b082      	sub	sp, #8
 8017424:	af00      	add	r7, sp, #0
 8017426:	4603      	mov	r3, r0
 8017428:	6039      	str	r1, [r7, #0]
 801742a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801742c:	79fb      	ldrb	r3, [r7, #7]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d105      	bne.n	801743e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017432:	683a      	ldr	r2, [r7, #0]
 8017434:	4907      	ldr	r1, [pc, #28]	; (8017454 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017436:	4808      	ldr	r0, [pc, #32]	; (8017458 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017438:	f7fc ff75 	bl	8014326 <USBD_GetString>
 801743c:	e004      	b.n	8017448 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801743e:	683a      	ldr	r2, [r7, #0]
 8017440:	4904      	ldr	r1, [pc, #16]	; (8017454 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017442:	4805      	ldr	r0, [pc, #20]	; (8017458 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017444:	f7fc ff6f 	bl	8014326 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017448:	4b02      	ldr	r3, [pc, #8]	; (8017454 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801744a:	4618      	mov	r0, r3
 801744c:	3708      	adds	r7, #8
 801744e:	46bd      	mov	sp, r7
 8017450:	bd80      	pop	{r7, pc}
 8017452:	bf00      	nop
 8017454:	20005fe4 	.word	0x20005fe4
 8017458:	08018748 	.word	0x08018748

0801745c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b082      	sub	sp, #8
 8017460:	af00      	add	r7, sp, #0
 8017462:	4603      	mov	r3, r0
 8017464:	6039      	str	r1, [r7, #0]
 8017466:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017468:	79fb      	ldrb	r3, [r7, #7]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d105      	bne.n	801747a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801746e:	683a      	ldr	r2, [r7, #0]
 8017470:	4907      	ldr	r1, [pc, #28]	; (8017490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017472:	4808      	ldr	r0, [pc, #32]	; (8017494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017474:	f7fc ff57 	bl	8014326 <USBD_GetString>
 8017478:	e004      	b.n	8017484 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801747a:	683a      	ldr	r2, [r7, #0]
 801747c:	4904      	ldr	r1, [pc, #16]	; (8017490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801747e:	4805      	ldr	r0, [pc, #20]	; (8017494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017480:	f7fc ff51 	bl	8014326 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017484:	4b02      	ldr	r3, [pc, #8]	; (8017490 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017486:	4618      	mov	r0, r3
 8017488:	3708      	adds	r7, #8
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
 801748e:	bf00      	nop
 8017490:	20005fe4 	.word	0x20005fe4
 8017494:	08018754 	.word	0x08018754

08017498 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017498:	b480      	push	{r7}
 801749a:	b083      	sub	sp, #12
 801749c:	af00      	add	r7, sp, #0
 801749e:	4603      	mov	r3, r0
 80174a0:	6039      	str	r1, [r7, #0]
 80174a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80174a4:	683b      	ldr	r3, [r7, #0]
 80174a6:	220c      	movs	r2, #12
 80174a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80174aa:	4b03      	ldr	r3, [pc, #12]	; (80174b8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80174ac:	4618      	mov	r0, r3
 80174ae:	370c      	adds	r7, #12
 80174b0:	46bd      	mov	sp, r7
 80174b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b6:	4770      	bx	lr
 80174b8:	20000128 	.word	0x20000128

080174bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b084      	sub	sp, #16
 80174c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80174c2:	4b0f      	ldr	r3, [pc, #60]	; (8017500 <Get_SerialNum+0x44>)
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80174c8:	4b0e      	ldr	r3, [pc, #56]	; (8017504 <Get_SerialNum+0x48>)
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80174ce:	4b0e      	ldr	r3, [pc, #56]	; (8017508 <Get_SerialNum+0x4c>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80174d4:	68fa      	ldr	r2, [r7, #12]
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	4413      	add	r3, r2
 80174da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d009      	beq.n	80174f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80174e2:	2208      	movs	r2, #8
 80174e4:	4909      	ldr	r1, [pc, #36]	; (801750c <Get_SerialNum+0x50>)
 80174e6:	68f8      	ldr	r0, [r7, #12]
 80174e8:	f000 f814 	bl	8017514 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80174ec:	2204      	movs	r2, #4
 80174ee:	4908      	ldr	r1, [pc, #32]	; (8017510 <Get_SerialNum+0x54>)
 80174f0:	68b8      	ldr	r0, [r7, #8]
 80174f2:	f000 f80f 	bl	8017514 <IntToUnicode>
  }
}
 80174f6:	bf00      	nop
 80174f8:	3710      	adds	r7, #16
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}
 80174fe:	bf00      	nop
 8017500:	1fff7a10 	.word	0x1fff7a10
 8017504:	1fff7a14 	.word	0x1fff7a14
 8017508:	1fff7a18 	.word	0x1fff7a18
 801750c:	2000013a 	.word	0x2000013a
 8017510:	2000014a 	.word	0x2000014a

08017514 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017514:	b480      	push	{r7}
 8017516:	b087      	sub	sp, #28
 8017518:	af00      	add	r7, sp, #0
 801751a:	60f8      	str	r0, [r7, #12]
 801751c:	60b9      	str	r1, [r7, #8]
 801751e:	4613      	mov	r3, r2
 8017520:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017522:	2300      	movs	r3, #0
 8017524:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017526:	2300      	movs	r3, #0
 8017528:	75fb      	strb	r3, [r7, #23]
 801752a:	e027      	b.n	801757c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	0f1b      	lsrs	r3, r3, #28
 8017530:	2b09      	cmp	r3, #9
 8017532:	d80b      	bhi.n	801754c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	0f1b      	lsrs	r3, r3, #28
 8017538:	b2da      	uxtb	r2, r3
 801753a:	7dfb      	ldrb	r3, [r7, #23]
 801753c:	005b      	lsls	r3, r3, #1
 801753e:	4619      	mov	r1, r3
 8017540:	68bb      	ldr	r3, [r7, #8]
 8017542:	440b      	add	r3, r1
 8017544:	3230      	adds	r2, #48	; 0x30
 8017546:	b2d2      	uxtb	r2, r2
 8017548:	701a      	strb	r2, [r3, #0]
 801754a:	e00a      	b.n	8017562 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	0f1b      	lsrs	r3, r3, #28
 8017550:	b2da      	uxtb	r2, r3
 8017552:	7dfb      	ldrb	r3, [r7, #23]
 8017554:	005b      	lsls	r3, r3, #1
 8017556:	4619      	mov	r1, r3
 8017558:	68bb      	ldr	r3, [r7, #8]
 801755a:	440b      	add	r3, r1
 801755c:	3237      	adds	r2, #55	; 0x37
 801755e:	b2d2      	uxtb	r2, r2
 8017560:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	011b      	lsls	r3, r3, #4
 8017566:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017568:	7dfb      	ldrb	r3, [r7, #23]
 801756a:	005b      	lsls	r3, r3, #1
 801756c:	3301      	adds	r3, #1
 801756e:	68ba      	ldr	r2, [r7, #8]
 8017570:	4413      	add	r3, r2
 8017572:	2200      	movs	r2, #0
 8017574:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017576:	7dfb      	ldrb	r3, [r7, #23]
 8017578:	3301      	adds	r3, #1
 801757a:	75fb      	strb	r3, [r7, #23]
 801757c:	7dfa      	ldrb	r2, [r7, #23]
 801757e:	79fb      	ldrb	r3, [r7, #7]
 8017580:	429a      	cmp	r2, r3
 8017582:	d3d3      	bcc.n	801752c <IntToUnicode+0x18>
  }
}
 8017584:	bf00      	nop
 8017586:	bf00      	nop
 8017588:	371c      	adds	r7, #28
 801758a:	46bd      	mov	sp, r7
 801758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017590:	4770      	bx	lr

08017592 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8017592:	b480      	push	{r7}
 8017594:	b083      	sub	sp, #12
 8017596:	af00      	add	r7, sp, #0
 8017598:	4603      	mov	r3, r0
 801759a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 801759c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801759e:	4618      	mov	r0, r3
 80175a0:	370c      	adds	r7, #12
 80175a2:	46bd      	mov	sp, r7
 80175a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a8:	4770      	bx	lr
	...

080175ac <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b08c      	sub	sp, #48	; 0x30
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	4603      	mov	r3, r0
 80175b4:	60b9      	str	r1, [r7, #8]
 80175b6:	607a      	str	r2, [r7, #4]
 80175b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;

  HAL_SD_GetCardInfo(&hsd, &info);
 80175ba:	f107 0310 	add.w	r3, r7, #16
 80175be:	4619      	mov	r1, r3
 80175c0:	4807      	ldr	r0, [pc, #28]	; (80175e0 <STORAGE_GetCapacity_FS+0x34>)
 80175c2:	f7f6 fc2d 	bl	800de20 <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr - 1;
 80175c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175c8:	1e5a      	subs	r2, r3, #1
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 80175ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d0:	b29a      	uxth	r2, r3
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 80175d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80175d8:	4618      	mov	r0, r3
 80175da:	3730      	adds	r7, #48	; 0x30
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}
 80175e0:	20002a78 	.word	0x20002a78

080175e4 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80175e4:	b480      	push	{r7}
 80175e6:	b083      	sub	sp, #12
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	4603      	mov	r3, r0
 80175ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80175ee:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80175f0:	4618      	mov	r0, r3
 80175f2:	370c      	adds	r7, #12
 80175f4:	46bd      	mov	sp, r7
 80175f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fa:	4770      	bx	lr

080175fc <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80175fc:	b480      	push	{r7}
 80175fe:	b083      	sub	sp, #12
 8017600:	af00      	add	r7, sp, #0
 8017602:	4603      	mov	r3, r0
 8017604:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8017606:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017608:	4618      	mov	r0, r3
 801760a:	370c      	adds	r7, #12
 801760c:	46bd      	mov	sp, r7
 801760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017612:	4770      	bx	lr

08017614 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b086      	sub	sp, #24
 8017618:	af02      	add	r7, sp, #8
 801761a:	60b9      	str	r1, [r7, #8]
 801761c:	607a      	str	r2, [r7, #4]
 801761e:	461a      	mov	r2, r3
 8017620:	4603      	mov	r3, r0
 8017622:	73fb      	strb	r3, [r7, #15]
 8017624:	4613      	mov	r3, r2
 8017626:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017628:	89bb      	ldrh	r3, [r7, #12]
 801762a:	f04f 32ff 	mov.w	r2, #4294967295
 801762e:	9200      	str	r2, [sp, #0]
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	68b9      	ldr	r1, [r7, #8]
 8017634:	4807      	ldr	r0, [pc, #28]	; (8017654 <STORAGE_Read_FS+0x40>)
 8017636:	f7f5 fba9 	bl	800cd8c <HAL_SD_ReadBlocks>
//	HAL_SD_ReadBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 801763a:	bf00      	nop
 801763c:	4805      	ldr	r0, [pc, #20]	; (8017654 <STORAGE_Read_FS+0x40>)
 801763e:	f7f6 fcb5 	bl	800dfac <HAL_SD_GetCardState>
 8017642:	4603      	mov	r3, r0
 8017644:	2b04      	cmp	r3, #4
 8017646:	d1f9      	bne.n	801763c <STORAGE_Read_FS+0x28>

  return (USBD_OK);
 8017648:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801764a:	4618      	mov	r0, r3
 801764c:	3710      	adds	r7, #16
 801764e:	46bd      	mov	sp, r7
 8017650:	bd80      	pop	{r7, pc}
 8017652:	bf00      	nop
 8017654:	20002a78 	.word	0x20002a78

08017658 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017658:	b580      	push	{r7, lr}
 801765a:	b086      	sub	sp, #24
 801765c:	af02      	add	r7, sp, #8
 801765e:	60b9      	str	r1, [r7, #8]
 8017660:	607a      	str	r2, [r7, #4]
 8017662:	461a      	mov	r2, r3
 8017664:	4603      	mov	r3, r0
 8017666:	73fb      	strb	r3, [r7, #15]
 8017668:	4613      	mov	r3, r2
 801766a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801766c:	89bb      	ldrh	r3, [r7, #12]
 801766e:	f04f 32ff 	mov.w	r2, #4294967295
 8017672:	9200      	str	r2, [sp, #0]
 8017674:	687a      	ldr	r2, [r7, #4]
 8017676:	68b9      	ldr	r1, [r7, #8]
 8017678:	4807      	ldr	r0, [pc, #28]	; (8017698 <STORAGE_Write_FS+0x40>)
 801767a:	f7f5 fd65 	bl	800d148 <HAL_SD_WriteBlocks>
//	HAL_SD_WriteBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 801767e:	bf00      	nop
 8017680:	4805      	ldr	r0, [pc, #20]	; (8017698 <STORAGE_Write_FS+0x40>)
 8017682:	f7f6 fc93 	bl	800dfac <HAL_SD_GetCardState>
 8017686:	4603      	mov	r3, r0
 8017688:	2b04      	cmp	r3, #4
 801768a:	d1f9      	bne.n	8017680 <STORAGE_Write_FS+0x28>

  return (USBD_OK);
 801768c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 801768e:	4618      	mov	r0, r3
 8017690:	3710      	adds	r7, #16
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
 8017696:	bf00      	nop
 8017698:	20002a78 	.word	0x20002a78

0801769c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801769c:	b480      	push	{r7}
 801769e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80176a0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80176a2:	4618      	mov	r0, r3
 80176a4:	46bd      	mov	sp, r7
 80176a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176aa:	4770      	bx	lr

080176ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b08a      	sub	sp, #40	; 0x28
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80176b4:	f107 0314 	add.w	r3, r7, #20
 80176b8:	2200      	movs	r2, #0
 80176ba:	601a      	str	r2, [r3, #0]
 80176bc:	605a      	str	r2, [r3, #4]
 80176be:	609a      	str	r2, [r3, #8]
 80176c0:	60da      	str	r2, [r3, #12]
 80176c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80176cc:	d147      	bne.n	801775e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80176ce:	2300      	movs	r3, #0
 80176d0:	613b      	str	r3, [r7, #16]
 80176d2:	4b25      	ldr	r3, [pc, #148]	; (8017768 <HAL_PCD_MspInit+0xbc>)
 80176d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176d6:	4a24      	ldr	r2, [pc, #144]	; (8017768 <HAL_PCD_MspInit+0xbc>)
 80176d8:	f043 0301 	orr.w	r3, r3, #1
 80176dc:	6313      	str	r3, [r2, #48]	; 0x30
 80176de:	4b22      	ldr	r3, [pc, #136]	; (8017768 <HAL_PCD_MspInit+0xbc>)
 80176e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176e2:	f003 0301 	and.w	r3, r3, #1
 80176e6:	613b      	str	r3, [r7, #16]
 80176e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80176ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80176ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80176f0:	2300      	movs	r3, #0
 80176f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176f4:	2300      	movs	r3, #0
 80176f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80176f8:	f107 0314 	add.w	r3, r7, #20
 80176fc:	4619      	mov	r1, r3
 80176fe:	481b      	ldr	r0, [pc, #108]	; (801776c <HAL_PCD_MspInit+0xc0>)
 8017700:	f7f1 fa5c 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017704:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801770a:	2302      	movs	r3, #2
 801770c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801770e:	2300      	movs	r3, #0
 8017710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017712:	2303      	movs	r3, #3
 8017714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017716:	230a      	movs	r3, #10
 8017718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801771a:	f107 0314 	add.w	r3, r7, #20
 801771e:	4619      	mov	r1, r3
 8017720:	4812      	ldr	r0, [pc, #72]	; (801776c <HAL_PCD_MspInit+0xc0>)
 8017722:	f7f1 fa4b 	bl	8008bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017726:	4b10      	ldr	r3, [pc, #64]	; (8017768 <HAL_PCD_MspInit+0xbc>)
 8017728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801772a:	4a0f      	ldr	r2, [pc, #60]	; (8017768 <HAL_PCD_MspInit+0xbc>)
 801772c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017730:	6353      	str	r3, [r2, #52]	; 0x34
 8017732:	2300      	movs	r3, #0
 8017734:	60fb      	str	r3, [r7, #12]
 8017736:	4b0c      	ldr	r3, [pc, #48]	; (8017768 <HAL_PCD_MspInit+0xbc>)
 8017738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801773a:	4a0b      	ldr	r2, [pc, #44]	; (8017768 <HAL_PCD_MspInit+0xbc>)
 801773c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017740:	6453      	str	r3, [r2, #68]	; 0x44
 8017742:	4b09      	ldr	r3, [pc, #36]	; (8017768 <HAL_PCD_MspInit+0xbc>)
 8017744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801774a:	60fb      	str	r3, [r7, #12]
 801774c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801774e:	2200      	movs	r2, #0
 8017750:	2100      	movs	r1, #0
 8017752:	2043      	movs	r0, #67	; 0x43
 8017754:	f7f0 fe5d 	bl	8008412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017758:	2043      	movs	r0, #67	; 0x43
 801775a:	f7f0 fe76 	bl	800844a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801775e:	bf00      	nop
 8017760:	3728      	adds	r7, #40	; 0x28
 8017762:	46bd      	mov	sp, r7
 8017764:	bd80      	pop	{r7, pc}
 8017766:	bf00      	nop
 8017768:	40023800 	.word	0x40023800
 801776c:	40020000 	.word	0x40020000

08017770 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b082      	sub	sp, #8
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8017784:	4619      	mov	r1, r3
 8017786:	4610      	mov	r0, r2
 8017788:	f7fb fdbd 	bl	8013306 <USBD_LL_SetupStage>
}
 801778c:	bf00      	nop
 801778e:	3708      	adds	r7, #8
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}

08017794 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b082      	sub	sp, #8
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
 801779c:	460b      	mov	r3, r1
 801779e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80177a6:	78fa      	ldrb	r2, [r7, #3]
 80177a8:	6879      	ldr	r1, [r7, #4]
 80177aa:	4613      	mov	r3, r2
 80177ac:	00db      	lsls	r3, r3, #3
 80177ae:	1a9b      	subs	r3, r3, r2
 80177b0:	009b      	lsls	r3, r3, #2
 80177b2:	440b      	add	r3, r1
 80177b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80177b8:	681a      	ldr	r2, [r3, #0]
 80177ba:	78fb      	ldrb	r3, [r7, #3]
 80177bc:	4619      	mov	r1, r3
 80177be:	f7fb fdf7 	bl	80133b0 <USBD_LL_DataOutStage>
}
 80177c2:	bf00      	nop
 80177c4:	3708      	adds	r7, #8
 80177c6:	46bd      	mov	sp, r7
 80177c8:	bd80      	pop	{r7, pc}

080177ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177ca:	b580      	push	{r7, lr}
 80177cc:	b082      	sub	sp, #8
 80177ce:	af00      	add	r7, sp, #0
 80177d0:	6078      	str	r0, [r7, #4]
 80177d2:	460b      	mov	r3, r1
 80177d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80177dc:	78fa      	ldrb	r2, [r7, #3]
 80177de:	6879      	ldr	r1, [r7, #4]
 80177e0:	4613      	mov	r3, r2
 80177e2:	00db      	lsls	r3, r3, #3
 80177e4:	1a9b      	subs	r3, r3, r2
 80177e6:	009b      	lsls	r3, r3, #2
 80177e8:	440b      	add	r3, r1
 80177ea:	3348      	adds	r3, #72	; 0x48
 80177ec:	681a      	ldr	r2, [r3, #0]
 80177ee:	78fb      	ldrb	r3, [r7, #3]
 80177f0:	4619      	mov	r1, r3
 80177f2:	f7fb fe40 	bl	8013476 <USBD_LL_DataInStage>
}
 80177f6:	bf00      	nop
 80177f8:	3708      	adds	r7, #8
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}

080177fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177fe:	b580      	push	{r7, lr}
 8017800:	b082      	sub	sp, #8
 8017802:	af00      	add	r7, sp, #0
 8017804:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801780c:	4618      	mov	r0, r3
 801780e:	f7fb ff54 	bl	80136ba <USBD_LL_SOF>
}
 8017812:	bf00      	nop
 8017814:	3708      	adds	r7, #8
 8017816:	46bd      	mov	sp, r7
 8017818:	bd80      	pop	{r7, pc}

0801781a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801781a:	b580      	push	{r7, lr}
 801781c:	b084      	sub	sp, #16
 801781e:	af00      	add	r7, sp, #0
 8017820:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017822:	2301      	movs	r3, #1
 8017824:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	68db      	ldr	r3, [r3, #12]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d102      	bne.n	8017834 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801782e:	2300      	movs	r3, #0
 8017830:	73fb      	strb	r3, [r7, #15]
 8017832:	e008      	b.n	8017846 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	68db      	ldr	r3, [r3, #12]
 8017838:	2b02      	cmp	r3, #2
 801783a:	d102      	bne.n	8017842 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801783c:	2301      	movs	r3, #1
 801783e:	73fb      	strb	r3, [r7, #15]
 8017840:	e001      	b.n	8017846 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017842:	f7ea f9fb 	bl	8001c3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801784c:	7bfa      	ldrb	r2, [r7, #15]
 801784e:	4611      	mov	r1, r2
 8017850:	4618      	mov	r0, r3
 8017852:	f7fb fef4 	bl	801363e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801785c:	4618      	mov	r0, r3
 801785e:	f7fb fea0 	bl	80135a2 <USBD_LL_Reset>
}
 8017862:	bf00      	nop
 8017864:	3710      	adds	r7, #16
 8017866:	46bd      	mov	sp, r7
 8017868:	bd80      	pop	{r7, pc}
	...

0801786c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801787a:	4618      	mov	r0, r3
 801787c:	f7fb feef 	bl	801365e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	687a      	ldr	r2, [r7, #4]
 801788c:	6812      	ldr	r2, [r2, #0]
 801788e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017892:	f043 0301 	orr.w	r3, r3, #1
 8017896:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	6a1b      	ldr	r3, [r3, #32]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d005      	beq.n	80178ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80178a0:	4b04      	ldr	r3, [pc, #16]	; (80178b4 <HAL_PCD_SuspendCallback+0x48>)
 80178a2:	691b      	ldr	r3, [r3, #16]
 80178a4:	4a03      	ldr	r2, [pc, #12]	; (80178b4 <HAL_PCD_SuspendCallback+0x48>)
 80178a6:	f043 0306 	orr.w	r3, r3, #6
 80178aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80178ac:	bf00      	nop
 80178ae:	3708      	adds	r7, #8
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}
 80178b4:	e000ed00 	.word	0xe000ed00

080178b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b082      	sub	sp, #8
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80178c6:	4618      	mov	r0, r3
 80178c8:	f7fb fedf 	bl	801368a <USBD_LL_Resume>
}
 80178cc:	bf00      	nop
 80178ce:	3708      	adds	r7, #8
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}

080178d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b082      	sub	sp, #8
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
 80178dc:	460b      	mov	r3, r1
 80178de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80178e6:	78fa      	ldrb	r2, [r7, #3]
 80178e8:	4611      	mov	r1, r2
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7fb ff2d 	bl	801374a <USBD_LL_IsoOUTIncomplete>
}
 80178f0:	bf00      	nop
 80178f2:	3708      	adds	r7, #8
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}

080178f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b082      	sub	sp, #8
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
 8017900:	460b      	mov	r3, r1
 8017902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801790a:	78fa      	ldrb	r2, [r7, #3]
 801790c:	4611      	mov	r1, r2
 801790e:	4618      	mov	r0, r3
 8017910:	f7fb fef5 	bl	80136fe <USBD_LL_IsoINIncomplete>
}
 8017914:	bf00      	nop
 8017916:	3708      	adds	r7, #8
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}

0801791c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b082      	sub	sp, #8
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801792a:	4618      	mov	r0, r3
 801792c:	f7fb ff33 	bl	8013796 <USBD_LL_DevConnected>
}
 8017930:	bf00      	nop
 8017932:	3708      	adds	r7, #8
 8017934:	46bd      	mov	sp, r7
 8017936:	bd80      	pop	{r7, pc}

08017938 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b082      	sub	sp, #8
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017946:	4618      	mov	r0, r3
 8017948:	f7fb ff30 	bl	80137ac <USBD_LL_DevDisconnected>
}
 801794c:	bf00      	nop
 801794e:	3708      	adds	r7, #8
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}

08017954 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b082      	sub	sp, #8
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	781b      	ldrb	r3, [r3, #0]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d13c      	bne.n	80179de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017964:	4a20      	ldr	r2, [pc, #128]	; (80179e8 <USBD_LL_Init+0x94>)
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	4a1e      	ldr	r2, [pc, #120]	; (80179e8 <USBD_LL_Init+0x94>)
 8017970:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017974:	4b1c      	ldr	r3, [pc, #112]	; (80179e8 <USBD_LL_Init+0x94>)
 8017976:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801797a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801797c:	4b1a      	ldr	r3, [pc, #104]	; (80179e8 <USBD_LL_Init+0x94>)
 801797e:	2206      	movs	r2, #6
 8017980:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017982:	4b19      	ldr	r3, [pc, #100]	; (80179e8 <USBD_LL_Init+0x94>)
 8017984:	2202      	movs	r2, #2
 8017986:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017988:	4b17      	ldr	r3, [pc, #92]	; (80179e8 <USBD_LL_Init+0x94>)
 801798a:	2200      	movs	r2, #0
 801798c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801798e:	4b16      	ldr	r3, [pc, #88]	; (80179e8 <USBD_LL_Init+0x94>)
 8017990:	2202      	movs	r2, #2
 8017992:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017994:	4b14      	ldr	r3, [pc, #80]	; (80179e8 <USBD_LL_Init+0x94>)
 8017996:	2200      	movs	r2, #0
 8017998:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801799a:	4b13      	ldr	r3, [pc, #76]	; (80179e8 <USBD_LL_Init+0x94>)
 801799c:	2200      	movs	r2, #0
 801799e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80179a0:	4b11      	ldr	r3, [pc, #68]	; (80179e8 <USBD_LL_Init+0x94>)
 80179a2:	2200      	movs	r2, #0
 80179a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80179a6:	4b10      	ldr	r3, [pc, #64]	; (80179e8 <USBD_LL_Init+0x94>)
 80179a8:	2201      	movs	r2, #1
 80179aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80179ac:	4b0e      	ldr	r3, [pc, #56]	; (80179e8 <USBD_LL_Init+0x94>)
 80179ae:	2200      	movs	r2, #0
 80179b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80179b2:	480d      	ldr	r0, [pc, #52]	; (80179e8 <USBD_LL_Init+0x94>)
 80179b4:	f7f2 fb0b 	bl	8009fce <HAL_PCD_Init>
 80179b8:	4603      	mov	r3, r0
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d001      	beq.n	80179c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80179be:	f7ea f93d 	bl	8001c3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80179c2:	2180      	movs	r1, #128	; 0x80
 80179c4:	4808      	ldr	r0, [pc, #32]	; (80179e8 <USBD_LL_Init+0x94>)
 80179c6:	f7f3 fcca 	bl	800b35e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80179ca:	2240      	movs	r2, #64	; 0x40
 80179cc:	2100      	movs	r1, #0
 80179ce:	4806      	ldr	r0, [pc, #24]	; (80179e8 <USBD_LL_Init+0x94>)
 80179d0:	f7f3 fc7e 	bl	800b2d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80179d4:	2280      	movs	r2, #128	; 0x80
 80179d6:	2101      	movs	r1, #1
 80179d8:	4803      	ldr	r0, [pc, #12]	; (80179e8 <USBD_LL_Init+0x94>)
 80179da:	f7f3 fc79 	bl	800b2d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80179de:	2300      	movs	r3, #0
}
 80179e0:	4618      	mov	r0, r3
 80179e2:	3708      	adds	r7, #8
 80179e4:	46bd      	mov	sp, r7
 80179e6:	bd80      	pop	{r7, pc}
 80179e8:	200061e4 	.word	0x200061e4

080179ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b084      	sub	sp, #16
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179f4:	2300      	movs	r3, #0
 80179f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179f8:	2300      	movs	r3, #0
 80179fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017a02:	4618      	mov	r0, r3
 8017a04:	f7f2 fc07 	bl	800a216 <HAL_PCD_Start>
 8017a08:	4603      	mov	r3, r0
 8017a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a0c:	7bfb      	ldrb	r3, [r7, #15]
 8017a0e:	4618      	mov	r0, r3
 8017a10:	f000 f9b0 	bl	8017d74 <USBD_Get_USB_Status>
 8017a14:	4603      	mov	r3, r0
 8017a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3710      	adds	r7, #16
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}

08017a22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017a22:	b580      	push	{r7, lr}
 8017a24:	b084      	sub	sp, #16
 8017a26:	af00      	add	r7, sp, #0
 8017a28:	6078      	str	r0, [r7, #4]
 8017a2a:	4608      	mov	r0, r1
 8017a2c:	4611      	mov	r1, r2
 8017a2e:	461a      	mov	r2, r3
 8017a30:	4603      	mov	r3, r0
 8017a32:	70fb      	strb	r3, [r7, #3]
 8017a34:	460b      	mov	r3, r1
 8017a36:	70bb      	strb	r3, [r7, #2]
 8017a38:	4613      	mov	r3, r2
 8017a3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a40:	2300      	movs	r3, #0
 8017a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017a4a:	78bb      	ldrb	r3, [r7, #2]
 8017a4c:	883a      	ldrh	r2, [r7, #0]
 8017a4e:	78f9      	ldrb	r1, [r7, #3]
 8017a50:	f7f3 f818 	bl	800aa84 <HAL_PCD_EP_Open>
 8017a54:	4603      	mov	r3, r0
 8017a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a58:	7bfb      	ldrb	r3, [r7, #15]
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	f000 f98a 	bl	8017d74 <USBD_Get_USB_Status>
 8017a60:	4603      	mov	r3, r0
 8017a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a66:	4618      	mov	r0, r3
 8017a68:	3710      	adds	r7, #16
 8017a6a:	46bd      	mov	sp, r7
 8017a6c:	bd80      	pop	{r7, pc}

08017a6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a6e:	b580      	push	{r7, lr}
 8017a70:	b084      	sub	sp, #16
 8017a72:	af00      	add	r7, sp, #0
 8017a74:	6078      	str	r0, [r7, #4]
 8017a76:	460b      	mov	r3, r1
 8017a78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017a88:	78fa      	ldrb	r2, [r7, #3]
 8017a8a:	4611      	mov	r1, r2
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f7f3 f861 	bl	800ab54 <HAL_PCD_EP_Close>
 8017a92:	4603      	mov	r3, r0
 8017a94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a96:	7bfb      	ldrb	r3, [r7, #15]
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f000 f96b 	bl	8017d74 <USBD_Get_USB_Status>
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	3710      	adds	r7, #16
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b084      	sub	sp, #16
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
 8017ab4:	460b      	mov	r3, r1
 8017ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ab8:	2300      	movs	r3, #0
 8017aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017abc:	2300      	movs	r3, #0
 8017abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017ac6:	78fa      	ldrb	r2, [r7, #3]
 8017ac8:	4611      	mov	r1, r2
 8017aca:	4618      	mov	r0, r3
 8017acc:	f7f3 f9f3 	bl	800aeb6 <HAL_PCD_EP_Flush>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ad4:	7bfb      	ldrb	r3, [r7, #15]
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f000 f94c 	bl	8017d74 <USBD_Get_USB_Status>
 8017adc:	4603      	mov	r3, r0
 8017ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	3710      	adds	r7, #16
 8017ae6:	46bd      	mov	sp, r7
 8017ae8:	bd80      	pop	{r7, pc}

08017aea <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017aea:	b580      	push	{r7, lr}
 8017aec:	b084      	sub	sp, #16
 8017aee:	af00      	add	r7, sp, #0
 8017af0:	6078      	str	r0, [r7, #4]
 8017af2:	460b      	mov	r3, r1
 8017af4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017af6:	2300      	movs	r3, #0
 8017af8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017afa:	2300      	movs	r3, #0
 8017afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b04:	78fa      	ldrb	r2, [r7, #3]
 8017b06:	4611      	mov	r1, r2
 8017b08:	4618      	mov	r0, r3
 8017b0a:	f7f3 f91a 	bl	800ad42 <HAL_PCD_EP_SetStall>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b12:	7bfb      	ldrb	r3, [r7, #15]
 8017b14:	4618      	mov	r0, r3
 8017b16:	f000 f92d 	bl	8017d74 <USBD_Get_USB_Status>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b20:	4618      	mov	r0, r3
 8017b22:	3710      	adds	r7, #16
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}

08017b28 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b084      	sub	sp, #16
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
 8017b30:	460b      	mov	r3, r1
 8017b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b34:	2300      	movs	r3, #0
 8017b36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b38:	2300      	movs	r3, #0
 8017b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b42:	78fa      	ldrb	r2, [r7, #3]
 8017b44:	4611      	mov	r1, r2
 8017b46:	4618      	mov	r0, r3
 8017b48:	f7f3 f95f 	bl	800ae0a <HAL_PCD_EP_ClrStall>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b50:	7bfb      	ldrb	r3, [r7, #15]
 8017b52:	4618      	mov	r0, r3
 8017b54:	f000 f90e 	bl	8017d74 <USBD_Get_USB_Status>
 8017b58:	4603      	mov	r3, r0
 8017b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b5e:	4618      	mov	r0, r3
 8017b60:	3710      	adds	r7, #16
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bd80      	pop	{r7, pc}

08017b66 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017b66:	b480      	push	{r7}
 8017b68:	b085      	sub	sp, #20
 8017b6a:	af00      	add	r7, sp, #0
 8017b6c:	6078      	str	r0, [r7, #4]
 8017b6e:	460b      	mov	r3, r1
 8017b70:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b78:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	da0b      	bge.n	8017b9a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017b82:	78fb      	ldrb	r3, [r7, #3]
 8017b84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017b88:	68f9      	ldr	r1, [r7, #12]
 8017b8a:	4613      	mov	r3, r2
 8017b8c:	00db      	lsls	r3, r3, #3
 8017b8e:	1a9b      	subs	r3, r3, r2
 8017b90:	009b      	lsls	r3, r3, #2
 8017b92:	440b      	add	r3, r1
 8017b94:	333e      	adds	r3, #62	; 0x3e
 8017b96:	781b      	ldrb	r3, [r3, #0]
 8017b98:	e00b      	b.n	8017bb2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017b9a:	78fb      	ldrb	r3, [r7, #3]
 8017b9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017ba0:	68f9      	ldr	r1, [r7, #12]
 8017ba2:	4613      	mov	r3, r2
 8017ba4:	00db      	lsls	r3, r3, #3
 8017ba6:	1a9b      	subs	r3, r3, r2
 8017ba8:	009b      	lsls	r3, r3, #2
 8017baa:	440b      	add	r3, r1
 8017bac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017bb0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	3714      	adds	r7, #20
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bbc:	4770      	bx	lr

08017bbe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017bbe:	b580      	push	{r7, lr}
 8017bc0:	b084      	sub	sp, #16
 8017bc2:	af00      	add	r7, sp, #0
 8017bc4:	6078      	str	r0, [r7, #4]
 8017bc6:	460b      	mov	r3, r1
 8017bc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bca:	2300      	movs	r3, #0
 8017bcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bce:	2300      	movs	r3, #0
 8017bd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017bd8:	78fa      	ldrb	r2, [r7, #3]
 8017bda:	4611      	mov	r1, r2
 8017bdc:	4618      	mov	r0, r3
 8017bde:	f7f2 ff2c 	bl	800aa3a <HAL_PCD_SetAddress>
 8017be2:	4603      	mov	r3, r0
 8017be4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017be6:	7bfb      	ldrb	r3, [r7, #15]
 8017be8:	4618      	mov	r0, r3
 8017bea:	f000 f8c3 	bl	8017d74 <USBD_Get_USB_Status>
 8017bee:	4603      	mov	r3, r0
 8017bf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017bf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	3710      	adds	r7, #16
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd80      	pop	{r7, pc}

08017bfc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017bfc:	b580      	push	{r7, lr}
 8017bfe:	b086      	sub	sp, #24
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	60f8      	str	r0, [r7, #12]
 8017c04:	607a      	str	r2, [r7, #4]
 8017c06:	603b      	str	r3, [r7, #0]
 8017c08:	460b      	mov	r3, r1
 8017c0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c10:	2300      	movs	r3, #0
 8017c12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017c1a:	7af9      	ldrb	r1, [r7, #11]
 8017c1c:	683b      	ldr	r3, [r7, #0]
 8017c1e:	687a      	ldr	r2, [r7, #4]
 8017c20:	f7f3 f845 	bl	800acae <HAL_PCD_EP_Transmit>
 8017c24:	4603      	mov	r3, r0
 8017c26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c28:	7dfb      	ldrb	r3, [r7, #23]
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f000 f8a2 	bl	8017d74 <USBD_Get_USB_Status>
 8017c30:	4603      	mov	r3, r0
 8017c32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017c34:	7dbb      	ldrb	r3, [r7, #22]
}
 8017c36:	4618      	mov	r0, r3
 8017c38:	3718      	adds	r7, #24
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}

08017c3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017c3e:	b580      	push	{r7, lr}
 8017c40:	b086      	sub	sp, #24
 8017c42:	af00      	add	r7, sp, #0
 8017c44:	60f8      	str	r0, [r7, #12]
 8017c46:	607a      	str	r2, [r7, #4]
 8017c48:	603b      	str	r3, [r7, #0]
 8017c4a:	460b      	mov	r3, r1
 8017c4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c4e:	2300      	movs	r3, #0
 8017c50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c52:	2300      	movs	r3, #0
 8017c54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017c5c:	7af9      	ldrb	r1, [r7, #11]
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	687a      	ldr	r2, [r7, #4]
 8017c62:	f7f2 ffc1 	bl	800abe8 <HAL_PCD_EP_Receive>
 8017c66:	4603      	mov	r3, r0
 8017c68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c6a:	7dfb      	ldrb	r3, [r7, #23]
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f000 f881 	bl	8017d74 <USBD_Get_USB_Status>
 8017c72:	4603      	mov	r3, r0
 8017c74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017c76:	7dbb      	ldrb	r3, [r7, #22]
}
 8017c78:	4618      	mov	r0, r3
 8017c7a:	3718      	adds	r7, #24
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bd80      	pop	{r7, pc}

08017c80 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
 8017c88:	460b      	mov	r3, r1
 8017c8a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017c92:	78fa      	ldrb	r2, [r7, #3]
 8017c94:	4611      	mov	r1, r2
 8017c96:	4618      	mov	r0, r3
 8017c98:	f7f2 fff1 	bl	800ac7e <HAL_PCD_EP_GetRxCount>
 8017c9c:	4603      	mov	r3, r0
}
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	3708      	adds	r7, #8
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	bd80      	pop	{r7, pc}
	...

08017ca8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b082      	sub	sp, #8
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
 8017cb0:	460b      	mov	r3, r1
 8017cb2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017cb4:	78fb      	ldrb	r3, [r7, #3]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d002      	beq.n	8017cc0 <HAL_PCDEx_LPM_Callback+0x18>
 8017cba:	2b01      	cmp	r3, #1
 8017cbc:	d01f      	beq.n	8017cfe <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8017cbe:	e03b      	b.n	8017d38 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	6a1b      	ldr	r3, [r3, #32]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d007      	beq.n	8017cd8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8017cc8:	f7e9 fbf8 	bl	80014bc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017ccc:	4b1c      	ldr	r3, [pc, #112]	; (8017d40 <HAL_PCDEx_LPM_Callback+0x98>)
 8017cce:	691b      	ldr	r3, [r3, #16]
 8017cd0:	4a1b      	ldr	r2, [pc, #108]	; (8017d40 <HAL_PCDEx_LPM_Callback+0x98>)
 8017cd2:	f023 0306 	bic.w	r3, r3, #6
 8017cd6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	687a      	ldr	r2, [r7, #4]
 8017ce4:	6812      	ldr	r2, [r2, #0]
 8017ce6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017cea:	f023 0301 	bic.w	r3, r3, #1
 8017cee:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f7fb fcc7 	bl	801368a <USBD_LL_Resume>
    break;
 8017cfc:	e01c      	b.n	8017d38 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	687a      	ldr	r2, [r7, #4]
 8017d0a:	6812      	ldr	r2, [r2, #0]
 8017d0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017d10:	f043 0301 	orr.w	r3, r3, #1
 8017d14:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7fb fc9e 	bl	801365e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	6a1b      	ldr	r3, [r3, #32]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d005      	beq.n	8017d36 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017d2a:	4b05      	ldr	r3, [pc, #20]	; (8017d40 <HAL_PCDEx_LPM_Callback+0x98>)
 8017d2c:	691b      	ldr	r3, [r3, #16]
 8017d2e:	4a04      	ldr	r2, [pc, #16]	; (8017d40 <HAL_PCDEx_LPM_Callback+0x98>)
 8017d30:	f043 0306 	orr.w	r3, r3, #6
 8017d34:	6113      	str	r3, [r2, #16]
    break;
 8017d36:	bf00      	nop
}
 8017d38:	bf00      	nop
 8017d3a:	3708      	adds	r7, #8
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}
 8017d40:	e000ed00 	.word	0xe000ed00

08017d44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017d44:	b480      	push	{r7}
 8017d46:	b083      	sub	sp, #12
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017d4c:	4b03      	ldr	r3, [pc, #12]	; (8017d5c <USBD_static_malloc+0x18>)
}
 8017d4e:	4618      	mov	r0, r3
 8017d50:	370c      	adds	r7, #12
 8017d52:	46bd      	mov	sp, r7
 8017d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d58:	4770      	bx	lr
 8017d5a:	bf00      	nop
 8017d5c:	20000418 	.word	0x20000418

08017d60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017d60:	b480      	push	{r7}
 8017d62:	b083      	sub	sp, #12
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	6078      	str	r0, [r7, #4]

}
 8017d68:	bf00      	nop
 8017d6a:	370c      	adds	r7, #12
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d72:	4770      	bx	lr

08017d74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017d74:	b480      	push	{r7}
 8017d76:	b085      	sub	sp, #20
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d7e:	2300      	movs	r3, #0
 8017d80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017d82:	79fb      	ldrb	r3, [r7, #7]
 8017d84:	2b03      	cmp	r3, #3
 8017d86:	d817      	bhi.n	8017db8 <USBD_Get_USB_Status+0x44>
 8017d88:	a201      	add	r2, pc, #4	; (adr r2, 8017d90 <USBD_Get_USB_Status+0x1c>)
 8017d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d8e:	bf00      	nop
 8017d90:	08017da1 	.word	0x08017da1
 8017d94:	08017da7 	.word	0x08017da7
 8017d98:	08017dad 	.word	0x08017dad
 8017d9c:	08017db3 	.word	0x08017db3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017da0:	2300      	movs	r3, #0
 8017da2:	73fb      	strb	r3, [r7, #15]
    break;
 8017da4:	e00b      	b.n	8017dbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017da6:	2303      	movs	r3, #3
 8017da8:	73fb      	strb	r3, [r7, #15]
    break;
 8017daa:	e008      	b.n	8017dbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017dac:	2301      	movs	r3, #1
 8017dae:	73fb      	strb	r3, [r7, #15]
    break;
 8017db0:	e005      	b.n	8017dbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017db2:	2303      	movs	r3, #3
 8017db4:	73fb      	strb	r3, [r7, #15]
    break;
 8017db6:	e002      	b.n	8017dbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017db8:	2303      	movs	r3, #3
 8017dba:	73fb      	strb	r3, [r7, #15]
    break;
 8017dbc:	bf00      	nop
  }
  return usb_status;
 8017dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	3714      	adds	r7, #20
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dca:	4770      	bx	lr

08017dcc <__errno>:
 8017dcc:	4b01      	ldr	r3, [pc, #4]	; (8017dd4 <__errno+0x8>)
 8017dce:	6818      	ldr	r0, [r3, #0]
 8017dd0:	4770      	bx	lr
 8017dd2:	bf00      	nop
 8017dd4:	20000174 	.word	0x20000174

08017dd8 <__libc_init_array>:
 8017dd8:	b570      	push	{r4, r5, r6, lr}
 8017dda:	4d0d      	ldr	r5, [pc, #52]	; (8017e10 <__libc_init_array+0x38>)
 8017ddc:	4c0d      	ldr	r4, [pc, #52]	; (8017e14 <__libc_init_array+0x3c>)
 8017dde:	1b64      	subs	r4, r4, r5
 8017de0:	10a4      	asrs	r4, r4, #2
 8017de2:	2600      	movs	r6, #0
 8017de4:	42a6      	cmp	r6, r4
 8017de6:	d109      	bne.n	8017dfc <__libc_init_array+0x24>
 8017de8:	4d0b      	ldr	r5, [pc, #44]	; (8017e18 <__libc_init_array+0x40>)
 8017dea:	4c0c      	ldr	r4, [pc, #48]	; (8017e1c <__libc_init_array+0x44>)
 8017dec:	f000 fc4e 	bl	801868c <_init>
 8017df0:	1b64      	subs	r4, r4, r5
 8017df2:	10a4      	asrs	r4, r4, #2
 8017df4:	2600      	movs	r6, #0
 8017df6:	42a6      	cmp	r6, r4
 8017df8:	d105      	bne.n	8017e06 <__libc_init_array+0x2e>
 8017dfa:	bd70      	pop	{r4, r5, r6, pc}
 8017dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e00:	4798      	blx	r3
 8017e02:	3601      	adds	r6, #1
 8017e04:	e7ee      	b.n	8017de4 <__libc_init_array+0xc>
 8017e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e0a:	4798      	blx	r3
 8017e0c:	3601      	adds	r6, #1
 8017e0e:	e7f2      	b.n	8017df6 <__libc_init_array+0x1e>
 8017e10:	08018c38 	.word	0x08018c38
 8017e14:	08018c38 	.word	0x08018c38
 8017e18:	08018c38 	.word	0x08018c38
 8017e1c:	08018c3c 	.word	0x08018c3c

08017e20 <memset>:
 8017e20:	4402      	add	r2, r0
 8017e22:	4603      	mov	r3, r0
 8017e24:	4293      	cmp	r3, r2
 8017e26:	d100      	bne.n	8017e2a <memset+0xa>
 8017e28:	4770      	bx	lr
 8017e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8017e2e:	e7f9      	b.n	8017e24 <memset+0x4>

08017e30 <siprintf>:
 8017e30:	b40e      	push	{r1, r2, r3}
 8017e32:	b500      	push	{lr}
 8017e34:	b09c      	sub	sp, #112	; 0x70
 8017e36:	ab1d      	add	r3, sp, #116	; 0x74
 8017e38:	9002      	str	r0, [sp, #8]
 8017e3a:	9006      	str	r0, [sp, #24]
 8017e3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017e40:	4809      	ldr	r0, [pc, #36]	; (8017e68 <siprintf+0x38>)
 8017e42:	9107      	str	r1, [sp, #28]
 8017e44:	9104      	str	r1, [sp, #16]
 8017e46:	4909      	ldr	r1, [pc, #36]	; (8017e6c <siprintf+0x3c>)
 8017e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e4c:	9105      	str	r1, [sp, #20]
 8017e4e:	6800      	ldr	r0, [r0, #0]
 8017e50:	9301      	str	r3, [sp, #4]
 8017e52:	a902      	add	r1, sp, #8
 8017e54:	f000 f868 	bl	8017f28 <_svfiprintf_r>
 8017e58:	9b02      	ldr	r3, [sp, #8]
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	701a      	strb	r2, [r3, #0]
 8017e5e:	b01c      	add	sp, #112	; 0x70
 8017e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e64:	b003      	add	sp, #12
 8017e66:	4770      	bx	lr
 8017e68:	20000174 	.word	0x20000174
 8017e6c:	ffff0208 	.word	0xffff0208

08017e70 <__ssputs_r>:
 8017e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e74:	688e      	ldr	r6, [r1, #8]
 8017e76:	429e      	cmp	r6, r3
 8017e78:	4682      	mov	sl, r0
 8017e7a:	460c      	mov	r4, r1
 8017e7c:	4690      	mov	r8, r2
 8017e7e:	461f      	mov	r7, r3
 8017e80:	d838      	bhi.n	8017ef4 <__ssputs_r+0x84>
 8017e82:	898a      	ldrh	r2, [r1, #12]
 8017e84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017e88:	d032      	beq.n	8017ef0 <__ssputs_r+0x80>
 8017e8a:	6825      	ldr	r5, [r4, #0]
 8017e8c:	6909      	ldr	r1, [r1, #16]
 8017e8e:	eba5 0901 	sub.w	r9, r5, r1
 8017e92:	6965      	ldr	r5, [r4, #20]
 8017e94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017e9c:	3301      	adds	r3, #1
 8017e9e:	444b      	add	r3, r9
 8017ea0:	106d      	asrs	r5, r5, #1
 8017ea2:	429d      	cmp	r5, r3
 8017ea4:	bf38      	it	cc
 8017ea6:	461d      	movcc	r5, r3
 8017ea8:	0553      	lsls	r3, r2, #21
 8017eaa:	d531      	bpl.n	8017f10 <__ssputs_r+0xa0>
 8017eac:	4629      	mov	r1, r5
 8017eae:	f000 fb47 	bl	8018540 <_malloc_r>
 8017eb2:	4606      	mov	r6, r0
 8017eb4:	b950      	cbnz	r0, 8017ecc <__ssputs_r+0x5c>
 8017eb6:	230c      	movs	r3, #12
 8017eb8:	f8ca 3000 	str.w	r3, [sl]
 8017ebc:	89a3      	ldrh	r3, [r4, #12]
 8017ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ec2:	81a3      	strh	r3, [r4, #12]
 8017ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ecc:	6921      	ldr	r1, [r4, #16]
 8017ece:	464a      	mov	r2, r9
 8017ed0:	f000 fabe 	bl	8018450 <memcpy>
 8017ed4:	89a3      	ldrh	r3, [r4, #12]
 8017ed6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ede:	81a3      	strh	r3, [r4, #12]
 8017ee0:	6126      	str	r6, [r4, #16]
 8017ee2:	6165      	str	r5, [r4, #20]
 8017ee4:	444e      	add	r6, r9
 8017ee6:	eba5 0509 	sub.w	r5, r5, r9
 8017eea:	6026      	str	r6, [r4, #0]
 8017eec:	60a5      	str	r5, [r4, #8]
 8017eee:	463e      	mov	r6, r7
 8017ef0:	42be      	cmp	r6, r7
 8017ef2:	d900      	bls.n	8017ef6 <__ssputs_r+0x86>
 8017ef4:	463e      	mov	r6, r7
 8017ef6:	4632      	mov	r2, r6
 8017ef8:	6820      	ldr	r0, [r4, #0]
 8017efa:	4641      	mov	r1, r8
 8017efc:	f000 fab6 	bl	801846c <memmove>
 8017f00:	68a3      	ldr	r3, [r4, #8]
 8017f02:	6822      	ldr	r2, [r4, #0]
 8017f04:	1b9b      	subs	r3, r3, r6
 8017f06:	4432      	add	r2, r6
 8017f08:	60a3      	str	r3, [r4, #8]
 8017f0a:	6022      	str	r2, [r4, #0]
 8017f0c:	2000      	movs	r0, #0
 8017f0e:	e7db      	b.n	8017ec8 <__ssputs_r+0x58>
 8017f10:	462a      	mov	r2, r5
 8017f12:	f000 fb6f 	bl	80185f4 <_realloc_r>
 8017f16:	4606      	mov	r6, r0
 8017f18:	2800      	cmp	r0, #0
 8017f1a:	d1e1      	bne.n	8017ee0 <__ssputs_r+0x70>
 8017f1c:	6921      	ldr	r1, [r4, #16]
 8017f1e:	4650      	mov	r0, sl
 8017f20:	f000 fabe 	bl	80184a0 <_free_r>
 8017f24:	e7c7      	b.n	8017eb6 <__ssputs_r+0x46>
	...

08017f28 <_svfiprintf_r>:
 8017f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f2c:	4698      	mov	r8, r3
 8017f2e:	898b      	ldrh	r3, [r1, #12]
 8017f30:	061b      	lsls	r3, r3, #24
 8017f32:	b09d      	sub	sp, #116	; 0x74
 8017f34:	4607      	mov	r7, r0
 8017f36:	460d      	mov	r5, r1
 8017f38:	4614      	mov	r4, r2
 8017f3a:	d50e      	bpl.n	8017f5a <_svfiprintf_r+0x32>
 8017f3c:	690b      	ldr	r3, [r1, #16]
 8017f3e:	b963      	cbnz	r3, 8017f5a <_svfiprintf_r+0x32>
 8017f40:	2140      	movs	r1, #64	; 0x40
 8017f42:	f000 fafd 	bl	8018540 <_malloc_r>
 8017f46:	6028      	str	r0, [r5, #0]
 8017f48:	6128      	str	r0, [r5, #16]
 8017f4a:	b920      	cbnz	r0, 8017f56 <_svfiprintf_r+0x2e>
 8017f4c:	230c      	movs	r3, #12
 8017f4e:	603b      	str	r3, [r7, #0]
 8017f50:	f04f 30ff 	mov.w	r0, #4294967295
 8017f54:	e0d1      	b.n	80180fa <_svfiprintf_r+0x1d2>
 8017f56:	2340      	movs	r3, #64	; 0x40
 8017f58:	616b      	str	r3, [r5, #20]
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8017f5e:	2320      	movs	r3, #32
 8017f60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017f64:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f68:	2330      	movs	r3, #48	; 0x30
 8017f6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018114 <_svfiprintf_r+0x1ec>
 8017f6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017f72:	f04f 0901 	mov.w	r9, #1
 8017f76:	4623      	mov	r3, r4
 8017f78:	469a      	mov	sl, r3
 8017f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f7e:	b10a      	cbz	r2, 8017f84 <_svfiprintf_r+0x5c>
 8017f80:	2a25      	cmp	r2, #37	; 0x25
 8017f82:	d1f9      	bne.n	8017f78 <_svfiprintf_r+0x50>
 8017f84:	ebba 0b04 	subs.w	fp, sl, r4
 8017f88:	d00b      	beq.n	8017fa2 <_svfiprintf_r+0x7a>
 8017f8a:	465b      	mov	r3, fp
 8017f8c:	4622      	mov	r2, r4
 8017f8e:	4629      	mov	r1, r5
 8017f90:	4638      	mov	r0, r7
 8017f92:	f7ff ff6d 	bl	8017e70 <__ssputs_r>
 8017f96:	3001      	adds	r0, #1
 8017f98:	f000 80aa 	beq.w	80180f0 <_svfiprintf_r+0x1c8>
 8017f9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f9e:	445a      	add	r2, fp
 8017fa0:	9209      	str	r2, [sp, #36]	; 0x24
 8017fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	f000 80a2 	beq.w	80180f0 <_svfiprintf_r+0x1c8>
 8017fac:	2300      	movs	r3, #0
 8017fae:	f04f 32ff 	mov.w	r2, #4294967295
 8017fb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017fb6:	f10a 0a01 	add.w	sl, sl, #1
 8017fba:	9304      	str	r3, [sp, #16]
 8017fbc:	9307      	str	r3, [sp, #28]
 8017fbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017fc2:	931a      	str	r3, [sp, #104]	; 0x68
 8017fc4:	4654      	mov	r4, sl
 8017fc6:	2205      	movs	r2, #5
 8017fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fcc:	4851      	ldr	r0, [pc, #324]	; (8018114 <_svfiprintf_r+0x1ec>)
 8017fce:	f7e8 f91f 	bl	8000210 <memchr>
 8017fd2:	9a04      	ldr	r2, [sp, #16]
 8017fd4:	b9d8      	cbnz	r0, 801800e <_svfiprintf_r+0xe6>
 8017fd6:	06d0      	lsls	r0, r2, #27
 8017fd8:	bf44      	itt	mi
 8017fda:	2320      	movmi	r3, #32
 8017fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017fe0:	0711      	lsls	r1, r2, #28
 8017fe2:	bf44      	itt	mi
 8017fe4:	232b      	movmi	r3, #43	; 0x2b
 8017fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017fea:	f89a 3000 	ldrb.w	r3, [sl]
 8017fee:	2b2a      	cmp	r3, #42	; 0x2a
 8017ff0:	d015      	beq.n	801801e <_svfiprintf_r+0xf6>
 8017ff2:	9a07      	ldr	r2, [sp, #28]
 8017ff4:	4654      	mov	r4, sl
 8017ff6:	2000      	movs	r0, #0
 8017ff8:	f04f 0c0a 	mov.w	ip, #10
 8017ffc:	4621      	mov	r1, r4
 8017ffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018002:	3b30      	subs	r3, #48	; 0x30
 8018004:	2b09      	cmp	r3, #9
 8018006:	d94e      	bls.n	80180a6 <_svfiprintf_r+0x17e>
 8018008:	b1b0      	cbz	r0, 8018038 <_svfiprintf_r+0x110>
 801800a:	9207      	str	r2, [sp, #28]
 801800c:	e014      	b.n	8018038 <_svfiprintf_r+0x110>
 801800e:	eba0 0308 	sub.w	r3, r0, r8
 8018012:	fa09 f303 	lsl.w	r3, r9, r3
 8018016:	4313      	orrs	r3, r2
 8018018:	9304      	str	r3, [sp, #16]
 801801a:	46a2      	mov	sl, r4
 801801c:	e7d2      	b.n	8017fc4 <_svfiprintf_r+0x9c>
 801801e:	9b03      	ldr	r3, [sp, #12]
 8018020:	1d19      	adds	r1, r3, #4
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	9103      	str	r1, [sp, #12]
 8018026:	2b00      	cmp	r3, #0
 8018028:	bfbb      	ittet	lt
 801802a:	425b      	neglt	r3, r3
 801802c:	f042 0202 	orrlt.w	r2, r2, #2
 8018030:	9307      	strge	r3, [sp, #28]
 8018032:	9307      	strlt	r3, [sp, #28]
 8018034:	bfb8      	it	lt
 8018036:	9204      	strlt	r2, [sp, #16]
 8018038:	7823      	ldrb	r3, [r4, #0]
 801803a:	2b2e      	cmp	r3, #46	; 0x2e
 801803c:	d10c      	bne.n	8018058 <_svfiprintf_r+0x130>
 801803e:	7863      	ldrb	r3, [r4, #1]
 8018040:	2b2a      	cmp	r3, #42	; 0x2a
 8018042:	d135      	bne.n	80180b0 <_svfiprintf_r+0x188>
 8018044:	9b03      	ldr	r3, [sp, #12]
 8018046:	1d1a      	adds	r2, r3, #4
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	9203      	str	r2, [sp, #12]
 801804c:	2b00      	cmp	r3, #0
 801804e:	bfb8      	it	lt
 8018050:	f04f 33ff 	movlt.w	r3, #4294967295
 8018054:	3402      	adds	r4, #2
 8018056:	9305      	str	r3, [sp, #20]
 8018058:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018124 <_svfiprintf_r+0x1fc>
 801805c:	7821      	ldrb	r1, [r4, #0]
 801805e:	2203      	movs	r2, #3
 8018060:	4650      	mov	r0, sl
 8018062:	f7e8 f8d5 	bl	8000210 <memchr>
 8018066:	b140      	cbz	r0, 801807a <_svfiprintf_r+0x152>
 8018068:	2340      	movs	r3, #64	; 0x40
 801806a:	eba0 000a 	sub.w	r0, r0, sl
 801806e:	fa03 f000 	lsl.w	r0, r3, r0
 8018072:	9b04      	ldr	r3, [sp, #16]
 8018074:	4303      	orrs	r3, r0
 8018076:	3401      	adds	r4, #1
 8018078:	9304      	str	r3, [sp, #16]
 801807a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801807e:	4826      	ldr	r0, [pc, #152]	; (8018118 <_svfiprintf_r+0x1f0>)
 8018080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018084:	2206      	movs	r2, #6
 8018086:	f7e8 f8c3 	bl	8000210 <memchr>
 801808a:	2800      	cmp	r0, #0
 801808c:	d038      	beq.n	8018100 <_svfiprintf_r+0x1d8>
 801808e:	4b23      	ldr	r3, [pc, #140]	; (801811c <_svfiprintf_r+0x1f4>)
 8018090:	bb1b      	cbnz	r3, 80180da <_svfiprintf_r+0x1b2>
 8018092:	9b03      	ldr	r3, [sp, #12]
 8018094:	3307      	adds	r3, #7
 8018096:	f023 0307 	bic.w	r3, r3, #7
 801809a:	3308      	adds	r3, #8
 801809c:	9303      	str	r3, [sp, #12]
 801809e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180a0:	4433      	add	r3, r6
 80180a2:	9309      	str	r3, [sp, #36]	; 0x24
 80180a4:	e767      	b.n	8017f76 <_svfiprintf_r+0x4e>
 80180a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80180aa:	460c      	mov	r4, r1
 80180ac:	2001      	movs	r0, #1
 80180ae:	e7a5      	b.n	8017ffc <_svfiprintf_r+0xd4>
 80180b0:	2300      	movs	r3, #0
 80180b2:	3401      	adds	r4, #1
 80180b4:	9305      	str	r3, [sp, #20]
 80180b6:	4619      	mov	r1, r3
 80180b8:	f04f 0c0a 	mov.w	ip, #10
 80180bc:	4620      	mov	r0, r4
 80180be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180c2:	3a30      	subs	r2, #48	; 0x30
 80180c4:	2a09      	cmp	r2, #9
 80180c6:	d903      	bls.n	80180d0 <_svfiprintf_r+0x1a8>
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d0c5      	beq.n	8018058 <_svfiprintf_r+0x130>
 80180cc:	9105      	str	r1, [sp, #20]
 80180ce:	e7c3      	b.n	8018058 <_svfiprintf_r+0x130>
 80180d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80180d4:	4604      	mov	r4, r0
 80180d6:	2301      	movs	r3, #1
 80180d8:	e7f0      	b.n	80180bc <_svfiprintf_r+0x194>
 80180da:	ab03      	add	r3, sp, #12
 80180dc:	9300      	str	r3, [sp, #0]
 80180de:	462a      	mov	r2, r5
 80180e0:	4b0f      	ldr	r3, [pc, #60]	; (8018120 <_svfiprintf_r+0x1f8>)
 80180e2:	a904      	add	r1, sp, #16
 80180e4:	4638      	mov	r0, r7
 80180e6:	f3af 8000 	nop.w
 80180ea:	1c42      	adds	r2, r0, #1
 80180ec:	4606      	mov	r6, r0
 80180ee:	d1d6      	bne.n	801809e <_svfiprintf_r+0x176>
 80180f0:	89ab      	ldrh	r3, [r5, #12]
 80180f2:	065b      	lsls	r3, r3, #25
 80180f4:	f53f af2c 	bmi.w	8017f50 <_svfiprintf_r+0x28>
 80180f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80180fa:	b01d      	add	sp, #116	; 0x74
 80180fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018100:	ab03      	add	r3, sp, #12
 8018102:	9300      	str	r3, [sp, #0]
 8018104:	462a      	mov	r2, r5
 8018106:	4b06      	ldr	r3, [pc, #24]	; (8018120 <_svfiprintf_r+0x1f8>)
 8018108:	a904      	add	r1, sp, #16
 801810a:	4638      	mov	r0, r7
 801810c:	f000 f87a 	bl	8018204 <_printf_i>
 8018110:	e7eb      	b.n	80180ea <_svfiprintf_r+0x1c2>
 8018112:	bf00      	nop
 8018114:	08018bfc 	.word	0x08018bfc
 8018118:	08018c06 	.word	0x08018c06
 801811c:	00000000 	.word	0x00000000
 8018120:	08017e71 	.word	0x08017e71
 8018124:	08018c02 	.word	0x08018c02

08018128 <_printf_common>:
 8018128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801812c:	4616      	mov	r6, r2
 801812e:	4699      	mov	r9, r3
 8018130:	688a      	ldr	r2, [r1, #8]
 8018132:	690b      	ldr	r3, [r1, #16]
 8018134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018138:	4293      	cmp	r3, r2
 801813a:	bfb8      	it	lt
 801813c:	4613      	movlt	r3, r2
 801813e:	6033      	str	r3, [r6, #0]
 8018140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018144:	4607      	mov	r7, r0
 8018146:	460c      	mov	r4, r1
 8018148:	b10a      	cbz	r2, 801814e <_printf_common+0x26>
 801814a:	3301      	adds	r3, #1
 801814c:	6033      	str	r3, [r6, #0]
 801814e:	6823      	ldr	r3, [r4, #0]
 8018150:	0699      	lsls	r1, r3, #26
 8018152:	bf42      	ittt	mi
 8018154:	6833      	ldrmi	r3, [r6, #0]
 8018156:	3302      	addmi	r3, #2
 8018158:	6033      	strmi	r3, [r6, #0]
 801815a:	6825      	ldr	r5, [r4, #0]
 801815c:	f015 0506 	ands.w	r5, r5, #6
 8018160:	d106      	bne.n	8018170 <_printf_common+0x48>
 8018162:	f104 0a19 	add.w	sl, r4, #25
 8018166:	68e3      	ldr	r3, [r4, #12]
 8018168:	6832      	ldr	r2, [r6, #0]
 801816a:	1a9b      	subs	r3, r3, r2
 801816c:	42ab      	cmp	r3, r5
 801816e:	dc26      	bgt.n	80181be <_printf_common+0x96>
 8018170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018174:	1e13      	subs	r3, r2, #0
 8018176:	6822      	ldr	r2, [r4, #0]
 8018178:	bf18      	it	ne
 801817a:	2301      	movne	r3, #1
 801817c:	0692      	lsls	r2, r2, #26
 801817e:	d42b      	bmi.n	80181d8 <_printf_common+0xb0>
 8018180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018184:	4649      	mov	r1, r9
 8018186:	4638      	mov	r0, r7
 8018188:	47c0      	blx	r8
 801818a:	3001      	adds	r0, #1
 801818c:	d01e      	beq.n	80181cc <_printf_common+0xa4>
 801818e:	6823      	ldr	r3, [r4, #0]
 8018190:	68e5      	ldr	r5, [r4, #12]
 8018192:	6832      	ldr	r2, [r6, #0]
 8018194:	f003 0306 	and.w	r3, r3, #6
 8018198:	2b04      	cmp	r3, #4
 801819a:	bf08      	it	eq
 801819c:	1aad      	subeq	r5, r5, r2
 801819e:	68a3      	ldr	r3, [r4, #8]
 80181a0:	6922      	ldr	r2, [r4, #16]
 80181a2:	bf0c      	ite	eq
 80181a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80181a8:	2500      	movne	r5, #0
 80181aa:	4293      	cmp	r3, r2
 80181ac:	bfc4      	itt	gt
 80181ae:	1a9b      	subgt	r3, r3, r2
 80181b0:	18ed      	addgt	r5, r5, r3
 80181b2:	2600      	movs	r6, #0
 80181b4:	341a      	adds	r4, #26
 80181b6:	42b5      	cmp	r5, r6
 80181b8:	d11a      	bne.n	80181f0 <_printf_common+0xc8>
 80181ba:	2000      	movs	r0, #0
 80181bc:	e008      	b.n	80181d0 <_printf_common+0xa8>
 80181be:	2301      	movs	r3, #1
 80181c0:	4652      	mov	r2, sl
 80181c2:	4649      	mov	r1, r9
 80181c4:	4638      	mov	r0, r7
 80181c6:	47c0      	blx	r8
 80181c8:	3001      	adds	r0, #1
 80181ca:	d103      	bne.n	80181d4 <_printf_common+0xac>
 80181cc:	f04f 30ff 	mov.w	r0, #4294967295
 80181d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181d4:	3501      	adds	r5, #1
 80181d6:	e7c6      	b.n	8018166 <_printf_common+0x3e>
 80181d8:	18e1      	adds	r1, r4, r3
 80181da:	1c5a      	adds	r2, r3, #1
 80181dc:	2030      	movs	r0, #48	; 0x30
 80181de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80181e2:	4422      	add	r2, r4
 80181e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80181e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80181ec:	3302      	adds	r3, #2
 80181ee:	e7c7      	b.n	8018180 <_printf_common+0x58>
 80181f0:	2301      	movs	r3, #1
 80181f2:	4622      	mov	r2, r4
 80181f4:	4649      	mov	r1, r9
 80181f6:	4638      	mov	r0, r7
 80181f8:	47c0      	blx	r8
 80181fa:	3001      	adds	r0, #1
 80181fc:	d0e6      	beq.n	80181cc <_printf_common+0xa4>
 80181fe:	3601      	adds	r6, #1
 8018200:	e7d9      	b.n	80181b6 <_printf_common+0x8e>
	...

08018204 <_printf_i>:
 8018204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018208:	460c      	mov	r4, r1
 801820a:	4691      	mov	r9, r2
 801820c:	7e27      	ldrb	r7, [r4, #24]
 801820e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018210:	2f78      	cmp	r7, #120	; 0x78
 8018212:	4680      	mov	r8, r0
 8018214:	469a      	mov	sl, r3
 8018216:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801821a:	d807      	bhi.n	801822c <_printf_i+0x28>
 801821c:	2f62      	cmp	r7, #98	; 0x62
 801821e:	d80a      	bhi.n	8018236 <_printf_i+0x32>
 8018220:	2f00      	cmp	r7, #0
 8018222:	f000 80d8 	beq.w	80183d6 <_printf_i+0x1d2>
 8018226:	2f58      	cmp	r7, #88	; 0x58
 8018228:	f000 80a3 	beq.w	8018372 <_printf_i+0x16e>
 801822c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018234:	e03a      	b.n	80182ac <_printf_i+0xa8>
 8018236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801823a:	2b15      	cmp	r3, #21
 801823c:	d8f6      	bhi.n	801822c <_printf_i+0x28>
 801823e:	a001      	add	r0, pc, #4	; (adr r0, 8018244 <_printf_i+0x40>)
 8018240:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018244:	0801829d 	.word	0x0801829d
 8018248:	080182b1 	.word	0x080182b1
 801824c:	0801822d 	.word	0x0801822d
 8018250:	0801822d 	.word	0x0801822d
 8018254:	0801822d 	.word	0x0801822d
 8018258:	0801822d 	.word	0x0801822d
 801825c:	080182b1 	.word	0x080182b1
 8018260:	0801822d 	.word	0x0801822d
 8018264:	0801822d 	.word	0x0801822d
 8018268:	0801822d 	.word	0x0801822d
 801826c:	0801822d 	.word	0x0801822d
 8018270:	080183bd 	.word	0x080183bd
 8018274:	080182e1 	.word	0x080182e1
 8018278:	0801839f 	.word	0x0801839f
 801827c:	0801822d 	.word	0x0801822d
 8018280:	0801822d 	.word	0x0801822d
 8018284:	080183df 	.word	0x080183df
 8018288:	0801822d 	.word	0x0801822d
 801828c:	080182e1 	.word	0x080182e1
 8018290:	0801822d 	.word	0x0801822d
 8018294:	0801822d 	.word	0x0801822d
 8018298:	080183a7 	.word	0x080183a7
 801829c:	680b      	ldr	r3, [r1, #0]
 801829e:	1d1a      	adds	r2, r3, #4
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	600a      	str	r2, [r1, #0]
 80182a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80182a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80182ac:	2301      	movs	r3, #1
 80182ae:	e0a3      	b.n	80183f8 <_printf_i+0x1f4>
 80182b0:	6825      	ldr	r5, [r4, #0]
 80182b2:	6808      	ldr	r0, [r1, #0]
 80182b4:	062e      	lsls	r6, r5, #24
 80182b6:	f100 0304 	add.w	r3, r0, #4
 80182ba:	d50a      	bpl.n	80182d2 <_printf_i+0xce>
 80182bc:	6805      	ldr	r5, [r0, #0]
 80182be:	600b      	str	r3, [r1, #0]
 80182c0:	2d00      	cmp	r5, #0
 80182c2:	da03      	bge.n	80182cc <_printf_i+0xc8>
 80182c4:	232d      	movs	r3, #45	; 0x2d
 80182c6:	426d      	negs	r5, r5
 80182c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80182cc:	485e      	ldr	r0, [pc, #376]	; (8018448 <_printf_i+0x244>)
 80182ce:	230a      	movs	r3, #10
 80182d0:	e019      	b.n	8018306 <_printf_i+0x102>
 80182d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80182d6:	6805      	ldr	r5, [r0, #0]
 80182d8:	600b      	str	r3, [r1, #0]
 80182da:	bf18      	it	ne
 80182dc:	b22d      	sxthne	r5, r5
 80182de:	e7ef      	b.n	80182c0 <_printf_i+0xbc>
 80182e0:	680b      	ldr	r3, [r1, #0]
 80182e2:	6825      	ldr	r5, [r4, #0]
 80182e4:	1d18      	adds	r0, r3, #4
 80182e6:	6008      	str	r0, [r1, #0]
 80182e8:	0628      	lsls	r0, r5, #24
 80182ea:	d501      	bpl.n	80182f0 <_printf_i+0xec>
 80182ec:	681d      	ldr	r5, [r3, #0]
 80182ee:	e002      	b.n	80182f6 <_printf_i+0xf2>
 80182f0:	0669      	lsls	r1, r5, #25
 80182f2:	d5fb      	bpl.n	80182ec <_printf_i+0xe8>
 80182f4:	881d      	ldrh	r5, [r3, #0]
 80182f6:	4854      	ldr	r0, [pc, #336]	; (8018448 <_printf_i+0x244>)
 80182f8:	2f6f      	cmp	r7, #111	; 0x6f
 80182fa:	bf0c      	ite	eq
 80182fc:	2308      	moveq	r3, #8
 80182fe:	230a      	movne	r3, #10
 8018300:	2100      	movs	r1, #0
 8018302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018306:	6866      	ldr	r6, [r4, #4]
 8018308:	60a6      	str	r6, [r4, #8]
 801830a:	2e00      	cmp	r6, #0
 801830c:	bfa2      	ittt	ge
 801830e:	6821      	ldrge	r1, [r4, #0]
 8018310:	f021 0104 	bicge.w	r1, r1, #4
 8018314:	6021      	strge	r1, [r4, #0]
 8018316:	b90d      	cbnz	r5, 801831c <_printf_i+0x118>
 8018318:	2e00      	cmp	r6, #0
 801831a:	d04d      	beq.n	80183b8 <_printf_i+0x1b4>
 801831c:	4616      	mov	r6, r2
 801831e:	fbb5 f1f3 	udiv	r1, r5, r3
 8018322:	fb03 5711 	mls	r7, r3, r1, r5
 8018326:	5dc7      	ldrb	r7, [r0, r7]
 8018328:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801832c:	462f      	mov	r7, r5
 801832e:	42bb      	cmp	r3, r7
 8018330:	460d      	mov	r5, r1
 8018332:	d9f4      	bls.n	801831e <_printf_i+0x11a>
 8018334:	2b08      	cmp	r3, #8
 8018336:	d10b      	bne.n	8018350 <_printf_i+0x14c>
 8018338:	6823      	ldr	r3, [r4, #0]
 801833a:	07df      	lsls	r7, r3, #31
 801833c:	d508      	bpl.n	8018350 <_printf_i+0x14c>
 801833e:	6923      	ldr	r3, [r4, #16]
 8018340:	6861      	ldr	r1, [r4, #4]
 8018342:	4299      	cmp	r1, r3
 8018344:	bfde      	ittt	le
 8018346:	2330      	movle	r3, #48	; 0x30
 8018348:	f806 3c01 	strble.w	r3, [r6, #-1]
 801834c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018350:	1b92      	subs	r2, r2, r6
 8018352:	6122      	str	r2, [r4, #16]
 8018354:	f8cd a000 	str.w	sl, [sp]
 8018358:	464b      	mov	r3, r9
 801835a:	aa03      	add	r2, sp, #12
 801835c:	4621      	mov	r1, r4
 801835e:	4640      	mov	r0, r8
 8018360:	f7ff fee2 	bl	8018128 <_printf_common>
 8018364:	3001      	adds	r0, #1
 8018366:	d14c      	bne.n	8018402 <_printf_i+0x1fe>
 8018368:	f04f 30ff 	mov.w	r0, #4294967295
 801836c:	b004      	add	sp, #16
 801836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018372:	4835      	ldr	r0, [pc, #212]	; (8018448 <_printf_i+0x244>)
 8018374:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018378:	6823      	ldr	r3, [r4, #0]
 801837a:	680e      	ldr	r6, [r1, #0]
 801837c:	061f      	lsls	r7, r3, #24
 801837e:	f856 5b04 	ldr.w	r5, [r6], #4
 8018382:	600e      	str	r6, [r1, #0]
 8018384:	d514      	bpl.n	80183b0 <_printf_i+0x1ac>
 8018386:	07d9      	lsls	r1, r3, #31
 8018388:	bf44      	itt	mi
 801838a:	f043 0320 	orrmi.w	r3, r3, #32
 801838e:	6023      	strmi	r3, [r4, #0]
 8018390:	b91d      	cbnz	r5, 801839a <_printf_i+0x196>
 8018392:	6823      	ldr	r3, [r4, #0]
 8018394:	f023 0320 	bic.w	r3, r3, #32
 8018398:	6023      	str	r3, [r4, #0]
 801839a:	2310      	movs	r3, #16
 801839c:	e7b0      	b.n	8018300 <_printf_i+0xfc>
 801839e:	6823      	ldr	r3, [r4, #0]
 80183a0:	f043 0320 	orr.w	r3, r3, #32
 80183a4:	6023      	str	r3, [r4, #0]
 80183a6:	2378      	movs	r3, #120	; 0x78
 80183a8:	4828      	ldr	r0, [pc, #160]	; (801844c <_printf_i+0x248>)
 80183aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80183ae:	e7e3      	b.n	8018378 <_printf_i+0x174>
 80183b0:	065e      	lsls	r6, r3, #25
 80183b2:	bf48      	it	mi
 80183b4:	b2ad      	uxthmi	r5, r5
 80183b6:	e7e6      	b.n	8018386 <_printf_i+0x182>
 80183b8:	4616      	mov	r6, r2
 80183ba:	e7bb      	b.n	8018334 <_printf_i+0x130>
 80183bc:	680b      	ldr	r3, [r1, #0]
 80183be:	6826      	ldr	r6, [r4, #0]
 80183c0:	6960      	ldr	r0, [r4, #20]
 80183c2:	1d1d      	adds	r5, r3, #4
 80183c4:	600d      	str	r5, [r1, #0]
 80183c6:	0635      	lsls	r5, r6, #24
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	d501      	bpl.n	80183d0 <_printf_i+0x1cc>
 80183cc:	6018      	str	r0, [r3, #0]
 80183ce:	e002      	b.n	80183d6 <_printf_i+0x1d2>
 80183d0:	0671      	lsls	r1, r6, #25
 80183d2:	d5fb      	bpl.n	80183cc <_printf_i+0x1c8>
 80183d4:	8018      	strh	r0, [r3, #0]
 80183d6:	2300      	movs	r3, #0
 80183d8:	6123      	str	r3, [r4, #16]
 80183da:	4616      	mov	r6, r2
 80183dc:	e7ba      	b.n	8018354 <_printf_i+0x150>
 80183de:	680b      	ldr	r3, [r1, #0]
 80183e0:	1d1a      	adds	r2, r3, #4
 80183e2:	600a      	str	r2, [r1, #0]
 80183e4:	681e      	ldr	r6, [r3, #0]
 80183e6:	6862      	ldr	r2, [r4, #4]
 80183e8:	2100      	movs	r1, #0
 80183ea:	4630      	mov	r0, r6
 80183ec:	f7e7 ff10 	bl	8000210 <memchr>
 80183f0:	b108      	cbz	r0, 80183f6 <_printf_i+0x1f2>
 80183f2:	1b80      	subs	r0, r0, r6
 80183f4:	6060      	str	r0, [r4, #4]
 80183f6:	6863      	ldr	r3, [r4, #4]
 80183f8:	6123      	str	r3, [r4, #16]
 80183fa:	2300      	movs	r3, #0
 80183fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018400:	e7a8      	b.n	8018354 <_printf_i+0x150>
 8018402:	6923      	ldr	r3, [r4, #16]
 8018404:	4632      	mov	r2, r6
 8018406:	4649      	mov	r1, r9
 8018408:	4640      	mov	r0, r8
 801840a:	47d0      	blx	sl
 801840c:	3001      	adds	r0, #1
 801840e:	d0ab      	beq.n	8018368 <_printf_i+0x164>
 8018410:	6823      	ldr	r3, [r4, #0]
 8018412:	079b      	lsls	r3, r3, #30
 8018414:	d413      	bmi.n	801843e <_printf_i+0x23a>
 8018416:	68e0      	ldr	r0, [r4, #12]
 8018418:	9b03      	ldr	r3, [sp, #12]
 801841a:	4298      	cmp	r0, r3
 801841c:	bfb8      	it	lt
 801841e:	4618      	movlt	r0, r3
 8018420:	e7a4      	b.n	801836c <_printf_i+0x168>
 8018422:	2301      	movs	r3, #1
 8018424:	4632      	mov	r2, r6
 8018426:	4649      	mov	r1, r9
 8018428:	4640      	mov	r0, r8
 801842a:	47d0      	blx	sl
 801842c:	3001      	adds	r0, #1
 801842e:	d09b      	beq.n	8018368 <_printf_i+0x164>
 8018430:	3501      	adds	r5, #1
 8018432:	68e3      	ldr	r3, [r4, #12]
 8018434:	9903      	ldr	r1, [sp, #12]
 8018436:	1a5b      	subs	r3, r3, r1
 8018438:	42ab      	cmp	r3, r5
 801843a:	dcf2      	bgt.n	8018422 <_printf_i+0x21e>
 801843c:	e7eb      	b.n	8018416 <_printf_i+0x212>
 801843e:	2500      	movs	r5, #0
 8018440:	f104 0619 	add.w	r6, r4, #25
 8018444:	e7f5      	b.n	8018432 <_printf_i+0x22e>
 8018446:	bf00      	nop
 8018448:	08018c0d 	.word	0x08018c0d
 801844c:	08018c1e 	.word	0x08018c1e

08018450 <memcpy>:
 8018450:	440a      	add	r2, r1
 8018452:	4291      	cmp	r1, r2
 8018454:	f100 33ff 	add.w	r3, r0, #4294967295
 8018458:	d100      	bne.n	801845c <memcpy+0xc>
 801845a:	4770      	bx	lr
 801845c:	b510      	push	{r4, lr}
 801845e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018462:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018466:	4291      	cmp	r1, r2
 8018468:	d1f9      	bne.n	801845e <memcpy+0xe>
 801846a:	bd10      	pop	{r4, pc}

0801846c <memmove>:
 801846c:	4288      	cmp	r0, r1
 801846e:	b510      	push	{r4, lr}
 8018470:	eb01 0402 	add.w	r4, r1, r2
 8018474:	d902      	bls.n	801847c <memmove+0x10>
 8018476:	4284      	cmp	r4, r0
 8018478:	4623      	mov	r3, r4
 801847a:	d807      	bhi.n	801848c <memmove+0x20>
 801847c:	1e43      	subs	r3, r0, #1
 801847e:	42a1      	cmp	r1, r4
 8018480:	d008      	beq.n	8018494 <memmove+0x28>
 8018482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018486:	f803 2f01 	strb.w	r2, [r3, #1]!
 801848a:	e7f8      	b.n	801847e <memmove+0x12>
 801848c:	4402      	add	r2, r0
 801848e:	4601      	mov	r1, r0
 8018490:	428a      	cmp	r2, r1
 8018492:	d100      	bne.n	8018496 <memmove+0x2a>
 8018494:	bd10      	pop	{r4, pc}
 8018496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801849a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801849e:	e7f7      	b.n	8018490 <memmove+0x24>

080184a0 <_free_r>:
 80184a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80184a2:	2900      	cmp	r1, #0
 80184a4:	d048      	beq.n	8018538 <_free_r+0x98>
 80184a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80184aa:	9001      	str	r0, [sp, #4]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	f1a1 0404 	sub.w	r4, r1, #4
 80184b2:	bfb8      	it	lt
 80184b4:	18e4      	addlt	r4, r4, r3
 80184b6:	f000 f8d3 	bl	8018660 <__malloc_lock>
 80184ba:	4a20      	ldr	r2, [pc, #128]	; (801853c <_free_r+0x9c>)
 80184bc:	9801      	ldr	r0, [sp, #4]
 80184be:	6813      	ldr	r3, [r2, #0]
 80184c0:	4615      	mov	r5, r2
 80184c2:	b933      	cbnz	r3, 80184d2 <_free_r+0x32>
 80184c4:	6063      	str	r3, [r4, #4]
 80184c6:	6014      	str	r4, [r2, #0]
 80184c8:	b003      	add	sp, #12
 80184ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184ce:	f000 b8cd 	b.w	801866c <__malloc_unlock>
 80184d2:	42a3      	cmp	r3, r4
 80184d4:	d90b      	bls.n	80184ee <_free_r+0x4e>
 80184d6:	6821      	ldr	r1, [r4, #0]
 80184d8:	1862      	adds	r2, r4, r1
 80184da:	4293      	cmp	r3, r2
 80184dc:	bf04      	itt	eq
 80184de:	681a      	ldreq	r2, [r3, #0]
 80184e0:	685b      	ldreq	r3, [r3, #4]
 80184e2:	6063      	str	r3, [r4, #4]
 80184e4:	bf04      	itt	eq
 80184e6:	1852      	addeq	r2, r2, r1
 80184e8:	6022      	streq	r2, [r4, #0]
 80184ea:	602c      	str	r4, [r5, #0]
 80184ec:	e7ec      	b.n	80184c8 <_free_r+0x28>
 80184ee:	461a      	mov	r2, r3
 80184f0:	685b      	ldr	r3, [r3, #4]
 80184f2:	b10b      	cbz	r3, 80184f8 <_free_r+0x58>
 80184f4:	42a3      	cmp	r3, r4
 80184f6:	d9fa      	bls.n	80184ee <_free_r+0x4e>
 80184f8:	6811      	ldr	r1, [r2, #0]
 80184fa:	1855      	adds	r5, r2, r1
 80184fc:	42a5      	cmp	r5, r4
 80184fe:	d10b      	bne.n	8018518 <_free_r+0x78>
 8018500:	6824      	ldr	r4, [r4, #0]
 8018502:	4421      	add	r1, r4
 8018504:	1854      	adds	r4, r2, r1
 8018506:	42a3      	cmp	r3, r4
 8018508:	6011      	str	r1, [r2, #0]
 801850a:	d1dd      	bne.n	80184c8 <_free_r+0x28>
 801850c:	681c      	ldr	r4, [r3, #0]
 801850e:	685b      	ldr	r3, [r3, #4]
 8018510:	6053      	str	r3, [r2, #4]
 8018512:	4421      	add	r1, r4
 8018514:	6011      	str	r1, [r2, #0]
 8018516:	e7d7      	b.n	80184c8 <_free_r+0x28>
 8018518:	d902      	bls.n	8018520 <_free_r+0x80>
 801851a:	230c      	movs	r3, #12
 801851c:	6003      	str	r3, [r0, #0]
 801851e:	e7d3      	b.n	80184c8 <_free_r+0x28>
 8018520:	6825      	ldr	r5, [r4, #0]
 8018522:	1961      	adds	r1, r4, r5
 8018524:	428b      	cmp	r3, r1
 8018526:	bf04      	itt	eq
 8018528:	6819      	ldreq	r1, [r3, #0]
 801852a:	685b      	ldreq	r3, [r3, #4]
 801852c:	6063      	str	r3, [r4, #4]
 801852e:	bf04      	itt	eq
 8018530:	1949      	addeq	r1, r1, r5
 8018532:	6021      	streq	r1, [r4, #0]
 8018534:	6054      	str	r4, [r2, #4]
 8018536:	e7c7      	b.n	80184c8 <_free_r+0x28>
 8018538:	b003      	add	sp, #12
 801853a:	bd30      	pop	{r4, r5, pc}
 801853c:	20000690 	.word	0x20000690

08018540 <_malloc_r>:
 8018540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018542:	1ccd      	adds	r5, r1, #3
 8018544:	f025 0503 	bic.w	r5, r5, #3
 8018548:	3508      	adds	r5, #8
 801854a:	2d0c      	cmp	r5, #12
 801854c:	bf38      	it	cc
 801854e:	250c      	movcc	r5, #12
 8018550:	2d00      	cmp	r5, #0
 8018552:	4606      	mov	r6, r0
 8018554:	db01      	blt.n	801855a <_malloc_r+0x1a>
 8018556:	42a9      	cmp	r1, r5
 8018558:	d903      	bls.n	8018562 <_malloc_r+0x22>
 801855a:	230c      	movs	r3, #12
 801855c:	6033      	str	r3, [r6, #0]
 801855e:	2000      	movs	r0, #0
 8018560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018562:	f000 f87d 	bl	8018660 <__malloc_lock>
 8018566:	4921      	ldr	r1, [pc, #132]	; (80185ec <_malloc_r+0xac>)
 8018568:	680a      	ldr	r2, [r1, #0]
 801856a:	4614      	mov	r4, r2
 801856c:	b99c      	cbnz	r4, 8018596 <_malloc_r+0x56>
 801856e:	4f20      	ldr	r7, [pc, #128]	; (80185f0 <_malloc_r+0xb0>)
 8018570:	683b      	ldr	r3, [r7, #0]
 8018572:	b923      	cbnz	r3, 801857e <_malloc_r+0x3e>
 8018574:	4621      	mov	r1, r4
 8018576:	4630      	mov	r0, r6
 8018578:	f000 f862 	bl	8018640 <_sbrk_r>
 801857c:	6038      	str	r0, [r7, #0]
 801857e:	4629      	mov	r1, r5
 8018580:	4630      	mov	r0, r6
 8018582:	f000 f85d 	bl	8018640 <_sbrk_r>
 8018586:	1c43      	adds	r3, r0, #1
 8018588:	d123      	bne.n	80185d2 <_malloc_r+0x92>
 801858a:	230c      	movs	r3, #12
 801858c:	6033      	str	r3, [r6, #0]
 801858e:	4630      	mov	r0, r6
 8018590:	f000 f86c 	bl	801866c <__malloc_unlock>
 8018594:	e7e3      	b.n	801855e <_malloc_r+0x1e>
 8018596:	6823      	ldr	r3, [r4, #0]
 8018598:	1b5b      	subs	r3, r3, r5
 801859a:	d417      	bmi.n	80185cc <_malloc_r+0x8c>
 801859c:	2b0b      	cmp	r3, #11
 801859e:	d903      	bls.n	80185a8 <_malloc_r+0x68>
 80185a0:	6023      	str	r3, [r4, #0]
 80185a2:	441c      	add	r4, r3
 80185a4:	6025      	str	r5, [r4, #0]
 80185a6:	e004      	b.n	80185b2 <_malloc_r+0x72>
 80185a8:	6863      	ldr	r3, [r4, #4]
 80185aa:	42a2      	cmp	r2, r4
 80185ac:	bf0c      	ite	eq
 80185ae:	600b      	streq	r3, [r1, #0]
 80185b0:	6053      	strne	r3, [r2, #4]
 80185b2:	4630      	mov	r0, r6
 80185b4:	f000 f85a 	bl	801866c <__malloc_unlock>
 80185b8:	f104 000b 	add.w	r0, r4, #11
 80185bc:	1d23      	adds	r3, r4, #4
 80185be:	f020 0007 	bic.w	r0, r0, #7
 80185c2:	1ac2      	subs	r2, r0, r3
 80185c4:	d0cc      	beq.n	8018560 <_malloc_r+0x20>
 80185c6:	1a1b      	subs	r3, r3, r0
 80185c8:	50a3      	str	r3, [r4, r2]
 80185ca:	e7c9      	b.n	8018560 <_malloc_r+0x20>
 80185cc:	4622      	mov	r2, r4
 80185ce:	6864      	ldr	r4, [r4, #4]
 80185d0:	e7cc      	b.n	801856c <_malloc_r+0x2c>
 80185d2:	1cc4      	adds	r4, r0, #3
 80185d4:	f024 0403 	bic.w	r4, r4, #3
 80185d8:	42a0      	cmp	r0, r4
 80185da:	d0e3      	beq.n	80185a4 <_malloc_r+0x64>
 80185dc:	1a21      	subs	r1, r4, r0
 80185de:	4630      	mov	r0, r6
 80185e0:	f000 f82e 	bl	8018640 <_sbrk_r>
 80185e4:	3001      	adds	r0, #1
 80185e6:	d1dd      	bne.n	80185a4 <_malloc_r+0x64>
 80185e8:	e7cf      	b.n	801858a <_malloc_r+0x4a>
 80185ea:	bf00      	nop
 80185ec:	20000690 	.word	0x20000690
 80185f0:	20000694 	.word	0x20000694

080185f4 <_realloc_r>:
 80185f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185f6:	4607      	mov	r7, r0
 80185f8:	4614      	mov	r4, r2
 80185fa:	460e      	mov	r6, r1
 80185fc:	b921      	cbnz	r1, 8018608 <_realloc_r+0x14>
 80185fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018602:	4611      	mov	r1, r2
 8018604:	f7ff bf9c 	b.w	8018540 <_malloc_r>
 8018608:	b922      	cbnz	r2, 8018614 <_realloc_r+0x20>
 801860a:	f7ff ff49 	bl	80184a0 <_free_r>
 801860e:	4625      	mov	r5, r4
 8018610:	4628      	mov	r0, r5
 8018612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018614:	f000 f830 	bl	8018678 <_malloc_usable_size_r>
 8018618:	42a0      	cmp	r0, r4
 801861a:	d20f      	bcs.n	801863c <_realloc_r+0x48>
 801861c:	4621      	mov	r1, r4
 801861e:	4638      	mov	r0, r7
 8018620:	f7ff ff8e 	bl	8018540 <_malloc_r>
 8018624:	4605      	mov	r5, r0
 8018626:	2800      	cmp	r0, #0
 8018628:	d0f2      	beq.n	8018610 <_realloc_r+0x1c>
 801862a:	4631      	mov	r1, r6
 801862c:	4622      	mov	r2, r4
 801862e:	f7ff ff0f 	bl	8018450 <memcpy>
 8018632:	4631      	mov	r1, r6
 8018634:	4638      	mov	r0, r7
 8018636:	f7ff ff33 	bl	80184a0 <_free_r>
 801863a:	e7e9      	b.n	8018610 <_realloc_r+0x1c>
 801863c:	4635      	mov	r5, r6
 801863e:	e7e7      	b.n	8018610 <_realloc_r+0x1c>

08018640 <_sbrk_r>:
 8018640:	b538      	push	{r3, r4, r5, lr}
 8018642:	4d06      	ldr	r5, [pc, #24]	; (801865c <_sbrk_r+0x1c>)
 8018644:	2300      	movs	r3, #0
 8018646:	4604      	mov	r4, r0
 8018648:	4608      	mov	r0, r1
 801864a:	602b      	str	r3, [r5, #0]
 801864c:	f7ee fa44 	bl	8006ad8 <_sbrk>
 8018650:	1c43      	adds	r3, r0, #1
 8018652:	d102      	bne.n	801865a <_sbrk_r+0x1a>
 8018654:	682b      	ldr	r3, [r5, #0]
 8018656:	b103      	cbz	r3, 801865a <_sbrk_r+0x1a>
 8018658:	6023      	str	r3, [r4, #0]
 801865a:	bd38      	pop	{r3, r4, r5, pc}
 801865c:	200065ec 	.word	0x200065ec

08018660 <__malloc_lock>:
 8018660:	4801      	ldr	r0, [pc, #4]	; (8018668 <__malloc_lock+0x8>)
 8018662:	f000 b811 	b.w	8018688 <__retarget_lock_acquire_recursive>
 8018666:	bf00      	nop
 8018668:	200065f4 	.word	0x200065f4

0801866c <__malloc_unlock>:
 801866c:	4801      	ldr	r0, [pc, #4]	; (8018674 <__malloc_unlock+0x8>)
 801866e:	f000 b80c 	b.w	801868a <__retarget_lock_release_recursive>
 8018672:	bf00      	nop
 8018674:	200065f4 	.word	0x200065f4

08018678 <_malloc_usable_size_r>:
 8018678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801867c:	1f18      	subs	r0, r3, #4
 801867e:	2b00      	cmp	r3, #0
 8018680:	bfbc      	itt	lt
 8018682:	580b      	ldrlt	r3, [r1, r0]
 8018684:	18c0      	addlt	r0, r0, r3
 8018686:	4770      	bx	lr

08018688 <__retarget_lock_acquire_recursive>:
 8018688:	4770      	bx	lr

0801868a <__retarget_lock_release_recursive>:
 801868a:	4770      	bx	lr

0801868c <_init>:
 801868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801868e:	bf00      	nop
 8018690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018692:	bc08      	pop	{r3}
 8018694:	469e      	mov	lr, r3
 8018696:	4770      	bx	lr

08018698 <_fini>:
 8018698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801869a:	bf00      	nop
 801869c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801869e:	bc08      	pop	{r3}
 80186a0:	469e      	mov	lr, r3
 80186a2:	4770      	bx	lr
